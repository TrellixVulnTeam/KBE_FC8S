# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Graphic3d')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Graphic3d')
    _Graphic3d = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Graphic3d', [dirname(__file__)])
        except ImportError:
            import _Graphic3d
            return _Graphic3d
        try:
            _mod = imp.load_module('_Graphic3d', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Graphic3d = swig_import_helper()
    del swig_import_helper
else:
    import _Graphic3d
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Graphic3d.delete_SwigPyIterator

    def value(self):
        return _Graphic3d.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Graphic3d.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Graphic3d.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Graphic3d.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Graphic3d.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Graphic3d.SwigPyIterator_copy(self)

    def next(self):
        return _Graphic3d.SwigPyIterator_next(self)

    def __next__(self):
        return _Graphic3d.SwigPyIterator___next__(self)

    def previous(self):
        return _Graphic3d.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Graphic3d.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Graphic3d.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Graphic3d.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Graphic3d.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Graphic3d.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Graphic3d.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Graphic3d.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Graphic3d.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Graphic3d.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_Graphic3d.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _Graphic3d.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Graphic3d.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Graphic3d.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _Graphic3d.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _Graphic3d.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _Graphic3d.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Graphic3d.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_Graphic3d.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _Graphic3d.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Graphic3d.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Graphic3d.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _Graphic3d.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _Graphic3d.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _Graphic3d.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _Graphic3d.ptr_to_number(item)
ptr_to_number = _Graphic3d.ptr_to_number

def HashCode(*args):
    return _Graphic3d.HashCode(*args)
HashCode = _Graphic3d.HashCode

def ptr_equal(a, b):
    return _Graphic3d.ptr_equal(a, b)
ptr_equal = _Graphic3d.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BVH
else:
    import BVH
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Image
else:
    import Image
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Aspect
else:
    import Aspect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Font
else:
    import Font
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
Graphic3d_AlphaMode_Opaque = _Graphic3d.Graphic3d_AlphaMode_Opaque
Graphic3d_AlphaMode_Mask = _Graphic3d.Graphic3d_AlphaMode_Mask
Graphic3d_AlphaMode_Blend = _Graphic3d.Graphic3d_AlphaMode_Blend
Graphic3d_AlphaMode_BlendAuto = _Graphic3d.Graphic3d_AlphaMode_BlendAuto
Graphic3d_TOA_POS = _Graphic3d.Graphic3d_TOA_POS
Graphic3d_TOA_NORM = _Graphic3d.Graphic3d_TOA_NORM
Graphic3d_TOA_UV = _Graphic3d.Graphic3d_TOA_UV
Graphic3d_TOA_COLOR = _Graphic3d.Graphic3d_TOA_COLOR
Graphic3d_TOA_CUSTOM = _Graphic3d.Graphic3d_TOA_CUSTOM
Graphic3d_TOD_USHORT = _Graphic3d.Graphic3d_TOD_USHORT
Graphic3d_TOD_UINT = _Graphic3d.Graphic3d_TOD_UINT
Graphic3d_TOD_VEC2 = _Graphic3d.Graphic3d_TOD_VEC2
Graphic3d_TOD_VEC3 = _Graphic3d.Graphic3d_TOD_VEC3
Graphic3d_TOD_VEC4 = _Graphic3d.Graphic3d_TOD_VEC4
Graphic3d_TOD_VEC4UB = _Graphic3d.Graphic3d_TOD_VEC4UB
Graphic3d_TOD_FLOAT = _Graphic3d.Graphic3d_TOD_FLOAT
Graphic3d_TOPA_UNDEFINED = _Graphic3d.Graphic3d_TOPA_UNDEFINED
Graphic3d_TOPA_POINTS = _Graphic3d.Graphic3d_TOPA_POINTS
Graphic3d_TOPA_SEGMENTS = _Graphic3d.Graphic3d_TOPA_SEGMENTS
Graphic3d_TOPA_POLYLINES = _Graphic3d.Graphic3d_TOPA_POLYLINES
Graphic3d_TOPA_TRIANGLES = _Graphic3d.Graphic3d_TOPA_TRIANGLES
Graphic3d_TOPA_TRIANGLESTRIPS = _Graphic3d.Graphic3d_TOPA_TRIANGLESTRIPS
Graphic3d_TOPA_TRIANGLEFANS = _Graphic3d.Graphic3d_TOPA_TRIANGLEFANS
Graphic3d_TOPA_LINES_ADJACENCY = _Graphic3d.Graphic3d_TOPA_LINES_ADJACENCY
Graphic3d_TOPA_LINE_STRIP_ADJACENCY = _Graphic3d.Graphic3d_TOPA_LINE_STRIP_ADJACENCY
Graphic3d_TOPA_TRIANGLES_ADJACENCY = _Graphic3d.Graphic3d_TOPA_TRIANGLES_ADJACENCY
Graphic3d_TOPA_TRIANGLE_STRIP_ADJACENCY = _Graphic3d.Graphic3d_TOPA_TRIANGLE_STRIP_ADJACENCY
Graphic3d_TOPA_QUADRANGLES = _Graphic3d.Graphic3d_TOPA_QUADRANGLES
Graphic3d_TOPA_QUADRANGLESTRIPS = _Graphic3d.Graphic3d_TOPA_QUADRANGLESTRIPS
Graphic3d_TOPA_POLYGONS = _Graphic3d.Graphic3d_TOPA_POLYGONS
Graphic3d_FM_SCHLICK = _Graphic3d.Graphic3d_FM_SCHLICK
Graphic3d_FM_CONSTANT = _Graphic3d.Graphic3d_FM_CONSTANT
Graphic3d_FM_CONDUCTOR = _Graphic3d.Graphic3d_FM_CONDUCTOR
Graphic3d_FM_DIELECTRIC = _Graphic3d.Graphic3d_FM_DIELECTRIC
Graphic3d_NOM_BRASS = _Graphic3d.Graphic3d_NOM_BRASS
Graphic3d_NOM_BRONZE = _Graphic3d.Graphic3d_NOM_BRONZE
Graphic3d_NOM_COPPER = _Graphic3d.Graphic3d_NOM_COPPER
Graphic3d_NOM_GOLD = _Graphic3d.Graphic3d_NOM_GOLD
Graphic3d_NOM_PEWTER = _Graphic3d.Graphic3d_NOM_PEWTER
Graphic3d_NOM_PLASTER = _Graphic3d.Graphic3d_NOM_PLASTER
Graphic3d_NOM_PLASTIC = _Graphic3d.Graphic3d_NOM_PLASTIC
Graphic3d_NOM_SILVER = _Graphic3d.Graphic3d_NOM_SILVER
Graphic3d_NOM_STEEL = _Graphic3d.Graphic3d_NOM_STEEL
Graphic3d_NOM_STONE = _Graphic3d.Graphic3d_NOM_STONE
Graphic3d_NOM_SHINY_PLASTIC = _Graphic3d.Graphic3d_NOM_SHINY_PLASTIC
Graphic3d_NOM_SATIN = _Graphic3d.Graphic3d_NOM_SATIN
Graphic3d_NOM_METALIZED = _Graphic3d.Graphic3d_NOM_METALIZED
Graphic3d_NOM_NEON_GNC = _Graphic3d.Graphic3d_NOM_NEON_GNC
Graphic3d_NOM_CHROME = _Graphic3d.Graphic3d_NOM_CHROME
Graphic3d_NOM_ALUMINIUM = _Graphic3d.Graphic3d_NOM_ALUMINIUM
Graphic3d_NOM_OBSIDIAN = _Graphic3d.Graphic3d_NOM_OBSIDIAN
Graphic3d_NOM_NEON_PHC = _Graphic3d.Graphic3d_NOM_NEON_PHC
Graphic3d_NOM_JADE = _Graphic3d.Graphic3d_NOM_JADE
Graphic3d_NOM_CHARCOAL = _Graphic3d.Graphic3d_NOM_CHARCOAL
Graphic3d_NOM_WATER = _Graphic3d.Graphic3d_NOM_WATER
Graphic3d_NOM_GLASS = _Graphic3d.Graphic3d_NOM_GLASS
Graphic3d_NOM_DIAMOND = _Graphic3d.Graphic3d_NOM_DIAMOND
Graphic3d_NOM_TRANSPARENT = _Graphic3d.Graphic3d_NOM_TRANSPARENT
Graphic3d_NOM_DEFAULT = _Graphic3d.Graphic3d_NOM_DEFAULT
Graphic3d_NOM_UserDefined = _Graphic3d.Graphic3d_NOM_UserDefined
Graphic3d_MATERIAL_ASPECT = _Graphic3d.Graphic3d_MATERIAL_ASPECT
Graphic3d_MATERIAL_PHYSIC = _Graphic3d.Graphic3d_MATERIAL_PHYSIC
Graphic3d_TOR_AMBIENT = _Graphic3d.Graphic3d_TOR_AMBIENT
Graphic3d_TOR_DIFFUSE = _Graphic3d.Graphic3d_TOR_DIFFUSE
Graphic3d_TOR_SPECULAR = _Graphic3d.Graphic3d_TOR_SPECULAR
Graphic3d_TOR_EMISSION = _Graphic3d.Graphic3d_TOR_EMISSION
Graphic3d_TypeOfReflection_NB = _Graphic3d.Graphic3d_TypeOfReflection_NB
Graphic3d_TOS_VERTEX = _Graphic3d.Graphic3d_TOS_VERTEX
Graphic3d_TOS_TESS_CONTROL = _Graphic3d.Graphic3d_TOS_TESS_CONTROL
Graphic3d_TOS_TESS_EVALUATION = _Graphic3d.Graphic3d_TOS_TESS_EVALUATION
Graphic3d_TOS_GEOMETRY = _Graphic3d.Graphic3d_TOS_GEOMETRY
Graphic3d_TOS_FRAGMENT = _Graphic3d.Graphic3d_TOS_FRAGMENT
Graphic3d_TOS_COMPUTE = _Graphic3d.Graphic3d_TOS_COMPUTE
Graphic3d_LOTA_OFF = _Graphic3d.Graphic3d_LOTA_OFF
Graphic3d_LOTA_FAST = _Graphic3d.Graphic3d_LOTA_FAST
Graphic3d_LOTA_MIDDLE = _Graphic3d.Graphic3d_LOTA_MIDDLE
Graphic3d_LOTA_QUALITY = _Graphic3d.Graphic3d_LOTA_QUALITY
Graphic3d_TextureUnit_0 = _Graphic3d.Graphic3d_TextureUnit_0
Graphic3d_TextureUnit_1 = _Graphic3d.Graphic3d_TextureUnit_1
Graphic3d_TextureUnit_2 = _Graphic3d.Graphic3d_TextureUnit_2
Graphic3d_TextureUnit_3 = _Graphic3d.Graphic3d_TextureUnit_3
Graphic3d_TextureUnit_4 = _Graphic3d.Graphic3d_TextureUnit_4
Graphic3d_TextureUnit_5 = _Graphic3d.Graphic3d_TextureUnit_5
Graphic3d_TextureUnit_6 = _Graphic3d.Graphic3d_TextureUnit_6
Graphic3d_TextureUnit_7 = _Graphic3d.Graphic3d_TextureUnit_7
Graphic3d_TextureUnit_8 = _Graphic3d.Graphic3d_TextureUnit_8
Graphic3d_TextureUnit_9 = _Graphic3d.Graphic3d_TextureUnit_9
Graphic3d_TextureUnit_10 = _Graphic3d.Graphic3d_TextureUnit_10
Graphic3d_TextureUnit_11 = _Graphic3d.Graphic3d_TextureUnit_11
Graphic3d_TextureUnit_12 = _Graphic3d.Graphic3d_TextureUnit_12
Graphic3d_TextureUnit_13 = _Graphic3d.Graphic3d_TextureUnit_13
Graphic3d_TextureUnit_14 = _Graphic3d.Graphic3d_TextureUnit_14
Graphic3d_TextureUnit_15 = _Graphic3d.Graphic3d_TextureUnit_15
Graphic3d_TextureUnit_BaseColor = _Graphic3d.Graphic3d_TextureUnit_BaseColor
Graphic3d_TextureUnit_NB = _Graphic3d.Graphic3d_TextureUnit_NB
Graphic3d_TOTF_NEAREST = _Graphic3d.Graphic3d_TOTF_NEAREST
Graphic3d_TOTF_BILINEAR = _Graphic3d.Graphic3d_TOTF_BILINEAR
Graphic3d_TOTF_TRILINEAR = _Graphic3d.Graphic3d_TOTF_TRILINEAR
Graphic3d_TOTM_OBJECT = _Graphic3d.Graphic3d_TOTM_OBJECT
Graphic3d_TOTM_SPHERE = _Graphic3d.Graphic3d_TOTM_SPHERE
Graphic3d_TOTM_EYE = _Graphic3d.Graphic3d_TOTM_EYE
Graphic3d_TOTM_MANUAL = _Graphic3d.Graphic3d_TOTM_MANUAL
Graphic3d_TOTM_SPRITE = _Graphic3d.Graphic3d_TOTM_SPRITE
Graphic3d_TOT_1D = _Graphic3d.Graphic3d_TOT_1D
Graphic3d_TOT_2D = _Graphic3d.Graphic3d_TOT_2D
Graphic3d_TOT_2D_MIPMAP = _Graphic3d.Graphic3d_TOT_2D_MIPMAP
Graphic3d_TOSM_DEFAULT = _Graphic3d.Graphic3d_TOSM_DEFAULT
Graphic3d_TOSM_UNLIT = _Graphic3d.Graphic3d_TOSM_UNLIT
Graphic3d_TOSM_FACET = _Graphic3d.Graphic3d_TOSM_FACET
Graphic3d_TOSM_VERTEX = _Graphic3d.Graphic3d_TOSM_VERTEX
Graphic3d_TOSM_FRAGMENT = _Graphic3d.Graphic3d_TOSM_FRAGMENT
Graphic3d_TOSM_NONE = _Graphic3d.Graphic3d_TOSM_NONE
V3d_COLOR = _Graphic3d.V3d_COLOR
V3d_FLAT = _Graphic3d.V3d_FLAT
V3d_GOURAUD = _Graphic3d.V3d_GOURAUD
V3d_PHONG = _Graphic3d.V3d_PHONG
Graphic3d_TypeOfShadingModel_NB = _Graphic3d.Graphic3d_TypeOfShadingModel_NB
Graphic3d_BT_RGB = _Graphic3d.Graphic3d_BT_RGB
Graphic3d_BT_RGBA = _Graphic3d.Graphic3d_BT_RGBA
Graphic3d_BT_Depth = _Graphic3d.Graphic3d_BT_Depth
Graphic3d_BT_RGB_RayTraceHdrLeft = _Graphic3d.Graphic3d_BT_RGB_RayTraceHdrLeft
Graphic3d_CappingFlags_None = _Graphic3d.Graphic3d_CappingFlags_None
Graphic3d_CappingFlags_ObjectMaterial = _Graphic3d.Graphic3d_CappingFlags_ObjectMaterial
Graphic3d_CappingFlags_ObjectTexture = _Graphic3d.Graphic3d_CappingFlags_ObjectTexture
Graphic3d_CappingFlags_ObjectShader = _Graphic3d.Graphic3d_CappingFlags_ObjectShader
Graphic3d_CappingFlags_ObjectAspect = _Graphic3d.Graphic3d_CappingFlags_ObjectAspect
Graphic3d_TOLS_AMBIENT = _Graphic3d.Graphic3d_TOLS_AMBIENT
Graphic3d_TOLS_DIRECTIONAL = _Graphic3d.Graphic3d_TOLS_DIRECTIONAL
Graphic3d_TOLS_POSITIONAL = _Graphic3d.Graphic3d_TOLS_POSITIONAL
Graphic3d_TOLS_SPOT = _Graphic3d.Graphic3d_TOLS_SPOT
V3d_AMBIENT = _Graphic3d.V3d_AMBIENT
V3d_DIRECTIONAL = _Graphic3d.V3d_DIRECTIONAL
V3d_POSITIONAL = _Graphic3d.V3d_POSITIONAL
V3d_SPOT = _Graphic3d.V3d_SPOT
Graphic3d_TypeOfLightSource_NB = _Graphic3d.Graphic3d_TypeOfLightSource_NB
Graphic3d_TP_UP = _Graphic3d.Graphic3d_TP_UP
Graphic3d_TP_DOWN = _Graphic3d.Graphic3d_TP_DOWN
Graphic3d_TP_LEFT = _Graphic3d.Graphic3d_TP_LEFT
Graphic3d_TP_RIGHT = _Graphic3d.Graphic3d_TP_RIGHT
Graphic3d_HTA_LEFT = _Graphic3d.Graphic3d_HTA_LEFT
Graphic3d_HTA_CENTER = _Graphic3d.Graphic3d_HTA_CENTER
Graphic3d_HTA_RIGHT = _Graphic3d.Graphic3d_HTA_RIGHT
Graphic3d_VTA_BOTTOM = _Graphic3d.Graphic3d_VTA_BOTTOM
Graphic3d_VTA_CENTER = _Graphic3d.Graphic3d_VTA_CENTER
Graphic3d_VTA_TOP = _Graphic3d.Graphic3d_VTA_TOP
Graphic3d_VTA_TOPFIRSTLINE = _Graphic3d.Graphic3d_VTA_TOPFIRSTLINE
Graphic3d_ASPECT_LINE = _Graphic3d.Graphic3d_ASPECT_LINE
Graphic3d_ASPECT_TEXT = _Graphic3d.Graphic3d_ASPECT_TEXT
Graphic3d_ASPECT_MARKER = _Graphic3d.Graphic3d_ASPECT_MARKER
Graphic3d_ASPECT_FILL_AREA = _Graphic3d.Graphic3d_ASPECT_FILL_AREA
Graphic3d_ZLayerId_UNKNOWN = _Graphic3d.Graphic3d_ZLayerId_UNKNOWN
Graphic3d_ZLayerId_Default = _Graphic3d.Graphic3d_ZLayerId_Default
Graphic3d_ZLayerId_Top = _Graphic3d.Graphic3d_ZLayerId_Top
Graphic3d_ZLayerId_Topmost = _Graphic3d.Graphic3d_ZLayerId_Topmost
Graphic3d_ZLayerId_TopOSD = _Graphic3d.Graphic3d_ZLayerId_TopOSD
Graphic3d_ZLayerId_BotOSD = _Graphic3d.Graphic3d_ZLayerId_BotOSD
Graphic3d_TOC_REPLACE = _Graphic3d.Graphic3d_TOC_REPLACE
Graphic3d_TOC_POSTCONCATENATE = _Graphic3d.Graphic3d_TOC_POSTCONCATENATE
Graphic3d_TMF_None = _Graphic3d.Graphic3d_TMF_None
Graphic3d_TMF_ZoomPers = _Graphic3d.Graphic3d_TMF_ZoomPers
Graphic3d_TMF_RotatePers = _Graphic3d.Graphic3d_TMF_RotatePers
Graphic3d_TMF_TriedronPers = _Graphic3d.Graphic3d_TMF_TriedronPers
Graphic3d_TMF_2d = _Graphic3d.Graphic3d_TMF_2d
Graphic3d_TMF_ZoomRotatePers = _Graphic3d.Graphic3d_TMF_ZoomRotatePers
Graphic3d_DiagnosticInfo_Device = _Graphic3d.Graphic3d_DiagnosticInfo_Device
Graphic3d_DiagnosticInfo_FrameBuffer = _Graphic3d.Graphic3d_DiagnosticInfo_FrameBuffer
Graphic3d_DiagnosticInfo_Limits = _Graphic3d.Graphic3d_DiagnosticInfo_Limits
Graphic3d_DiagnosticInfo_Memory = _Graphic3d.Graphic3d_DiagnosticInfo_Memory
Graphic3d_DiagnosticInfo_NativePlatform = _Graphic3d.Graphic3d_DiagnosticInfo_NativePlatform
Graphic3d_DiagnosticInfo_Extensions = _Graphic3d.Graphic3d_DiagnosticInfo_Extensions
Graphic3d_DiagnosticInfo_Short = _Graphic3d.Graphic3d_DiagnosticInfo_Short
Graphic3d_DiagnosticInfo_Basic = _Graphic3d.Graphic3d_DiagnosticInfo_Basic
Graphic3d_DiagnosticInfo_Complete = _Graphic3d.Graphic3d_DiagnosticInfo_Complete
Graphic3d_EF_PostScript = _Graphic3d.Graphic3d_EF_PostScript
Graphic3d_EF_EnhPostScript = _Graphic3d.Graphic3d_EF_EnhPostScript
Graphic3d_EF_TEX = _Graphic3d.Graphic3d_EF_TEX
Graphic3d_EF_PDF = _Graphic3d.Graphic3d_EF_PDF
Graphic3d_EF_SVG = _Graphic3d.Graphic3d_EF_SVG
Graphic3d_EF_PGF = _Graphic3d.Graphic3d_EF_PGF
Graphic3d_EF_EMF = _Graphic3d.Graphic3d_EF_EMF
Graphic3d_RTM_BLEND_UNORDERED = _Graphic3d.Graphic3d_RTM_BLEND_UNORDERED
Graphic3d_RTM_BLEND_OIT = _Graphic3d.Graphic3d_RTM_BLEND_OIT
Graphic3d_RM_RASTERIZATION = _Graphic3d.Graphic3d_RM_RASTERIZATION
Graphic3d_RM_RAYTRACING = _Graphic3d.Graphic3d_RM_RAYTRACING
Graphic3d_StereoMode_QuadBuffer = _Graphic3d.Graphic3d_StereoMode_QuadBuffer
Graphic3d_StereoMode_Anaglyph = _Graphic3d.Graphic3d_StereoMode_Anaglyph
Graphic3d_StereoMode_RowInterlaced = _Graphic3d.Graphic3d_StereoMode_RowInterlaced
Graphic3d_StereoMode_ColumnInterlaced = _Graphic3d.Graphic3d_StereoMode_ColumnInterlaced
Graphic3d_StereoMode_ChessBoard = _Graphic3d.Graphic3d_StereoMode_ChessBoard
Graphic3d_StereoMode_SideBySide = _Graphic3d.Graphic3d_StereoMode_SideBySide
Graphic3d_StereoMode_OverUnder = _Graphic3d.Graphic3d_StereoMode_OverUnder
Graphic3d_StereoMode_SoftPageFlip = _Graphic3d.Graphic3d_StereoMode_SoftPageFlip
Graphic3d_StereoMode_NB = _Graphic3d.Graphic3d_StereoMode_NB
Graphic3d_ToneMappingMethod_Disabled = _Graphic3d.Graphic3d_ToneMappingMethod_Disabled
Graphic3d_ToneMappingMethod_Filmic = _Graphic3d.Graphic3d_ToneMappingMethod_Filmic
Graphic3d_TOS_WIREFRAME = _Graphic3d.Graphic3d_TOS_WIREFRAME
Graphic3d_TOS_SHADING = _Graphic3d.Graphic3d_TOS_SHADING
Graphic3d_TOS_COMPUTED = _Graphic3d.Graphic3d_TOS_COMPUTED
Graphic3d_TOS_ALL = _Graphic3d.Graphic3d_TOS_ALL
Graphic3d_TOC_ANCESTOR = _Graphic3d.Graphic3d_TOC_ANCESTOR
Graphic3d_TOC_DESCENDANT = _Graphic3d.Graphic3d_TOC_DESCENDANT
Graphic3d_ST_Simple = _Graphic3d.Graphic3d_ST_Simple
Graphic3d_ST_BSP_Tree = _Graphic3d.Graphic3d_ST_BSP_Tree
Graphic3d_NOT_ENV_CLOUDS = _Graphic3d.Graphic3d_NOT_ENV_CLOUDS
Graphic3d_NOT_ENV_CV = _Graphic3d.Graphic3d_NOT_ENV_CV
Graphic3d_NOT_ENV_MEDIT = _Graphic3d.Graphic3d_NOT_ENV_MEDIT
Graphic3d_NOT_ENV_PEARL = _Graphic3d.Graphic3d_NOT_ENV_PEARL
Graphic3d_NOT_ENV_SKY1 = _Graphic3d.Graphic3d_NOT_ENV_SKY1
Graphic3d_NOT_ENV_SKY2 = _Graphic3d.Graphic3d_NOT_ENV_SKY2
Graphic3d_NOT_ENV_LINES = _Graphic3d.Graphic3d_NOT_ENV_LINES
Graphic3d_NOT_ENV_ROAD = _Graphic3d.Graphic3d_NOT_ENV_ROAD
Graphic3d_NOT_ENV_UNKNOWN = _Graphic3d.Graphic3d_NOT_ENV_UNKNOWN
Graphic3d_TOA_YES = _Graphic3d.Graphic3d_TOA_YES
Graphic3d_TOA_NO = _Graphic3d.Graphic3d_TOA_NO
Graphic3d_TOA_COMPUTE = _Graphic3d.Graphic3d_TOA_COMPUTE
Graphic3d_TOBM_AUTOMATIC = _Graphic3d.Graphic3d_TOBM_AUTOMATIC
Graphic3d_TOBM_FORCE = _Graphic3d.Graphic3d_TOBM_FORCE
Graphic3d_TOBM_DISABLE = _Graphic3d.Graphic3d_TOBM_DISABLE
Graphic3d_TOV_WIREFRAME = _Graphic3d.Graphic3d_TOV_WIREFRAME
Graphic3d_TOV_SHADING = _Graphic3d.Graphic3d_TOV_SHADING
Graphic3d_ZLayerDepthTest = _Graphic3d.Graphic3d_ZLayerDepthTest
Graphic3d_ZLayerDepthWrite = _Graphic3d.Graphic3d_ZLayerDepthWrite
Graphic3d_ZLayerDepthClear = _Graphic3d.Graphic3d_ZLayerDepthClear
Graphic3d_ZLayerDepthOffset = _Graphic3d.Graphic3d_ZLayerDepthOffset
Graphic3d_TypeOfLimit_MaxNbLights = _Graphic3d.Graphic3d_TypeOfLimit_MaxNbLights
Graphic3d_TypeOfLimit_MaxNbClipPlanes = _Graphic3d.Graphic3d_TypeOfLimit_MaxNbClipPlanes
Graphic3d_TypeOfLimit_MaxNbViews = _Graphic3d.Graphic3d_TypeOfLimit_MaxNbViews
Graphic3d_TypeOfLimit_MaxTextureSize = _Graphic3d.Graphic3d_TypeOfLimit_MaxTextureSize
Graphic3d_TypeOfLimit_MaxCombinedTextureUnits = _Graphic3d.Graphic3d_TypeOfLimit_MaxCombinedTextureUnits
Graphic3d_TypeOfLimit_MaxMsaa = _Graphic3d.Graphic3d_TypeOfLimit_MaxMsaa
Graphic3d_TypeOfLimit_HasRayTracing = _Graphic3d.Graphic3d_TypeOfLimit_HasRayTracing
Graphic3d_TypeOfLimit_HasRayTracingTextures = _Graphic3d.Graphic3d_TypeOfLimit_HasRayTracingTextures
Graphic3d_TypeOfLimit_HasRayTracingAdaptiveSampling = _Graphic3d.Graphic3d_TypeOfLimit_HasRayTracingAdaptiveSampling
Graphic3d_TypeOfLimit_HasBlendedOit = _Graphic3d.Graphic3d_TypeOfLimit_HasBlendedOit
Graphic3d_TypeOfLimit_HasBlendedOitMsaa = _Graphic3d.Graphic3d_TypeOfLimit_HasBlendedOitMsaa
Graphic3d_TypeOfLimit_NB = _Graphic3d.Graphic3d_TypeOfLimit_NB
Graphic3d_NOT_1D_ELEVATION = _Graphic3d.Graphic3d_NOT_1D_ELEVATION
Graphic3d_NOT_1D_UNKNOWN = _Graphic3d.Graphic3d_NOT_1D_UNKNOWN
Graphic3d_NOT_2D_MATRA = _Graphic3d.Graphic3d_NOT_2D_MATRA
Graphic3d_NOT_2D_ALIENSKIN = _Graphic3d.Graphic3d_NOT_2D_ALIENSKIN
Graphic3d_NOT_2D_BLUE_ROCK = _Graphic3d.Graphic3d_NOT_2D_BLUE_ROCK
Graphic3d_NOT_2D_BLUEWHITE_PAPER = _Graphic3d.Graphic3d_NOT_2D_BLUEWHITE_PAPER
Graphic3d_NOT_2D_BRUSHED = _Graphic3d.Graphic3d_NOT_2D_BRUSHED
Graphic3d_NOT_2D_BUBBLES = _Graphic3d.Graphic3d_NOT_2D_BUBBLES
Graphic3d_NOT_2D_BUMP = _Graphic3d.Graphic3d_NOT_2D_BUMP
Graphic3d_NOT_2D_CAST = _Graphic3d.Graphic3d_NOT_2D_CAST
Graphic3d_NOT_2D_CHIPBD = _Graphic3d.Graphic3d_NOT_2D_CHIPBD
Graphic3d_NOT_2D_CLOUDS = _Graphic3d.Graphic3d_NOT_2D_CLOUDS
Graphic3d_NOT_2D_FLESH = _Graphic3d.Graphic3d_NOT_2D_FLESH
Graphic3d_NOT_2D_FLOOR = _Graphic3d.Graphic3d_NOT_2D_FLOOR
Graphic3d_NOT_2D_GALVNISD = _Graphic3d.Graphic3d_NOT_2D_GALVNISD
Graphic3d_NOT_2D_GRASS = _Graphic3d.Graphic3d_NOT_2D_GRASS
Graphic3d_NOT_2D_ALUMINUM = _Graphic3d.Graphic3d_NOT_2D_ALUMINUM
Graphic3d_NOT_2D_ROCK = _Graphic3d.Graphic3d_NOT_2D_ROCK
Graphic3d_NOT_2D_KNURL = _Graphic3d.Graphic3d_NOT_2D_KNURL
Graphic3d_NOT_2D_MAPLE = _Graphic3d.Graphic3d_NOT_2D_MAPLE
Graphic3d_NOT_2D_MARBLE = _Graphic3d.Graphic3d_NOT_2D_MARBLE
Graphic3d_NOT_2D_MOTTLED = _Graphic3d.Graphic3d_NOT_2D_MOTTLED
Graphic3d_NOT_2D_RAIN = _Graphic3d.Graphic3d_NOT_2D_RAIN
Graphic3d_NOT_2D_CHESS = _Graphic3d.Graphic3d_NOT_2D_CHESS
Graphic3d_NOT_2D_UNKNOWN = _Graphic3d.Graphic3d_NOT_2D_UNKNOWN
Graphic3d_NOTP_XY = _Graphic3d.Graphic3d_NOTP_XY
Graphic3d_NOTP_YZ = _Graphic3d.Graphic3d_NOTP_YZ
Graphic3d_NOTP_ZX = _Graphic3d.Graphic3d_NOTP_ZX
Graphic3d_NOTP_UNKNOWN = _Graphic3d.Graphic3d_NOTP_UNKNOWN
Graphic3d_TOB_NONE = _Graphic3d.Graphic3d_TOB_NONE
Graphic3d_TOB_GRADIENT = _Graphic3d.Graphic3d_TOB_GRADIENT
Graphic3d_TOB_TEXTURE = _Graphic3d.Graphic3d_TOB_TEXTURE
class Graphic3d_TextureRoot(Standard.Standard_Transient):
    """This is the texture root class enable the dialog with the GraphicDriver allows the loading of texture."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_TextureRoot
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_TextureRoot(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_TextureRoot_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_TextureRoot_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_TextureRoot_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TexturesFolder(*args):
        """
        TexturesFolder() -> TCollection_AsciiString

        The path to textures determined from CSF_MDTVTexturesDirectory or CASROOT environment variables.
        @return the root folder with default textures.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Graphic3d_TextureRoot_TexturesFolder(*args)

    TexturesFolder = staticmethod(TexturesFolder)

    def IsDone(self, *args):
        """
        IsDone(Graphic3d_TextureRoot self) -> Standard_Boolean

        Checks if a texture class is valid or not.
        @return true if the construction of the class is correct

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_TextureRoot_IsDone(self, *args)


    def Path(self, *args):
        """
        Returns the full path of the defined texture.
        It could be empty path if GetImage() is overridden to load image not from file.

        :rtype: OCC.wrapper.OSD.OSD_Path

        """
        res = _Graphic3d.Graphic3d_TextureRoot_Path(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Type(self, *args):
        """
        Type(Graphic3d_TextureRoot self) -> Graphic3d_TypeOfTexture

        @return the texture type.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfTexture

        """
        return _Graphic3d.Graphic3d_TextureRoot_Type(self, *args)


    def GetId(self, *args):
        """
        This ID will be used to manage resource in graphic driver.

        Default implementation generates unique ID within constructor;
        inheritors may re-initialize it within their constructor,
        but should never modify it afterwards.

        Multiple Graphic3d_TextureRoot instances with same ID
        will be treated as single texture with different parameters
        to optimize memory usage though this will be more natural
        to use same instance of Graphic3d_TextureRoot when possible.

        If this ID is set to empty string by inheritor,
        then independent graphical resource will be created
        for each instance of Graphic3d_AspectFillArea3d where texture will be used.

        @return texture identifier.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Graphic3d_TextureRoot_GetId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Revision(self, *args):
        """
        Revision(Graphic3d_TextureRoot self) -> Standard_Size

        Return image revision.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Graphic3d_TextureRoot_Revision(self, *args)


    def UpdateRevision(self, *args):
        """
        UpdateRevision(Graphic3d_TextureRoot self)

        Update image revision.
        Can be used for signaling changes in the texture source (e.g. file update, pixmap update)
        without re-creating texture source itself (since unique id should be never modified).


        """
        return _Graphic3d.Graphic3d_TextureRoot_UpdateRevision(self, *args)


    def GetImage(self, *args):
        """
        GetImage(Graphic3d_TextureRoot self) -> Handle_Image_PixMap

        This method will be called by graphic driver each time when texture resource should be created.
        Default constructors allow defining the texture source as path to texture image or directly as pixmap.
        If the source is defined as path, then the image will be dynamically loaded when this method is called
        (and no copy will be preserved in this class instance).
        Inheritors may dynamically generate the image.
        Notice, image data should be in Bottom-Up order (see Image_PixMap::IsTopDown())!
        @return the image for texture.

        :rtype: OCC.wrapper.Image.Handle_Image_PixMap

        """
        return _Graphic3d.Graphic3d_TextureRoot_GetImage(self, *args)


    def GetParams(self, *args):
        """
        @return low-level texture parameters

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureParams

        """
        res = _Graphic3d.Graphic3d_TextureRoot_GetParams(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_TextureRoot
Graphic3d_TextureRoot_swigregister = _Graphic3d.Graphic3d_TextureRoot_swigregister
Graphic3d_TextureRoot_swigregister(Graphic3d_TextureRoot)

def Graphic3d_TextureRoot_get_type_name(*args):
    """
    Graphic3d_TextureRoot_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_TextureRoot_get_type_name(*args)

def Graphic3d_TextureRoot_get_type_descriptor(*args):
    """
    Graphic3d_TextureRoot_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_TextureRoot_get_type_descriptor(*args)

def Graphic3d_TextureRoot_TexturesFolder(*args):
    """
    Graphic3d_TextureRoot_TexturesFolder() -> TCollection_AsciiString

    The path to textures determined from CSF_MDTVTexturesDirectory or CASROOT environment variables.
    @return the root folder with default textures.

    :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

    """
    return _Graphic3d.Graphic3d_TextureRoot_TexturesFolder(*args)

class Graphic3d_TextureMap(Graphic3d_TextureRoot):
    """This is an abstract class for managing texture applyable on polygons."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_TextureMap
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_TextureMap(self) 
            return h


    def EnableSmooth(self, *args):
        """
        EnableSmooth(Graphic3d_TextureMap self)

        enable texture smoothing


        """
        return _Graphic3d.Graphic3d_TextureMap_EnableSmooth(self, *args)


    def IsSmoothed(self, *args):
        """
        IsSmoothed(Graphic3d_TextureMap self) -> Standard_Boolean

        Returns TRUE if the texture is smoothed.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_TextureMap_IsSmoothed(self, *args)


    def DisableSmooth(self, *args):
        """
        DisableSmooth(Graphic3d_TextureMap self)

        disable texture smoothing


        """
        return _Graphic3d.Graphic3d_TextureMap_DisableSmooth(self, *args)


    def EnableModulate(self, *args):
        """
        EnableModulate(Graphic3d_TextureMap self)

        enable texture modulate mode.
        the image is modulate with the shading of the surface.


        """
        return _Graphic3d.Graphic3d_TextureMap_EnableModulate(self, *args)


    def DisableModulate(self, *args):
        """
        DisableModulate(Graphic3d_TextureMap self)

        disable texture modulate mode.
        the image is directly decal on the surface.


        """
        return _Graphic3d.Graphic3d_TextureMap_DisableModulate(self, *args)


    def IsModulate(self, *args):
        """
        IsModulate(Graphic3d_TextureMap self) -> Standard_Boolean

        Returns TRUE if the texture is modulate.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_TextureMap_IsModulate(self, *args)


    def EnableRepeat(self, *args):
        """
        EnableRepeat(Graphic3d_TextureMap self)

        use this methods if you want to enable
        texture repetition on your objects.


        """
        return _Graphic3d.Graphic3d_TextureMap_EnableRepeat(self, *args)


    def DisableRepeat(self, *args):
        """
        DisableRepeat(Graphic3d_TextureMap self)

        use this methods if you want to disable
        texture repetition on your objects.


        """
        return _Graphic3d.Graphic3d_TextureMap_DisableRepeat(self, *args)


    def IsRepeat(self, *args):
        """
        IsRepeat(Graphic3d_TextureMap self) -> Standard_Boolean

        Returns TRUE if the texture repeat is enable.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_TextureMap_IsRepeat(self, *args)


    def AnisoFilter(self, *args):
        """
        AnisoFilter(Graphic3d_TextureMap self) -> Graphic3d_LevelOfTextureAnisotropy

        @return level of anisontropy texture filter.
        Default value is Graphic3d_LOTA_OFF.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_LevelOfTextureAnisotropy

        """
        return _Graphic3d.Graphic3d_TextureMap_AnisoFilter(self, *args)


    def SetAnisoFilter(self, *args):
        """
        SetAnisoFilter(Graphic3d_TextureMap self, Graphic3d_LevelOfTextureAnisotropy const theLevel)

        @param theLevel level of anisontropy texture filter.

        :type theLevel: OCC.wrapper.Graphic3d.Graphic3d_LevelOfTextureAnisotropy

        """
        return _Graphic3d.Graphic3d_TextureMap_SetAnisoFilter(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_TextureMap_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_TextureMap_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_TextureMap_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_TextureMap
Graphic3d_TextureMap_swigregister = _Graphic3d.Graphic3d_TextureMap_swigregister
Graphic3d_TextureMap_swigregister(Graphic3d_TextureMap)

def Graphic3d_TextureMap_get_type_name(*args):
    """
    Graphic3d_TextureMap_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_TextureMap_get_type_name(*args)

def Graphic3d_TextureMap_get_type_descriptor(*args):
    """
    Graphic3d_TextureMap_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_TextureMap_get_type_descriptor(*args)

class Graphic3d_DataStructureManager(Standard.Standard_Transient):
    """
    This class allows the definition of a manager to
    which the graphic objects are associated.
    It allows them to be globally manipulated.
    It defines the global attributes.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_DataStructureManager
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_DataStructureManager(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_DataStructureManager_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_DataStructureManager_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_DataStructureManager_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_DataStructureManager
Graphic3d_DataStructureManager_swigregister = _Graphic3d.Graphic3d_DataStructureManager_swigregister
Graphic3d_DataStructureManager_swigregister(Graphic3d_DataStructureManager)

def Graphic3d_DataStructureManager_get_type_name(*args):
    """
    Graphic3d_DataStructureManager_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_DataStructureManager_get_type_name(*args)

def Graphic3d_DataStructureManager_get_type_descriptor(*args):
    """
    Graphic3d_DataStructureManager_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_DataStructureManager_get_type_descriptor(*args)

class Graphic3d_TextureEnv(Graphic3d_TextureRoot):
    """This class provides environment texture."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_TextureEnv
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_TextureEnv(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Graphic3d_TextureEnv self, TCollection_AsciiString theFileName) -> Graphic3d_TextureEnv
        __init__(Graphic3d_TextureEnv self, Graphic3d_NameOfTextureEnv const theName) -> Graphic3d_TextureEnv
        __init__(Graphic3d_TextureEnv self, Handle_Image_PixMap thePixMap) -> Graphic3d_TextureEnv

        Creates an environment texture from the pixmap.

        :type thePixMap: OCC.wrapper.Image.Handle_Image_PixMap

        """
        this = _Graphic3d.new_Graphic3d_TextureEnv(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Name(self, *args):
        """
        Name(Graphic3d_TextureEnv self) -> Graphic3d_NameOfTextureEnv

        Returns the name of the predefined textures or NOT_ENV_UNKNOWN
        when the name is given as a filename.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_NameOfTextureEnv

        """
        return _Graphic3d.Graphic3d_TextureEnv_Name(self, *args)


    def NumberOfTextures(*args):
        """
        NumberOfTextures() -> Standard_Integer

        Returns the number of predefined textures.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_TextureEnv_NumberOfTextures(*args)

    NumberOfTextures = staticmethod(NumberOfTextures)

    def TextureName(*args):
        """
        TextureName(Standard_Integer const theRank) -> TCollection_AsciiString

        Returns the name of the predefined texture of rank <aRank>

        :type theRank: int
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Graphic3d_TextureEnv_TextureName(*args)

    TextureName = staticmethod(TextureName)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_TextureEnv_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_TextureEnv_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_TextureEnv_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_TextureEnv
Graphic3d_TextureEnv_swigregister = _Graphic3d.Graphic3d_TextureEnv_swigregister
Graphic3d_TextureEnv_swigregister(Graphic3d_TextureEnv)

def Graphic3d_TextureEnv_NumberOfTextures(*args):
    """
    Graphic3d_TextureEnv_NumberOfTextures() -> Standard_Integer

    Returns the number of predefined textures.

    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _Graphic3d.Graphic3d_TextureEnv_NumberOfTextures(*args)

def Graphic3d_TextureEnv_TextureName(*args):
    """
    Graphic3d_TextureEnv_TextureName(Standard_Integer const theRank) -> TCollection_AsciiString

    Returns the name of the predefined texture of rank <aRank>

    :type theRank: int
    :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

    """
    return _Graphic3d.Graphic3d_TextureEnv_TextureName(*args)

def Graphic3d_TextureEnv_get_type_name(*args):
    """
    Graphic3d_TextureEnv_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_TextureEnv_get_type_name(*args)

def Graphic3d_TextureEnv_get_type_descriptor(*args):
    """
    Graphic3d_TextureEnv_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_TextureEnv_get_type_descriptor(*args)

class Graphic3d_TransformPers(Standard.Standard_Transient):
    """
    Transformation Persistence definition.

    Transformation Persistence defines a mutable Local Coordinate system which depends on camera position,
    so that visual appearance of the object becomes partially immutable while camera moves.
    Object visually preserves particular property such as size, placement, rotation or their combination.

    Graphic3d_TMF_ZoomPers, Graphic3d_TMF_RotatePers and Graphic3d_TMF_ZoomRotatePers define Local Coordinate system
    having origin in specified anchor point defined in World Coordinate system,
    while Graphic3d_TMF_TriedronPers and Graphic3d_TMF_2d define origin as 2D offset from screen corner in pixels.

    Graphic3d_TMF_2d, Graphic3d_TMF_TriedronPers and Graphic3d_TMF_ZoomPers defines Local Coordinate system where length units are pixels.
    Beware that Graphic3d_RenderingParams::ResolutionRatio() will be ignored!
    For other Persistence flags, normal (world) length units will apply.

    WARNING: Graphic3d_TMF_None is not permitted for defining instance of this class - NULL handle should be used for this purpose!
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_TransformPers
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_TransformPers(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_TransformPers_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_TransformPers_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_TransformPers_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FromDeprecatedParams(*args):
        """
        FromDeprecatedParams(Graphic3d_TransModeFlags theFlag, gp_Pnt thePoint) -> Handle_Graphic3d_TransformPers

        Create Graphic3d_TransformPers instance from deprecated parameters set
        decoding 2D corner + offset parameters from 3D point.

        :type theFlag: OCC.wrapper.Graphic3d.Graphic3d_TransModeFlags
        :type thePoint: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TransformPers

        """
        return _Graphic3d.Graphic3d_TransformPers_FromDeprecatedParams(*args)

    FromDeprecatedParams = staticmethod(FromDeprecatedParams)

    def __init__(self, *args):
        """
        __init__(Graphic3d_TransformPers self, Graphic3d_TransModeFlags const theMode) -> Graphic3d_TransformPers
        __init__(Graphic3d_TransformPers self, Graphic3d_TransModeFlags const theMode, gp_Pnt thePnt) -> Graphic3d_TransformPers

        Set Zoom/Rotate transformation persistence with an anchor 3D point.
        Anchor point defines the origin of Local Coordinate system within World Coordinate system.
        Throws an exception if persistence mode is not Graphic3d_TMF_ZoomPers, Graphic3d_TMF_ZoomRotatePers or Graphic3d_TMF_RotatePers.

        :type theMode: OCC.wrapper.Graphic3d.Graphic3d_TransModeFlags
        :type thePnt: OCC.wrapper.gp.gp_Pnt

        """
        this = _Graphic3d.new_Graphic3d_TransformPers(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def IsZoomOrRotate(self, *args):
        """
        IsZoomOrRotate(Graphic3d_TransformPers self, Graphic3d_TransModeFlags theMode) -> Standard_Boolean
        IsZoomOrRotate(Graphic3d_TransformPers self) -> Standard_Boolean

        Return true for Graphic3d_TMF_ZoomPers, Graphic3d_TMF_ZoomRotatePers or Graphic3d_TMF_RotatePers modes.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_TransformPers_IsZoomOrRotate(self, *args)


    def IsTrihedronOr2d(self, *args):
        """
        IsTrihedronOr2d(Graphic3d_TransformPers self, Graphic3d_TransModeFlags theMode) -> Standard_Boolean
        IsTrihedronOr2d(Graphic3d_TransformPers self) -> Standard_Boolean

        Return true for Graphic3d_TMF_TriedronPers and Graphic3d_TMF_2d modes.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_TransformPers_IsTrihedronOr2d(self, *args)


    def Mode(self, *args):
        """
        Mode(Graphic3d_TransformPers self) -> Graphic3d_TransModeFlags

        Transformation persistence mode flags.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TransModeFlags

        """
        return _Graphic3d.Graphic3d_TransformPers_Mode(self, *args)


    def Flags(self, *args):
        """
        Flags(Graphic3d_TransformPers self) -> Graphic3d_TransModeFlags

        Transformation persistence mode flags.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TransModeFlags

        """
        return _Graphic3d.Graphic3d_TransformPers_Flags(self, *args)


    def SetPersistence(self, *args):
        """
        SetPersistence(Graphic3d_TransformPers self, Graphic3d_TransModeFlags const theMode, gp_Pnt thePnt)
        SetPersistence(Graphic3d_TransformPers self, Graphic3d_TransModeFlags const theMode, Aspect_TypeOfTriedronPosition const theCorner, NCollection_Vec2_Standard_Integer theOffset)

        Set 2d/trihedron transformation persistence with a corner and 2D offset.
        Throws an exception if persistence mode is not Graphic3d_TMF_TriedronPers or Graphic3d_TMF_2d.

        :type theMode: OCC.wrapper.Graphic3d.Graphic3d_TransModeFlags
        :type theCorner: OCC.wrapper.Aspect.Aspect_TypeOfTriedronPosition
        :type theOffset: OCC.wrapper.Graphic3d.Graphic3d_Vec2i

        """
        return _Graphic3d.Graphic3d_TransformPers_SetPersistence(self, *args)


    def AnchorPoint(self, *args):
        """
        AnchorPoint(Graphic3d_TransformPers self) -> gp_Pnt

        Return the anchor point for zoom/rotate transformation persistence.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Graphic3d.Graphic3d_TransformPers_AnchorPoint(self, *args)


    def SetAnchorPoint(self, *args):
        """
        SetAnchorPoint(Graphic3d_TransformPers self, gp_Pnt thePnt)

        Set the anchor point for zoom/rotate transformation persistence.

        :type thePnt: OCC.wrapper.gp.gp_Pnt

        """
        return _Graphic3d.Graphic3d_TransformPers_SetAnchorPoint(self, *args)


    def Corner2d(self, *args):
        """
        Corner2d(Graphic3d_TransformPers self) -> Aspect_TypeOfTriedronPosition

        Return the corner for 2d/trihedron transformation persistence.

        :rtype: OCC.wrapper.Aspect.Aspect_TypeOfTriedronPosition

        """
        return _Graphic3d.Graphic3d_TransformPers_Corner2d(self, *args)


    def SetCorner2d(self, *args):
        """
        SetCorner2d(Graphic3d_TransformPers self, Aspect_TypeOfTriedronPosition const thePos)

        Set the corner for 2d/trihedron transformation persistence.

        :type thePos: OCC.wrapper.Aspect.Aspect_TypeOfTriedronPosition

        """
        return _Graphic3d.Graphic3d_TransformPers_SetCorner2d(self, *args)


    def Offset2d(self, *args):
        """
        Offset2d(Graphic3d_TransformPers self) -> NCollection_Vec2_Standard_Integer

        Return the offset from the corner for 2d/trihedron transformation persistence.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Vec2i

        """
        return _Graphic3d.Graphic3d_TransformPers_Offset2d(self, *args)


    def SetOffset2d(self, *args):
        """
        SetOffset2d(Graphic3d_TransformPers self, NCollection_Vec2_Standard_Integer theOffset)

        Set the offset from the corner for 2d/trihedron transformation persistence.

        :type theOffset: OCC.wrapper.Graphic3d.Graphic3d_Vec2i

        """
        return _Graphic3d.Graphic3d_TransformPers_SetOffset2d(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_TransformPers
Graphic3d_TransformPers_swigregister = _Graphic3d.Graphic3d_TransformPers_swigregister
Graphic3d_TransformPers_swigregister(Graphic3d_TransformPers)

def Graphic3d_TransformPers_get_type_name(*args):
    """
    Graphic3d_TransformPers_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_TransformPers_get_type_name(*args)

def Graphic3d_TransformPers_get_type_descriptor(*args):
    """
    Graphic3d_TransformPers_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_TransformPers_get_type_descriptor(*args)

def Graphic3d_TransformPers_FromDeprecatedParams(*args):
    """
    Graphic3d_TransformPers_FromDeprecatedParams(Graphic3d_TransModeFlags theFlag, gp_Pnt thePoint) -> Handle_Graphic3d_TransformPers

    Create Graphic3d_TransformPers instance from deprecated parameters set
    decoding 2D corner + offset parameters from 3D point.

    :type theFlag: OCC.wrapper.Graphic3d.Graphic3d_TransModeFlags
    :type thePoint: OCC.wrapper.gp.gp_Pnt
    :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TransformPers

    """
    return _Graphic3d.Graphic3d_TransformPers_FromDeprecatedParams(*args)

class Graphic3d_Texture1D(Graphic3d_TextureMap):
    """This is an abstract class for managing 1D textures."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_Texture1D
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_Texture1D(self) 
            return h


    def Name(self, *args):
        """
        Name(Graphic3d_Texture1D self) -> Graphic3d_NameOfTexture1D

        Returns the name of the predefined textures or NOT_1D_UNKNOWN
        when the name is given as a filename.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_NameOfTexture1D

        """
        return _Graphic3d.Graphic3d_Texture1D_Name(self, *args)


    def NumberOfTextures(*args):
        """
        NumberOfTextures() -> Standard_Integer

        Returns the number of predefined textures.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_Texture1D_NumberOfTextures(*args)

    NumberOfTextures = staticmethod(NumberOfTextures)

    def TextureName(*args):
        """
        TextureName(Standard_Integer const aRank) -> TCollection_AsciiString

        Returns the name of the predefined texture of rank <aRank>

        :type aRank: int
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Graphic3d_Texture1D_TextureName(*args)

    TextureName = staticmethod(TextureName)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_Texture1D_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_Texture1D_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_Texture1D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Texture1D
Graphic3d_Texture1D_swigregister = _Graphic3d.Graphic3d_Texture1D_swigregister
Graphic3d_Texture1D_swigregister(Graphic3d_Texture1D)

def Graphic3d_Texture1D_NumberOfTextures(*args):
    """
    Graphic3d_Texture1D_NumberOfTextures() -> Standard_Integer

    Returns the number of predefined textures.

    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _Graphic3d.Graphic3d_Texture1D_NumberOfTextures(*args)

def Graphic3d_Texture1D_TextureName(*args):
    """
    Graphic3d_Texture1D_TextureName(Standard_Integer const aRank) -> TCollection_AsciiString

    Returns the name of the predefined texture of rank <aRank>

    :type aRank: int
    :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

    """
    return _Graphic3d.Graphic3d_Texture1D_TextureName(*args)

def Graphic3d_Texture1D_get_type_name(*args):
    """
    Graphic3d_Texture1D_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_Texture1D_get_type_name(*args)

def Graphic3d_Texture1D_get_type_descriptor(*args):
    """
    Graphic3d_Texture1D_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_Texture1D_get_type_descriptor(*args)

class Graphic3d_BoundBuffer(NCollection.NCollection_Buffer):
    """Bounds buffer."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_BoundBuffer
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_BoundBuffer(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Graphic3d_BoundBuffer self, Handle_NCollection_BaseAllocator theAlloc) -> Graphic3d_BoundBuffer

        Empty constructor.

        :type theAlloc: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        this = _Graphic3d.new_Graphic3d_BoundBuffer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(Graphic3d_BoundBuffer self, Standard_Integer const theNbBounds, Standard_Boolean const theHasColors) -> bool

        Allocates new empty array

        :type theNbBounds: int
        :type theHasColors: bool
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_BoundBuffer_Init(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_BoundBuffer_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_BoundBuffer_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_BoundBuffer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_BoundBuffer
Graphic3d_BoundBuffer_swigregister = _Graphic3d.Graphic3d_BoundBuffer_swigregister
Graphic3d_BoundBuffer_swigregister(Graphic3d_BoundBuffer)

def Graphic3d_BoundBuffer_get_type_name(*args):
    """
    Graphic3d_BoundBuffer_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_BoundBuffer_get_type_name(*args)

def Graphic3d_BoundBuffer_get_type_descriptor(*args):
    """
    Graphic3d_BoundBuffer_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_BoundBuffer_get_type_descriptor(*args)

class Graphic3d_ViewAffinity(Standard.Standard_Transient):
    """Structure display state."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_ViewAffinity
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_ViewAffinity(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Graphic3d_ViewAffinity self) -> Graphic3d_ViewAffinity

        Empty constructor.


        """
        this = _Graphic3d.new_Graphic3d_ViewAffinity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def IsVisible(self, *args):
        """
        IsVisible(Graphic3d_ViewAffinity self, Standard_Integer const theViewId) -> bool

        Return visibility flag.

        :type theViewId: int
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_ViewAffinity_IsVisible(self, *args)


    def SetVisible(self, *args):
        """
        SetVisible(Graphic3d_ViewAffinity self, Standard_Boolean const theIsVisible)
        SetVisible(Graphic3d_ViewAffinity self, Standard_Integer const theViewId, bool const theIsVisible)

        Setup visibility flag.

        :type theViewId: int
        :type theIsVisible: const bool

        """
        return _Graphic3d.Graphic3d_ViewAffinity_SetVisible(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_ViewAffinity_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_ViewAffinity_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_ViewAffinity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ViewAffinity
Graphic3d_ViewAffinity_swigregister = _Graphic3d.Graphic3d_ViewAffinity_swigregister
Graphic3d_ViewAffinity_swigregister(Graphic3d_ViewAffinity)

def Graphic3d_ViewAffinity_get_type_name(*args):
    """
    Graphic3d_ViewAffinity_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_ViewAffinity_get_type_name(*args)

def Graphic3d_ViewAffinity_get_type_descriptor(*args):
    """
    Graphic3d_ViewAffinity_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_ViewAffinity_get_type_descriptor(*args)

class Graphic3d_Texture2D(Graphic3d_TextureMap):
    """This abstract class for managing 2D textures"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_Texture2D
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_Texture2D(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_Texture2D_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_Texture2D_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_Texture2D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NumberOfTextures(*args):
        """
        NumberOfTextures() -> Standard_Integer

        Returns the number of predefined textures.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_Texture2D_NumberOfTextures(*args)

    NumberOfTextures = staticmethod(NumberOfTextures)

    def TextureName(*args):
        """
        TextureName(Standard_Integer const theRank) -> TCollection_AsciiString

        Returns the name of the predefined texture of rank <aRank>

        :type theRank: int
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Graphic3d_Texture2D_TextureName(*args)

    TextureName = staticmethod(TextureName)

    def Name(self, *args):
        """
        Name(Graphic3d_Texture2D self) -> Graphic3d_NameOfTexture2D

        Returns the name of the predefined textures or NOT_2D_UNKNOWN
        when the name is given as a filename.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_NameOfTexture2D

        """
        return _Graphic3d.Graphic3d_Texture2D_Name(self, *args)


    def SetImage(self, *args):
        """
        SetImage(Graphic3d_Texture2D self, Handle_Image_PixMap thePixMap)

        Assign new image to the texture.
        Note that this method does not invalidate already uploaded resources - consider calling ::UpdateRevision() if needed.

        :type thePixMap: OCC.wrapper.Image.Handle_Image_PixMap

        """
        return _Graphic3d.Graphic3d_Texture2D_SetImage(self, *args)


    def HasMipMaps(self, *args):
        """
        HasMipMaps(Graphic3d_Texture2D self) -> Standard_Boolean

        Return true if mip-maps should be used.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_Texture2D_HasMipMaps(self, *args)


    def SetMipMaps(self, *args):
        """
        SetMipMaps(Graphic3d_Texture2D self, Standard_Boolean const theToUse)

        Set if mip-maps should be used (generated if needed).
        Note that this method should be called before loading / using the texture.

        :type theToUse: bool

        """
        return _Graphic3d.Graphic3d_Texture2D_SetMipMaps(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Texture2D
Graphic3d_Texture2D_swigregister = _Graphic3d.Graphic3d_Texture2D_swigregister
Graphic3d_Texture2D_swigregister(Graphic3d_Texture2D)

def Graphic3d_Texture2D_get_type_name(*args):
    """
    Graphic3d_Texture2D_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_Texture2D_get_type_name(*args)

def Graphic3d_Texture2D_get_type_descriptor(*args):
    """
    Graphic3d_Texture2D_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_Texture2D_get_type_descriptor(*args)

def Graphic3d_Texture2D_NumberOfTextures(*args):
    """
    Graphic3d_Texture2D_NumberOfTextures() -> Standard_Integer

    Returns the number of predefined textures.

    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _Graphic3d.Graphic3d_Texture2D_NumberOfTextures(*args)

def Graphic3d_Texture2D_TextureName(*args):
    """
    Graphic3d_Texture2D_TextureName(Standard_Integer const theRank) -> TCollection_AsciiString

    Returns the name of the predefined texture of rank <aRank>

    :type theRank: int
    :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

    """
    return _Graphic3d.Graphic3d_Texture2D_TextureName(*args)

class Graphic3d_ArrayOfPrimitives(Standard.Standard_Transient):
    """
    This class furnish services to defined and fill an array of primitives
    which can be passed directly to graphics rendering API.

    The basic interface consists of the following parts:
    1) Specifying primitive type.
    WARNING! Particular primitive types might be unsupported by specific hardware/graphics API (like quads and polygons).
    It is always preferred using one of basic types having maximum compatibility:
    Point, Triangle (or Triangle strip), Segment aka Lines (or Polyline aka Line Strip).
    Primitive strip types can be used to reduce memory usage as alternative to Indexed arrays.
    2) Vertex array.
    - Specifying the (maximum) number of vertexes within array.
    - Specifying the vertex attributes, complementary to mandatory vertex Position (normal, color, UV texture coordinates).
    - Defining vertex values by using various versions of AddVertex() or SetVertex*() methods.
    3) Index array (optional).
    - Specifying the (maximum) number of indexes (edges).
    - Defining index values by using AddEdge() method; the index value should be within number of defined Vertexes.

    Indexed array allows sharing vertex data across Primitives and thus reducing memory usage,
    since index size is much smaller then size of vertex with all its attributes.
    It is a preferred way for defining primitive array and main alternative to Primitive Strips for optimal memory usage,
    although it is also possible (but unusual) defining Indexed Primitive Strip.
    Note that it is NOT possible sharing Vertex Attributes partially (e.g. share Position, but have different Normals);
    in such cases Vertex should be entirely duplicated with all Attributes.
    4) Bounds array (optional).
    - Specifying the (maximum) number of bounds.
    - Defining bounds using AddBound() methods.

    Bounds allow splitting Primitive Array into sub-groups.
    This is useful only in two cases - for specifying per-group color and for restarting Primitive Strips.
    WARNING! Bounds within Primitive Array break rendering batches into parts (additional for loops),
    affecting rendering performance negatively (increasing CPU load).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_ArrayOfPrimitives
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_ArrayOfPrimitives(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_ArrayOfPrimitives_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Attributes(self, *args):
        """
        Returns vertex attributes buffer (colors, normals, texture coordinates).

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Buffer

        """
        res = _Graphic3d.Graphic3d_ArrayOfPrimitives_Attributes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Type(self, *args):
        """
        Type(Graphic3d_ArrayOfPrimitives self) -> Graphic3d_TypeOfPrimitiveArray

        Returns the type of this primitive

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfPrimitiveArray

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_Type(self, *args)


    def StringType(self, *args):
        """
        StringType(Graphic3d_ArrayOfPrimitives self) -> Standard_CString

        Returns the string type of this primitive

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_StringType(self, *args)


    def HasVertexNormals(self, *args):
        """
        HasVertexNormals(Graphic3d_ArrayOfPrimitives self) -> Standard_Boolean

        Returns TRUE when vertex normals array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_HasVertexNormals(self, *args)


    def HasVertexColors(self, *args):
        """
        HasVertexColors(Graphic3d_ArrayOfPrimitives self) -> Standard_Boolean

        Returns TRUE when vertex colors array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_HasVertexColors(self, *args)


    def HasVertexTexels(self, *args):
        """
        HasVertexTexels(Graphic3d_ArrayOfPrimitives self) -> Standard_Boolean

        Returns TRUE when vertex texels array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_HasVertexTexels(self, *args)


    def VertexNumber(self, *args):
        """
        VertexNumber(Graphic3d_ArrayOfPrimitives self) -> Standard_Integer

        Returns the number of defined vertex

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_VertexNumber(self, *args)


    def ItemNumber(self, *args):
        """
        ItemNumber(Graphic3d_ArrayOfPrimitives self) -> Standard_Integer

        Returns the number of total items according to the array type.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_ItemNumber(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Graphic3d_ArrayOfPrimitives self) -> Standard_Boolean

        Returns TRUE only when the contains of this array is available.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_IsValid(self, *args)


    def AddVertex(self, *args):
        """
        AddVertex(Graphic3d_ArrayOfPrimitives self, gp_Pnt theVertex) -> Standard_Integer
        AddVertex(Graphic3d_ArrayOfPrimitives self, NCollection_Vec3_Standard_ShortReal theVertex) -> Standard_Integer
        AddVertex(Graphic3d_ArrayOfPrimitives self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ) -> Standard_Integer
        AddVertex(Graphic3d_ArrayOfPrimitives self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ) -> Standard_Integer
        AddVertex(Graphic3d_ArrayOfPrimitives self, gp_Pnt theVertex, Quantity_Color theColor) -> Standard_Integer
        AddVertex(Graphic3d_ArrayOfPrimitives self, gp_Pnt theVertex, Standard_Integer const theColor32) -> Standard_Integer
        AddVertex(Graphic3d_ArrayOfPrimitives self, gp_Pnt theVertex, Graphic3d_Vec4ub const & theColor) -> Standard_Integer
        AddVertex(Graphic3d_ArrayOfPrimitives self, gp_Pnt theVertex, gp_Dir theNormal) -> Standard_Integer
        AddVertex(Graphic3d_ArrayOfPrimitives self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ) -> Standard_Integer
        AddVertex(Graphic3d_ArrayOfPrimitives self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theNX, Standard_ShortReal const theNY, Standard_ShortReal const theNZ) -> Standard_Integer
        AddVertex(Graphic3d_ArrayOfPrimitives self, gp_Pnt theVertex, gp_Dir theNormal, Quantity_Color theColor) -> Standard_Integer
        AddVertex(Graphic3d_ArrayOfPrimitives self, gp_Pnt theVertex, gp_Dir theNormal, Standard_Integer const theColor32) -> Standard_Integer
        AddVertex(Graphic3d_ArrayOfPrimitives self, gp_Pnt theVertex, gp_Pnt2d theTexel) -> Standard_Integer
        AddVertex(Graphic3d_ArrayOfPrimitives self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theTX, Standard_Real const theTY) -> Standard_Integer
        AddVertex(Graphic3d_ArrayOfPrimitives self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theTX, Standard_ShortReal const theTY) -> Standard_Integer
        AddVertex(Graphic3d_ArrayOfPrimitives self, gp_Pnt theVertex, gp_Dir theNormal, gp_Pnt2d theTexel) -> Standard_Integer
        AddVertex(Graphic3d_ArrayOfPrimitives self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ, Standard_Real const theTX, Standard_Real const theTY) -> Standard_Integer
        AddVertex(Graphic3d_ArrayOfPrimitives self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theNX, Standard_ShortReal const theNY, Standard_ShortReal const theNZ, Standard_ShortReal const theTX, Standard_ShortReal const theTY) -> Standard_Integer

        Adds a vertice,vertex normal and texture in the vertex array.
        Warning: Normal is ignored when the hasVNormals constructor parameter is FALSE
        and  Texel  is ignored when the hasVTexels  constructor parameter is FALSE.
        @return the actual vertex number

        :type theX: float
        :type theY: float
        :type theZ: float
        :type theNX: float
        :type theNY: float
        :type theNZ: float
        :type theTX: float
        :type theTY: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_AddVertex(self, *args)


    def SetVertice(self, *args):
        """
        SetVertice(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, gp_Pnt theVertex)
        SetVertice(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ)

        Change the vertice of rank theIndex in the array.

        :type theIndex: int
        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_SetVertice(self, *args)


    def SetVertexColor(self, *args):
        """
        SetVertexColor(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, Quantity_Color theColor)
        SetVertexColor(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB)
        SetVertexColor(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, Graphic3d_Vec4ub const & theColor)
        SetVertexColor(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, Standard_Integer const theColor32)

        Change the vertex color of rank theIndex> in the array.
        @code
        theColor32 = Alpha << 24 + Blue << 16 + Green << 8 + Red
        @endcode

        :type theIndex: int
        :type theColor32: int

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_SetVertexColor(self, *args)


    def SetVertexNormal(self, *args):
        """
        SetVertexNormal(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, gp_Dir theNormal)
        SetVertexNormal(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ)

        Change the vertex normal of rank theIndex in the array.

        :type theIndex: int
        :type theNX: float
        :type theNY: float
        :type theNZ: float

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_SetVertexNormal(self, *args)


    def SetVertexTexel(self, *args):
        """
        SetVertexTexel(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, gp_Pnt2d theTexel)
        SetVertexTexel(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, Standard_Real const theTX, Standard_Real const theTY)

        Change the vertex texel of rank theIndex in the array.

        :type theIndex: int
        :type theTX: float
        :type theTY: float

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_SetVertexTexel(self, *args)


    def Vertice(self, *args):
        """
        Vertice(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank) -> gp_Pnt
        Vertice(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank)

        Returns the vertice coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_Vertice(self, *args)


    def VertexColor(self, *args):
        """
        VertexColor(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank) -> Quantity_Color
        VertexColor(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, Graphic3d_Vec4ub & theColor)
        VertexColor(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank)
        VertexColor(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank)

        Returns the vertex color values at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theColor: int

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_VertexColor(self, *args)


    def VertexNormal(self, *args):
        """
        VertexNormal(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank) -> gp_Dir
        VertexNormal(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank)

        Returns the vertex normal coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theNX: float
        :type theNY: float
        :type theNZ: float

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_VertexNormal(self, *args)


    def VertexTexel(self, *args):
        """
        VertexTexel(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank) -> gp_Pnt2d
        VertexTexel(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank)

        Returns the vertex texture coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theTX: float
        :type theTY: float

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_VertexTexel(self, *args)


    def Indices(self, *args):
        """
        Returns optional index buffer.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_IndexBuffer

        """
        res = _Graphic3d.Graphic3d_ArrayOfPrimitives_Indices(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def EdgeNumber(self, *args):
        """
        EdgeNumber(Graphic3d_ArrayOfPrimitives self) -> Standard_Integer

        Returns the number of defined edges

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_EdgeNumber(self, *args)


    def Edge(self, *args):
        """
        Edge(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank) -> Standard_Integer

        Returns the vertex index at rank theRank in the range [1,EdgeNumber()]

        :type theRank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_Edge(self, *args)


    def AddEdge(self, *args):
        """
        AddEdge(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theVertexIndex) -> Standard_Integer

        Adds an edge in the range [1,VertexNumber()] in the array.
        @return the actual edges number

        :type theVertexIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_AddEdge(self, *args)


    def Bounds(self, *args):
        """
        Returns optional bounds buffer.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_BoundBuffer

        """
        res = _Graphic3d.Graphic3d_ArrayOfPrimitives_Bounds(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasBoundColors(self, *args):
        """
        HasBoundColors(Graphic3d_ArrayOfPrimitives self) -> Standard_Boolean

        Returns TRUE when bound colors array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_HasBoundColors(self, *args)


    def BoundNumber(self, *args):
        """
        BoundNumber(Graphic3d_ArrayOfPrimitives self) -> Standard_Integer

        Returns the number of defined bounds

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_BoundNumber(self, *args)


    def Bound(self, *args):
        """
        Bound(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank) -> Standard_Integer

        Returns the edge number at rank theRank.

        :type theRank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_Bound(self, *args)


    def BoundColor(self, *args):
        """
        BoundColor(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank) -> Quantity_Color
        BoundColor(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank)

        Returns the bound color values at rank theRank from the bound table if defined.

        :type theRank: int
        :type theR: float
        :type theG: float
        :type theB: float

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_BoundColor(self, *args)


    def AddBound(self, *args):
        """
        AddBound(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theEdgeNumber) -> Standard_Integer
        AddBound(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theEdgeNumber, Quantity_Color theBColor) -> Standard_Integer
        AddBound(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theEdgeNumber, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB) -> Standard_Integer

        Adds a bound of length theEdgeNumber and bound color coordinates in the bound array.
        Warning: <theR,theG,theB> are ignored when the hasBColors constructor parameter is FALSE
        @return the actual bounds number

        :type theEdgeNumber: int
        :type theR: float
        :type theG: float
        :type theB: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_AddBound(self, *args)


    def SetBoundColor(self, *args):
        """
        SetBoundColor(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, Quantity_Color theColor)
        SetBoundColor(Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB)

        Change the bound color of rank theIndex in the array.

        :type theIndex: int
        :type theR: float
        :type theG: float
        :type theB: float

        """
        return _Graphic3d.Graphic3d_ArrayOfPrimitives_SetBoundColor(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ArrayOfPrimitives
Graphic3d_ArrayOfPrimitives_swigregister = _Graphic3d.Graphic3d_ArrayOfPrimitives_swigregister
Graphic3d_ArrayOfPrimitives_swigregister(Graphic3d_ArrayOfPrimitives)

def Graphic3d_ArrayOfPrimitives_get_type_name(*args):
    """
    Graphic3d_ArrayOfPrimitives_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_ArrayOfPrimitives_get_type_name(*args)

def Graphic3d_ArrayOfPrimitives_get_type_descriptor(*args):
    """
    Graphic3d_ArrayOfPrimitives_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_ArrayOfPrimitives_get_type_descriptor(*args)

class Graphic3d_CLight(Standard.Standard_Transient):
    """
    Generic light source definition.
    This class defines arbitrary light source - see Graphic3d_TypeOfLightSource enumeration.
    Some parameters are applicable only to particular light type;
    calling methods unrelated to current type will throw an exception.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_CLight
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_CLight(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_CLight_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_CLight_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_CLight_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Graphic3d_CLight self, Graphic3d_TypeOfLightSource theType) -> Graphic3d_CLight

        Empty constructor, which should be followed by light source properties configuration.

        :type theType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfLightSource

        """
        this = _Graphic3d.new_Graphic3d_CLight(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Type(self, *args):
        """
        Type(Graphic3d_CLight self) -> Graphic3d_TypeOfLightSource

        Returns the Type of the Light, cannot be changed after object construction.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfLightSource

        """
        return _Graphic3d.Graphic3d_CLight_Type(self, *args)


    def Name(self, *args):
        """
        Returns light source name; empty string by default.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Graphic3d_CLight_Name(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Graphic3d_CLight self, TCollection_AsciiString theName)

        Sets light source name.

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Graphic3d_CLight_SetName(self, *args)


    def Color(self, *args):
        """
        Returns the color of the light source; WHITE by default.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Graphic3d_CLight_Color(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetColor(self, *args):
        """
        SetColor(Graphic3d_CLight self, Quantity_Color theColor)

        Defines the color of a light source by giving the basic color.

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Graphic3d.Graphic3d_CLight_SetColor(self, *args)


    def IsEnabled(self, *args):
        """
        IsEnabled(Graphic3d_CLight self) -> Standard_Boolean

        Check that the light source is turned on; TRUE by default.
        This flag affects all occurrences of light sources, where it was registered and activated;
        so that it is possible defining an active light in View which is actually in disabled state.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_CLight_IsEnabled(self, *args)


    def SetEnabled(self, *args):
        """
        SetEnabled(Graphic3d_CLight self, Standard_Boolean theIsOn)

        Change enabled state of the light state.
        This call does not remove or deactivate light source in Views/Viewers;
        instead it turns it OFF so that it just have no effect.

        :type theIsOn: bool

        """
        return _Graphic3d.Graphic3d_CLight_SetEnabled(self, *args)


    def IsHeadlight(self, *args):
        """
        IsHeadlight(Graphic3d_CLight self) -> Standard_Boolean

        Returns true if the light is a headlight; FALSE by default.
        Headlight flag means that light position/direction are defined not in a World coordinate system, but relative to the camera orientation.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_CLight_IsHeadlight(self, *args)


    def Headlight(self, *args):
        """
        Headlight(Graphic3d_CLight self) -> Standard_Boolean

        Alias for IsHeadlight().

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_CLight_Headlight(self, *args)


    def SetHeadlight(self, *args):
        """
        SetHeadlight(Graphic3d_CLight self, Standard_Boolean theValue)

        Setup headlight flag.

        :type theValue: bool

        """
        return _Graphic3d.Graphic3d_CLight_SetHeadlight(self, *args)


    def Position(self, *args):
        """
        Returns location of positional/spot light; (0, 0, 0) by default.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _Graphic3d.Graphic3d_CLight_Position(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPosition(self, *args):
        """
        SetPosition(Graphic3d_CLight self, gp_Pnt thePosition)
        SetPosition(Graphic3d_CLight self, Standard_Real theX, Standard_Real theY, Standard_Real theZ)

        Setup location of positional/spot light.

        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Graphic3d_CLight_SetPosition(self, *args)


    def ConstAttenuation(self, *args):
        """
        ConstAttenuation(Graphic3d_CLight self) -> Standard_ShortReal

        Returns constant attenuation factor of positional/spot light source; 1.0f by default.
        Distance attenuation factors of reducing positional/spot light intensity depending on the distance from its position:
        @code
        float anAttenuation = 1.0 / (ConstAttenuation() + LinearAttenuation() * theDistance + QuadraticAttenuation() * theDistance * theDistance);
        @endcode

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_CLight_ConstAttenuation(self, *args)


    def LinearAttenuation(self, *args):
        """
        LinearAttenuation(Graphic3d_CLight self) -> Standard_ShortReal

        Returns linear attenuation factor of positional/spot light source; 0.0 by default.
        Distance attenuation factors of reducing positional/spot light intensity depending on the distance from its position:
        @code
        float anAttenuation = 1.0 / (ConstAttenuation() + LinearAttenuation() * theDistance + QuadraticAttenuation() * theDistance * theDistance);
        @endcode

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_CLight_LinearAttenuation(self, *args)


    def Attenuation(self, *args):
        """
        Attenuation(Graphic3d_CLight self)

        Returns the attenuation factors.

        :type theConstAttenuation: float
        :type theLinearAttenuation: float

        """
        return _Graphic3d.Graphic3d_CLight_Attenuation(self, *args)


    def SetAttenuation(self, *args):
        """
        SetAttenuation(Graphic3d_CLight self, Standard_ShortReal theConstAttenuation, Standard_ShortReal theLinearAttenuation)

        Defines the coefficients of attenuation; values should be >= 0.0 and their summ should not be equal to 0.

        :type theConstAttenuation: float
        :type theLinearAttenuation: float

        """
        return _Graphic3d.Graphic3d_CLight_SetAttenuation(self, *args)


    def Direction(self, *args):
        """
        Direction(Graphic3d_CLight self) -> gp_Dir
        Direction(Graphic3d_CLight self)

        Returns the theVx, theVy, theVz direction of the light source.

        :type theVx: float
        :type theVy: float
        :type theVz: float

        """
        return _Graphic3d.Graphic3d_CLight_Direction(self, *args)


    def SetDirection(self, *args):
        """
        SetDirection(Graphic3d_CLight self, gp_Dir theDir)
        SetDirection(Graphic3d_CLight self, Standard_Real theVx, Standard_Real theVy, Standard_Real theVz)

        Sets direction of directional/spot light.

        :type theVx: float
        :type theVy: float
        :type theVz: float

        """
        return _Graphic3d.Graphic3d_CLight_SetDirection(self, *args)


    def Angle(self, *args):
        """
        Angle(Graphic3d_CLight self) -> Standard_ShortReal

        Returns an angle in radians of the cone created by the spot; 30 degrees by default.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_CLight_Angle(self, *args)


    def SetAngle(self, *args):
        """
        SetAngle(Graphic3d_CLight self, Standard_ShortReal theAngle)

        Angle in radians of the cone created by the spot, should be within range (0.0, M_PI).

        :type theAngle: float

        """
        return _Graphic3d.Graphic3d_CLight_SetAngle(self, *args)


    def Concentration(self, *args):
        """
        Concentration(Graphic3d_CLight self) -> Standard_ShortReal

        Returns intensity distribution of the spot light, within [0.0, 1.0] range; 1.0 by default.
        This coefficient should be converted into spotlight exponent within [0.0, 128.0] range:
        @code
        float aSpotExponent = Concentration() * 128.0;
        anAttenuation *= pow (aCosA, aSpotExponent);"
        @endcode
        The concentration factor determines the dispersion of the light on the surface, the default value (1.0) corresponds to a minimum of dispersion.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_CLight_Concentration(self, *args)


    def SetConcentration(self, *args):
        """
        SetConcentration(Graphic3d_CLight self, Standard_ShortReal theConcentration)

        Defines the coefficient of concentration; value should be within range [0.0, 1.0].

        :type theConcentration: float

        """
        return _Graphic3d.Graphic3d_CLight_SetConcentration(self, *args)


    def Intensity(self, *args):
        """
        Intensity(Graphic3d_CLight self) -> Standard_ShortReal

        Returns the intensity of light source; 1.0 by default.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_CLight_Intensity(self, *args)


    def SetIntensity(self, *args):
        """
        SetIntensity(Graphic3d_CLight self, Standard_ShortReal theValue)

        Modifies the intensity of light source, which should be > 0.0.

        :type theValue: float

        """
        return _Graphic3d.Graphic3d_CLight_SetIntensity(self, *args)


    def Smoothness(self, *args):
        """
        Smoothness(Graphic3d_CLight self) -> Standard_ShortReal

        Returns the smoothness of light source (either smoothing angle for directional light or smoothing radius in case of positional light); 0.0 by default.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_CLight_Smoothness(self, *args)


    def SetSmoothRadius(self, *args):
        """
        SetSmoothRadius(Graphic3d_CLight self, Standard_ShortReal theValue)

        Modifies the smoothing radius of positional/spot light; should be >= 0.0.

        :type theValue: float

        """
        return _Graphic3d.Graphic3d_CLight_SetSmoothRadius(self, *args)


    def SetSmoothAngle(self, *args):
        """
        SetSmoothAngle(Graphic3d_CLight self, Standard_ShortReal theValue)

        Modifies the smoothing angle (in radians) of directional light source; should be within range [0.0, M_PI/2].

        :type theValue: float

        """
        return _Graphic3d.Graphic3d_CLight_SetSmoothAngle(self, *args)


    def GetId(self, *args):
        """
        @return light resource identifier string

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Graphic3d_CLight_GetId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PackedParams(self, *args):
        """
        Packed light parameters.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Vec4

        """
        res = _Graphic3d.Graphic3d_CLight_PackedParams(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PackedColor(self, *args):
        """
        Returns the color of the light source with dummy Alpha component, which should be ignored.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Vec4

        """
        res = _Graphic3d.Graphic3d_CLight_PackedColor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PackedDirection(self, *args):
        """
        Returns direction of directional/spot light.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Vec4

        """
        res = _Graphic3d.Graphic3d_CLight_PackedDirection(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Revision(self, *args):
        """
        Revision(Graphic3d_CLight self) -> Standard_Size

        @return modification counter

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Graphic3d_CLight_Revision(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_CLight
Graphic3d_CLight_swigregister = _Graphic3d.Graphic3d_CLight_swigregister
Graphic3d_CLight_swigregister(Graphic3d_CLight)

def Graphic3d_CLight_get_type_name(*args):
    """
    Graphic3d_CLight_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_CLight_get_type_name(*args)

def Graphic3d_CLight_get_type_descriptor(*args):
    """
    Graphic3d_CLight_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_CLight_get_type_descriptor(*args)

class Graphic3d_Buffer(NCollection.NCollection_Buffer):
    """Buffer of vertex attributes."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_Buffer
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_Buffer(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Graphic3d_Buffer self, Handle_NCollection_BaseAllocator theAlloc) -> Graphic3d_Buffer

        Empty constructor.

        :type theAlloc: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        this = _Graphic3d.new_Graphic3d_Buffer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def AttributesArray(self, *args):
        """
        AttributesArray(Graphic3d_Buffer self) -> Graphic3d_Attribute const *

        @return array of attributes definitions

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Attribute

        """
        return _Graphic3d.Graphic3d_Buffer_AttributesArray(self, *args)


    def Attribute(self, *args):
        """
        @return attribute definition

        :type theAttribIndex: int
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Attribute

        """
        res = _Graphic3d.Graphic3d_Buffer_Attribute(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeAttribute(self, *args):
        """
        ChangeAttribute(Graphic3d_Buffer self, Standard_Integer const theAttribIndex) -> Graphic3d_Attribute &

        @return attribute definition

        :type theAttribIndex: int
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Attribute

        """
        return _Graphic3d.Graphic3d_Buffer_ChangeAttribute(self, *args)


    def AttributeOffset(self, *args):
        """
        AttributeOffset(Graphic3d_Buffer self, Standard_Integer const theAttribIndex) -> Standard_Integer

        @return data offset to specified attribute

        :type theAttribIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_Buffer_AttributeOffset(self, *args)


    def value(self, *args):
        """
        value(Graphic3d_Buffer self, Standard_Integer const theElem) -> Standard_Byte const *

        Access specified element.

        :type theElem: int
        :rtype: OCC.wrapper.Standard.Standard_Byte

        """
        return _Graphic3d.Graphic3d_Buffer_value(self, *args)


    def changeValue(self, *args):
        """
        changeValue(Graphic3d_Buffer self, Standard_Integer const theElem) -> Standard_Byte *

        Access specified element.

        :type theElem: int
        :rtype: OCC.wrapper.Standard.Standard_Byte

        """
        return _Graphic3d.Graphic3d_Buffer_changeValue(self, *args)


    def release(self, *args):
        """
        release(Graphic3d_Buffer self)

        Release buffer.


        """
        return _Graphic3d.Graphic3d_Buffer_release(self, *args)


    def Init(self, *args):
        """
        Init(Graphic3d_Buffer self, Standard_Integer const theNbElems, Graphic3d_Attribute const * theAttribs, Standard_Integer const theNbAttribs) -> bool
        Init(Graphic3d_Buffer self, Standard_Integer const theNbElems, NCollection_Array1_Graphic3d_Attribute theAttribs) -> bool

        Allocates new empty array

        :type theNbElems: int
        :type theAttribs: OCC.wrapper.Graphic3d.Graphic3d_Array1OfAttribute
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Buffer_Init(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_Buffer_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_Buffer_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_Buffer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Data(self, *args):
        """
        Data(Graphic3d_Buffer self, Standard_Integer const theAttribIndex) -> Standard_Byte const
        Data(Graphic3d_Buffer self) -> Standard_Byte const *

        @return buffer data

        :rtype: OCC.wrapper.Standard.Standard_Byte

        """
        return _Graphic3d.Graphic3d_Buffer_Data(self, *args)


    def ChangeData(self, *args):
        """
        ChangeData(Graphic3d_Buffer self, Standard_Integer const theAttribIndex) -> Standard_Byte
        ChangeData(Graphic3d_Buffer self) -> Standard_Byte *

        @return buffer data

        :rtype: OCC.wrapper.Standard.Standard_Byte

        """
        return _Graphic3d.Graphic3d_Buffer_ChangeData(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Buffer
Graphic3d_Buffer_swigregister = _Graphic3d.Graphic3d_Buffer_swigregister
Graphic3d_Buffer_swigregister(Graphic3d_Buffer)

def Graphic3d_Buffer_get_type_name(*args):
    """
    Graphic3d_Buffer_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_Buffer_get_type_name(*args)

def Graphic3d_Buffer_get_type_descriptor(*args):
    """
    Graphic3d_Buffer_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_Buffer_get_type_descriptor(*args)

class Graphic3d_Structure(Standard.Standard_Transient):
    """
    This class allows the definition a graphic object.
    This graphic structure can be displayed,
    erased, or highlighted.
    This graphic structure can be connected with
    another graphic structure.
    Keywords: Structure, StructureManager, Display, Erase, Highlight,
    UnHighlight, Visible, Priority, Selectable, Visible,
    Visual, Connection, Ancestors, Descendants, Transformation
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_Structure
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_Structure(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Graphic3d_Structure self, Handle_Graphic3d_StructureManager theManager) -> Graphic3d_Structure
        __init__(Graphic3d_Structure self, Handle_Graphic3d_StructureManager theManager, Handle_Graphic3d_Structure thePrs) -> Graphic3d_Structure

        Creates a shadow link to existing graphic object.

        :type theManager: OCC.wrapper.Graphic3d.Handle_Graphic3d_StructureManager
        :type thePrs: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        this = _Graphic3d.new_Graphic3d_Structure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Clear(self, *args):
        """
        Clear(Graphic3d_Structure self, Standard_Boolean const WithDestruction)

        if WithDestruction == Standard_True then
        suppress all the groups of primitives in the structure.
        and it is mandatory to create a new group in <me>.
        if WithDestruction == Standard_False then
        clears all the groups of primitives in the structure.
        and all the groups are conserved and empty.
        They will be erased at the next screen update.
        The structure itself is conserved.
        The transformation and the attributes of <me> are conserved.
        The childs of <me> are conserved.

        :type WithDestruction: bool

        """
        return _Graphic3d.Graphic3d_Structure_Clear(self, *args)


    def Display(self, *args):
        """
        Display(Graphic3d_Structure self)

        Displays the structure <me> in all the views of the visualiser.


        """
        return _Graphic3d.Graphic3d_Structure_Display(self, *args)


    def DisplayPriority(self, *args):
        """
        DisplayPriority(Graphic3d_Structure self) -> Standard_Integer

        Returns the current display priority for the
        structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_Structure_DisplayPriority(self, *args)


    def Erase(self, *args):
        """
        Erase(Graphic3d_Structure self)

        Erases the structure <me> in all the views
        of the visualiser.


        """
        return _Graphic3d.Graphic3d_Structure_Erase(self, *args)


    def Highlight(self, *args):
        """
        Highlight(Graphic3d_Structure self, Handle_Graphic3d_PresentationAttributes theStyle, Standard_Boolean const theToUpdateMgr)

        Highlights the structure in all the views with the given style
        @param theStyle [in] the style (type of highlighting: box/color, color and opacity)
        @param theToUpdateMgr [in] defines whether related computed structures will be
        highlighted via structure manager or not

        :type theStyle: OCC.wrapper.Graphic3d.Handle_Graphic3d_PresentationAttributes
        :type theToUpdateMgr: bool

        """
        return _Graphic3d.Graphic3d_Structure_Highlight(self, *args)


    def CalculateBoundBox(self, *args):
        """
        CalculateBoundBox(Graphic3d_Structure self)

        Computes axis-aligned bounding box of a structure.


        """
        return _Graphic3d.Graphic3d_Structure_CalculateBoundBox(self, *args)


    def SetInfiniteState(self, *args):
        """
        SetInfiniteState(Graphic3d_Structure self, Standard_Boolean const theToSet)

        If <theToSet> is Standard_True then <me> is infinite and
        the MinMaxValues method method return :
        theXMin = theYMin = theZMin = RealFirst().
        theXMax = theYMax = theZMax = RealLast().
        By default, <me> is not infinite but empty.

        :type theToSet: bool

        """
        return _Graphic3d.Graphic3d_Structure_SetInfiniteState(self, *args)


    def SetDisplayPriority(self, *args):
        """
        SetDisplayPriority(Graphic3d_Structure self, Standard_Integer const Priority)

        Modifies the order of displaying the structure.
        Values are between 0 and 10.
        Structures are drawn according to their display priorities
        in ascending order.
        A structure of priority 10 is displayed the last and appears over the others.
        The default value is 5.
        Category: Methods to modify the class definition
        Warning: If <me> is displayed then the SetDisplayPriority
        method erase <me> and display <me> with the
        new priority.
        Raises PriorityDefinitionError if <Priority> is
        greater than 10 or a negative value.

        :type Priority: int

        """
        return _Graphic3d.Graphic3d_Structure_SetDisplayPriority(self, *args)


    def ResetDisplayPriority(self, *args):
        """
        ResetDisplayPriority(Graphic3d_Structure self)

        Reset the current priority of the structure to the
        previous priority.
        Category: Methods to modify the class definition
        Warning: If <me> is displayed then the SetDisplayPriority
        method erase <me> and display <me> with the
        previous priority.


        """
        return _Graphic3d.Graphic3d_Structure_ResetDisplayPriority(self, *args)


    def SetZLayer(self, *args):
        """
        SetZLayer(Graphic3d_Structure self, Graphic3d_ZLayerId const theLayerId)

        Set Z layer ID for the structure. The Z layer mechanism
        allows to display structures presented in higher layers in overlay
        of structures in lower layers by switching off z buffer depth
        test between layers

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Graphic3d_Structure_SetZLayer(self, *args)


    def GetZLayer(self, *args):
        """
        GetZLayer(Graphic3d_Structure self) -> Graphic3d_ZLayerId

        Get Z layer ID of displayed structure. The method
        returns -1 if the structure has no ID (deleted from graphic driver).

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Graphic3d_Structure_GetZLayer(self, *args)


    def SetClipPlanes(self, *args):
        """
        SetClipPlanes(Graphic3d_Structure self, Handle_Graphic3d_SequenceOfHClipPlane thePlanes)

        Changes a sequence of clip planes slicing the structure on rendering.
        @param thePlanes [in] the set of clip planes.

        :type thePlanes: OCC.wrapper.Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane

        """
        return _Graphic3d.Graphic3d_Structure_SetClipPlanes(self, *args)


    def ClipPlanes(self, *args):
        """
        Get clip planes slicing the structure on rendering.
        @return set of clip planes.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane

        """
        res = _Graphic3d.Graphic3d_Structure_ClipPlanes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetVisible(self, *args):
        """
        SetVisible(Graphic3d_Structure self, Standard_Boolean const AValue)

        Modifies the visibility indicator to Standard_True or
        Standard_False for the structure <me>.
        The default value at the definition of <me> is
        Standard_True.

        :type AValue: bool

        """
        return _Graphic3d.Graphic3d_Structure_SetVisible(self, *args)


    def SetVisual(self, *args):
        """
        SetVisual(Graphic3d_Structure self, Graphic3d_TypeOfStructure const AVisual)

        Modifies the visualisation mode for the structure <me>.

        :type AVisual: OCC.wrapper.Graphic3d.Graphic3d_TypeOfStructure

        """
        return _Graphic3d.Graphic3d_Structure_SetVisual(self, *args)


    def SetZoomLimit(self, *args):
        """
        SetZoomLimit(Graphic3d_Structure self, Standard_Real const LimitInf, Standard_Real const LimitSup)

        Modifies the minimum and maximum zoom coefficients
        for the structure <me>.
        The default value at the definition of <me> is unlimited.
        Category: Methods to modify the class definition
        Warning: Raises StructureDefinitionError if <LimitInf> is
        greater than <LimitSup> or if <LimitInf> or
        <LimitSup> is a negative value.

        :type LimitInf: float
        :type LimitSup: float

        """
        return _Graphic3d.Graphic3d_Structure_SetZoomLimit(self, *args)


    def SetIsForHighlight(self, *args):
        """
        SetIsForHighlight(Graphic3d_Structure self, Standard_Boolean const isForHighlight)

        marks the structure <me> representing wired structure needed for
        highlight only so it won't be added to BVH tree.
        Category: Methods to modify the class definition

        :type isForHighlight: bool

        """
        return _Graphic3d.Graphic3d_Structure_SetIsForHighlight(self, *args)


    def UnHighlight(self, *args):
        """
        UnHighlight(Graphic3d_Structure self)

        Suppresses the highlight for the structure <me>
        in all the views of the visualiser.


        """
        return _Graphic3d.Graphic3d_Structure_UnHighlight(self, *args)


    def Compute(self, *args):
        """
        Compute(Graphic3d_Structure self)
        Compute(Graphic3d_Structure self, Handle_Graphic3d_DataStructureManager aProjector) -> Handle_Graphic3d_Structure
        Compute(Graphic3d_Structure self, Handle_Graphic3d_DataStructureManager theProjector, Handle_Geom_Transformation theTrsf) -> Handle_Graphic3d_Structure
        Compute(Graphic3d_Structure self, Handle_Graphic3d_DataStructureManager aProjector, Handle_Graphic3d_Structure aStructure)
        Compute(Graphic3d_Structure self, Handle_Graphic3d_DataStructureManager theProjector, Handle_Geom_Transformation theTrsf, Handle_Graphic3d_Structure theStructure)

        Returns the new Structure defined for the new visualization

        :type theProjector: OCC.wrapper.Graphic3d.Handle_Graphic3d_DataStructureManager
        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation
        :type theStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Graphic3d_Structure_Compute(self, *args)


    def ReCompute(self, *args):
        """
        ReCompute(Graphic3d_Structure self)
        ReCompute(Graphic3d_Structure self, Handle_Graphic3d_DataStructureManager aProjector)

        Forces a new construction of the structure <me>
        if <me> is displayed in <aProjetor> and TOS_COMPUTED.

        :type aProjector: OCC.wrapper.Graphic3d.Handle_Graphic3d_DataStructureManager

        """
        return _Graphic3d.Graphic3d_Structure_ReCompute(self, *args)


    def ContainsFacet(self, *args):
        """
        ContainsFacet(Graphic3d_Structure self) -> Standard_Boolean

        Returns Standard_True if the structure <me> contains
        Polygons, Triangles or Quadrangles.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_Structure_ContainsFacet(self, *args)


    def Groups(self, *args):
        """
        Returns the groups sequence included in the structure <me> (internal storage).

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_SequenceOfGroup

        """
        res = _Graphic3d.Graphic3d_Structure_Groups(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NumberOfGroups(self, *args):
        """
        NumberOfGroups(Graphic3d_Structure self) -> Standard_Integer

        Returns the current number of groups in the
        structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_Structure_NumberOfGroups(self, *args)


    def NewGroup(self, *args):
        """
        NewGroup(Graphic3d_Structure self) -> Handle_Graphic3d_Group

        Append new group to this structure.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Group

        """
        return _Graphic3d.Graphic3d_Structure_NewGroup(self, *args)


    def HighlightStyle(self, *args):
        """
        Returns the highlight color for the Highlight method
        with the highlight method TOHM_COLOR or TOHM_BOUNDBOX.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_PresentationAttributes

        """
        res = _Graphic3d.Graphic3d_Structure_HighlightStyle(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsDeleted(self, *args):
        """
        IsDeleted(Graphic3d_Structure self) -> Standard_Boolean

        Returns Standard_True if the structure <me> is deleted.
        <me> is deleted after the call Remove (me).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_Structure_IsDeleted(self, *args)


    def IsDisplayed(self, *args):
        """
        IsDisplayed(Graphic3d_Structure self) -> Standard_Boolean

        Returns the display indicator for the structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_Structure_IsDisplayed(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Graphic3d_Structure self) -> Standard_Boolean

        Returns Standard_True if the structure <me> is empty.
        Warning: A structure is empty if :
        it do not have group or all the groups are empties
        and it do not have descendant or all the descendants
        are empties.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_Structure_IsEmpty(self, *args)


    def IsInfinite(self, *args):
        """
        IsInfinite(Graphic3d_Structure self) -> Standard_Boolean

        Returns Standard_True if the structure <me> is infinite.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_Structure_IsInfinite(self, *args)


    def IsHighlighted(self, *args):
        """
        IsHighlighted(Graphic3d_Structure self) -> Standard_Boolean

        Returns the highlight indicator for the structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_Structure_IsHighlighted(self, *args)


    def IsTransformed(self, *args):
        """
        IsTransformed(Graphic3d_Structure self) -> Standard_Boolean

        Returns Standard_True if the structure <me> is transformed.
        <=> The transformation != Identity.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_Structure_IsTransformed(self, *args)


    def IsVisible(self, *args):
        """
        IsVisible(Graphic3d_Structure self) -> Standard_Boolean

        Returns the visibility indicator for the structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_Structure_IsVisible(self, *args)


    def MinMaxValues(self, *args):
        """
        MinMaxValues(Graphic3d_Structure self, Standard_Boolean const theToIgnoreInfiniteFlag) -> Bnd_Box

        Returns the coordinates of the boundary box of the structure <me>.
        If <theToIgnoreInfiniteFlag> is TRUE, the method returns actual graphical
        boundaries of the Graphic3d_Group components. Otherwise, the
        method returns boundaries taking into account infinite state
        of the structure. This approach generally used for application
        specific fit operation (e.g. fitting the model into screen,
        not taking into accout infinite helper elements).
        Warning: If the structure <me> is empty then the empty box is returned,
        If the structure <me> is infinite then the whole box is returned.

        :type theToIgnoreInfiniteFlag: bool
        :rtype: OCC.wrapper.Bnd.Bnd_Box

        """
        return _Graphic3d.Graphic3d_Structure_MinMaxValues(self, *args)


    def Visual(self, *args):
        """
        Visual(Graphic3d_Structure self) -> Graphic3d_TypeOfStructure

        Returns the visualisation mode for the structure <me>.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfStructure

        """
        return _Graphic3d.Graphic3d_Structure_Visual(self, *args)


    def AcceptConnection(*args):
        """
        AcceptConnection(Handle_Graphic3d_Structure AStructure1, Handle_Graphic3d_Structure AStructure2, Graphic3d_TypeOfConnection const AType) -> Standard_Boolean

        Returns Standard_True if the connection is possible between
        <AStructure1> and <AStructure2> without a creation
        of a cycle.

        It's not possible to call the method
        AStructure1->Connect (AStructure2, TypeOfConnection)
        if
        - the set of all ancestors of <AStructure1> contains
        <AStructure1> and if the
        TypeOfConnection == TOC_DESCENDANT
        - the set of all descendants of <AStructure1> contains
        <AStructure2> and if the
        TypeOfConnection == TOC_ANCESTOR

        :type AStructure1: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type AStructure2: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_Structure_AcceptConnection(*args)

    AcceptConnection = staticmethod(AcceptConnection)

    def Ancestors(self, *args):
        """
        Ancestors(Graphic3d_Structure self, Graphic3d_MapOfStructure & SG)

        Returns the group of structures to which <me> is connected.

        :type SG: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure

        """
        return _Graphic3d.Graphic3d_Structure_Ancestors(self, *args)


    def Connect(self, *args):
        """
        Connect(Graphic3d_Structure self, Handle_Graphic3d_Structure AStructure, Graphic3d_TypeOfConnection const AType, Standard_Boolean const WithCheck)

        If Atype is TOC_DESCENDANT then add <AStructure>
        as a child structure of  <me>.
        If Atype is TOC_ANCESTOR then add <AStructure>
        as a parent structure of <me>.
        The connection propagates Display, Highlight, Erase,
        Remove, and stacks the transformations.
        No connection if the graph of the structures
        contains a cycle and <WithCheck> is Standard_True;

        :type AStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection
        :type WithCheck: bool

        """
        return _Graphic3d.Graphic3d_Structure_Connect(self, *args)


    def Descendants(self, *args):
        """
        Descendants(Graphic3d_Structure self, Graphic3d_MapOfStructure & SG)

        Returns the group of structures connected to <me>.

        :type SG: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure

        """
        return _Graphic3d.Graphic3d_Structure_Descendants(self, *args)


    def Disconnect(self, *args):
        """
        Disconnect(Graphic3d_Structure self, Handle_Graphic3d_Structure AStructure)

        Suppress the connection between <AStructure> and <me>.

        :type AStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Graphic3d_Structure_Disconnect(self, *args)


    def DisconnectAll(self, *args):
        """
        DisconnectAll(Graphic3d_Structure self, Graphic3d_TypeOfConnection const AType)

        If Atype is TOC_DESCENDANT then suppress all
        the connections with the child structures of <me>.
        If Atype is TOC_ANCESTOR then suppress all
        the connections with the parent structures of <me>.

        :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection

        """
        return _Graphic3d.Graphic3d_Structure_DisconnectAll(self, *args)


    def Network(*args):
        """
        Network(Handle_Graphic3d_Structure AStructure, Graphic3d_TypeOfConnection const AType, Graphic3d_MapOfStructure & ASet)

        Returns <ASet> the group of structures :
        - directly or indirectly connected to <AStructure> if the
        TypeOfConnection == TOC_DESCENDANT
        - to which <AStructure> is directly or indirectly connected
        if the TypeOfConnection == TOC_ANCESTOR

        :type AStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection
        :type ASet: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure

        """
        return _Graphic3d.Graphic3d_Structure_Network(*args)

    Network = staticmethod(Network)

    def SetOwner(self, *args):
        """
        SetOwner(Graphic3d_Structure self, Standard_Address const Owner)

        :type Owner: OCC.wrapper.Standard.Standard_Address

        """
        return _Graphic3d.Graphic3d_Structure_SetOwner(self, *args)


    def Owner(self, *args):
        """
        Owner(Graphic3d_Structure self) -> Standard_Address

        :rtype: OCC.wrapper.Standard.Standard_Address

        """
        return _Graphic3d.Graphic3d_Structure_Owner(self, *args)


    def SetHLRValidation(self, *args):
        """
        SetHLRValidation(Graphic3d_Structure self, Standard_Boolean const AFlag)

        :type AFlag: bool

        """
        return _Graphic3d.Graphic3d_Structure_SetHLRValidation(self, *args)


    def HLRValidation(self, *args):
        """
        HLRValidation(Graphic3d_Structure self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_Structure_HLRValidation(self, *args)


    def Transformation(self, *args):
        """
        Return local transformation.

        :rtype: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        res = _Graphic3d.Graphic3d_Structure_Transformation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTransformation(self, *args):
        """
        SetTransformation(Graphic3d_Structure self, Handle_Geom_Transformation theTrsf)

        Modifies the current local transformation

        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        return _Graphic3d.Graphic3d_Structure_SetTransformation(self, *args)


    def Transform(self, *args):
        """
        Transform(Graphic3d_Structure self, Handle_Geom_Transformation theTrsf)

        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        return _Graphic3d.Graphic3d_Structure_Transform(self, *args)


    def SetTransformPersistence(self, *args):
        """
        SetTransformPersistence(Graphic3d_Structure self, Handle_Graphic3d_TransformPers theTrsfPers)

        Modifies the current transform persistence (pan, zoom or rotate)

        :type theTrsfPers: OCC.wrapper.Graphic3d.Handle_Graphic3d_TransformPers

        """
        return _Graphic3d.Graphic3d_Structure_SetTransformPersistence(self, *args)


    def TransformPersistence(self, *args):
        """
        @return transform persistence of the presentable object.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TransformPers

        """
        res = _Graphic3d.Graphic3d_Structure_TransformPersistence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetMutable(self, *args):
        """
        SetMutable(Graphic3d_Structure self, Standard_Boolean const theIsMutable)

        Sets if the structure location has mutable nature (content or location will be changed regularly).

        :type theIsMutable: bool

        """
        return _Graphic3d.Graphic3d_Structure_SetMutable(self, *args)


    def IsMutable(self, *args):
        """
        IsMutable(Graphic3d_Structure self) -> Standard_Boolean

        Returns true if structure has mutable nature (content or location are be changed regularly).
        Mutable structure will be managed in different way than static onces.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_Structure_IsMutable(self, *args)


    def ComputeVisual(self, *args):
        """
        ComputeVisual(Graphic3d_Structure self) -> Graphic3d_TypeOfStructure

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfStructure

        """
        return _Graphic3d.Graphic3d_Structure_ComputeVisual(self, *args)


    def GraphicClear(self, *args):
        """
        GraphicClear(Graphic3d_Structure self, Standard_Boolean const WithDestruction)

        Clears the structure <me>.

        :type WithDestruction: bool

        """
        return _Graphic3d.Graphic3d_Structure_GraphicClear(self, *args)


    def GraphicConnect(self, *args):
        """
        GraphicConnect(Graphic3d_Structure self, Handle_Graphic3d_Structure ADaughter)

        :type ADaughter: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Graphic3d_Structure_GraphicConnect(self, *args)


    def GraphicDisconnect(self, *args):
        """
        GraphicDisconnect(Graphic3d_Structure self, Handle_Graphic3d_Structure ADaughter)

        :type ADaughter: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Graphic3d_Structure_GraphicDisconnect(self, *args)


    def GraphicTransform(self, *args):
        """
        GraphicTransform(Graphic3d_Structure self, Handle_Geom_Transformation theTrsf)

        Internal method which sets new transformation without calling graphic manager callbacks.

        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        return _Graphic3d.Graphic3d_Structure_GraphicTransform(self, *args)


    def Identification(self, *args):
        """
        Identification(Graphic3d_Structure self) -> Standard_Integer

        Returns the identification number of the structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_Structure_Identification(self, *args)


    def PrintNetwork(*args):
        """
        PrintNetwork(Handle_Graphic3d_Structure AStructure, Graphic3d_TypeOfConnection const AType)

        Prints informations about the network associated
        with the structure <AStructure>.

        :type AStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection

        """
        return _Graphic3d.Graphic3d_Structure_PrintNetwork(*args)

    PrintNetwork = staticmethod(PrintNetwork)

    def Remove(self, *args):
        """
        Remove(Graphic3d_Structure self)
        Remove(Graphic3d_Structure self, Standard_Address const APtr, Graphic3d_TypeOfConnection const AType)

        Suppress the adress <APtr> in the list
        of descendants or in the list of ancestors.

        :type APtr: OCC.wrapper.Standard.Standard_Address
        :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection

        """
        return _Graphic3d.Graphic3d_Structure_Remove(self, *args)


    def SetComputeVisual(self, *args):
        """
        SetComputeVisual(Graphic3d_Structure self, Graphic3d_TypeOfStructure const AVisual)

        :type AVisual: OCC.wrapper.Graphic3d.Graphic3d_TypeOfStructure

        """
        return _Graphic3d.Graphic3d_Structure_SetComputeVisual(self, *args)


    def Transforms(*args):
        """
        Transforms(gp_Trsf theTrsf, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ)

        Transforms theX, theY, theZ with the transformation theTrsf.

        :type theTrsf: OCC.wrapper.gp.gp_Trsf
        :type theX: float
        :type theY: float
        :type theZ: float
        :type theNewX: float
        :type theNewY: float
        :type theNewZ: float

        """
        return _Graphic3d.Graphic3d_Structure_Transforms(*args)

    Transforms = staticmethod(Transforms)

    def CStructure(self, *args):
        """
        Returns the low-level structure

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_CStructure

        """
        res = _Graphic3d.Graphic3d_Structure_CStructure(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_Structure_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_Structure_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_Structure_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Structure
Graphic3d_Structure_swigregister = _Graphic3d.Graphic3d_Structure_swigregister
Graphic3d_Structure_swigregister(Graphic3d_Structure)

def Graphic3d_Structure_AcceptConnection(*args):
    """
    Graphic3d_Structure_AcceptConnection(Handle_Graphic3d_Structure AStructure1, Handle_Graphic3d_Structure AStructure2, Graphic3d_TypeOfConnection const AType) -> Standard_Boolean

    Returns Standard_True if the connection is possible between
    <AStructure1> and <AStructure2> without a creation
    of a cycle.

    It's not possible to call the method
    AStructure1->Connect (AStructure2, TypeOfConnection)
    if
    - the set of all ancestors of <AStructure1> contains
    <AStructure1> and if the
    TypeOfConnection == TOC_DESCENDANT
    - the set of all descendants of <AStructure1> contains
    <AStructure2> and if the
    TypeOfConnection == TOC_ANCESTOR

    :type AStructure1: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
    :type AStructure2: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
    :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _Graphic3d.Graphic3d_Structure_AcceptConnection(*args)

def Graphic3d_Structure_Network(*args):
    """
    Graphic3d_Structure_Network(Handle_Graphic3d_Structure AStructure, Graphic3d_TypeOfConnection const AType, Graphic3d_MapOfStructure & ASet)

    Returns <ASet> the group of structures :
    - directly or indirectly connected to <AStructure> if the
    TypeOfConnection == TOC_DESCENDANT
    - to which <AStructure> is directly or indirectly connected
    if the TypeOfConnection == TOC_ANCESTOR

    :type AStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
    :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection
    :type ASet: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure

    """
    return _Graphic3d.Graphic3d_Structure_Network(*args)

def Graphic3d_Structure_PrintNetwork(*args):
    """
    Graphic3d_Structure_PrintNetwork(Handle_Graphic3d_Structure AStructure, Graphic3d_TypeOfConnection const AType)

    Prints informations about the network associated
    with the structure <AStructure>.

    :type AStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
    :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection

    """
    return _Graphic3d.Graphic3d_Structure_PrintNetwork(*args)

def Graphic3d_Structure_Transforms(*args):
    """
    Graphic3d_Structure_Transforms(gp_Trsf theTrsf, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ)

    Transforms theX, theY, theZ with the transformation theTrsf.

    :type theTrsf: OCC.wrapper.gp.gp_Trsf
    :type theX: float
    :type theY: float
    :type theZ: float
    :type theNewX: float
    :type theNewY: float
    :type theNewZ: float

    """
    return _Graphic3d.Graphic3d_Structure_Transforms(*args)

def Graphic3d_Structure_get_type_name(*args):
    """
    Graphic3d_Structure_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_Structure_get_type_name(*args)

def Graphic3d_Structure_get_type_descriptor(*args):
    """
    Graphic3d_Structure_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_Structure_get_type_descriptor(*args)

class Graphic3d_CView(Graphic3d_DataStructureManager):
    """
    Base class of a graphical view that carries out rendering process for a concrete
    implementation of graphical driver. Provides virtual interfaces for redrawing its
    contents, management of displayed structures and render settings. The source code 
    of the class itself implements functionality related to management of
    computed (HLR or "view-dependent") structures.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_CView
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_CView(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_CView_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_CView_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_CView_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Identification(self, *args):
        """
        Identification(Graphic3d_CView self) -> Standard_Integer

        Returns the identification number of the view.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_CView_Identification(self, *args)


    def Activate(self, *args):
        """
        Activate(Graphic3d_CView self)

        Activates the view. Maps presentations defined within structure manager onto this view.


        """
        return _Graphic3d.Graphic3d_CView_Activate(self, *args)


    def Deactivate(self, *args):
        """
        Deactivate(Graphic3d_CView self)

        Deactivates the view. Unmaps presentations defined within structure manager.
        The view in deactivated state will ignore actions on structures such as Display().


        """
        return _Graphic3d.Graphic3d_CView_Deactivate(self, *args)


    def IsActive(self, *args):
        """
        IsActive(Graphic3d_CView self) -> Standard_Boolean

        Returns the activity flag of the view.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_CView_IsActive(self, *args)


    def Remove(self, *args):
        """
        Remove(Graphic3d_CView self)

        Erases the view and removes from graphic driver.
        No more graphic operations are allowed in this view after the call.


        """
        return _Graphic3d.Graphic3d_CView_Remove(self, *args)


    def IsRemoved(self, *args):
        """
        IsRemoved(Graphic3d_CView self) -> Standard_Boolean

        Returns true if the view was removed.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_CView_IsRemoved(self, *args)


    def ShadingModel(self, *args):
        """
        ShadingModel(Graphic3d_CView self) -> Graphic3d_TypeOfShadingModel

        Returns default Shading Model of the view; Graphic3d_TOSM_FRAGMENT by default.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfShadingModel

        """
        return _Graphic3d.Graphic3d_CView_ShadingModel(self, *args)


    def SetShadingModel(self, *args):
        """
        SetShadingModel(Graphic3d_CView self, Graphic3d_TypeOfShadingModel theModel)

        Sets default Shading Model of the view.
        Will throw an exception on attempt to set Graphic3d_TOSM_DEFAULT.

        :type theModel: OCC.wrapper.Graphic3d.Graphic3d_TypeOfShadingModel

        """
        return _Graphic3d.Graphic3d_CView_SetShadingModel(self, *args)


    def VisualizationType(self, *args):
        """
        VisualizationType(Graphic3d_CView self) -> Graphic3d_TypeOfVisualization

        Returns visualization type of the view.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfVisualization

        """
        return _Graphic3d.Graphic3d_CView_VisualizationType(self, *args)


    def SetVisualizationType(self, *args):
        """
        SetVisualizationType(Graphic3d_CView self, Graphic3d_TypeOfVisualization const theType)

        Sets visualization type of the view.

        :type theType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfVisualization

        """
        return _Graphic3d.Graphic3d_CView_SetVisualizationType(self, *args)


    def SetComputedMode(self, *args):
        """
        SetComputedMode(Graphic3d_CView self, Standard_Boolean const theMode)

        Switches computed HLR mode in the view

        :type theMode: bool

        """
        return _Graphic3d.Graphic3d_CView_SetComputedMode(self, *args)


    def ComputedMode(self, *args):
        """
        ComputedMode(Graphic3d_CView self) -> Standard_Boolean

        Returns the computed HLR mode state

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_CView_ComputedMode(self, *args)


    def ReCompute(self, *args):
        """
        ReCompute(Graphic3d_CView self, Handle_Graphic3d_Structure theStructure)

        Computes the new presentation of the structure  displayed in this view with the type Graphic3d_TOS_COMPUTED.

        :type theStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Graphic3d_CView_ReCompute(self, *args)


    def Update(self, *args):
        """
        Update(Graphic3d_CView self, Graphic3d_ZLayerId const theLayerId=Graphic3d_ZLayerId_UNKNOWN)

        Invalidates bounding box of specified ZLayerId.

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Graphic3d_CView_Update(self, *args)


    def Compute(self, *args):
        """
        Compute(Graphic3d_CView self)

        Computes the new presentation of the structures displayed in this view with the type Graphic3d_TOS_COMPUTED.


        """
        return _Graphic3d.Graphic3d_CView_Compute(self, *args)


    def ContainsFacet(self, *args):
        """
        ContainsFacet(Graphic3d_CView self) -> Standard_Boolean
        ContainsFacet(Graphic3d_CView self, Graphic3d_MapOfStructure const & theSet) -> Standard_Boolean

        Returns Standard_True if one of the structures in the set contains Polygons, Triangles or Quadrangles.

        :type theSet: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_CView_ContainsFacet(self, *args)


    def DisplayedStructures(self, *args):
        """
        DisplayedStructures(Graphic3d_CView self, Graphic3d_MapOfStructure & theStructures)

        Returns the set of structures displayed in this view.

        :type theStructures: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure

        """
        return _Graphic3d.Graphic3d_CView_DisplayedStructures(self, *args)


    def NumberOfDisplayedStructures(self, *args):
        """
        NumberOfDisplayedStructures(Graphic3d_CView self) -> Standard_Integer

        Returns number of displayed structures in the view.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_CView_NumberOfDisplayedStructures(self, *args)


    def HiddenObjects(self, *args):
        """
        Returns map of objects hidden within this specific view (not viewer-wise).

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_NMapOfTransient

        """
        res = _Graphic3d.Graphic3d_CView_HiddenObjects(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeHiddenObjects(self, *args):
        """
        ChangeHiddenObjects(Graphic3d_CView self) -> Handle_Graphic3d_NMapOfTransient

        Returns map of objects hidden within this specific view (not viewer-wise).

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_NMapOfTransient

        """
        return _Graphic3d.Graphic3d_CView_ChangeHiddenObjects(self, *args)


    def IsComputed(self, *args):
        """
        IsComputed(Graphic3d_CView self, Standard_Integer const theStructId, Handle_Graphic3d_Structure theComputedStruct) -> Standard_Boolean

        Returns Standard_True in case if the structure with the given <theStructId> is
        in list of structures to be computed and stores computed struct to <theComputedStruct>.

        :type theStructId: int
        :type theComputedStruct: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_CView_IsComputed(self, *args)


    def MinMaxValues(self, *args):
        """
        MinMaxValues(Graphic3d_CView self, Standard_Boolean const theToIncludeAuxiliary) -> Bnd_Box
        MinMaxValues(Graphic3d_CView self, Graphic3d_MapOfStructure const & theSet, Standard_Boolean const theToIncludeAuxiliary) -> Bnd_Box

        Returns the coordinates of the boundary box of all structures in the set <theSet>.
        If <theToIgnoreInfiniteFlag> is TRUE, then the boundary box
        also includes minimum and maximum limits of graphical elements
        forming parts of infinite structures.

        :type theSet: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure
        :type theToIncludeAuxiliary: bool
        :rtype: OCC.wrapper.Bnd.Bnd_Box

        """
        return _Graphic3d.Graphic3d_CView_MinMaxValues(self, *args)


    def StructureManager(self, *args):
        """
        Returns the structure manager handle which manage structures associated with this view.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_StructureManager

        """
        res = _Graphic3d.Graphic3d_CView_StructureManager(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Redraw(self, *args):
        """
        Redraw(Graphic3d_CView self)

        Redraw content of the view.


        """
        return _Graphic3d.Graphic3d_CView_Redraw(self, *args)


    def RedrawImmediate(self, *args):
        """
        RedrawImmediate(Graphic3d_CView self)

        Redraw immediate content of the view.


        """
        return _Graphic3d.Graphic3d_CView_RedrawImmediate(self, *args)


    def Invalidate(self, *args):
        """
        Invalidate(Graphic3d_CView self)

        Invalidates content of the view but does not redraw it.


        """
        return _Graphic3d.Graphic3d_CView_Invalidate(self, *args)


    def IsInvalidated(self, *args):
        """
        IsInvalidated(Graphic3d_CView self) -> Standard_Boolean

        Return true if view content cache has been invalidated.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_CView_IsInvalidated(self, *args)


    def Resized(self, *args):
        """
        Resized(Graphic3d_CView self)

        Handle changing size of the rendering window.


        """
        return _Graphic3d.Graphic3d_CView_Resized(self, *args)


    def SetImmediateModeDrawToFront(self, *args):
        """
        SetImmediateModeDrawToFront(Graphic3d_CView self, Standard_Boolean const theDrawToFrontBuffer) -> Standard_Boolean

        @param theDrawToFrontBuffer Advanced option to modify rendering mode:
        1. TRUE.  Drawing immediate mode structures directly to the front buffer over the scene image.
        Fast, so preferred for interactive work (used by default).
        However these extra drawings will be missed in image dump since it is performed from back buffer.
        Notice that since no pre-buffering used the V-Sync will be ignored and rendering could be seen
        in run-time (in case of slow hardware) and/or tearing may appear.
        So this is strongly recommended to draw only simple (fast) structures.
        2. FALSE. Drawing immediate mode structures to the back buffer.
        The complete scene is redrawn first, so this mode is slower if scene contains complex data and/or V-Sync
        is turned on. But it works in any case and is especially useful for view dump because the dump image is read
        from the back buffer.
        @return previous mode.

        :type theDrawToFrontBuffer: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_CView_SetImmediateModeDrawToFront(self, *args)


    def SetWindow(self, *args):
        """
        SetWindow(Graphic3d_CView self, Handle_Aspect_Window theWindow, Aspect_RenderingContext const theContext=None)

        Creates and maps rendering window to the view.
        @param theWindow [in] the window.
        @param theContext [in] the rendering context. If NULL the context will be created internally.

        :type theWindow: OCC.wrapper.Aspect.Handle_Aspect_Window
        :type theContext: OCC.wrapper.Aspect.Aspect_RenderingContext

        """
        return _Graphic3d.Graphic3d_CView_SetWindow(self, *args)


    def Window(self, *args):
        """
        Window(Graphic3d_CView self) -> Handle_Aspect_Window

        Returns the window associated to the view.

        :rtype: OCC.wrapper.Aspect.Handle_Aspect_Window

        """
        return _Graphic3d.Graphic3d_CView_Window(self, *args)


    def IsDefined(self, *args):
        """
        IsDefined(Graphic3d_CView self) -> Standard_Boolean

        Returns True if the window associated to the view is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_CView_IsDefined(self, *args)


    def GetGraduatedTrihedron(self, *args):
        """
        Returns data of a graduated trihedron

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_GraduatedTrihedron

        """
        res = _Graphic3d.Graphic3d_CView_GetGraduatedTrihedron(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GraduatedTrihedronDisplay(self, *args):
        """
        GraduatedTrihedronDisplay(Graphic3d_CView self, Graphic3d_GraduatedTrihedron theTrihedronData)

        Displays Graduated Trihedron.

        :type theTrihedronData: OCC.wrapper.Graphic3d.Graphic3d_GraduatedTrihedron

        """
        return _Graphic3d.Graphic3d_CView_GraduatedTrihedronDisplay(self, *args)


    def GraduatedTrihedronErase(self, *args):
        """
        GraduatedTrihedronErase(Graphic3d_CView self)

        Erases Graduated Trihedron.


        """
        return _Graphic3d.Graphic3d_CView_GraduatedTrihedronErase(self, *args)


    def GraduatedTrihedronMinMaxValues(self, *args):
        """
        GraduatedTrihedronMinMaxValues(Graphic3d_CView self, NCollection_Vec3_Standard_ShortReal theMin, NCollection_Vec3_Standard_ShortReal theMax)

        Sets minimum and maximum points of scene bounding box for Graduated Trihedron stored in graphic view object.
        @param theMin [in] the minimum point of scene.
        @param theMax [in] the maximum point of scene.

        :type theMin: OCC.wrapper.Graphic3d.Graphic3d_Vec3
        :type theMax: OCC.wrapper.Graphic3d.Graphic3d_Vec3

        """
        return _Graphic3d.Graphic3d_CView_GraduatedTrihedronMinMaxValues(self, *args)


    def BufferDump(self, *args):
        """
        BufferDump(Graphic3d_CView self, Image_PixMap theImage, Graphic3d_BufferType const & theBufferType) -> Standard_Boolean

        Dump active rendering buffer into specified memory buffer.

        :type theImage: OCC.wrapper.Image.Image_PixMap
        :type theBufferType: OCC.wrapper.Graphic3d.Graphic3d_BufferType
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_CView_BufferDump(self, *args)


    def Export(self, *args):
        """
        Export(Graphic3d_CView self, Standard_CString const theFileName, Graphic3d_ExportFormat const theFormat, Graphic3d_SortType const theSortType=Graphic3d_ST_BSP_Tree) -> Standard_Boolean

        Export scene into the one of the Vector graphics formats (SVG, PS, PDF...).
        In contrast to Bitmaps, Vector graphics is scalable (so you may got quality benefits
        on printing to laser printer). Notice however that results may differ a lot and
        do not contain some elements.

        :type theFileName: OCC.wrapper.Standard.Standard_CString
        :type theFormat: OCC.wrapper.Graphic3d.Graphic3d_ExportFormat
        :type theSortType: OCC.wrapper.Graphic3d.Graphic3d_SortType
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_CView_Export(self, *args)


    def InvalidateBVHData(self, *args):
        """
        InvalidateBVHData(Graphic3d_CView self, Graphic3d_ZLayerId const theLayerId)

        Marks BVH tree and the set of BVH primitives of correspondent priority list with id theLayerId as outdated.

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Graphic3d_CView_InvalidateBVHData(self, *args)


    def AddZLayer(self, *args):
        """
        AddZLayer(Graphic3d_CView self, Graphic3d_ZLayerId const theLayerId)

        Add a new top-level z layer with ID <theLayerId> for
        the view. Z layers allow drawing structures in higher layers
        in foreground of structures in lower layers. To add a structure
        to desired layer on display it is necessary to set the layer
        ID for the structure.

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Graphic3d_CView_AddZLayer(self, *args)


    def ZLayerMax(self, *args):
        """
        ZLayerMax(Graphic3d_CView self) -> Standard_Integer

        Returns the maximum Z layer ID.
        First layer ID is Graphic3d_ZLayerId_Default, last ID is ZLayerMax().

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_CView_ZLayerMax(self, *args)


    def InvalidateZLayerBoundingBox(self, *args):
        """
        InvalidateZLayerBoundingBox(Graphic3d_CView self, Graphic3d_ZLayerId const theLayerId)

        Returns the bounding box of all structures displayed in the Z layer.

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Graphic3d_CView_InvalidateZLayerBoundingBox(self, *args)


    def ZLayerBoundingBox(self, *args):
        """
        ZLayerBoundingBox(Graphic3d_CView self, Graphic3d_ZLayerId const theLayerId, Handle_Graphic3d_Camera theCamera, Standard_Integer const theWindowWidth, Standard_Integer const theWindowHeight, Standard_Boolean const theToIncludeAuxiliary) -> Bnd_Box

        Returns the bounding box of all structures displayed in the Z layer.
        @param theLayerId            layer identifier
        @param theCamera             camera definition
        @param theWindowWidth        viewport width  (for applying transformation-persistence)
        @param theWindowHeight       viewport height (for applying transformation-persistence)
        @param theToIncludeAuxiliary consider also auxiliary presentations (with infinite flag or with trihedron transformation persistence)
        @return computed bounding box

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId
        :type theCamera: OCC.wrapper.Graphic3d.Handle_Graphic3d_Camera
        :type theWindowWidth: int
        :type theWindowHeight: int
        :type theToIncludeAuxiliary: bool
        :rtype: OCC.wrapper.Bnd.Bnd_Box

        """
        return _Graphic3d.Graphic3d_CView_ZLayerBoundingBox(self, *args)


    def RemoveZLayer(self, *args):
        """
        RemoveZLayer(Graphic3d_CView self, Graphic3d_ZLayerId const theLayerId)

        Remove Z layer from the specified view. All structures
        displayed at the moment in layer will be displayed in default layer
        ( the bottom-level z layer ). To unset layer ID from associated
        structures use method UnsetZLayer (...).

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Graphic3d_CView_RemoveZLayer(self, *args)


    def SetZLayerSettings(self, *args):
        """
        SetZLayerSettings(Graphic3d_CView self, Graphic3d_ZLayerId const theLayerId, Graphic3d_ZLayerSettings const & theSettings)

        Sets the settings for a single Z layer of specified view.

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId
        :type theSettings: OCC.wrapper.Graphic3d.Graphic3d_ZLayerSettings

        """
        return _Graphic3d.Graphic3d_CView_SetZLayerSettings(self, *args)


    def ConsiderZoomPersistenceObjects(self, *args):
        """
        ConsiderZoomPersistenceObjects(Graphic3d_CView self) -> Standard_Real

        Returns zoom-scale factor.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Graphic3d.Graphic3d_CView_ConsiderZoomPersistenceObjects(self, *args)


    def FBO(self, *args):
        """
        FBO(Graphic3d_CView self) -> Handle_Standard_Transient

        Returns pointer to an assigned framebuffer object.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _Graphic3d.Graphic3d_CView_FBO(self, *args)


    def SetFBO(self, *args):
        """
        SetFBO(Graphic3d_CView self, Handle_Standard_Transient theFbo)

        Sets framebuffer object for offscreen rendering.

        :type theFbo: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _Graphic3d.Graphic3d_CView_SetFBO(self, *args)


    def FBOCreate(self, *args):
        """
        FBOCreate(Graphic3d_CView self, Standard_Integer const theWidth, Standard_Integer const theHeight) -> Handle_Standard_Transient

        Generate offscreen FBO in the graphic library.
        If not supported on hardware returns NULL.

        :type theWidth: int
        :type theHeight: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _Graphic3d.Graphic3d_CView_FBOCreate(self, *args)


    def FBORelease(self, *args):
        """
        FBORelease(Graphic3d_CView self, Handle_Standard_Transient theFbo)

        Remove offscreen FBO from the graphic library

        :type theFbo: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _Graphic3d.Graphic3d_CView_FBORelease(self, *args)


    def FBOGetDimensions(self, *args):
        """
        FBOGetDimensions(Graphic3d_CView self, Handle_Standard_Transient theFbo)

        Read offscreen FBO configuration.

        :type theFbo: OCC.wrapper.Standard.Handle_Standard_Transient
        :type theWidth: int
        :type theHeight: int
        :type theWidthMax: int
        :type theHeightMax: int

        """
        return _Graphic3d.Graphic3d_CView_FBOGetDimensions(self, *args)


    def FBOChangeViewport(self, *args):
        """
        FBOChangeViewport(Graphic3d_CView self, Handle_Standard_Transient theFbo, Standard_Integer const theWidth, Standard_Integer const theHeight)

        Change offscreen FBO viewport.

        :type theFbo: OCC.wrapper.Standard.Handle_Standard_Transient
        :type theWidth: int
        :type theHeight: int

        """
        return _Graphic3d.Graphic3d_CView_FBOChangeViewport(self, *args)


    def CopySettings(self, *args):
        """
        CopySettings(Graphic3d_CView self, Handle_Graphic3d_CView theOther)

        Copy visualization settings from another view.
        Method is used for cloning views in viewer when its required to create view
        with same view properties.

        :type theOther: OCC.wrapper.Graphic3d.Handle_Graphic3d_CView

        """
        return _Graphic3d.Graphic3d_CView_CopySettings(self, *args)


    def RenderingParams(self, *args):
        """
        Returns current rendering parameters and effect settings.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_RenderingParams

        """
        res = _Graphic3d.Graphic3d_CView_RenderingParams(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeRenderingParams(self, *args):
        """
        ChangeRenderingParams(Graphic3d_CView self) -> Graphic3d_RenderingParams

        Returns reference to current rendering parameters and effect settings.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_RenderingParams

        """
        return _Graphic3d.Graphic3d_CView_ChangeRenderingParams(self, *args)


    def Background(self, *args):
        """
        Background(Graphic3d_CView self) -> Aspect_Background

        Returns background  fill color.

        :rtype: OCC.wrapper.Aspect.Aspect_Background

        """
        return _Graphic3d.Graphic3d_CView_Background(self, *args)


    def SetBackground(self, *args):
        """
        SetBackground(Graphic3d_CView self, Aspect_Background theBackground)

        Sets background fill color.

        :type theBackground: OCC.wrapper.Aspect.Aspect_Background

        """
        return _Graphic3d.Graphic3d_CView_SetBackground(self, *args)


    def GradientBackground(self, *args):
        """
        GradientBackground(Graphic3d_CView self) -> Aspect_GradientBackground

        Returns gradient background fill colors.

        :rtype: OCC.wrapper.Aspect.Aspect_GradientBackground

        """
        return _Graphic3d.Graphic3d_CView_GradientBackground(self, *args)


    def SetGradientBackground(self, *args):
        """
        SetGradientBackground(Graphic3d_CView self, Aspect_GradientBackground theBackground)

        Sets gradient background fill colors.

        :type theBackground: OCC.wrapper.Aspect.Aspect_GradientBackground

        """
        return _Graphic3d.Graphic3d_CView_SetGradientBackground(self, *args)


    def BackgroundImage(self, *args):
        """
        BackgroundImage(Graphic3d_CView self) -> TCollection_AsciiString

        Returns background image texture file path.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Graphic3d_CView_BackgroundImage(self, *args)


    def SetBackgroundImage(self, *args):
        """
        SetBackgroundImage(Graphic3d_CView self, TCollection_AsciiString theFilePath)

        Sets background image texture file path.

        :type theFilePath: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Graphic3d_CView_SetBackgroundImage(self, *args)


    def BackgroundImageStyle(self, *args):
        """
        BackgroundImageStyle(Graphic3d_CView self) -> Aspect_FillMethod

        Returns background image fill style.

        :rtype: OCC.wrapper.Aspect.Aspect_FillMethod

        """
        return _Graphic3d.Graphic3d_CView_BackgroundImageStyle(self, *args)


    def SetBackgroundImageStyle(self, *args):
        """
        SetBackgroundImageStyle(Graphic3d_CView self, Aspect_FillMethod const theFillStyle)

        Sets background image fill style.

        :type theFillStyle: OCC.wrapper.Aspect.Aspect_FillMethod

        """
        return _Graphic3d.Graphic3d_CView_SetBackgroundImageStyle(self, *args)


    def TextureEnv(self, *args):
        """
        TextureEnv(Graphic3d_CView self) -> Handle_Graphic3d_TextureEnv

        Returns environment texture set for the view.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureEnv

        """
        return _Graphic3d.Graphic3d_CView_TextureEnv(self, *args)


    def SetTextureEnv(self, *args):
        """
        SetTextureEnv(Graphic3d_CView self, Handle_Graphic3d_TextureEnv theTextureEnv)

        Sets environment texture for the view.

        :type theTextureEnv: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureEnv

        """
        return _Graphic3d.Graphic3d_CView_SetTextureEnv(self, *args)


    def IsCullingEnabled(self, *args):
        """
        IsCullingEnabled(Graphic3d_CView self) -> Standard_Boolean

        Returns the state of frustum culling optimization.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_CView_IsCullingEnabled(self, *args)


    def SetCullingEnabled(self, *args):
        """
        SetCullingEnabled(Graphic3d_CView self, Standard_Boolean const theIsEnabled)

        Enables or disables frustum culling optimization.

        :type theIsEnabled: bool

        """
        return _Graphic3d.Graphic3d_CView_SetCullingEnabled(self, *args)


    def BackfacingModel(self, *args):
        """
        BackfacingModel(Graphic3d_CView self) -> Graphic3d_TypeOfBackfacingModel

        Return backfacing model used for the view.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfBackfacingModel

        """
        return _Graphic3d.Graphic3d_CView_BackfacingModel(self, *args)


    def SetBackfacingModel(self, *args):
        """
        SetBackfacingModel(Graphic3d_CView self, Graphic3d_TypeOfBackfacingModel const theModel)

        Sets backfacing model for the view.

        :type theModel: OCC.wrapper.Graphic3d.Graphic3d_TypeOfBackfacingModel

        """
        return _Graphic3d.Graphic3d_CView_SetBackfacingModel(self, *args)


    def Camera(self, *args):
        """
        Returns camera object of the view.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Camera

        """
        res = _Graphic3d.Graphic3d_CView_Camera(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetCamera(self, *args):
        """
        SetCamera(Graphic3d_CView self, Handle_Graphic3d_Camera theCamera)

        Sets camera used by the view.

        :type theCamera: OCC.wrapper.Graphic3d.Handle_Graphic3d_Camera

        """
        return _Graphic3d.Graphic3d_CView_SetCamera(self, *args)


    def Lights(self, *args):
        """
        Returns list of lights of the view.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_LightSet

        """
        res = _Graphic3d.Graphic3d_CView_Lights(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetLights(self, *args):
        """
        SetLights(Graphic3d_CView self, Handle_Graphic3d_LightSet theLights)

        Sets list of lights for the view.

        :type theLights: OCC.wrapper.Graphic3d.Handle_Graphic3d_LightSet

        """
        return _Graphic3d.Graphic3d_CView_SetLights(self, *args)


    def ClipPlanes(self, *args):
        """
        Returns list of clip planes set for the view.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane

        """
        res = _Graphic3d.Graphic3d_CView_ClipPlanes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetClipPlanes(self, *args):
        """
        SetClipPlanes(Graphic3d_CView self, Handle_Graphic3d_SequenceOfHClipPlane thePlanes)

        Sets list of clip planes for the view.

        :type thePlanes: OCC.wrapper.Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane

        """
        return _Graphic3d.Graphic3d_CView_SetClipPlanes(self, *args)


    def DiagnosticInformation(self, *args):
        """
        DiagnosticInformation(Graphic3d_CView self, NCollection_IndexedDataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString theDict, Graphic3d_DiagnosticInfo theFlags)

        Fill in the dictionary with diagnostic info.
        Should be called within rendering thread.

        This API should be used only for user output or for creating automated reports.
        The format of returned information (e.g. key-value layout)
        is NOT part of this API and can be changed at any time.
        Thus application should not parse returned information to weed out specific parameters.

        :type theDict: OCC.wrapper.TColStd.TColStd_IndexedDataMapOfStringString
        :type theFlags: OCC.wrapper.Graphic3d.Graphic3d_DiagnosticInfo

        """
        return _Graphic3d.Graphic3d_CView_DiagnosticInformation(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_CView
Graphic3d_CView_swigregister = _Graphic3d.Graphic3d_CView_swigregister
Graphic3d_CView_swigregister(Graphic3d_CView)

def Graphic3d_CView_get_type_name(*args):
    """
    Graphic3d_CView_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_CView_get_type_name(*args)

def Graphic3d_CView_get_type_descriptor(*args):
    """
    Graphic3d_CView_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_CView_get_type_descriptor(*args)

class Graphic3d_Camera(Standard.Standard_Transient):
    """
    Camera class provides object-oriented approach to setting up projection
    and orientation properties of 3D view.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_Camera
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_Camera(self) 
            return h

    Projection_Orthographic = _Graphic3d.Graphic3d_Camera_Projection_Orthographic
    Projection_Perspective = _Graphic3d.Graphic3d_Camera_Projection_Perspective
    Projection_Stereo = _Graphic3d.Graphic3d_Camera_Projection_Stereo
    Projection_MonoLeftEye = _Graphic3d.Graphic3d_Camera_Projection_MonoLeftEye
    Projection_MonoRightEye = _Graphic3d.Graphic3d_Camera_Projection_MonoRightEye
    FocusType_Absolute = _Graphic3d.Graphic3d_Camera_FocusType_Absolute
    FocusType_Relative = _Graphic3d.Graphic3d_Camera_FocusType_Relative
    IODType_Absolute = _Graphic3d.Graphic3d_Camera_IODType_Absolute
    IODType_Relative = _Graphic3d.Graphic3d_Camera_IODType_Relative

    def __init__(self, *args):
        """
        __init__(Graphic3d_Camera self) -> Graphic3d_Camera
        __init__(Graphic3d_Camera self, Handle_Graphic3d_Camera theOther) -> Graphic3d_Camera

        Copy constructor.
        @param theOther [in] the camera to copy from.

        :type theOther: OCC.wrapper.Graphic3d.Handle_Graphic3d_Camera

        """
        this = _Graphic3d.new_Graphic3d_Camera(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def CopyMappingData(self, *args):
        """
        CopyMappingData(Graphic3d_Camera self, Handle_Graphic3d_Camera theOtherCamera)

        Initialize mapping related parameters from other camera handle.

        :type theOtherCamera: OCC.wrapper.Graphic3d.Handle_Graphic3d_Camera

        """
        return _Graphic3d.Graphic3d_Camera_CopyMappingData(self, *args)


    def CopyOrientationData(self, *args):
        """
        CopyOrientationData(Graphic3d_Camera self, Handle_Graphic3d_Camera theOtherCamera)

        Initialize orientation related parameters from other camera handle.

        :type theOtherCamera: OCC.wrapper.Graphic3d.Handle_Graphic3d_Camera

        """
        return _Graphic3d.Graphic3d_Camera_CopyOrientationData(self, *args)


    def Copy(self, *args):
        """
        Copy(Graphic3d_Camera self, Handle_Graphic3d_Camera theOther)

        Copy properties of another camera.
        @param theOther [in] the camera to copy from.

        :type theOther: OCC.wrapper.Graphic3d.Handle_Graphic3d_Camera

        """
        return _Graphic3d.Graphic3d_Camera_Copy(self, *args)


    def SetEye(self, *args):
        """
        SetEye(Graphic3d_Camera self, gp_Pnt theEye)

        Sets camera Eye position.
        @param theEye [in] the location of camera's Eye.

        :type theEye: OCC.wrapper.gp.gp_Pnt

        """
        return _Graphic3d.Graphic3d_Camera_SetEye(self, *args)


    def Eye(self, *args):
        """
        Get camera Eye position.
        @return camera eye location.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _Graphic3d.Graphic3d_Camera_Eye(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetCenter(self, *args):
        """
        SetCenter(Graphic3d_Camera self, gp_Pnt theCenter)

        Sets Center of the camera.
        @param theCenter [in] the point where the camera looks at.

        :type theCenter: OCC.wrapper.gp.gp_Pnt

        """
        return _Graphic3d.Graphic3d_Camera_SetCenter(self, *args)


    def Center(self, *args):
        """
        Get Center of the camera.
        @return the point where the camera looks at.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _Graphic3d.Graphic3d_Camera_Center(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetUp(self, *args):
        """
        SetUp(Graphic3d_Camera self, gp_Dir theUp)

        Sets camera Up direction vector, orthogonal to camera direction.
        @param theUp [in] the Up direction vector.

        :type theUp: OCC.wrapper.gp.gp_Dir

        """
        return _Graphic3d.Graphic3d_Camera_SetUp(self, *args)


    def OrthogonalizeUp(self, *args):
        """
        OrthogonalizeUp(Graphic3d_Camera self)

        Orthogonalize up direction vector.


        """
        return _Graphic3d.Graphic3d_Camera_OrthogonalizeUp(self, *args)


    def OrthogonalizedUp(self, *args):
        """
        OrthogonalizedUp(Graphic3d_Camera self) -> gp_Dir

        Return a copy of orthogonalized up direction vector.

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _Graphic3d.Graphic3d_Camera_OrthogonalizedUp(self, *args)


    def Up(self, *args):
        """
        Get camera Up direction vector.
        @return Camera's Up direction vector.

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        res = _Graphic3d.Graphic3d_Camera_Up(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAxialScale(self, *args):
        """
        SetAxialScale(Graphic3d_Camera self, gp_XYZ theAxialScale)

        Set camera axial scale.
        @param theAxialScale [in] the axial scale vector.

        :type theAxialScale: OCC.wrapper.gp.gp_XYZ

        """
        return _Graphic3d.Graphic3d_Camera_SetAxialScale(self, *args)


    def AxialScale(self, *args):
        """
        Get camera axial scale.
        @return Camera's axial scale.

        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        res = _Graphic3d.Graphic3d_Camera_AxialScale(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDistance(self, *args):
        """
        SetDistance(Graphic3d_Camera self, Standard_Real const theDistance)

        Set distance of Eye from camera Center.
        @param theDistance [in] the distance.

        :type theDistance: float

        """
        return _Graphic3d.Graphic3d_Camera_SetDistance(self, *args)


    def Distance(self, *args):
        """
        Distance(Graphic3d_Camera self) -> Standard_Real

        Get distance of Eye from camera Center.
        @return the distance.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Graphic3d.Graphic3d_Camera_Distance(self, *args)


    def SetDirection(self, *args):
        """
        SetDirection(Graphic3d_Camera self, gp_Dir theDir)

        Sets camera look direction.
        @param theDir [in] the direction.

        :type theDir: OCC.wrapper.gp.gp_Dir

        """
        return _Graphic3d.Graphic3d_Camera_SetDirection(self, *args)


    def Direction(self, *args):
        """
        Direction(Graphic3d_Camera self) -> gp_Dir

        Get camera look direction.
        @return camera look direction.

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _Graphic3d.Graphic3d_Camera_Direction(self, *args)


    def SetScale(self, *args):
        """
        SetScale(Graphic3d_Camera self, Standard_Real const theScale)

        Sets camera scale. For orthographic projection the scale factor
        corresponds to parallel scale of view mapping  (i.e. size
        of viewport). For perspective camera scale is converted to
        distance. The scale specifies equal size of the view projection in
        both dimensions assuming that the aspect is 1.0. The projection height
        and width are specified with the scale and correspondingly multiplied
        by the aspect.
        @param theScale [in] the scale factor.

        :type theScale: float

        """
        return _Graphic3d.Graphic3d_Camera_SetScale(self, *args)


    def Scale(self, *args):
        """
        Scale(Graphic3d_Camera self) -> Standard_Real

        Get camera scale.
        @return camera scale factor.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Graphic3d.Graphic3d_Camera_Scale(self, *args)


    def SetProjectionType(self, *args):
        """
        SetProjectionType(Graphic3d_Camera self, Graphic3d_Camera::Projection const theProjection)

        Change camera projection type.
        When switching to perspective projection from orthographic one,
        the ZNear and ZFar are reset to default values (0.001, 3000.0)
        if less than 0.0.
        @param theProjectionType [in] the camera projection type.

        :type theProjection: Projection

        """
        return _Graphic3d.Graphic3d_Camera_SetProjectionType(self, *args)


    def ProjectionType(self, *args):
        """
        ProjectionType(Graphic3d_Camera self) -> Graphic3d_Camera::Projection

        @return camera projection type.

        :rtype: Projection

        """
        return _Graphic3d.Graphic3d_Camera_ProjectionType(self, *args)


    def IsOrthographic(self, *args):
        """
        IsOrthographic(Graphic3d_Camera self) -> Standard_Boolean

        Check that the camera projection is orthographic.
        @return boolean flag that indicates whether the camera's projection is
        orthographic or not.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_Camera_IsOrthographic(self, *args)


    def IsStereo(self, *args):
        """
        IsStereo(Graphic3d_Camera self) -> Standard_Boolean

        Check whether the camera projection is stereo.
        Please note that stereo rendering is now implemented with support of
        Quad buffering.
        @return boolean flag indicating whether the stereographic L/R projection
        is chosen.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_Camera_IsStereo(self, *args)


    def SetFOVy(self, *args):
        """
        SetFOVy(Graphic3d_Camera self, Standard_Real const theFOVy)

        Set Field Of View (FOV) in y axis for perspective projection.
        @param theFOVy [in] the FOV in degrees.

        :type theFOVy: float

        """
        return _Graphic3d.Graphic3d_Camera_SetFOVy(self, *args)


    def FOVy(self, *args):
        """
        FOVy(Graphic3d_Camera self) -> Standard_Real

        Get Field Of View (FOV) in y axis.
        @return the FOV value in degrees.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Graphic3d.Graphic3d_Camera_FOVy(self, *args)


    def ZFitAll(self, *args):
        """
        ZFitAll(Graphic3d_Camera self, Standard_Real const theScaleFactor, Bnd_Box theMinMax, Bnd_Box theGraphicBB) -> bool
        ZFitAll(Graphic3d_Camera self, Standard_Real const theScaleFactor, Bnd_Box theMinMax, Bnd_Box theGraphicBB)

        Change Z-min and Z-max planes of projection volume to match the displayed objects.

        :type theScaleFactor: float
        :type theMinMax: OCC.wrapper.Bnd.Bnd_Box
        :type theGraphicBB: OCC.wrapper.Bnd.Bnd_Box

        """
        return _Graphic3d.Graphic3d_Camera_ZFitAll(self, *args)


    def SetZRange(self, *args):
        """
        SetZRange(Graphic3d_Camera self, Standard_Real const theZNear, Standard_Real const theZFar)

        Change the Near and Far Z-clipping plane positions.
        For orthographic projection, theZNear, theZFar can be negative or positive.
        For perspective projection, only positive values are allowed.
        Program error exception is raised if non-positive values are
        specified for perspective projection or theZNear >= theZFar.
        @param theZNear [in] the distance of the plane from the Eye.
        @param theZFar [in] the distance of the plane from the Eye.

        :type theZNear: float
        :type theZFar: float

        """
        return _Graphic3d.Graphic3d_Camera_SetZRange(self, *args)


    def ZNear(self, *args):
        """
        ZNear(Graphic3d_Camera self) -> Standard_Real

        Get the Near Z-clipping plane position.
        @return the distance of the plane from the Eye.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Graphic3d.Graphic3d_Camera_ZNear(self, *args)


    def ZFar(self, *args):
        """
        ZFar(Graphic3d_Camera self) -> Standard_Real

        Get the Far Z-clipping plane position.
        @return the distance of the plane from the Eye.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Graphic3d.Graphic3d_Camera_ZFar(self, *args)


    def SetAspect(self, *args):
        """
        SetAspect(Graphic3d_Camera self, Standard_Real const theAspect)

        Changes width / height display ratio.
        @param theAspect [in] the display ratio.

        :type theAspect: float

        """
        return _Graphic3d.Graphic3d_Camera_SetAspect(self, *args)


    def Aspect(self, *args):
        """
        Aspect(Graphic3d_Camera self) -> Standard_Real

        Get camera display ratio.
        @return display ratio.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Graphic3d.Graphic3d_Camera_Aspect(self, *args)


    def SetZFocus(self, *args):
        """
        SetZFocus(Graphic3d_Camera self, Graphic3d_Camera::FocusType const theType, Standard_Real const theZFocus)

        Sets stereographic focus distance.
        @param theType [in] the focus definition type. Focus can be defined
        as absolute value or relatively to (as coefficient of) coefficient of
        camera focal length.
        @param theZFocus [in] the focus absolute value or coefficient depending
        on the passed definition type.

        :type theType: FocusType
        :type theZFocus: float

        """
        return _Graphic3d.Graphic3d_Camera_SetZFocus(self, *args)


    def ZFocus(self, *args):
        """
        ZFocus(Graphic3d_Camera self) -> Standard_Real

        Get stereographic focus value.
        @return absolute or relative stereographic focus value
        depending on its definition type.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Graphic3d.Graphic3d_Camera_ZFocus(self, *args)


    def ZFocusType(self, *args):
        """
        ZFocusType(Graphic3d_Camera self) -> Graphic3d_Camera::FocusType

        Get stereographic focus definition type.
        @return definition type used for stereographic focus.

        :rtype: FocusType

        """
        return _Graphic3d.Graphic3d_Camera_ZFocusType(self, *args)


    def SetIOD(self, *args):
        """
        SetIOD(Graphic3d_Camera self, Graphic3d_Camera::IODType const theType, Standard_Real const theIOD)

        Sets Intraocular distance.
        @param theType [in] the IOD definition type. IOD can be defined as
        absolute value or relatively to (as coefficient of) camera focal length.
        @param theIOD [in] the Intraocular distance.

        :type theType: IODType
        :type theIOD: float

        """
        return _Graphic3d.Graphic3d_Camera_SetIOD(self, *args)


    def IOD(self, *args):
        """
        IOD(Graphic3d_Camera self) -> Standard_Real

        Get Intraocular distance value.
        @return absolute or relative IOD value depending on its definition type.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Graphic3d.Graphic3d_Camera_IOD(self, *args)


    def GetIODType(self, *args):
        """
        GetIODType(Graphic3d_Camera self) -> Graphic3d_Camera::IODType

        Get Intraocular distance definition type.
        @return definition type used for Intraocular distance.

        :rtype: IODType

        """
        return _Graphic3d.Graphic3d_Camera_GetIODType(self, *args)


    def Tile(self, *args):
        """
        Get current tile.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_CameraTile

        """
        res = _Graphic3d.Graphic3d_Camera_Tile(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTile(self, *args):
        """
        SetTile(Graphic3d_Camera self, Graphic3d_CameraTile theTile)

        Sets the Tile defining the drawing sub-area within View.
        Note that tile defining a region outside the view boundaries is also valid - use method Graphic3d_CameraTile::Cropped() to assign a cropped copy.
        @param theTile tile definition

        :type theTile: OCC.wrapper.Graphic3d.Graphic3d_CameraTile

        """
        return _Graphic3d.Graphic3d_Camera_SetTile(self, *args)


    def Transform(self, *args):
        """
        Transform(Graphic3d_Camera self, gp_Trsf theTrsf)

        Transform orientation components of the camera:
        Eye, Up and Center points.
        @param theTrsf [in] the transformation to apply.

        :type theTrsf: OCC.wrapper.gp.gp_Trsf

        """
        return _Graphic3d.Graphic3d_Camera_Transform(self, *args)


    def ViewDimensions(self, *args):
        """
        ViewDimensions(Graphic3d_Camera self) -> gp_XYZ
        ViewDimensions(Graphic3d_Camera self, Standard_Real const theZValue) -> gp_XYZ

        Calculate view plane size at center point with specified Z offset
        and distance between ZFar and ZNear planes.
        @param theZValue [in] the distance from the eye in eye-to-center direction
        @return values in form of gp_Pnt (Width, Height, Depth).

        :type theZValue: float
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _Graphic3d.Graphic3d_Camera_ViewDimensions(self, *args)


    def Frustum(self, *args):
        """
        Frustum(Graphic3d_Camera self, gp_Pln theLeft, gp_Pln theRight, gp_Pln theBottom, gp_Pln theTop, gp_Pln theNear, gp_Pln theFar)

        Calculate WCS frustum planes for the camera projection volume.
        Frustum is a convex volume determined by six planes directing
        inwards.
        The frustum planes are usually used as inputs for camera algorithms.
        Thus, if any changes to projection matrix calculation are necessary,
        the frustum planes calculation should be also touched.
        @param theLeft [out] the frustum plane for left side of view.
        @param theRight [out] the frustum plane for right side of view.
        @param theBottom [out] the frustum plane for bottom side of view.
        @param theTop [out] the frustum plane for top side of view.
        @param theNear [out] the frustum plane for near side of view.
        @param theFar [out] the frustum plane for far side of view.

        :type theLeft: OCC.wrapper.gp.gp_Pln
        :type theRight: OCC.wrapper.gp.gp_Pln
        :type theBottom: OCC.wrapper.gp.gp_Pln
        :type theTop: OCC.wrapper.gp.gp_Pln
        :type theNear: OCC.wrapper.gp.gp_Pln
        :type theFar: OCC.wrapper.gp.gp_Pln

        """
        return _Graphic3d.Graphic3d_Camera_Frustum(self, *args)


    def Project(self, *args):
        """
        Project(Graphic3d_Camera self, gp_Pnt thePnt) -> gp_Pnt

        Project point from world coordinate space to
        normalized device coordinates (mapping).
        @param thePnt [in] the 3D point in WCS.
        @return mapped point in NDC.

        :type thePnt: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Graphic3d.Graphic3d_Camera_Project(self, *args)


    def UnProject(self, *args):
        """
        UnProject(Graphic3d_Camera self, gp_Pnt thePnt) -> gp_Pnt

        Unproject point from normalized device coordinates
        to world coordinate space.
        @param thePnt [in] the NDC point.
        @return 3D point in WCS.

        :type thePnt: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Graphic3d.Graphic3d_Camera_UnProject(self, *args)


    def ConvertView2Proj(self, *args):
        """
        ConvertView2Proj(Graphic3d_Camera self, gp_Pnt thePnt) -> gp_Pnt

        Convert point from view coordinate space to
        projection coordinate space.
        @param thePnt [in] the point in VCS.
        @return point in NDC.

        :type thePnt: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Graphic3d.Graphic3d_Camera_ConvertView2Proj(self, *args)


    def ConvertProj2View(self, *args):
        """
        ConvertProj2View(Graphic3d_Camera self, gp_Pnt thePnt) -> gp_Pnt

        Convert point from projection coordinate space
        to view coordinate space.
        @param thePnt [in] the point in NDC.
        @return point in VCS.

        :type thePnt: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Graphic3d.Graphic3d_Camera_ConvertProj2View(self, *args)


    def ConvertWorld2View(self, *args):
        """
        ConvertWorld2View(Graphic3d_Camera self, gp_Pnt thePnt) -> gp_Pnt

        Convert point from world coordinate space to
        view coordinate space.
        @param thePnt [in] the 3D point in WCS.
        @return point in VCS.

        :type thePnt: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Graphic3d.Graphic3d_Camera_ConvertWorld2View(self, *args)


    def ConvertView2World(self, *args):
        """
        ConvertView2World(Graphic3d_Camera self, gp_Pnt thePnt) -> gp_Pnt

        Convert point from view coordinate space to
        world coordinates.
        @param thePnt [in] the 3D point in VCS.
        @return point in WCS.

        :type thePnt: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Graphic3d.Graphic3d_Camera_ConvertView2World(self, *args)


    def WorldViewProjState(self, *args):
        """
        @return projection modification state of the camera.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_WorldViewProjState

        """
        res = _Graphic3d.Graphic3d_Camera_WorldViewProjState(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ProjectionState(self, *args):
        """
        ProjectionState(Graphic3d_Camera self) -> Standard_Size

        Returns modification state of camera projection matrix

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Graphic3d_Camera_ProjectionState(self, *args)


    def WorldViewState(self, *args):
        """
        WorldViewState(Graphic3d_Camera self) -> Standard_Size

        Returns modification state of camera world view transformation matrix.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Graphic3d_Camera_WorldViewState(self, *args)


    def OrientationMatrix(self, *args):
        """
        Get orientation matrix.
        @return camera orientation matrix.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Mat4d

        """
        res = _Graphic3d.Graphic3d_Camera_OrientationMatrix(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def OrientationMatrixF(self, *args):
        """
        Get orientation matrix of Standard_ShortReal precision.
        @return camera orientation matrix.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Mat4

        """
        res = _Graphic3d.Graphic3d_Camera_OrientationMatrixF(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ProjectionMatrix(self, *args):
        """
        Get monographic or middle point projection matrix used for monographic
        rendering and for point projection / unprojection.
        @return monographic projection matrix.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Mat4d

        """
        res = _Graphic3d.Graphic3d_Camera_ProjectionMatrix(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ProjectionMatrixF(self, *args):
        """
        Get monographic or middle point projection matrix of Standard_ShortReal precision used for monographic
        rendering and for point projection / unprojection.
        @return monographic projection matrix.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Mat4

        """
        res = _Graphic3d.Graphic3d_Camera_ProjectionMatrixF(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ProjectionStereoLeft(self, *args):
        """
        @return stereographic matrix computed for left eye. Please note
        that this method is used for rendering for <i>Projection_Stereo</i>.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Mat4d

        """
        res = _Graphic3d.Graphic3d_Camera_ProjectionStereoLeft(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ProjectionStereoLeftF(self, *args):
        """
        @return stereographic matrix of Standard_ShortReal precision computed for left eye.
        Please note that this method is used for rendering for <i>Projection_Stereo</i>.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Mat4

        """
        res = _Graphic3d.Graphic3d_Camera_ProjectionStereoLeftF(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ProjectionStereoRight(self, *args):
        """
        @return stereographic matrix computed for right eye. Please note
        that this method is used for rendering for <i>Projection_Stereo</i>.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Mat4d

        """
        res = _Graphic3d.Graphic3d_Camera_ProjectionStereoRight(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ProjectionStereoRightF(self, *args):
        """
        @return stereographic matrix of Standard_ShortReal precision computed for right eye.
        Please note that this method is used for rendering for <i>Projection_Stereo</i>.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Mat4

        """
        res = _Graphic3d.Graphic3d_Camera_ProjectionStereoRightF(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def InvalidateProjection(self, *args):
        """
        InvalidateProjection(Graphic3d_Camera self)

        Invalidate state of projection matrix.
        The matrix will be updated on request.


        """
        return _Graphic3d.Graphic3d_Camera_InvalidateProjection(self, *args)


    def InvalidateOrientation(self, *args):
        """
        InvalidateOrientation(Graphic3d_Camera self)

        Invalidate orientation matrix.
        The matrix will be updated on request.


        """
        return _Graphic3d.Graphic3d_Camera_InvalidateOrientation(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_Camera_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_Camera_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_Camera_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Camera
Graphic3d_Camera_swigregister = _Graphic3d.Graphic3d_Camera_swigregister
Graphic3d_Camera_swigregister(Graphic3d_Camera)

def Graphic3d_Camera_get_type_name(*args):
    """
    Graphic3d_Camera_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_Camera_get_type_name(*args)

def Graphic3d_Camera_get_type_descriptor(*args):
    """
    Graphic3d_Camera_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_Camera_get_type_descriptor(*args)

class Graphic3d_StructureManager(Standard.Standard_Transient):
    """
    This class allows the definition of a manager to
    which the graphic objects are associated.
    It allows them to be globally manipulated.
    It defines the global attributes.
    Keywords: Structure, Structure Manager, Update Mode,
    Destroy, Highlight, Visible
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_StructureManager
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_StructureManager(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_StructureManager_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_StructureManager_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_StructureManager_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Graphic3d_StructureManager self, Handle_Graphic3d_GraphicDriver theDriver) -> Graphic3d_StructureManager

        Initializes the ViewManager.
        Currently creating of more than 100 viewer instances
        is not supported and leads to InitializationError and
        initialization failure.
        This limitation might be addressed in some future OCCT releases.
        Warning: Raises InitialisationError if the initialization
        of the ViewManager failed.

        :type theDriver: OCC.wrapper.Graphic3d.Handle_Graphic3d_GraphicDriver

        """
        this = _Graphic3d.new_Graphic3d_StructureManager(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Update(self, *args):
        """
        Update(Graphic3d_StructureManager self, Graphic3d_ZLayerId const theLayerId=Graphic3d_ZLayerId_UNKNOWN)

        Invalidates bounding box of specified ZLayerId.

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Graphic3d_StructureManager_Update(self, *args)


    def Remove(self, *args):
        """
        Remove(Graphic3d_StructureManager self)

        Deletes and erases the 3D structure manager.


        """
        return _Graphic3d.Graphic3d_StructureManager_Remove(self, *args)


    def DisplayedStructures(self, *args):
        """
        DisplayedStructures(Graphic3d_StructureManager self, Graphic3d_MapOfStructure & SG)

        Returns the set of structures displayed in
        visualiser <me>.

        :type SG: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure

        """
        return _Graphic3d.Graphic3d_StructureManager_DisplayedStructures(self, *args)


    def HighlightedStructures(self, *args):
        """
        HighlightedStructures(Graphic3d_StructureManager self, Graphic3d_MapOfStructure & SG)

        Returns the set of highlighted structures
        in a visualiser <me>.

        :type SG: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure

        """
        return _Graphic3d.Graphic3d_StructureManager_HighlightedStructures(self, *args)


    def ReCompute(self, *args):
        """
        ReCompute(Graphic3d_StructureManager self, Handle_Graphic3d_Structure theStructure)
        ReCompute(Graphic3d_StructureManager self, Handle_Graphic3d_Structure theStructure, Handle_Graphic3d_DataStructureManager theProjector)

        Forces a new construction of the structure.
        if <theStructure> is displayed in <theProjector> and TOS_COMPUTED.

        :type theStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type theProjector: OCC.wrapper.Graphic3d.Handle_Graphic3d_DataStructureManager

        """
        return _Graphic3d.Graphic3d_StructureManager_ReCompute(self, *args)


    def Clear(self, *args):
        """
        Clear(Graphic3d_StructureManager self, Handle_Graphic3d_Structure theStructure, Standard_Boolean const theWithDestruction)

        Clears the structure.

        :type theStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type theWithDestruction: bool

        """
        return _Graphic3d.Graphic3d_StructureManager_Clear(self, *args)


    def Connect(self, *args):
        """
        Connect(Graphic3d_StructureManager self, Handle_Graphic3d_Structure theMother, Handle_Graphic3d_Structure theDaughter)

        Connects the structures.

        :type theMother: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type theDaughter: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Graphic3d_StructureManager_Connect(self, *args)


    def Disconnect(self, *args):
        """
        Disconnect(Graphic3d_StructureManager self, Handle_Graphic3d_Structure theMother, Handle_Graphic3d_Structure theDaughter)

        Disconnects the structures.

        :type theMother: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type theDaughter: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Graphic3d_StructureManager_Disconnect(self, *args)


    def Display(self, *args):
        """
        Display(Graphic3d_StructureManager self, Handle_Graphic3d_Structure theStructure)

        Display the structure.

        :type theStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Graphic3d_StructureManager_Display(self, *args)


    def Erase(self, *args):
        """
        Erase(Graphic3d_StructureManager self)
        Erase(Graphic3d_StructureManager self, Handle_Graphic3d_Structure theStructure)

        Erases the structure.

        :type theStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Graphic3d_StructureManager_Erase(self, *args)


    def Highlight(self, *args):
        """
        Highlight(Graphic3d_StructureManager self, Handle_Graphic3d_Structure theStructure)

        Highlights the structure.

        :type theStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Graphic3d_StructureManager_Highlight(self, *args)


    def SetTransform(self, *args):
        """
        SetTransform(Graphic3d_StructureManager self, Handle_Graphic3d_Structure theStructure, Handle_Geom_Transformation theTrsf)

        Transforms the structure.

        :type theStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        return _Graphic3d.Graphic3d_StructureManager_SetTransform(self, *args)


    def ChangeDisplayPriority(self, *args):
        """
        ChangeDisplayPriority(Graphic3d_StructureManager self, Handle_Graphic3d_Structure theStructure, Standard_Integer const theOldPriority, Standard_Integer const theNewPriority)

        Changes the display priority of the structure <AStructure>.

        :type theStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type theOldPriority: int
        :type theNewPriority: int

        """
        return _Graphic3d.Graphic3d_StructureManager_ChangeDisplayPriority(self, *args)


    def ChangeZLayer(self, *args):
        """
        ChangeZLayer(Graphic3d_StructureManager self, Handle_Graphic3d_Structure theStructure, Graphic3d_ZLayerId const theLayerId)

        Change Z layer for structure. The Z layer mechanism allows to display structures in higher
        layers in overlay of structures in lower layers.

        :type theStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Graphic3d_StructureManager_ChangeZLayer(self, *args)


    def GraphicDriver(self, *args):
        """
        Returns the graphic driver of <me>.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_GraphicDriver

        """
        res = _Graphic3d.Graphic3d_StructureManager_GraphicDriver(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def UnIdentification(self, *args):
        """
        UnIdentification(Graphic3d_StructureManager self, Graphic3d_CView theView)

        Detach the view from this structure manager and release its identification.

        :type theView: OCC.wrapper.Graphic3d.Graphic3d_CView

        """
        return _Graphic3d.Graphic3d_StructureManager_UnIdentification(self, *args)


    def DefinedViews(self, *args):
        """
        Returns the group of views defined in the structure manager.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_IndexedMapOfView

        """
        res = _Graphic3d.Graphic3d_StructureManager_DefinedViews(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def MaxNumOfViews(self, *args):
        """
        MaxNumOfViews(Graphic3d_StructureManager self) -> Standard_Integer

        Returns the theoretical maximum number of definable views in the manager.
        Warning: It's not possible to accept an infinite number of definable views because each
        view must have an identification and we have different managers.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_StructureManager_MaxNumOfViews(self, *args)


    def Identification(self, *args):
        """
        Identification(Graphic3d_StructureManager self, Graphic3d_CView theView) -> Standard_Integer
        Identification(Graphic3d_StructureManager self, Standard_Integer const AId) -> Handle_Graphic3d_Structure

        Returns the structure with the identification number <AId>.

        :type AId: int
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Graphic3d_StructureManager_Identification(self, *args)


    def UnHighlight(self, *args):
        """
        UnHighlight(Graphic3d_StructureManager self, Handle_Graphic3d_Structure AStructure)
        UnHighlight(Graphic3d_StructureManager self)

        Suppresses the highlighting on all the structures in <me>.


        """
        return _Graphic3d.Graphic3d_StructureManager_UnHighlight(self, *args)


    def RecomputeStructures(self, *args):
        """
        RecomputeStructures(Graphic3d_StructureManager self)
        RecomputeStructures(Graphic3d_StructureManager self, Graphic3d_MapOfStructure const & theStructures)

        Recomputes all structures from theStructures.

        :type theStructures: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure

        """
        return _Graphic3d.Graphic3d_StructureManager_RecomputeStructures(self, *args)


    def RegisterObject(self, *args):
        """
        RegisterObject(Graphic3d_StructureManager self, Handle_Standard_Transient theObject) -> Handle_Graphic3d_ViewAffinity

        :type theObject: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ViewAffinity

        """
        return _Graphic3d.Graphic3d_StructureManager_RegisterObject(self, *args)


    def UnregisterObject(self, *args):
        """
        UnregisterObject(Graphic3d_StructureManager self, Handle_Standard_Transient theObject)

        :type theObject: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _Graphic3d.Graphic3d_StructureManager_UnregisterObject(self, *args)


    def ObjectAffinity(self, *args):
        """
        ObjectAffinity(Graphic3d_StructureManager self, Handle_Standard_Transient theObject) -> Handle_Graphic3d_ViewAffinity

        :type theObject: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ViewAffinity

        """
        return _Graphic3d.Graphic3d_StructureManager_ObjectAffinity(self, *args)


    def IsDeviceLost(self, *args):
        """
        IsDeviceLost(Graphic3d_StructureManager self) -> Standard_Boolean

        Returns TRUE if Device Lost flag has been set and presentation data should be reuploaded onto graphics driver.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_StructureManager_IsDeviceLost(self, *args)


    def SetDeviceLost(self, *args):
        """
        SetDeviceLost(Graphic3d_StructureManager self)

        Sets Device Lost flag.


        """
        return _Graphic3d.Graphic3d_StructureManager_SetDeviceLost(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_StructureManager
Graphic3d_StructureManager_swigregister = _Graphic3d.Graphic3d_StructureManager_swigregister
Graphic3d_StructureManager_swigregister(Graphic3d_StructureManager)

def Graphic3d_StructureManager_get_type_name(*args):
    """
    Graphic3d_StructureManager_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_StructureManager_get_type_name(*args)

def Graphic3d_StructureManager_get_type_descriptor(*args):
    """
    Graphic3d_StructureManager_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_StructureManager_get_type_descriptor(*args)

class Graphic3d_Texture1Dmanual(Graphic3d_Texture1D):
    """
    This class provides the implementation of a manual 1D texture.
    you MUST provides texture coordinates on your facets if you want to see your texture.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_Texture1Dmanual
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_Texture1Dmanual(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Graphic3d_Texture1Dmanual self, TCollection_AsciiString theFileName) -> Graphic3d_Texture1Dmanual
        __init__(Graphic3d_Texture1Dmanual self, Graphic3d_NameOfTexture1D const theNOT) -> Graphic3d_Texture1Dmanual
        __init__(Graphic3d_Texture1Dmanual self, Handle_Image_PixMap thePixMap) -> Graphic3d_Texture1Dmanual

        Creates a texture from the pixmap.

        :type thePixMap: OCC.wrapper.Image.Handle_Image_PixMap

        """
        this = _Graphic3d.new_Graphic3d_Texture1Dmanual(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_Texture1Dmanual_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_Texture1Dmanual_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_Texture1Dmanual_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Texture1Dmanual
Graphic3d_Texture1Dmanual_swigregister = _Graphic3d.Graphic3d_Texture1Dmanual_swigregister
Graphic3d_Texture1Dmanual_swigregister(Graphic3d_Texture1Dmanual)

def Graphic3d_Texture1Dmanual_get_type_name(*args):
    """
    Graphic3d_Texture1Dmanual_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_Texture1Dmanual_get_type_name(*args)

def Graphic3d_Texture1Dmanual_get_type_descriptor(*args):
    """
    Graphic3d_Texture1Dmanual_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_Texture1Dmanual_get_type_descriptor(*args)

class Graphic3d_Texture2Dmanual(Graphic3d_Texture2D):
    """
    This class defined a manual texture 2D
    facets MUST define texture coordinate
    if you want to see somethings on.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_Texture2Dmanual
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_Texture2Dmanual(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_Texture2Dmanual_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_Texture2Dmanual_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_Texture2Dmanual_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Graphic3d_Texture2Dmanual self, TCollection_AsciiString theFileName) -> Graphic3d_Texture2Dmanual
        __init__(Graphic3d_Texture2Dmanual self, Graphic3d_NameOfTexture2D const theNOT) -> Graphic3d_Texture2Dmanual
        __init__(Graphic3d_Texture2Dmanual self, Handle_Image_PixMap thePixMap) -> Graphic3d_Texture2Dmanual

        Creates a texture from the pixmap.
        MipMaps levels will be automatically generated if needed.

        :type thePixMap: OCC.wrapper.Image.Handle_Image_PixMap

        """
        this = _Graphic3d.new_Graphic3d_Texture2Dmanual(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle



    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Texture2Dmanual
Graphic3d_Texture2Dmanual_swigregister = _Graphic3d.Graphic3d_Texture2Dmanual_swigregister
Graphic3d_Texture2Dmanual_swigregister(Graphic3d_Texture2Dmanual)

def Graphic3d_Texture2Dmanual_get_type_name(*args):
    """
    Graphic3d_Texture2Dmanual_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_Texture2Dmanual_get_type_name(*args)

def Graphic3d_Texture2Dmanual_get_type_descriptor(*args):
    """
    Graphic3d_Texture2Dmanual_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_Texture2Dmanual_get_type_descriptor(*args)

class Graphic3d_AspectLine3d(Standard.Standard_Transient):
    """
    Creates and updates a group of attributes for 3d line primitives.
    This group contains the color, the type of line, and its thickness.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_AspectLine3d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_AspectLine3d(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_AspectLine3d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_AspectLine3d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_AspectLine3d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Graphic3d_AspectLine3d self) -> Graphic3d_AspectLine3d
        __init__(Graphic3d_AspectLine3d self, Quantity_Color theColor, Aspect_TypeOfLine const theType, Standard_Real const theWidth) -> Graphic3d_AspectLine3d

        Creates a context table for line primitives defined with the specified values.
        Warning: theWidth is the "line width scale factor".
        The nominal line width is 1 pixel.
        The width of the line is determined by applying the line width scale factor to this nominal line width.
        The supported line widths vary by 1-pixel units.

        :type theColor: OCC.wrapper.Quantity.Quantity_Color
        :type theType: OCC.wrapper.Aspect.Aspect_TypeOfLine
        :type theWidth: float

        """
        this = _Graphic3d.new_Graphic3d_AspectLine3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def ColorRGBA(self, *args):
        """
        Return color.

        :rtype: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        res = _Graphic3d.Graphic3d_AspectLine3d_ColorRGBA(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Color(self, *args):
        """
        Return color.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Graphic3d_AspectLine3d_Color(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetColor(self, *args):
        """
        SetColor(Graphic3d_AspectLine3d self, Quantity_Color theColor)

        Modifies the color.

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Graphic3d.Graphic3d_AspectLine3d_SetColor(self, *args)


    def Type(self, *args):
        """
        Type(Graphic3d_AspectLine3d self) -> Aspect_TypeOfLine

        Return line type.

        :rtype: OCC.wrapper.Aspect.Aspect_TypeOfLine

        """
        return _Graphic3d.Graphic3d_AspectLine3d_Type(self, *args)


    def SetType(self, *args):
        """
        SetType(Graphic3d_AspectLine3d self, Aspect_TypeOfLine const theType)

        Modifies the type of line.

        :type theType: OCC.wrapper.Aspect.Aspect_TypeOfLine

        """
        return _Graphic3d.Graphic3d_AspectLine3d_SetType(self, *args)


    def Width(self, *args):
        """
        Width(Graphic3d_AspectLine3d self) -> Standard_ShortReal

        Return line width.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_AspectLine3d_Width(self, *args)


    def SetWidth(self, *args):
        """
        SetWidth(Graphic3d_AspectLine3d self, Standard_Real const theWidth)
        SetWidth(Graphic3d_AspectLine3d self, Standard_ShortReal const theWidth)

        Modifies the line thickness.
        Warning: Raises AspectLineDefinitionError if the width is a negative value.

        :type theWidth: float

        """
        return _Graphic3d.Graphic3d_AspectLine3d_SetWidth(self, *args)


    def ShaderProgram(self, *args):
        """
        Return shader program.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderProgram

        """
        res = _Graphic3d.Graphic3d_AspectLine3d_ShaderProgram(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetShaderProgram(self, *args):
        """
        SetShaderProgram(Graphic3d_AspectLine3d self, Handle_Graphic3d_ShaderProgram theProgram)

        Sets up OpenGL/GLSL shader program.

        :type theProgram: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderProgram

        """
        return _Graphic3d.Graphic3d_AspectLine3d_SetShaderProgram(self, *args)


    def IsEqual(self, *args):
        """
        IsEqual(Graphic3d_AspectLine3d self, Graphic3d_AspectLine3d theOther) -> bool

        Check for equality with another line aspect.

        :type theOther: OCC.wrapper.Graphic3d.Graphic3d_AspectLine3d
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_AspectLine3d_IsEqual(self, *args)


    def Values(self, *args):
        """
        Values(Graphic3d_AspectLine3d self, Quantity_Color theColor)

        Returns the current values of the group.

        :type theColor: OCC.wrapper.Quantity.Quantity_Color
        :type theType: OCC.wrapper.Aspect.Aspect_TypeOfLine
        :type theWidth: float

        """
        return _Graphic3d.Graphic3d_AspectLine3d_Values(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_AspectLine3d
Graphic3d_AspectLine3d_swigregister = _Graphic3d.Graphic3d_AspectLine3d_swigregister
Graphic3d_AspectLine3d_swigregister(Graphic3d_AspectLine3d)

def Graphic3d_AspectLine3d_get_type_name(*args):
    """
    Graphic3d_AspectLine3d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_AspectLine3d_get_type_name(*args)

def Graphic3d_AspectLine3d_get_type_descriptor(*args):
    """
    Graphic3d_AspectLine3d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_AspectLine3d_get_type_descriptor(*args)

class Graphic3d_Texture1Dsegment(Graphic3d_Texture1D):
    """
    This class provides the implementation
    of a 1D texture applyable along a segment.
    You might use the SetSegment() method
    to set the way the texture is "streched" on facets.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_Texture1Dsegment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_Texture1Dsegment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Graphic3d_Texture1Dsegment self, TCollection_AsciiString theFileName) -> Graphic3d_Texture1Dsegment
        __init__(Graphic3d_Texture1Dsegment self, Graphic3d_NameOfTexture1D const theNOT) -> Graphic3d_Texture1Dsegment
        __init__(Graphic3d_Texture1Dsegment self, Handle_Image_PixMap thePixMap) -> Graphic3d_Texture1Dsegment

        Creates a texture from the pixmap.

        :type thePixMap: OCC.wrapper.Image.Handle_Image_PixMap

        """
        this = _Graphic3d.new_Graphic3d_Texture1Dsegment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetSegment(self, *args):
        """
        SetSegment(Graphic3d_Texture1Dsegment self, Standard_ShortReal const theX1, Standard_ShortReal const theY1, Standard_ShortReal const theZ1, Standard_ShortReal const theX2, Standard_ShortReal const theY2, Standard_ShortReal const theZ2)

        Sets the texture application bounds. Defines the way
        the texture is stretched across facets.
        Default values are <0.0, 0.0, 0.0> , <0.0, 0.0, 1.0>

        :type theX1: float
        :type theY1: float
        :type theZ1: float
        :type theX2: float
        :type theY2: float
        :type theZ2: float

        """
        return _Graphic3d.Graphic3d_Texture1Dsegment_SetSegment(self, *args)


    def Segment(self, *args):
        """
        Segment(Graphic3d_Texture1Dsegment self)

        Returns the values of the current segment X1, Y1, Z1 , X2, Y2, Z2.

        :type theX1: float
        :type theY1: float
        :type theZ1: float
        :type theX2: float
        :type theY2: float
        :type theZ2: float

        """
        return _Graphic3d.Graphic3d_Texture1Dsegment_Segment(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_Texture1Dsegment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_Texture1Dsegment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_Texture1Dsegment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Texture1Dsegment
Graphic3d_Texture1Dsegment_swigregister = _Graphic3d.Graphic3d_Texture1Dsegment_swigregister
Graphic3d_Texture1Dsegment_swigregister(Graphic3d_Texture1Dsegment)

def Graphic3d_Texture1Dsegment_get_type_name(*args):
    """
    Graphic3d_Texture1Dsegment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_Texture1Dsegment_get_type_name(*args)

def Graphic3d_Texture1Dsegment_get_type_descriptor(*args):
    """
    Graphic3d_Texture1Dsegment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_Texture1Dsegment_get_type_descriptor(*args)

class Graphic3d_TextureParams(Standard.Standard_Transient):
    """This class describes texture parameters."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_TextureParams
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_TextureParams(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_TextureParams_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_TextureParams_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_TextureParams_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Graphic3d_TextureParams self) -> Graphic3d_TextureParams

        Default constructor.


        """
        this = _Graphic3d.new_Graphic3d_TextureParams(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def TextureUnit(self, *args):
        """
        TextureUnit(Graphic3d_TextureParams self) -> Graphic3d_TextureUnit

        Default texture unit to be used, default is Graphic3d_TextureUnit_BaseColor.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TextureUnit

        """
        return _Graphic3d.Graphic3d_TextureParams_TextureUnit(self, *args)


    def SetTextureUnit(self, *args):
        """
        SetTextureUnit(Graphic3d_TextureParams self, Graphic3d_TextureUnit theUnit)

        Setup default texture unit.

        :type theUnit: OCC.wrapper.Graphic3d.Graphic3d_TextureUnit

        """
        return _Graphic3d.Graphic3d_TextureParams_SetTextureUnit(self, *args)


    def IsModulate(self, *args):
        """
        IsModulate(Graphic3d_TextureParams self) -> Standard_Boolean

        @return TRUE if the texture is modulate.
        Default value is FALSE.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_TextureParams_IsModulate(self, *args)


    def SetModulate(self, *args):
        """
        SetModulate(Graphic3d_TextureParams self, Standard_Boolean const theToModulate)

        @param theToModulate turn modulation on/off.

        :type theToModulate: bool

        """
        return _Graphic3d.Graphic3d_TextureParams_SetModulate(self, *args)


    def IsRepeat(self, *args):
        """
        IsRepeat(Graphic3d_TextureParams self) -> Standard_Boolean

        @return TRUE if the texture repeat is enabled.
        Default value is FALSE.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_TextureParams_IsRepeat(self, *args)


    def SetRepeat(self, *args):
        """
        SetRepeat(Graphic3d_TextureParams self, Standard_Boolean const theToRepeat)

        @param theToRepeat turn texture repeat mode ON or OFF (clamping).

        :type theToRepeat: bool

        """
        return _Graphic3d.Graphic3d_TextureParams_SetRepeat(self, *args)


    def Filter(self, *args):
        """
        Filter(Graphic3d_TextureParams self) -> Graphic3d_TypeOfTextureFilter

        @return texture interpolation filter.
        Default value is Graphic3d_TOTF_NEAREST.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfTextureFilter

        """
        return _Graphic3d.Graphic3d_TextureParams_Filter(self, *args)


    def SetFilter(self, *args):
        """
        SetFilter(Graphic3d_TextureParams self, Graphic3d_TypeOfTextureFilter const theFilter)

        @param theFilter texture interpolation filter.

        :type theFilter: OCC.wrapper.Graphic3d.Graphic3d_TypeOfTextureFilter

        """
        return _Graphic3d.Graphic3d_TextureParams_SetFilter(self, *args)


    def AnisoFilter(self, *args):
        """
        AnisoFilter(Graphic3d_TextureParams self) -> Graphic3d_LevelOfTextureAnisotropy

        @return level of anisontropy texture filter.
        Default value is Graphic3d_LOTA_OFF.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_LevelOfTextureAnisotropy

        """
        return _Graphic3d.Graphic3d_TextureParams_AnisoFilter(self, *args)


    def SetAnisoFilter(self, *args):
        """
        SetAnisoFilter(Graphic3d_TextureParams self, Graphic3d_LevelOfTextureAnisotropy const theLevel)

        @param theLevel level of anisontropy texture filter.

        :type theLevel: OCC.wrapper.Graphic3d.Graphic3d_LevelOfTextureAnisotropy

        """
        return _Graphic3d.Graphic3d_TextureParams_SetAnisoFilter(self, *args)


    def Rotation(self, *args):
        """
        Rotation(Graphic3d_TextureParams self) -> Standard_ShortReal

        @return rotation angle in degrees
        Default value is 0.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_TextureParams_Rotation(self, *args)


    def SetRotation(self, *args):
        """
        SetRotation(Graphic3d_TextureParams self, Standard_ShortReal const theAngleDegrees)

        @param theAngleDegrees rotation angle.

        :type theAngleDegrees: float

        """
        return _Graphic3d.Graphic3d_TextureParams_SetRotation(self, *args)


    def Scale(self, *args):
        """
        @return scale factor
        Default value is no scaling (1.0; 1.0).

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Vec2

        """
        res = _Graphic3d.Graphic3d_TextureParams_Scale(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetScale(self, *args):
        """
        SetScale(Graphic3d_TextureParams self, NCollection_Vec2_Standard_ShortReal theScale)

        @param theScale scale factor.

        :type theScale: OCC.wrapper.Graphic3d.Graphic3d_Vec2

        """
        return _Graphic3d.Graphic3d_TextureParams_SetScale(self, *args)


    def Translation(self, *args):
        """
        @return translation vector
        Default value is no translation (0.0; 0.0).

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Vec2

        """
        res = _Graphic3d.Graphic3d_TextureParams_Translation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTranslation(self, *args):
        """
        SetTranslation(Graphic3d_TextureParams self, NCollection_Vec2_Standard_ShortReal theVec)

        @param theVec translation vector.

        :type theVec: OCC.wrapper.Graphic3d.Graphic3d_Vec2

        """
        return _Graphic3d.Graphic3d_TextureParams_SetTranslation(self, *args)


    def GenMode(self, *args):
        """
        GenMode(Graphic3d_TextureParams self) -> Graphic3d_TypeOfTextureMode

        @return texture coordinates generation mode.
        Default value is Graphic3d_TOTM_MANUAL.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfTextureMode

        """
        return _Graphic3d.Graphic3d_TextureParams_GenMode(self, *args)


    def GenPlaneS(self, *args):
        """
        @return texture coordinates generation plane S.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Vec4

        """
        res = _Graphic3d.Graphic3d_TextureParams_GenPlaneS(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GenPlaneT(self, *args):
        """
        @return texture coordinates generation plane T.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Vec4

        """
        res = _Graphic3d.Graphic3d_TextureParams_GenPlaneT(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetGenMode(self, *args):
        """
        SetGenMode(Graphic3d_TextureParams self, Graphic3d_TypeOfTextureMode const theMode, Graphic3d_Vec4 const thePlaneS, Graphic3d_Vec4 const thePlaneT)

        Setup texture coordinates generation mode.

        :type theMode: OCC.wrapper.Graphic3d.Graphic3d_TypeOfTextureMode
        :type thePlaneS: OCC.wrapper.Graphic3d.Graphic3d_Vec4
        :type thePlaneT: OCC.wrapper.Graphic3d.Graphic3d_Vec4

        """
        return _Graphic3d.Graphic3d_TextureParams_SetGenMode(self, *args)


    def SamplerRevision(self, *args):
        """
        SamplerRevision(Graphic3d_TextureParams self) -> unsigned int

        Return modification counter of parameters related to sampler state.

        :rtype: unsigned int

        """
        return _Graphic3d.Graphic3d_TextureParams_SamplerRevision(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_TextureParams
Graphic3d_TextureParams_swigregister = _Graphic3d.Graphic3d_TextureParams_swigregister
Graphic3d_TextureParams_swigregister(Graphic3d_TextureParams)

def Graphic3d_TextureParams_get_type_name(*args):
    """
    Graphic3d_TextureParams_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_TextureParams_get_type_name(*args)

def Graphic3d_TextureParams_get_type_descriptor(*args):
    """
    Graphic3d_TextureParams_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_TextureParams_get_type_descriptor(*args)

class Graphic3d_HatchStyle(Standard.Standard_Transient):
    """
    A class that provides an API to use standard OCCT hatch styles
    defined in Aspect_HatchStyle enum or to create custom styles
    from a user-defined bitmap
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_HatchStyle
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_HatchStyle(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_HatchStyle_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_HatchStyle_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_HatchStyle_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Graphic3d_HatchStyle self, Handle_Image_PixMap thePattern) -> Graphic3d_HatchStyle
        __init__(Graphic3d_HatchStyle self, Aspect_HatchStyle const theType) -> Graphic3d_HatchStyle

        Creates a new predefined hatch style with the given id in Aspect_HatchStyle enum.
        GPU memory for the pattern will not be allocated.

        :type theType: OCC.wrapper.Aspect.Aspect_HatchStyle

        """
        this = _Graphic3d.new_Graphic3d_HatchStyle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Pattern(self, *args):
        """
        Pattern(Graphic3d_HatchStyle self) -> Standard_Byte const *

        Returns the pattern of custom hatch style

        :rtype: OCC.wrapper.Standard.Standard_Byte

        """
        return _Graphic3d.Graphic3d_HatchStyle_Pattern(self, *args)


    def HatchType(self, *args):
        """
        HatchType(Graphic3d_HatchStyle self) -> Standard_Integer

        In case if predefined OCCT style is used, returns
        index in Aspect_HatchStyle enumeration. If the style
        is custom, returns unique index of the style

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_HatchStyle_HatchType(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_HatchStyle
Graphic3d_HatchStyle_swigregister = _Graphic3d.Graphic3d_HatchStyle_swigregister
Graphic3d_HatchStyle_swigregister(Graphic3d_HatchStyle)

def Graphic3d_HatchStyle_get_type_name(*args):
    """
    Graphic3d_HatchStyle_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_HatchStyle_get_type_name(*args)

def Graphic3d_HatchStyle_get_type_descriptor(*args):
    """
    Graphic3d_HatchStyle_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_HatchStyle_get_type_descriptor(*args)

class Graphic3d_ArrayOfQuadrangles(Graphic3d_ArrayOfPrimitives):
    """
    Contains quadrangles array definition.
    WARNING! Quadrangle primitives might be unsupported by graphics library.
    Triangulation should be used instead of quads for better compatibility.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_ArrayOfQuadrangles
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_ArrayOfQuadrangles(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_ArrayOfQuadrangles_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_ArrayOfQuadrangles_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_ArrayOfQuadrangles_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theMaxVertexs, Standard_Integer const theMaxEdges=0, Standard_Boolean const theHasVNormals, Standard_Boolean const theHasVColors, Standard_Boolean const theHasVTexels) -> Graphic3d_ArrayOfQuadrangles

        Creates an array of quadrangles, a quadrangle can be filled as:
        1) Creating a set of quadrangles defined with his vertexes, i.e:
        @code
        myArray = Graphic3d_ArrayOfQuadrangles (8);
        myArray->AddVertex (x1, y1, z1);
        ....
        myArray->AddVertex (x8, y8, z8);
        @endcode
        2) Creating a set of indexed quadrangles defined with his vertex ans edges, i.e:
        @code
        myArray = Graphic3d_ArrayOfQuadrangles (6, 8);
        myArray->AddVertex (x1, y1, z1);
        ....
        myArray->AddVertex (x6, y6, z6);
        myArray->AddEdge (1);
        myArray->AddEdge (2);
        myArray->AddEdge (3);
        myArray->AddEdge (4);
        myArray->AddEdge (3);
        myArray->AddEdge (4);
        myArray->AddEdge (5);
        myArray->AddEdge (6);
        @endcode
        @param theMaxVertexs defines the maximum allowed vertex number in the array
        @param theMaxEdges   defines the maximum allowed edge   number in the array (for indexed array)

        :type theMaxVertexs: int
        :type theMaxEdges: int
        :type theHasVNormals: bool
        :type theHasVColors: bool
        :type theHasVTexels: bool

        """
        this = _Graphic3d.new_Graphic3d_ArrayOfQuadrangles(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle



    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ArrayOfQuadrangles
Graphic3d_ArrayOfQuadrangles_swigregister = _Graphic3d.Graphic3d_ArrayOfQuadrangles_swigregister
Graphic3d_ArrayOfQuadrangles_swigregister(Graphic3d_ArrayOfQuadrangles)

def Graphic3d_ArrayOfQuadrangles_get_type_name(*args):
    """
    Graphic3d_ArrayOfQuadrangles_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_ArrayOfQuadrangles_get_type_name(*args)

def Graphic3d_ArrayOfQuadrangles_get_type_descriptor(*args):
    """
    Graphic3d_ArrayOfQuadrangles_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_ArrayOfQuadrangles_get_type_descriptor(*args)

class Graphic3d_PresentationAttributes(Standard.Standard_Transient):
    """Class defines presentation properties."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_PresentationAttributes
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_PresentationAttributes(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_PresentationAttributes_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_PresentationAttributes_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_PresentationAttributes_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Graphic3d_PresentationAttributes self) -> Graphic3d_PresentationAttributes

        Empty constructor.


        """
        this = _Graphic3d.new_Graphic3d_PresentationAttributes(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Method(self, *args):
        """
        Method(Graphic3d_PresentationAttributes self) -> Aspect_TypeOfHighlightMethod

        Returns highlight method, Aspect_TOHM_COLOR by default.

        :rtype: OCC.wrapper.Aspect.Aspect_TypeOfHighlightMethod

        """
        return _Graphic3d.Graphic3d_PresentationAttributes_Method(self, *args)


    def SetMethod(self, *args):
        """
        SetMethod(Graphic3d_PresentationAttributes self, Aspect_TypeOfHighlightMethod const theMethod)

        Changes highlight method to the given one.

        :type theMethod: OCC.wrapper.Aspect.Aspect_TypeOfHighlightMethod

        """
        return _Graphic3d.Graphic3d_PresentationAttributes_SetMethod(self, *args)


    def ColorRGBA(self, *args):
        """
        Returns basic presentation color (including alpha channel).

        :rtype: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        res = _Graphic3d.Graphic3d_PresentationAttributes_ColorRGBA(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Color(self, *args):
        """
        Returns basic presentation color, Quantity_NOC_WHITE by default.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Graphic3d_PresentationAttributes_Color(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetColor(self, *args):
        """
        SetColor(Graphic3d_PresentationAttributes self, Quantity_Color theColor)

        Sets basic presentation color (RGB components, does not modifies transparency).

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Graphic3d.Graphic3d_PresentationAttributes_SetColor(self, *args)


    def Transparency(self, *args):
        """
        Transparency(Graphic3d_PresentationAttributes self) -> Standard_ShortReal

        Returns basic presentation transparency (0 - opaque, 1 - fully transparent), 0 by default (opaque).

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_PresentationAttributes_Transparency(self, *args)


    def SetTransparency(self, *args):
        """
        SetTransparency(Graphic3d_PresentationAttributes self, Standard_ShortReal const theTranspCoef)

        Sets basic presentation transparency (0 - opaque, 1 - fully transparent).

        :type theTranspCoef: float

        """
        return _Graphic3d.Graphic3d_PresentationAttributes_SetTransparency(self, *args)


    def ZLayer(self, *args):
        """
        ZLayer(Graphic3d_PresentationAttributes self) -> Graphic3d_ZLayerId

        Returns presentation Zlayer, Graphic3d_ZLayerId_Default by default.
        Graphic3d_ZLayerId_UNKNOWN means undefined (a layer of main presentation to be used).

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Graphic3d_PresentationAttributes_ZLayer(self, *args)


    def SetZLayer(self, *args):
        """
        SetZLayer(Graphic3d_PresentationAttributes self, Graphic3d_ZLayerId const theLayer)

        Sets presentation Zlayer.

        :type theLayer: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Graphic3d_PresentationAttributes_SetZLayer(self, *args)


    def DisplayMode(self, *args):
        """
        DisplayMode(Graphic3d_PresentationAttributes self) -> Standard_Integer

        Returns display mode, 0 by default.
        -1 means undefined (main display mode of presentation to be used).

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_PresentationAttributes_DisplayMode(self, *args)


    def SetDisplayMode(self, *args):
        """
        SetDisplayMode(Graphic3d_PresentationAttributes self, Standard_Integer const theMode)

        Sets display mode.

        :type theMode: int

        """
        return _Graphic3d.Graphic3d_PresentationAttributes_SetDisplayMode(self, *args)


    def BasicFillAreaAspect(self, *args):
        """
        Return basic presentation fill area aspect, NULL by default.
        When set, might be used instead of Color() property.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectFillArea3d

        """
        res = _Graphic3d.Graphic3d_PresentationAttributes_BasicFillAreaAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetBasicFillAreaAspect(self, *args):
        """
        SetBasicFillAreaAspect(Graphic3d_PresentationAttributes self, Handle_Graphic3d_AspectFillArea3d theAspect)

        Sets basic presentation fill area aspect.

        :type theAspect: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectFillArea3d

        """
        return _Graphic3d.Graphic3d_PresentationAttributes_SetBasicFillAreaAspect(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_PresentationAttributes
Graphic3d_PresentationAttributes_swigregister = _Graphic3d.Graphic3d_PresentationAttributes_swigregister
Graphic3d_PresentationAttributes_swigregister(Graphic3d_PresentationAttributes)

def Graphic3d_PresentationAttributes_get_type_name(*args):
    """
    Graphic3d_PresentationAttributes_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_PresentationAttributes_get_type_name(*args)

def Graphic3d_PresentationAttributes_get_type_descriptor(*args):
    """
    Graphic3d_PresentationAttributes_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_PresentationAttributes_get_type_descriptor(*args)

class Graphic3d_ArrayOfTriangles(Graphic3d_ArrayOfPrimitives):
    """Contains triangles array definition"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_ArrayOfTriangles
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_ArrayOfTriangles(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_ArrayOfTriangles_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_ArrayOfTriangles_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_ArrayOfTriangles_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Graphic3d_ArrayOfTriangles self, Standard_Integer const theMaxVertexs, Standard_Integer const theMaxEdges=0, Standard_Boolean const theHasVNormals, Standard_Boolean const theHasVColors, Standard_Boolean const theHasVTexels) -> Graphic3d_ArrayOfTriangles

        Creates an array of triangles, a triangle can be filled as:
        1) Creating a set of triangles defined with his vertexes, i.e:
        @code
        myArray = Graphic3d_ArrayOfTriangles (6);
        myArray->AddVertex (x1, y1, z1);
        ....
        myArray->AddVertex (x6, y6, z6);
        @endcode
        3) Creating a set of indexed triangles defined with his vertex and edges, i.e:
        @code
        myArray = Graphic3d_ArrayOfTriangles (4, 6);
        myArray->AddVertex (x1, y1, z1);
        ....
        myArray->AddVertex (x4, y4, z4);
        myArray->AddEdge (1);
        myArray->AddEdge (2);
        myArray->AddEdge (3);
        myArray->AddEdge (2);
        myArray->AddEdge (3);
        myArray->AddEdge (4);
        @endcode
        @param theMaxVertexs  defines the maximum allowed vertex number in the array
        @param theMaxEdges    defines the maximum allowed edge   number in the array
        @param theHasVNormals when TRUE,  AddVertex(Point,Normal), AddVertex(Point,Normal,Color) or AddVertex(Point,Normal,Texel) should be used to specify vertex normal;
        vertex normals should be specified coherent to triangle orientation (defined by order of vertexes within triangle) for proper rendering
        @param theHasVColors  when TRUE,  AddVertex(Point,Color) or AddVertex(Point,Normal,Color) should be used to specify vertex color
        @param theHasVTexels  when TRUE,  AddVertex(Point,Texel) or AddVertex(Point,Normal,Texel) should be used to specify vertex UV coordinates

        :type theMaxVertexs: int
        :type theMaxEdges: int
        :type theHasVNormals: bool
        :type theHasVColors: bool
        :type theHasVTexels: bool

        """
        this = _Graphic3d.new_Graphic3d_ArrayOfTriangles(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle



    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ArrayOfTriangles
Graphic3d_ArrayOfTriangles_swigregister = _Graphic3d.Graphic3d_ArrayOfTriangles_swigregister
Graphic3d_ArrayOfTriangles_swigregister(Graphic3d_ArrayOfTriangles)

def Graphic3d_ArrayOfTriangles_get_type_name(*args):
    """
    Graphic3d_ArrayOfTriangles_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_ArrayOfTriangles_get_type_name(*args)

def Graphic3d_ArrayOfTriangles_get_type_descriptor(*args):
    """
    Graphic3d_ArrayOfTriangles_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_ArrayOfTriangles_get_type_descriptor(*args)

class Graphic3d_LightSet(Standard.Standard_Transient):
    """Class defining the set of light sources."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_LightSet
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_LightSet(self) 
            return h

    IterationFilter_None = _Graphic3d.Graphic3d_LightSet_IterationFilter_None
    IterationFilter_ExcludeAmbient = _Graphic3d.Graphic3d_LightSet_IterationFilter_ExcludeAmbient
    IterationFilter_ExcludeDisabled = _Graphic3d.Graphic3d_LightSet_IterationFilter_ExcludeDisabled
    IterationFilter_ExcludeDisabledAndAmbient = _Graphic3d.Graphic3d_LightSet_IterationFilter_ExcludeDisabledAndAmbient

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_LightSet_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_LightSet_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_LightSet_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Graphic3d_LightSet self) -> Graphic3d_LightSet

        Empty constructor.


        """
        this = _Graphic3d.new_Graphic3d_LightSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Lower(self, *args):
        """
        Lower(Graphic3d_LightSet self) -> Standard_Integer

        Return lower light index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_LightSet_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(Graphic3d_LightSet self) -> Standard_Integer

        Return upper light index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_LightSet_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Graphic3d_LightSet self) -> Standard_Boolean

        Return TRUE if lights list is empty.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_LightSet_IsEmpty(self, *args)


    def Extent(self, *args):
        """
        Extent(Graphic3d_LightSet self) -> Standard_Integer

        Return number of light sources.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_LightSet_Extent(self, *args)


    def Value(self, *args):
        """
        Return the light source for specified index within range [Lower(), Upper()].

        :type theIndex: int
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_CLight

        """
        res = _Graphic3d.Graphic3d_LightSet_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Contains(self, *args):
        """
        Contains(Graphic3d_LightSet self, Handle_Graphic3d_CLight theLight) -> Standard_Boolean

        Return TRUE if light source is defined in this set.

        :type theLight: OCC.wrapper.Graphic3d.Handle_Graphic3d_CLight
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_LightSet_Contains(self, *args)


    def Add(self, *args):
        """
        Add(Graphic3d_LightSet self, Handle_Graphic3d_CLight theLight) -> Standard_Boolean

        Append new light source.

        :type theLight: OCC.wrapper.Graphic3d.Handle_Graphic3d_CLight
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_LightSet_Add(self, *args)


    def Remove(self, *args):
        """
        Remove(Graphic3d_LightSet self, Handle_Graphic3d_CLight theLight) -> Standard_Boolean

        Remove light source.

        :type theLight: OCC.wrapper.Graphic3d.Handle_Graphic3d_CLight
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_LightSet_Remove(self, *args)


    def NbLightsOfType(self, *args):
        """
        NbLightsOfType(Graphic3d_LightSet self, Graphic3d_TypeOfLightSource theType) -> Standard_Integer

        Returns total amount of lights of specified type.

        :type theType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfLightSource
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_LightSet_NbLightsOfType(self, *args)


    def UpdateRevision(self, *args):
        """
        UpdateRevision(Graphic3d_LightSet self) -> Standard_Size

        Update light sources revision.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Graphic3d_LightSet_UpdateRevision(self, *args)


    def Revision(self, *args):
        """
        Revision(Graphic3d_LightSet self) -> Standard_Size

        Return light sources revision.
        @sa UpdateRevision()

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Graphic3d_LightSet_Revision(self, *args)


    def NbEnabled(self, *args):
        """
        NbEnabled(Graphic3d_LightSet self) -> Standard_Integer

        Returns total amount of enabled lights EXCLUDING ambient.
        @sa UpdateRevision()

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_LightSet_NbEnabled(self, *args)


    def NbEnabledLightsOfType(self, *args):
        """
        NbEnabledLightsOfType(Graphic3d_LightSet self, Graphic3d_TypeOfLightSource theType) -> Standard_Integer

        Returns total amount of enabled lights of specified type.
        @sa UpdateRevision()

        :type theType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfLightSource
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_LightSet_NbEnabledLightsOfType(self, *args)


    def AmbientColor(self, *args):
        """
        Returns cumulative ambient color, which is computed as sum of all enabled ambient light sources.
        Values are NOT clamped (can be greater than 1.0f) and alpha component is fixed to 1.0f.
        @sa UpdateRevision()

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Vec4

        """
        res = _Graphic3d.Graphic3d_LightSet_AmbientColor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def KeyEnabledLong(self, *args):
        """
        Returns a string defining a list of enabled light sources as concatenation of letters 'd' (Directional), 'p' (Point), 's' (Spot)
        depending on the type of light source in the list.
        Example: "dppp".
        @sa UpdateRevision()

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Graphic3d_LightSet_KeyEnabledLong(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def KeyEnabledShort(self, *args):
        """
        Returns a string defining a list of enabled light sources as concatenation of letters 'd' (Directional), 'p' (Point), 's' (Spot)
        depending on the type of light source in the list, specified only once.
        Example: "dp".
        @sa UpdateRevision()

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Graphic3d_LightSet_KeyEnabledShort(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_LightSet
Graphic3d_LightSet_swigregister = _Graphic3d.Graphic3d_LightSet_swigregister
Graphic3d_LightSet_swigregister(Graphic3d_LightSet)

def Graphic3d_LightSet_get_type_name(*args):
    """
    Graphic3d_LightSet_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_LightSet_get_type_name(*args)

def Graphic3d_LightSet_get_type_descriptor(*args):
    """
    Graphic3d_LightSet_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_LightSet_get_type_descriptor(*args)

class Graphic3d_ArrayOfTriangleStrips(Graphic3d_ArrayOfPrimitives):
    """Contains triangles strip array definition."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_ArrayOfTriangleStrips
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_ArrayOfTriangleStrips(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_ArrayOfTriangleStrips_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_ArrayOfTriangleStrips_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_ArrayOfTriangleStrips_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theMaxVertexs, Standard_Integer const theMaxStrips=0, Standard_Boolean const theHasVNormals, Standard_Boolean const theHasVColors, Standard_Boolean const theHasBColors, Standard_Boolean const theHasVTexels) -> Graphic3d_ArrayOfTriangleStrips

        Creates an array of triangle strips, a polygon can be filled as:
        1) Creating a single strip defined with his vertexes, i.e:
        @code
        myArray = Graphic3d_ArrayOfTriangleStrips (7);
        myArray->AddVertex (x1, y1, z1);
        ....
        myArray->AddVertex (x7, y7, z7);
        @endcode
        2) Creating separate strips defined with a predefined number of strips and the number of vertex per strip, i.e:
        @code
        myArray = Graphic3d_ArrayOfTriangleStrips (8, 2);
        myArray->AddBound (4);
        myArray->AddVertex (x1, y1, z1);
        ....
        myArray->AddVertex (x4, y4, z4);
        myArray->AddBound (4);
        myArray->AddVertex (x5, y5, z5);
        ....
        myArray->AddVertex (x8, y8, z8);
        @endcode
        @param theMaxVertexs defines the maximum allowed vertex number in the array
        @param theMaxStrips  defines the maximum allowed strip  number in the array;
        the number of triangle really drawn is: VertexNumber() - 2 * Min(1, BoundNumber())
        @param theHasVNormals when TRUE, AddVertex(Point,Normal), AddVertex(Point,Normal,Color) or AddVertex(Point,Normal,Texel) should be used to specify vertex normal;
        vertex normals should be specified coherent to triangle orientation (defined by order of vertexes within triangle) for proper rendering
        @param theHasVColors  when TRUE, AddVertex(Point,Color) or AddVertex(Point,Normal,Color) should be used to specify vertex color
        @param theHasBColors  when TRUE, AddBound(number,Color) should be used to specify sub-group color
        @param theHasVTexels  when TRUE, AddVertex(Point,Texel) or AddVertex(Point,Normal,Texel) should be used to specify vertex UV coordinates

        :type theMaxVertexs: int
        :type theMaxStrips: int
        :type theHasVNormals: bool
        :type theHasVColors: bool
        :type theHasBColors: bool
        :type theHasVTexels: bool

        """
        this = _Graphic3d.new_Graphic3d_ArrayOfTriangleStrips(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle



    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ArrayOfTriangleStrips
Graphic3d_ArrayOfTriangleStrips_swigregister = _Graphic3d.Graphic3d_ArrayOfTriangleStrips_swigregister
Graphic3d_ArrayOfTriangleStrips_swigregister(Graphic3d_ArrayOfTriangleStrips)

def Graphic3d_ArrayOfTriangleStrips_get_type_name(*args):
    """
    Graphic3d_ArrayOfTriangleStrips_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_ArrayOfTriangleStrips_get_type_name(*args)

def Graphic3d_ArrayOfTriangleStrips_get_type_descriptor(*args):
    """
    Graphic3d_ArrayOfTriangleStrips_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_ArrayOfTriangleStrips_get_type_descriptor(*args)

class Graphic3d_MaterialDefinitionError(Standard.Standard_OutOfRange):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_MaterialDefinitionError
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_MaterialDefinitionError(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Graphic3d_MaterialDefinitionError self) -> Graphic3d_MaterialDefinitionError
        __init__(Graphic3d_MaterialDefinitionError self, Standard_CString const theMessage) -> Graphic3d_MaterialDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString

        """
        this = _Graphic3d.new_Graphic3d_MaterialDefinitionError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewInstance(*args):
        """
        NewInstance(Standard_CString const theMessage) -> Handle_Graphic3d_MaterialDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_MaterialDefinitionError

        """
        return _Graphic3d.Graphic3d_MaterialDefinitionError_NewInstance(*args)

    NewInstance = staticmethod(NewInstance)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_MaterialDefinitionError_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_MaterialDefinitionError_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_MaterialDefinitionError_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_MaterialDefinitionError
Graphic3d_MaterialDefinitionError_swigregister = _Graphic3d.Graphic3d_MaterialDefinitionError_swigregister
Graphic3d_MaterialDefinitionError_swigregister(Graphic3d_MaterialDefinitionError)

def Graphic3d_MaterialDefinitionError_NewInstance(*args):
    """
    Graphic3d_MaterialDefinitionError_NewInstance(Standard_CString const theMessage) -> Handle_Graphic3d_MaterialDefinitionError

    :type theMessage: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_MaterialDefinitionError

    """
    return _Graphic3d.Graphic3d_MaterialDefinitionError_NewInstance(*args)

def Graphic3d_MaterialDefinitionError_get_type_name(*args):
    """
    Graphic3d_MaterialDefinitionError_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_MaterialDefinitionError_get_type_name(*args)

def Graphic3d_MaterialDefinitionError_get_type_descriptor(*args):
    """
    Graphic3d_MaterialDefinitionError_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_MaterialDefinitionError_get_type_descriptor(*args)

class Graphic3d_ArrayOfSegments(Graphic3d_ArrayOfPrimitives):
    """Contains segments array definition."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_ArrayOfSegments
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_ArrayOfSegments(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_ArrayOfSegments_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_ArrayOfSegments_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_ArrayOfSegments_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Graphic3d_ArrayOfSegments self, Standard_Integer const theMaxVertexs, Standard_Integer const theMaxEdges=0, Standard_Boolean const theHasVColors) -> Graphic3d_ArrayOfSegments

        Creates an array of segments, a segment can be filled as:
        1) Creating a set of segments defined with his vertexes, i.e:
        @code
        myArray = Graphic3d_ArrayOfSegments (4);
        myArray->AddVertex (x1, y1, z1);
        ....
        myArray->AddVertex (x4, y4, z4);
        @endcode
        2) Creating a set of indexed segments defined with his vertex and edges, i.e:
        @code
        myArray = Graphic3d_ArrayOfSegments (4, 0, 8);
        myArray->AddVertex (x1, y1, z1);
        ....
        myArray->AddVertex (x4, y4, z4);
        myArray->AddEdge (1);
        myArray->AddEdge (2);
        myArray->AddEdge (3);
        myArray->AddEdge (4);
        myArray->AddEdge (2);
        myArray->AddEdge (4);
        myArray->AddEdge (1);
        myArray->AddEdge (3);
        @endcode
        @param theMaxVertexs defines the maximum allowed vertex number in the array
        @param theMaxEdges   defines the maximum allowed edge   number in the array
        @param theHasVColors when TRUE, AddVertex(Point,Color) should be used for specifying vertex color

        :type theMaxVertexs: int
        :type theMaxEdges: int
        :type theHasVColors: bool

        """
        this = _Graphic3d.new_Graphic3d_ArrayOfSegments(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle



    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ArrayOfSegments
Graphic3d_ArrayOfSegments_swigregister = _Graphic3d.Graphic3d_ArrayOfSegments_swigregister
Graphic3d_ArrayOfSegments_swigregister(Graphic3d_ArrayOfSegments)

def Graphic3d_ArrayOfSegments_get_type_name(*args):
    """
    Graphic3d_ArrayOfSegments_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_ArrayOfSegments_get_type_name(*args)

def Graphic3d_ArrayOfSegments_get_type_descriptor(*args):
    """
    Graphic3d_ArrayOfSegments_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_ArrayOfSegments_get_type_descriptor(*args)

class Handle_Graphic3d_BoundBuffer(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_BoundBuffer self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_BoundBuffer_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_BoundBuffer self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_BoundBuffer_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_BoundBuffer self, Graphic3d_BoundBuffer thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_BoundBuffer_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_BoundBuffer self, Handle_Graphic3d_BoundBuffer theHandle) -> Handle_Graphic3d_BoundBuffer
        assign(Handle_Graphic3d_BoundBuffer self, Graphic3d_BoundBuffer thePtr) -> Handle_Graphic3d_BoundBuffer
        assign(Handle_Graphic3d_BoundBuffer self, Handle_Graphic3d_BoundBuffer theHandle) -> Handle_Graphic3d_BoundBuffer

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_BoundBuffer_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_BoundBuffer self) -> Graphic3d_BoundBuffer

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_BoundBuffer_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_BoundBuffer self) -> Graphic3d_BoundBuffer

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_BoundBuffer___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_BoundBuffer self) -> Graphic3d_BoundBuffer

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_BoundBuffer___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_BoundBuffer___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_BoundBuffer___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_BoundBuffer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_BoundBuffer_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_BoundBuffer

    def Init(self, *args):
        """
        Init(Handle_Graphic3d_BoundBuffer self, Standard_Integer const theNbBounds, Standard_Boolean const theHasColors) -> bool

        Allocates new empty array

        :type theNbBounds: int
        :type theHasColors: bool
        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_BoundBuffer_Init(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_BoundBuffer self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_BoundBuffer_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_BoundBuffer_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_BoundBuffer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Data(self, *args):
        """
        Data(Handle_Graphic3d_BoundBuffer self) -> Standard_Byte const *

        @return buffer data

        :rtype: OCC.wrapper.Standard.Standard_Byte

        """
        return _Graphic3d.Handle_Graphic3d_BoundBuffer_Data(self, *args)


    def ChangeData(self, *args):
        """
        ChangeData(Handle_Graphic3d_BoundBuffer self) -> Standard_Byte *

        @return buffer data

        :rtype: OCC.wrapper.Standard.Standard_Byte

        """
        return _Graphic3d.Handle_Graphic3d_BoundBuffer_ChangeData(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_Graphic3d_BoundBuffer self) -> bool

        @return true if buffer is not allocated

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_BoundBuffer_IsEmpty(self, *args)


    def Size(self, *args):
        """
        Size(Handle_Graphic3d_BoundBuffer self) -> Standard_Size

        Return buffer length in bytes.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Handle_Graphic3d_BoundBuffer_Size(self, *args)


    def Allocator(self, *args):
        """
        @return buffer allocator

        :rtype: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        res = _Graphic3d.Handle_Graphic3d_BoundBuffer_Allocator(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAllocator(self, *args):
        """
        SetAllocator(Handle_Graphic3d_BoundBuffer self, Handle_NCollection_BaseAllocator theAlloc)

        Assign new buffer allocator with de-allocation of buffer.

        :type theAlloc: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Graphic3d.Handle_Graphic3d_BoundBuffer_SetAllocator(self, *args)


    def Allocate(self, *args):
        """
        Allocate(Handle_Graphic3d_BoundBuffer self, Standard_Size const theSize) -> bool

        Allocate the buffer.
        @param theSize buffer length in bytes

        :type theSize: int
        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_BoundBuffer_Allocate(self, *args)


    def Free(self, *args):
        """
        Free(Handle_Graphic3d_BoundBuffer self)

        De-allocate buffer.


        """
        return _Graphic3d.Handle_Graphic3d_BoundBuffer_Free(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_BoundBuffer self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_BoundBuffer_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_BoundBuffer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_BoundBuffer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_BoundBuffer_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_BoundBuffer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_BoundBuffer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_BoundBuffer_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_BoundBuffer self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_BoundBuffer_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_BoundBuffer self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_BoundBuffer_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_BoundBuffer self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_BoundBuffer_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_BoundBuffer self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_BoundBuffer_DecrementRefCounter(self, *args)

Handle_Graphic3d_BoundBuffer_swigregister = _Graphic3d.Handle_Graphic3d_BoundBuffer_swigregister
Handle_Graphic3d_BoundBuffer_swigregister(Handle_Graphic3d_BoundBuffer)

def Handle_Graphic3d_BoundBuffer_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_BoundBuffer_DownCast(thing)
Handle_Graphic3d_BoundBuffer_DownCast = _Graphic3d.Handle_Graphic3d_BoundBuffer_DownCast

class Handle_Graphic3d_Buffer(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_Buffer self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_Buffer_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_Buffer self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_Buffer_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_Buffer self, Graphic3d_Buffer thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_Buffer_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_Buffer self, Handle_Graphic3d_Buffer theHandle) -> Handle_Graphic3d_Buffer
        assign(Handle_Graphic3d_Buffer self, Graphic3d_Buffer thePtr) -> Handle_Graphic3d_Buffer
        assign(Handle_Graphic3d_Buffer self, Handle_Graphic3d_Buffer theHandle) -> Handle_Graphic3d_Buffer

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_Buffer_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_Buffer self) -> Graphic3d_Buffer

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_Buffer_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_Buffer self) -> Graphic3d_Buffer

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_Buffer___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_Buffer self) -> Graphic3d_Buffer

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_Buffer___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_Buffer___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_Buffer___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_Buffer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_Buffer_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_Buffer

    def AttributesArray(self, *args):
        """
        AttributesArray(Handle_Graphic3d_Buffer self) -> Graphic3d_Attribute const *

        @return array of attributes definitions

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Attribute

        """
        return _Graphic3d.Handle_Graphic3d_Buffer_AttributesArray(self, *args)


    def Attribute(self, *args):
        """
        @return attribute definition

        :type theAttribIndex: int
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Attribute

        """
        res = _Graphic3d.Handle_Graphic3d_Buffer_Attribute(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeAttribute(self, *args):
        """
        ChangeAttribute(Handle_Graphic3d_Buffer self, Standard_Integer const theAttribIndex) -> Graphic3d_Attribute &

        @return attribute definition

        :type theAttribIndex: int
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Attribute

        """
        return _Graphic3d.Handle_Graphic3d_Buffer_ChangeAttribute(self, *args)


    def AttributeOffset(self, *args):
        """
        AttributeOffset(Handle_Graphic3d_Buffer self, Standard_Integer const theAttribIndex) -> Standard_Integer

        @return data offset to specified attribute

        :type theAttribIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Buffer_AttributeOffset(self, *args)


    def Data(self, *args):
        """
        Data(Handle_Graphic3d_Buffer self, Standard_Integer const theAttribIndex) -> Standard_Byte const
        Data(Handle_Graphic3d_Buffer self) -> Standard_Byte const *

        @return buffer data

        :rtype: OCC.wrapper.Standard.Standard_Byte

        """
        return _Graphic3d.Handle_Graphic3d_Buffer_Data(self, *args)


    def ChangeData(self, *args):
        """
        ChangeData(Handle_Graphic3d_Buffer self, Standard_Integer const theAttribIndex) -> Standard_Byte
        ChangeData(Handle_Graphic3d_Buffer self) -> Standard_Byte *

        @return buffer data

        :rtype: OCC.wrapper.Standard.Standard_Byte

        """
        return _Graphic3d.Handle_Graphic3d_Buffer_ChangeData(self, *args)


    def value(self, *args):
        """
        value(Handle_Graphic3d_Buffer self, Standard_Integer const theElem) -> Standard_Byte const *

        Access specified element.

        :type theElem: int
        :rtype: OCC.wrapper.Standard.Standard_Byte

        """
        return _Graphic3d.Handle_Graphic3d_Buffer_value(self, *args)


    def changeValue(self, *args):
        """
        changeValue(Handle_Graphic3d_Buffer self, Standard_Integer const theElem) -> Standard_Byte *

        Access specified element.

        :type theElem: int
        :rtype: OCC.wrapper.Standard.Standard_Byte

        """
        return _Graphic3d.Handle_Graphic3d_Buffer_changeValue(self, *args)


    def release(self, *args):
        """
        release(Handle_Graphic3d_Buffer self)

        Release buffer.


        """
        return _Graphic3d.Handle_Graphic3d_Buffer_release(self, *args)


    def Init(self, *args):
        """
        Init(Handle_Graphic3d_Buffer self, Standard_Integer const theNbElems, Graphic3d_Attribute const * theAttribs, Standard_Integer const theNbAttribs) -> bool
        Init(Handle_Graphic3d_Buffer self, Standard_Integer const theNbElems, NCollection_Array1_Graphic3d_Attribute theAttribs) -> bool

        Allocates new empty array

        :type theNbElems: int
        :type theAttribs: OCC.wrapper.Graphic3d.Graphic3d_Array1OfAttribute
        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_Buffer_Init(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_Buffer self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_Buffer_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_Buffer_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_Buffer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_Graphic3d_Buffer self) -> bool

        @return true if buffer is not allocated

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_Buffer_IsEmpty(self, *args)


    def Size(self, *args):
        """
        Size(Handle_Graphic3d_Buffer self) -> Standard_Size

        Return buffer length in bytes.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Handle_Graphic3d_Buffer_Size(self, *args)


    def Allocator(self, *args):
        """
        @return buffer allocator

        :rtype: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        res = _Graphic3d.Handle_Graphic3d_Buffer_Allocator(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAllocator(self, *args):
        """
        SetAllocator(Handle_Graphic3d_Buffer self, Handle_NCollection_BaseAllocator theAlloc)

        Assign new buffer allocator with de-allocation of buffer.

        :type theAlloc: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Graphic3d.Handle_Graphic3d_Buffer_SetAllocator(self, *args)


    def Allocate(self, *args):
        """
        Allocate(Handle_Graphic3d_Buffer self, Standard_Size const theSize) -> bool

        Allocate the buffer.
        @param theSize buffer length in bytes

        :type theSize: int
        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_Buffer_Allocate(self, *args)


    def Free(self, *args):
        """
        Free(Handle_Graphic3d_Buffer self)

        De-allocate buffer.


        """
        return _Graphic3d.Handle_Graphic3d_Buffer_Free(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_Buffer self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_Buffer_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_Buffer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_Buffer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Buffer_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_Buffer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_Buffer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Buffer_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_Buffer self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_Buffer_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_Buffer self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Buffer_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_Buffer self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_Buffer_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_Buffer self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Buffer_DecrementRefCounter(self, *args)

Handle_Graphic3d_Buffer_swigregister = _Graphic3d.Handle_Graphic3d_Buffer_swigregister
Handle_Graphic3d_Buffer_swigregister(Handle_Graphic3d_Buffer)

def Handle_Graphic3d_Buffer_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_Buffer_DownCast(thing)
Handle_Graphic3d_Buffer_DownCast = _Graphic3d.Handle_Graphic3d_Buffer_DownCast


try:
	Graphic3d_Vec2 = NCollection_Vec2_Standard_ShortReal
except NameError:
	pass # does not exist, probably ignored

class Graphic3d_UniformValue_Graphic3d_Vec3(object):
    """Describes specific value of custom uniform variable."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, theValue):
        """Describes specific value of custom uniform variable."""
        this = _Graphic3d.new_Graphic3d_UniformValue_Graphic3d_Vec3(theValue)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def TypeID(self, *args):
        """
        TypeID(Graphic3d_UniformValue_Graphic3d_Vec3 self) -> Standard_Size

        Returns unique identifier of value type.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Graphic3d_UniformValue_Graphic3d_Vec3_TypeID(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_UniformValue_Graphic3d_Vec3
Graphic3d_UniformValue_Graphic3d_Vec3_swigregister = _Graphic3d.Graphic3d_UniformValue_Graphic3d_Vec3_swigregister
Graphic3d_UniformValue_Graphic3d_Vec3_swigregister(Graphic3d_UniformValue_Graphic3d_Vec3)


try:
	Graphic3d_UniformVec3 = Graphic3d_UniformValue_Graphic3d_Vec3
except NameError:
	pass # does not exist, probably ignored

class Handle_Graphic3d_TextureEnv(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_TextureEnv self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_TextureEnv_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_TextureEnv self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_TextureEnv_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_TextureEnv self, Graphic3d_TextureEnv thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_TextureEnv_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_TextureEnv self, Handle_Graphic3d_TextureEnv theHandle) -> Handle_Graphic3d_TextureEnv
        assign(Handle_Graphic3d_TextureEnv self, Graphic3d_TextureEnv thePtr) -> Handle_Graphic3d_TextureEnv
        assign(Handle_Graphic3d_TextureEnv self, Handle_Graphic3d_TextureEnv theHandle) -> Handle_Graphic3d_TextureEnv

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_TextureEnv_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_TextureEnv self) -> Graphic3d_TextureEnv

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_TextureEnv_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_TextureEnv self) -> Graphic3d_TextureEnv

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_TextureEnv___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_TextureEnv self) -> Graphic3d_TextureEnv

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_TextureEnv___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_TextureEnv___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_TextureEnv___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_TextureEnv(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_TextureEnv_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_TextureEnv

    def Name(self, *args):
        """
        Name(Handle_Graphic3d_TextureEnv self) -> Graphic3d_NameOfTextureEnv

        Returns the name of the predefined textures or NOT_ENV_UNKNOWN
        when the name is given as a filename.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_NameOfTextureEnv

        """
        return _Graphic3d.Handle_Graphic3d_TextureEnv_Name(self, *args)


    def NumberOfTextures(self, *args):
        """
        NumberOfTextures(Handle_Graphic3d_TextureEnv self) -> Standard_Integer

        Returns the number of predefined textures.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_TextureEnv_NumberOfTextures(self, *args)


    def TextureName(self, *args):
        """
        TextureName(Handle_Graphic3d_TextureEnv self, Standard_Integer const theRank) -> TCollection_AsciiString

        Returns the name of the predefined texture of rank <aRank>

        :type theRank: int
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Handle_Graphic3d_TextureEnv_TextureName(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_TextureEnv self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_TextureEnv_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_TextureEnv_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_TextureEnv_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TexturesFolder(self, *args):
        """
        TexturesFolder(Handle_Graphic3d_TextureEnv self) -> TCollection_AsciiString

        The path to textures determined from CSF_MDTVTexturesDirectory or CASROOT environment variables.
        @return the root folder with default textures.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Handle_Graphic3d_TextureEnv_TexturesFolder(self, *args)


    def IsDone(self, *args):
        """
        IsDone(Handle_Graphic3d_TextureEnv self) -> Standard_Boolean

        Checks if a texture class is valid or not.
        @return true if the construction of the class is correct

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_TextureEnv_IsDone(self, *args)


    def Path(self, *args):
        """
        Returns the full path of the defined texture.
        It could be empty path if GetImage() is overridden to load image not from file.

        :rtype: OCC.wrapper.OSD.OSD_Path

        """
        res = _Graphic3d.Handle_Graphic3d_TextureEnv_Path(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Type(self, *args):
        """
        Type(Handle_Graphic3d_TextureEnv self) -> Graphic3d_TypeOfTexture

        @return the texture type.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfTexture

        """
        return _Graphic3d.Handle_Graphic3d_TextureEnv_Type(self, *args)


    def GetId(self, *args):
        """
        This ID will be used to manage resource in graphic driver.

        Default implementation generates unique ID within constructor;
        inheritors may re-initialize it within their constructor,
        but should never modify it afterwards.

        Multiple Graphic3d_TextureRoot instances with same ID
        will be treated as single texture with different parameters
        to optimize memory usage though this will be more natural
        to use same instance of Graphic3d_TextureRoot when possible.

        If this ID is set to empty string by inheritor,
        then independent graphical resource will be created
        for each instance of Graphic3d_AspectFillArea3d where texture will be used.

        @return texture identifier.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Handle_Graphic3d_TextureEnv_GetId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Revision(self, *args):
        """
        Revision(Handle_Graphic3d_TextureEnv self) -> Standard_Size

        Return image revision.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Handle_Graphic3d_TextureEnv_Revision(self, *args)


    def UpdateRevision(self, *args):
        """
        UpdateRevision(Handle_Graphic3d_TextureEnv self)

        Update image revision.
        Can be used for signaling changes in the texture source (e.g. file update, pixmap update)
        without re-creating texture source itself (since unique id should be never modified).


        """
        return _Graphic3d.Handle_Graphic3d_TextureEnv_UpdateRevision(self, *args)


    def GetImage(self, *args):
        """
        GetImage(Handle_Graphic3d_TextureEnv self) -> Handle_Image_PixMap

        This method will be called by graphic driver each time when texture resource should be created.
        Default constructors allow defining the texture source as path to texture image or directly as pixmap.
        If the source is defined as path, then the image will be dynamically loaded when this method is called
        (and no copy will be preserved in this class instance).
        Inheritors may dynamically generate the image.
        Notice, image data should be in Bottom-Up order (see Image_PixMap::IsTopDown())!
        @return the image for texture.

        :rtype: OCC.wrapper.Image.Handle_Image_PixMap

        """
        return _Graphic3d.Handle_Graphic3d_TextureEnv_GetImage(self, *args)


    def GetParams(self, *args):
        """
        @return low-level texture parameters

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureParams

        """
        res = _Graphic3d.Handle_Graphic3d_TextureEnv_GetParams(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_TextureEnv self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_TextureEnv_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_TextureEnv self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_TextureEnv self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_TextureEnv_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_TextureEnv self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_TextureEnv self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_TextureEnv_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_TextureEnv self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_TextureEnv_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_TextureEnv self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_TextureEnv_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_TextureEnv self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_TextureEnv_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_TextureEnv self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_TextureEnv_DecrementRefCounter(self, *args)

Handle_Graphic3d_TextureEnv_swigregister = _Graphic3d.Handle_Graphic3d_TextureEnv_swigregister
Handle_Graphic3d_TextureEnv_swigregister(Handle_Graphic3d_TextureEnv)

def Handle_Graphic3d_TextureEnv_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_TextureEnv_DownCast(thing)
Handle_Graphic3d_TextureEnv_DownCast = _Graphic3d.Handle_Graphic3d_TextureEnv_DownCast

class BVH_Box_Standard_Real_(object):
    """
    Defines axis aligned bounding box (AABB) based on BVH vectors.
    	param T Numeric data type
    	param N Vector dimension
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Defines axis aligned bounding box (AABB) based on BVH vectors.
        	param T Numeric data type
        	param N Vector dimension
        """
        this = _Graphic3d.new_BVH_Box_Standard_Real_(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clear(self, *args):
        """
        Clear(BVH_Box_Standard_Real_ self)

        Clears bounding box.


        """
        return _Graphic3d.BVH_Box_Standard_Real__Clear(self, *args)


    def IsValid(self, *args):
        """
        IsValid(BVH_Box_Standard_Real_ self) -> Standard_Boolean

        Is bounding box valid?

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.BVH_Box_Standard_Real__IsValid(self, *args)


    def Add(self, *args):
        """
        Add(BVH_Box_Standard_Real_ self, BVH_Box< Standard_Real,3 >::BVH_VecNt const & thePoint)

        Appends new point to the bounding box.

        :type thePoint: OCC.wrapper.BVH.BVH_VecNt

        """
        return _Graphic3d.BVH_Box_Standard_Real__Add(self, *args)


    def Combine(self, *args):
        """
        Combine(BVH_Box_Standard_Real_ self, BVH_Box_Standard_Real_ theBox)

        Combines bounding box with another one.

        :type theBox: OCC.wrapper.BVH.BVH_Box

        """
        return _Graphic3d.BVH_Box_Standard_Real__Combine(self, *args)


    def CornerMin(self, *args):
        """
        Returns minimum point of bounding box.

        :rtype: OCC.wrapper.BVH.BVH_VecNt

        """
        res = _Graphic3d.BVH_Box_Standard_Real__CornerMin(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CornerMax(self, *args):
        """
        Returns maximum point of bounding box.

        :rtype: OCC.wrapper.BVH.BVH_VecNt

        """
        res = _Graphic3d.BVH_Box_Standard_Real__CornerMax(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Area(self, *args):
        """
        Area(BVH_Box_Standard_Real_ self) -> double

        Returns surface area of bounding box.
        If the box is degenerated into line, returns the perimeter instead.

        :rtype: T

        """
        return _Graphic3d.BVH_Box_Standard_Real__Area(self, *args)


    def Size(self, *args):
        """
        Size(BVH_Box_Standard_Real_ self) -> BVH_Box< Standard_Real,3 >::BVH_VecNt

        Returns diagonal of bounding box.

        :rtype: OCC.wrapper.BVH.BVH_VecNt

        """
        return _Graphic3d.BVH_Box_Standard_Real__Size(self, *args)


    def Center(self, *args):
        """
        Center(BVH_Box_Standard_Real_ self) -> BVH_Box< Standard_Real,3 >::BVH_VecNt
        Center(BVH_Box_Standard_Real_ self, Standard_Integer const theAxis) -> double

        Returns center of bounding box along the given axis.

        :type theAxis: int
        :rtype: T

        """
        return _Graphic3d.BVH_Box_Standard_Real__Center(self, *args)

    __swig_destroy__ = _Graphic3d.delete_BVH_Box_Standard_Real_
BVH_Box_Standard_Real__swigregister = _Graphic3d.BVH_Box_Standard_Real__swigregister
BVH_Box_Standard_Real__swigregister(BVH_Box_Standard_Real_)


try:
	Graphic3d_BndBox3d = BVH_Box_Standard_Real_
except NameError:
	pass # does not exist, probably ignored

class Handle_Graphic3d_TransformPers(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_TransformPers self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_TransformPers_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_TransformPers self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_TransformPers_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_TransformPers self, Graphic3d_TransformPers thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_TransformPers_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_TransformPers self, Handle_Graphic3d_TransformPers theHandle) -> Handle_Graphic3d_TransformPers
        assign(Handle_Graphic3d_TransformPers self, Graphic3d_TransformPers thePtr) -> Handle_Graphic3d_TransformPers
        assign(Handle_Graphic3d_TransformPers self, Handle_Graphic3d_TransformPers theHandle) -> Handle_Graphic3d_TransformPers

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_TransformPers_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_TransformPers self) -> Graphic3d_TransformPers

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_TransformPers_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_TransformPers self) -> Graphic3d_TransformPers

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_TransformPers___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_TransformPers self) -> Graphic3d_TransformPers

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_TransformPers___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_TransformPers___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_TransformPers___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_TransformPers(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_TransformPers_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_TransformPers

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_TransformPers self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_TransformPers_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_TransformPers_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_TransformPers_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsZoomOrRotate(self, *args):
        """
        IsZoomOrRotate(Handle_Graphic3d_TransformPers self, Graphic3d_TransModeFlags theMode) -> Standard_Boolean
        IsZoomOrRotate(Handle_Graphic3d_TransformPers self) -> Standard_Boolean

        Return true for Graphic3d_TMF_ZoomPers, Graphic3d_TMF_ZoomRotatePers or Graphic3d_TMF_RotatePers modes.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_TransformPers_IsZoomOrRotate(self, *args)


    def IsTrihedronOr2d(self, *args):
        """
        IsTrihedronOr2d(Handle_Graphic3d_TransformPers self, Graphic3d_TransModeFlags theMode) -> Standard_Boolean
        IsTrihedronOr2d(Handle_Graphic3d_TransformPers self) -> Standard_Boolean

        Return true for Graphic3d_TMF_TriedronPers and Graphic3d_TMF_2d modes.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_TransformPers_IsTrihedronOr2d(self, *args)


    def FromDeprecatedParams(self, *args):
        """
        FromDeprecatedParams(Handle_Graphic3d_TransformPers self, Graphic3d_TransModeFlags theFlag, gp_Pnt thePoint) -> Handle_Graphic3d_TransformPers

        Create Graphic3d_TransformPers instance from deprecated parameters set
        decoding 2D corner + offset parameters from 3D point.

        :type theFlag: OCC.wrapper.Graphic3d.Graphic3d_TransModeFlags
        :type thePoint: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TransformPers

        """
        return _Graphic3d.Handle_Graphic3d_TransformPers_FromDeprecatedParams(self, *args)


    def Mode(self, *args):
        """
        Mode(Handle_Graphic3d_TransformPers self) -> Graphic3d_TransModeFlags

        Transformation persistence mode flags.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TransModeFlags

        """
        return _Graphic3d.Handle_Graphic3d_TransformPers_Mode(self, *args)


    def Flags(self, *args):
        """
        Flags(Handle_Graphic3d_TransformPers self) -> Graphic3d_TransModeFlags

        Transformation persistence mode flags.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TransModeFlags

        """
        return _Graphic3d.Handle_Graphic3d_TransformPers_Flags(self, *args)


    def SetPersistence(self, *args):
        """
        SetPersistence(Handle_Graphic3d_TransformPers self, Graphic3d_TransModeFlags const theMode, gp_Pnt thePnt)
        SetPersistence(Handle_Graphic3d_TransformPers self, Graphic3d_TransModeFlags const theMode, Aspect_TypeOfTriedronPosition const theCorner, NCollection_Vec2_Standard_Integer theOffset)

        Set 2d/trihedron transformation persistence with a corner and 2D offset.
        Throws an exception if persistence mode is not Graphic3d_TMF_TriedronPers or Graphic3d_TMF_2d.

        :type theMode: OCC.wrapper.Graphic3d.Graphic3d_TransModeFlags
        :type theCorner: OCC.wrapper.Aspect.Aspect_TypeOfTriedronPosition
        :type theOffset: OCC.wrapper.Graphic3d.Graphic3d_Vec2i

        """
        return _Graphic3d.Handle_Graphic3d_TransformPers_SetPersistence(self, *args)


    def AnchorPoint(self, *args):
        """
        AnchorPoint(Handle_Graphic3d_TransformPers self) -> gp_Pnt

        Return the anchor point for zoom/rotate transformation persistence.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Graphic3d.Handle_Graphic3d_TransformPers_AnchorPoint(self, *args)


    def SetAnchorPoint(self, *args):
        """
        SetAnchorPoint(Handle_Graphic3d_TransformPers self, gp_Pnt thePnt)

        Set the anchor point for zoom/rotate transformation persistence.

        :type thePnt: OCC.wrapper.gp.gp_Pnt

        """
        return _Graphic3d.Handle_Graphic3d_TransformPers_SetAnchorPoint(self, *args)


    def Corner2d(self, *args):
        """
        Corner2d(Handle_Graphic3d_TransformPers self) -> Aspect_TypeOfTriedronPosition

        Return the corner for 2d/trihedron transformation persistence.

        :rtype: OCC.wrapper.Aspect.Aspect_TypeOfTriedronPosition

        """
        return _Graphic3d.Handle_Graphic3d_TransformPers_Corner2d(self, *args)


    def SetCorner2d(self, *args):
        """
        SetCorner2d(Handle_Graphic3d_TransformPers self, Aspect_TypeOfTriedronPosition const thePos)

        Set the corner for 2d/trihedron transformation persistence.

        :type thePos: OCC.wrapper.Aspect.Aspect_TypeOfTriedronPosition

        """
        return _Graphic3d.Handle_Graphic3d_TransformPers_SetCorner2d(self, *args)


    def Offset2d(self, *args):
        """
        Offset2d(Handle_Graphic3d_TransformPers self) -> NCollection_Vec2_Standard_Integer

        Return the offset from the corner for 2d/trihedron transformation persistence.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Vec2i

        """
        return _Graphic3d.Handle_Graphic3d_TransformPers_Offset2d(self, *args)


    def SetOffset2d(self, *args):
        """
        SetOffset2d(Handle_Graphic3d_TransformPers self, NCollection_Vec2_Standard_Integer theOffset)

        Set the offset from the corner for 2d/trihedron transformation persistence.

        :type theOffset: OCC.wrapper.Graphic3d.Graphic3d_Vec2i

        """
        return _Graphic3d.Handle_Graphic3d_TransformPers_SetOffset2d(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_TransformPers self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_TransformPers_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_TransformPers self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_TransformPers self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_TransformPers_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_TransformPers self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_TransformPers self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_TransformPers_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_TransformPers self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_TransformPers_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_TransformPers self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_TransformPers_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_TransformPers self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_TransformPers_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_TransformPers self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_TransformPers_DecrementRefCounter(self, *args)

Handle_Graphic3d_TransformPers_swigregister = _Graphic3d.Handle_Graphic3d_TransformPers_swigregister
Handle_Graphic3d_TransformPers_swigregister(Handle_Graphic3d_TransformPers)

def Handle_Graphic3d_TransformPers_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_TransformPers_DownCast(thing)
Handle_Graphic3d_TransformPers_DownCast = _Graphic3d.Handle_Graphic3d_TransformPers_DownCast

class Graphic3d_UniformValue_Graphic3d_Vec4i(object):
    """Describes specific value of custom uniform variable."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, theValue):
        """Describes specific value of custom uniform variable."""
        this = _Graphic3d.new_Graphic3d_UniformValue_Graphic3d_Vec4i(theValue)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def TypeID(self, *args):
        """
        TypeID(Graphic3d_UniformValue_Graphic3d_Vec4i self) -> Standard_Size

        Returns unique identifier of value type.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Graphic3d_UniformValue_Graphic3d_Vec4i_TypeID(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_UniformValue_Graphic3d_Vec4i
Graphic3d_UniformValue_Graphic3d_Vec4i_swigregister = _Graphic3d.Graphic3d_UniformValue_Graphic3d_Vec4i_swigregister
Graphic3d_UniformValue_Graphic3d_Vec4i_swigregister(Graphic3d_UniformValue_Graphic3d_Vec4i)


try:
	Graphic3d_UniformVec4i = Graphic3d_UniformValue_Graphic3d_Vec4i
except NameError:
	pass # does not exist, probably ignored

class Graphic3d_AspectText3d(Standard.Standard_Transient):
    """
    Creates and updates a group of attributes for
    text primitives. This group contains the color,
    font, expansion factor (height/width ratio), and
    inter-character space.

    NOTE: The font name is stored in the aspect instance
    so it is safe to pass it as const char* to OpenGl package
    without copying the string. However, the aspect should not
    be deleted until the text drawn using this aspect is no longer
    visible. The best practice is to keep the aspect in the object's drawer.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_AspectText3d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_AspectText3d(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_AspectText3d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_AspectText3d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_AspectText3d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Graphic3d_AspectText3d self) -> Graphic3d_AspectText3d
        __init__(Graphic3d_AspectText3d self, Quantity_Color theColor, Standard_CString const theFont, Standard_Real const theExpansionFactor, Standard_Real const theSpace, Aspect_TypeOfStyleText const theStyle=Aspect_TOST_NORMAL, Aspect_TypeOfDisplayText const theDisplayType=Aspect_TODT_NORMAL) -> Graphic3d_AspectText3d

        Creates a context table for text primitives
        defined with the specified values.
        AFont may be to take means from User(example "Courier New")
        or Font name defined in Font_NameOfFont(example Font_NOF_ASCII_MONO)
        or use default font("Courier")

        :type theColor: OCC.wrapper.Quantity.Quantity_Color
        :type theFont: OCC.wrapper.Standard.Standard_CString
        :type theExpansionFactor: float
        :type theSpace: float
        :type theStyle: OCC.wrapper.Aspect.Aspect_TypeOfStyleText
        :type theDisplayType: OCC.wrapper.Aspect.Aspect_TypeOfDisplayText

        """
        this = _Graphic3d.new_Graphic3d_AspectText3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Color(self, *args):
        """
        Return the text color.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Graphic3d_AspectText3d_Color(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ColorRGBA(self, *args):
        """
        Return the text color.

        :rtype: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        res = _Graphic3d.Graphic3d_AspectText3d_ColorRGBA(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetColor(self, *args):
        """
        SetColor(Graphic3d_AspectText3d self, Quantity_Color theColor)
        SetColor(Graphic3d_AspectText3d self, Quantity_ColorRGBA theColor)

        Modifies the color.

        :type theColor: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        return _Graphic3d.Graphic3d_AspectText3d_SetColor(self, *args)


    def SetExpansionFactor(self, *args):
        """
        SetExpansionFactor(Graphic3d_AspectText3d self, Standard_Real const theFactor)

        Modifies the expansion factor (height/width ratio)
        If the factor is less than 1, the characters will
        be higher than they are wide.

        :type theFactor: float

        """
        return _Graphic3d.Graphic3d_AspectText3d_SetExpansionFactor(self, *args)


    def Font(self, *args):
        """
        Return the font.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Graphic3d_AspectText3d_Font(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetFont(self, *args):
        """
        SetFont(Graphic3d_AspectText3d self, TCollection_AsciiString theFont)
        SetFont(Graphic3d_AspectText3d self, Standard_CString const theFont)

        Modifies the font.

        :type theFont: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Graphic3d_AspectText3d_SetFont(self, *args)


    def Space(self, *args):
        """
        Space(Graphic3d_AspectText3d self) -> Standard_Real

        Return the space between characters.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Graphic3d.Graphic3d_AspectText3d_Space(self, *args)


    def SetSpace(self, *args):
        """
        SetSpace(Graphic3d_AspectText3d self, Standard_Real const theSpace)

        Modifies the space between the characters.

        :type theSpace: float

        """
        return _Graphic3d.Graphic3d_AspectText3d_SetSpace(self, *args)


    def Style(self, *args):
        """
        Style(Graphic3d_AspectText3d self) -> Aspect_TypeOfStyleText

        Return the text style.

        :rtype: OCC.wrapper.Aspect.Aspect_TypeOfStyleText

        """
        return _Graphic3d.Graphic3d_AspectText3d_Style(self, *args)


    def SetStyle(self, *args):
        """
        SetStyle(Graphic3d_AspectText3d self, Aspect_TypeOfStyleText const theStyle)

        Modifies the style of the text.
        * TOST_NORMAL
        Default text. The text is displayed like any other graphic object.
        This text can be hidden by another object that is nearest from the point of view.
        * TOST_ANNOTATION
        The text is always visible.
        The text is displayed over the other object according to the priority.

        :type theStyle: OCC.wrapper.Aspect.Aspect_TypeOfStyleText

        """
        return _Graphic3d.Graphic3d_AspectText3d_SetStyle(self, *args)


    def DisplayType(self, *args):
        """
        DisplayType(Graphic3d_AspectText3d self) -> Aspect_TypeOfDisplayText

        Return display type.

        :rtype: OCC.wrapper.Aspect.Aspect_TypeOfDisplayText

        """
        return _Graphic3d.Graphic3d_AspectText3d_DisplayType(self, *args)


    def SetDisplayType(self, *args):
        """
        SetDisplayType(Graphic3d_AspectText3d self, Aspect_TypeOfDisplayText const theDisplayType)

        Define the display type of the text.

        TODT_NORMAL     Default display. Text only.
        TODT_SUBTITLE   There is a subtitle under the text.
        TODT_DEKALE     The text is displayed with a 3D style.
        TODT_BLEND      The text is displayed in XOR.
        TODT_DIMENSION  Dimension line under text will be invisible.

        :type theDisplayType: OCC.wrapper.Aspect.Aspect_TypeOfDisplayText

        """
        return _Graphic3d.Graphic3d_AspectText3d_SetDisplayType(self, *args)


    def ColorSubTitleRGBA(self, *args):
        """
        Return subtitle color.

        :rtype: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        res = _Graphic3d.Graphic3d_AspectText3d_ColorSubTitleRGBA(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ColorSubTitle(self, *args):
        """
        Return subtitle color.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Graphic3d_AspectText3d_ColorSubTitle(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetColorSubTitle(self, *args):
        """
        SetColorSubTitle(Graphic3d_AspectText3d self, Quantity_Color theColor)
        SetColorSubTitle(Graphic3d_AspectText3d self, Quantity_ColorRGBA theColor)

        Modifies the color of the subtitle for the TODT_SUBTITLE TextDisplayType
        and the color of background for the TODT_DEKALE TextDisplayType.

        :type theColor: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        return _Graphic3d.Graphic3d_AspectText3d_SetColorSubTitle(self, *args)


    def GetTextZoomable(self, *args):
        """
        GetTextZoomable(Graphic3d_AspectText3d self) -> bool

        Returns TRUE when the Text Zoomable is on.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_AspectText3d_GetTextZoomable(self, *args)


    def SetTextZoomable(self, *args):
        """
        SetTextZoomable(Graphic3d_AspectText3d self, bool const theFlag)

        Turns usage of text zoomable on/off

        :type theFlag: const bool

        """
        return _Graphic3d.Graphic3d_AspectText3d_SetTextZoomable(self, *args)


    def GetTextAngle(self, *args):
        """
        GetTextAngle(Graphic3d_AspectText3d self) -> Standard_Real

        Returns Angle of degree

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Graphic3d.Graphic3d_AspectText3d_GetTextAngle(self, *args)


    def SetTextAngle(self, *args):
        """
        SetTextAngle(Graphic3d_AspectText3d self, Standard_Real const theAngle)

        Turns usage of text rotated

        :type theAngle: float

        """
        return _Graphic3d.Graphic3d_AspectText3d_SetTextAngle(self, *args)


    def GetTextFontAspect(self, *args):
        """
        GetTextFontAspect(Graphic3d_AspectText3d self) -> Font_FontAspect

        Returns text FontAspect

        :rtype: OCC.wrapper.Font.Font_FontAspect

        """
        return _Graphic3d.Graphic3d_AspectText3d_GetTextFontAspect(self, *args)


    def SetTextFontAspect(self, *args):
        """
        SetTextFontAspect(Graphic3d_AspectText3d self, Font_FontAspect const theFontAspect)

        Turns usage of Aspect text

        :type theFontAspect: OCC.wrapper.Font.Font_FontAspect

        """
        return _Graphic3d.Graphic3d_AspectText3d_SetTextFontAspect(self, *args)


    def ShaderProgram(self, *args):
        """
        Return the shader program.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderProgram

        """
        res = _Graphic3d.Graphic3d_AspectText3d_ShaderProgram(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetShaderProgram(self, *args):
        """
        SetShaderProgram(Graphic3d_AspectText3d self, Handle_Graphic3d_ShaderProgram theProgram)

        Sets up OpenGL/GLSL shader program.

        :type theProgram: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderProgram

        """
        return _Graphic3d.Graphic3d_AspectText3d_SetShaderProgram(self, *args)


    def Values(self, *args):
        """
        Values(Graphic3d_AspectText3d self, Quantity_Color theColor, Standard_CString & theFont)
        Values(Graphic3d_AspectText3d self, Quantity_Color theColor, Standard_CString & theFont, Quantity_Color theColorSubTitle)
        Values(Graphic3d_AspectText3d self, Quantity_Color theColor, Standard_CString & theFont, Quantity_Color theColorSubTitle)
        Values(Graphic3d_AspectText3d self, Quantity_Color theColor, Standard_CString & theFont, Quantity_Color theColorSubTitle)

        Returns the current values of the group.

        :type theColor: OCC.wrapper.Quantity.Quantity_Color
        :type theFont: OCC.wrapper.Standard.Standard_CString
        :type theExpansionFactor: float
        :type theSpace: float
        :type theStyle: OCC.wrapper.Aspect.Aspect_TypeOfStyleText
        :type theDisplayType: OCC.wrapper.Aspect.Aspect_TypeOfDisplayText
        :type theColorSubTitle: OCC.wrapper.Quantity.Quantity_Color
        :type theTextZoomable: bool
        :type theTextAngle: float
        :type theTextFontAspect: OCC.wrapper.Font.Font_FontAspect

        """
        return _Graphic3d.Graphic3d_AspectText3d_Values(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_AspectText3d
Graphic3d_AspectText3d_swigregister = _Graphic3d.Graphic3d_AspectText3d_swigregister
Graphic3d_AspectText3d_swigregister(Graphic3d_AspectText3d)

def Graphic3d_AspectText3d_get_type_name(*args):
    """
    Graphic3d_AspectText3d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_AspectText3d_get_type_name(*args)

def Graphic3d_AspectText3d_get_type_descriptor(*args):
    """
    Graphic3d_AspectText3d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_AspectText3d_get_type_descriptor(*args)

class Graphic3d_ShaderObject(Standard.Standard_Transient):
    """This class is responsible for managing shader objects."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_ShaderObject
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_ShaderObject(self) 
            return h


    def IsDone(self, *args):
        """
        IsDone(Graphic3d_ShaderObject self) -> Standard_Boolean

        Checks if the shader object is valid or not.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_ShaderObject_IsDone(self, *args)


    def Path(self, *args):
        """
        Returns the full path to the shader source.

        :rtype: OCC.wrapper.OSD.OSD_Path

        """
        res = _Graphic3d.Graphic3d_ShaderObject_Path(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Source(self, *args):
        """
        Returns the source code of the shader object.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Graphic3d_ShaderObject_Source(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Type(self, *args):
        """
        Type(Graphic3d_ShaderObject self) -> Graphic3d_TypeOfShaderObject

        Returns type of the shader object.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfShaderObject

        """
        return _Graphic3d.Graphic3d_ShaderObject_Type(self, *args)


    def GetId(self, *args):
        """
        Returns unique ID used to manage resource in graphic driver.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Graphic3d_ShaderObject_GetId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CreateFromFile(*args):
        """
        CreateFromFile(Graphic3d_TypeOfShaderObject const theType, TCollection_AsciiString thePath) -> Handle_Graphic3d_ShaderObject

        Creates new shader object from specified file.

        :type theType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfShaderObject
        :type thePath: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderObject

        """
        return _Graphic3d.Graphic3d_ShaderObject_CreateFromFile(*args)

    CreateFromFile = staticmethod(CreateFromFile)

    def CreateFromSource(*args):
        """
        CreateFromSource(Graphic3d_TypeOfShaderObject const theType, TCollection_AsciiString theSource) -> Handle_Graphic3d_ShaderObject

        Creates new shader object from specified source.

        :type theType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfShaderObject
        :type theSource: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderObject

        """
        return _Graphic3d.Graphic3d_ShaderObject_CreateFromSource(*args)

    CreateFromSource = staticmethod(CreateFromSource)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_ShaderObject_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_ShaderObject_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_ShaderObject_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ShaderObject
Graphic3d_ShaderObject_swigregister = _Graphic3d.Graphic3d_ShaderObject_swigregister
Graphic3d_ShaderObject_swigregister(Graphic3d_ShaderObject)

def Graphic3d_ShaderObject_CreateFromFile(*args):
    """
    Graphic3d_ShaderObject_CreateFromFile(Graphic3d_TypeOfShaderObject const theType, TCollection_AsciiString thePath) -> Handle_Graphic3d_ShaderObject

    Creates new shader object from specified file.

    :type theType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfShaderObject
    :type thePath: OCC.wrapper.TCollection.TCollection_AsciiString
    :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderObject

    """
    return _Graphic3d.Graphic3d_ShaderObject_CreateFromFile(*args)

def Graphic3d_ShaderObject_CreateFromSource(*args):
    """
    Graphic3d_ShaderObject_CreateFromSource(Graphic3d_TypeOfShaderObject const theType, TCollection_AsciiString theSource) -> Handle_Graphic3d_ShaderObject

    Creates new shader object from specified source.

    :type theType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfShaderObject
    :type theSource: OCC.wrapper.TCollection.TCollection_AsciiString
    :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderObject

    """
    return _Graphic3d.Graphic3d_ShaderObject_CreateFromSource(*args)

def Graphic3d_ShaderObject_get_type_name(*args):
    """
    Graphic3d_ShaderObject_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_ShaderObject_get_type_name(*args)

def Graphic3d_ShaderObject_get_type_descriptor(*args):
    """
    Graphic3d_ShaderObject_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_ShaderObject_get_type_descriptor(*args)

class Handle_Graphic3d_ArrayOfPrimitives(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_ArrayOfPrimitives self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_ArrayOfPrimitives self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_ArrayOfPrimitives self, Graphic3d_ArrayOfPrimitives thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_ArrayOfPrimitives self, Handle_Graphic3d_ArrayOfPrimitives theHandle) -> Handle_Graphic3d_ArrayOfPrimitives
        assign(Handle_Graphic3d_ArrayOfPrimitives self, Graphic3d_ArrayOfPrimitives thePtr) -> Handle_Graphic3d_ArrayOfPrimitives
        assign(Handle_Graphic3d_ArrayOfPrimitives self, Handle_Graphic3d_ArrayOfPrimitives theHandle) -> Handle_Graphic3d_ArrayOfPrimitives

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_ArrayOfPrimitives self) -> Graphic3d_ArrayOfPrimitives

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_ArrayOfPrimitives self) -> Graphic3d_ArrayOfPrimitives

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_ArrayOfPrimitives self) -> Graphic3d_ArrayOfPrimitives

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_ArrayOfPrimitives(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_ArrayOfPrimitives

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_ArrayOfPrimitives self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Attributes(self, *args):
        """
        Returns vertex attributes buffer (colors, normals, texture coordinates).

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Buffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_Attributes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Type(self, *args):
        """
        Type(Handle_Graphic3d_ArrayOfPrimitives self) -> Graphic3d_TypeOfPrimitiveArray

        Returns the type of this primitive

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfPrimitiveArray

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_Type(self, *args)


    def StringType(self, *args):
        """
        StringType(Handle_Graphic3d_ArrayOfPrimitives self) -> Standard_CString

        Returns the string type of this primitive

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_StringType(self, *args)


    def HasVertexNormals(self, *args):
        """
        HasVertexNormals(Handle_Graphic3d_ArrayOfPrimitives self) -> Standard_Boolean

        Returns TRUE when vertex normals array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_HasVertexNormals(self, *args)


    def HasVertexColors(self, *args):
        """
        HasVertexColors(Handle_Graphic3d_ArrayOfPrimitives self) -> Standard_Boolean

        Returns TRUE when vertex colors array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_HasVertexColors(self, *args)


    def HasVertexTexels(self, *args):
        """
        HasVertexTexels(Handle_Graphic3d_ArrayOfPrimitives self) -> Standard_Boolean

        Returns TRUE when vertex texels array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_HasVertexTexels(self, *args)


    def VertexNumber(self, *args):
        """
        VertexNumber(Handle_Graphic3d_ArrayOfPrimitives self) -> Standard_Integer

        Returns the number of defined vertex

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_VertexNumber(self, *args)


    def ItemNumber(self, *args):
        """
        ItemNumber(Handle_Graphic3d_ArrayOfPrimitives self) -> Standard_Integer

        Returns the number of total items according to the array type.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_ItemNumber(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_Graphic3d_ArrayOfPrimitives self) -> Standard_Boolean

        Returns TRUE only when the contains of this array is available.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_IsValid(self, *args)


    def AddVertex(self, *args):
        """
        AddVertex(Handle_Graphic3d_ArrayOfPrimitives self, gp_Pnt theVertex) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPrimitives self, NCollection_Vec3_Standard_ShortReal theVertex) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPrimitives self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPrimitives self, gp_Pnt theVertex, Quantity_Color theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPrimitives self, gp_Pnt theVertex, Standard_Integer const theColor32) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPrimitives self, gp_Pnt theVertex, Graphic3d_Vec4ub const & theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPrimitives self, gp_Pnt theVertex, gp_Dir theNormal) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPrimitives self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theNX, Standard_ShortReal const theNY, Standard_ShortReal const theNZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPrimitives self, gp_Pnt theVertex, gp_Dir theNormal, Quantity_Color theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPrimitives self, gp_Pnt theVertex, gp_Dir theNormal, Standard_Integer const theColor32) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPrimitives self, gp_Pnt theVertex, gp_Pnt2d theTexel) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theTX, Standard_Real const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPrimitives self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theTX, Standard_ShortReal const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPrimitives self, gp_Pnt theVertex, gp_Dir theNormal, gp_Pnt2d theTexel) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ, Standard_Real const theTX, Standard_Real const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPrimitives self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theNX, Standard_ShortReal const theNY, Standard_ShortReal const theNZ, Standard_ShortReal const theTX, Standard_ShortReal const theTY) -> Standard_Integer

        Adds a vertice,vertex normal and texture in the vertex array.
        Warning: Normal is ignored when the hasVNormals constructor parameter is FALSE
        and  Texel  is ignored when the hasVTexels  constructor parameter is FALSE.
        @return the actual vertex number

        :type theX: float
        :type theY: float
        :type theZ: float
        :type theNX: float
        :type theNY: float
        :type theNZ: float
        :type theTX: float
        :type theTY: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_AddVertex(self, *args)


    def SetVertice(self, *args):
        """
        SetVertice(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, gp_Pnt theVertex)
        SetVertice(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ)

        Change the vertice of rank theIndex in the array.

        :type theIndex: int
        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_SetVertice(self, *args)


    def SetVertexColor(self, *args):
        """
        SetVertexColor(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, Quantity_Color theColor)
        SetVertexColor(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB)
        SetVertexColor(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, Graphic3d_Vec4ub const & theColor)
        SetVertexColor(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, Standard_Integer const theColor32)

        Change the vertex color of rank theIndex> in the array.
        @code
        theColor32 = Alpha << 24 + Blue << 16 + Green << 8 + Red
        @endcode

        :type theIndex: int
        :type theColor32: int

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_SetVertexColor(self, *args)


    def SetVertexNormal(self, *args):
        """
        SetVertexNormal(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, gp_Dir theNormal)
        SetVertexNormal(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ)

        Change the vertex normal of rank theIndex in the array.

        :type theIndex: int
        :type theNX: float
        :type theNY: float
        :type theNZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_SetVertexNormal(self, *args)


    def SetVertexTexel(self, *args):
        """
        SetVertexTexel(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, gp_Pnt2d theTexel)
        SetVertexTexel(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, Standard_Real const theTX, Standard_Real const theTY)

        Change the vertex texel of rank theIndex in the array.

        :type theIndex: int
        :type theTX: float
        :type theTY: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_SetVertexTexel(self, *args)


    def Vertice(self, *args):
        """
        Vertice(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank) -> gp_Pnt
        Vertice(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank)

        Returns the vertice coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_Vertice(self, *args)


    def VertexColor(self, *args):
        """
        VertexColor(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank) -> Quantity_Color
        VertexColor(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, Graphic3d_Vec4ub & theColor)
        VertexColor(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank)
        VertexColor(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank)

        Returns the vertex color values at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theColor: int

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_VertexColor(self, *args)


    def VertexNormal(self, *args):
        """
        VertexNormal(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank) -> gp_Dir
        VertexNormal(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank)

        Returns the vertex normal coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theNX: float
        :type theNY: float
        :type theNZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_VertexNormal(self, *args)


    def VertexTexel(self, *args):
        """
        VertexTexel(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank) -> gp_Pnt2d
        VertexTexel(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank)

        Returns the vertex texture coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theTX: float
        :type theTY: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_VertexTexel(self, *args)


    def Indices(self, *args):
        """
        Returns optional index buffer.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_IndexBuffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_Indices(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def EdgeNumber(self, *args):
        """
        EdgeNumber(Handle_Graphic3d_ArrayOfPrimitives self) -> Standard_Integer

        Returns the number of defined edges

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_EdgeNumber(self, *args)


    def Edge(self, *args):
        """
        Edge(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank) -> Standard_Integer

        Returns the vertex index at rank theRank in the range [1,EdgeNumber()]

        :type theRank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_Edge(self, *args)


    def AddEdge(self, *args):
        """
        AddEdge(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theVertexIndex) -> Standard_Integer

        Adds an edge in the range [1,VertexNumber()] in the array.
        @return the actual edges number

        :type theVertexIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_AddEdge(self, *args)


    def Bounds(self, *args):
        """
        Returns optional bounds buffer.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_BoundBuffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_Bounds(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasBoundColors(self, *args):
        """
        HasBoundColors(Handle_Graphic3d_ArrayOfPrimitives self) -> Standard_Boolean

        Returns TRUE when bound colors array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_HasBoundColors(self, *args)


    def BoundNumber(self, *args):
        """
        BoundNumber(Handle_Graphic3d_ArrayOfPrimitives self) -> Standard_Integer

        Returns the number of defined bounds

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_BoundNumber(self, *args)


    def Bound(self, *args):
        """
        Bound(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank) -> Standard_Integer

        Returns the edge number at rank theRank.

        :type theRank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_Bound(self, *args)


    def BoundColor(self, *args):
        """
        BoundColor(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank) -> Quantity_Color
        BoundColor(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theRank)

        Returns the bound color values at rank theRank from the bound table if defined.

        :type theRank: int
        :type theR: float
        :type theG: float
        :type theB: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_BoundColor(self, *args)


    def AddBound(self, *args):
        """
        AddBound(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theEdgeNumber) -> Standard_Integer
        AddBound(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theEdgeNumber, Quantity_Color theBColor) -> Standard_Integer
        AddBound(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theEdgeNumber, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB) -> Standard_Integer

        Adds a bound of length theEdgeNumber and bound color coordinates in the bound array.
        Warning: <theR,theG,theB> are ignored when the hasBColors constructor parameter is FALSE
        @return the actual bounds number

        :type theEdgeNumber: int
        :type theR: float
        :type theG: float
        :type theB: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_AddBound(self, *args)


    def SetBoundColor(self, *args):
        """
        SetBoundColor(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, Quantity_Color theColor)
        SetBoundColor(Handle_Graphic3d_ArrayOfPrimitives self, Standard_Integer const theIndex, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB)

        Change the bound color of rank theIndex in the array.

        :type theIndex: int
        :type theR: float
        :type theG: float
        :type theB: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_SetBoundColor(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_ArrayOfPrimitives self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_ArrayOfPrimitives self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_ArrayOfPrimitives self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_ArrayOfPrimitives self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_ArrayOfPrimitives self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_ArrayOfPrimitives self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_ArrayOfPrimitives self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_ArrayOfPrimitives self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_ArrayOfPrimitives self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_DecrementRefCounter(self, *args)

Handle_Graphic3d_ArrayOfPrimitives_swigregister = _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_swigregister
Handle_Graphic3d_ArrayOfPrimitives_swigregister(Handle_Graphic3d_ArrayOfPrimitives)

def Handle_Graphic3d_ArrayOfPrimitives_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_DownCast(thing)
Handle_Graphic3d_ArrayOfPrimitives_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfPrimitives_DownCast

class Graphic3d_AspectTextDefinitionError(Standard.Standard_OutOfRange):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_AspectTextDefinitionError
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_AspectTextDefinitionError(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Graphic3d_AspectTextDefinitionError self) -> Graphic3d_AspectTextDefinitionError
        __init__(Graphic3d_AspectTextDefinitionError self, Standard_CString const theMessage) -> Graphic3d_AspectTextDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString

        """
        this = _Graphic3d.new_Graphic3d_AspectTextDefinitionError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewInstance(*args):
        """
        NewInstance(Standard_CString const theMessage) -> Handle_Graphic3d_AspectTextDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectTextDefinitionError

        """
        return _Graphic3d.Graphic3d_AspectTextDefinitionError_NewInstance(*args)

    NewInstance = staticmethod(NewInstance)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_AspectTextDefinitionError_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_AspectTextDefinitionError_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_AspectTextDefinitionError_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_AspectTextDefinitionError
Graphic3d_AspectTextDefinitionError_swigregister = _Graphic3d.Graphic3d_AspectTextDefinitionError_swigregister
Graphic3d_AspectTextDefinitionError_swigregister(Graphic3d_AspectTextDefinitionError)

def Graphic3d_AspectTextDefinitionError_NewInstance(*args):
    """
    Graphic3d_AspectTextDefinitionError_NewInstance(Standard_CString const theMessage) -> Handle_Graphic3d_AspectTextDefinitionError

    :type theMessage: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectTextDefinitionError

    """
    return _Graphic3d.Graphic3d_AspectTextDefinitionError_NewInstance(*args)

def Graphic3d_AspectTextDefinitionError_get_type_name(*args):
    """
    Graphic3d_AspectTextDefinitionError_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_AspectTextDefinitionError_get_type_name(*args)

def Graphic3d_AspectTextDefinitionError_get_type_descriptor(*args):
    """
    Graphic3d_AspectTextDefinitionError_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_AspectTextDefinitionError_get_type_descriptor(*args)

class Graphic3d_StructureDefinitionError(Standard.Standard_OutOfRange):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_StructureDefinitionError
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_StructureDefinitionError(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Graphic3d_StructureDefinitionError self) -> Graphic3d_StructureDefinitionError
        __init__(Graphic3d_StructureDefinitionError self, Standard_CString const theMessage) -> Graphic3d_StructureDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString

        """
        this = _Graphic3d.new_Graphic3d_StructureDefinitionError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewInstance(*args):
        """
        NewInstance(Standard_CString const theMessage) -> Handle_Graphic3d_StructureDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_StructureDefinitionError

        """
        return _Graphic3d.Graphic3d_StructureDefinitionError_NewInstance(*args)

    NewInstance = staticmethod(NewInstance)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_StructureDefinitionError_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_StructureDefinitionError_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_StructureDefinitionError_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_StructureDefinitionError
Graphic3d_StructureDefinitionError_swigregister = _Graphic3d.Graphic3d_StructureDefinitionError_swigregister
Graphic3d_StructureDefinitionError_swigregister(Graphic3d_StructureDefinitionError)

def Graphic3d_StructureDefinitionError_NewInstance(*args):
    """
    Graphic3d_StructureDefinitionError_NewInstance(Standard_CString const theMessage) -> Handle_Graphic3d_StructureDefinitionError

    :type theMessage: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_StructureDefinitionError

    """
    return _Graphic3d.Graphic3d_StructureDefinitionError_NewInstance(*args)

def Graphic3d_StructureDefinitionError_get_type_name(*args):
    """
    Graphic3d_StructureDefinitionError_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_StructureDefinitionError_get_type_name(*args)

def Graphic3d_StructureDefinitionError_get_type_descriptor(*args):
    """
    Graphic3d_StructureDefinitionError_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_StructureDefinitionError_get_type_descriptor(*args)

class Graphic3d_UniformValue_Standard_Integer(object):
    """Describes specific value of custom uniform variable."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, theValue):
        """Describes specific value of custom uniform variable."""
        this = _Graphic3d.new_Graphic3d_UniformValue_Standard_Integer(theValue)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def TypeID(self, *args):
        """
        TypeID(Graphic3d_UniformValue_Standard_Integer self) -> Standard_Size

        Returns unique identifier of value type.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Graphic3d_UniformValue_Standard_Integer_TypeID(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_UniformValue_Standard_Integer
Graphic3d_UniformValue_Standard_Integer_swigregister = _Graphic3d.Graphic3d_UniformValue_Standard_Integer_swigregister
Graphic3d_UniformValue_Standard_Integer_swigregister(Graphic3d_UniformValue_Standard_Integer)


try:
	Graphic3d_UniformInt = Graphic3d_UniformValue_Standard_Integer
except NameError:
	pass # does not exist, probably ignored

class Handle_Graphic3d_StructureManager(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_StructureManager self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_StructureManager self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_StructureManager self, Graphic3d_StructureManager thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_StructureManager self, Handle_Graphic3d_StructureManager theHandle) -> Handle_Graphic3d_StructureManager
        assign(Handle_Graphic3d_StructureManager self, Graphic3d_StructureManager thePtr) -> Handle_Graphic3d_StructureManager
        assign(Handle_Graphic3d_StructureManager self, Handle_Graphic3d_StructureManager theHandle) -> Handle_Graphic3d_StructureManager

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_StructureManager self) -> Graphic3d_StructureManager

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_StructureManager self) -> Graphic3d_StructureManager

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_StructureManager self) -> Graphic3d_StructureManager

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_StructureManager___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_StructureManager___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_StructureManager(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_StructureManager_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_StructureManager

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_StructureManager self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_StructureManager_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_StructureManager_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Update(self, *args):
        """
        Update(Handle_Graphic3d_StructureManager self, Graphic3d_ZLayerId const theLayerId=Graphic3d_ZLayerId_UNKNOWN)

        Invalidates bounding box of specified ZLayerId.

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_Update(self, *args)


    def Remove(self, *args):
        """
        Remove(Handle_Graphic3d_StructureManager self)

        Deletes and erases the 3D structure manager.


        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_Remove(self, *args)


    def Erase(self, *args):
        """
        Erase(Handle_Graphic3d_StructureManager self)
        Erase(Handle_Graphic3d_StructureManager self, Handle_Graphic3d_Structure theStructure)

        Erases the structure.

        :type theStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_Erase(self, *args)


    def DisplayedStructures(self, *args):
        """
        DisplayedStructures(Handle_Graphic3d_StructureManager self, Graphic3d_MapOfStructure & SG)

        Returns the set of structures displayed in
        visualiser <me>.

        :type SG: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_DisplayedStructures(self, *args)


    def HighlightedStructures(self, *args):
        """
        HighlightedStructures(Handle_Graphic3d_StructureManager self, Graphic3d_MapOfStructure & SG)

        Returns the set of highlighted structures
        in a visualiser <me>.

        :type SG: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_HighlightedStructures(self, *args)


    def ReCompute(self, *args):
        """
        ReCompute(Handle_Graphic3d_StructureManager self, Handle_Graphic3d_Structure theStructure)
        ReCompute(Handle_Graphic3d_StructureManager self, Handle_Graphic3d_Structure theStructure, Handle_Graphic3d_DataStructureManager theProjector)

        Forces a new construction of the structure.
        if <theStructure> is displayed in <theProjector> and TOS_COMPUTED.

        :type theStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type theProjector: OCC.wrapper.Graphic3d.Handle_Graphic3d_DataStructureManager

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_ReCompute(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_Graphic3d_StructureManager self, Handle_Graphic3d_Structure theStructure, Standard_Boolean const theWithDestruction)

        Clears the structure.

        :type theStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type theWithDestruction: bool

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_Clear(self, *args)


    def Connect(self, *args):
        """
        Connect(Handle_Graphic3d_StructureManager self, Handle_Graphic3d_Structure theMother, Handle_Graphic3d_Structure theDaughter)

        Connects the structures.

        :type theMother: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type theDaughter: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_Connect(self, *args)


    def Disconnect(self, *args):
        """
        Disconnect(Handle_Graphic3d_StructureManager self, Handle_Graphic3d_Structure theMother, Handle_Graphic3d_Structure theDaughter)

        Disconnects the structures.

        :type theMother: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type theDaughter: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_Disconnect(self, *args)


    def Display(self, *args):
        """
        Display(Handle_Graphic3d_StructureManager self, Handle_Graphic3d_Structure theStructure)

        Display the structure.

        :type theStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_Display(self, *args)


    def Highlight(self, *args):
        """
        Highlight(Handle_Graphic3d_StructureManager self, Handle_Graphic3d_Structure theStructure)

        Highlights the structure.

        :type theStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_Highlight(self, *args)


    def SetTransform(self, *args):
        """
        SetTransform(Handle_Graphic3d_StructureManager self, Handle_Graphic3d_Structure theStructure, Handle_Geom_Transformation theTrsf)

        Transforms the structure.

        :type theStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_SetTransform(self, *args)


    def ChangeDisplayPriority(self, *args):
        """
        ChangeDisplayPriority(Handle_Graphic3d_StructureManager self, Handle_Graphic3d_Structure theStructure, Standard_Integer const theOldPriority, Standard_Integer const theNewPriority)

        Changes the display priority of the structure <AStructure>.

        :type theStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type theOldPriority: int
        :type theNewPriority: int

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_ChangeDisplayPriority(self, *args)


    def ChangeZLayer(self, *args):
        """
        ChangeZLayer(Handle_Graphic3d_StructureManager self, Handle_Graphic3d_Structure theStructure, Graphic3d_ZLayerId const theLayerId)

        Change Z layer for structure. The Z layer mechanism allows to display structures in higher
        layers in overlay of structures in lower layers.

        :type theStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_ChangeZLayer(self, *args)


    def GraphicDriver(self, *args):
        """
        Returns the graphic driver of <me>.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_GraphicDriver

        """
        res = _Graphic3d.Handle_Graphic3d_StructureManager_GraphicDriver(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Identification(self, *args):
        """
        Identification(Handle_Graphic3d_StructureManager self, Graphic3d_CView theView) -> Standard_Integer
        Identification(Handle_Graphic3d_StructureManager self, Standard_Integer const AId) -> Handle_Graphic3d_Structure

        Returns the structure with the identification number <AId>.

        :type AId: int
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_Identification(self, *args)


    def UnIdentification(self, *args):
        """
        UnIdentification(Handle_Graphic3d_StructureManager self, Graphic3d_CView theView)

        Detach the view from this structure manager and release its identification.

        :type theView: OCC.wrapper.Graphic3d.Graphic3d_CView

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_UnIdentification(self, *args)


    def DefinedViews(self, *args):
        """
        Returns the group of views defined in the structure manager.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_IndexedMapOfView

        """
        res = _Graphic3d.Handle_Graphic3d_StructureManager_DefinedViews(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def MaxNumOfViews(self, *args):
        """
        MaxNumOfViews(Handle_Graphic3d_StructureManager self) -> Standard_Integer

        Returns the theoretical maximum number of definable views in the manager.
        Warning: It's not possible to accept an infinite number of definable views because each
        view must have an identification and we have different managers.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_MaxNumOfViews(self, *args)


    def UnHighlight(self, *args):
        """
        UnHighlight(Handle_Graphic3d_StructureManager self, Handle_Graphic3d_Structure AStructure)
        UnHighlight(Handle_Graphic3d_StructureManager self)

        Suppresses the highlighting on all the structures in <me>.


        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_UnHighlight(self, *args)


    def RecomputeStructures(self, *args):
        """
        RecomputeStructures(Handle_Graphic3d_StructureManager self)
        RecomputeStructures(Handle_Graphic3d_StructureManager self, Graphic3d_MapOfStructure const & theStructures)

        Recomputes all structures from theStructures.

        :type theStructures: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_RecomputeStructures(self, *args)


    def RegisterObject(self, *args):
        """
        RegisterObject(Handle_Graphic3d_StructureManager self, Handle_Standard_Transient theObject) -> Handle_Graphic3d_ViewAffinity

        :type theObject: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ViewAffinity

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_RegisterObject(self, *args)


    def UnregisterObject(self, *args):
        """
        UnregisterObject(Handle_Graphic3d_StructureManager self, Handle_Standard_Transient theObject)

        :type theObject: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_UnregisterObject(self, *args)


    def ObjectAffinity(self, *args):
        """
        ObjectAffinity(Handle_Graphic3d_StructureManager self, Handle_Standard_Transient theObject) -> Handle_Graphic3d_ViewAffinity

        :type theObject: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ViewAffinity

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_ObjectAffinity(self, *args)


    def IsDeviceLost(self, *args):
        """
        IsDeviceLost(Handle_Graphic3d_StructureManager self) -> Standard_Boolean

        Returns TRUE if Device Lost flag has been set and presentation data should be reuploaded onto graphics driver.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_IsDeviceLost(self, *args)


    def SetDeviceLost(self, *args):
        """
        SetDeviceLost(Handle_Graphic3d_StructureManager self)

        Sets Device Lost flag.


        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_SetDeviceLost(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_StructureManager self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_StructureManager self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_StructureManager self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_StructureManager self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_StructureManager self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_StructureManager self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_StructureManager self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_StructureManager self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_StructureManager self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_StructureManager_DecrementRefCounter(self, *args)

Handle_Graphic3d_StructureManager_swigregister = _Graphic3d.Handle_Graphic3d_StructureManager_swigregister
Handle_Graphic3d_StructureManager_swigregister(Handle_Graphic3d_StructureManager)

def Handle_Graphic3d_StructureManager_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_StructureManager_DownCast(thing)
Handle_Graphic3d_StructureManager_DownCast = _Graphic3d.Handle_Graphic3d_StructureManager_DownCast

class Graphic3d_GraphicDriver(Standard.Standard_Transient):
    """
    This class allows the definition of a graphic driver
    for 3d interface (currently only OpenGl driver is used).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_GraphicDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_GraphicDriver(self) 
            return h


    def InquireLimit(self, *args):
        """
        InquireLimit(Graphic3d_GraphicDriver self, Graphic3d_TypeOfLimit const theType) -> Standard_Integer

        Request limit of graphic resource of specific type.

        :type theType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfLimit
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_GraphicDriver_InquireLimit(self, *args)


    def InquireLightLimit(self, *args):
        """
        InquireLightLimit(Graphic3d_GraphicDriver self) -> Standard_Integer

        Request maximum number of active light sources supported by driver and hardware.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_GraphicDriver_InquireLightLimit(self, *args)


    def InquirePlaneLimit(self, *args):
        """
        InquirePlaneLimit(Graphic3d_GraphicDriver self) -> Standard_Integer

        Request maximum number of active clipping planes supported by driver and hardware.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_GraphicDriver_InquirePlaneLimit(self, *args)


    def InquireViewLimit(self, *args):
        """
        InquireViewLimit(Graphic3d_GraphicDriver self) -> Standard_Integer

        Request maximum number of views supported by driver.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_GraphicDriver_InquireViewLimit(self, *args)


    def CreateStructure(self, *args):
        """
        CreateStructure(Graphic3d_GraphicDriver self, Handle_Graphic3d_StructureManager theManager) -> Handle_Graphic3d_CStructure

        Creates new empty graphic structure

        :type theManager: OCC.wrapper.Graphic3d.Handle_Graphic3d_StructureManager
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_CStructure

        """
        return _Graphic3d.Graphic3d_GraphicDriver_CreateStructure(self, *args)


    def RemoveStructure(self, *args):
        """
        RemoveStructure(Graphic3d_GraphicDriver self, Handle_Graphic3d_CStructure theCStructure)

        Removes structure from graphic driver and releases its resources.

        :type theCStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_CStructure

        """
        return _Graphic3d.Graphic3d_GraphicDriver_RemoveStructure(self, *args)


    def CreateView(self, *args):
        """
        CreateView(Graphic3d_GraphicDriver self, Handle_Graphic3d_StructureManager theMgr) -> Handle_Graphic3d_CView

        Creates new view for this graphic driver.

        :type theMgr: OCC.wrapper.Graphic3d.Handle_Graphic3d_StructureManager
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_CView

        """
        return _Graphic3d.Graphic3d_GraphicDriver_CreateView(self, *args)


    def RemoveView(self, *args):
        """
        RemoveView(Graphic3d_GraphicDriver self, Handle_Graphic3d_CView theView)

        Removes view from graphic driver and releases its resources.

        :type theView: OCC.wrapper.Graphic3d.Handle_Graphic3d_CView

        """
        return _Graphic3d.Graphic3d_GraphicDriver_RemoveView(self, *args)


    def EnableVBO(self, *args):
        """
        EnableVBO(Graphic3d_GraphicDriver self, Standard_Boolean const status)

        enables/disables usage of OpenGL vertex buffer arrays while drawing primitiev arrays

        :type status: bool

        """
        return _Graphic3d.Graphic3d_GraphicDriver_EnableVBO(self, *args)


    def MemoryInfo(self, *args):
        """
        MemoryInfo(Graphic3d_GraphicDriver self, TCollection_AsciiString theInfo) -> Standard_Boolean

        Returns information about GPU memory usage.

        :type theFreeBytes: int
        :type theInfo: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_GraphicDriver_MemoryInfo(self, *args)


    def DefaultTextHeight(self, *args):
        """
        DefaultTextHeight(Graphic3d_GraphicDriver self) -> Standard_ShortReal

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_GraphicDriver_DefaultTextHeight(self, *args)


    def TextSize(self, *args):
        """
        TextSize(Graphic3d_GraphicDriver self, Handle_Graphic3d_CView theView, Standard_CString const theText, Standard_ShortReal const theHeight)

        Computes text width.

        :type theView: OCC.wrapper.Graphic3d.Handle_Graphic3d_CView
        :type theText: OCC.wrapper.Standard.Standard_CString
        :type theHeight: float
        :type theWidth: float
        :type theAscent: float
        :type theDescent: float

        """
        return _Graphic3d.Graphic3d_GraphicDriver_TextSize(self, *args)


    def AddZLayer(self, *args):
        """
        AddZLayer(Graphic3d_GraphicDriver self, Graphic3d_ZLayerId const theLayerId)

        Add a new top-level z layer with ID <theLayerId> for
        the view. Z layers allow drawing structures in higher layers
        in foreground of structures in lower layers. To add a structure
        to desired layer on display it is necessary to set the layer
        ID for the structure.

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Graphic3d_GraphicDriver_AddZLayer(self, *args)


    def RemoveZLayer(self, *args):
        """
        RemoveZLayer(Graphic3d_GraphicDriver self, Graphic3d_ZLayerId const theLayerId)

        Removes Z layer. All structures displayed at the moment in layer will be displayed in
        default layer (the bottom-level z layer). By default, there are always default
        bottom-level layer that can't be removed.  The passed theLayerId should be not less than 0
        (reserved for default layers that can not be removed).

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Graphic3d_GraphicDriver_RemoveZLayer(self, *args)


    def ZLayers(self, *args):
        """
        ZLayers(Graphic3d_GraphicDriver self, NCollection_Sequence_Standard_Integer theLayerSeq)

        Returns list of Z layers defined for the graphical driver.

        :type theLayerSeq: OCC.wrapper.TColStd.TColStd_SequenceOfInteger

        """
        return _Graphic3d.Graphic3d_GraphicDriver_ZLayers(self, *args)


    def SetZLayerSettings(self, *args):
        """
        SetZLayerSettings(Graphic3d_GraphicDriver self, Graphic3d_ZLayerId const theLayerId, Graphic3d_ZLayerSettings const & theSettings)

        Sets the settings for a single Z layer.

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId
        :type theSettings: OCC.wrapper.Graphic3d.Graphic3d_ZLayerSettings

        """
        return _Graphic3d.Graphic3d_GraphicDriver_SetZLayerSettings(self, *args)


    def ZLayerSettings(self, *args):
        """
        Returns the settings of a single Z layer.

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ZLayerSettings

        """
        res = _Graphic3d.Graphic3d_GraphicDriver_ZLayerSettings(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ViewExists(self, *args):
        """
        ViewExists(Graphic3d_GraphicDriver self, Handle_Aspect_Window theWindow, Handle_Graphic3d_CView theView) -> Standard_Boolean

        Returns view associated with the window if it is exists and is activated.
        Returns Standard_True if the view associated to the window exists.

        :type theWindow: OCC.wrapper.Aspect.Handle_Aspect_Window
        :type theView: OCC.wrapper.Graphic3d.Handle_Graphic3d_CView
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_GraphicDriver_ViewExists(self, *args)


    def GetDisplayConnection(self, *args):
        """
        returns Handle to display connection

        :rtype: OCC.wrapper.Aspect.Handle_Aspect_DisplayConnection

        """
        res = _Graphic3d.Graphic3d_GraphicDriver_GetDisplayConnection(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewIdentification(self, *args):
        """
        NewIdentification(Graphic3d_GraphicDriver self) -> Standard_Integer

        Returns a new identification number for a new structure.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_GraphicDriver_NewIdentification(self, *args)


    def RemoveIdentification(self, *args):
        """
        RemoveIdentification(Graphic3d_GraphicDriver self, Standard_Integer const theId)

        Frees the identifier of a structure.

        :type theId: int

        """
        return _Graphic3d.Graphic3d_GraphicDriver_RemoveIdentification(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_GraphicDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_GraphicDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_GraphicDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_GraphicDriver
Graphic3d_GraphicDriver_swigregister = _Graphic3d.Graphic3d_GraphicDriver_swigregister
Graphic3d_GraphicDriver_swigregister(Graphic3d_GraphicDriver)

def Graphic3d_GraphicDriver_get_type_name(*args):
    """
    Graphic3d_GraphicDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_GraphicDriver_get_type_name(*args)

def Graphic3d_GraphicDriver_get_type_descriptor(*args):
    """
    Graphic3d_GraphicDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_GraphicDriver_get_type_descriptor(*args)

class Graphic3d_ShaderAttribute(Standard.Standard_Transient):
    """Describes custom vertex shader attribute."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_ShaderAttribute
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_ShaderAttribute(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Graphic3d_ShaderAttribute self, TCollection_AsciiString theName, int const theLocation) -> Graphic3d_ShaderAttribute

        Creates new attribute.

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theLocation: const int

        """
        this = _Graphic3d.new_Graphic3d_ShaderAttribute(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Name(self, *args):
        """
        Returns name of shader variable.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Graphic3d_ShaderAttribute_Name(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Location(self, *args):
        """
        Location(Graphic3d_ShaderAttribute self) -> int

        Returns attribute location to be bound on GLSL program linkage stage.

        :rtype: int

        """
        return _Graphic3d.Graphic3d_ShaderAttribute_Location(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_ShaderAttribute_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_ShaderAttribute_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_ShaderAttribute_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ShaderAttribute
Graphic3d_ShaderAttribute_swigregister = _Graphic3d.Graphic3d_ShaderAttribute_swigregister
Graphic3d_ShaderAttribute_swigregister(Graphic3d_ShaderAttribute)

def Graphic3d_ShaderAttribute_get_type_name(*args):
    """
    Graphic3d_ShaderAttribute_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_ShaderAttribute_get_type_name(*args)

def Graphic3d_ShaderAttribute_get_type_descriptor(*args):
    """
    Graphic3d_ShaderAttribute_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_ShaderAttribute_get_type_descriptor(*args)

class Graphic3d_ArrayOfQuadrangleStrips(Graphic3d_ArrayOfPrimitives):
    """
    Contains quadrangles strip array definition.
    WARNING! Quadrangle primitives might be unsupported by graphics library.
    Triangulation should be used instead of quads for better compatibility.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_ArrayOfQuadrangleStrips
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_ArrayOfQuadrangleStrips(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_ArrayOfQuadrangleStrips_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_ArrayOfQuadrangleStrips_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_ArrayOfQuadrangleStrips_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theMaxVertexs, Standard_Integer const theMaxStrips=0, Standard_Boolean const theHasVNormals, Standard_Boolean const theHasVColors, Standard_Boolean const theHasSColors, Standard_Boolean const theHasVTexels) -> Graphic3d_ArrayOfQuadrangleStrips

        Creates an array of quadrangle strips, a polygon can be filled as:
        1) Creating a single strip defined with his vertexes, i.e:
        @code
        myArray = Graphic3d_ArrayOfQuadrangleStrips (7);
        myArray->AddVertex (x1, y1, z1);
        ....
        myArray->AddVertex (x7, y7, z7);
        @endcode
        2) Creating separate strips defined with a predefined number of strips and the number of vertex per strip, i.e:
        @code
        myArray = Graphic3d_ArrayOfQuadrangleStrips (8, 2);
        myArray->AddBound (4);
        myArray->AddVertex (x1, y1, z1);
        ....
        myArray->AddVertex (x4, y4, z4);
        myArray->AddBound (4);
        myArray->AddVertex (x5, y5, z5);
        ....
        myArray->AddVertex (x8, y8, z8);
        @endcode
        @param theMaxVertexs defines the maximum allowed vertex number in the array
        @param theMaxStrips  defines the maximum allowed strip  number in the array
        The number of quadrangle really drawn is: VertexNumber()/2 - Min(1, BoundNumber()).

        :type theMaxVertexs: int
        :type theMaxStrips: int
        :type theHasVNormals: bool
        :type theHasVColors: bool
        :type theHasSColors: bool
        :type theHasVTexels: bool

        """
        this = _Graphic3d.new_Graphic3d_ArrayOfQuadrangleStrips(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle



    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ArrayOfQuadrangleStrips
Graphic3d_ArrayOfQuadrangleStrips_swigregister = _Graphic3d.Graphic3d_ArrayOfQuadrangleStrips_swigregister
Graphic3d_ArrayOfQuadrangleStrips_swigregister(Graphic3d_ArrayOfQuadrangleStrips)

def Graphic3d_ArrayOfQuadrangleStrips_get_type_name(*args):
    """
    Graphic3d_ArrayOfQuadrangleStrips_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_ArrayOfQuadrangleStrips_get_type_name(*args)

def Graphic3d_ArrayOfQuadrangleStrips_get_type_descriptor(*args):
    """
    Graphic3d_ArrayOfQuadrangleStrips_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_ArrayOfQuadrangleStrips_get_type_descriptor(*args)

class Handle_Graphic3d_ArrayOfQuadrangleStrips(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_ArrayOfQuadrangleStrips self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_ArrayOfQuadrangleStrips self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Graphic3d_ArrayOfQuadrangleStrips thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Handle_Graphic3d_ArrayOfQuadrangleStrips theHandle) -> Handle_Graphic3d_ArrayOfQuadrangleStrips
        assign(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Graphic3d_ArrayOfQuadrangleStrips thePtr) -> Handle_Graphic3d_ArrayOfQuadrangleStrips
        assign(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Handle_Graphic3d_ArrayOfQuadrangleStrips theHandle) -> Handle_Graphic3d_ArrayOfQuadrangleStrips

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_ArrayOfQuadrangleStrips self) -> Graphic3d_ArrayOfQuadrangleStrips

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_ArrayOfQuadrangleStrips self) -> Graphic3d_ArrayOfQuadrangleStrips

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_ArrayOfQuadrangleStrips self) -> Graphic3d_ArrayOfQuadrangleStrips

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_ArrayOfQuadrangleStrips(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_ArrayOfQuadrangleStrips

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_ArrayOfQuadrangleStrips self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Attributes(self, *args):
        """
        Returns vertex attributes buffer (colors, normals, texture coordinates).

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Buffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_Attributes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Type(self, *args):
        """
        Type(Handle_Graphic3d_ArrayOfQuadrangleStrips self) -> Graphic3d_TypeOfPrimitiveArray

        Returns the type of this primitive

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfPrimitiveArray

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_Type(self, *args)


    def StringType(self, *args):
        """
        StringType(Handle_Graphic3d_ArrayOfQuadrangleStrips self) -> Standard_CString

        Returns the string type of this primitive

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_StringType(self, *args)


    def HasVertexNormals(self, *args):
        """
        HasVertexNormals(Handle_Graphic3d_ArrayOfQuadrangleStrips self) -> Standard_Boolean

        Returns TRUE when vertex normals array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_HasVertexNormals(self, *args)


    def HasVertexColors(self, *args):
        """
        HasVertexColors(Handle_Graphic3d_ArrayOfQuadrangleStrips self) -> Standard_Boolean

        Returns TRUE when vertex colors array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_HasVertexColors(self, *args)


    def HasVertexTexels(self, *args):
        """
        HasVertexTexels(Handle_Graphic3d_ArrayOfQuadrangleStrips self) -> Standard_Boolean

        Returns TRUE when vertex texels array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_HasVertexTexels(self, *args)


    def VertexNumber(self, *args):
        """
        VertexNumber(Handle_Graphic3d_ArrayOfQuadrangleStrips self) -> Standard_Integer

        Returns the number of defined vertex

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_VertexNumber(self, *args)


    def ItemNumber(self, *args):
        """
        ItemNumber(Handle_Graphic3d_ArrayOfQuadrangleStrips self) -> Standard_Integer

        Returns the number of total items according to the array type.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_ItemNumber(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_Graphic3d_ArrayOfQuadrangleStrips self) -> Standard_Boolean

        Returns TRUE only when the contains of this array is available.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_IsValid(self, *args)


    def AddVertex(self, *args):
        """
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangleStrips self, gp_Pnt theVertex) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangleStrips self, NCollection_Vec3_Standard_ShortReal theVertex) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangleStrips self, gp_Pnt theVertex, Quantity_Color theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangleStrips self, gp_Pnt theVertex, Standard_Integer const theColor32) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangleStrips self, gp_Pnt theVertex, Graphic3d_Vec4ub const & theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangleStrips self, gp_Pnt theVertex, gp_Dir theNormal) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theNX, Standard_ShortReal const theNY, Standard_ShortReal const theNZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangleStrips self, gp_Pnt theVertex, gp_Dir theNormal, Quantity_Color theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangleStrips self, gp_Pnt theVertex, gp_Dir theNormal, Standard_Integer const theColor32) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangleStrips self, gp_Pnt theVertex, gp_Pnt2d theTexel) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theTX, Standard_Real const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theTX, Standard_ShortReal const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangleStrips self, gp_Pnt theVertex, gp_Dir theNormal, gp_Pnt2d theTexel) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ, Standard_Real const theTX, Standard_Real const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theNX, Standard_ShortReal const theNY, Standard_ShortReal const theNZ, Standard_ShortReal const theTX, Standard_ShortReal const theTY) -> Standard_Integer

        Adds a vertice,vertex normal and texture in the vertex array.
        Warning: Normal is ignored when the hasVNormals constructor parameter is FALSE
        and  Texel  is ignored when the hasVTexels  constructor parameter is FALSE.
        @return the actual vertex number

        :type theX: float
        :type theY: float
        :type theZ: float
        :type theNX: float
        :type theNY: float
        :type theNZ: float
        :type theTX: float
        :type theTY: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_AddVertex(self, *args)


    def SetVertice(self, *args):
        """
        SetVertice(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theIndex, gp_Pnt theVertex)
        SetVertice(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theIndex, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ)

        Change the vertice of rank theIndex in the array.

        :type theIndex: int
        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_SetVertice(self, *args)


    def SetVertexColor(self, *args):
        """
        SetVertexColor(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theIndex, Quantity_Color theColor)
        SetVertexColor(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theIndex, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB)
        SetVertexColor(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theIndex, Graphic3d_Vec4ub const & theColor)
        SetVertexColor(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theIndex, Standard_Integer const theColor32)

        Change the vertex color of rank theIndex> in the array.
        @code
        theColor32 = Alpha << 24 + Blue << 16 + Green << 8 + Red
        @endcode

        :type theIndex: int
        :type theColor32: int

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_SetVertexColor(self, *args)


    def SetVertexNormal(self, *args):
        """
        SetVertexNormal(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theIndex, gp_Dir theNormal)
        SetVertexNormal(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theIndex, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ)

        Change the vertex normal of rank theIndex in the array.

        :type theIndex: int
        :type theNX: float
        :type theNY: float
        :type theNZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_SetVertexNormal(self, *args)


    def SetVertexTexel(self, *args):
        """
        SetVertexTexel(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theIndex, gp_Pnt2d theTexel)
        SetVertexTexel(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theIndex, Standard_Real const theTX, Standard_Real const theTY)

        Change the vertex texel of rank theIndex in the array.

        :type theIndex: int
        :type theTX: float
        :type theTY: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_SetVertexTexel(self, *args)


    def Vertice(self, *args):
        """
        Vertice(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theRank) -> gp_Pnt
        Vertice(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theRank)

        Returns the vertice coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_Vertice(self, *args)


    def VertexColor(self, *args):
        """
        VertexColor(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theRank) -> Quantity_Color
        VertexColor(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theIndex, Graphic3d_Vec4ub & theColor)
        VertexColor(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theRank)
        VertexColor(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theRank)

        Returns the vertex color values at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theColor: int

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_VertexColor(self, *args)


    def VertexNormal(self, *args):
        """
        VertexNormal(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theRank) -> gp_Dir
        VertexNormal(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theRank)

        Returns the vertex normal coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theNX: float
        :type theNY: float
        :type theNZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_VertexNormal(self, *args)


    def VertexTexel(self, *args):
        """
        VertexTexel(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theRank) -> gp_Pnt2d
        VertexTexel(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theRank)

        Returns the vertex texture coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theTX: float
        :type theTY: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_VertexTexel(self, *args)


    def Indices(self, *args):
        """
        Returns optional index buffer.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_IndexBuffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_Indices(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def EdgeNumber(self, *args):
        """
        EdgeNumber(Handle_Graphic3d_ArrayOfQuadrangleStrips self) -> Standard_Integer

        Returns the number of defined edges

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_EdgeNumber(self, *args)


    def Edge(self, *args):
        """
        Edge(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theRank) -> Standard_Integer

        Returns the vertex index at rank theRank in the range [1,EdgeNumber()]

        :type theRank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_Edge(self, *args)


    def AddEdge(self, *args):
        """
        AddEdge(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theVertexIndex) -> Standard_Integer

        Adds an edge in the range [1,VertexNumber()] in the array.
        @return the actual edges number

        :type theVertexIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_AddEdge(self, *args)


    def Bounds(self, *args):
        """
        Returns optional bounds buffer.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_BoundBuffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_Bounds(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasBoundColors(self, *args):
        """
        HasBoundColors(Handle_Graphic3d_ArrayOfQuadrangleStrips self) -> Standard_Boolean

        Returns TRUE when bound colors array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_HasBoundColors(self, *args)


    def BoundNumber(self, *args):
        """
        BoundNumber(Handle_Graphic3d_ArrayOfQuadrangleStrips self) -> Standard_Integer

        Returns the number of defined bounds

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_BoundNumber(self, *args)


    def Bound(self, *args):
        """
        Bound(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theRank) -> Standard_Integer

        Returns the edge number at rank theRank.

        :type theRank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_Bound(self, *args)


    def BoundColor(self, *args):
        """
        BoundColor(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theRank) -> Quantity_Color
        BoundColor(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theRank)

        Returns the bound color values at rank theRank from the bound table if defined.

        :type theRank: int
        :type theR: float
        :type theG: float
        :type theB: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_BoundColor(self, *args)


    def AddBound(self, *args):
        """
        AddBound(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theEdgeNumber) -> Standard_Integer
        AddBound(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theEdgeNumber, Quantity_Color theBColor) -> Standard_Integer
        AddBound(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theEdgeNumber, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB) -> Standard_Integer

        Adds a bound of length theEdgeNumber and bound color coordinates in the bound array.
        Warning: <theR,theG,theB> are ignored when the hasBColors constructor parameter is FALSE
        @return the actual bounds number

        :type theEdgeNumber: int
        :type theR: float
        :type theG: float
        :type theB: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_AddBound(self, *args)


    def SetBoundColor(self, *args):
        """
        SetBoundColor(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theIndex, Quantity_Color theColor)
        SetBoundColor(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_Integer const theIndex, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB)

        Change the bound color of rank theIndex in the array.

        :type theIndex: int
        :type theR: float
        :type theG: float
        :type theB: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_SetBoundColor(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_ArrayOfQuadrangleStrips self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_ArrayOfQuadrangleStrips self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_ArrayOfQuadrangleStrips self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_ArrayOfQuadrangleStrips self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_ArrayOfQuadrangleStrips self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_ArrayOfQuadrangleStrips self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_DecrementRefCounter(self, *args)

Handle_Graphic3d_ArrayOfQuadrangleStrips_swigregister = _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_swigregister
Handle_Graphic3d_ArrayOfQuadrangleStrips_swigregister(Handle_Graphic3d_ArrayOfQuadrangleStrips)

def Handle_Graphic3d_ArrayOfQuadrangleStrips_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_DownCast(thing)
Handle_Graphic3d_ArrayOfQuadrangleStrips_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangleStrips_DownCast

class Handle_Graphic3d_StructureDefinitionError(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_StructureDefinitionError self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_StructureDefinitionError_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_StructureDefinitionError self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_StructureDefinitionError_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_StructureDefinitionError self, Graphic3d_StructureDefinitionError thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_StructureDefinitionError_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_StructureDefinitionError self, Handle_Graphic3d_StructureDefinitionError theHandle) -> Handle_Graphic3d_StructureDefinitionError
        assign(Handle_Graphic3d_StructureDefinitionError self, Graphic3d_StructureDefinitionError thePtr) -> Handle_Graphic3d_StructureDefinitionError
        assign(Handle_Graphic3d_StructureDefinitionError self, Handle_Graphic3d_StructureDefinitionError theHandle) -> Handle_Graphic3d_StructureDefinitionError

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_StructureDefinitionError_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_StructureDefinitionError self) -> Graphic3d_StructureDefinitionError

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_StructureDefinitionError_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_StructureDefinitionError self) -> Graphic3d_StructureDefinitionError

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_StructureDefinitionError___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_StructureDefinitionError self) -> Graphic3d_StructureDefinitionError

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_StructureDefinitionError___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_StructureDefinitionError___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_StructureDefinitionError___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_StructureDefinitionError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_StructureDefinitionError_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_StructureDefinitionError

    def NewInstance(self, *args):
        """
        NewInstance(Handle_Graphic3d_StructureDefinitionError self, Standard_CString const theMessage) -> Handle_Graphic3d_StructureDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_StructureDefinitionError

        """
        return _Graphic3d.Handle_Graphic3d_StructureDefinitionError_NewInstance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_StructureDefinitionError self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_StructureDefinitionError_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_StructureDefinitionError_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_StructureDefinitionError_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Print(self, *args):
        """
        Print(Handle_Graphic3d_StructureDefinitionError self, Standard_OStream & s)

        Prints on the stream <s> the exception name followed by
        the error message.
        Level: Advanced
        Warning:
        The operator "OStream& operator<< (Standard_OStream&,
        Handle(Standard_Failure)&)"
        is implemented. (This operator uses the method Print)

        :type s: OCC.wrapper.Standard.Standard_OStream

        """
        return _Graphic3d.Handle_Graphic3d_StructureDefinitionError_Print(self, *args)


    def GetMessageString(self, *args):
        """
        GetMessageString(Handle_Graphic3d_StructureDefinitionError self) -> Standard_CString

        Returns error message

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Handle_Graphic3d_StructureDefinitionError_GetMessageString(self, *args)


    def SetMessageString(self, *args):
        """
        SetMessageString(Handle_Graphic3d_StructureDefinitionError self, Standard_CString const aMessage)

        Sets error message

        :type aMessage: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Handle_Graphic3d_StructureDefinitionError_SetMessageString(self, *args)


    def Reraise(self, *args):
        """
        Reraise(Handle_Graphic3d_StructureDefinitionError self)
        Reraise(Handle_Graphic3d_StructureDefinitionError self, Standard_CString const aMessage)
        Reraise(Handle_Graphic3d_StructureDefinitionError self, Standard_SStream const & aReason)

        Reraises a caught exception and changes its error message.

        :type aReason: OCC.wrapper.Standard.Standard_SStream

        """
        return _Graphic3d.Handle_Graphic3d_StructureDefinitionError_Reraise(self, *args)


    def Jump(self, *args):
        """
        Jump(Handle_Graphic3d_StructureDefinitionError self)

        Used to throw CASCADE exception from C signal handler.
        On platforms that do not allow throwing C++ exceptions
        from this handler (e.g. Linux), uses longjump to get to
        the current active signal handler, and only then is
        converted to C++ exception.


        """
        return _Graphic3d.Handle_Graphic3d_StructureDefinitionError_Jump(self, *args)


    def Caught(self, *args):
        """
        Caught(Handle_Graphic3d_StructureDefinitionError self) -> Handle_Standard_Failure

        Returns the last caught exception.
        Needed when exceptions are emulated by C longjumps,
        in other cases is also provided for compatibility.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Failure

        """
        return _Graphic3d.Handle_Graphic3d_StructureDefinitionError_Caught(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_StructureDefinitionError self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_StructureDefinitionError_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_StructureDefinitionError self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_StructureDefinitionError self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_StructureDefinitionError_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_StructureDefinitionError self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_StructureDefinitionError self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_StructureDefinitionError_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_StructureDefinitionError self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_StructureDefinitionError_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_StructureDefinitionError self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_StructureDefinitionError_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_StructureDefinitionError self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_StructureDefinitionError_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_StructureDefinitionError self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_StructureDefinitionError_DecrementRefCounter(self, *args)

Handle_Graphic3d_StructureDefinitionError_swigregister = _Graphic3d.Handle_Graphic3d_StructureDefinitionError_swigregister
Handle_Graphic3d_StructureDefinitionError_swigregister(Handle_Graphic3d_StructureDefinitionError)

def Handle_Graphic3d_StructureDefinitionError_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_StructureDefinitionError_DownCast(thing)
Handle_Graphic3d_StructureDefinitionError_DownCast = _Graphic3d.Handle_Graphic3d_StructureDefinitionError_DownCast

class Graphic3d_ArrayOfPoints(Graphic3d_ArrayOfPrimitives):
    """Contains points array definition."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_ArrayOfPoints
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_ArrayOfPoints(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_ArrayOfPoints_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_ArrayOfPoints_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_ArrayOfPoints_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Graphic3d_ArrayOfPoints self, Standard_Integer const theMaxVertexs, Standard_Boolean const theHasVColors, Standard_Boolean const theHasVNormals) -> Graphic3d_ArrayOfPoints

        Creates an array of points, a single pixel point is drawn at each vertex.
        The array must be filled using the AddVertex(Point) method.
        @param theHasVColors  when TRUE, AddVertex(Point,Color)  should be used for specifying vertex color
        @param theHasVNormals when TRUE, AddVertex(Point,Normal) should be used for specifying vertex normal

        :type theMaxVertexs: int
        :type theHasVColors: bool
        :type theHasVNormals: bool

        """
        this = _Graphic3d.new_Graphic3d_ArrayOfPoints(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle



    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ArrayOfPoints
Graphic3d_ArrayOfPoints_swigregister = _Graphic3d.Graphic3d_ArrayOfPoints_swigregister
Graphic3d_ArrayOfPoints_swigregister(Graphic3d_ArrayOfPoints)

def Graphic3d_ArrayOfPoints_get_type_name(*args):
    """
    Graphic3d_ArrayOfPoints_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_ArrayOfPoints_get_type_name(*args)

def Graphic3d_ArrayOfPoints_get_type_descriptor(*args):
    """
    Graphic3d_ArrayOfPoints_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_ArrayOfPoints_get_type_descriptor(*args)

class Graphic3d_ShaderProgram(Standard.Standard_Transient):
    """This class is responsible for managing shader programs."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_ShaderProgram
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_ShaderProgram(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_ShaderProgram_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_ShaderProgram_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_ShaderProgram_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Graphic3d_ShaderProgram self) -> Graphic3d_ShaderProgram

        Creates new empty program object.


        """
        this = _Graphic3d.new_Graphic3d_ShaderProgram(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def IsDone(self, *args):
        """
        IsDone(Graphic3d_ShaderProgram self) -> Standard_Boolean

        Checks if the program object is valid or not.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_ShaderProgram_IsDone(self, *args)


    def GetId(self, *args):
        """
        Returns unique ID used to manage resource in graphic driver.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Graphic3d_ShaderProgram_GetId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Header(self, *args):
        """
        Returns GLSL header (version code and extensions).

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Graphic3d_ShaderProgram_Header(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetHeader(self, *args):
        """
        SetHeader(Graphic3d_ShaderProgram self, TCollection_AsciiString theHeader)

        Setup GLSL header containing language version code and used extensions.
        Will be prepended to the very beginning of the source code.
        Example:
        @code
        #version 300 es
        #extension GL_ARB_bindless_texture : require
        @endcode

        :type theHeader: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Graphic3d_ShaderProgram_SetHeader(self, *args)


    def AppendToHeader(self, *args):
        """
        AppendToHeader(Graphic3d_ShaderProgram self, TCollection_AsciiString theHeaderLine)

        Append line to GLSL header.

        :type theHeaderLine: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Graphic3d_ShaderProgram_AppendToHeader(self, *args)


    def NbLightsMax(self, *args):
        """
        NbLightsMax(Graphic3d_ShaderProgram self) -> Standard_Integer

        Return the length of array of light sources (THE_MAX_LIGHTS),
        to be used for initialization occLightSources.
        Default value is THE_MAX_LIGHTS_DEFAULT.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_ShaderProgram_NbLightsMax(self, *args)


    def SetNbLightsMax(self, *args):
        """
        SetNbLightsMax(Graphic3d_ShaderProgram self, Standard_Integer theNbLights)

        Specify the length of array of light sources (THE_MAX_LIGHTS).

        :type theNbLights: int

        """
        return _Graphic3d.Graphic3d_ShaderProgram_SetNbLightsMax(self, *args)


    def NbClipPlanesMax(self, *args):
        """
        NbClipPlanesMax(Graphic3d_ShaderProgram self) -> Standard_Integer

        Return the length of array of clipping planes (THE_MAX_CLIP_PLANES),
        to be used for initialization occClipPlaneEquations.
        Default value is THE_MAX_CLIP_PLANES_DEFAULT.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_ShaderProgram_NbClipPlanesMax(self, *args)


    def SetNbClipPlanesMax(self, *args):
        """
        SetNbClipPlanesMax(Graphic3d_ShaderProgram self, Standard_Integer theNbPlanes)

        Specify the length of array of clipping planes (THE_MAX_CLIP_PLANES).

        :type theNbPlanes: int

        """
        return _Graphic3d.Graphic3d_ShaderProgram_SetNbClipPlanesMax(self, *args)


    def AttachShader(self, *args):
        """
        AttachShader(Graphic3d_ShaderProgram self, Handle_Graphic3d_ShaderObject theShader) -> Standard_Boolean

        Attaches shader object to the program object.

        :type theShader: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderObject
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_ShaderProgram_AttachShader(self, *args)


    def DetachShader(self, *args):
        """
        DetachShader(Graphic3d_ShaderProgram self, Handle_Graphic3d_ShaderObject theShader) -> Standard_Boolean

        Detaches shader object from the program object.

        :type theShader: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderObject
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_ShaderProgram_DetachShader(self, *args)


    def ShaderObjects(self, *args):
        """
        Returns list of attached shader objects.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ShaderObjectList

        """
        res = _Graphic3d.Graphic3d_ShaderProgram_ShaderObjects(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Variables(self, *args):
        """
        The list of currently pushed but not applied custom uniform variables.
        This list is automatically cleared after applying to GLSL program.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ShaderVariableList

        """
        res = _Graphic3d.Graphic3d_ShaderProgram_Variables(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VertexAttributes(self, *args):
        """
        Return the list of custom vertex attributes.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ShaderAttributeList

        """
        res = _Graphic3d.Graphic3d_ShaderProgram_VertexAttributes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetVertexAttributes(self, *args):
        """
        SetVertexAttributes(Graphic3d_ShaderProgram self, NCollection_Sequence_Handle_Graphic3d_ShaderAttribute theAttributes)

        Assign the list of custom vertex attributes.
        Should be done before GLSL program initialization.

        :type theAttributes: OCC.wrapper.Graphic3d.Graphic3d_ShaderAttributeList

        """
        return _Graphic3d.Graphic3d_ShaderProgram_SetVertexAttributes(self, *args)


    def NbFragmentOutputs(self, *args):
        """
        NbFragmentOutputs(Graphic3d_ShaderProgram self) -> Standard_Integer

        Returns the number (1+) of Fragment Shader outputs to be written to
        (more than 1 can be in case of multiple draw buffers); 1 by default.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_ShaderProgram_NbFragmentOutputs(self, *args)


    def SetNbFragmentOutputs(self, *args):
        """
        SetNbFragmentOutputs(Graphic3d_ShaderProgram self, Standard_Integer const theNbOutputs)

        Sets the number of Fragment Shader outputs to be written to.
        Should be done before GLSL program initialization.

        :type theNbOutputs: int

        """
        return _Graphic3d.Graphic3d_ShaderProgram_SetNbFragmentOutputs(self, *args)


    def HasAlphaTest(self, *args):
        """
        HasAlphaTest(Graphic3d_ShaderProgram self) -> Standard_Boolean

        Return true if Fragment Shader should perform alpha test; FALSE by default.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_ShaderProgram_HasAlphaTest(self, *args)


    def SetAlphaTest(self, *args):
        """
        SetAlphaTest(Graphic3d_ShaderProgram self, Standard_Boolean theAlphaTest)

        Set if Fragment Shader should perform alpha test.
        Note that this flag is designed for usage with - custom shader program may discard fragment regardless this flag.

        :type theAlphaTest: bool

        """
        return _Graphic3d.Graphic3d_ShaderProgram_SetAlphaTest(self, *args)


    def HasWeightOitOutput(self, *args):
        """
        HasWeightOitOutput(Graphic3d_ShaderProgram self) -> Standard_Boolean

        Return true if Fragment Shader color should output the weighted OIT coverage; FALSE by default.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_ShaderProgram_HasWeightOitOutput(self, *args)


    def SetWeightOitOutput(self, *args):
        """
        SetWeightOitOutput(Graphic3d_ShaderProgram self, Standard_Boolean theOutput)

        Set if Fragment Shader color should output the weighted OIT coverage.
        Note that weighted OIT also requires at least 2 Fragment Outputs (color + coverage).

        :type theOutput: bool

        """
        return _Graphic3d.Graphic3d_ShaderProgram_SetWeightOitOutput(self, *args)


    def ClearVariables(self, *args):
        """
        ClearVariables(Graphic3d_ShaderProgram self)

        Removes all custom uniform variables from the program.


        """
        return _Graphic3d.Graphic3d_ShaderProgram_ClearVariables(self, *args)


    def PushVariableFloat(self, *args):
        """
        PushVariableFloat(Graphic3d_ShaderProgram self, TCollection_AsciiString theName, float const theValue) -> Standard_Boolean

        Pushes float uniform.

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theValue: const float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_ShaderProgram_PushVariableFloat(self, *args)


    def PushVariableVec2(self, *args):
        """
        PushVariableVec2(Graphic3d_ShaderProgram self, TCollection_AsciiString theName, NCollection_Vec2_Standard_ShortReal theValue) -> Standard_Boolean

        Pushes vec2 uniform.

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theValue: OCC.wrapper.Graphic3d.Graphic3d_Vec2
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_ShaderProgram_PushVariableVec2(self, *args)


    def PushVariableVec3(self, *args):
        """
        PushVariableVec3(Graphic3d_ShaderProgram self, TCollection_AsciiString theName, NCollection_Vec3_Standard_ShortReal theValue) -> Standard_Boolean

        Pushes vec3 uniform.

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theValue: OCC.wrapper.Graphic3d.Graphic3d_Vec3
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_ShaderProgram_PushVariableVec3(self, *args)


    def PushVariableVec4(self, *args):
        """
        PushVariableVec4(Graphic3d_ShaderProgram self, TCollection_AsciiString theName, Graphic3d_Vec4 const & theValue) -> Standard_Boolean

        Pushes vec4 uniform.

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theValue: OCC.wrapper.Graphic3d.Graphic3d_Vec4
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_ShaderProgram_PushVariableVec4(self, *args)


    def PushVariableInt(self, *args):
        """
        PushVariableInt(Graphic3d_ShaderProgram self, TCollection_AsciiString theName, int const theValue) -> Standard_Boolean

        Pushes int uniform.

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theValue: const int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_ShaderProgram_PushVariableInt(self, *args)


    def PushVariableVec2i(self, *args):
        """
        PushVariableVec2i(Graphic3d_ShaderProgram self, TCollection_AsciiString theName, NCollection_Vec2_Standard_Integer theValue) -> Standard_Boolean

        Pushes vec2i uniform.

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theValue: OCC.wrapper.Graphic3d.Graphic3d_Vec2i
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_ShaderProgram_PushVariableVec2i(self, *args)


    def PushVariableVec3i(self, *args):
        """
        PushVariableVec3i(Graphic3d_ShaderProgram self, TCollection_AsciiString theName, NCollection_Vec3_Standard_Integer theValue) -> Standard_Boolean

        Pushes vec3i uniform.

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theValue: OCC.wrapper.Graphic3d.Graphic3d_Vec3i
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_ShaderProgram_PushVariableVec3i(self, *args)


    def PushVariableVec4i(self, *args):
        """
        PushVariableVec4i(Graphic3d_ShaderProgram self, TCollection_AsciiString theName, Graphic3d_Vec4i const & theValue) -> Standard_Boolean

        Pushes vec4i uniform.

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theValue: OCC.wrapper.Graphic3d.Graphic3d_Vec4i
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_ShaderProgram_PushVariableVec4i(self, *args)


    def ShadersFolder(*args):
        """
        ShadersFolder() -> TCollection_AsciiString

        The path to GLSL programs determined from CSF_ShadersDirectory or CASROOT environment variables.
        @return the root folder with default GLSL programs.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Graphic3d_ShaderProgram_ShadersFolder(*args)

    ShadersFolder = staticmethod(ShadersFolder)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ShaderProgram
Graphic3d_ShaderProgram_swigregister = _Graphic3d.Graphic3d_ShaderProgram_swigregister
Graphic3d_ShaderProgram_swigregister(Graphic3d_ShaderProgram)

def Graphic3d_ShaderProgram_get_type_name(*args):
    """
    Graphic3d_ShaderProgram_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_ShaderProgram_get_type_name(*args)

def Graphic3d_ShaderProgram_get_type_descriptor(*args):
    """
    Graphic3d_ShaderProgram_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_ShaderProgram_get_type_descriptor(*args)

def Graphic3d_ShaderProgram_ShadersFolder(*args):
    """
    Graphic3d_ShaderProgram_ShadersFolder() -> TCollection_AsciiString

    The path to GLSL programs determined from CSF_ShadersDirectory or CASROOT environment variables.
    @return the root folder with default GLSL programs.

    :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

    """
    return _Graphic3d.Graphic3d_ShaderProgram_ShadersFolder(*args)

class Graphic3d_Group(Standard.Standard_Transient):
    """
    This class allows the definition of groups
    of primitives inside of graphic objects (presentations).
    A group contains the primitives and attributes
    for which the range is limited to this group.
    The primitives of a group can be globally suppressed.

    There are two main group usage models:

    1) Non-modifiable, or unbounded, group ('black box').
    Developers can repeat a sequence of
    SetPrimitivesAspect() with AddPrimitiveArray() methods arbitrary number of times
    to define arbitrary number of primitive "blocks" each having individual apect values.
    Any modification of such a group is forbidden, as aspects and primitives are mixed
    in memory without any high-level logical structure, and any modification is very likely to result
    in corruption of the group internal data.
    It is necessary to recreate such a group as a whole when some attribute should be changed.
    (for example, in terms of AIS it is necessary to re-Compute() the whole presentation each time).
    2) Bounded group. Developers should specify the necessary group aspects with help of
    SetGroupPrimitivesAspect() and then add primitives to the group.
    Such a group have simplified organization in memory (a single block of attributes
    followed by a block of primitives) and therefore it can be modified, if it is necessary to
    change parameters of some aspect that has already been set, using methods:
    IsGroupPrimitivesAspectSet() to detect which aspect was set for primitives;
    GroupPrimitivesAspect() to read current aspect values
    and SetGroupPrimitivesAspect() to set new values.

    Developers are strongly recommended to take all the above into account when filling Graphic3d_Group
    with aspects and primitives and choose the group usage model beforehand out of application needs.
    Note that some Graphic3d_Group class virtual methods contain only base implementation
    that is extended by the descendant class in OpenGl package.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_Group
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_Group(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_Group_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_Group_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_Group_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(Graphic3d_Group self, Standard_Boolean const theUpdateStructureMgr)

        Supress all primitives and attributes of <me>.
        To clear group without update in Graphic3d_StructureManager
        pass Standard_False as <theUpdateStructureMgr>. This
        used on context and viewer destruction, when the pointer
        to structure manager in Graphic3d_Structure could be
        already released (pointers are used here to avoid handle
        cross-reference);

        :type theUpdateStructureMgr: bool

        """
        return _Graphic3d.Graphic3d_Group_Clear(self, *args)


    def Remove(self, *args):
        """
        Remove(Graphic3d_Group self)

        Supress the group <me> in the structure.
        Warning: No more graphic operations in <me> after this call.
        Modifies the current modelling transform persistence (pan, zoom or rotate)
        Get the current modelling transform persistence (pan, zoom or rotate)


        """
        return _Graphic3d.Graphic3d_Group_Remove(self, *args)


    def LineAspect(self, *args):
        """
        LineAspect(Graphic3d_Group self) -> Handle_Graphic3d_AspectLine3d

        Return line aspect.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectLine3d

        """
        return _Graphic3d.Graphic3d_Group_LineAspect(self, *args)


    def FillAreaAspect(self, *args):
        """
        FillAreaAspect(Graphic3d_Group self) -> Handle_Graphic3d_AspectFillArea3d

        Return fill area aspect.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectFillArea3d

        """
        return _Graphic3d.Graphic3d_Group_FillAreaAspect(self, *args)


    def TextAspect(self, *args):
        """
        TextAspect(Graphic3d_Group self) -> Handle_Graphic3d_AspectText3d

        Return text aspect.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectText3d

        """
        return _Graphic3d.Graphic3d_Group_TextAspect(self, *args)


    def MarkerAspect(self, *args):
        """
        MarkerAspect(Graphic3d_Group self) -> Handle_Graphic3d_AspectMarker3d

        Return marker aspect.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectMarker3d

        """
        return _Graphic3d.Graphic3d_Group_MarkerAspect(self, *args)


    def SetGroupPrimitivesAspect(self, *args):
        """
        SetGroupPrimitivesAspect(Graphic3d_Group self, Handle_Graphic3d_AspectLine3d theAspect)
        SetGroupPrimitivesAspect(Graphic3d_Group self, Handle_Graphic3d_AspectFillArea3d theAspect)
        SetGroupPrimitivesAspect(Graphic3d_Group self, Handle_Graphic3d_AspectText3d theAspect)
        SetGroupPrimitivesAspect(Graphic3d_Group self, Handle_Graphic3d_AspectMarker3d theAspect)

        Modifies the context for all the marker primitives of the group.

        :type theAspect: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectMarker3d

        """
        return _Graphic3d.Graphic3d_Group_SetGroupPrimitivesAspect(self, *args)


    def SetPrimitivesAspect(self, *args):
        """
        SetPrimitivesAspect(Graphic3d_Group self, Handle_Graphic3d_AspectLine3d theAspect)
        SetPrimitivesAspect(Graphic3d_Group self, Handle_Graphic3d_AspectFillArea3d theAspect)
        SetPrimitivesAspect(Graphic3d_Group self, Handle_Graphic3d_AspectText3d theAspect)
        SetPrimitivesAspect(Graphic3d_Group self, Handle_Graphic3d_AspectMarker3d theAspect)

        Modifies the current context of the group to give
        another aspect for all the marker primitives created
        after this call in the group.

        :type theAspect: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectMarker3d

        """
        return _Graphic3d.Graphic3d_Group_SetPrimitivesAspect(self, *args)


    def IsGroupPrimitivesAspectSet(self, *args):
        """
        IsGroupPrimitivesAspectSet(Graphic3d_Group self, Graphic3d_GroupAspect const theAspect) -> Standard_Boolean

        Returns TRUE if aspect is set for the group.

        :type theAspect: OCC.wrapper.Graphic3d.Graphic3d_GroupAspect
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_Group_IsGroupPrimitivesAspectSet(self, *args)


    def GroupPrimitivesAspect(self, *args):
        """
        GroupPrimitivesAspect(Graphic3d_Group self, Handle_Graphic3d_AspectLine3d theAspLine, Handle_Graphic3d_AspectText3d theAspText, Handle_Graphic3d_AspectMarker3d theAspMarker, Handle_Graphic3d_AspectFillArea3d theAspFill)

        Returns the context of all the primitives of the group.

        :type theAspLine: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectLine3d
        :type theAspText: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectText3d
        :type theAspMarker: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectMarker3d
        :type theAspFill: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectFillArea3d

        """
        return _Graphic3d.Graphic3d_Group_GroupPrimitivesAspect(self, *args)


    def PrimitivesAspect(self, *args):
        """
        PrimitivesAspect(Graphic3d_Group self, Handle_Graphic3d_AspectLine3d theAspLine, Handle_Graphic3d_AspectText3d theAspText, Handle_Graphic3d_AspectMarker3d theAspMarker, Handle_Graphic3d_AspectFillArea3d theAspFill)

        Returns the last inserted context in the group for each kind of primitives.

        :type theAspLine: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectLine3d
        :type theAspText: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectText3d
        :type theAspMarker: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectMarker3d
        :type theAspFill: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectFillArea3d

        """
        return _Graphic3d.Graphic3d_Group_PrimitivesAspect(self, *args)


    def Text(self, *args):
        """
        Text(Graphic3d_Group self, Standard_CString const AText, Graphic3d_Vertex APoint, Standard_Real const AHeight, Standard_Real const AAngle, Graphic3d_TextPath const ATp, Graphic3d_HorizontalTextAlignment const AHta, Graphic3d_VerticalTextAlignment const AVta, Standard_Boolean const EvalMinMax)
        Text(Graphic3d_Group self, Standard_CString const AText, Graphic3d_Vertex APoint, Standard_Real const AHeight, Standard_Boolean const EvalMinMax)
        Text(Graphic3d_Group self, TCollection_ExtendedString AText, Graphic3d_Vertex APoint, Standard_Real const AHeight, Standard_Real const AAngle, Graphic3d_TextPath const ATp, Graphic3d_HorizontalTextAlignment const AHta, Graphic3d_VerticalTextAlignment const AVta, Standard_Boolean const EvalMinMax)
        Text(Graphic3d_Group self, TCollection_ExtendedString AText, Graphic3d_Vertex APoint, Standard_Real const AHeight, Standard_Boolean const EvalMinMax)
        Text(Graphic3d_Group self, Standard_CString const theTextUtf, gp_Ax2 theOrientation, Standard_Real const theHeight, Standard_Real const theAngle, Graphic3d_TextPath const theTp, Graphic3d_HorizontalTextAlignment const theHTA, Graphic3d_VerticalTextAlignment const theVTA, Standard_Boolean const theToEvalMinMax, Standard_Boolean const theHasOwnAnchor)
        Text(Graphic3d_Group self, TCollection_ExtendedString theText, gp_Ax2 theOrientation, Standard_Real const theHeight, Standard_Real const theAngle, Graphic3d_TextPath const theTp, Graphic3d_HorizontalTextAlignment const theHTA, Graphic3d_VerticalTextAlignment const theVTA, Standard_Boolean const theToEvalMinMax, Standard_Boolean const theHasOwnAnchor)

        Creates the string <theText> at orientation <theOrientation> in 3D space.

        :type theText: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theOrientation: OCC.wrapper.gp.gp_Ax2
        :type theHeight: float
        :type theAngle: float
        :type theTp: OCC.wrapper.Graphic3d.Graphic3d_TextPath
        :type theHTA: OCC.wrapper.Graphic3d.Graphic3d_HorizontalTextAlignment
        :type theVTA: OCC.wrapper.Graphic3d.Graphic3d_VerticalTextAlignment
        :type theToEvalMinMax: bool
        :type theHasOwnAnchor: bool

        """
        return _Graphic3d.Graphic3d_Group_Text(self, *args)


    def AddPrimitiveArray(self, *args):
        """
        AddPrimitiveArray(Graphic3d_Group self, Graphic3d_TypeOfPrimitiveArray const theType, Handle_Graphic3d_IndexBuffer theIndices, Handle_Graphic3d_Buffer theAttribs, Handle_Graphic3d_BoundBuffer theBounds, Standard_Boolean const theToEvalMinMax)
        AddPrimitiveArray(Graphic3d_Group self, Handle_Graphic3d_ArrayOfPrimitives thePrim, Standard_Boolean const theToEvalMinMax)

        Adds an array of primitives for display

        :type thePrim: OCC.wrapper.Graphic3d.Handle_Graphic3d_ArrayOfPrimitives
        :type theToEvalMinMax: bool

        """
        return _Graphic3d.Graphic3d_Group_AddPrimitiveArray(self, *args)


    def Marker(self, *args):
        """
        Marker(Graphic3d_Group self, Graphic3d_Vertex thePoint, Standard_Boolean const theToEvalMinMax)

        Creates a primitive array with single marker using AddPrimitiveArray().

        :type thePoint: OCC.wrapper.Graphic3d.Graphic3d_Vertex
        :type theToEvalMinMax: bool

        """
        return _Graphic3d.Graphic3d_Group_Marker(self, *args)


    def SetStencilTestOptions(self, *args):
        """
        SetStencilTestOptions(Graphic3d_Group self, Standard_Boolean const theIsEnabled)

        sets the stencil test to theIsEnabled state;

        :type theIsEnabled: bool

        """
        return _Graphic3d.Graphic3d_Group_SetStencilTestOptions(self, *args)


    def SetFlippingOptions(self, *args):
        """
        SetFlippingOptions(Graphic3d_Group self, Standard_Boolean const theIsEnabled, gp_Ax2 theRefPlane)

        sets the flipping to theIsEnabled state.

        :type theIsEnabled: bool
        :type theRefPlane: OCC.wrapper.gp.gp_Ax2

        """
        return _Graphic3d.Graphic3d_Group_SetFlippingOptions(self, *args)


    def ContainsFacet(self, *args):
        """
        ContainsFacet(Graphic3d_Group self) -> bool

        Returns true if the group contains Polygons, Triangles or Quadrangles.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Group_ContainsFacet(self, *args)


    def IsDeleted(self, *args):
        """
        IsDeleted(Graphic3d_Group self) -> Standard_Boolean

        Returns Standard_True if the group <me> is deleted.
        <me> is deleted after the call Remove (me) or the
        associated structure is deleted.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_Group_IsDeleted(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Graphic3d_Group self) -> Standard_Boolean

        Returns Standard_True if the group <me> is empty.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_Group_IsEmpty(self, *args)


    def MinMaxValues(self, *args):
        """
        MinMaxValues(Graphic3d_Group self)

        Returns the coordinates of the boundary box of the group.

        :type theXMin: float
        :type theYMin: float
        :type theZMin: float
        :type theXMax: float
        :type theYMax: float
        :type theZMax: float

        """
        return _Graphic3d.Graphic3d_Group_MinMaxValues(self, *args)


    def SetMinMaxValues(self, *args):
        """
        SetMinMaxValues(Graphic3d_Group self, Standard_Real const theXMin, Standard_Real const theYMin, Standard_Real const theZMin, Standard_Real const theXMax, Standard_Real const theYMax, Standard_Real const theZMax)

        Sets the coordinates of the boundary box of the group.

        :type theXMin: float
        :type theYMin: float
        :type theZMin: float
        :type theXMax: float
        :type theYMax: float
        :type theZMax: float

        """
        return _Graphic3d.Graphic3d_Group_SetMinMaxValues(self, *args)


    def BoundingBox(self, *args):
        """
        Returns boundary box of the group <me> without transformation applied,

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_BndBox4f

        """
        res = _Graphic3d.Graphic3d_Group_BoundingBox(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeBoundingBox(self, *args):
        """
        ChangeBoundingBox(Graphic3d_Group self) -> BVH_Box_Standard_ShortReal_

        Returns non-const boundary box of the group <me> without transformation applied,

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_BndBox4f

        """
        return _Graphic3d.Graphic3d_Group_ChangeBoundingBox(self, *args)


    def Structure(self, *args):
        """
        Structure(Graphic3d_Group self) -> Handle_Graphic3d_Structure

        Returns the structure containing the group <me>.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Graphic3d_Group_Structure(self, *args)


    def SetClosed(self, *args):
        """
        SetClosed(Graphic3d_Group self, bool const theIsClosed)

        Changes property shown that primitive arrays within this group form closed volume (do no contain open shells).

        :type theIsClosed: const bool

        """
        return _Graphic3d.Graphic3d_Group_SetClosed(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(Graphic3d_Group self) -> bool

        Return true if primitive arrays within this graphic group form closed volume (do no contain open shells).

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Group_IsClosed(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Group
Graphic3d_Group_swigregister = _Graphic3d.Graphic3d_Group_swigregister
Graphic3d_Group_swigregister(Graphic3d_Group)

def Graphic3d_Group_get_type_name(*args):
    """
    Graphic3d_Group_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_Group_get_type_name(*args)

def Graphic3d_Group_get_type_descriptor(*args):
    """
    Graphic3d_Group_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_Group_get_type_descriptor(*args)

class Graphic3d_AspectFillArea3d(Standard.Standard_Transient):
    """This class defines graphic attributes for opaque 3d primitives (polygons, triangles, quadrilaterals)."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_AspectFillArea3d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_AspectFillArea3d(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_AspectFillArea3d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Graphic3d_AspectFillArea3d self) -> Graphic3d_AspectFillArea3d
        __init__(Graphic3d_AspectFillArea3d self, Aspect_InteriorStyle const theInterior, Quantity_Color theInteriorColor, Quantity_Color theEdgeColor, Aspect_TypeOfLine const theEdgeLineType, Standard_Real const theEdgeWidth, Graphic3d_MaterialAspect theFrontMaterial, Graphic3d_MaterialAspect theBackMaterial) -> Graphic3d_AspectFillArea3d

        Creates a context table for fill area primitives defined with the specified values.
        Display of back-facing filled polygons.
        No distinction between external and internal faces of FillAreas.
        The edges are not drawn.
        Polygon offset parameters: mode = Aspect_POM_None, factor = 1., units = 0.

        :type theInterior: OCC.wrapper.Aspect.Aspect_InteriorStyle
        :type theInteriorColor: OCC.wrapper.Quantity.Quantity_Color
        :type theEdgeColor: OCC.wrapper.Quantity.Quantity_Color
        :type theEdgeLineType: OCC.wrapper.Aspect.Aspect_TypeOfLine
        :type theEdgeWidth: float
        :type theFrontMaterial: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect
        :type theBackMaterial: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect

        """
        this = _Graphic3d.new_Graphic3d_AspectFillArea3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def InteriorStyle(self, *args):
        """
        InteriorStyle(Graphic3d_AspectFillArea3d self) -> Aspect_InteriorStyle

        Return interior rendering style (Aspect_IS_EMPTY by default, which means nothing will be rendered!).

        :rtype: OCC.wrapper.Aspect.Aspect_InteriorStyle

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_InteriorStyle(self, *args)


    def SetInteriorStyle(self, *args):
        """
        SetInteriorStyle(Graphic3d_AspectFillArea3d self, Aspect_InteriorStyle const theStyle)

        Modifies the interior type used for rendering

        :type theStyle: OCC.wrapper.Aspect.Aspect_InteriorStyle

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetInteriorStyle(self, *args)


    def ShadingModel(self, *args):
        """
        ShadingModel(Graphic3d_AspectFillArea3d self) -> Graphic3d_TypeOfShadingModel

        Returns shading model (Graphic3d_TOSM_DEFAULT by default, which means that Shading Model set as default for entire Viewer will be used)

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfShadingModel

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_ShadingModel(self, *args)


    def SetShadingModel(self, *args):
        """
        SetShadingModel(Graphic3d_AspectFillArea3d self, Graphic3d_TypeOfShadingModel const theShadingModel)

        Sets shading model

        :type theShadingModel: OCC.wrapper.Graphic3d.Graphic3d_TypeOfShadingModel

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetShadingModel(self, *args)


    def AlphaMode(self, *args):
        """
        AlphaMode(Graphic3d_AspectFillArea3d self) -> Graphic3d_AlphaMode

        Returns the way how alpha value should be treated (Graphic3d_AlphaMode_BlendAuto by default, for backward compatibility).

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_AlphaMode

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_AlphaMode(self, *args)


    def AlphaCutoff(self, *args):
        """
        AlphaCutoff(Graphic3d_AspectFillArea3d self) -> Standard_ShortReal

        Returns alpha cutoff threshold, for discarding fragments within Graphic3d_AlphaMode_Mask mode (0.5 by default).
        If the alpha value is greater than or equal to this value then it is rendered as fully opaque, otherwise, it is rendered as fully transparent.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_AlphaCutoff(self, *args)


    def SetAlphaMode(self, *args):
        """
        SetAlphaMode(Graphic3d_AspectFillArea3d self, Graphic3d_AlphaMode theMode, Standard_ShortReal theAlphaCutoff=0.5)

        Defines the way how alpha value should be treated.

        :type theMode: OCC.wrapper.Graphic3d.Graphic3d_AlphaMode
        :type theAlphaCutoff: float

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetAlphaMode(self, *args)


    def InteriorColor(self, *args):
        """
        Return interior color.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Graphic3d_AspectFillArea3d_InteriorColor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def InteriorColorRGBA(self, *args):
        """
        Return interior color.

        :rtype: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        res = _Graphic3d.Graphic3d_AspectFillArea3d_InteriorColorRGBA(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetInteriorColor(self, *args):
        """
        SetInteriorColor(Graphic3d_AspectFillArea3d self, Quantity_Color theColor)
        SetInteriorColor(Graphic3d_AspectFillArea3d self, Quantity_ColorRGBA theColor)

        Modifies the color of the interior of the face

        :type theColor: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetInteriorColor(self, *args)


    def BackInteriorColor(self, *args):
        """
        Return back interior color.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Graphic3d_AspectFillArea3d_BackInteriorColor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def BackInteriorColorRGBA(self, *args):
        """
        Return back interior color.

        :rtype: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        res = _Graphic3d.Graphic3d_AspectFillArea3d_BackInteriorColorRGBA(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetBackInteriorColor(self, *args):
        """
        SetBackInteriorColor(Graphic3d_AspectFillArea3d self, Quantity_Color theColor)
        SetBackInteriorColor(Graphic3d_AspectFillArea3d self, Quantity_ColorRGBA theColor)

        Modifies the color of the interior of the back face

        :type theColor: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetBackInteriorColor(self, *args)


    def FrontMaterial(self, *args):
        """
        Returns the surface material of external faces

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect

        """
        res = _Graphic3d.Graphic3d_AspectFillArea3d_FrontMaterial(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFrontMaterial(self, *args):
        """
        ChangeFrontMaterial(Graphic3d_AspectFillArea3d self) -> Graphic3d_MaterialAspect

        Returns the surface material of external faces

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_ChangeFrontMaterial(self, *args)


    def SetFrontMaterial(self, *args):
        """
        SetFrontMaterial(Graphic3d_AspectFillArea3d self, Graphic3d_MaterialAspect theMaterial)

        Modifies the surface material of external faces

        :type theMaterial: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetFrontMaterial(self, *args)


    def BackMaterial(self, *args):
        """
        Returns the surface material of internal faces

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect

        """
        res = _Graphic3d.Graphic3d_AspectFillArea3d_BackMaterial(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeBackMaterial(self, *args):
        """
        ChangeBackMaterial(Graphic3d_AspectFillArea3d self) -> Graphic3d_MaterialAspect

        Returns the surface material of internal faces

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_ChangeBackMaterial(self, *args)


    def SetBackMaterial(self, *args):
        """
        SetBackMaterial(Graphic3d_AspectFillArea3d self, Graphic3d_MaterialAspect theMaterial)

        Modifies the surface material of internal faces

        :type theMaterial: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetBackMaterial(self, *args)


    def ToSuppressBackFaces(self, *args):
        """
        ToSuppressBackFaces(Graphic3d_AspectFillArea3d self) -> bool

        Returns true if back faces should be suppressed (true by default).

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_ToSuppressBackFaces(self, *args)


    def SetSuppressBackFaces(self, *args):
        """
        SetSuppressBackFaces(Graphic3d_AspectFillArea3d self, bool theToSuppress)

        Assign back faces culling flag.

        :type theToSuppress: bool

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetSuppressBackFaces(self, *args)


    def BackFace(self, *args):
        """
        BackFace(Graphic3d_AspectFillArea3d self) -> bool

        Returns true if back faces should be suppressed (true by default).

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_BackFace(self, *args)


    def AllowBackFace(self, *args):
        """
        AllowBackFace(Graphic3d_AspectFillArea3d self)

        Allows the display of back-facing filled polygons.


        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_AllowBackFace(self, *args)


    def SuppressBackFace(self, *args):
        """
        SuppressBackFace(Graphic3d_AspectFillArea3d self)

        Suppress the display of back-facing filled polygons.
        A back-facing polygon is defined as a polygon whose
        vertices are in a clockwise order with respect to screen coordinates.


        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SuppressBackFace(self, *args)


    def Distinguish(self, *args):
        """
        Distinguish(Graphic3d_AspectFillArea3d self) -> bool

        Returns true if material properties should be distinguished for back and front faces (false by default).

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_Distinguish(self, *args)


    def SetDistinguish(self, *args):
        """
        SetDistinguish(Graphic3d_AspectFillArea3d self, bool toDistinguish)

        Set material distinction between front and back faces.

        :type toDistinguish: bool

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetDistinguish(self, *args)


    def SetDistinguishOn(self, *args):
        """
        SetDistinguishOn(Graphic3d_AspectFillArea3d self)

        Allows material distinction between front and back faces.


        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetDistinguishOn(self, *args)


    def SetDistinguishOff(self, *args):
        """
        SetDistinguishOff(Graphic3d_AspectFillArea3d self)

        Forbids material distinction between front and back faces.


        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetDistinguishOff(self, *args)


    def ShaderProgram(self, *args):
        """
        Return shader program.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderProgram

        """
        res = _Graphic3d.Graphic3d_AspectFillArea3d_ShaderProgram(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetShaderProgram(self, *args):
        """
        SetShaderProgram(Graphic3d_AspectFillArea3d self, Handle_Graphic3d_ShaderProgram theProgram)

        Sets up OpenGL/GLSL shader program.

        :type theProgram: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderProgram

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetShaderProgram(self, *args)


    def TextureSet(self, *args):
        """
        Return texture array to be mapped.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureSet

        """
        res = _Graphic3d.Graphic3d_AspectFillArea3d_TextureSet(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTextureSet(self, *args):
        """
        SetTextureSet(Graphic3d_AspectFillArea3d self, Handle_Graphic3d_TextureSet theTextures)

        Setup texture array to be mapped.

        :type theTextures: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureSet

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetTextureSet(self, *args)


    def TextureMap(self, *args):
        """
        TextureMap(Graphic3d_AspectFillArea3d self) -> Handle_Graphic3d_TextureMap

        Return texture to be mapped.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureMap

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_TextureMap(self, *args)


    def SetTextureMap(self, *args):
        """
        SetTextureMap(Graphic3d_AspectFillArea3d self, Handle_Graphic3d_TextureMap theTexture)

        Assign texture to be mapped.
        See also SetTextureMapOn() to actually activate texture mapping.

        :type theTexture: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureMap

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetTextureMap(self, *args)


    def ToMapTexture(self, *args):
        """
        ToMapTexture(Graphic3d_AspectFillArea3d self) -> bool

        Return true if texture mapping is enabled (false by default).

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_ToMapTexture(self, *args)


    def TextureMapState(self, *args):
        """
        TextureMapState(Graphic3d_AspectFillArea3d self) -> bool

        Return true if texture mapping is enabled (false by default).

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_TextureMapState(self, *args)


    def SetTextureMapOn(self, *args):
        """
        SetTextureMapOn(Graphic3d_AspectFillArea3d self, bool theToMap)
        SetTextureMapOn(Graphic3d_AspectFillArea3d self)

        Enable texture mapping (has no effect if texture is not set).


        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetTextureMapOn(self, *args)


    def SetTextureMapOff(self, *args):
        """
        SetTextureMapOff(Graphic3d_AspectFillArea3d self)

        Disable texture mapping.


        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetTextureMapOff(self, *args)


    def PolygonOffset(self, *args):
        """
        Returns current polygon offsets settings.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_PolygonOffset

        """
        res = _Graphic3d.Graphic3d_AspectFillArea3d_PolygonOffset(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PolygonOffsets(self, *args):
        """
        PolygonOffsets(Graphic3d_AspectFillArea3d self)

        Returns current polygon offsets settings.

        :type theMode: int
        :type theFactor: float
        :type theUnits: float

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_PolygonOffsets(self, *args)


    def SetPolygonOffsets(self, *args):
        """
        SetPolygonOffsets(Graphic3d_AspectFillArea3d self, Standard_Integer const theMode, Standard_ShortReal const theFactor=1.0, Standard_ShortReal const theUnits=0.0)

        Sets up OpenGL polygon offsets mechanism.
        <aMode> parameter can contain various combinations of
        Aspect_PolygonOffsetMode enumeration elements (Aspect_POM_None means
        that polygon offsets are not changed).
        If <aMode> is different from Aspect_POM_Off and Aspect_POM_None, then <aFactor> and <aUnits>
        arguments are used by graphic renderer to calculate a depth offset value:

        offset = <aFactor> * m + <aUnits> * r, where
        m - maximum depth slope for the polygon currently being displayed,
        r - minimum window coordinates depth resolution (implementation-specific)

        Default settings for OCC 3D viewer: mode = Aspect_POM_Fill, factor = 1., units = 0.

        Negative offset values move polygons closer to the viewport,
        while positive values shift polygons away.
        Consult OpenGL reference for details (glPolygonOffset function description).

        :type theMode: int
        :type theFactor: float
        :type theUnits: float

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetPolygonOffsets(self, *args)


    def ToDrawEdges(self, *args):
        """
        ToDrawEdges(Graphic3d_AspectFillArea3d self) -> bool

        Returns true if edges should be drawn (false by default).

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_ToDrawEdges(self, *args)


    def SetDrawEdges(self, *args):
        """
        SetDrawEdges(Graphic3d_AspectFillArea3d self, bool theToDraw)

        Set if edges should be drawn or not.

        :type theToDraw: bool

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetDrawEdges(self, *args)


    def Edge(self, *args):
        """
        Edge(Graphic3d_AspectFillArea3d self) -> bool

        Returns true if edges should be drawn.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_Edge(self, *args)


    def SetEdgeOn(self, *args):
        """
        SetEdgeOn(Graphic3d_AspectFillArea3d self)

        The edges of FillAreas are drawn.


        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetEdgeOn(self, *args)


    def SetEdgeOff(self, *args):
        """
        SetEdgeOff(Graphic3d_AspectFillArea3d self)

        The edges of FillAreas are not drawn.


        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetEdgeOff(self, *args)


    def EdgeColor(self, *args):
        """
        Return color of edges.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Graphic3d_AspectFillArea3d_EdgeColor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def EdgeColorRGBA(self, *args):
        """
        Return color of edges.

        :rtype: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        res = _Graphic3d.Graphic3d_AspectFillArea3d_EdgeColorRGBA(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetEdgeColor(self, *args):
        """
        SetEdgeColor(Graphic3d_AspectFillArea3d self, Quantity_Color theColor)

        Modifies the color of the edge of the face

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetEdgeColor(self, *args)


    def EdgeLineType(self, *args):
        """
        EdgeLineType(Graphic3d_AspectFillArea3d self) -> Aspect_TypeOfLine

        Return edges line type.

        :rtype: OCC.wrapper.Aspect.Aspect_TypeOfLine

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_EdgeLineType(self, *args)


    def SetEdgeLineType(self, *args):
        """
        SetEdgeLineType(Graphic3d_AspectFillArea3d self, Aspect_TypeOfLine const theType)

        Modifies the edge line type

        :type theType: OCC.wrapper.Aspect.Aspect_TypeOfLine

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetEdgeLineType(self, *args)


    def EdgeWidth(self, *args):
        """
        EdgeWidth(Graphic3d_AspectFillArea3d self) -> Standard_ShortReal

        Return width for edges in pixels.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_EdgeWidth(self, *args)


    def SetEdgeWidth(self, *args):
        """
        SetEdgeWidth(Graphic3d_AspectFillArea3d self, Standard_Real const theWidth)

        Modifies the edge thickness
        Warning: Raises AspectFillAreaDefinitionError if the width is a negative value.

        :type theWidth: float

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetEdgeWidth(self, *args)


    def HatchStyle(self, *args):
        """
        Returns the hatch type used when InteriorStyle is IS_HATCH

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_HatchStyle

        """
        res = _Graphic3d.Graphic3d_AspectFillArea3d_HatchStyle(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetHatchStyle(self, *args):
        """
        SetHatchStyle(Graphic3d_AspectFillArea3d self, Handle_Graphic3d_HatchStyle theStyle)
        SetHatchStyle(Graphic3d_AspectFillArea3d self, Aspect_HatchStyle const theStyle)

        Modifies the hatch type used when InteriorStyle is IS_HATCH
        @warning This method always creates a new handle for a given hatch style

        :type theStyle: OCC.wrapper.Aspect.Aspect_HatchStyle

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_SetHatchStyle(self, *args)


    def Values(self, *args):
        """
        Values(Graphic3d_AspectFillArea3d self, Quantity_Color theIntColor, Quantity_Color theEdgeColor)
        Values(Graphic3d_AspectFillArea3d self, Quantity_Color theIntColor, Quantity_Color theBackIntColor, Quantity_Color theEdgeColor)

        Returns the current values.

        :type theStyle: OCC.wrapper.Aspect.Aspect_InteriorStyle
        :type theIntColor: OCC.wrapper.Quantity.Quantity_Color
        :type theBackIntColor: OCC.wrapper.Quantity.Quantity_Color
        :type theEdgeColor: OCC.wrapper.Quantity.Quantity_Color
        :type theType: OCC.wrapper.Aspect.Aspect_TypeOfLine
        :type theWidth: float

        """
        return _Graphic3d.Graphic3d_AspectFillArea3d_Values(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_AspectFillArea3d
Graphic3d_AspectFillArea3d_swigregister = _Graphic3d.Graphic3d_AspectFillArea3d_swigregister
Graphic3d_AspectFillArea3d_swigregister(Graphic3d_AspectFillArea3d)

def Graphic3d_AspectFillArea3d_get_type_name(*args):
    """
    Graphic3d_AspectFillArea3d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_AspectFillArea3d_get_type_name(*args)

def Graphic3d_AspectFillArea3d_get_type_descriptor(*args):
    """
    Graphic3d_AspectFillArea3d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_AspectFillArea3d_get_type_descriptor(*args)

class Graphic3d_UniformValue_Graphic3d_Vec2(object):
    """Describes specific value of custom uniform variable."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, theValue):
        """Describes specific value of custom uniform variable."""
        this = _Graphic3d.new_Graphic3d_UniformValue_Graphic3d_Vec2(theValue)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def TypeID(self, *args):
        """
        TypeID(Graphic3d_UniformValue_Graphic3d_Vec2 self) -> Standard_Size

        Returns unique identifier of value type.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Graphic3d_UniformValue_Graphic3d_Vec2_TypeID(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_UniformValue_Graphic3d_Vec2
Graphic3d_UniformValue_Graphic3d_Vec2_swigregister = _Graphic3d.Graphic3d_UniformValue_Graphic3d_Vec2_swigregister
Graphic3d_UniformValue_Graphic3d_Vec2_swigregister(Graphic3d_UniformValue_Graphic3d_Vec2)


try:
	Graphic3d_UniformVec2 = Graphic3d_UniformValue_Graphic3d_Vec2
except NameError:
	pass # does not exist, probably ignored

class Handle_Graphic3d_Camera(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_Camera self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_Camera_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_Camera self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_Camera_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_Camera self, Graphic3d_Camera thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_Camera_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_Camera self, Handle_Graphic3d_Camera theHandle) -> Handle_Graphic3d_Camera
        assign(Handle_Graphic3d_Camera self, Graphic3d_Camera thePtr) -> Handle_Graphic3d_Camera
        assign(Handle_Graphic3d_Camera self, Handle_Graphic3d_Camera theHandle) -> Handle_Graphic3d_Camera

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_Camera_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_Camera self) -> Graphic3d_Camera

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_Camera_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_Camera self) -> Graphic3d_Camera

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_Camera___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_Camera self) -> Graphic3d_Camera

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_Camera___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_Camera___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_Camera___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_Camera(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_Camera_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_Camera

    def CopyMappingData(self, *args):
        """
        CopyMappingData(Handle_Graphic3d_Camera self, Handle_Graphic3d_Camera theOtherCamera)

        Initialize mapping related parameters from other camera handle.

        :type theOtherCamera: OCC.wrapper.Graphic3d.Handle_Graphic3d_Camera

        """
        return _Graphic3d.Handle_Graphic3d_Camera_CopyMappingData(self, *args)


    def CopyOrientationData(self, *args):
        """
        CopyOrientationData(Handle_Graphic3d_Camera self, Handle_Graphic3d_Camera theOtherCamera)

        Initialize orientation related parameters from other camera handle.

        :type theOtherCamera: OCC.wrapper.Graphic3d.Handle_Graphic3d_Camera

        """
        return _Graphic3d.Handle_Graphic3d_Camera_CopyOrientationData(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_Graphic3d_Camera self, Handle_Graphic3d_Camera theOther)

        Copy properties of another camera.
        @param theOther [in] the camera to copy from.

        :type theOther: OCC.wrapper.Graphic3d.Handle_Graphic3d_Camera

        """
        return _Graphic3d.Handle_Graphic3d_Camera_Copy(self, *args)


    def SetEye(self, *args):
        """
        SetEye(Handle_Graphic3d_Camera self, gp_Pnt theEye)

        Sets camera Eye position.
        @param theEye [in] the location of camera's Eye.

        :type theEye: OCC.wrapper.gp.gp_Pnt

        """
        return _Graphic3d.Handle_Graphic3d_Camera_SetEye(self, *args)


    def Eye(self, *args):
        """
        Get camera Eye position.
        @return camera eye location.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _Graphic3d.Handle_Graphic3d_Camera_Eye(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetCenter(self, *args):
        """
        SetCenter(Handle_Graphic3d_Camera self, gp_Pnt theCenter)

        Sets Center of the camera.
        @param theCenter [in] the point where the camera looks at.

        :type theCenter: OCC.wrapper.gp.gp_Pnt

        """
        return _Graphic3d.Handle_Graphic3d_Camera_SetCenter(self, *args)


    def Center(self, *args):
        """
        Get Center of the camera.
        @return the point where the camera looks at.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _Graphic3d.Handle_Graphic3d_Camera_Center(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetUp(self, *args):
        """
        SetUp(Handle_Graphic3d_Camera self, gp_Dir theUp)

        Sets camera Up direction vector, orthogonal to camera direction.
        @param theUp [in] the Up direction vector.

        :type theUp: OCC.wrapper.gp.gp_Dir

        """
        return _Graphic3d.Handle_Graphic3d_Camera_SetUp(self, *args)


    def OrthogonalizeUp(self, *args):
        """
        OrthogonalizeUp(Handle_Graphic3d_Camera self)

        Orthogonalize up direction vector.


        """
        return _Graphic3d.Handle_Graphic3d_Camera_OrthogonalizeUp(self, *args)


    def OrthogonalizedUp(self, *args):
        """
        OrthogonalizedUp(Handle_Graphic3d_Camera self) -> gp_Dir

        Return a copy of orthogonalized up direction vector.

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _Graphic3d.Handle_Graphic3d_Camera_OrthogonalizedUp(self, *args)


    def Up(self, *args):
        """
        Get camera Up direction vector.
        @return Camera's Up direction vector.

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        res = _Graphic3d.Handle_Graphic3d_Camera_Up(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAxialScale(self, *args):
        """
        SetAxialScale(Handle_Graphic3d_Camera self, gp_XYZ theAxialScale)

        Set camera axial scale.
        @param theAxialScale [in] the axial scale vector.

        :type theAxialScale: OCC.wrapper.gp.gp_XYZ

        """
        return _Graphic3d.Handle_Graphic3d_Camera_SetAxialScale(self, *args)


    def AxialScale(self, *args):
        """
        Get camera axial scale.
        @return Camera's axial scale.

        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        res = _Graphic3d.Handle_Graphic3d_Camera_AxialScale(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDistance(self, *args):
        """
        SetDistance(Handle_Graphic3d_Camera self, Standard_Real const theDistance)

        Set distance of Eye from camera Center.
        @param theDistance [in] the distance.

        :type theDistance: float

        """
        return _Graphic3d.Handle_Graphic3d_Camera_SetDistance(self, *args)


    def Distance(self, *args):
        """
        Distance(Handle_Graphic3d_Camera self) -> Standard_Real

        Get distance of Eye from camera Center.
        @return the distance.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Graphic3d.Handle_Graphic3d_Camera_Distance(self, *args)


    def SetDirection(self, *args):
        """
        SetDirection(Handle_Graphic3d_Camera self, gp_Dir theDir)

        Sets camera look direction.
        @param theDir [in] the direction.

        :type theDir: OCC.wrapper.gp.gp_Dir

        """
        return _Graphic3d.Handle_Graphic3d_Camera_SetDirection(self, *args)


    def Direction(self, *args):
        """
        Direction(Handle_Graphic3d_Camera self) -> gp_Dir

        Get camera look direction.
        @return camera look direction.

        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _Graphic3d.Handle_Graphic3d_Camera_Direction(self, *args)


    def SetScale(self, *args):
        """
        SetScale(Handle_Graphic3d_Camera self, Standard_Real const theScale)

        Sets camera scale. For orthographic projection the scale factor
        corresponds to parallel scale of view mapping  (i.e. size
        of viewport). For perspective camera scale is converted to
        distance. The scale specifies equal size of the view projection in
        both dimensions assuming that the aspect is 1.0. The projection height
        and width are specified with the scale and correspondingly multiplied
        by the aspect.
        @param theScale [in] the scale factor.

        :type theScale: float

        """
        return _Graphic3d.Handle_Graphic3d_Camera_SetScale(self, *args)


    def Scale(self, *args):
        """
        Scale(Handle_Graphic3d_Camera self) -> Standard_Real

        Get camera scale.
        @return camera scale factor.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Graphic3d.Handle_Graphic3d_Camera_Scale(self, *args)


    def SetProjectionType(self, *args):
        """
        SetProjectionType(Handle_Graphic3d_Camera self, Graphic3d_Camera::Projection const theProjection)

        Change camera projection type.
        When switching to perspective projection from orthographic one,
        the ZNear and ZFar are reset to default values (0.001, 3000.0)
        if less than 0.0.
        @param theProjectionType [in] the camera projection type.

        :type theProjection: Projection

        """
        return _Graphic3d.Handle_Graphic3d_Camera_SetProjectionType(self, *args)


    def ProjectionType(self, *args):
        """
        ProjectionType(Handle_Graphic3d_Camera self) -> Graphic3d_Camera::Projection

        @return camera projection type.

        :rtype: Projection

        """
        return _Graphic3d.Handle_Graphic3d_Camera_ProjectionType(self, *args)


    def IsOrthographic(self, *args):
        """
        IsOrthographic(Handle_Graphic3d_Camera self) -> Standard_Boolean

        Check that the camera projection is orthographic.
        @return boolean flag that indicates whether the camera's projection is
        orthographic or not.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Camera_IsOrthographic(self, *args)


    def IsStereo(self, *args):
        """
        IsStereo(Handle_Graphic3d_Camera self) -> Standard_Boolean

        Check whether the camera projection is stereo.
        Please note that stereo rendering is now implemented with support of
        Quad buffering.
        @return boolean flag indicating whether the stereographic L/R projection
        is chosen.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Camera_IsStereo(self, *args)


    def SetFOVy(self, *args):
        """
        SetFOVy(Handle_Graphic3d_Camera self, Standard_Real const theFOVy)

        Set Field Of View (FOV) in y axis for perspective projection.
        @param theFOVy [in] the FOV in degrees.

        :type theFOVy: float

        """
        return _Graphic3d.Handle_Graphic3d_Camera_SetFOVy(self, *args)


    def FOVy(self, *args):
        """
        FOVy(Handle_Graphic3d_Camera self) -> Standard_Real

        Get Field Of View (FOV) in y axis.
        @return the FOV value in degrees.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Graphic3d.Handle_Graphic3d_Camera_FOVy(self, *args)


    def ZFitAll(self, *args):
        """
        ZFitAll(Handle_Graphic3d_Camera self, Standard_Real const theScaleFactor, Bnd_Box theMinMax, Bnd_Box theGraphicBB) -> bool
        ZFitAll(Handle_Graphic3d_Camera self, Standard_Real const theScaleFactor, Bnd_Box theMinMax, Bnd_Box theGraphicBB)

        Change Z-min and Z-max planes of projection volume to match the displayed objects.

        :type theScaleFactor: float
        :type theMinMax: OCC.wrapper.Bnd.Bnd_Box
        :type theGraphicBB: OCC.wrapper.Bnd.Bnd_Box

        """
        return _Graphic3d.Handle_Graphic3d_Camera_ZFitAll(self, *args)


    def SetZRange(self, *args):
        """
        SetZRange(Handle_Graphic3d_Camera self, Standard_Real const theZNear, Standard_Real const theZFar)

        Change the Near and Far Z-clipping plane positions.
        For orthographic projection, theZNear, theZFar can be negative or positive.
        For perspective projection, only positive values are allowed.
        Program error exception is raised if non-positive values are
        specified for perspective projection or theZNear >= theZFar.
        @param theZNear [in] the distance of the plane from the Eye.
        @param theZFar [in] the distance of the plane from the Eye.

        :type theZNear: float
        :type theZFar: float

        """
        return _Graphic3d.Handle_Graphic3d_Camera_SetZRange(self, *args)


    def ZNear(self, *args):
        """
        ZNear(Handle_Graphic3d_Camera self) -> Standard_Real

        Get the Near Z-clipping plane position.
        @return the distance of the plane from the Eye.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Graphic3d.Handle_Graphic3d_Camera_ZNear(self, *args)


    def ZFar(self, *args):
        """
        ZFar(Handle_Graphic3d_Camera self) -> Standard_Real

        Get the Far Z-clipping plane position.
        @return the distance of the plane from the Eye.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Graphic3d.Handle_Graphic3d_Camera_ZFar(self, *args)


    def SetAspect(self, *args):
        """
        SetAspect(Handle_Graphic3d_Camera self, Standard_Real const theAspect)

        Changes width / height display ratio.
        @param theAspect [in] the display ratio.

        :type theAspect: float

        """
        return _Graphic3d.Handle_Graphic3d_Camera_SetAspect(self, *args)


    def Aspect(self, *args):
        """
        Aspect(Handle_Graphic3d_Camera self) -> Standard_Real

        Get camera display ratio.
        @return display ratio.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Graphic3d.Handle_Graphic3d_Camera_Aspect(self, *args)


    def SetZFocus(self, *args):
        """
        SetZFocus(Handle_Graphic3d_Camera self, Graphic3d_Camera::FocusType const theType, Standard_Real const theZFocus)

        Sets stereographic focus distance.
        @param theType [in] the focus definition type. Focus can be defined
        as absolute value or relatively to (as coefficient of) coefficient of
        camera focal length.
        @param theZFocus [in] the focus absolute value or coefficient depending
        on the passed definition type.

        :type theType: FocusType
        :type theZFocus: float

        """
        return _Graphic3d.Handle_Graphic3d_Camera_SetZFocus(self, *args)


    def ZFocus(self, *args):
        """
        ZFocus(Handle_Graphic3d_Camera self) -> Standard_Real

        Get stereographic focus value.
        @return absolute or relative stereographic focus value
        depending on its definition type.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Graphic3d.Handle_Graphic3d_Camera_ZFocus(self, *args)


    def ZFocusType(self, *args):
        """
        ZFocusType(Handle_Graphic3d_Camera self) -> Graphic3d_Camera::FocusType

        Get stereographic focus definition type.
        @return definition type used for stereographic focus.

        :rtype: FocusType

        """
        return _Graphic3d.Handle_Graphic3d_Camera_ZFocusType(self, *args)


    def SetIOD(self, *args):
        """
        SetIOD(Handle_Graphic3d_Camera self, Graphic3d_Camera::IODType const theType, Standard_Real const theIOD)

        Sets Intraocular distance.
        @param theType [in] the IOD definition type. IOD can be defined as
        absolute value or relatively to (as coefficient of) camera focal length.
        @param theIOD [in] the Intraocular distance.

        :type theType: IODType
        :type theIOD: float

        """
        return _Graphic3d.Handle_Graphic3d_Camera_SetIOD(self, *args)


    def IOD(self, *args):
        """
        IOD(Handle_Graphic3d_Camera self) -> Standard_Real

        Get Intraocular distance value.
        @return absolute or relative IOD value depending on its definition type.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Graphic3d.Handle_Graphic3d_Camera_IOD(self, *args)


    def GetIODType(self, *args):
        """
        GetIODType(Handle_Graphic3d_Camera self) -> Graphic3d_Camera::IODType

        Get Intraocular distance definition type.
        @return definition type used for Intraocular distance.

        :rtype: IODType

        """
        return _Graphic3d.Handle_Graphic3d_Camera_GetIODType(self, *args)


    def Tile(self, *args):
        """
        Get current tile.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_CameraTile

        """
        res = _Graphic3d.Handle_Graphic3d_Camera_Tile(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTile(self, *args):
        """
        SetTile(Handle_Graphic3d_Camera self, Graphic3d_CameraTile theTile)

        Sets the Tile defining the drawing sub-area within View.
        Note that tile defining a region outside the view boundaries is also valid - use method Graphic3d_CameraTile::Cropped() to assign a cropped copy.
        @param theTile tile definition

        :type theTile: OCC.wrapper.Graphic3d.Graphic3d_CameraTile

        """
        return _Graphic3d.Handle_Graphic3d_Camera_SetTile(self, *args)


    def Transform(self, *args):
        """
        Transform(Handle_Graphic3d_Camera self, gp_Trsf theTrsf)

        Transform orientation components of the camera:
        Eye, Up and Center points.
        @param theTrsf [in] the transformation to apply.

        :type theTrsf: OCC.wrapper.gp.gp_Trsf

        """
        return _Graphic3d.Handle_Graphic3d_Camera_Transform(self, *args)


    def ViewDimensions(self, *args):
        """
        ViewDimensions(Handle_Graphic3d_Camera self) -> gp_XYZ
        ViewDimensions(Handle_Graphic3d_Camera self, Standard_Real const theZValue) -> gp_XYZ

        Calculate view plane size at center point with specified Z offset
        and distance between ZFar and ZNear planes.
        @param theZValue [in] the distance from the eye in eye-to-center direction
        @return values in form of gp_Pnt (Width, Height, Depth).

        :type theZValue: float
        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _Graphic3d.Handle_Graphic3d_Camera_ViewDimensions(self, *args)


    def Frustum(self, *args):
        """
        Frustum(Handle_Graphic3d_Camera self, gp_Pln theLeft, gp_Pln theRight, gp_Pln theBottom, gp_Pln theTop, gp_Pln theNear, gp_Pln theFar)

        Calculate WCS frustum planes for the camera projection volume.
        Frustum is a convex volume determined by six planes directing
        inwards.
        The frustum planes are usually used as inputs for camera algorithms.
        Thus, if any changes to projection matrix calculation are necessary,
        the frustum planes calculation should be also touched.
        @param theLeft [out] the frustum plane for left side of view.
        @param theRight [out] the frustum plane for right side of view.
        @param theBottom [out] the frustum plane for bottom side of view.
        @param theTop [out] the frustum plane for top side of view.
        @param theNear [out] the frustum plane for near side of view.
        @param theFar [out] the frustum plane for far side of view.

        :type theLeft: OCC.wrapper.gp.gp_Pln
        :type theRight: OCC.wrapper.gp.gp_Pln
        :type theBottom: OCC.wrapper.gp.gp_Pln
        :type theTop: OCC.wrapper.gp.gp_Pln
        :type theNear: OCC.wrapper.gp.gp_Pln
        :type theFar: OCC.wrapper.gp.gp_Pln

        """
        return _Graphic3d.Handle_Graphic3d_Camera_Frustum(self, *args)


    def Project(self, *args):
        """
        Project(Handle_Graphic3d_Camera self, gp_Pnt thePnt) -> gp_Pnt

        Project point from world coordinate space to
        normalized device coordinates (mapping).
        @param thePnt [in] the 3D point in WCS.
        @return mapped point in NDC.

        :type thePnt: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Graphic3d.Handle_Graphic3d_Camera_Project(self, *args)


    def UnProject(self, *args):
        """
        UnProject(Handle_Graphic3d_Camera self, gp_Pnt thePnt) -> gp_Pnt

        Unproject point from normalized device coordinates
        to world coordinate space.
        @param thePnt [in] the NDC point.
        @return 3D point in WCS.

        :type thePnt: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Graphic3d.Handle_Graphic3d_Camera_UnProject(self, *args)


    def ConvertView2Proj(self, *args):
        """
        ConvertView2Proj(Handle_Graphic3d_Camera self, gp_Pnt thePnt) -> gp_Pnt

        Convert point from view coordinate space to
        projection coordinate space.
        @param thePnt [in] the point in VCS.
        @return point in NDC.

        :type thePnt: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Graphic3d.Handle_Graphic3d_Camera_ConvertView2Proj(self, *args)


    def ConvertProj2View(self, *args):
        """
        ConvertProj2View(Handle_Graphic3d_Camera self, gp_Pnt thePnt) -> gp_Pnt

        Convert point from projection coordinate space
        to view coordinate space.
        @param thePnt [in] the point in NDC.
        @return point in VCS.

        :type thePnt: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Graphic3d.Handle_Graphic3d_Camera_ConvertProj2View(self, *args)


    def ConvertWorld2View(self, *args):
        """
        ConvertWorld2View(Handle_Graphic3d_Camera self, gp_Pnt thePnt) -> gp_Pnt

        Convert point from world coordinate space to
        view coordinate space.
        @param thePnt [in] the 3D point in WCS.
        @return point in VCS.

        :type thePnt: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Graphic3d.Handle_Graphic3d_Camera_ConvertWorld2View(self, *args)


    def ConvertView2World(self, *args):
        """
        ConvertView2World(Handle_Graphic3d_Camera self, gp_Pnt thePnt) -> gp_Pnt

        Convert point from view coordinate space to
        world coordinates.
        @param thePnt [in] the 3D point in VCS.
        @return point in WCS.

        :type thePnt: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _Graphic3d.Handle_Graphic3d_Camera_ConvertView2World(self, *args)


    def WorldViewProjState(self, *args):
        """
        @return projection modification state of the camera.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_WorldViewProjState

        """
        res = _Graphic3d.Handle_Graphic3d_Camera_WorldViewProjState(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ProjectionState(self, *args):
        """
        ProjectionState(Handle_Graphic3d_Camera self) -> Standard_Size

        Returns modification state of camera projection matrix

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Handle_Graphic3d_Camera_ProjectionState(self, *args)


    def WorldViewState(self, *args):
        """
        WorldViewState(Handle_Graphic3d_Camera self) -> Standard_Size

        Returns modification state of camera world view transformation matrix.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Handle_Graphic3d_Camera_WorldViewState(self, *args)


    def OrientationMatrix(self, *args):
        """
        Get orientation matrix.
        @return camera orientation matrix.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Mat4d

        """
        res = _Graphic3d.Handle_Graphic3d_Camera_OrientationMatrix(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def OrientationMatrixF(self, *args):
        """
        Get orientation matrix of Standard_ShortReal precision.
        @return camera orientation matrix.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Mat4

        """
        res = _Graphic3d.Handle_Graphic3d_Camera_OrientationMatrixF(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ProjectionMatrix(self, *args):
        """
        Get monographic or middle point projection matrix used for monographic
        rendering and for point projection / unprojection.
        @return monographic projection matrix.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Mat4d

        """
        res = _Graphic3d.Handle_Graphic3d_Camera_ProjectionMatrix(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ProjectionMatrixF(self, *args):
        """
        Get monographic or middle point projection matrix of Standard_ShortReal precision used for monographic
        rendering and for point projection / unprojection.
        @return monographic projection matrix.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Mat4

        """
        res = _Graphic3d.Handle_Graphic3d_Camera_ProjectionMatrixF(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ProjectionStereoLeft(self, *args):
        """
        @return stereographic matrix computed for left eye. Please note
        that this method is used for rendering for <i>Projection_Stereo</i>.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Mat4d

        """
        res = _Graphic3d.Handle_Graphic3d_Camera_ProjectionStereoLeft(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ProjectionStereoLeftF(self, *args):
        """
        @return stereographic matrix of Standard_ShortReal precision computed for left eye.
        Please note that this method is used for rendering for <i>Projection_Stereo</i>.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Mat4

        """
        res = _Graphic3d.Handle_Graphic3d_Camera_ProjectionStereoLeftF(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ProjectionStereoRight(self, *args):
        """
        @return stereographic matrix computed for right eye. Please note
        that this method is used for rendering for <i>Projection_Stereo</i>.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Mat4d

        """
        res = _Graphic3d.Handle_Graphic3d_Camera_ProjectionStereoRight(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ProjectionStereoRightF(self, *args):
        """
        @return stereographic matrix of Standard_ShortReal precision computed for right eye.
        Please note that this method is used for rendering for <i>Projection_Stereo</i>.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Mat4

        """
        res = _Graphic3d.Handle_Graphic3d_Camera_ProjectionStereoRightF(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def InvalidateProjection(self, *args):
        """
        InvalidateProjection(Handle_Graphic3d_Camera self)

        Invalidate state of projection matrix.
        The matrix will be updated on request.


        """
        return _Graphic3d.Handle_Graphic3d_Camera_InvalidateProjection(self, *args)


    def InvalidateOrientation(self, *args):
        """
        InvalidateOrientation(Handle_Graphic3d_Camera self)

        Invalidate orientation matrix.
        The matrix will be updated on request.


        """
        return _Graphic3d.Handle_Graphic3d_Camera_InvalidateOrientation(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_Camera self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_Camera_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_Camera_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_Camera_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_Camera self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_Camera_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_Camera self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_Camera self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Camera_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_Camera self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_Camera self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Camera_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_Camera self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_Camera_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_Camera self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Camera_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_Camera self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_Camera_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_Camera self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Camera_DecrementRefCounter(self, *args)

Handle_Graphic3d_Camera_swigregister = _Graphic3d.Handle_Graphic3d_Camera_swigregister
Handle_Graphic3d_Camera_swigregister(Handle_Graphic3d_Camera)

def Handle_Graphic3d_Camera_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_Camera_DownCast(thing)
Handle_Graphic3d_Camera_DownCast = _Graphic3d.Handle_Graphic3d_Camera_DownCast

class Handle_Graphic3d_PresentationAttributes(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_PresentationAttributes self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_PresentationAttributes self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_PresentationAttributes self, Graphic3d_PresentationAttributes thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_PresentationAttributes self, Handle_Graphic3d_PresentationAttributes theHandle) -> Handle_Graphic3d_PresentationAttributes
        assign(Handle_Graphic3d_PresentationAttributes self, Graphic3d_PresentationAttributes thePtr) -> Handle_Graphic3d_PresentationAttributes
        assign(Handle_Graphic3d_PresentationAttributes self, Handle_Graphic3d_PresentationAttributes theHandle) -> Handle_Graphic3d_PresentationAttributes

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_PresentationAttributes self) -> Graphic3d_PresentationAttributes

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_PresentationAttributes self) -> Graphic3d_PresentationAttributes

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_PresentationAttributes self) -> Graphic3d_PresentationAttributes

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_PresentationAttributes___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_PresentationAttributes(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_PresentationAttributes_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_PresentationAttributes

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_PresentationAttributes self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_PresentationAttributes_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_PresentationAttributes_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Method(self, *args):
        """
        Method(Handle_Graphic3d_PresentationAttributes self) -> Aspect_TypeOfHighlightMethod

        Returns highlight method, Aspect_TOHM_COLOR by default.

        :rtype: OCC.wrapper.Aspect.Aspect_TypeOfHighlightMethod

        """
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes_Method(self, *args)


    def SetMethod(self, *args):
        """
        SetMethod(Handle_Graphic3d_PresentationAttributes self, Aspect_TypeOfHighlightMethod const theMethod)

        Changes highlight method to the given one.

        :type theMethod: OCC.wrapper.Aspect.Aspect_TypeOfHighlightMethod

        """
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes_SetMethod(self, *args)


    def ColorRGBA(self, *args):
        """
        Returns basic presentation color (including alpha channel).

        :rtype: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        res = _Graphic3d.Handle_Graphic3d_PresentationAttributes_ColorRGBA(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Color(self, *args):
        """
        Returns basic presentation color, Quantity_NOC_WHITE by default.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Handle_Graphic3d_PresentationAttributes_Color(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetColor(self, *args):
        """
        SetColor(Handle_Graphic3d_PresentationAttributes self, Quantity_Color theColor)

        Sets basic presentation color (RGB components, does not modifies transparency).

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes_SetColor(self, *args)


    def Transparency(self, *args):
        """
        Transparency(Handle_Graphic3d_PresentationAttributes self) -> Standard_ShortReal

        Returns basic presentation transparency (0 - opaque, 1 - fully transparent), 0 by default (opaque).

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes_Transparency(self, *args)


    def SetTransparency(self, *args):
        """
        SetTransparency(Handle_Graphic3d_PresentationAttributes self, Standard_ShortReal const theTranspCoef)

        Sets basic presentation transparency (0 - opaque, 1 - fully transparent).

        :type theTranspCoef: float

        """
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes_SetTransparency(self, *args)


    def ZLayer(self, *args):
        """
        ZLayer(Handle_Graphic3d_PresentationAttributes self) -> Graphic3d_ZLayerId

        Returns presentation Zlayer, Graphic3d_ZLayerId_Default by default.
        Graphic3d_ZLayerId_UNKNOWN means undefined (a layer of main presentation to be used).

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes_ZLayer(self, *args)


    def SetZLayer(self, *args):
        """
        SetZLayer(Handle_Graphic3d_PresentationAttributes self, Graphic3d_ZLayerId const theLayer)

        Sets presentation Zlayer.

        :type theLayer: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes_SetZLayer(self, *args)


    def DisplayMode(self, *args):
        """
        DisplayMode(Handle_Graphic3d_PresentationAttributes self) -> Standard_Integer

        Returns display mode, 0 by default.
        -1 means undefined (main display mode of presentation to be used).

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes_DisplayMode(self, *args)


    def SetDisplayMode(self, *args):
        """
        SetDisplayMode(Handle_Graphic3d_PresentationAttributes self, Standard_Integer const theMode)

        Sets display mode.

        :type theMode: int

        """
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes_SetDisplayMode(self, *args)


    def BasicFillAreaAspect(self, *args):
        """
        Return basic presentation fill area aspect, NULL by default.
        When set, might be used instead of Color() property.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectFillArea3d

        """
        res = _Graphic3d.Handle_Graphic3d_PresentationAttributes_BasicFillAreaAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetBasicFillAreaAspect(self, *args):
        """
        SetBasicFillAreaAspect(Handle_Graphic3d_PresentationAttributes self, Handle_Graphic3d_AspectFillArea3d theAspect)

        Sets basic presentation fill area aspect.

        :type theAspect: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectFillArea3d

        """
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes_SetBasicFillAreaAspect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_PresentationAttributes self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_PresentationAttributes self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_PresentationAttributes self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_PresentationAttributes self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_PresentationAttributes self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_PresentationAttributes self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_PresentationAttributes self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_PresentationAttributes self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_PresentationAttributes self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_PresentationAttributes_DecrementRefCounter(self, *args)

Handle_Graphic3d_PresentationAttributes_swigregister = _Graphic3d.Handle_Graphic3d_PresentationAttributes_swigregister
Handle_Graphic3d_PresentationAttributes_swigregister(Handle_Graphic3d_PresentationAttributes)

def Handle_Graphic3d_PresentationAttributes_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_PresentationAttributes_DownCast(thing)
Handle_Graphic3d_PresentationAttributes_DownCast = _Graphic3d.Handle_Graphic3d_PresentationAttributes_DownCast

class Graphic3d_UniformValue_Graphic3d_Vec3i(object):
    """Describes specific value of custom uniform variable."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, theValue):
        """Describes specific value of custom uniform variable."""
        this = _Graphic3d.new_Graphic3d_UniformValue_Graphic3d_Vec3i(theValue)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def TypeID(self, *args):
        """
        TypeID(Graphic3d_UniformValue_Graphic3d_Vec3i self) -> Standard_Size

        Returns unique identifier of value type.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Graphic3d_UniformValue_Graphic3d_Vec3i_TypeID(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_UniformValue_Graphic3d_Vec3i
Graphic3d_UniformValue_Graphic3d_Vec3i_swigregister = _Graphic3d.Graphic3d_UniformValue_Graphic3d_Vec3i_swigregister
Graphic3d_UniformValue_Graphic3d_Vec3i_swigregister(Graphic3d_UniformValue_Graphic3d_Vec3i)


try:
	Graphic3d_UniformVec3i = Graphic3d_UniformValue_Graphic3d_Vec3i
except NameError:
	pass # does not exist, probably ignored

class Graphic3d_CTexture(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """__init__(Graphic3d_CTexture self) -> Graphic3d_CTexture"""
        this = _Graphic3d.new_Graphic3d_CTexture(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_CTexture
Graphic3d_CTexture_swigregister = _Graphic3d.Graphic3d_CTexture_swigregister
Graphic3d_CTexture_swigregister(Graphic3d_CTexture)

class NCollection_Sequence_Handle_Graphic3d_ShaderAttribute(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self) -> NCollection_Sequence< opencascade::handle< Graphic3d_ShaderAttribute > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self) -> NCollection_Sequence< opencascade::handle< Graphic3d_ShaderAttribute > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self) -> NCollection_Sequence< opencascade::handle< Graphic3d_ShaderAttribute > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self) -> NCollection_Sequence< opencascade::handle< Graphic3d_ShaderAttribute > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _Graphic3d.new_NCollection_Sequence_Handle_Graphic3d_ShaderAttribute(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self)

        Reverse sequence


        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self, NCollection_Sequence_Handle_Graphic3d_ShaderAttribute theOther) -> NCollection_Sequence_Handle_Graphic3d_ShaderAttribute

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self, NCollection_Sequence_Handle_Graphic3d_ShaderAttribute theOther) -> NCollection_Sequence_Handle_Graphic3d_ShaderAttribute

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self, NCollection_Sequence< opencascade::handle< Graphic3d_ShaderAttribute > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self, Handle_Graphic3d_ShaderAttribute theItem)
        Append(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self, NCollection_Sequence_Handle_Graphic3d_ShaderAttribute theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self, Handle_Graphic3d_ShaderAttribute theItem)
        Prepend(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self, NCollection_Sequence_Handle_Graphic3d_ShaderAttribute theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self, Standard_Integer const theIndex, Handle_Graphic3d_ShaderAttribute theItem)
        InsertBefore(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Graphic3d_ShaderAttribute theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self, NCollection_Sequence< opencascade::handle< Graphic3d_ShaderAttribute > >::Iterator & thePosition, Handle_Graphic3d_ShaderAttribute theItem)
        InsertAfter(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Graphic3d_ShaderAttribute theSeq)
        InsertAfter(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self, Standard_Integer const theIndex, Handle_Graphic3d_ShaderAttribute theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Graphic3d_ShaderAttribute theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self) -> Handle_Graphic3d_ShaderAttribute

        First item access

        :rtype: TheItemType &

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self) -> Handle_Graphic3d_ShaderAttribute

        Last item access

        :rtype: TheItemType &

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self, Standard_Integer const theIndex) -> Handle_Graphic3d_ShaderAttribute

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute self, Standard_Integer const theIndex, Handle_Graphic3d_ShaderAttribute theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_SetValue(self, *args)


    def __iter__(self):
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute___iter__(self)
    __swig_destroy__ = _Graphic3d.delete_NCollection_Sequence_Handle_Graphic3d_ShaderAttribute
NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_swigregister = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_swigregister
NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_swigregister(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute)

def NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_delNode(*args):
    """
    NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_delNode(*args)

class NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _Graphic3d.new_NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Graphic3d.delete_NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_IteratorHelper

    def __next__(self):
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_IteratorHelper___next__(self)
NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_IteratorHelper_swigregister = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_IteratorHelper_swigregister
NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_IteratorHelper_swigregister(NCollection_Sequence_Handle_Graphic3d_ShaderAttribute_IteratorHelper)


try:
	Graphic3d_ShaderAttributeList = NCollection_Sequence_Handle_Graphic3d_ShaderAttribute
except NameError:
	pass # does not exist, probably ignored

class Graphic3d_ArrayOfPolylines(Graphic3d_ArrayOfPrimitives):
    """Contains polylines array definition."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_ArrayOfPolylines
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_ArrayOfPolylines(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_ArrayOfPolylines_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_ArrayOfPolylines_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_ArrayOfPolylines_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Graphic3d_ArrayOfPolylines self, Standard_Integer const theMaxVertexs, Standard_Integer const theMaxBounds=0, Standard_Integer const theMaxEdges=0, Standard_Boolean const theHasVColors, Standard_Boolean const theHasBColors) -> Graphic3d_ArrayOfPolylines

        Creates an array of polylines, a polyline can be filled as:
        1) Creating a single polyline defined with his vertexes, i.e:
        @code
        myArray = Graphic3d_ArrayOfPolylines (7);
        myArray->AddVertex (x1, y1, z1);
        ....
        myArray->AddVertex (x7, y7, z7);
        @endcode
        2) Creating separate polylines defined with a predefined number of bounds and the number of vertex per bound, i.e:
        @code
        myArray = Graphic3d_ArrayOfPolylines (7, 2);
        myArray->AddBound (4);
        myArray->AddVertex (x1, y1, z1);
        ....
        myArray->AddVertex (x4, y4, z4);
        myArray->AddBound (3);
        myArray->AddVertex (x5, y5, z5);
        ....
        myArray->AddVertex (x7, y7, z7);
        @endcode
        3) Creating a single indexed polyline defined with his vertex and edges, i.e:
        @code
        myArray = Graphic3d_ArrayOfPolylines (4, 0, 6);
        myArray->AddVertex (x1, y1, z1);
        ....
        myArray->AddVertex (x4, y4, z4);
        myArray->AddEdge (1);
        myArray->AddEdge (2);
        myArray->AddEdge (3);
        myArray->AddEdge (1);
        myArray->AddEdge (2);
        myArray->AddEdge (4);
        @endcode
        4) creating separate polylines defined with a predefined number of bounds and the number of edges per bound, i.e:
        @code
        myArray = Graphic3d_ArrayOfPolylines (6, 4, 14);
        myArray->AddBound (3);
        myArray->AddVertex (x1, y1, z1);
        myArray->AddVertex (x2, y2, z2);
        myArray->AddVertex (x3, y3, z3);
        myArray->AddEdge (1);
        myArray->AddEdge (2);
        myArray->AddEdge (3);
        myArray->AddBound (3);
        myArray->AddVertex (x4, y4, z4);
        myArray->AddVertex (x5, y5, z5);
        myArray->AddVertex (x6, y6, z6);
        myArray->AddEdge (4);
        myArray->AddEdge (5);
        myArray->AddEdge (6);
        myArray->AddBound (4);
        myArray->AddEdge (2);
        myArray->AddEdge (3);
        myArray->AddEdge (5);
        myArray->AddEdge (6);
        myArray->AddBound (4);
        myArray->AddEdge (1);
        myArray->AddEdge (3);
        myArray->AddEdge (5);
        myArray->AddEdge (4);
        @endcode
        @param theMaxVertexs defines the maximum allowed vertex number in the array
        @param theMaxBounds  defines the maximum allowed bound  number in the array
        @param theMaxEdges   defines the maximum allowed edge   number in the array
        @param theHasVColors when TRUE AddVertex(Point,Color) or AddVertex(Point,Normal,Color) should be used to specify per-vertex color values
        @param theHasBColors when TRUE AddBound(number,Color) should be used to specify sub-group color

        :type theMaxVertexs: int
        :type theMaxBounds: int
        :type theMaxEdges: int
        :type theHasVColors: bool
        :type theHasBColors: bool

        """
        this = _Graphic3d.new_Graphic3d_ArrayOfPolylines(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle



    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ArrayOfPolylines
Graphic3d_ArrayOfPolylines_swigregister = _Graphic3d.Graphic3d_ArrayOfPolylines_swigregister
Graphic3d_ArrayOfPolylines_swigregister(Graphic3d_ArrayOfPolylines)

def Graphic3d_ArrayOfPolylines_get_type_name(*args):
    """
    Graphic3d_ArrayOfPolylines_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_ArrayOfPolylines_get_type_name(*args)

def Graphic3d_ArrayOfPolylines_get_type_descriptor(*args):
    """
    Graphic3d_ArrayOfPolylines_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_ArrayOfPolylines_get_type_descriptor(*args)

class Graphic3d_ClipPlane(Standard.Standard_Transient):
    """
    Container for properties describing graphic driver clipping planes.
    It is up to application to create instances of this class and specify its
    properties. The instances are passed into graphic driver or other facilities
    that implement clipping features (e.g. selection).
    Depending on usage context the class can be used to specify:
    - Global clipping applied over the whole scene.
    - Object-level clipping applied for each particular object.
    The plane equation is specified in "world" coordinate system.
    Please note that the set of planes can define convex clipping volume.
    Be aware that number of clip planes supported by OpenGl is implementation
    dependent: at least 6 planes are available. Thus, take into account
    number of clipping planes passed for rendering: the object planes plus
    the view defined ones.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_ClipPlane
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_ClipPlane(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Graphic3d_ClipPlane self) -> Graphic3d_ClipPlane
        __init__(Graphic3d_ClipPlane self, Graphic3d_ClipPlane theOther) -> Graphic3d_ClipPlane
        __init__(Graphic3d_ClipPlane self, Graphic3d_ClipPlane::Equation const & theEquation) -> Graphic3d_ClipPlane
        __init__(Graphic3d_ClipPlane self, gp_Pln thePlane) -> Graphic3d_ClipPlane

        Construct clip plane from the passed geometrical definition.
        By default the plane is on, capping is turned off.
        @param thePlane [in] the plane.

        :type thePlane: OCC.wrapper.gp.gp_Pln

        """
        this = _Graphic3d.new_Graphic3d_ClipPlane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetEquation(self, *args):
        """
        SetEquation(Graphic3d_ClipPlane self, gp_Pln thePlane)
        SetEquation(Graphic3d_ClipPlane self, Graphic3d_ClipPlane::Equation const & theEquation)

        Set 4-component equation vector for clipping plane.
        The equation is specified in "world" coordinate system.
        @param theEquation [in] the XYZW (or "ABCD") equation vector.

        :type theEquation: Equation

        """
        return _Graphic3d.Graphic3d_ClipPlane_SetEquation(self, *args)


    def GetEquation(self, *args):
        """
        Get 4-component equation vector for clipping plane.
        @return clipping plane equation vector.

        :rtype: Equation

        """
        res = _Graphic3d.Graphic3d_ClipPlane_GetEquation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsOn(self, *args):
        """
        IsOn(Graphic3d_ClipPlane self) -> Standard_Boolean

        Check that the clipping plane is turned on.
        @return boolean flag indicating whether the plane is in on or off state.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_ClipPlane_IsOn(self, *args)


    def SetOn(self, *args):
        """
        SetOn(Graphic3d_ClipPlane self, Standard_Boolean const theIsOn)

        Change state of the clipping plane.
        @param theIsOn [in] the flag specifying whether the graphic driver
        clipping by this plane should be turned on or off.

        :type theIsOn: bool

        """
        return _Graphic3d.Graphic3d_ClipPlane_SetOn(self, *args)


    def SetCapping(self, *args):
        """
        SetCapping(Graphic3d_ClipPlane self, Standard_Boolean const theIsOn)

        Change state of capping surface rendering.
        @param theIsOn [in] the flag specifying whether the graphic driver should
        perform rendering of capping surface produced by this plane. The graphic
        driver produces this surface for convex graphics by means of stencil-test
        and multi-pass rendering.

        :type theIsOn: bool

        """
        return _Graphic3d.Graphic3d_ClipPlane_SetCapping(self, *args)


    def IsCapping(self, *args):
        """
        IsCapping(Graphic3d_ClipPlane self) -> Standard_Boolean

        Check state of capping surface rendering.
        @return true (turned on) or false depending on the state.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_ClipPlane_IsCapping(self, *args)


    def ToPlane(self, *args):
        """
        Get geometrical definition.
        @return geometrical definition of clipping plane

        :rtype: OCC.wrapper.gp.gp_Pln

        """
        res = _Graphic3d.Graphic3d_ClipPlane_ToPlane(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clone(self, *args):
        """
        Clone(Graphic3d_ClipPlane self) -> Handle_Graphic3d_ClipPlane

        Clone plane. Virtual method to simplify copying procedure if plane
        class is redefined at application level to add specific fields to it
        e.g. id, name, etc.
        @return new instance of clipping plane with same properties and attributes.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ClipPlane

        """
        return _Graphic3d.Graphic3d_ClipPlane_Clone(self, *args)


    def SetCappingMaterial(self, *args):
        """
        SetCappingMaterial(Graphic3d_ClipPlane self, Graphic3d_MaterialAspect theMat)

        Set material for rendering capping surface.
        @param theMat [in] the material.

        :type theMat: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect

        """
        return _Graphic3d.Graphic3d_ClipPlane_SetCappingMaterial(self, *args)


    def CappingMaterial(self, *args):
        """
        @return capping material.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect

        """
        res = _Graphic3d.Graphic3d_ClipPlane_CappingMaterial(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetCappingTexture(self, *args):
        """
        SetCappingTexture(Graphic3d_ClipPlane self, Handle_Graphic3d_TextureMap theTexture)

        Set texture to be applied on capping surface.
        @param theTexture [in] the texture.

        :type theTexture: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureMap

        """
        return _Graphic3d.Graphic3d_ClipPlane_SetCappingTexture(self, *args)


    def CappingTexture(self, *args):
        """
        CappingTexture(Graphic3d_ClipPlane self) -> Handle_Graphic3d_TextureMap

        @return capping texture map.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureMap

        """
        return _Graphic3d.Graphic3d_ClipPlane_CappingTexture(self, *args)


    def SetCappingHatch(self, *args):
        """
        SetCappingHatch(Graphic3d_ClipPlane self, Aspect_HatchStyle const theStyle)

        Set hatch style (stipple) and turn hatching on.
        @param theStyle [in] the hatch style.

        :type theStyle: OCC.wrapper.Aspect.Aspect_HatchStyle

        """
        return _Graphic3d.Graphic3d_ClipPlane_SetCappingHatch(self, *args)


    def CappingHatch(self, *args):
        """
        CappingHatch(Graphic3d_ClipPlane self) -> Aspect_HatchStyle

        @return hatching style.

        :rtype: OCC.wrapper.Aspect.Aspect_HatchStyle

        """
        return _Graphic3d.Graphic3d_ClipPlane_CappingHatch(self, *args)


    def SetCappingCustomHatch(self, *args):
        """
        SetCappingCustomHatch(Graphic3d_ClipPlane self, Handle_Graphic3d_HatchStyle theStyle)

        Set custom hatch style (stipple) and turn hatching on.
        @param theStyle [in] the hatch pattern.

        :type theStyle: OCC.wrapper.Graphic3d.Handle_Graphic3d_HatchStyle

        """
        return _Graphic3d.Graphic3d_ClipPlane_SetCappingCustomHatch(self, *args)


    def CappingCustomHatch(self, *args):
        """
        @return hatching style.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_HatchStyle

        """
        res = _Graphic3d.Graphic3d_ClipPlane_CappingCustomHatch(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetCappingHatchOn(self, *args):
        """
        SetCappingHatchOn(Graphic3d_ClipPlane self)

        Turn on hatching.


        """
        return _Graphic3d.Graphic3d_ClipPlane_SetCappingHatchOn(self, *args)


    def SetCappingHatchOff(self, *args):
        """
        SetCappingHatchOff(Graphic3d_ClipPlane self)

        Turn off hatching.


        """
        return _Graphic3d.Graphic3d_ClipPlane_SetCappingHatchOff(self, *args)


    def IsHatchOn(self, *args):
        """
        IsHatchOn(Graphic3d_ClipPlane self) -> Standard_Boolean

        @return True if hatching mask is turned on.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_ClipPlane_IsHatchOn(self, *args)


    def GetId(self, *args):
        """
        This ID is used for managing associated resources in graphical driver.
        The clip plane can be assigned within a range of IO which can be
        displayed in separate OpenGl contexts. For each of the context an associated
        OpenGl resource for graphical aspects should be created and kept.
        The resources are stored in graphical driver for each of individual groups
        of shared context under the clip plane identifier.
        @return clip plane resource identifier string.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Graphic3d_ClipPlane_GetId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CappingAspect(self, *args):
        """
        Return capping aspect.
        @return capping surface rendering aspect.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectFillArea3d

        """
        res = _Graphic3d.Graphic3d_ClipPlane_CappingAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetCappingAspect(self, *args):
        """
        SetCappingAspect(Graphic3d_ClipPlane self, Handle_Graphic3d_AspectFillArea3d theAspect)

        Assign capping aspect.

        :type theAspect: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectFillArea3d

        """
        return _Graphic3d.Graphic3d_ClipPlane_SetCappingAspect(self, *args)


    def ToUseObjectMaterial(self, *args):
        """
        ToUseObjectMaterial(Graphic3d_ClipPlane self) -> bool

        Flag indicating whether material for capping plane should be taken from object.
        Default value: FALSE (use dedicated capping plane material).

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_ClipPlane_ToUseObjectMaterial(self, *args)


    def SetUseObjectMaterial(self, *args):
        """
        SetUseObjectMaterial(Graphic3d_ClipPlane self, bool theToUse)

        Set flag for controlling the source of capping plane material.

        :type theToUse: bool

        """
        return _Graphic3d.Graphic3d_ClipPlane_SetUseObjectMaterial(self, *args)


    def ToUseObjectTexture(self, *args):
        """
        ToUseObjectTexture(Graphic3d_ClipPlane self) -> bool

        Flag indicating whether texture for capping plane should be taken from object.
        Default value: FALSE.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_ClipPlane_ToUseObjectTexture(self, *args)


    def SetUseObjectTexture(self, *args):
        """
        SetUseObjectTexture(Graphic3d_ClipPlane self, bool theToUse)

        Set flag for controlling the source of capping plane texture.

        :type theToUse: bool

        """
        return _Graphic3d.Graphic3d_ClipPlane_SetUseObjectTexture(self, *args)


    def ToUseObjectShader(self, *args):
        """
        ToUseObjectShader(Graphic3d_ClipPlane self) -> bool

        Flag indicating whether shader program for capping plane should be taken from object.
        Default value: FALSE.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_ClipPlane_ToUseObjectShader(self, *args)


    def SetUseObjectShader(self, *args):
        """
        SetUseObjectShader(Graphic3d_ClipPlane self, bool theToUse)

        Set flag for controlling the source of capping plane shader program.

        :type theToUse: bool

        """
        return _Graphic3d.Graphic3d_ClipPlane_SetUseObjectShader(self, *args)


    def ToUseObjectProperties(self, *args):
        """
        ToUseObjectProperties(Graphic3d_ClipPlane self) -> bool

        Return true if some fill area aspect properties should be taken from object.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_ClipPlane_ToUseObjectProperties(self, *args)


    def MCountEquation(self, *args):
        """
        MCountEquation(Graphic3d_ClipPlane self) -> unsigned int

        @return modification counter for equation.

        :rtype: unsigned int

        """
        return _Graphic3d.Graphic3d_ClipPlane_MCountEquation(self, *args)


    def MCountAspect(self, *args):
        """
        MCountAspect(Graphic3d_ClipPlane self) -> unsigned int

        @return modification counter for aspect.

        :rtype: unsigned int

        """
        return _Graphic3d.Graphic3d_ClipPlane_MCountAspect(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_ClipPlane_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_ClipPlane_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_ClipPlane_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ClipPlane
Graphic3d_ClipPlane_swigregister = _Graphic3d.Graphic3d_ClipPlane_swigregister
Graphic3d_ClipPlane_swigregister(Graphic3d_ClipPlane)

def Graphic3d_ClipPlane_get_type_name(*args):
    """
    Graphic3d_ClipPlane_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_ClipPlane_get_type_name(*args)

def Graphic3d_ClipPlane_get_type_descriptor(*args):
    """
    Graphic3d_ClipPlane_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_ClipPlane_get_type_descriptor(*args)

class Handle_Graphic3d_Group(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_Group self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_Group_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_Group self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_Group_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_Group self, Graphic3d_Group thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_Group_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_Group self, Handle_Graphic3d_Group theHandle) -> Handle_Graphic3d_Group
        assign(Handle_Graphic3d_Group self, Graphic3d_Group thePtr) -> Handle_Graphic3d_Group
        assign(Handle_Graphic3d_Group self, Handle_Graphic3d_Group theHandle) -> Handle_Graphic3d_Group

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_Group_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_Group self) -> Graphic3d_Group

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_Group_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_Group self) -> Graphic3d_Group

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_Group___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_Group self) -> Graphic3d_Group

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_Group___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_Group___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_Group___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_Group(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_Group_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_Group

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_Group self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_Group_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_Group_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_Group_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clear(self, *args):
        """
        Clear(Handle_Graphic3d_Group self, Standard_Boolean const theUpdateStructureMgr)

        Supress all primitives and attributes of <me>.
        To clear group without update in Graphic3d_StructureManager
        pass Standard_False as <theUpdateStructureMgr>. This
        used on context and viewer destruction, when the pointer
        to structure manager in Graphic3d_Structure could be
        already released (pointers are used here to avoid handle
        cross-reference);

        :type theUpdateStructureMgr: bool

        """
        return _Graphic3d.Handle_Graphic3d_Group_Clear(self, *args)


    def Remove(self, *args):
        """
        Remove(Handle_Graphic3d_Group self)

        Supress the group <me> in the structure.
        Warning: No more graphic operations in <me> after this call.
        Modifies the current modelling transform persistence (pan, zoom or rotate)
        Get the current modelling transform persistence (pan, zoom or rotate)


        """
        return _Graphic3d.Handle_Graphic3d_Group_Remove(self, *args)


    def LineAspect(self, *args):
        """
        LineAspect(Handle_Graphic3d_Group self) -> Handle_Graphic3d_AspectLine3d

        Return line aspect.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectLine3d

        """
        return _Graphic3d.Handle_Graphic3d_Group_LineAspect(self, *args)


    def SetGroupPrimitivesAspect(self, *args):
        """
        SetGroupPrimitivesAspect(Handle_Graphic3d_Group self, Handle_Graphic3d_AspectLine3d theAspect)
        SetGroupPrimitivesAspect(Handle_Graphic3d_Group self, Handle_Graphic3d_AspectFillArea3d theAspect)
        SetGroupPrimitivesAspect(Handle_Graphic3d_Group self, Handle_Graphic3d_AspectText3d theAspect)
        SetGroupPrimitivesAspect(Handle_Graphic3d_Group self, Handle_Graphic3d_AspectMarker3d theAspect)

        Modifies the context for all the marker primitives of the group.

        :type theAspect: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectMarker3d

        """
        return _Graphic3d.Handle_Graphic3d_Group_SetGroupPrimitivesAspect(self, *args)


    def FillAreaAspect(self, *args):
        """
        FillAreaAspect(Handle_Graphic3d_Group self) -> Handle_Graphic3d_AspectFillArea3d

        Return fill area aspect.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectFillArea3d

        """
        return _Graphic3d.Handle_Graphic3d_Group_FillAreaAspect(self, *args)


    def TextAspect(self, *args):
        """
        TextAspect(Handle_Graphic3d_Group self) -> Handle_Graphic3d_AspectText3d

        Return text aspect.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectText3d

        """
        return _Graphic3d.Handle_Graphic3d_Group_TextAspect(self, *args)


    def MarkerAspect(self, *args):
        """
        MarkerAspect(Handle_Graphic3d_Group self) -> Handle_Graphic3d_AspectMarker3d

        Return marker aspect.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectMarker3d

        """
        return _Graphic3d.Handle_Graphic3d_Group_MarkerAspect(self, *args)


    def SetPrimitivesAspect(self, *args):
        """
        SetPrimitivesAspect(Handle_Graphic3d_Group self, Handle_Graphic3d_AspectLine3d theAspect)
        SetPrimitivesAspect(Handle_Graphic3d_Group self, Handle_Graphic3d_AspectFillArea3d theAspect)
        SetPrimitivesAspect(Handle_Graphic3d_Group self, Handle_Graphic3d_AspectText3d theAspect)
        SetPrimitivesAspect(Handle_Graphic3d_Group self, Handle_Graphic3d_AspectMarker3d theAspect)

        Modifies the current context of the group to give
        another aspect for all the marker primitives created
        after this call in the group.

        :type theAspect: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectMarker3d

        """
        return _Graphic3d.Handle_Graphic3d_Group_SetPrimitivesAspect(self, *args)


    def IsGroupPrimitivesAspectSet(self, *args):
        """
        IsGroupPrimitivesAspectSet(Handle_Graphic3d_Group self, Graphic3d_GroupAspect const theAspect) -> Standard_Boolean

        Returns TRUE if aspect is set for the group.

        :type theAspect: OCC.wrapper.Graphic3d.Graphic3d_GroupAspect
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Group_IsGroupPrimitivesAspectSet(self, *args)


    def GroupPrimitivesAspect(self, *args):
        """
        GroupPrimitivesAspect(Handle_Graphic3d_Group self, Handle_Graphic3d_AspectLine3d theAspLine, Handle_Graphic3d_AspectText3d theAspText, Handle_Graphic3d_AspectMarker3d theAspMarker, Handle_Graphic3d_AspectFillArea3d theAspFill)

        Returns the context of all the primitives of the group.

        :type theAspLine: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectLine3d
        :type theAspText: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectText3d
        :type theAspMarker: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectMarker3d
        :type theAspFill: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectFillArea3d

        """
        return _Graphic3d.Handle_Graphic3d_Group_GroupPrimitivesAspect(self, *args)


    def PrimitivesAspect(self, *args):
        """
        PrimitivesAspect(Handle_Graphic3d_Group self, Handle_Graphic3d_AspectLine3d theAspLine, Handle_Graphic3d_AspectText3d theAspText, Handle_Graphic3d_AspectMarker3d theAspMarker, Handle_Graphic3d_AspectFillArea3d theAspFill)

        Returns the last inserted context in the group for each kind of primitives.

        :type theAspLine: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectLine3d
        :type theAspText: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectText3d
        :type theAspMarker: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectMarker3d
        :type theAspFill: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectFillArea3d

        """
        return _Graphic3d.Handle_Graphic3d_Group_PrimitivesAspect(self, *args)


    def Text(self, *args):
        """
        Text(Handle_Graphic3d_Group self, Standard_CString const AText, Graphic3d_Vertex APoint, Standard_Real const AHeight, Standard_Real const AAngle, Graphic3d_TextPath const ATp, Graphic3d_HorizontalTextAlignment const AHta, Graphic3d_VerticalTextAlignment const AVta, Standard_Boolean const EvalMinMax)
        Text(Handle_Graphic3d_Group self, Standard_CString const AText, Graphic3d_Vertex APoint, Standard_Real const AHeight, Standard_Boolean const EvalMinMax)
        Text(Handle_Graphic3d_Group self, TCollection_ExtendedString AText, Graphic3d_Vertex APoint, Standard_Real const AHeight, Standard_Real const AAngle, Graphic3d_TextPath const ATp, Graphic3d_HorizontalTextAlignment const AHta, Graphic3d_VerticalTextAlignment const AVta, Standard_Boolean const EvalMinMax)
        Text(Handle_Graphic3d_Group self, TCollection_ExtendedString AText, Graphic3d_Vertex APoint, Standard_Real const AHeight, Standard_Boolean const EvalMinMax)
        Text(Handle_Graphic3d_Group self, Standard_CString const theTextUtf, gp_Ax2 theOrientation, Standard_Real const theHeight, Standard_Real const theAngle, Graphic3d_TextPath const theTp, Graphic3d_HorizontalTextAlignment const theHTA, Graphic3d_VerticalTextAlignment const theVTA, Standard_Boolean const theToEvalMinMax, Standard_Boolean const theHasOwnAnchor)
        Text(Handle_Graphic3d_Group self, TCollection_ExtendedString theText, gp_Ax2 theOrientation, Standard_Real const theHeight, Standard_Real const theAngle, Graphic3d_TextPath const theTp, Graphic3d_HorizontalTextAlignment const theHTA, Graphic3d_VerticalTextAlignment const theVTA, Standard_Boolean const theToEvalMinMax, Standard_Boolean const theHasOwnAnchor)

        Creates the string <theText> at orientation <theOrientation> in 3D space.

        :type theText: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theOrientation: OCC.wrapper.gp.gp_Ax2
        :type theHeight: float
        :type theAngle: float
        :type theTp: OCC.wrapper.Graphic3d.Graphic3d_TextPath
        :type theHTA: OCC.wrapper.Graphic3d.Graphic3d_HorizontalTextAlignment
        :type theVTA: OCC.wrapper.Graphic3d.Graphic3d_VerticalTextAlignment
        :type theToEvalMinMax: bool
        :type theHasOwnAnchor: bool

        """
        return _Graphic3d.Handle_Graphic3d_Group_Text(self, *args)


    def AddPrimitiveArray(self, *args):
        """
        AddPrimitiveArray(Handle_Graphic3d_Group self, Graphic3d_TypeOfPrimitiveArray const theType, Handle_Graphic3d_IndexBuffer theIndices, Handle_Graphic3d_Buffer theAttribs, Handle_Graphic3d_BoundBuffer theBounds, Standard_Boolean const theToEvalMinMax)
        AddPrimitiveArray(Handle_Graphic3d_Group self, Handle_Graphic3d_ArrayOfPrimitives thePrim, Standard_Boolean const theToEvalMinMax)

        Adds an array of primitives for display

        :type thePrim: OCC.wrapper.Graphic3d.Handle_Graphic3d_ArrayOfPrimitives
        :type theToEvalMinMax: bool

        """
        return _Graphic3d.Handle_Graphic3d_Group_AddPrimitiveArray(self, *args)


    def Marker(self, *args):
        """
        Marker(Handle_Graphic3d_Group self, Graphic3d_Vertex thePoint, Standard_Boolean const theToEvalMinMax)

        Creates a primitive array with single marker using AddPrimitiveArray().

        :type thePoint: OCC.wrapper.Graphic3d.Graphic3d_Vertex
        :type theToEvalMinMax: bool

        """
        return _Graphic3d.Handle_Graphic3d_Group_Marker(self, *args)


    def SetStencilTestOptions(self, *args):
        """
        SetStencilTestOptions(Handle_Graphic3d_Group self, Standard_Boolean const theIsEnabled)

        sets the stencil test to theIsEnabled state;

        :type theIsEnabled: bool

        """
        return _Graphic3d.Handle_Graphic3d_Group_SetStencilTestOptions(self, *args)


    def SetFlippingOptions(self, *args):
        """
        SetFlippingOptions(Handle_Graphic3d_Group self, Standard_Boolean const theIsEnabled, gp_Ax2 theRefPlane)

        sets the flipping to theIsEnabled state.

        :type theIsEnabled: bool
        :type theRefPlane: OCC.wrapper.gp.gp_Ax2

        """
        return _Graphic3d.Handle_Graphic3d_Group_SetFlippingOptions(self, *args)


    def ContainsFacet(self, *args):
        """
        ContainsFacet(Handle_Graphic3d_Group self) -> bool

        Returns true if the group contains Polygons, Triangles or Quadrangles.

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_Group_ContainsFacet(self, *args)


    def IsDeleted(self, *args):
        """
        IsDeleted(Handle_Graphic3d_Group self) -> Standard_Boolean

        Returns Standard_True if the group <me> is deleted.
        <me> is deleted after the call Remove (me) or the
        associated structure is deleted.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Group_IsDeleted(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_Graphic3d_Group self) -> Standard_Boolean

        Returns Standard_True if the group <me> is empty.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Group_IsEmpty(self, *args)


    def MinMaxValues(self, *args):
        """
        MinMaxValues(Handle_Graphic3d_Group self)

        Returns the coordinates of the boundary box of the group.

        :type theXMin: float
        :type theYMin: float
        :type theZMin: float
        :type theXMax: float
        :type theYMax: float
        :type theZMax: float

        """
        return _Graphic3d.Handle_Graphic3d_Group_MinMaxValues(self, *args)


    def SetMinMaxValues(self, *args):
        """
        SetMinMaxValues(Handle_Graphic3d_Group self, Standard_Real const theXMin, Standard_Real const theYMin, Standard_Real const theZMin, Standard_Real const theXMax, Standard_Real const theYMax, Standard_Real const theZMax)

        Sets the coordinates of the boundary box of the group.

        :type theXMin: float
        :type theYMin: float
        :type theZMin: float
        :type theXMax: float
        :type theYMax: float
        :type theZMax: float

        """
        return _Graphic3d.Handle_Graphic3d_Group_SetMinMaxValues(self, *args)


    def BoundingBox(self, *args):
        """
        Returns boundary box of the group <me> without transformation applied,

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_BndBox4f

        """
        res = _Graphic3d.Handle_Graphic3d_Group_BoundingBox(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeBoundingBox(self, *args):
        """
        ChangeBoundingBox(Handle_Graphic3d_Group self) -> BVH_Box_Standard_ShortReal_

        Returns non-const boundary box of the group <me> without transformation applied,

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_BndBox4f

        """
        return _Graphic3d.Handle_Graphic3d_Group_ChangeBoundingBox(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_Graphic3d_Group self) -> Handle_Graphic3d_Structure

        Returns the structure containing the group <me>.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Handle_Graphic3d_Group_Structure(self, *args)


    def SetClosed(self, *args):
        """
        SetClosed(Handle_Graphic3d_Group self, bool const theIsClosed)

        Changes property shown that primitive arrays within this group form closed volume (do no contain open shells).

        :type theIsClosed: const bool

        """
        return _Graphic3d.Handle_Graphic3d_Group_SetClosed(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(Handle_Graphic3d_Group self) -> bool

        Return true if primitive arrays within this graphic group form closed volume (do no contain open shells).

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_Group_IsClosed(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_Group self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_Group_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_Group self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_Group self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Group_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_Group self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_Group self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Group_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_Group self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_Group_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_Group self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Group_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_Group self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_Group_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_Group self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Group_DecrementRefCounter(self, *args)

Handle_Graphic3d_Group_swigregister = _Graphic3d.Handle_Graphic3d_Group_swigregister
Handle_Graphic3d_Group_swigregister(Handle_Graphic3d_Group)

def Handle_Graphic3d_Group_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_Group_DownCast(thing)
Handle_Graphic3d_Group_DownCast = _Graphic3d.Handle_Graphic3d_Group_DownCast

class Handle_Graphic3d_ClipPlane(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_ClipPlane self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_ClipPlane self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_ClipPlane self, Graphic3d_ClipPlane thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_ClipPlane self, Handle_Graphic3d_ClipPlane theHandle) -> Handle_Graphic3d_ClipPlane
        assign(Handle_Graphic3d_ClipPlane self, Graphic3d_ClipPlane thePtr) -> Handle_Graphic3d_ClipPlane
        assign(Handle_Graphic3d_ClipPlane self, Handle_Graphic3d_ClipPlane theHandle) -> Handle_Graphic3d_ClipPlane

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_ClipPlane self) -> Graphic3d_ClipPlane

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_ClipPlane self) -> Graphic3d_ClipPlane

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_ClipPlane self) -> Graphic3d_ClipPlane

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_ClipPlane___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_ClipPlane___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_ClipPlane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ClipPlane_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_ClipPlane

    def SetEquation(self, *args):
        """
        SetEquation(Handle_Graphic3d_ClipPlane self, gp_Pln thePlane)
        SetEquation(Handle_Graphic3d_ClipPlane self, Graphic3d_ClipPlane::Equation const & theEquation)

        Set 4-component equation vector for clipping plane.
        The equation is specified in "world" coordinate system.
        @param theEquation [in] the XYZW (or "ABCD") equation vector.

        :type theEquation: Equation

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_SetEquation(self, *args)


    def GetEquation(self, *args):
        """
        Get 4-component equation vector for clipping plane.
        @return clipping plane equation vector.

        :rtype: Equation

        """
        res = _Graphic3d.Handle_Graphic3d_ClipPlane_GetEquation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsOn(self, *args):
        """
        IsOn(Handle_Graphic3d_ClipPlane self) -> Standard_Boolean

        Check that the clipping plane is turned on.
        @return boolean flag indicating whether the plane is in on or off state.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_IsOn(self, *args)


    def SetOn(self, *args):
        """
        SetOn(Handle_Graphic3d_ClipPlane self, Standard_Boolean const theIsOn)

        Change state of the clipping plane.
        @param theIsOn [in] the flag specifying whether the graphic driver
        clipping by this plane should be turned on or off.

        :type theIsOn: bool

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_SetOn(self, *args)


    def SetCapping(self, *args):
        """
        SetCapping(Handle_Graphic3d_ClipPlane self, Standard_Boolean const theIsOn)

        Change state of capping surface rendering.
        @param theIsOn [in] the flag specifying whether the graphic driver should
        perform rendering of capping surface produced by this plane. The graphic
        driver produces this surface for convex graphics by means of stencil-test
        and multi-pass rendering.

        :type theIsOn: bool

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_SetCapping(self, *args)


    def IsCapping(self, *args):
        """
        IsCapping(Handle_Graphic3d_ClipPlane self) -> Standard_Boolean

        Check state of capping surface rendering.
        @return true (turned on) or false depending on the state.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_IsCapping(self, *args)


    def ToPlane(self, *args):
        """
        Get geometrical definition.
        @return geometrical definition of clipping plane

        :rtype: OCC.wrapper.gp.gp_Pln

        """
        res = _Graphic3d.Handle_Graphic3d_ClipPlane_ToPlane(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Clone(self, *args):
        """
        Clone(Handle_Graphic3d_ClipPlane self) -> Handle_Graphic3d_ClipPlane

        Clone plane. Virtual method to simplify copying procedure if plane
        class is redefined at application level to add specific fields to it
        e.g. id, name, etc.
        @return new instance of clipping plane with same properties and attributes.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ClipPlane

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_Clone(self, *args)


    def SetCappingMaterial(self, *args):
        """
        SetCappingMaterial(Handle_Graphic3d_ClipPlane self, Graphic3d_MaterialAspect theMat)

        Set material for rendering capping surface.
        @param theMat [in] the material.

        :type theMat: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_SetCappingMaterial(self, *args)


    def CappingMaterial(self, *args):
        """
        @return capping material.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect

        """
        res = _Graphic3d.Handle_Graphic3d_ClipPlane_CappingMaterial(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetCappingTexture(self, *args):
        """
        SetCappingTexture(Handle_Graphic3d_ClipPlane self, Handle_Graphic3d_TextureMap theTexture)

        Set texture to be applied on capping surface.
        @param theTexture [in] the texture.

        :type theTexture: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureMap

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_SetCappingTexture(self, *args)


    def CappingTexture(self, *args):
        """
        CappingTexture(Handle_Graphic3d_ClipPlane self) -> Handle_Graphic3d_TextureMap

        @return capping texture map.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureMap

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_CappingTexture(self, *args)


    def SetCappingHatch(self, *args):
        """
        SetCappingHatch(Handle_Graphic3d_ClipPlane self, Aspect_HatchStyle const theStyle)

        Set hatch style (stipple) and turn hatching on.
        @param theStyle [in] the hatch style.

        :type theStyle: OCC.wrapper.Aspect.Aspect_HatchStyle

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_SetCappingHatch(self, *args)


    def CappingHatch(self, *args):
        """
        CappingHatch(Handle_Graphic3d_ClipPlane self) -> Aspect_HatchStyle

        @return hatching style.

        :rtype: OCC.wrapper.Aspect.Aspect_HatchStyle

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_CappingHatch(self, *args)


    def SetCappingCustomHatch(self, *args):
        """
        SetCappingCustomHatch(Handle_Graphic3d_ClipPlane self, Handle_Graphic3d_HatchStyle theStyle)

        Set custom hatch style (stipple) and turn hatching on.
        @param theStyle [in] the hatch pattern.

        :type theStyle: OCC.wrapper.Graphic3d.Handle_Graphic3d_HatchStyle

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_SetCappingCustomHatch(self, *args)


    def CappingCustomHatch(self, *args):
        """
        @return hatching style.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_HatchStyle

        """
        res = _Graphic3d.Handle_Graphic3d_ClipPlane_CappingCustomHatch(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetCappingHatchOn(self, *args):
        """
        SetCappingHatchOn(Handle_Graphic3d_ClipPlane self)

        Turn on hatching.


        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_SetCappingHatchOn(self, *args)


    def SetCappingHatchOff(self, *args):
        """
        SetCappingHatchOff(Handle_Graphic3d_ClipPlane self)

        Turn off hatching.


        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_SetCappingHatchOff(self, *args)


    def IsHatchOn(self, *args):
        """
        IsHatchOn(Handle_Graphic3d_ClipPlane self) -> Standard_Boolean

        @return True if hatching mask is turned on.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_IsHatchOn(self, *args)


    def GetId(self, *args):
        """
        This ID is used for managing associated resources in graphical driver.
        The clip plane can be assigned within a range of IO which can be
        displayed in separate OpenGl contexts. For each of the context an associated
        OpenGl resource for graphical aspects should be created and kept.
        The resources are stored in graphical driver for each of individual groups
        of shared context under the clip plane identifier.
        @return clip plane resource identifier string.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Handle_Graphic3d_ClipPlane_GetId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CappingAspect(self, *args):
        """
        Return capping aspect.
        @return capping surface rendering aspect.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectFillArea3d

        """
        res = _Graphic3d.Handle_Graphic3d_ClipPlane_CappingAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetCappingAspect(self, *args):
        """
        SetCappingAspect(Handle_Graphic3d_ClipPlane self, Handle_Graphic3d_AspectFillArea3d theAspect)

        Assign capping aspect.

        :type theAspect: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectFillArea3d

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_SetCappingAspect(self, *args)


    def ToUseObjectMaterial(self, *args):
        """
        ToUseObjectMaterial(Handle_Graphic3d_ClipPlane self) -> bool

        Flag indicating whether material for capping plane should be taken from object.
        Default value: FALSE (use dedicated capping plane material).

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_ToUseObjectMaterial(self, *args)


    def SetUseObjectMaterial(self, *args):
        """
        SetUseObjectMaterial(Handle_Graphic3d_ClipPlane self, bool theToUse)

        Set flag for controlling the source of capping plane material.

        :type theToUse: bool

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_SetUseObjectMaterial(self, *args)


    def ToUseObjectTexture(self, *args):
        """
        ToUseObjectTexture(Handle_Graphic3d_ClipPlane self) -> bool

        Flag indicating whether texture for capping plane should be taken from object.
        Default value: FALSE.

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_ToUseObjectTexture(self, *args)


    def SetUseObjectTexture(self, *args):
        """
        SetUseObjectTexture(Handle_Graphic3d_ClipPlane self, bool theToUse)

        Set flag for controlling the source of capping plane texture.

        :type theToUse: bool

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_SetUseObjectTexture(self, *args)


    def ToUseObjectShader(self, *args):
        """
        ToUseObjectShader(Handle_Graphic3d_ClipPlane self) -> bool

        Flag indicating whether shader program for capping plane should be taken from object.
        Default value: FALSE.

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_ToUseObjectShader(self, *args)


    def SetUseObjectShader(self, *args):
        """
        SetUseObjectShader(Handle_Graphic3d_ClipPlane self, bool theToUse)

        Set flag for controlling the source of capping plane shader program.

        :type theToUse: bool

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_SetUseObjectShader(self, *args)


    def ToUseObjectProperties(self, *args):
        """
        ToUseObjectProperties(Handle_Graphic3d_ClipPlane self) -> bool

        Return true if some fill area aspect properties should be taken from object.

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_ToUseObjectProperties(self, *args)


    def MCountEquation(self, *args):
        """
        MCountEquation(Handle_Graphic3d_ClipPlane self) -> unsigned int

        @return modification counter for equation.

        :rtype: unsigned int

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_MCountEquation(self, *args)


    def MCountAspect(self, *args):
        """
        MCountAspect(Handle_Graphic3d_ClipPlane self) -> unsigned int

        @return modification counter for aspect.

        :rtype: unsigned int

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_MCountAspect(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_ClipPlane self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ClipPlane_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ClipPlane_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_ClipPlane self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_ClipPlane self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_ClipPlane self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_ClipPlane self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_ClipPlane self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_ClipPlane self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_ClipPlane self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_ClipPlane self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_ClipPlane self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ClipPlane_DecrementRefCounter(self, *args)

Handle_Graphic3d_ClipPlane_swigregister = _Graphic3d.Handle_Graphic3d_ClipPlane_swigregister
Handle_Graphic3d_ClipPlane_swigregister(Handle_Graphic3d_ClipPlane)

def Handle_Graphic3d_ClipPlane_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_ClipPlane_DownCast(thing)
Handle_Graphic3d_ClipPlane_DownCast = _Graphic3d.Handle_Graphic3d_ClipPlane_DownCast

class Handle_Graphic3d_CLight(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_CLight self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_CLight_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_CLight self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_CLight_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_CLight self, Graphic3d_CLight thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_CLight_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_CLight self, Handle_Graphic3d_CLight theHandle) -> Handle_Graphic3d_CLight
        assign(Handle_Graphic3d_CLight self, Graphic3d_CLight thePtr) -> Handle_Graphic3d_CLight
        assign(Handle_Graphic3d_CLight self, Handle_Graphic3d_CLight theHandle) -> Handle_Graphic3d_CLight

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_CLight_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_CLight self) -> Graphic3d_CLight

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_CLight_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_CLight self) -> Graphic3d_CLight

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_CLight___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_CLight self) -> Graphic3d_CLight

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_CLight___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_CLight___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_CLight___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_CLight(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_CLight_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_CLight

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_CLight self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_CLight_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_CLight_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_CLight_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Type(self, *args):
        """
        Type(Handle_Graphic3d_CLight self) -> Graphic3d_TypeOfLightSource

        Returns the Type of the Light, cannot be changed after object construction.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfLightSource

        """
        return _Graphic3d.Handle_Graphic3d_CLight_Type(self, *args)


    def Name(self, *args):
        """
        Returns light source name; empty string by default.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Handle_Graphic3d_CLight_Name(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetName(self, *args):
        """
        SetName(Handle_Graphic3d_CLight self, TCollection_AsciiString theName)

        Sets light source name.

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Handle_Graphic3d_CLight_SetName(self, *args)


    def Color(self, *args):
        """
        Returns the color of the light source; WHITE by default.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Handle_Graphic3d_CLight_Color(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetColor(self, *args):
        """
        SetColor(Handle_Graphic3d_CLight self, Quantity_Color theColor)

        Defines the color of a light source by giving the basic color.

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Graphic3d.Handle_Graphic3d_CLight_SetColor(self, *args)


    def IsEnabled(self, *args):
        """
        IsEnabled(Handle_Graphic3d_CLight self) -> Standard_Boolean

        Check that the light source is turned on; TRUE by default.
        This flag affects all occurrences of light sources, where it was registered and activated;
        so that it is possible defining an active light in View which is actually in disabled state.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_CLight_IsEnabled(self, *args)


    def SetEnabled(self, *args):
        """
        SetEnabled(Handle_Graphic3d_CLight self, Standard_Boolean theIsOn)

        Change enabled state of the light state.
        This call does not remove or deactivate light source in Views/Viewers;
        instead it turns it OFF so that it just have no effect.

        :type theIsOn: bool

        """
        return _Graphic3d.Handle_Graphic3d_CLight_SetEnabled(self, *args)


    def IsHeadlight(self, *args):
        """
        IsHeadlight(Handle_Graphic3d_CLight self) -> Standard_Boolean

        Returns true if the light is a headlight; FALSE by default.
        Headlight flag means that light position/direction are defined not in a World coordinate system, but relative to the camera orientation.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_CLight_IsHeadlight(self, *args)


    def Headlight(self, *args):
        """
        Headlight(Handle_Graphic3d_CLight self) -> Standard_Boolean

        Alias for IsHeadlight().

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_CLight_Headlight(self, *args)


    def SetHeadlight(self, *args):
        """
        SetHeadlight(Handle_Graphic3d_CLight self, Standard_Boolean theValue)

        Setup headlight flag.

        :type theValue: bool

        """
        return _Graphic3d.Handle_Graphic3d_CLight_SetHeadlight(self, *args)


    def Position(self, *args):
        """
        Returns location of positional/spot light; (0, 0, 0) by default.

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _Graphic3d.Handle_Graphic3d_CLight_Position(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPosition(self, *args):
        """
        SetPosition(Handle_Graphic3d_CLight self, gp_Pnt thePosition)
        SetPosition(Handle_Graphic3d_CLight self, Standard_Real theX, Standard_Real theY, Standard_Real theZ)

        Setup location of positional/spot light.

        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Handle_Graphic3d_CLight_SetPosition(self, *args)


    def ConstAttenuation(self, *args):
        """
        ConstAttenuation(Handle_Graphic3d_CLight self) -> Standard_ShortReal

        Returns constant attenuation factor of positional/spot light source; 1.0f by default.
        Distance attenuation factors of reducing positional/spot light intensity depending on the distance from its position:
        @code
        float anAttenuation = 1.0 / (ConstAttenuation() + LinearAttenuation() * theDistance + QuadraticAttenuation() * theDistance * theDistance);
        @endcode

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Handle_Graphic3d_CLight_ConstAttenuation(self, *args)


    def LinearAttenuation(self, *args):
        """
        LinearAttenuation(Handle_Graphic3d_CLight self) -> Standard_ShortReal

        Returns linear attenuation factor of positional/spot light source; 0.0 by default.
        Distance attenuation factors of reducing positional/spot light intensity depending on the distance from its position:
        @code
        float anAttenuation = 1.0 / (ConstAttenuation() + LinearAttenuation() * theDistance + QuadraticAttenuation() * theDistance * theDistance);
        @endcode

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Handle_Graphic3d_CLight_LinearAttenuation(self, *args)


    def Attenuation(self, *args):
        """
        Attenuation(Handle_Graphic3d_CLight self)

        Returns the attenuation factors.

        :type theConstAttenuation: float
        :type theLinearAttenuation: float

        """
        return _Graphic3d.Handle_Graphic3d_CLight_Attenuation(self, *args)


    def SetAttenuation(self, *args):
        """
        SetAttenuation(Handle_Graphic3d_CLight self, Standard_ShortReal theConstAttenuation, Standard_ShortReal theLinearAttenuation)

        Defines the coefficients of attenuation; values should be >= 0.0 and their summ should not be equal to 0.

        :type theConstAttenuation: float
        :type theLinearAttenuation: float

        """
        return _Graphic3d.Handle_Graphic3d_CLight_SetAttenuation(self, *args)


    def Direction(self, *args):
        """
        Direction(Handle_Graphic3d_CLight self) -> gp_Dir
        Direction(Handle_Graphic3d_CLight self)

        Returns the theVx, theVy, theVz direction of the light source.

        :type theVx: float
        :type theVy: float
        :type theVz: float

        """
        return _Graphic3d.Handle_Graphic3d_CLight_Direction(self, *args)


    def SetDirection(self, *args):
        """
        SetDirection(Handle_Graphic3d_CLight self, gp_Dir theDir)
        SetDirection(Handle_Graphic3d_CLight self, Standard_Real theVx, Standard_Real theVy, Standard_Real theVz)

        Sets direction of directional/spot light.

        :type theVx: float
        :type theVy: float
        :type theVz: float

        """
        return _Graphic3d.Handle_Graphic3d_CLight_SetDirection(self, *args)


    def Angle(self, *args):
        """
        Angle(Handle_Graphic3d_CLight self) -> Standard_ShortReal

        Returns an angle in radians of the cone created by the spot; 30 degrees by default.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Handle_Graphic3d_CLight_Angle(self, *args)


    def SetAngle(self, *args):
        """
        SetAngle(Handle_Graphic3d_CLight self, Standard_ShortReal theAngle)

        Angle in radians of the cone created by the spot, should be within range (0.0, M_PI).

        :type theAngle: float

        """
        return _Graphic3d.Handle_Graphic3d_CLight_SetAngle(self, *args)


    def Concentration(self, *args):
        """
        Concentration(Handle_Graphic3d_CLight self) -> Standard_ShortReal

        Returns intensity distribution of the spot light, within [0.0, 1.0] range; 1.0 by default.
        This coefficient should be converted into spotlight exponent within [0.0, 128.0] range:
        @code
        float aSpotExponent = Concentration() * 128.0;
        anAttenuation *= pow (aCosA, aSpotExponent);"
        @endcode
        The concentration factor determines the dispersion of the light on the surface, the default value (1.0) corresponds to a minimum of dispersion.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Handle_Graphic3d_CLight_Concentration(self, *args)


    def SetConcentration(self, *args):
        """
        SetConcentration(Handle_Graphic3d_CLight self, Standard_ShortReal theConcentration)

        Defines the coefficient of concentration; value should be within range [0.0, 1.0].

        :type theConcentration: float

        """
        return _Graphic3d.Handle_Graphic3d_CLight_SetConcentration(self, *args)


    def Intensity(self, *args):
        """
        Intensity(Handle_Graphic3d_CLight self) -> Standard_ShortReal

        Returns the intensity of light source; 1.0 by default.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Handle_Graphic3d_CLight_Intensity(self, *args)


    def SetIntensity(self, *args):
        """
        SetIntensity(Handle_Graphic3d_CLight self, Standard_ShortReal theValue)

        Modifies the intensity of light source, which should be > 0.0.

        :type theValue: float

        """
        return _Graphic3d.Handle_Graphic3d_CLight_SetIntensity(self, *args)


    def Smoothness(self, *args):
        """
        Smoothness(Handle_Graphic3d_CLight self) -> Standard_ShortReal

        Returns the smoothness of light source (either smoothing angle for directional light or smoothing radius in case of positional light); 0.0 by default.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Handle_Graphic3d_CLight_Smoothness(self, *args)


    def SetSmoothRadius(self, *args):
        """
        SetSmoothRadius(Handle_Graphic3d_CLight self, Standard_ShortReal theValue)

        Modifies the smoothing radius of positional/spot light; should be >= 0.0.

        :type theValue: float

        """
        return _Graphic3d.Handle_Graphic3d_CLight_SetSmoothRadius(self, *args)


    def SetSmoothAngle(self, *args):
        """
        SetSmoothAngle(Handle_Graphic3d_CLight self, Standard_ShortReal theValue)

        Modifies the smoothing angle (in radians) of directional light source; should be within range [0.0, M_PI/2].

        :type theValue: float

        """
        return _Graphic3d.Handle_Graphic3d_CLight_SetSmoothAngle(self, *args)


    def GetId(self, *args):
        """
        @return light resource identifier string

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Handle_Graphic3d_CLight_GetId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PackedParams(self, *args):
        """
        Packed light parameters.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Vec4

        """
        res = _Graphic3d.Handle_Graphic3d_CLight_PackedParams(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PackedColor(self, *args):
        """
        Returns the color of the light source with dummy Alpha component, which should be ignored.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Vec4

        """
        res = _Graphic3d.Handle_Graphic3d_CLight_PackedColor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PackedDirection(self, *args):
        """
        Returns direction of directional/spot light.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Vec4

        """
        res = _Graphic3d.Handle_Graphic3d_CLight_PackedDirection(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Revision(self, *args):
        """
        Revision(Handle_Graphic3d_CLight self) -> Standard_Size

        @return modification counter

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Handle_Graphic3d_CLight_Revision(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_CLight self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_CLight_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_CLight self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_CLight self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_CLight_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_CLight self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_CLight self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_CLight_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_CLight self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_CLight_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_CLight self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_CLight_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_CLight self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_CLight_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_CLight self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_CLight_DecrementRefCounter(self, *args)

Handle_Graphic3d_CLight_swigregister = _Graphic3d.Handle_Graphic3d_CLight_swigregister
Handle_Graphic3d_CLight_swigregister(Handle_Graphic3d_CLight)

def Handle_Graphic3d_CLight_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_CLight_DownCast(thing)
Handle_Graphic3d_CLight_DownCast = _Graphic3d.Handle_Graphic3d_CLight_DownCast

class NCollection_Vec3_Standard_Character(object):
    """
    Generic 3-components vector.
    To be used as RGB color pixel or XYZ 3D-point.
    The main target for this class - to handle raw low-level arrays (from/to graphic driver etc.).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Length(*args):
        """
        Length() -> int

        Returns the number of components.

        :rtype: int

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_Length(*args)

    Length = staticmethod(Length)

    def __init__(self, *args):
        """
        Generic 3-components vector.
        To be used as RGB color pixel or XYZ 3D-point.
        The main target for this class - to handle raw low-level arrays (from/to graphic driver etc.).
        """
        this = _Graphic3d.new_NCollection_Vec3_Standard_Character(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetValues(self, *args):
        """
        SetValues(NCollection_Vec3_Standard_Character self, char const theX, char const theY, char const theZ)

        Assign new values to the vector.

        :type theX: const Element_t
        :type theY: const Element_t
        :type theZ: const Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_SetValues(self, *args)


    def yx(self, *args):
        """
        yx(NCollection_Vec3_Standard_Character self) -> NCollection_Vec2_Standard_Character

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_yx(self, *args)


    def xz(self, *args):
        """
        xz(NCollection_Vec3_Standard_Character self) -> NCollection_Vec2_Standard_Character

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_xz(self, *args)


    def zx(self, *args):
        """
        zx(NCollection_Vec3_Standard_Character self) -> NCollection_Vec2_Standard_Character

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_zx(self, *args)


    def zy(self, *args):
        """
        zy(NCollection_Vec3_Standard_Character self) -> NCollection_Vec2_Standard_Character

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_zy(self, *args)


    def xyz(self, *args):
        """
        xyz(NCollection_Vec3_Standard_Character self) -> NCollection_Vec3_Standard_Character

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_xyz(self, *args)


    def xzy(self, *args):
        """
        xzy(NCollection_Vec3_Standard_Character self) -> NCollection_Vec3_Standard_Character

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_xzy(self, *args)


    def yxz(self, *args):
        """
        yxz(NCollection_Vec3_Standard_Character self) -> NCollection_Vec3_Standard_Character

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_yxz(self, *args)


    def yzx(self, *args):
        """
        yzx(NCollection_Vec3_Standard_Character self) -> NCollection_Vec3_Standard_Character

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_yzx(self, *args)


    def zyx(self, *args):
        """
        zyx(NCollection_Vec3_Standard_Character self) -> NCollection_Vec3_Standard_Character

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_zyx(self, *args)


    def zxy(self, *args):
        """
        zxy(NCollection_Vec3_Standard_Character self) -> NCollection_Vec3_Standard_Character

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_zxy(self, *args)


    def x(self, *args):
        """
        x(NCollection_Vec3_Standard_Character self) -> char
        x(NCollection_Vec3_Standard_Character self) -> char &

        Alias to 1st component as X coordinate in XYZ.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_x(self, *args)


    def r(self, *args):
        """
        r(NCollection_Vec3_Standard_Character self) -> char
        r(NCollection_Vec3_Standard_Character self) -> char &

        Alias to 1st component as RED channel in RGB.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_r(self, *args)


    def y(self, *args):
        """
        y(NCollection_Vec3_Standard_Character self) -> char
        y(NCollection_Vec3_Standard_Character self) -> char &

        Alias to 2nd component as Y coordinate in XYZ.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_y(self, *args)


    def g(self, *args):
        """
        g(NCollection_Vec3_Standard_Character self) -> char
        g(NCollection_Vec3_Standard_Character self) -> char &

        Alias to 2nd component as GREEN channel in RGB.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_g(self, *args)


    def z(self, *args):
        """
        z(NCollection_Vec3_Standard_Character self) -> char
        z(NCollection_Vec3_Standard_Character self) -> char &

        Alias to 3rd component as Z coordinate in XYZ.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_z(self, *args)


    def b(self, *args):
        """
        b(NCollection_Vec3_Standard_Character self) -> char
        b(NCollection_Vec3_Standard_Character self) -> char &

        Alias to 3rd component as BLUE channel in RGB.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_b(self, *args)


    def xy(self, *args):
        """
        xy(NCollection_Vec3_Standard_Character self) -> NCollection_Vec2_Standard_Character
        xy(NCollection_Vec3_Standard_Character self) -> NCollection_Vec2_Standard_Character

        @return XY-components modifiable vector

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_xy(self, *args)


    def yz(self, *args):
        """
        yz(NCollection_Vec3_Standard_Character self) -> NCollection_Vec2_Standard_Character
        yz(NCollection_Vec3_Standard_Character self) -> NCollection_Vec2_Standard_Character

        @return YZ-components modifiable vector

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_yz(self, *args)


    def IsEqual(self, *args):
        """
        IsEqual(NCollection_Vec3_Standard_Character self, NCollection_Vec3_Standard_Character theOther) -> bool

        Check this vector with another vector for equality (without tolerance!).

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_IsEqual(self, *args)


    def __eq__(self, *args):
        """
        __eq__(NCollection_Vec3_Standard_Character self, NCollection_Vec3_Standard_Character theOther) -> bool
        __eq__(NCollection_Vec3_Standard_Character self, NCollection_Vec3_Standard_Character theOther) -> bool

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character___eq__(self, *args)


    def __ne__(self, *args):
        """
        __ne__(NCollection_Vec3_Standard_Character self, NCollection_Vec3_Standard_Character theOther) -> bool
        __ne__(NCollection_Vec3_Standard_Character self, NCollection_Vec3_Standard_Character theOther) -> bool

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character___ne__(self, *args)


    def GetData(self, *args):
        """
        GetData(NCollection_Vec3_Standard_Character self) -> char const *

        Raw access to the data (for OpenGL exchange).

        :rtype: const Element_t *

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_GetData(self, *args)


    def ChangeData(self, *args):
        """
        ChangeData(NCollection_Vec3_Standard_Character self) -> char *

        :rtype: Element_t *

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_ChangeData(self, *args)


    def __iadd__(self, *args):
        """
        __iadd__(NCollection_Vec3_Standard_Character self, NCollection_Vec3_Standard_Character theAdd) -> NCollection_Vec3_Standard_Character

        Compute per-component summary.

        :type theAdd: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character___iadd__(self, *args)


    def __neg__(self, *args):
        """
        __neg__(NCollection_Vec3_Standard_Character self) -> NCollection_Vec3_Standard_Character

        Unary -.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character___neg__(self, *args)


    def __isub__(self, *args):
        """
        __isub__(NCollection_Vec3_Standard_Character self, NCollection_Vec3_Standard_Character theDec) -> NCollection_Vec3_Standard_Character

        Compute per-component subtraction.

        :type theDec: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character___isub__(self, *args)


    def Multiply(self, *args):
        """
        Multiply(NCollection_Vec3_Standard_Character self, char const theFactor)

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_Multiply(self, *args)


    def __imul__(self, *args):
        """
        __imul__(NCollection_Vec3_Standard_Character self, NCollection_Vec3_Standard_Character theRight) -> NCollection_Vec3_Standard_Character
        __imul__(NCollection_Vec3_Standard_Character self, char const theFactor) -> NCollection_Vec3_Standard_Character

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character___imul__(self, *args)


    def __mul__(self, *args):
        """
        __mul__(NCollection_Vec3_Standard_Character self, char const theFactor) -> NCollection_Vec3_Standard_Character

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character___mul__(self, *args)


    def Multiplied(self, *args):
        """
        Multiplied(NCollection_Vec3_Standard_Character self, char const theFactor) -> NCollection_Vec3_Standard_Character

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_Multiplied(self, *args)


    def cwiseMin(self, *args):
        """
        cwiseMin(NCollection_Vec3_Standard_Character self, NCollection_Vec3_Standard_Character theVec) -> NCollection_Vec3_Standard_Character

        Compute component-wise minimum of two vectors.

        :type theVec: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_cwiseMin(self, *args)


    def cwiseMax(self, *args):
        """
        cwiseMax(NCollection_Vec3_Standard_Character self, NCollection_Vec3_Standard_Character theVec) -> NCollection_Vec3_Standard_Character

        Compute component-wise maximum of two vectors.

        :type theVec: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_cwiseMax(self, *args)


    def cwiseAbs(self, *args):
        """
        cwiseAbs(NCollection_Vec3_Standard_Character self) -> NCollection_Vec3_Standard_Character

        Compute component-wise modulus of the vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_cwiseAbs(self, *args)


    def maxComp(self, *args):
        """
        maxComp(NCollection_Vec3_Standard_Character self) -> char

        Compute maximum component of the vector.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_maxComp(self, *args)


    def minComp(self, *args):
        """
        minComp(NCollection_Vec3_Standard_Character self) -> char

        Compute minimum component of the vector.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_minComp(self, *args)


    def __itruediv__(self, *args):
        return _Graphic3d.NCollection_Vec3_Standard_Character___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _Graphic3d.NCollection_Vec3_Standard_Character___truediv__(self, *args)
    __div__ = __truediv__



    def Dot(self, *args):
        """
        Dot(NCollection_Vec3_Standard_Character self, NCollection_Vec3_Standard_Character theOther) -> char

        Computes the dot product.

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_Dot(self, *args)


    def Modulus(self, *args):
        """
        Modulus(NCollection_Vec3_Standard_Character self) -> char

        Computes the vector modulus (magnitude, length).

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_Modulus(self, *args)


    def SquareModulus(self, *args):
        """
        SquareModulus(NCollection_Vec3_Standard_Character self) -> char

        Computes the square of vector modulus (magnitude, length).
        This method may be used for performance tricks.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_SquareModulus(self, *args)


    def Normalize(self, *args):
        """
        Normalize(NCollection_Vec3_Standard_Character self)

        Normalize the vector.


        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_Normalize(self, *args)


    def Normalized(self, *args):
        """
        Normalized(NCollection_Vec3_Standard_Character self) -> NCollection_Vec3_Standard_Character

        Normalize the vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_Normalized(self, *args)


    def Cross(*args):
        """
        Cross(NCollection_Vec3_Standard_Character theVec1, NCollection_Vec3_Standard_Character theVec2) -> NCollection_Vec3_Standard_Character

        Computes the cross product.

        :type theVec1: OCC.wrapper.NCollection.NCollection_Vec3
        :type theVec2: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_Cross(*args)

    Cross = staticmethod(Cross)

    def GetLERP(*args):
        """
        GetLERP(NCollection_Vec3_Standard_Character theFrom, NCollection_Vec3_Standard_Character theTo, char const theT) -> NCollection_Vec3_Standard_Character

        Compute linear interpolation between to vectors.
        @param theT - interpolation coefficient 0..1;
        @return interpolation result.

        :type theFrom: OCC.wrapper.NCollection.NCollection_Vec3
        :type theTo: OCC.wrapper.NCollection.NCollection_Vec3
        :type theT: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_GetLERP(*args)

    GetLERP = staticmethod(GetLERP)

    def DX(*args):
        """
        DX() -> NCollection_Vec3_Standard_Character

        Constuct DX unit vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_DX(*args)

    DX = staticmethod(DX)

    def DY(*args):
        """
        DY() -> NCollection_Vec3_Standard_Character

        Constuct DY unit vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_DY(*args)

    DY = staticmethod(DY)

    def DZ(*args):
        """
        DZ() -> NCollection_Vec3_Standard_Character

        Constuct DZ unit vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Character_DZ(*args)

    DZ = staticmethod(DZ)
    __swig_destroy__ = _Graphic3d.delete_NCollection_Vec3_Standard_Character
NCollection_Vec3_Standard_Character_swigregister = _Graphic3d.NCollection_Vec3_Standard_Character_swigregister
NCollection_Vec3_Standard_Character_swigregister(NCollection_Vec3_Standard_Character)

def NCollection_Vec3_Standard_Character_Length(*args):
    """
    NCollection_Vec3_Standard_Character_Length() -> int

    Returns the number of components.

    :rtype: int

    """
    return _Graphic3d.NCollection_Vec3_Standard_Character_Length(*args)

def NCollection_Vec3_Standard_Character_Cross(*args):
    """
    NCollection_Vec3_Standard_Character_Cross(NCollection_Vec3_Standard_Character theVec1, NCollection_Vec3_Standard_Character theVec2) -> NCollection_Vec3_Standard_Character

    Computes the cross product.

    :type theVec1: OCC.wrapper.NCollection.NCollection_Vec3
    :type theVec2: OCC.wrapper.NCollection.NCollection_Vec3
    :rtype: OCC.wrapper.NCollection.NCollection_Vec3

    """
    return _Graphic3d.NCollection_Vec3_Standard_Character_Cross(*args)

def NCollection_Vec3_Standard_Character_GetLERP(*args):
    """
    NCollection_Vec3_Standard_Character_GetLERP(NCollection_Vec3_Standard_Character theFrom, NCollection_Vec3_Standard_Character theTo, char const theT) -> NCollection_Vec3_Standard_Character

    Compute linear interpolation between to vectors.
    @param theT - interpolation coefficient 0..1;
    @return interpolation result.

    :type theFrom: OCC.wrapper.NCollection.NCollection_Vec3
    :type theTo: OCC.wrapper.NCollection.NCollection_Vec3
    :type theT: const Element_t
    :rtype: OCC.wrapper.NCollection.NCollection_Vec3

    """
    return _Graphic3d.NCollection_Vec3_Standard_Character_GetLERP(*args)

def NCollection_Vec3_Standard_Character_DX(*args):
    """
    NCollection_Vec3_Standard_Character_DX() -> NCollection_Vec3_Standard_Character

    Constuct DX unit vector.

    :rtype: OCC.wrapper.NCollection.NCollection_Vec3

    """
    return _Graphic3d.NCollection_Vec3_Standard_Character_DX(*args)

def NCollection_Vec3_Standard_Character_DY(*args):
    """
    NCollection_Vec3_Standard_Character_DY() -> NCollection_Vec3_Standard_Character

    Constuct DY unit vector.

    :rtype: OCC.wrapper.NCollection.NCollection_Vec3

    """
    return _Graphic3d.NCollection_Vec3_Standard_Character_DY(*args)

def NCollection_Vec3_Standard_Character_DZ(*args):
    """
    NCollection_Vec3_Standard_Character_DZ() -> NCollection_Vec3_Standard_Character

    Constuct DZ unit vector.

    :rtype: OCC.wrapper.NCollection.NCollection_Vec3

    """
    return _Graphic3d.NCollection_Vec3_Standard_Character_DZ(*args)


try:
	Graphic3d_Vec3b = NCollection_Vec3_Standard_Character
except NameError:
	pass # does not exist, probably ignored

class Handle_Graphic3d_LightSet(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_LightSet self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_LightSet_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_LightSet self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_LightSet_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_LightSet self, Graphic3d_LightSet thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_LightSet_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_LightSet self, Handle_Graphic3d_LightSet theHandle) -> Handle_Graphic3d_LightSet
        assign(Handle_Graphic3d_LightSet self, Graphic3d_LightSet thePtr) -> Handle_Graphic3d_LightSet
        assign(Handle_Graphic3d_LightSet self, Handle_Graphic3d_LightSet theHandle) -> Handle_Graphic3d_LightSet

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_LightSet_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_LightSet self) -> Graphic3d_LightSet

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_LightSet_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_LightSet self) -> Graphic3d_LightSet

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_LightSet___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_LightSet self) -> Graphic3d_LightSet

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_LightSet___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_LightSet___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_LightSet___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_LightSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_LightSet_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_LightSet

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_LightSet self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_LightSet_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_LightSet_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_LightSet_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Lower(self, *args):
        """
        Lower(Handle_Graphic3d_LightSet self) -> Standard_Integer

        Return lower light index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_LightSet_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(Handle_Graphic3d_LightSet self) -> Standard_Integer

        Return upper light index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_LightSet_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_Graphic3d_LightSet self) -> Standard_Boolean

        Return TRUE if lights list is empty.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_LightSet_IsEmpty(self, *args)


    def Extent(self, *args):
        """
        Extent(Handle_Graphic3d_LightSet self) -> Standard_Integer

        Return number of light sources.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_LightSet_Extent(self, *args)


    def Value(self, *args):
        """
        Return the light source for specified index within range [Lower(), Upper()].

        :type theIndex: int
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_CLight

        """
        res = _Graphic3d.Handle_Graphic3d_LightSet_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Contains(self, *args):
        """
        Contains(Handle_Graphic3d_LightSet self, Handle_Graphic3d_CLight theLight) -> Standard_Boolean

        Return TRUE if light source is defined in this set.

        :type theLight: OCC.wrapper.Graphic3d.Handle_Graphic3d_CLight
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_LightSet_Contains(self, *args)


    def Add(self, *args):
        """
        Add(Handle_Graphic3d_LightSet self, Handle_Graphic3d_CLight theLight) -> Standard_Boolean

        Append new light source.

        :type theLight: OCC.wrapper.Graphic3d.Handle_Graphic3d_CLight
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_LightSet_Add(self, *args)


    def Remove(self, *args):
        """
        Remove(Handle_Graphic3d_LightSet self, Handle_Graphic3d_CLight theLight) -> Standard_Boolean

        Remove light source.

        :type theLight: OCC.wrapper.Graphic3d.Handle_Graphic3d_CLight
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_LightSet_Remove(self, *args)


    def NbLightsOfType(self, *args):
        """
        NbLightsOfType(Handle_Graphic3d_LightSet self, Graphic3d_TypeOfLightSource theType) -> Standard_Integer

        Returns total amount of lights of specified type.

        :type theType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfLightSource
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_LightSet_NbLightsOfType(self, *args)


    def UpdateRevision(self, *args):
        """
        UpdateRevision(Handle_Graphic3d_LightSet self) -> Standard_Size

        Update light sources revision.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Handle_Graphic3d_LightSet_UpdateRevision(self, *args)


    def Revision(self, *args):
        """
        Revision(Handle_Graphic3d_LightSet self) -> Standard_Size

        Return light sources revision.
        @sa UpdateRevision()

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Handle_Graphic3d_LightSet_Revision(self, *args)


    def NbEnabled(self, *args):
        """
        NbEnabled(Handle_Graphic3d_LightSet self) -> Standard_Integer

        Returns total amount of enabled lights EXCLUDING ambient.
        @sa UpdateRevision()

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_LightSet_NbEnabled(self, *args)


    def NbEnabledLightsOfType(self, *args):
        """
        NbEnabledLightsOfType(Handle_Graphic3d_LightSet self, Graphic3d_TypeOfLightSource theType) -> Standard_Integer

        Returns total amount of enabled lights of specified type.
        @sa UpdateRevision()

        :type theType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfLightSource
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_LightSet_NbEnabledLightsOfType(self, *args)


    def AmbientColor(self, *args):
        """
        Returns cumulative ambient color, which is computed as sum of all enabled ambient light sources.
        Values are NOT clamped (can be greater than 1.0f) and alpha component is fixed to 1.0f.
        @sa UpdateRevision()

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Vec4

        """
        res = _Graphic3d.Handle_Graphic3d_LightSet_AmbientColor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def KeyEnabledLong(self, *args):
        """
        Returns a string defining a list of enabled light sources as concatenation of letters 'd' (Directional), 'p' (Point), 's' (Spot)
        depending on the type of light source in the list.
        Example: "dppp".
        @sa UpdateRevision()

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Handle_Graphic3d_LightSet_KeyEnabledLong(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def KeyEnabledShort(self, *args):
        """
        Returns a string defining a list of enabled light sources as concatenation of letters 'd' (Directional), 'p' (Point), 's' (Spot)
        depending on the type of light source in the list, specified only once.
        Example: "dp".
        @sa UpdateRevision()

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Handle_Graphic3d_LightSet_KeyEnabledShort(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_LightSet self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_LightSet_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_LightSet self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_LightSet self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_LightSet_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_LightSet self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_LightSet self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_LightSet_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_LightSet self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_LightSet_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_LightSet self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_LightSet_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_LightSet self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_LightSet_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_LightSet self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_LightSet_DecrementRefCounter(self, *args)

Handle_Graphic3d_LightSet_swigregister = _Graphic3d.Handle_Graphic3d_LightSet_swigregister
Handle_Graphic3d_LightSet_swigregister(Handle_Graphic3d_LightSet)

def Handle_Graphic3d_LightSet_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_LightSet_DownCast(thing)
Handle_Graphic3d_LightSet_DownCast = _Graphic3d.Handle_Graphic3d_LightSet_DownCast

class Graphic3d_ShaderVariable(Standard.Standard_Transient):
    """Describes custom uniform shader variable."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_ShaderVariable
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_ShaderVariable(self) 
            return h


    def Name(self, *args):
        """
        Returns name of shader variable.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Graphic3d_ShaderVariable_Name(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsDone(self, *args):
        """
        IsDone(Graphic3d_ShaderVariable self) -> Standard_Boolean

        Checks if the shader variable is valid or not.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_ShaderVariable_IsDone(self, *args)


    def Value(self, *args):
        """
        Value(Graphic3d_ShaderVariable self) -> Graphic3d_ValueInterface *

        Returns interface of shader variable value.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ValueInterface

        """
        return _Graphic3d.Graphic3d_ShaderVariable_Value(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_ShaderVariable_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_ShaderVariable_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_ShaderVariable_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ShaderVariable
Graphic3d_ShaderVariable_swigregister = _Graphic3d.Graphic3d_ShaderVariable_swigregister
Graphic3d_ShaderVariable_swigregister(Graphic3d_ShaderVariable)

def Graphic3d_ShaderVariable_get_type_name(*args):
    """
    Graphic3d_ShaderVariable_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_ShaderVariable_get_type_name(*args)

def Graphic3d_ShaderVariable_get_type_descriptor(*args):
    """
    Graphic3d_ShaderVariable_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_ShaderVariable_get_type_descriptor(*args)

class Graphic3d_CStructure(Standard.Standard_Transient):
    """Low-level graphic structure interface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_CStructure
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_CStructure(self) 
            return h


    def GraphicDriver(self, *args):
        """
        @return graphic driver created this structure

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_GraphicDriver

        """
        res = _Graphic3d.Graphic3d_CStructure_GraphicDriver(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Groups(self, *args):
        """
        @return graphic groups

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_SequenceOfGroup

        """
        res = _Graphic3d.Graphic3d_CStructure_Groups(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Transformation(self, *args):
        """
        Return transformation.

        :rtype: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        res = _Graphic3d.Graphic3d_CStructure_Transformation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTransformation(self, *args):
        """
        SetTransformation(Graphic3d_CStructure self, Handle_Geom_Transformation theTrsf)

        Assign transformation.

        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        return _Graphic3d.Graphic3d_CStructure_SetTransformation(self, *args)


    def TransformPersistence(self, *args):
        """
        Return transformation persistence.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TransformPers

        """
        res = _Graphic3d.Graphic3d_CStructure_TransformPersistence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTransformPersistence(self, *args):
        """
        SetTransformPersistence(Graphic3d_CStructure self, Handle_Graphic3d_TransformPers theTrsfPers)

        Set transformation persistence.

        :type theTrsfPers: OCC.wrapper.Graphic3d.Handle_Graphic3d_TransformPers

        """
        return _Graphic3d.Graphic3d_CStructure_SetTransformPersistence(self, *args)


    def ClipPlanes(self, *args):
        """
        @return associated clip planes

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane

        """
        res = _Graphic3d.Graphic3d_CStructure_ClipPlanes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetClipPlanes(self, *args):
        """
        SetClipPlanes(Graphic3d_CStructure self, Handle_Graphic3d_SequenceOfHClipPlane thePlanes)

        Pass clip planes to the associated graphic driver structure

        :type thePlanes: OCC.wrapper.Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane

        """
        return _Graphic3d.Graphic3d_CStructure_SetClipPlanes(self, *args)


    def BoundingBox(self, *args):
        """
        @return bounding box of this presentation

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_BndBox3d

        """
        res = _Graphic3d.Graphic3d_CStructure_BoundingBox(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeBoundingBox(self, *args):
        """
        ChangeBoundingBox(Graphic3d_CStructure self) -> BVH_Box_Standard_Real_

        @return bounding box of this presentation
        without transformation matrix applied

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_BndBox3d

        """
        return _Graphic3d.Graphic3d_CStructure_ChangeBoundingBox(self, *args)


    def IsVisible(self, *args):
        """
        IsVisible(Graphic3d_CStructure self) -> bool
        IsVisible(Graphic3d_CStructure self, Standard_Integer const theViewId) -> bool

        Return structure visibility considering both View Affinity and global visibility state.

        :type theViewId: int
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_CStructure_IsVisible(self, *args)


    def SetZLayer(self, *args):
        """
        SetZLayer(Graphic3d_CStructure self, Graphic3d_ZLayerId const theLayerIndex)

        Set z layer ID to display the structure in specified layer

        :type theLayerIndex: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Graphic3d_CStructure_SetZLayer(self, *args)


    def ZLayer(self, *args):
        """
        ZLayer(Graphic3d_CStructure self) -> Graphic3d_ZLayerId

        Get z layer ID

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Graphic3d_CStructure_ZLayer(self, *args)


    def HighlightStyle(self, *args):
        """
        Returns valid handle to highlight style of the structure in case if
        highlight flag is set to true

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_PresentationAttributes

        """
        res = _Graphic3d.Graphic3d_CStructure_HighlightStyle(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def OnVisibilityChanged(self, *args):
        """
        OnVisibilityChanged(Graphic3d_CStructure self)

        Update structure visibility state


        """
        return _Graphic3d.Graphic3d_CStructure_OnVisibilityChanged(self, *args)


    def Clear(self, *args):
        """
        Clear(Graphic3d_CStructure self)

        Clear graphic data


        """
        return _Graphic3d.Graphic3d_CStructure_Clear(self, *args)


    def Connect(self, *args):
        """
        Connect(Graphic3d_CStructure self, Graphic3d_CStructure theStructure)

        Connect other structure to this one

        :type theStructure: OCC.wrapper.Graphic3d.Graphic3d_CStructure

        """
        return _Graphic3d.Graphic3d_CStructure_Connect(self, *args)


    def Disconnect(self, *args):
        """
        Disconnect(Graphic3d_CStructure self, Graphic3d_CStructure theStructure)

        Disconnect other structure to this one

        :type theStructure: OCC.wrapper.Graphic3d.Graphic3d_CStructure

        """
        return _Graphic3d.Graphic3d_CStructure_Disconnect(self, *args)


    def GraphicHighlight(self, *args):
        """
        GraphicHighlight(Graphic3d_CStructure self, Handle_Graphic3d_PresentationAttributes theStyle, Handle_Graphic3d_Structure theStruct)

        Highlights structure with the given style

        :type theStyle: OCC.wrapper.Graphic3d.Handle_Graphic3d_PresentationAttributes
        :type theStruct: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Graphic3d_CStructure_GraphicHighlight(self, *args)


    def GraphicUnhighlight(self, *args):
        """
        GraphicUnhighlight(Graphic3d_CStructure self)

        Unhighlights the structure and invalidates pointer to structure's highlight
        style


        """
        return _Graphic3d.Graphic3d_CStructure_GraphicUnhighlight(self, *args)


    def ShadowLink(self, *args):
        """
        ShadowLink(Graphic3d_CStructure self, Handle_Graphic3d_StructureManager theManager) -> Handle_Graphic3d_CStructure

        Create shadow link to this structure

        :type theManager: OCC.wrapper.Graphic3d.Handle_Graphic3d_StructureManager
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_CStructure

        """
        return _Graphic3d.Graphic3d_CStructure_ShadowLink(self, *args)


    def NewGroup(self, *args):
        """
        NewGroup(Graphic3d_CStructure self, Handle_Graphic3d_Structure theStruct) -> Handle_Graphic3d_Group

        Create new group within this structure

        :type theStruct: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Group

        """
        return _Graphic3d.Graphic3d_CStructure_NewGroup(self, *args)


    def RemoveGroup(self, *args):
        """
        RemoveGroup(Graphic3d_CStructure self, Handle_Graphic3d_Group theGroup)

        Remove group from this structure

        :type theGroup: OCC.wrapper.Graphic3d.Handle_Graphic3d_Group

        """
        return _Graphic3d.Graphic3d_CStructure_RemoveGroup(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_CStructure_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_CStructure_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_CStructure_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_CStructure
Graphic3d_CStructure_swigregister = _Graphic3d.Graphic3d_CStructure_swigregister
Graphic3d_CStructure_swigregister(Graphic3d_CStructure)

def Graphic3d_CStructure_get_type_name(*args):
    """
    Graphic3d_CStructure_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_CStructure_get_type_name(*args)

def Graphic3d_CStructure_get_type_descriptor(*args):
    """
    Graphic3d_CStructure_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_CStructure_get_type_descriptor(*args)

class Handle_Graphic3d_ShaderAttribute(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_ShaderAttribute self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_ShaderAttribute_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_ShaderAttribute self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_ShaderAttribute_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_ShaderAttribute self, Graphic3d_ShaderAttribute thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_ShaderAttribute_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_ShaderAttribute self, Handle_Graphic3d_ShaderAttribute theHandle) -> Handle_Graphic3d_ShaderAttribute
        assign(Handle_Graphic3d_ShaderAttribute self, Graphic3d_ShaderAttribute thePtr) -> Handle_Graphic3d_ShaderAttribute
        assign(Handle_Graphic3d_ShaderAttribute self, Handle_Graphic3d_ShaderAttribute theHandle) -> Handle_Graphic3d_ShaderAttribute

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_ShaderAttribute_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_ShaderAttribute self) -> Graphic3d_ShaderAttribute

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ShaderAttribute_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_ShaderAttribute self) -> Graphic3d_ShaderAttribute

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ShaderAttribute___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_ShaderAttribute self) -> Graphic3d_ShaderAttribute

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_ShaderAttribute___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_ShaderAttribute___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_ShaderAttribute___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_ShaderAttribute(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ShaderAttribute_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_ShaderAttribute

    def Name(self, *args):
        """
        Returns name of shader variable.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Handle_Graphic3d_ShaderAttribute_Name(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Location(self, *args):
        """
        Location(Handle_Graphic3d_ShaderAttribute self) -> int

        Returns attribute location to be bound on GLSL program linkage stage.

        :rtype: int

        """
        return _Graphic3d.Handle_Graphic3d_ShaderAttribute_Location(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_ShaderAttribute self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_ShaderAttribute_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ShaderAttribute_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ShaderAttribute_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_ShaderAttribute self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_ShaderAttribute_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_ShaderAttribute self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_ShaderAttribute self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ShaderAttribute_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_ShaderAttribute self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_ShaderAttribute self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ShaderAttribute_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_ShaderAttribute self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_ShaderAttribute_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_ShaderAttribute self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ShaderAttribute_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_ShaderAttribute self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_ShaderAttribute_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_ShaderAttribute self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ShaderAttribute_DecrementRefCounter(self, *args)

Handle_Graphic3d_ShaderAttribute_swigregister = _Graphic3d.Handle_Graphic3d_ShaderAttribute_swigregister
Handle_Graphic3d_ShaderAttribute_swigregister(Handle_Graphic3d_ShaderAttribute)

def Handle_Graphic3d_ShaderAttribute_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_ShaderAttribute_DownCast(thing)
Handle_Graphic3d_ShaderAttribute_DownCast = _Graphic3d.Handle_Graphic3d_ShaderAttribute_DownCast

class Graphic3d_UniformValue_Graphic3d_Vec2i(object):
    """Describes specific value of custom uniform variable."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, theValue):
        """Describes specific value of custom uniform variable."""
        this = _Graphic3d.new_Graphic3d_UniformValue_Graphic3d_Vec2i(theValue)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def TypeID(self, *args):
        """
        TypeID(Graphic3d_UniformValue_Graphic3d_Vec2i self) -> Standard_Size

        Returns unique identifier of value type.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Graphic3d_UniformValue_Graphic3d_Vec2i_TypeID(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_UniformValue_Graphic3d_Vec2i
Graphic3d_UniformValue_Graphic3d_Vec2i_swigregister = _Graphic3d.Graphic3d_UniformValue_Graphic3d_Vec2i_swigregister
Graphic3d_UniformValue_Graphic3d_Vec2i_swigregister(Graphic3d_UniformValue_Graphic3d_Vec2i)


try:
	Graphic3d_UniformVec2i = Graphic3d_UniformValue_Graphic3d_Vec2i
except NameError:
	pass # does not exist, probably ignored

class Graphic3d_TransformError(Standard.Standard_OutOfRange):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_TransformError
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_TransformError(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Graphic3d_TransformError self) -> Graphic3d_TransformError
        __init__(Graphic3d_TransformError self, Standard_CString const theMessage) -> Graphic3d_TransformError

        :type theMessage: OCC.wrapper.Standard.Standard_CString

        """
        this = _Graphic3d.new_Graphic3d_TransformError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewInstance(*args):
        """
        NewInstance(Standard_CString const theMessage) -> Handle_Graphic3d_TransformError

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TransformError

        """
        return _Graphic3d.Graphic3d_TransformError_NewInstance(*args)

    NewInstance = staticmethod(NewInstance)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_TransformError_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_TransformError_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_TransformError_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_TransformError
Graphic3d_TransformError_swigregister = _Graphic3d.Graphic3d_TransformError_swigregister
Graphic3d_TransformError_swigregister(Graphic3d_TransformError)

def Graphic3d_TransformError_NewInstance(*args):
    """
    Graphic3d_TransformError_NewInstance(Standard_CString const theMessage) -> Handle_Graphic3d_TransformError

    :type theMessage: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TransformError

    """
    return _Graphic3d.Graphic3d_TransformError_NewInstance(*args)

def Graphic3d_TransformError_get_type_name(*args):
    """
    Graphic3d_TransformError_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_TransformError_get_type_name(*args)

def Graphic3d_TransformError_get_type_descriptor(*args):
    """
    Graphic3d_TransformError_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_TransformError_get_type_descriptor(*args)

class Graphic3d_TextureSet(Standard.Standard_Transient):
    """Class holding array of textures to be mapped as a set."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_TextureSet
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_TextureSet(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_TextureSet_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_TextureSet_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_TextureSet_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Graphic3d_TextureSet self) -> Graphic3d_TextureSet
        __init__(Graphic3d_TextureSet self, Standard_Integer theNbTextures) -> Graphic3d_TextureSet
        __init__(Graphic3d_TextureSet self, Handle_Graphic3d_TextureMap theTexture) -> Graphic3d_TextureSet

        Constructor for a single texture.

        :type theTexture: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureMap

        """
        this = _Graphic3d.new_Graphic3d_TextureSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def IsEmpty(self, *args):
        """
        IsEmpty(Graphic3d_TextureSet self) -> Standard_Boolean

        Return TRUE if texture array is empty.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_TextureSet_IsEmpty(self, *args)


    def Size(self, *args):
        """
        Size(Graphic3d_TextureSet self) -> Standard_Integer

        Return number of textures.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_TextureSet_Size(self, *args)


    def Lower(self, *args):
        """
        Lower(Graphic3d_TextureSet self) -> Standard_Integer

        Return the lower index in texture set.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_TextureSet_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(Graphic3d_TextureSet self) -> Standard_Integer

        Return the upper index in texture set.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_TextureSet_Upper(self, *args)


    def First(self, *args):
        """
        Return the first texture.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureMap

        """
        res = _Graphic3d.Graphic3d_TextureSet_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetFirst(self, *args):
        """
        SetFirst(Graphic3d_TextureSet self, Handle_Graphic3d_TextureMap theTexture)

        Return the first texture.

        :type theTexture: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureMap

        """
        return _Graphic3d.Graphic3d_TextureSet_SetFirst(self, *args)


    def Value(self, *args):
        """
        Return the texture at specified position within [0, Size()) range.

        :type theIndex: int
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureMap

        """
        res = _Graphic3d.Graphic3d_TextureSet_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(Graphic3d_TextureSet self, Standard_Integer theIndex, Handle_Graphic3d_TextureMap theTexture)

        Return the texture at specified position within [0, Size()) range.

        :type theIndex: int
        :type theTexture: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureMap

        """
        return _Graphic3d.Graphic3d_TextureSet_SetValue(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_TextureSet
Graphic3d_TextureSet_swigregister = _Graphic3d.Graphic3d_TextureSet_swigregister
Graphic3d_TextureSet_swigregister(Graphic3d_TextureSet)

def Graphic3d_TextureSet_get_type_name(*args):
    """
    Graphic3d_TextureSet_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_TextureSet_get_type_name(*args)

def Graphic3d_TextureSet_get_type_descriptor(*args):
    """
    Graphic3d_TextureSet_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_TextureSet_get_type_descriptor(*args)

class Graphic3d_MarkerImage(Standard.Standard_Transient):
    """
    This class is used to store bitmaps and images for markers rendering.
    It can convert bitmap texture stored in TColStd_HArray1OfByte to Image_PixMap and vice versa.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_MarkerImage
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_MarkerImage(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Graphic3d_MarkerImage self, Handle_Image_PixMap theImage) -> Graphic3d_MarkerImage
        __init__(Graphic3d_MarkerImage self, Handle_TColStd_HArray1OfByte theBitMap, Standard_Integer const & theWidth, Standard_Integer const & theHeight) -> Graphic3d_MarkerImage

        Creates marker image from array of bytes
        (method for compatibility with old markers definition).
        @param theBitMap - source bitmap stored as array of bytes
        @param theWidth  - number of bits in a row
        @param theHeight - number of bits in a column

        :type theBitMap: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfByte
        :type theWidth: int
        :type theHeight: int

        """
        this = _Graphic3d.new_Graphic3d_MarkerImage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def GetBitMapArray(self, *args):
        """
        GetBitMapArray(Graphic3d_MarkerImage self, Standard_Real const & theAlphaValue=0.5) -> Handle_TColStd_HArray1OfByte

        @param theAlphaValue pixels in the image that have alpha value greater than
        or equal to this parameter will be stored in bitmap as "1",
        others will be stored as "0"
        @return marker image as array of bytes. If an instance of the class has been
        initialized with image, it will be converted to bitmap based on the parameter theAlphaValue.

        :type theAlphaValue: float
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfByte

        """
        return _Graphic3d.Graphic3d_MarkerImage_GetBitMapArray(self, *args)


    def GetImage(self, *args):
        """
        @return marker image. If an instance of the class has been initialized with a bitmap, it will be
        converted to image.

        :rtype: OCC.wrapper.Image.Handle_Image_PixMap

        """
        res = _Graphic3d.Graphic3d_MarkerImage_GetImage(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetImageAlpha(self, *args):
        """
        @return image alpha as grayscale image. Note that if an instance of the class has been initialized
        with a bitmap or with grayscale image this method will return exactly the same image as GetImage()

        :rtype: OCC.wrapper.Image.Handle_Image_PixMap

        """
        res = _Graphic3d.Graphic3d_MarkerImage_GetImageAlpha(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetImageId(self, *args):
        """
        @return an unique ID. This ID will be used to manage resource in graphic driver.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Graphic3d_MarkerImage_GetImageId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetImageAlphaId(self, *args):
        """
        @return an unique ID. This ID will be used to manage resource in graphic driver.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Graphic3d_MarkerImage_GetImageAlphaId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetTextureSize(self, *args):
        """
        GetTextureSize(Graphic3d_MarkerImage self)

        @return texture size

        :type theWidth: int
        :type theHeight: int

        """
        return _Graphic3d.Graphic3d_MarkerImage_GetTextureSize(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_MarkerImage_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_MarkerImage_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_MarkerImage_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_MarkerImage
Graphic3d_MarkerImage_swigregister = _Graphic3d.Graphic3d_MarkerImage_swigregister
Graphic3d_MarkerImage_swigregister(Graphic3d_MarkerImage)

def Graphic3d_MarkerImage_get_type_name(*args):
    """
    Graphic3d_MarkerImage_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_MarkerImage_get_type_name(*args)

def Graphic3d_MarkerImage_get_type_descriptor(*args):
    """
    Graphic3d_MarkerImage_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_MarkerImage_get_type_descriptor(*args)

class NCollection_Mat4_Standard_Real(object):
    """
    Generic matrix of 4 x 4 elements.
    To be used in conjunction with NCollection_Vec4 entities.
    Originally introduced for 3D space projection and orientation
    operations.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Rows(*args):
        """
        Rows() -> size_t

        Get number of rows.
        @return number of rows.

        :rtype: size_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_Real_Rows(*args)

    Rows = staticmethod(Rows)

    def Cols(*args):
        """
        Cols() -> size_t

        Get number of columns.
        @retur number of columns.

        :rtype: size_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_Real_Cols(*args)

    Cols = staticmethod(Cols)

    def __init__(self, *args):
        """
        Generic matrix of 4 x 4 elements.
        To be used in conjunction with NCollection_Vec4 entities.
        Originally introduced for 3D space projection and orientation
        operations.
        """
        this = _Graphic3d.new_NCollection_Mat4_Standard_Real(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def assign(self, theOther):
        return _Graphic3d.NCollection_Mat4_Standard_Real_assign(self, theOther)

    def GetValue(self, *args):
        """
        GetValue(NCollection_Mat4_Standard_Real self, size_t const theRow, size_t const theCol) -> double

        Get element at the specified row and column.
        @param theRow [in] the row.to address.
        @param theCol [in] the column to address.
        @return the value of the addressed element.

        :type theRow: size_t
        :type theCol: size_t
        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_Real_GetValue(self, *args)


    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Mat4_Standard_Real self, size_t const theRow, size_t const theCol) -> double &

        Access element at the specified row and column.
        @param theRow [in] the row.to access.
        @param theCol [in] the column to access.
        @return reference on the matrix element.

        :type theRow: size_t
        :type theCol: size_t
        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Mat4_Standard_Real_ChangeValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(NCollection_Mat4_Standard_Real self, size_t const theRow, size_t const theCol, double const theValue)

        Set value for the element specified by row and columns.
        @param theRow   [in] the row to change.
        @param theCol   [in] the column to change.
        @param theValue [in] the value to set.s

        :type theRow: size_t
        :type theCol: size_t
        :type theValue: const Element_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_Real_SetValue(self, *args)


    def GetRow(self, *args):
        """
        GetRow(NCollection_Mat4_Standard_Real self, size_t const theRow) -> NCollection_Vec4< double >

        Get vector of elements for the specified row.
        @param theRow [in] the row to access.
        @return vector of elements.

        :type theRow: size_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec4_Element_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_Real_GetRow(self, *args)


    def SetRow(self, *args):
        """
        SetRow(NCollection_Mat4_Standard_Real self, size_t const theRow, NCollection_Vec3_Standard_Real theVec)
        SetRow(NCollection_Mat4_Standard_Real self, size_t const theRow, NCollection_Vec4< double > const & theVec)

        Set row values by the passed 4 element vector.
        @param theRow [in] the row to change.
        @param theVec [in] the vector of values.

        :type theRow: size_t
        :type theVec: OCC.wrapper.NCollection.NCollection_Vec4_Element_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_Real_SetRow(self, *args)


    def GetColumn(self, *args):
        """
        GetColumn(NCollection_Mat4_Standard_Real self, size_t const theCol) -> NCollection_Vec4< double >

        Get vector of elements for the specified column.
        @param theCol [in] the column to access.
        @return vector of elements.

        :type theCol: size_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec4_Element_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_Real_GetColumn(self, *args)


    def SetColumn(self, *args):
        """
        SetColumn(NCollection_Mat4_Standard_Real self, size_t const theCol, NCollection_Vec3_Standard_Real theVec)
        SetColumn(NCollection_Mat4_Standard_Real self, size_t const theCol, NCollection_Vec4< double > const & theVec)

        Set column values by the passed 4 element vector.
        @param theCol [in] the column to change.
        @param theVec [in] the vector of values.

        :type theCol: size_t
        :type theVec: OCC.wrapper.NCollection.NCollection_Vec4_Element_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_Real_SetColumn(self, *args)


    def GetDiagonal(self, *args):
        """
        GetDiagonal(NCollection_Mat4_Standard_Real self) -> NCollection_Vec4< double >

        Get vector of diagonal elements.
        @return vector of diagonal elements.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec4_Element_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_Real_GetDiagonal(self, *args)


    def SetDiagonal(self, *args):
        """
        SetDiagonal(NCollection_Mat4_Standard_Real self, NCollection_Vec3_Standard_Real theVec)
        SetDiagonal(NCollection_Mat4_Standard_Real self, NCollection_Vec4< double > const & theVec)

        Set diagonal elements of the matrix by the passed vector.
        @param theVec [in] the vector of values.

        :type theVec: OCC.wrapper.NCollection.NCollection_Vec4_Element_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_Real_SetDiagonal(self, *args)


    def InitIdentity(self, *args):
        """
        InitIdentity(NCollection_Mat4_Standard_Real self)

        Initialize the identity matrix.


        """
        return _Graphic3d.NCollection_Mat4_Standard_Real_InitIdentity(self, *args)


    def IsIdentity(self, *args):
        """
        IsIdentity(NCollection_Mat4_Standard_Real self) -> bool

        Checks the matrix for identity.

        :rtype: bool

        """
        return _Graphic3d.NCollection_Mat4_Standard_Real_IsIdentity(self, *args)


    def GetData(self, *args):
        """
        GetData(NCollection_Mat4_Standard_Real self) -> double const *

        Raw access to the data (for OpenGL exchange).

        :rtype: const Element_t *

        """
        return _Graphic3d.NCollection_Mat4_Standard_Real_GetData(self, *args)


    def ChangeData(self, *args):
        """
        ChangeData(NCollection_Mat4_Standard_Real self) -> double *

        :rtype: Element_t *

        """
        return _Graphic3d.NCollection_Mat4_Standard_Real_ChangeData(self, *args)


    def Multiply(self, *args):
        """
        Multiply(NCollection_Mat4_Standard_Real self, NCollection_Mat4_Standard_Real theMatA, NCollection_Mat4_Standard_Real theMatB) -> NCollection_Mat4_Standard_Real
        Multiply(NCollection_Mat4_Standard_Real self, NCollection_Mat4_Standard_Real theMat)
        Multiply(NCollection_Mat4_Standard_Real self, double const theFactor)

        Compute per-component multiplication.
        @param theFactor [in] the scale factor.

        :type theFactor: const Element_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_Real_Multiply(self, *args)


    def __imul__(self, *args):
        """
        __imul__(NCollection_Mat4_Standard_Real self, NCollection_Mat4_Standard_Real theMat) -> NCollection_Mat4_Standard_Real
        __imul__(NCollection_Mat4_Standard_Real self, double const theFactor) -> NCollection_Mat4_Standard_Real

        Compute per-element multiplication.
        @param theFactor [in] the scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Mat4

        """
        return _Graphic3d.NCollection_Mat4_Standard_Real___imul__(self, *args)


    def __mul__(self, *args):
        """
        __mul__(NCollection_Mat4_Standard_Real self, NCollection_Vec4< double > const & theVec) -> NCollection_Vec4< double >
        __mul__(NCollection_Mat4_Standard_Real self, NCollection_Mat4_Standard_Real theMat) -> NCollection_Mat4_Standard_Real
        __mul__(NCollection_Mat4_Standard_Real self, double const theFactor) -> NCollection_Mat4_Standard_Real

        Compute per-element multiplication.
        @param theFactor [in] the scale factor.
        @return the result of multiplicaton.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Mat4

        """
        return _Graphic3d.NCollection_Mat4_Standard_Real___mul__(self, *args)


    def Multiplied(self, *args):
        """
        Multiplied(NCollection_Mat4_Standard_Real self, NCollection_Mat4_Standard_Real theMat) -> NCollection_Mat4_Standard_Real
        Multiplied(NCollection_Mat4_Standard_Real self, double const theFactor) -> NCollection_Mat4_Standard_Real

        Compute per-element multiplication.
        @param theFactor [in] the scale factor.
        @return the result of multiplicaton.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Mat4

        """
        return _Graphic3d.NCollection_Mat4_Standard_Real_Multiplied(self, *args)


    def Translate(self, *args):
        """
        Translate(NCollection_Mat4_Standard_Real self, NCollection_Vec3_Standard_Real theVec)

        Translate the matrix on the passed vector.
        @param theVec [in] the translation vector.

        :type theVec: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_Real_Translate(self, *args)


    def Transposed(self, *args):
        """
        Transposed(NCollection_Mat4_Standard_Real self) -> NCollection_Mat4_Standard_Real

        Transpose the matrix.
        @return transposed copy of the matrix.

        :rtype: OCC.wrapper.NCollection.NCollection_Mat4

        """
        return _Graphic3d.NCollection_Mat4_Standard_Real_Transposed(self, *args)


    def Transpose(self, *args):
        """
        Transpose(NCollection_Mat4_Standard_Real self)

        Transpose the matrix.


        """
        return _Graphic3d.NCollection_Mat4_Standard_Real_Transpose(self, *args)


    def Inverted(self, *args):
        """
        Inverted(NCollection_Mat4_Standard_Real self, NCollection_Mat4_Standard_Real theOutMx) -> bool

        Compute inverted matrix.
        @param theOutMx [out] the inverted matrix.
        @return true if reversion success.

        :type theOutMx: OCC.wrapper.NCollection.NCollection_Mat4_Element_t
        :rtype: bool

        """
        return _Graphic3d.NCollection_Mat4_Standard_Real_Inverted(self, *args)


    def Map(*args):
        """
        Map(double * theData) -> NCollection_Mat4_Standard_Real
        Map(double const * theData) -> NCollection_Mat4_Standard_Real

        Maps plain C array to matrix type.

        :type theData: const Element_t *
        :rtype: OCC.wrapper.NCollection.NCollection_Mat4_Element_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_Real_Map(*args)

    Map = staticmethod(Map)
    __swig_destroy__ = _Graphic3d.delete_NCollection_Mat4_Standard_Real
NCollection_Mat4_Standard_Real_swigregister = _Graphic3d.NCollection_Mat4_Standard_Real_swigregister
NCollection_Mat4_Standard_Real_swigregister(NCollection_Mat4_Standard_Real)

def NCollection_Mat4_Standard_Real_Rows(*args):
    """
    NCollection_Mat4_Standard_Real_Rows() -> size_t

    Get number of rows.
    @return number of rows.

    :rtype: size_t

    """
    return _Graphic3d.NCollection_Mat4_Standard_Real_Rows(*args)

def NCollection_Mat4_Standard_Real_Cols(*args):
    """
    NCollection_Mat4_Standard_Real_Cols() -> size_t

    Get number of columns.
    @retur number of columns.

    :rtype: size_t

    """
    return _Graphic3d.NCollection_Mat4_Standard_Real_Cols(*args)

def NCollection_Mat4_Standard_Real_Map(*args):
    """
    Map(double * theData) -> NCollection_Mat4_Standard_Real
    NCollection_Mat4_Standard_Real_Map(double const * theData) -> NCollection_Mat4_Standard_Real

    Maps plain C array to matrix type.

    :type theData: const Element_t *
    :rtype: OCC.wrapper.NCollection.NCollection_Mat4_Element_t

    """
    return _Graphic3d.NCollection_Mat4_Standard_Real_Map(*args)


try:
	Graphic3d_Mat4d = NCollection_Mat4_Standard_Real
except NameError:
	pass # does not exist, probably ignored

class Graphic3d_RenderingParams(object):
    """Helper class to store rendering parameters."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Anaglyph_RedCyan_Simple = _Graphic3d.Graphic3d_RenderingParams_Anaglyph_RedCyan_Simple
    Anaglyph_RedCyan_Optimized = _Graphic3d.Graphic3d_RenderingParams_Anaglyph_RedCyan_Optimized
    Anaglyph_YellowBlue_Simple = _Graphic3d.Graphic3d_RenderingParams_Anaglyph_YellowBlue_Simple
    Anaglyph_YellowBlue_Optimized = _Graphic3d.Graphic3d_RenderingParams_Anaglyph_YellowBlue_Optimized
    Anaglyph_GreenMagenta_Simple = _Graphic3d.Graphic3d_RenderingParams_Anaglyph_GreenMagenta_Simple
    Anaglyph_UserDefined = _Graphic3d.Graphic3d_RenderingParams_Anaglyph_UserDefined
    PerfCounters_NONE = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_NONE
    PerfCounters_FrameRate = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_FrameRate
    PerfCounters_CPU = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_CPU
    PerfCounters_Layers = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_Layers
    PerfCounters_Structures = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_Structures
    PerfCounters_Groups = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_Groups
    PerfCounters_GroupArrays = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_GroupArrays
    PerfCounters_Triangles = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_Triangles
    PerfCounters_Points = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_Points
    PerfCounters_EstimMem = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_EstimMem
    PerfCounters_Basic = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_Basic
    PerfCounters_Extended = _Graphic3d.Graphic3d_RenderingParams_PerfCounters_Extended

    def __init__(self, *args):
        """
        __init__(Graphic3d_RenderingParams self) -> Graphic3d_RenderingParams

        Creates default rendering parameters.


        """
        this = _Graphic3d.new_Graphic3d_RenderingParams(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ResolutionRatio(self, *args):
        """
        ResolutionRatio(Graphic3d_RenderingParams self) -> Standard_ShortReal

        Returns resolution ratio.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_RenderingParams_ResolutionRatio(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_RenderingParams
Graphic3d_RenderingParams_swigregister = _Graphic3d.Graphic3d_RenderingParams_swigregister
Graphic3d_RenderingParams_swigregister(Graphic3d_RenderingParams)

class Graphic3d_ArrayOfTriangleFans(Graphic3d_ArrayOfPrimitives):
    """Contains triangles fan array definition"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_ArrayOfTriangleFans
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_ArrayOfTriangleFans(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_ArrayOfTriangleFans_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_ArrayOfTriangleFans_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_ArrayOfTriangleFans_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theMaxVertexs, Standard_Integer const theMaxFans=0, Standard_Boolean const theHasVNormals, Standard_Boolean const theHasVColors, Standard_Boolean const theHasBColors, Standard_Boolean const theHasVTexels) -> Graphic3d_ArrayOfTriangleFans

        Creates an array of triangle fans, a polygon can be filled as:
        1) Creating a single fan defined with his vertexes, i.e:
        @code
        myArray = Graphic3d_ArrayOfTriangleFans (7);
        myArray->AddVertex (x1, y1, z1);
        ....
        myArray->AddVertex (x7, y7, z7);
        @endcode
        2) creating separate fans defined with a predefined number of fans and the number of vertex per fan, i.e:
        @code
        myArray = Graphic3d_ArrayOfTriangleFans (8, 2);
        myArray->AddBound (4);
        myArray->AddVertex (x1, y1, z1);
        ....
        myArray->AddVertex (x4, y4, z4);
        myArray->AddBound (4);
        myArray->AddVertex (x5, y5, z5);
        ....
        myArray->AddVertex (x8, y8, z8);
        @endcode
        @param theMaxVertexs defines the maximum allowed vertex number in the array
        @param theMaxFans    defines the maximum allowed fan    number in the array
        The number of triangle really drawn is: VertexNumber() - 2 * Min(1, BoundNumber())

        :type theMaxVertexs: int
        :type theMaxFans: int
        :type theHasVNormals: bool
        :type theHasVColors: bool
        :type theHasBColors: bool
        :type theHasVTexels: bool

        """
        this = _Graphic3d.new_Graphic3d_ArrayOfTriangleFans(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle



    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ArrayOfTriangleFans
Graphic3d_ArrayOfTriangleFans_swigregister = _Graphic3d.Graphic3d_ArrayOfTriangleFans_swigregister
Graphic3d_ArrayOfTriangleFans_swigregister(Graphic3d_ArrayOfTriangleFans)

def Graphic3d_ArrayOfTriangleFans_get_type_name(*args):
    """
    Graphic3d_ArrayOfTriangleFans_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_ArrayOfTriangleFans_get_type_name(*args)

def Graphic3d_ArrayOfTriangleFans_get_type_descriptor(*args):
    """
    Graphic3d_ArrayOfTriangleFans_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_ArrayOfTriangleFans_get_type_descriptor(*args)

class NCollection_Mat4_Standard_ShortReal(object):
    """
    Generic matrix of 4 x 4 elements.
    To be used in conjunction with NCollection_Vec4 entities.
    Originally introduced for 3D space projection and orientation
    operations.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Rows(*args):
        """
        Rows() -> size_t

        Get number of rows.
        @return number of rows.

        :rtype: size_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_ShortReal_Rows(*args)

    Rows = staticmethod(Rows)

    def Cols(*args):
        """
        Cols() -> size_t

        Get number of columns.
        @retur number of columns.

        :rtype: size_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_ShortReal_Cols(*args)

    Cols = staticmethod(Cols)

    def __init__(self, *args):
        """
        Generic matrix of 4 x 4 elements.
        To be used in conjunction with NCollection_Vec4 entities.
        Originally introduced for 3D space projection and orientation
        operations.
        """
        this = _Graphic3d.new_NCollection_Mat4_Standard_ShortReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def assign(self, theOther):
        return _Graphic3d.NCollection_Mat4_Standard_ShortReal_assign(self, theOther)

    def GetValue(self, *args):
        """
        GetValue(NCollection_Mat4_Standard_ShortReal self, size_t const theRow, size_t const theCol) -> float

        Get element at the specified row and column.
        @param theRow [in] the row.to address.
        @param theCol [in] the column to address.
        @return the value of the addressed element.

        :type theRow: size_t
        :type theCol: size_t
        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_ShortReal_GetValue(self, *args)


    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Mat4_Standard_ShortReal self, size_t const theRow, size_t const theCol) -> float &

        Access element at the specified row and column.
        @param theRow [in] the row.to access.
        @param theCol [in] the column to access.
        @return reference on the matrix element.

        :type theRow: size_t
        :type theCol: size_t
        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Mat4_Standard_ShortReal_ChangeValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(NCollection_Mat4_Standard_ShortReal self, size_t const theRow, size_t const theCol, float const theValue)

        Set value for the element specified by row and columns.
        @param theRow   [in] the row to change.
        @param theCol   [in] the column to change.
        @param theValue [in] the value to set.s

        :type theRow: size_t
        :type theCol: size_t
        :type theValue: const Element_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_ShortReal_SetValue(self, *args)


    def GetRow(self, *args):
        """
        GetRow(NCollection_Mat4_Standard_ShortReal self, size_t const theRow) -> NCollection_Vec4< float >

        Get vector of elements for the specified row.
        @param theRow [in] the row to access.
        @return vector of elements.

        :type theRow: size_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec4_Element_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_ShortReal_GetRow(self, *args)


    def SetRow(self, *args):
        """
        SetRow(NCollection_Mat4_Standard_ShortReal self, size_t const theRow, NCollection_Vec3_Standard_ShortReal theVec)
        SetRow(NCollection_Mat4_Standard_ShortReal self, size_t const theRow, NCollection_Vec4< float > const & theVec)

        Set row values by the passed 4 element vector.
        @param theRow [in] the row to change.
        @param theVec [in] the vector of values.

        :type theRow: size_t
        :type theVec: OCC.wrapper.NCollection.NCollection_Vec4_Element_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_ShortReal_SetRow(self, *args)


    def GetColumn(self, *args):
        """
        GetColumn(NCollection_Mat4_Standard_ShortReal self, size_t const theCol) -> NCollection_Vec4< float >

        Get vector of elements for the specified column.
        @param theCol [in] the column to access.
        @return vector of elements.

        :type theCol: size_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec4_Element_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_ShortReal_GetColumn(self, *args)


    def SetColumn(self, *args):
        """
        SetColumn(NCollection_Mat4_Standard_ShortReal self, size_t const theCol, NCollection_Vec3_Standard_ShortReal theVec)
        SetColumn(NCollection_Mat4_Standard_ShortReal self, size_t const theCol, NCollection_Vec4< float > const & theVec)

        Set column values by the passed 4 element vector.
        @param theCol [in] the column to change.
        @param theVec [in] the vector of values.

        :type theCol: size_t
        :type theVec: OCC.wrapper.NCollection.NCollection_Vec4_Element_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_ShortReal_SetColumn(self, *args)


    def GetDiagonal(self, *args):
        """
        GetDiagonal(NCollection_Mat4_Standard_ShortReal self) -> NCollection_Vec4< float >

        Get vector of diagonal elements.
        @return vector of diagonal elements.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec4_Element_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_ShortReal_GetDiagonal(self, *args)


    def SetDiagonal(self, *args):
        """
        SetDiagonal(NCollection_Mat4_Standard_ShortReal self, NCollection_Vec3_Standard_ShortReal theVec)
        SetDiagonal(NCollection_Mat4_Standard_ShortReal self, NCollection_Vec4< float > const & theVec)

        Set diagonal elements of the matrix by the passed vector.
        @param theVec [in] the vector of values.

        :type theVec: OCC.wrapper.NCollection.NCollection_Vec4_Element_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_ShortReal_SetDiagonal(self, *args)


    def InitIdentity(self, *args):
        """
        InitIdentity(NCollection_Mat4_Standard_ShortReal self)

        Initialize the identity matrix.


        """
        return _Graphic3d.NCollection_Mat4_Standard_ShortReal_InitIdentity(self, *args)


    def IsIdentity(self, *args):
        """
        IsIdentity(NCollection_Mat4_Standard_ShortReal self) -> bool

        Checks the matrix for identity.

        :rtype: bool

        """
        return _Graphic3d.NCollection_Mat4_Standard_ShortReal_IsIdentity(self, *args)


    def GetData(self, *args):
        """
        GetData(NCollection_Mat4_Standard_ShortReal self) -> float const *

        Raw access to the data (for OpenGL exchange).

        :rtype: const Element_t *

        """
        return _Graphic3d.NCollection_Mat4_Standard_ShortReal_GetData(self, *args)


    def ChangeData(self, *args):
        """
        ChangeData(NCollection_Mat4_Standard_ShortReal self) -> float *

        :rtype: Element_t *

        """
        return _Graphic3d.NCollection_Mat4_Standard_ShortReal_ChangeData(self, *args)


    def Multiply(self, *args):
        """
        Multiply(NCollection_Mat4_Standard_ShortReal self, NCollection_Mat4_Standard_ShortReal theMatA, NCollection_Mat4_Standard_ShortReal theMatB) -> NCollection_Mat4_Standard_ShortReal
        Multiply(NCollection_Mat4_Standard_ShortReal self, NCollection_Mat4_Standard_ShortReal theMat)
        Multiply(NCollection_Mat4_Standard_ShortReal self, float const theFactor)

        Compute per-component multiplication.
        @param theFactor [in] the scale factor.

        :type theFactor: const Element_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_ShortReal_Multiply(self, *args)


    def __imul__(self, *args):
        """
        __imul__(NCollection_Mat4_Standard_ShortReal self, NCollection_Mat4_Standard_ShortReal theMat) -> NCollection_Mat4_Standard_ShortReal
        __imul__(NCollection_Mat4_Standard_ShortReal self, float const theFactor) -> NCollection_Mat4_Standard_ShortReal

        Compute per-element multiplication.
        @param theFactor [in] the scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Mat4

        """
        return _Graphic3d.NCollection_Mat4_Standard_ShortReal___imul__(self, *args)


    def __mul__(self, *args):
        """
        __mul__(NCollection_Mat4_Standard_ShortReal self, NCollection_Vec4< float > const & theVec) -> NCollection_Vec4< float >
        __mul__(NCollection_Mat4_Standard_ShortReal self, NCollection_Mat4_Standard_ShortReal theMat) -> NCollection_Mat4_Standard_ShortReal
        __mul__(NCollection_Mat4_Standard_ShortReal self, float const theFactor) -> NCollection_Mat4_Standard_ShortReal

        Compute per-element multiplication.
        @param theFactor [in] the scale factor.
        @return the result of multiplicaton.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Mat4

        """
        return _Graphic3d.NCollection_Mat4_Standard_ShortReal___mul__(self, *args)


    def Multiplied(self, *args):
        """
        Multiplied(NCollection_Mat4_Standard_ShortReal self, NCollection_Mat4_Standard_ShortReal theMat) -> NCollection_Mat4_Standard_ShortReal
        Multiplied(NCollection_Mat4_Standard_ShortReal self, float const theFactor) -> NCollection_Mat4_Standard_ShortReal

        Compute per-element multiplication.
        @param theFactor [in] the scale factor.
        @return the result of multiplicaton.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Mat4

        """
        return _Graphic3d.NCollection_Mat4_Standard_ShortReal_Multiplied(self, *args)


    def Translate(self, *args):
        """
        Translate(NCollection_Mat4_Standard_ShortReal self, NCollection_Vec3_Standard_ShortReal theVec)

        Translate the matrix on the passed vector.
        @param theVec [in] the translation vector.

        :type theVec: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_ShortReal_Translate(self, *args)


    def Transposed(self, *args):
        """
        Transposed(NCollection_Mat4_Standard_ShortReal self) -> NCollection_Mat4_Standard_ShortReal

        Transpose the matrix.
        @return transposed copy of the matrix.

        :rtype: OCC.wrapper.NCollection.NCollection_Mat4

        """
        return _Graphic3d.NCollection_Mat4_Standard_ShortReal_Transposed(self, *args)


    def Transpose(self, *args):
        """
        Transpose(NCollection_Mat4_Standard_ShortReal self)

        Transpose the matrix.


        """
        return _Graphic3d.NCollection_Mat4_Standard_ShortReal_Transpose(self, *args)


    def Inverted(self, *args):
        """
        Inverted(NCollection_Mat4_Standard_ShortReal self, NCollection_Mat4_Standard_ShortReal theOutMx) -> bool

        Compute inverted matrix.
        @param theOutMx [out] the inverted matrix.
        @return true if reversion success.

        :type theOutMx: OCC.wrapper.NCollection.NCollection_Mat4_Element_t
        :rtype: bool

        """
        return _Graphic3d.NCollection_Mat4_Standard_ShortReal_Inverted(self, *args)


    def Map(*args):
        """
        Map(float * theData) -> NCollection_Mat4_Standard_ShortReal
        Map(float const * theData) -> NCollection_Mat4_Standard_ShortReal

        Maps plain C array to matrix type.

        :type theData: const Element_t *
        :rtype: OCC.wrapper.NCollection.NCollection_Mat4_Element_t

        """
        return _Graphic3d.NCollection_Mat4_Standard_ShortReal_Map(*args)

    Map = staticmethod(Map)
    __swig_destroy__ = _Graphic3d.delete_NCollection_Mat4_Standard_ShortReal
NCollection_Mat4_Standard_ShortReal_swigregister = _Graphic3d.NCollection_Mat4_Standard_ShortReal_swigregister
NCollection_Mat4_Standard_ShortReal_swigregister(NCollection_Mat4_Standard_ShortReal)

def NCollection_Mat4_Standard_ShortReal_Rows(*args):
    """
    NCollection_Mat4_Standard_ShortReal_Rows() -> size_t

    Get number of rows.
    @return number of rows.

    :rtype: size_t

    """
    return _Graphic3d.NCollection_Mat4_Standard_ShortReal_Rows(*args)

def NCollection_Mat4_Standard_ShortReal_Cols(*args):
    """
    NCollection_Mat4_Standard_ShortReal_Cols() -> size_t

    Get number of columns.
    @retur number of columns.

    :rtype: size_t

    """
    return _Graphic3d.NCollection_Mat4_Standard_ShortReal_Cols(*args)

def NCollection_Mat4_Standard_ShortReal_Map(*args):
    """
    Map(float * theData) -> NCollection_Mat4_Standard_ShortReal
    NCollection_Mat4_Standard_ShortReal_Map(float const * theData) -> NCollection_Mat4_Standard_ShortReal

    Maps plain C array to matrix type.

    :type theData: const Element_t *
    :rtype: OCC.wrapper.NCollection.NCollection_Mat4_Element_t

    """
    return _Graphic3d.NCollection_Mat4_Standard_ShortReal_Map(*args)


try:
	Graphic3d_Mat4 = NCollection_Mat4_Standard_ShortReal
except NameError:
	pass # does not exist, probably ignored

class Handle_Graphic3d_ShaderVariable(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_ShaderVariable self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_ShaderVariable_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_ShaderVariable self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_ShaderVariable_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_ShaderVariable self, Graphic3d_ShaderVariable thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_ShaderVariable_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_ShaderVariable self, Handle_Graphic3d_ShaderVariable theHandle) -> Handle_Graphic3d_ShaderVariable
        assign(Handle_Graphic3d_ShaderVariable self, Graphic3d_ShaderVariable thePtr) -> Handle_Graphic3d_ShaderVariable
        assign(Handle_Graphic3d_ShaderVariable self, Handle_Graphic3d_ShaderVariable theHandle) -> Handle_Graphic3d_ShaderVariable

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_ShaderVariable_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_ShaderVariable self) -> Graphic3d_ShaderVariable

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ShaderVariable_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_ShaderVariable self) -> Graphic3d_ShaderVariable

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ShaderVariable___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_ShaderVariable self) -> Graphic3d_ShaderVariable

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_ShaderVariable___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_ShaderVariable___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_ShaderVariable___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_ShaderVariable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ShaderVariable_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_ShaderVariable

    def Name(self, *args):
        """
        Returns name of shader variable.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Handle_Graphic3d_ShaderVariable_Name(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsDone(self, *args):
        """
        IsDone(Handle_Graphic3d_ShaderVariable self) -> Standard_Boolean

        Checks if the shader variable is valid or not.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ShaderVariable_IsDone(self, *args)


    def Value(self, *args):
        """
        Value(Handle_Graphic3d_ShaderVariable self) -> Graphic3d_ValueInterface *

        Returns interface of shader variable value.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ValueInterface

        """
        return _Graphic3d.Handle_Graphic3d_ShaderVariable_Value(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_ShaderVariable self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_ShaderVariable_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ShaderVariable_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ShaderVariable_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_ShaderVariable self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_ShaderVariable_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_ShaderVariable self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_ShaderVariable self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ShaderVariable_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_ShaderVariable self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_ShaderVariable self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ShaderVariable_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_ShaderVariable self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_ShaderVariable_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_ShaderVariable self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ShaderVariable_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_ShaderVariable self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_ShaderVariable_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_ShaderVariable self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ShaderVariable_DecrementRefCounter(self, *args)

Handle_Graphic3d_ShaderVariable_swigregister = _Graphic3d.Handle_Graphic3d_ShaderVariable_swigregister
Handle_Graphic3d_ShaderVariable_swigregister(Handle_Graphic3d_ShaderVariable)

def Handle_Graphic3d_ShaderVariable_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_ShaderVariable_DownCast(thing)
Handle_Graphic3d_ShaderVariable_DownCast = _Graphic3d.Handle_Graphic3d_ShaderVariable_DownCast

class Handle_Graphic3d_TextureRoot(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_TextureRoot self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_TextureRoot_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_TextureRoot self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_TextureRoot_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_TextureRoot self, Graphic3d_TextureRoot thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_TextureRoot_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_TextureRoot self, Handle_Graphic3d_TextureRoot theHandle) -> Handle_Graphic3d_TextureRoot
        assign(Handle_Graphic3d_TextureRoot self, Graphic3d_TextureRoot thePtr) -> Handle_Graphic3d_TextureRoot
        assign(Handle_Graphic3d_TextureRoot self, Handle_Graphic3d_TextureRoot theHandle) -> Handle_Graphic3d_TextureRoot

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_TextureRoot_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_TextureRoot self) -> Graphic3d_TextureRoot

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_TextureRoot_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_TextureRoot self) -> Graphic3d_TextureRoot

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_TextureRoot___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_TextureRoot self) -> Graphic3d_TextureRoot

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_TextureRoot___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_TextureRoot___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_TextureRoot___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_TextureRoot(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_TextureRoot_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_TextureRoot

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_TextureRoot self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_TextureRoot_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_TextureRoot_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_TextureRoot_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TexturesFolder(self, *args):
        """
        TexturesFolder(Handle_Graphic3d_TextureRoot self) -> TCollection_AsciiString

        The path to textures determined from CSF_MDTVTexturesDirectory or CASROOT environment variables.
        @return the root folder with default textures.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Handle_Graphic3d_TextureRoot_TexturesFolder(self, *args)


    def IsDone(self, *args):
        """
        IsDone(Handle_Graphic3d_TextureRoot self) -> Standard_Boolean

        Checks if a texture class is valid or not.
        @return true if the construction of the class is correct

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_TextureRoot_IsDone(self, *args)


    def Path(self, *args):
        """
        Returns the full path of the defined texture.
        It could be empty path if GetImage() is overridden to load image not from file.

        :rtype: OCC.wrapper.OSD.OSD_Path

        """
        res = _Graphic3d.Handle_Graphic3d_TextureRoot_Path(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Type(self, *args):
        """
        Type(Handle_Graphic3d_TextureRoot self) -> Graphic3d_TypeOfTexture

        @return the texture type.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfTexture

        """
        return _Graphic3d.Handle_Graphic3d_TextureRoot_Type(self, *args)


    def GetId(self, *args):
        """
        This ID will be used to manage resource in graphic driver.

        Default implementation generates unique ID within constructor;
        inheritors may re-initialize it within their constructor,
        but should never modify it afterwards.

        Multiple Graphic3d_TextureRoot instances with same ID
        will be treated as single texture with different parameters
        to optimize memory usage though this will be more natural
        to use same instance of Graphic3d_TextureRoot when possible.

        If this ID is set to empty string by inheritor,
        then independent graphical resource will be created
        for each instance of Graphic3d_AspectFillArea3d where texture will be used.

        @return texture identifier.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Handle_Graphic3d_TextureRoot_GetId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Revision(self, *args):
        """
        Revision(Handle_Graphic3d_TextureRoot self) -> Standard_Size

        Return image revision.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Handle_Graphic3d_TextureRoot_Revision(self, *args)


    def UpdateRevision(self, *args):
        """
        UpdateRevision(Handle_Graphic3d_TextureRoot self)

        Update image revision.
        Can be used for signaling changes in the texture source (e.g. file update, pixmap update)
        without re-creating texture source itself (since unique id should be never modified).


        """
        return _Graphic3d.Handle_Graphic3d_TextureRoot_UpdateRevision(self, *args)


    def GetImage(self, *args):
        """
        GetImage(Handle_Graphic3d_TextureRoot self) -> Handle_Image_PixMap

        This method will be called by graphic driver each time when texture resource should be created.
        Default constructors allow defining the texture source as path to texture image or directly as pixmap.
        If the source is defined as path, then the image will be dynamically loaded when this method is called
        (and no copy will be preserved in this class instance).
        Inheritors may dynamically generate the image.
        Notice, image data should be in Bottom-Up order (see Image_PixMap::IsTopDown())!
        @return the image for texture.

        :rtype: OCC.wrapper.Image.Handle_Image_PixMap

        """
        return _Graphic3d.Handle_Graphic3d_TextureRoot_GetImage(self, *args)


    def GetParams(self, *args):
        """
        @return low-level texture parameters

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureParams

        """
        res = _Graphic3d.Handle_Graphic3d_TextureRoot_GetParams(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_TextureRoot self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_TextureRoot_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_TextureRoot self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_TextureRoot self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_TextureRoot_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_TextureRoot self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_TextureRoot self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_TextureRoot_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_TextureRoot self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_TextureRoot_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_TextureRoot self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_TextureRoot_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_TextureRoot self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_TextureRoot_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_TextureRoot self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_TextureRoot_DecrementRefCounter(self, *args)

Handle_Graphic3d_TextureRoot_swigregister = _Graphic3d.Handle_Graphic3d_TextureRoot_swigregister
Handle_Graphic3d_TextureRoot_swigregister(Handle_Graphic3d_TextureRoot)

def Handle_Graphic3d_TextureRoot_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_TextureRoot_DownCast(thing)
Handle_Graphic3d_TextureRoot_DownCast = _Graphic3d.Handle_Graphic3d_TextureRoot_DownCast

class Handle_Graphic3d_NMapOfTransient(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_NMapOfTransient self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_NMapOfTransient_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_NMapOfTransient self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_NMapOfTransient_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_NMapOfTransient self, NCollection_Shared< NCollection_Map< Standard_Transient const * > > * thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_NMapOfTransient_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_NMapOfTransient self, opencascade::handle< NCollection_Shared< NCollection_Map< Standard_Transient const * > > > const & theHandle) -> opencascade::handle< NCollection_Shared< NCollection_Map< Standard_Transient const * > > >
        assign(Handle_Graphic3d_NMapOfTransient self, NCollection_Shared< NCollection_Map< Standard_Transient const * > > const * thePtr) -> opencascade::handle< NCollection_Shared< NCollection_Map< Standard_Transient const * > > >
        assign(Handle_Graphic3d_NMapOfTransient self, opencascade::handle< NCollection_Shared< NCollection_Map< Standard_Transient const * > > > && theHandle) -> opencascade::handle< NCollection_Shared< NCollection_Map< Standard_Transient const * > > > &

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_NMapOfTransient_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_NMapOfTransient self) -> NCollection_Shared< NCollection_Map< Standard_Transient const * > > *

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_NMapOfTransient_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_NMapOfTransient self) -> NCollection_Shared< NCollection_Map< Standard_Transient const * > > *

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_NMapOfTransient___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_NMapOfTransient self) -> NCollection_Shared< NCollection_Map< Standard_Transient const * > > &

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_NMapOfTransient___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_NMapOfTransient___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_NMapOfTransient___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_NMapOfTransient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_NMapOfTransient_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_NMapOfTransient
Handle_Graphic3d_NMapOfTransient_swigregister = _Graphic3d.Handle_Graphic3d_NMapOfTransient_swigregister
Handle_Graphic3d_NMapOfTransient_swigregister(Handle_Graphic3d_NMapOfTransient)

def Handle_Graphic3d_NMapOfTransient_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_NMapOfTransient_DownCast(thing)
Handle_Graphic3d_NMapOfTransient_DownCast = _Graphic3d.Handle_Graphic3d_NMapOfTransient_DownCast

class Graphic3d_IndexBuffer(Graphic3d_Buffer):
    """Index buffer."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_IndexBuffer
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_IndexBuffer(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Graphic3d_IndexBuffer self, Handle_NCollection_BaseAllocator theAlloc) -> Graphic3d_IndexBuffer

        Empty constructor.

        :type theAlloc: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        this = _Graphic3d.new_Graphic3d_IndexBuffer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def InitInt32(self, *args):
        """
        InitInt32(Graphic3d_IndexBuffer self, Standard_Integer const theNbElems) -> bool

        Allocates new empty index array

        :type theNbElems: int
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_IndexBuffer_InitInt32(self, *args)


    def Index(self, *args):
        """
        Index(Graphic3d_IndexBuffer self, Standard_Integer const theIndex) -> Standard_Integer

        Access index at specified position

        :type theIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_IndexBuffer_Index(self, *args)


    def SetIndex(self, *args):
        """
        SetIndex(Graphic3d_IndexBuffer self, Standard_Integer const theIndex, Standard_Integer const theValue)

        Change index at specified position

        :type theIndex: int
        :type theValue: int

        """
        return _Graphic3d.Graphic3d_IndexBuffer_SetIndex(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_IndexBuffer_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_IndexBuffer_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_IndexBuffer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, theNbElems):
        return _Graphic3d.Graphic3d_IndexBuffer_Init(self, theNbElems)
    __swig_destroy__ = _Graphic3d.delete_Graphic3d_IndexBuffer
Graphic3d_IndexBuffer_swigregister = _Graphic3d.Graphic3d_IndexBuffer_swigregister
Graphic3d_IndexBuffer_swigregister(Graphic3d_IndexBuffer)

def Graphic3d_IndexBuffer_get_type_name(*args):
    """
    Graphic3d_IndexBuffer_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_IndexBuffer_get_type_name(*args)

def Graphic3d_IndexBuffer_get_type_descriptor(*args):
    """
    Graphic3d_IndexBuffer_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_IndexBuffer_get_type_descriptor(*args)

class Handle_Graphic3d_ArrayOfTriangleStrips(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_ArrayOfTriangleStrips self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_ArrayOfTriangleStrips self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_ArrayOfTriangleStrips self, Graphic3d_ArrayOfTriangleStrips thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_ArrayOfTriangleStrips self, Handle_Graphic3d_ArrayOfTriangleStrips theHandle) -> Handle_Graphic3d_ArrayOfTriangleStrips
        assign(Handle_Graphic3d_ArrayOfTriangleStrips self, Graphic3d_ArrayOfTriangleStrips thePtr) -> Handle_Graphic3d_ArrayOfTriangleStrips
        assign(Handle_Graphic3d_ArrayOfTriangleStrips self, Handle_Graphic3d_ArrayOfTriangleStrips theHandle) -> Handle_Graphic3d_ArrayOfTriangleStrips

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_ArrayOfTriangleStrips self) -> Graphic3d_ArrayOfTriangleStrips

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_ArrayOfTriangleStrips self) -> Graphic3d_ArrayOfTriangleStrips

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_ArrayOfTriangleStrips self) -> Graphic3d_ArrayOfTriangleStrips

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_ArrayOfTriangleStrips(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_ArrayOfTriangleStrips

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_ArrayOfTriangleStrips self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Attributes(self, *args):
        """
        Returns vertex attributes buffer (colors, normals, texture coordinates).

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Buffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_Attributes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Type(self, *args):
        """
        Type(Handle_Graphic3d_ArrayOfTriangleStrips self) -> Graphic3d_TypeOfPrimitiveArray

        Returns the type of this primitive

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfPrimitiveArray

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_Type(self, *args)


    def StringType(self, *args):
        """
        StringType(Handle_Graphic3d_ArrayOfTriangleStrips self) -> Standard_CString

        Returns the string type of this primitive

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_StringType(self, *args)


    def HasVertexNormals(self, *args):
        """
        HasVertexNormals(Handle_Graphic3d_ArrayOfTriangleStrips self) -> Standard_Boolean

        Returns TRUE when vertex normals array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_HasVertexNormals(self, *args)


    def HasVertexColors(self, *args):
        """
        HasVertexColors(Handle_Graphic3d_ArrayOfTriangleStrips self) -> Standard_Boolean

        Returns TRUE when vertex colors array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_HasVertexColors(self, *args)


    def HasVertexTexels(self, *args):
        """
        HasVertexTexels(Handle_Graphic3d_ArrayOfTriangleStrips self) -> Standard_Boolean

        Returns TRUE when vertex texels array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_HasVertexTexels(self, *args)


    def VertexNumber(self, *args):
        """
        VertexNumber(Handle_Graphic3d_ArrayOfTriangleStrips self) -> Standard_Integer

        Returns the number of defined vertex

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_VertexNumber(self, *args)


    def ItemNumber(self, *args):
        """
        ItemNumber(Handle_Graphic3d_ArrayOfTriangleStrips self) -> Standard_Integer

        Returns the number of total items according to the array type.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_ItemNumber(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_Graphic3d_ArrayOfTriangleStrips self) -> Standard_Boolean

        Returns TRUE only when the contains of this array is available.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_IsValid(self, *args)


    def AddVertex(self, *args):
        """
        AddVertex(Handle_Graphic3d_ArrayOfTriangleStrips self, gp_Pnt theVertex) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleStrips self, NCollection_Vec3_Standard_ShortReal theVertex) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleStrips self, gp_Pnt theVertex, Quantity_Color theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleStrips self, gp_Pnt theVertex, Standard_Integer const theColor32) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleStrips self, gp_Pnt theVertex, Graphic3d_Vec4ub const & theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleStrips self, gp_Pnt theVertex, gp_Dir theNormal) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theNX, Standard_ShortReal const theNY, Standard_ShortReal const theNZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleStrips self, gp_Pnt theVertex, gp_Dir theNormal, Quantity_Color theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleStrips self, gp_Pnt theVertex, gp_Dir theNormal, Standard_Integer const theColor32) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleStrips self, gp_Pnt theVertex, gp_Pnt2d theTexel) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theTX, Standard_Real const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theTX, Standard_ShortReal const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleStrips self, gp_Pnt theVertex, gp_Dir theNormal, gp_Pnt2d theTexel) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ, Standard_Real const theTX, Standard_Real const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theNX, Standard_ShortReal const theNY, Standard_ShortReal const theNZ, Standard_ShortReal const theTX, Standard_ShortReal const theTY) -> Standard_Integer

        Adds a vertice,vertex normal and texture in the vertex array.
        Warning: Normal is ignored when the hasVNormals constructor parameter is FALSE
        and  Texel  is ignored when the hasVTexels  constructor parameter is FALSE.
        @return the actual vertex number

        :type theX: float
        :type theY: float
        :type theZ: float
        :type theNX: float
        :type theNY: float
        :type theNZ: float
        :type theTX: float
        :type theTY: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_AddVertex(self, *args)


    def SetVertice(self, *args):
        """
        SetVertice(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theIndex, gp_Pnt theVertex)
        SetVertice(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theIndex, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ)

        Change the vertice of rank theIndex in the array.

        :type theIndex: int
        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_SetVertice(self, *args)


    def SetVertexColor(self, *args):
        """
        SetVertexColor(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theIndex, Quantity_Color theColor)
        SetVertexColor(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theIndex, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB)
        SetVertexColor(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theIndex, Graphic3d_Vec4ub const & theColor)
        SetVertexColor(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theIndex, Standard_Integer const theColor32)

        Change the vertex color of rank theIndex> in the array.
        @code
        theColor32 = Alpha << 24 + Blue << 16 + Green << 8 + Red
        @endcode

        :type theIndex: int
        :type theColor32: int

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_SetVertexColor(self, *args)


    def SetVertexNormal(self, *args):
        """
        SetVertexNormal(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theIndex, gp_Dir theNormal)
        SetVertexNormal(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theIndex, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ)

        Change the vertex normal of rank theIndex in the array.

        :type theIndex: int
        :type theNX: float
        :type theNY: float
        :type theNZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_SetVertexNormal(self, *args)


    def SetVertexTexel(self, *args):
        """
        SetVertexTexel(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theIndex, gp_Pnt2d theTexel)
        SetVertexTexel(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theIndex, Standard_Real const theTX, Standard_Real const theTY)

        Change the vertex texel of rank theIndex in the array.

        :type theIndex: int
        :type theTX: float
        :type theTY: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_SetVertexTexel(self, *args)


    def Vertice(self, *args):
        """
        Vertice(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theRank) -> gp_Pnt
        Vertice(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theRank)

        Returns the vertice coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_Vertice(self, *args)


    def VertexColor(self, *args):
        """
        VertexColor(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theRank) -> Quantity_Color
        VertexColor(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theIndex, Graphic3d_Vec4ub & theColor)
        VertexColor(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theRank)
        VertexColor(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theRank)

        Returns the vertex color values at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theColor: int

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_VertexColor(self, *args)


    def VertexNormal(self, *args):
        """
        VertexNormal(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theRank) -> gp_Dir
        VertexNormal(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theRank)

        Returns the vertex normal coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theNX: float
        :type theNY: float
        :type theNZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_VertexNormal(self, *args)


    def VertexTexel(self, *args):
        """
        VertexTexel(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theRank) -> gp_Pnt2d
        VertexTexel(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theRank)

        Returns the vertex texture coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theTX: float
        :type theTY: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_VertexTexel(self, *args)


    def Indices(self, *args):
        """
        Returns optional index buffer.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_IndexBuffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_Indices(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def EdgeNumber(self, *args):
        """
        EdgeNumber(Handle_Graphic3d_ArrayOfTriangleStrips self) -> Standard_Integer

        Returns the number of defined edges

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_EdgeNumber(self, *args)


    def Edge(self, *args):
        """
        Edge(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theRank) -> Standard_Integer

        Returns the vertex index at rank theRank in the range [1,EdgeNumber()]

        :type theRank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_Edge(self, *args)


    def AddEdge(self, *args):
        """
        AddEdge(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theVertexIndex) -> Standard_Integer

        Adds an edge in the range [1,VertexNumber()] in the array.
        @return the actual edges number

        :type theVertexIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_AddEdge(self, *args)


    def Bounds(self, *args):
        """
        Returns optional bounds buffer.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_BoundBuffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_Bounds(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasBoundColors(self, *args):
        """
        HasBoundColors(Handle_Graphic3d_ArrayOfTriangleStrips self) -> Standard_Boolean

        Returns TRUE when bound colors array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_HasBoundColors(self, *args)


    def BoundNumber(self, *args):
        """
        BoundNumber(Handle_Graphic3d_ArrayOfTriangleStrips self) -> Standard_Integer

        Returns the number of defined bounds

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_BoundNumber(self, *args)


    def Bound(self, *args):
        """
        Bound(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theRank) -> Standard_Integer

        Returns the edge number at rank theRank.

        :type theRank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_Bound(self, *args)


    def BoundColor(self, *args):
        """
        BoundColor(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theRank) -> Quantity_Color
        BoundColor(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theRank)

        Returns the bound color values at rank theRank from the bound table if defined.

        :type theRank: int
        :type theR: float
        :type theG: float
        :type theB: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_BoundColor(self, *args)


    def AddBound(self, *args):
        """
        AddBound(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theEdgeNumber) -> Standard_Integer
        AddBound(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theEdgeNumber, Quantity_Color theBColor) -> Standard_Integer
        AddBound(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theEdgeNumber, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB) -> Standard_Integer

        Adds a bound of length theEdgeNumber and bound color coordinates in the bound array.
        Warning: <theR,theG,theB> are ignored when the hasBColors constructor parameter is FALSE
        @return the actual bounds number

        :type theEdgeNumber: int
        :type theR: float
        :type theG: float
        :type theB: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_AddBound(self, *args)


    def SetBoundColor(self, *args):
        """
        SetBoundColor(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theIndex, Quantity_Color theColor)
        SetBoundColor(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_Integer const theIndex, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB)

        Change the bound color of rank theIndex in the array.

        :type theIndex: int
        :type theR: float
        :type theG: float
        :type theB: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_SetBoundColor(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_ArrayOfTriangleStrips self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_ArrayOfTriangleStrips self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_ArrayOfTriangleStrips self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_ArrayOfTriangleStrips self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_ArrayOfTriangleStrips self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_ArrayOfTriangleStrips self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_ArrayOfTriangleStrips self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_ArrayOfTriangleStrips self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_DecrementRefCounter(self, *args)

Handle_Graphic3d_ArrayOfTriangleStrips_swigregister = _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_swigregister
Handle_Graphic3d_ArrayOfTriangleStrips_swigregister(Handle_Graphic3d_ArrayOfTriangleStrips)

def Handle_Graphic3d_ArrayOfTriangleStrips_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_DownCast(thing)
Handle_Graphic3d_ArrayOfTriangleStrips_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfTriangleStrips_DownCast

class Handle_Graphic3d_AspectLine3d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_AspectLine3d self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_AspectLine3d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_AspectLine3d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_AspectLine3d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_AspectLine3d self, Graphic3d_AspectLine3d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_AspectLine3d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_AspectLine3d self, Handle_Graphic3d_AspectLine3d theHandle) -> Handle_Graphic3d_AspectLine3d
        assign(Handle_Graphic3d_AspectLine3d self, Graphic3d_AspectLine3d thePtr) -> Handle_Graphic3d_AspectLine3d
        assign(Handle_Graphic3d_AspectLine3d self, Handle_Graphic3d_AspectLine3d theHandle) -> Handle_Graphic3d_AspectLine3d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_AspectLine3d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_AspectLine3d self) -> Graphic3d_AspectLine3d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_AspectLine3d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_AspectLine3d self) -> Graphic3d_AspectLine3d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_AspectLine3d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_AspectLine3d self) -> Graphic3d_AspectLine3d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_AspectLine3d___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_AspectLine3d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_AspectLine3d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_AspectLine3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_AspectLine3d_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_AspectLine3d

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_AspectLine3d self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_AspectLine3d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_AspectLine3d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_AspectLine3d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ColorRGBA(self, *args):
        """
        Return color.

        :rtype: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        res = _Graphic3d.Handle_Graphic3d_AspectLine3d_ColorRGBA(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Color(self, *args):
        """
        Return color.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Handle_Graphic3d_AspectLine3d_Color(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetColor(self, *args):
        """
        SetColor(Handle_Graphic3d_AspectLine3d self, Quantity_Color theColor)

        Modifies the color.

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Graphic3d.Handle_Graphic3d_AspectLine3d_SetColor(self, *args)


    def Type(self, *args):
        """
        Type(Handle_Graphic3d_AspectLine3d self) -> Aspect_TypeOfLine

        Return line type.

        :rtype: OCC.wrapper.Aspect.Aspect_TypeOfLine

        """
        return _Graphic3d.Handle_Graphic3d_AspectLine3d_Type(self, *args)


    def SetType(self, *args):
        """
        SetType(Handle_Graphic3d_AspectLine3d self, Aspect_TypeOfLine const theType)

        Modifies the type of line.

        :type theType: OCC.wrapper.Aspect.Aspect_TypeOfLine

        """
        return _Graphic3d.Handle_Graphic3d_AspectLine3d_SetType(self, *args)


    def Width(self, *args):
        """
        Width(Handle_Graphic3d_AspectLine3d self) -> Standard_ShortReal

        Return line width.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Handle_Graphic3d_AspectLine3d_Width(self, *args)


    def SetWidth(self, *args):
        """
        SetWidth(Handle_Graphic3d_AspectLine3d self, Standard_Real const theWidth)
        SetWidth(Handle_Graphic3d_AspectLine3d self, Standard_ShortReal const theWidth)

        Modifies the line thickness.
        Warning: Raises AspectLineDefinitionError if the width is a negative value.

        :type theWidth: float

        """
        return _Graphic3d.Handle_Graphic3d_AspectLine3d_SetWidth(self, *args)


    def ShaderProgram(self, *args):
        """
        Return shader program.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderProgram

        """
        res = _Graphic3d.Handle_Graphic3d_AspectLine3d_ShaderProgram(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetShaderProgram(self, *args):
        """
        SetShaderProgram(Handle_Graphic3d_AspectLine3d self, Handle_Graphic3d_ShaderProgram theProgram)

        Sets up OpenGL/GLSL shader program.

        :type theProgram: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderProgram

        """
        return _Graphic3d.Handle_Graphic3d_AspectLine3d_SetShaderProgram(self, *args)


    def IsEqual(self, *args):
        """
        IsEqual(Handle_Graphic3d_AspectLine3d self, Graphic3d_AspectLine3d theOther) -> bool

        Check for equality with another line aspect.

        :type theOther: OCC.wrapper.Graphic3d.Graphic3d_AspectLine3d
        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_AspectLine3d_IsEqual(self, *args)


    def Values(self, *args):
        """
        Values(Handle_Graphic3d_AspectLine3d self, Quantity_Color theColor)

        Returns the current values of the group.

        :type theColor: OCC.wrapper.Quantity.Quantity_Color
        :type theType: OCC.wrapper.Aspect.Aspect_TypeOfLine
        :type theWidth: float

        """
        return _Graphic3d.Handle_Graphic3d_AspectLine3d_Values(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_AspectLine3d self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_AspectLine3d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_AspectLine3d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_AspectLine3d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_AspectLine3d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_AspectLine3d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_AspectLine3d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_AspectLine3d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_AspectLine3d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_AspectLine3d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_AspectLine3d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_AspectLine3d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_AspectLine3d self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_AspectLine3d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_AspectLine3d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_AspectLine3d_DecrementRefCounter(self, *args)

Handle_Graphic3d_AspectLine3d_swigregister = _Graphic3d.Handle_Graphic3d_AspectLine3d_swigregister
Handle_Graphic3d_AspectLine3d_swigregister(Handle_Graphic3d_AspectLine3d)

def Handle_Graphic3d_AspectLine3d_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_AspectLine3d_DownCast(thing)
Handle_Graphic3d_AspectLine3d_DownCast = _Graphic3d.Handle_Graphic3d_AspectLine3d_DownCast

class Handle_Graphic3d_CView(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_CView self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_CView_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_CView self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_CView_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_CView self, Graphic3d_CView thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_CView_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_CView self, Handle_Graphic3d_CView theHandle) -> Handle_Graphic3d_CView
        assign(Handle_Graphic3d_CView self, Graphic3d_CView thePtr) -> Handle_Graphic3d_CView
        assign(Handle_Graphic3d_CView self, Handle_Graphic3d_CView theHandle) -> Handle_Graphic3d_CView

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_CView_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_CView self) -> Graphic3d_CView

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_CView_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_CView self) -> Graphic3d_CView

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_CView___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_CView self) -> Graphic3d_CView

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_CView___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_CView___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_CView___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_CView(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_CView_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_CView

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_CView self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_CView_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_CView_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_CView_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Identification(self, *args):
        """
        Identification(Handle_Graphic3d_CView self) -> Standard_Integer

        Returns the identification number of the view.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_CView_Identification(self, *args)


    def Activate(self, *args):
        """
        Activate(Handle_Graphic3d_CView self)

        Activates the view. Maps presentations defined within structure manager onto this view.


        """
        return _Graphic3d.Handle_Graphic3d_CView_Activate(self, *args)


    def Deactivate(self, *args):
        """
        Deactivate(Handle_Graphic3d_CView self)

        Deactivates the view. Unmaps presentations defined within structure manager.
        The view in deactivated state will ignore actions on structures such as Display().


        """
        return _Graphic3d.Handle_Graphic3d_CView_Deactivate(self, *args)


    def IsActive(self, *args):
        """
        IsActive(Handle_Graphic3d_CView self) -> Standard_Boolean

        Returns the activity flag of the view.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_CView_IsActive(self, *args)


    def Remove(self, *args):
        """
        Remove(Handle_Graphic3d_CView self)

        Erases the view and removes from graphic driver.
        No more graphic operations are allowed in this view after the call.


        """
        return _Graphic3d.Handle_Graphic3d_CView_Remove(self, *args)


    def IsRemoved(self, *args):
        """
        IsRemoved(Handle_Graphic3d_CView self) -> Standard_Boolean

        Returns true if the view was removed.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_CView_IsRemoved(self, *args)


    def ShadingModel(self, *args):
        """
        ShadingModel(Handle_Graphic3d_CView self) -> Graphic3d_TypeOfShadingModel

        Returns default Shading Model of the view; Graphic3d_TOSM_FRAGMENT by default.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfShadingModel

        """
        return _Graphic3d.Handle_Graphic3d_CView_ShadingModel(self, *args)


    def SetShadingModel(self, *args):
        """
        SetShadingModel(Handle_Graphic3d_CView self, Graphic3d_TypeOfShadingModel theModel)

        Sets default Shading Model of the view.
        Will throw an exception on attempt to set Graphic3d_TOSM_DEFAULT.

        :type theModel: OCC.wrapper.Graphic3d.Graphic3d_TypeOfShadingModel

        """
        return _Graphic3d.Handle_Graphic3d_CView_SetShadingModel(self, *args)


    def VisualizationType(self, *args):
        """
        VisualizationType(Handle_Graphic3d_CView self) -> Graphic3d_TypeOfVisualization

        Returns visualization type of the view.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfVisualization

        """
        return _Graphic3d.Handle_Graphic3d_CView_VisualizationType(self, *args)


    def SetVisualizationType(self, *args):
        """
        SetVisualizationType(Handle_Graphic3d_CView self, Graphic3d_TypeOfVisualization const theType)

        Sets visualization type of the view.

        :type theType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfVisualization

        """
        return _Graphic3d.Handle_Graphic3d_CView_SetVisualizationType(self, *args)


    def SetComputedMode(self, *args):
        """
        SetComputedMode(Handle_Graphic3d_CView self, Standard_Boolean const theMode)

        Switches computed HLR mode in the view

        :type theMode: bool

        """
        return _Graphic3d.Handle_Graphic3d_CView_SetComputedMode(self, *args)


    def ComputedMode(self, *args):
        """
        ComputedMode(Handle_Graphic3d_CView self) -> Standard_Boolean

        Returns the computed HLR mode state

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_CView_ComputedMode(self, *args)


    def ReCompute(self, *args):
        """
        ReCompute(Handle_Graphic3d_CView self, Handle_Graphic3d_Structure theStructure)

        Computes the new presentation of the structure  displayed in this view with the type Graphic3d_TOS_COMPUTED.

        :type theStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Handle_Graphic3d_CView_ReCompute(self, *args)


    def Update(self, *args):
        """
        Update(Handle_Graphic3d_CView self, Graphic3d_ZLayerId const theLayerId=Graphic3d_ZLayerId_UNKNOWN)

        Invalidates bounding box of specified ZLayerId.

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Handle_Graphic3d_CView_Update(self, *args)


    def Compute(self, *args):
        """
        Compute(Handle_Graphic3d_CView self)

        Computes the new presentation of the structures displayed in this view with the type Graphic3d_TOS_COMPUTED.


        """
        return _Graphic3d.Handle_Graphic3d_CView_Compute(self, *args)


    def ContainsFacet(self, *args):
        """
        ContainsFacet(Handle_Graphic3d_CView self) -> Standard_Boolean
        ContainsFacet(Handle_Graphic3d_CView self, Graphic3d_MapOfStructure const & theSet) -> Standard_Boolean

        Returns Standard_True if one of the structures in the set contains Polygons, Triangles or Quadrangles.

        :type theSet: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_CView_ContainsFacet(self, *args)


    def DisplayedStructures(self, *args):
        """
        DisplayedStructures(Handle_Graphic3d_CView self, Graphic3d_MapOfStructure & theStructures)

        Returns the set of structures displayed in this view.

        :type theStructures: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure

        """
        return _Graphic3d.Handle_Graphic3d_CView_DisplayedStructures(self, *args)


    def NumberOfDisplayedStructures(self, *args):
        """
        NumberOfDisplayedStructures(Handle_Graphic3d_CView self) -> Standard_Integer

        Returns number of displayed structures in the view.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_CView_NumberOfDisplayedStructures(self, *args)


    def HiddenObjects(self, *args):
        """
        Returns map of objects hidden within this specific view (not viewer-wise).

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_NMapOfTransient

        """
        res = _Graphic3d.Handle_Graphic3d_CView_HiddenObjects(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeHiddenObjects(self, *args):
        """
        ChangeHiddenObjects(Handle_Graphic3d_CView self) -> Handle_Graphic3d_NMapOfTransient

        Returns map of objects hidden within this specific view (not viewer-wise).

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_NMapOfTransient

        """
        return _Graphic3d.Handle_Graphic3d_CView_ChangeHiddenObjects(self, *args)


    def IsComputed(self, *args):
        """
        IsComputed(Handle_Graphic3d_CView self, Standard_Integer const theStructId, Handle_Graphic3d_Structure theComputedStruct) -> Standard_Boolean

        Returns Standard_True in case if the structure with the given <theStructId> is
        in list of structures to be computed and stores computed struct to <theComputedStruct>.

        :type theStructId: int
        :type theComputedStruct: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_CView_IsComputed(self, *args)


    def MinMaxValues(self, *args):
        """
        MinMaxValues(Handle_Graphic3d_CView self, Standard_Boolean const theToIncludeAuxiliary) -> Bnd_Box
        MinMaxValues(Handle_Graphic3d_CView self, Graphic3d_MapOfStructure const & theSet, Standard_Boolean const theToIncludeAuxiliary) -> Bnd_Box

        Returns the coordinates of the boundary box of all structures in the set <theSet>.
        If <theToIgnoreInfiniteFlag> is TRUE, then the boundary box
        also includes minimum and maximum limits of graphical elements
        forming parts of infinite structures.

        :type theSet: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure
        :type theToIncludeAuxiliary: bool
        :rtype: OCC.wrapper.Bnd.Bnd_Box

        """
        return _Graphic3d.Handle_Graphic3d_CView_MinMaxValues(self, *args)


    def StructureManager(self, *args):
        """
        Returns the structure manager handle which manage structures associated with this view.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_StructureManager

        """
        res = _Graphic3d.Handle_Graphic3d_CView_StructureManager(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Redraw(self, *args):
        """
        Redraw(Handle_Graphic3d_CView self)

        Redraw content of the view.


        """
        return _Graphic3d.Handle_Graphic3d_CView_Redraw(self, *args)


    def RedrawImmediate(self, *args):
        """
        RedrawImmediate(Handle_Graphic3d_CView self)

        Redraw immediate content of the view.


        """
        return _Graphic3d.Handle_Graphic3d_CView_RedrawImmediate(self, *args)


    def Invalidate(self, *args):
        """
        Invalidate(Handle_Graphic3d_CView self)

        Invalidates content of the view but does not redraw it.


        """
        return _Graphic3d.Handle_Graphic3d_CView_Invalidate(self, *args)


    def IsInvalidated(self, *args):
        """
        IsInvalidated(Handle_Graphic3d_CView self) -> Standard_Boolean

        Return true if view content cache has been invalidated.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_CView_IsInvalidated(self, *args)


    def Resized(self, *args):
        """
        Resized(Handle_Graphic3d_CView self)

        Handle changing size of the rendering window.


        """
        return _Graphic3d.Handle_Graphic3d_CView_Resized(self, *args)


    def SetImmediateModeDrawToFront(self, *args):
        """
        SetImmediateModeDrawToFront(Handle_Graphic3d_CView self, Standard_Boolean const theDrawToFrontBuffer) -> Standard_Boolean

        @param theDrawToFrontBuffer Advanced option to modify rendering mode:
        1. TRUE.  Drawing immediate mode structures directly to the front buffer over the scene image.
        Fast, so preferred for interactive work (used by default).
        However these extra drawings will be missed in image dump since it is performed from back buffer.
        Notice that since no pre-buffering used the V-Sync will be ignored and rendering could be seen
        in run-time (in case of slow hardware) and/or tearing may appear.
        So this is strongly recommended to draw only simple (fast) structures.
        2. FALSE. Drawing immediate mode structures to the back buffer.
        The complete scene is redrawn first, so this mode is slower if scene contains complex data and/or V-Sync
        is turned on. But it works in any case and is especially useful for view dump because the dump image is read
        from the back buffer.
        @return previous mode.

        :type theDrawToFrontBuffer: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_CView_SetImmediateModeDrawToFront(self, *args)


    def SetWindow(self, *args):
        """
        SetWindow(Handle_Graphic3d_CView self, Handle_Aspect_Window theWindow, Aspect_RenderingContext const theContext=None)

        Creates and maps rendering window to the view.
        @param theWindow [in] the window.
        @param theContext [in] the rendering context. If NULL the context will be created internally.

        :type theWindow: OCC.wrapper.Aspect.Handle_Aspect_Window
        :type theContext: OCC.wrapper.Aspect.Aspect_RenderingContext

        """
        return _Graphic3d.Handle_Graphic3d_CView_SetWindow(self, *args)


    def Window(self, *args):
        """
        Window(Handle_Graphic3d_CView self) -> Handle_Aspect_Window

        Returns the window associated to the view.

        :rtype: OCC.wrapper.Aspect.Handle_Aspect_Window

        """
        return _Graphic3d.Handle_Graphic3d_CView_Window(self, *args)


    def IsDefined(self, *args):
        """
        IsDefined(Handle_Graphic3d_CView self) -> Standard_Boolean

        Returns True if the window associated to the view is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_CView_IsDefined(self, *args)


    def GetGraduatedTrihedron(self, *args):
        """
        Returns data of a graduated trihedron

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_GraduatedTrihedron

        """
        res = _Graphic3d.Handle_Graphic3d_CView_GetGraduatedTrihedron(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GraduatedTrihedronDisplay(self, *args):
        """
        GraduatedTrihedronDisplay(Handle_Graphic3d_CView self, Graphic3d_GraduatedTrihedron theTrihedronData)

        Displays Graduated Trihedron.

        :type theTrihedronData: OCC.wrapper.Graphic3d.Graphic3d_GraduatedTrihedron

        """
        return _Graphic3d.Handle_Graphic3d_CView_GraduatedTrihedronDisplay(self, *args)


    def GraduatedTrihedronErase(self, *args):
        """
        GraduatedTrihedronErase(Handle_Graphic3d_CView self)

        Erases Graduated Trihedron.


        """
        return _Graphic3d.Handle_Graphic3d_CView_GraduatedTrihedronErase(self, *args)


    def GraduatedTrihedronMinMaxValues(self, *args):
        """
        GraduatedTrihedronMinMaxValues(Handle_Graphic3d_CView self, NCollection_Vec3_Standard_ShortReal theMin, NCollection_Vec3_Standard_ShortReal theMax)

        Sets minimum and maximum points of scene bounding box for Graduated Trihedron stored in graphic view object.
        @param theMin [in] the minimum point of scene.
        @param theMax [in] the maximum point of scene.

        :type theMin: OCC.wrapper.Graphic3d.Graphic3d_Vec3
        :type theMax: OCC.wrapper.Graphic3d.Graphic3d_Vec3

        """
        return _Graphic3d.Handle_Graphic3d_CView_GraduatedTrihedronMinMaxValues(self, *args)


    def BufferDump(self, *args):
        """
        BufferDump(Handle_Graphic3d_CView self, Image_PixMap theImage, Graphic3d_BufferType const & theBufferType) -> Standard_Boolean

        Dump active rendering buffer into specified memory buffer.

        :type theImage: OCC.wrapper.Image.Image_PixMap
        :type theBufferType: OCC.wrapper.Graphic3d.Graphic3d_BufferType
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_CView_BufferDump(self, *args)


    def Export(self, *args):
        """
        Export(Handle_Graphic3d_CView self, Standard_CString const theFileName, Graphic3d_ExportFormat const theFormat, Graphic3d_SortType const theSortType=Graphic3d_ST_BSP_Tree) -> Standard_Boolean

        Export scene into the one of the Vector graphics formats (SVG, PS, PDF...).
        In contrast to Bitmaps, Vector graphics is scalable (so you may got quality benefits
        on printing to laser printer). Notice however that results may differ a lot and
        do not contain some elements.

        :type theFileName: OCC.wrapper.Standard.Standard_CString
        :type theFormat: OCC.wrapper.Graphic3d.Graphic3d_ExportFormat
        :type theSortType: OCC.wrapper.Graphic3d.Graphic3d_SortType
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_CView_Export(self, *args)


    def InvalidateBVHData(self, *args):
        """
        InvalidateBVHData(Handle_Graphic3d_CView self, Graphic3d_ZLayerId const theLayerId)

        Marks BVH tree and the set of BVH primitives of correspondent priority list with id theLayerId as outdated.

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Handle_Graphic3d_CView_InvalidateBVHData(self, *args)


    def AddZLayer(self, *args):
        """
        AddZLayer(Handle_Graphic3d_CView self, Graphic3d_ZLayerId const theLayerId)

        Add a new top-level z layer with ID <theLayerId> for
        the view. Z layers allow drawing structures in higher layers
        in foreground of structures in lower layers. To add a structure
        to desired layer on display it is necessary to set the layer
        ID for the structure.

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Handle_Graphic3d_CView_AddZLayer(self, *args)


    def ZLayerMax(self, *args):
        """
        ZLayerMax(Handle_Graphic3d_CView self) -> Standard_Integer

        Returns the maximum Z layer ID.
        First layer ID is Graphic3d_ZLayerId_Default, last ID is ZLayerMax().

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_CView_ZLayerMax(self, *args)


    def InvalidateZLayerBoundingBox(self, *args):
        """
        InvalidateZLayerBoundingBox(Handle_Graphic3d_CView self, Graphic3d_ZLayerId const theLayerId)

        Returns the bounding box of all structures displayed in the Z layer.

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Handle_Graphic3d_CView_InvalidateZLayerBoundingBox(self, *args)


    def ZLayerBoundingBox(self, *args):
        """
        ZLayerBoundingBox(Handle_Graphic3d_CView self, Graphic3d_ZLayerId const theLayerId, Handle_Graphic3d_Camera theCamera, Standard_Integer const theWindowWidth, Standard_Integer const theWindowHeight, Standard_Boolean const theToIncludeAuxiliary) -> Bnd_Box

        Returns the bounding box of all structures displayed in the Z layer.
        @param theLayerId            layer identifier
        @param theCamera             camera definition
        @param theWindowWidth        viewport width  (for applying transformation-persistence)
        @param theWindowHeight       viewport height (for applying transformation-persistence)
        @param theToIncludeAuxiliary consider also auxiliary presentations (with infinite flag or with trihedron transformation persistence)
        @return computed bounding box

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId
        :type theCamera: OCC.wrapper.Graphic3d.Handle_Graphic3d_Camera
        :type theWindowWidth: int
        :type theWindowHeight: int
        :type theToIncludeAuxiliary: bool
        :rtype: OCC.wrapper.Bnd.Bnd_Box

        """
        return _Graphic3d.Handle_Graphic3d_CView_ZLayerBoundingBox(self, *args)


    def RemoveZLayer(self, *args):
        """
        RemoveZLayer(Handle_Graphic3d_CView self, Graphic3d_ZLayerId const theLayerId)

        Remove Z layer from the specified view. All structures
        displayed at the moment in layer will be displayed in default layer
        ( the bottom-level z layer ). To unset layer ID from associated
        structures use method UnsetZLayer (...).

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Handle_Graphic3d_CView_RemoveZLayer(self, *args)


    def SetZLayerSettings(self, *args):
        """
        SetZLayerSettings(Handle_Graphic3d_CView self, Graphic3d_ZLayerId const theLayerId, Graphic3d_ZLayerSettings const & theSettings)

        Sets the settings for a single Z layer of specified view.

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId
        :type theSettings: OCC.wrapper.Graphic3d.Graphic3d_ZLayerSettings

        """
        return _Graphic3d.Handle_Graphic3d_CView_SetZLayerSettings(self, *args)


    def ConsiderZoomPersistenceObjects(self, *args):
        """
        ConsiderZoomPersistenceObjects(Handle_Graphic3d_CView self) -> Standard_Real

        Returns zoom-scale factor.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Graphic3d.Handle_Graphic3d_CView_ConsiderZoomPersistenceObjects(self, *args)


    def FBO(self, *args):
        """
        FBO(Handle_Graphic3d_CView self) -> Handle_Standard_Transient

        Returns pointer to an assigned framebuffer object.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_CView_FBO(self, *args)


    def SetFBO(self, *args):
        """
        SetFBO(Handle_Graphic3d_CView self, Handle_Standard_Transient theFbo)

        Sets framebuffer object for offscreen rendering.

        :type theFbo: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_CView_SetFBO(self, *args)


    def FBOCreate(self, *args):
        """
        FBOCreate(Handle_Graphic3d_CView self, Standard_Integer const theWidth, Standard_Integer const theHeight) -> Handle_Standard_Transient

        Generate offscreen FBO in the graphic library.
        If not supported on hardware returns NULL.

        :type theWidth: int
        :type theHeight: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_CView_FBOCreate(self, *args)


    def FBORelease(self, *args):
        """
        FBORelease(Handle_Graphic3d_CView self, Handle_Standard_Transient theFbo)

        Remove offscreen FBO from the graphic library

        :type theFbo: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_CView_FBORelease(self, *args)


    def FBOGetDimensions(self, *args):
        """
        FBOGetDimensions(Handle_Graphic3d_CView self, Handle_Standard_Transient theFbo)

        Read offscreen FBO configuration.

        :type theFbo: OCC.wrapper.Standard.Handle_Standard_Transient
        :type theWidth: int
        :type theHeight: int
        :type theWidthMax: int
        :type theHeightMax: int

        """
        return _Graphic3d.Handle_Graphic3d_CView_FBOGetDimensions(self, *args)


    def FBOChangeViewport(self, *args):
        """
        FBOChangeViewport(Handle_Graphic3d_CView self, Handle_Standard_Transient theFbo, Standard_Integer const theWidth, Standard_Integer const theHeight)

        Change offscreen FBO viewport.

        :type theFbo: OCC.wrapper.Standard.Handle_Standard_Transient
        :type theWidth: int
        :type theHeight: int

        """
        return _Graphic3d.Handle_Graphic3d_CView_FBOChangeViewport(self, *args)


    def CopySettings(self, *args):
        """
        CopySettings(Handle_Graphic3d_CView self, Handle_Graphic3d_CView theOther)

        Copy visualization settings from another view.
        Method is used for cloning views in viewer when its required to create view
        with same view properties.

        :type theOther: OCC.wrapper.Graphic3d.Handle_Graphic3d_CView

        """
        return _Graphic3d.Handle_Graphic3d_CView_CopySettings(self, *args)


    def RenderingParams(self, *args):
        """
        Returns current rendering parameters and effect settings.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_RenderingParams

        """
        res = _Graphic3d.Handle_Graphic3d_CView_RenderingParams(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeRenderingParams(self, *args):
        """
        ChangeRenderingParams(Handle_Graphic3d_CView self) -> Graphic3d_RenderingParams

        Returns reference to current rendering parameters and effect settings.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_RenderingParams

        """
        return _Graphic3d.Handle_Graphic3d_CView_ChangeRenderingParams(self, *args)


    def Background(self, *args):
        """
        Background(Handle_Graphic3d_CView self) -> Aspect_Background

        Returns background  fill color.

        :rtype: OCC.wrapper.Aspect.Aspect_Background

        """
        return _Graphic3d.Handle_Graphic3d_CView_Background(self, *args)


    def SetBackground(self, *args):
        """
        SetBackground(Handle_Graphic3d_CView self, Aspect_Background theBackground)

        Sets background fill color.

        :type theBackground: OCC.wrapper.Aspect.Aspect_Background

        """
        return _Graphic3d.Handle_Graphic3d_CView_SetBackground(self, *args)


    def GradientBackground(self, *args):
        """
        GradientBackground(Handle_Graphic3d_CView self) -> Aspect_GradientBackground

        Returns gradient background fill colors.

        :rtype: OCC.wrapper.Aspect.Aspect_GradientBackground

        """
        return _Graphic3d.Handle_Graphic3d_CView_GradientBackground(self, *args)


    def SetGradientBackground(self, *args):
        """
        SetGradientBackground(Handle_Graphic3d_CView self, Aspect_GradientBackground theBackground)

        Sets gradient background fill colors.

        :type theBackground: OCC.wrapper.Aspect.Aspect_GradientBackground

        """
        return _Graphic3d.Handle_Graphic3d_CView_SetGradientBackground(self, *args)


    def BackgroundImage(self, *args):
        """
        BackgroundImage(Handle_Graphic3d_CView self) -> TCollection_AsciiString

        Returns background image texture file path.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Handle_Graphic3d_CView_BackgroundImage(self, *args)


    def SetBackgroundImage(self, *args):
        """
        SetBackgroundImage(Handle_Graphic3d_CView self, TCollection_AsciiString theFilePath)

        Sets background image texture file path.

        :type theFilePath: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Handle_Graphic3d_CView_SetBackgroundImage(self, *args)


    def BackgroundImageStyle(self, *args):
        """
        BackgroundImageStyle(Handle_Graphic3d_CView self) -> Aspect_FillMethod

        Returns background image fill style.

        :rtype: OCC.wrapper.Aspect.Aspect_FillMethod

        """
        return _Graphic3d.Handle_Graphic3d_CView_BackgroundImageStyle(self, *args)


    def SetBackgroundImageStyle(self, *args):
        """
        SetBackgroundImageStyle(Handle_Graphic3d_CView self, Aspect_FillMethod const theFillStyle)

        Sets background image fill style.

        :type theFillStyle: OCC.wrapper.Aspect.Aspect_FillMethod

        """
        return _Graphic3d.Handle_Graphic3d_CView_SetBackgroundImageStyle(self, *args)


    def TextureEnv(self, *args):
        """
        TextureEnv(Handle_Graphic3d_CView self) -> Handle_Graphic3d_TextureEnv

        Returns environment texture set for the view.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureEnv

        """
        return _Graphic3d.Handle_Graphic3d_CView_TextureEnv(self, *args)


    def SetTextureEnv(self, *args):
        """
        SetTextureEnv(Handle_Graphic3d_CView self, Handle_Graphic3d_TextureEnv theTextureEnv)

        Sets environment texture for the view.

        :type theTextureEnv: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureEnv

        """
        return _Graphic3d.Handle_Graphic3d_CView_SetTextureEnv(self, *args)


    def IsCullingEnabled(self, *args):
        """
        IsCullingEnabled(Handle_Graphic3d_CView self) -> Standard_Boolean

        Returns the state of frustum culling optimization.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_CView_IsCullingEnabled(self, *args)


    def SetCullingEnabled(self, *args):
        """
        SetCullingEnabled(Handle_Graphic3d_CView self, Standard_Boolean const theIsEnabled)

        Enables or disables frustum culling optimization.

        :type theIsEnabled: bool

        """
        return _Graphic3d.Handle_Graphic3d_CView_SetCullingEnabled(self, *args)


    def BackfacingModel(self, *args):
        """
        BackfacingModel(Handle_Graphic3d_CView self) -> Graphic3d_TypeOfBackfacingModel

        Return backfacing model used for the view.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfBackfacingModel

        """
        return _Graphic3d.Handle_Graphic3d_CView_BackfacingModel(self, *args)


    def SetBackfacingModel(self, *args):
        """
        SetBackfacingModel(Handle_Graphic3d_CView self, Graphic3d_TypeOfBackfacingModel const theModel)

        Sets backfacing model for the view.

        :type theModel: OCC.wrapper.Graphic3d.Graphic3d_TypeOfBackfacingModel

        """
        return _Graphic3d.Handle_Graphic3d_CView_SetBackfacingModel(self, *args)


    def Camera(self, *args):
        """
        Returns camera object of the view.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Camera

        """
        res = _Graphic3d.Handle_Graphic3d_CView_Camera(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetCamera(self, *args):
        """
        SetCamera(Handle_Graphic3d_CView self, Handle_Graphic3d_Camera theCamera)

        Sets camera used by the view.

        :type theCamera: OCC.wrapper.Graphic3d.Handle_Graphic3d_Camera

        """
        return _Graphic3d.Handle_Graphic3d_CView_SetCamera(self, *args)


    def Lights(self, *args):
        """
        Returns list of lights of the view.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_LightSet

        """
        res = _Graphic3d.Handle_Graphic3d_CView_Lights(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetLights(self, *args):
        """
        SetLights(Handle_Graphic3d_CView self, Handle_Graphic3d_LightSet theLights)

        Sets list of lights for the view.

        :type theLights: OCC.wrapper.Graphic3d.Handle_Graphic3d_LightSet

        """
        return _Graphic3d.Handle_Graphic3d_CView_SetLights(self, *args)


    def ClipPlanes(self, *args):
        """
        Returns list of clip planes set for the view.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane

        """
        res = _Graphic3d.Handle_Graphic3d_CView_ClipPlanes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetClipPlanes(self, *args):
        """
        SetClipPlanes(Handle_Graphic3d_CView self, Handle_Graphic3d_SequenceOfHClipPlane thePlanes)

        Sets list of clip planes for the view.

        :type thePlanes: OCC.wrapper.Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane

        """
        return _Graphic3d.Handle_Graphic3d_CView_SetClipPlanes(self, *args)


    def DiagnosticInformation(self, *args):
        """
        DiagnosticInformation(Handle_Graphic3d_CView self, NCollection_IndexedDataMap_TCollection_AsciiString_TCollection_AsciiString_TCollection_AsciiString theDict, Graphic3d_DiagnosticInfo theFlags)

        Fill in the dictionary with diagnostic info.
        Should be called within rendering thread.

        This API should be used only for user output or for creating automated reports.
        The format of returned information (e.g. key-value layout)
        is NOT part of this API and can be changed at any time.
        Thus application should not parse returned information to weed out specific parameters.

        :type theDict: OCC.wrapper.TColStd.TColStd_IndexedDataMapOfStringString
        :type theFlags: OCC.wrapper.Graphic3d.Graphic3d_DiagnosticInfo

        """
        return _Graphic3d.Handle_Graphic3d_CView_DiagnosticInformation(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_CView self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_CView_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_CView self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_CView self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_CView_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_CView self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_CView self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_CView_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_CView self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_CView_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_CView self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_CView_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_CView self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_CView_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_CView self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_CView_DecrementRefCounter(self, *args)

Handle_Graphic3d_CView_swigregister = _Graphic3d.Handle_Graphic3d_CView_swigregister
Handle_Graphic3d_CView_swigregister(Handle_Graphic3d_CView)

def Handle_Graphic3d_CView_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_CView_DownCast(thing)
Handle_Graphic3d_CView_DownCast = _Graphic3d.Handle_Graphic3d_CView_DownCast

class Handle_Graphic3d_Texture1Dmanual(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_Texture1Dmanual self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_Texture1Dmanual self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_Texture1Dmanual self, Graphic3d_Texture1Dmanual thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_Texture1Dmanual self, Handle_Graphic3d_Texture1Dmanual theHandle) -> Handle_Graphic3d_Texture1Dmanual
        assign(Handle_Graphic3d_Texture1Dmanual self, Graphic3d_Texture1Dmanual thePtr) -> Handle_Graphic3d_Texture1Dmanual
        assign(Handle_Graphic3d_Texture1Dmanual self, Handle_Graphic3d_Texture1Dmanual theHandle) -> Handle_Graphic3d_Texture1Dmanual

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_Texture1Dmanual self) -> Graphic3d_Texture1Dmanual

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_Texture1Dmanual self) -> Graphic3d_Texture1Dmanual

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_Texture1Dmanual self) -> Graphic3d_Texture1Dmanual

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_Texture1Dmanual___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_Texture1Dmanual(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_Texture1Dmanual_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_Texture1Dmanual

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_Texture1Dmanual self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_Texture1Dmanual_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_Texture1Dmanual_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Name(self, *args):
        """
        Name(Handle_Graphic3d_Texture1Dmanual self) -> Graphic3d_NameOfTexture1D

        Returns the name of the predefined textures or NOT_1D_UNKNOWN
        when the name is given as a filename.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_NameOfTexture1D

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_Name(self, *args)


    def NumberOfTextures(self, *args):
        """
        NumberOfTextures(Handle_Graphic3d_Texture1Dmanual self) -> Standard_Integer

        Returns the number of predefined textures.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_NumberOfTextures(self, *args)


    def TextureName(self, *args):
        """
        TextureName(Handle_Graphic3d_Texture1Dmanual self, Standard_Integer const aRank) -> TCollection_AsciiString

        Returns the name of the predefined texture of rank <aRank>

        :type aRank: int
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_TextureName(self, *args)


    def EnableSmooth(self, *args):
        """
        EnableSmooth(Handle_Graphic3d_Texture1Dmanual self)

        enable texture smoothing


        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_EnableSmooth(self, *args)


    def IsSmoothed(self, *args):
        """
        IsSmoothed(Handle_Graphic3d_Texture1Dmanual self) -> Standard_Boolean

        Returns TRUE if the texture is smoothed.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_IsSmoothed(self, *args)


    def DisableSmooth(self, *args):
        """
        DisableSmooth(Handle_Graphic3d_Texture1Dmanual self)

        disable texture smoothing


        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_DisableSmooth(self, *args)


    def EnableModulate(self, *args):
        """
        EnableModulate(Handle_Graphic3d_Texture1Dmanual self)

        enable texture modulate mode.
        the image is modulate with the shading of the surface.


        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_EnableModulate(self, *args)


    def DisableModulate(self, *args):
        """
        DisableModulate(Handle_Graphic3d_Texture1Dmanual self)

        disable texture modulate mode.
        the image is directly decal on the surface.


        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_DisableModulate(self, *args)


    def IsModulate(self, *args):
        """
        IsModulate(Handle_Graphic3d_Texture1Dmanual self) -> Standard_Boolean

        Returns TRUE if the texture is modulate.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_IsModulate(self, *args)


    def EnableRepeat(self, *args):
        """
        EnableRepeat(Handle_Graphic3d_Texture1Dmanual self)

        use this methods if you want to enable
        texture repetition on your objects.


        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_EnableRepeat(self, *args)


    def DisableRepeat(self, *args):
        """
        DisableRepeat(Handle_Graphic3d_Texture1Dmanual self)

        use this methods if you want to disable
        texture repetition on your objects.


        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_DisableRepeat(self, *args)


    def IsRepeat(self, *args):
        """
        IsRepeat(Handle_Graphic3d_Texture1Dmanual self) -> Standard_Boolean

        Returns TRUE if the texture repeat is enable.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_IsRepeat(self, *args)


    def AnisoFilter(self, *args):
        """
        AnisoFilter(Handle_Graphic3d_Texture1Dmanual self) -> Graphic3d_LevelOfTextureAnisotropy

        @return level of anisontropy texture filter.
        Default value is Graphic3d_LOTA_OFF.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_LevelOfTextureAnisotropy

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_AnisoFilter(self, *args)


    def SetAnisoFilter(self, *args):
        """
        SetAnisoFilter(Handle_Graphic3d_Texture1Dmanual self, Graphic3d_LevelOfTextureAnisotropy const theLevel)

        @param theLevel level of anisontropy texture filter.

        :type theLevel: OCC.wrapper.Graphic3d.Graphic3d_LevelOfTextureAnisotropy

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_SetAnisoFilter(self, *args)


    def TexturesFolder(self, *args):
        """
        TexturesFolder(Handle_Graphic3d_Texture1Dmanual self) -> TCollection_AsciiString

        The path to textures determined from CSF_MDTVTexturesDirectory or CASROOT environment variables.
        @return the root folder with default textures.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_TexturesFolder(self, *args)


    def IsDone(self, *args):
        """
        IsDone(Handle_Graphic3d_Texture1Dmanual self) -> Standard_Boolean

        Checks if a texture class is valid or not.
        @return true if the construction of the class is correct

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_IsDone(self, *args)


    def Path(self, *args):
        """
        Returns the full path of the defined texture.
        It could be empty path if GetImage() is overridden to load image not from file.

        :rtype: OCC.wrapper.OSD.OSD_Path

        """
        res = _Graphic3d.Handle_Graphic3d_Texture1Dmanual_Path(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Type(self, *args):
        """
        Type(Handle_Graphic3d_Texture1Dmanual self) -> Graphic3d_TypeOfTexture

        @return the texture type.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfTexture

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_Type(self, *args)


    def GetId(self, *args):
        """
        This ID will be used to manage resource in graphic driver.

        Default implementation generates unique ID within constructor;
        inheritors may re-initialize it within their constructor,
        but should never modify it afterwards.

        Multiple Graphic3d_TextureRoot instances with same ID
        will be treated as single texture with different parameters
        to optimize memory usage though this will be more natural
        to use same instance of Graphic3d_TextureRoot when possible.

        If this ID is set to empty string by inheritor,
        then independent graphical resource will be created
        for each instance of Graphic3d_AspectFillArea3d where texture will be used.

        @return texture identifier.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Handle_Graphic3d_Texture1Dmanual_GetId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Revision(self, *args):
        """
        Revision(Handle_Graphic3d_Texture1Dmanual self) -> Standard_Size

        Return image revision.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_Revision(self, *args)


    def UpdateRevision(self, *args):
        """
        UpdateRevision(Handle_Graphic3d_Texture1Dmanual self)

        Update image revision.
        Can be used for signaling changes in the texture source (e.g. file update, pixmap update)
        without re-creating texture source itself (since unique id should be never modified).


        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_UpdateRevision(self, *args)


    def GetImage(self, *args):
        """
        GetImage(Handle_Graphic3d_Texture1Dmanual self) -> Handle_Image_PixMap

        This method will be called by graphic driver each time when texture resource should be created.
        Default constructors allow defining the texture source as path to texture image or directly as pixmap.
        If the source is defined as path, then the image will be dynamically loaded when this method is called
        (and no copy will be preserved in this class instance).
        Inheritors may dynamically generate the image.
        Notice, image data should be in Bottom-Up order (see Image_PixMap::IsTopDown())!
        @return the image for texture.

        :rtype: OCC.wrapper.Image.Handle_Image_PixMap

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_GetImage(self, *args)


    def GetParams(self, *args):
        """
        @return low-level texture parameters

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureParams

        """
        res = _Graphic3d.Handle_Graphic3d_Texture1Dmanual_GetParams(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_Texture1Dmanual self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_Texture1Dmanual self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_Texture1Dmanual self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_Texture1Dmanual self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_Texture1Dmanual self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_Texture1Dmanual self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_Texture1Dmanual self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_Texture1Dmanual self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_Texture1Dmanual self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_DecrementRefCounter(self, *args)

Handle_Graphic3d_Texture1Dmanual_swigregister = _Graphic3d.Handle_Graphic3d_Texture1Dmanual_swigregister
Handle_Graphic3d_Texture1Dmanual_swigregister(Handle_Graphic3d_Texture1Dmanual)

def Handle_Graphic3d_Texture1Dmanual_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_Texture1Dmanual_DownCast(thing)
Handle_Graphic3d_Texture1Dmanual_DownCast = _Graphic3d.Handle_Graphic3d_Texture1Dmanual_DownCast


try:
	Graphic3d_BndBox4d = BVH_Box_Standard_Real_
except NameError:
	pass # does not exist, probably ignored

class NCollection_Vec3_Standard_Byte(object):
    """
    Generic 3-components vector.
    To be used as RGB color pixel or XYZ 3D-point.
    The main target for this class - to handle raw low-level arrays (from/to graphic driver etc.).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Length(*args):
        """
        Length() -> int

        Returns the number of components.

        :rtype: int

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_Length(*args)

    Length = staticmethod(Length)

    def __init__(self, *args):
        """
        Generic 3-components vector.
        To be used as RGB color pixel or XYZ 3D-point.
        The main target for this class - to handle raw low-level arrays (from/to graphic driver etc.).
        """
        this = _Graphic3d.new_NCollection_Vec3_Standard_Byte(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetValues(self, *args):
        """
        SetValues(NCollection_Vec3_Standard_Byte self, unsigned char const theX, unsigned char const theY, unsigned char const theZ)

        Assign new values to the vector.

        :type theX: const Element_t
        :type theY: const Element_t
        :type theZ: const Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_SetValues(self, *args)


    def yx(self, *args):
        """
        yx(NCollection_Vec3_Standard_Byte self) -> NCollection_Vec2_Standard_Byte

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_yx(self, *args)


    def xz(self, *args):
        """
        xz(NCollection_Vec3_Standard_Byte self) -> NCollection_Vec2_Standard_Byte

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_xz(self, *args)


    def zx(self, *args):
        """
        zx(NCollection_Vec3_Standard_Byte self) -> NCollection_Vec2_Standard_Byte

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_zx(self, *args)


    def zy(self, *args):
        """
        zy(NCollection_Vec3_Standard_Byte self) -> NCollection_Vec2_Standard_Byte

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_zy(self, *args)


    def xyz(self, *args):
        """
        xyz(NCollection_Vec3_Standard_Byte self) -> NCollection_Vec3_Standard_Byte

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_xyz(self, *args)


    def xzy(self, *args):
        """
        xzy(NCollection_Vec3_Standard_Byte self) -> NCollection_Vec3_Standard_Byte

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_xzy(self, *args)


    def yxz(self, *args):
        """
        yxz(NCollection_Vec3_Standard_Byte self) -> NCollection_Vec3_Standard_Byte

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_yxz(self, *args)


    def yzx(self, *args):
        """
        yzx(NCollection_Vec3_Standard_Byte self) -> NCollection_Vec3_Standard_Byte

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_yzx(self, *args)


    def zyx(self, *args):
        """
        zyx(NCollection_Vec3_Standard_Byte self) -> NCollection_Vec3_Standard_Byte

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_zyx(self, *args)


    def zxy(self, *args):
        """
        zxy(NCollection_Vec3_Standard_Byte self) -> NCollection_Vec3_Standard_Byte

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_zxy(self, *args)


    def x(self, *args):
        """
        x(NCollection_Vec3_Standard_Byte self) -> unsigned char
        x(NCollection_Vec3_Standard_Byte self) -> unsigned char &

        Alias to 1st component as X coordinate in XYZ.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_x(self, *args)


    def r(self, *args):
        """
        r(NCollection_Vec3_Standard_Byte self) -> unsigned char
        r(NCollection_Vec3_Standard_Byte self) -> unsigned char &

        Alias to 1st component as RED channel in RGB.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_r(self, *args)


    def y(self, *args):
        """
        y(NCollection_Vec3_Standard_Byte self) -> unsigned char
        y(NCollection_Vec3_Standard_Byte self) -> unsigned char &

        Alias to 2nd component as Y coordinate in XYZ.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_y(self, *args)


    def g(self, *args):
        """
        g(NCollection_Vec3_Standard_Byte self) -> unsigned char
        g(NCollection_Vec3_Standard_Byte self) -> unsigned char &

        Alias to 2nd component as GREEN channel in RGB.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_g(self, *args)


    def z(self, *args):
        """
        z(NCollection_Vec3_Standard_Byte self) -> unsigned char
        z(NCollection_Vec3_Standard_Byte self) -> unsigned char &

        Alias to 3rd component as Z coordinate in XYZ.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_z(self, *args)


    def b(self, *args):
        """
        b(NCollection_Vec3_Standard_Byte self) -> unsigned char
        b(NCollection_Vec3_Standard_Byte self) -> unsigned char &

        Alias to 3rd component as BLUE channel in RGB.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_b(self, *args)


    def xy(self, *args):
        """
        xy(NCollection_Vec3_Standard_Byte self) -> NCollection_Vec2_Standard_Byte
        xy(NCollection_Vec3_Standard_Byte self) -> NCollection_Vec2_Standard_Byte

        @return XY-components modifiable vector

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_xy(self, *args)


    def yz(self, *args):
        """
        yz(NCollection_Vec3_Standard_Byte self) -> NCollection_Vec2_Standard_Byte
        yz(NCollection_Vec3_Standard_Byte self) -> NCollection_Vec2_Standard_Byte

        @return YZ-components modifiable vector

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_yz(self, *args)


    def IsEqual(self, *args):
        """
        IsEqual(NCollection_Vec3_Standard_Byte self, NCollection_Vec3_Standard_Byte theOther) -> bool

        Check this vector with another vector for equality (without tolerance!).

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_IsEqual(self, *args)


    def __eq__(self, *args):
        """
        __eq__(NCollection_Vec3_Standard_Byte self, NCollection_Vec3_Standard_Byte theOther) -> bool
        __eq__(NCollection_Vec3_Standard_Byte self, NCollection_Vec3_Standard_Byte theOther) -> bool

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte___eq__(self, *args)


    def __ne__(self, *args):
        """
        __ne__(NCollection_Vec3_Standard_Byte self, NCollection_Vec3_Standard_Byte theOther) -> bool
        __ne__(NCollection_Vec3_Standard_Byte self, NCollection_Vec3_Standard_Byte theOther) -> bool

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte___ne__(self, *args)


    def GetData(self, *args):
        """
        GetData(NCollection_Vec3_Standard_Byte self) -> unsigned char const *

        Raw access to the data (for OpenGL exchange).

        :rtype: const Element_t *

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_GetData(self, *args)


    def ChangeData(self, *args):
        """
        ChangeData(NCollection_Vec3_Standard_Byte self) -> unsigned char *

        :rtype: Element_t *

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_ChangeData(self, *args)


    def __iadd__(self, *args):
        """
        __iadd__(NCollection_Vec3_Standard_Byte self, NCollection_Vec3_Standard_Byte theAdd) -> NCollection_Vec3_Standard_Byte

        Compute per-component summary.

        :type theAdd: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte___iadd__(self, *args)


    def __neg__(self, *args):
        """
        __neg__(NCollection_Vec3_Standard_Byte self) -> NCollection_Vec3_Standard_Byte

        Unary -.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte___neg__(self, *args)


    def __isub__(self, *args):
        """
        __isub__(NCollection_Vec3_Standard_Byte self, NCollection_Vec3_Standard_Byte theDec) -> NCollection_Vec3_Standard_Byte

        Compute per-component subtraction.

        :type theDec: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte___isub__(self, *args)


    def Multiply(self, *args):
        """
        Multiply(NCollection_Vec3_Standard_Byte self, unsigned char const theFactor)

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_Multiply(self, *args)


    def __imul__(self, *args):
        """
        __imul__(NCollection_Vec3_Standard_Byte self, NCollection_Vec3_Standard_Byte theRight) -> NCollection_Vec3_Standard_Byte
        __imul__(NCollection_Vec3_Standard_Byte self, unsigned char const theFactor) -> NCollection_Vec3_Standard_Byte

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte___imul__(self, *args)


    def __mul__(self, *args):
        """
        __mul__(NCollection_Vec3_Standard_Byte self, unsigned char const theFactor) -> NCollection_Vec3_Standard_Byte

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte___mul__(self, *args)


    def Multiplied(self, *args):
        """
        Multiplied(NCollection_Vec3_Standard_Byte self, unsigned char const theFactor) -> NCollection_Vec3_Standard_Byte

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_Multiplied(self, *args)


    def cwiseMin(self, *args):
        """
        cwiseMin(NCollection_Vec3_Standard_Byte self, NCollection_Vec3_Standard_Byte theVec) -> NCollection_Vec3_Standard_Byte

        Compute component-wise minimum of two vectors.

        :type theVec: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_cwiseMin(self, *args)


    def cwiseMax(self, *args):
        """
        cwiseMax(NCollection_Vec3_Standard_Byte self, NCollection_Vec3_Standard_Byte theVec) -> NCollection_Vec3_Standard_Byte

        Compute component-wise maximum of two vectors.

        :type theVec: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_cwiseMax(self, *args)


    def cwiseAbs(self, *args):
        """
        cwiseAbs(NCollection_Vec3_Standard_Byte self) -> NCollection_Vec3_Standard_Byte

        Compute component-wise modulus of the vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_cwiseAbs(self, *args)


    def maxComp(self, *args):
        """
        maxComp(NCollection_Vec3_Standard_Byte self) -> unsigned char

        Compute maximum component of the vector.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_maxComp(self, *args)


    def minComp(self, *args):
        """
        minComp(NCollection_Vec3_Standard_Byte self) -> unsigned char

        Compute minimum component of the vector.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_minComp(self, *args)


    def __itruediv__(self, *args):
        return _Graphic3d.NCollection_Vec3_Standard_Byte___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _Graphic3d.NCollection_Vec3_Standard_Byte___truediv__(self, *args)
    __div__ = __truediv__



    def Dot(self, *args):
        """
        Dot(NCollection_Vec3_Standard_Byte self, NCollection_Vec3_Standard_Byte theOther) -> unsigned char

        Computes the dot product.

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_Dot(self, *args)


    def Modulus(self, *args):
        """
        Modulus(NCollection_Vec3_Standard_Byte self) -> unsigned char

        Computes the vector modulus (magnitude, length).

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_Modulus(self, *args)


    def SquareModulus(self, *args):
        """
        SquareModulus(NCollection_Vec3_Standard_Byte self) -> unsigned char

        Computes the square of vector modulus (magnitude, length).
        This method may be used for performance tricks.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_SquareModulus(self, *args)


    def Normalize(self, *args):
        """
        Normalize(NCollection_Vec3_Standard_Byte self)

        Normalize the vector.


        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_Normalize(self, *args)


    def Normalized(self, *args):
        """
        Normalized(NCollection_Vec3_Standard_Byte self) -> NCollection_Vec3_Standard_Byte

        Normalize the vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_Normalized(self, *args)


    def Cross(*args):
        """
        Cross(NCollection_Vec3_Standard_Byte theVec1, NCollection_Vec3_Standard_Byte theVec2) -> NCollection_Vec3_Standard_Byte

        Computes the cross product.

        :type theVec1: OCC.wrapper.NCollection.NCollection_Vec3
        :type theVec2: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_Cross(*args)

    Cross = staticmethod(Cross)

    def GetLERP(*args):
        """
        GetLERP(NCollection_Vec3_Standard_Byte theFrom, NCollection_Vec3_Standard_Byte theTo, unsigned char const theT) -> NCollection_Vec3_Standard_Byte

        Compute linear interpolation between to vectors.
        @param theT - interpolation coefficient 0..1;
        @return interpolation result.

        :type theFrom: OCC.wrapper.NCollection.NCollection_Vec3
        :type theTo: OCC.wrapper.NCollection.NCollection_Vec3
        :type theT: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_GetLERP(*args)

    GetLERP = staticmethod(GetLERP)

    def DX(*args):
        """
        DX() -> NCollection_Vec3_Standard_Byte

        Constuct DX unit vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_DX(*args)

    DX = staticmethod(DX)

    def DY(*args):
        """
        DY() -> NCollection_Vec3_Standard_Byte

        Constuct DY unit vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_DY(*args)

    DY = staticmethod(DY)

    def DZ(*args):
        """
        DZ() -> NCollection_Vec3_Standard_Byte

        Constuct DZ unit vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Byte_DZ(*args)

    DZ = staticmethod(DZ)
    __swig_destroy__ = _Graphic3d.delete_NCollection_Vec3_Standard_Byte
NCollection_Vec3_Standard_Byte_swigregister = _Graphic3d.NCollection_Vec3_Standard_Byte_swigregister
NCollection_Vec3_Standard_Byte_swigregister(NCollection_Vec3_Standard_Byte)

def NCollection_Vec3_Standard_Byte_Length(*args):
    """
    NCollection_Vec3_Standard_Byte_Length() -> int

    Returns the number of components.

    :rtype: int

    """
    return _Graphic3d.NCollection_Vec3_Standard_Byte_Length(*args)

def NCollection_Vec3_Standard_Byte_Cross(*args):
    """
    NCollection_Vec3_Standard_Byte_Cross(NCollection_Vec3_Standard_Byte theVec1, NCollection_Vec3_Standard_Byte theVec2) -> NCollection_Vec3_Standard_Byte

    Computes the cross product.

    :type theVec1: OCC.wrapper.NCollection.NCollection_Vec3
    :type theVec2: OCC.wrapper.NCollection.NCollection_Vec3
    :rtype: OCC.wrapper.NCollection.NCollection_Vec3

    """
    return _Graphic3d.NCollection_Vec3_Standard_Byte_Cross(*args)

def NCollection_Vec3_Standard_Byte_GetLERP(*args):
    """
    NCollection_Vec3_Standard_Byte_GetLERP(NCollection_Vec3_Standard_Byte theFrom, NCollection_Vec3_Standard_Byte theTo, unsigned char const theT) -> NCollection_Vec3_Standard_Byte

    Compute linear interpolation between to vectors.
    @param theT - interpolation coefficient 0..1;
    @return interpolation result.

    :type theFrom: OCC.wrapper.NCollection.NCollection_Vec3
    :type theTo: OCC.wrapper.NCollection.NCollection_Vec3
    :type theT: const Element_t
    :rtype: OCC.wrapper.NCollection.NCollection_Vec3

    """
    return _Graphic3d.NCollection_Vec3_Standard_Byte_GetLERP(*args)

def NCollection_Vec3_Standard_Byte_DX(*args):
    """
    NCollection_Vec3_Standard_Byte_DX() -> NCollection_Vec3_Standard_Byte

    Constuct DX unit vector.

    :rtype: OCC.wrapper.NCollection.NCollection_Vec3

    """
    return _Graphic3d.NCollection_Vec3_Standard_Byte_DX(*args)

def NCollection_Vec3_Standard_Byte_DY(*args):
    """
    NCollection_Vec3_Standard_Byte_DY() -> NCollection_Vec3_Standard_Byte

    Constuct DY unit vector.

    :rtype: OCC.wrapper.NCollection.NCollection_Vec3

    """
    return _Graphic3d.NCollection_Vec3_Standard_Byte_DY(*args)

def NCollection_Vec3_Standard_Byte_DZ(*args):
    """
    NCollection_Vec3_Standard_Byte_DZ() -> NCollection_Vec3_Standard_Byte

    Constuct DZ unit vector.

    :rtype: OCC.wrapper.NCollection.NCollection_Vec3

    """
    return _Graphic3d.NCollection_Vec3_Standard_Byte_DZ(*args)


try:
	Graphic3d_Vec3ub = NCollection_Vec3_Standard_Byte
except NameError:
	pass # does not exist, probably ignored

class Handle_Graphic3d_ArrayOfSegments(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_ArrayOfSegments self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_ArrayOfSegments self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_ArrayOfSegments self, Graphic3d_ArrayOfSegments thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_ArrayOfSegments self, Handle_Graphic3d_ArrayOfSegments theHandle) -> Handle_Graphic3d_ArrayOfSegments
        assign(Handle_Graphic3d_ArrayOfSegments self, Graphic3d_ArrayOfSegments thePtr) -> Handle_Graphic3d_ArrayOfSegments
        assign(Handle_Graphic3d_ArrayOfSegments self, Handle_Graphic3d_ArrayOfSegments theHandle) -> Handle_Graphic3d_ArrayOfSegments

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_ArrayOfSegments self) -> Graphic3d_ArrayOfSegments

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_ArrayOfSegments self) -> Graphic3d_ArrayOfSegments

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_ArrayOfSegments self) -> Graphic3d_ArrayOfSegments

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_ArrayOfSegments___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_ArrayOfSegments(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ArrayOfSegments_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_ArrayOfSegments

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_ArrayOfSegments self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfSegments_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfSegments_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Attributes(self, *args):
        """
        Returns vertex attributes buffer (colors, normals, texture coordinates).

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Buffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfSegments_Attributes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Type(self, *args):
        """
        Type(Handle_Graphic3d_ArrayOfSegments self) -> Graphic3d_TypeOfPrimitiveArray

        Returns the type of this primitive

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfPrimitiveArray

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_Type(self, *args)


    def StringType(self, *args):
        """
        StringType(Handle_Graphic3d_ArrayOfSegments self) -> Standard_CString

        Returns the string type of this primitive

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_StringType(self, *args)


    def HasVertexNormals(self, *args):
        """
        HasVertexNormals(Handle_Graphic3d_ArrayOfSegments self) -> Standard_Boolean

        Returns TRUE when vertex normals array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_HasVertexNormals(self, *args)


    def HasVertexColors(self, *args):
        """
        HasVertexColors(Handle_Graphic3d_ArrayOfSegments self) -> Standard_Boolean

        Returns TRUE when vertex colors array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_HasVertexColors(self, *args)


    def HasVertexTexels(self, *args):
        """
        HasVertexTexels(Handle_Graphic3d_ArrayOfSegments self) -> Standard_Boolean

        Returns TRUE when vertex texels array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_HasVertexTexels(self, *args)


    def VertexNumber(self, *args):
        """
        VertexNumber(Handle_Graphic3d_ArrayOfSegments self) -> Standard_Integer

        Returns the number of defined vertex

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_VertexNumber(self, *args)


    def ItemNumber(self, *args):
        """
        ItemNumber(Handle_Graphic3d_ArrayOfSegments self) -> Standard_Integer

        Returns the number of total items according to the array type.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_ItemNumber(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_Graphic3d_ArrayOfSegments self) -> Standard_Boolean

        Returns TRUE only when the contains of this array is available.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_IsValid(self, *args)


    def AddVertex(self, *args):
        """
        AddVertex(Handle_Graphic3d_ArrayOfSegments self, gp_Pnt theVertex) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfSegments self, NCollection_Vec3_Standard_ShortReal theVertex) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfSegments self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfSegments self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfSegments self, gp_Pnt theVertex, Quantity_Color theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfSegments self, gp_Pnt theVertex, Standard_Integer const theColor32) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfSegments self, gp_Pnt theVertex, Graphic3d_Vec4ub const & theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfSegments self, gp_Pnt theVertex, gp_Dir theNormal) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfSegments self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfSegments self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theNX, Standard_ShortReal const theNY, Standard_ShortReal const theNZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfSegments self, gp_Pnt theVertex, gp_Dir theNormal, Quantity_Color theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfSegments self, gp_Pnt theVertex, gp_Dir theNormal, Standard_Integer const theColor32) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfSegments self, gp_Pnt theVertex, gp_Pnt2d theTexel) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfSegments self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theTX, Standard_Real const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfSegments self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theTX, Standard_ShortReal const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfSegments self, gp_Pnt theVertex, gp_Dir theNormal, gp_Pnt2d theTexel) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfSegments self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ, Standard_Real const theTX, Standard_Real const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfSegments self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theNX, Standard_ShortReal const theNY, Standard_ShortReal const theNZ, Standard_ShortReal const theTX, Standard_ShortReal const theTY) -> Standard_Integer

        Adds a vertice,vertex normal and texture in the vertex array.
        Warning: Normal is ignored when the hasVNormals constructor parameter is FALSE
        and  Texel  is ignored when the hasVTexels  constructor parameter is FALSE.
        @return the actual vertex number

        :type theX: float
        :type theY: float
        :type theZ: float
        :type theNX: float
        :type theNY: float
        :type theNZ: float
        :type theTX: float
        :type theTY: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_AddVertex(self, *args)


    def SetVertice(self, *args):
        """
        SetVertice(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theIndex, gp_Pnt theVertex)
        SetVertice(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theIndex, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ)

        Change the vertice of rank theIndex in the array.

        :type theIndex: int
        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_SetVertice(self, *args)


    def SetVertexColor(self, *args):
        """
        SetVertexColor(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theIndex, Quantity_Color theColor)
        SetVertexColor(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theIndex, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB)
        SetVertexColor(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theIndex, Graphic3d_Vec4ub const & theColor)
        SetVertexColor(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theIndex, Standard_Integer const theColor32)

        Change the vertex color of rank theIndex> in the array.
        @code
        theColor32 = Alpha << 24 + Blue << 16 + Green << 8 + Red
        @endcode

        :type theIndex: int
        :type theColor32: int

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_SetVertexColor(self, *args)


    def SetVertexNormal(self, *args):
        """
        SetVertexNormal(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theIndex, gp_Dir theNormal)
        SetVertexNormal(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theIndex, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ)

        Change the vertex normal of rank theIndex in the array.

        :type theIndex: int
        :type theNX: float
        :type theNY: float
        :type theNZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_SetVertexNormal(self, *args)


    def SetVertexTexel(self, *args):
        """
        SetVertexTexel(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theIndex, gp_Pnt2d theTexel)
        SetVertexTexel(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theIndex, Standard_Real const theTX, Standard_Real const theTY)

        Change the vertex texel of rank theIndex in the array.

        :type theIndex: int
        :type theTX: float
        :type theTY: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_SetVertexTexel(self, *args)


    def Vertice(self, *args):
        """
        Vertice(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theRank) -> gp_Pnt
        Vertice(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theRank)

        Returns the vertice coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_Vertice(self, *args)


    def VertexColor(self, *args):
        """
        VertexColor(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theRank) -> Quantity_Color
        VertexColor(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theIndex, Graphic3d_Vec4ub & theColor)
        VertexColor(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theRank)
        VertexColor(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theRank)

        Returns the vertex color values at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theColor: int

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_VertexColor(self, *args)


    def VertexNormal(self, *args):
        """
        VertexNormal(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theRank) -> gp_Dir
        VertexNormal(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theRank)

        Returns the vertex normal coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theNX: float
        :type theNY: float
        :type theNZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_VertexNormal(self, *args)


    def VertexTexel(self, *args):
        """
        VertexTexel(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theRank) -> gp_Pnt2d
        VertexTexel(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theRank)

        Returns the vertex texture coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theTX: float
        :type theTY: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_VertexTexel(self, *args)


    def Indices(self, *args):
        """
        Returns optional index buffer.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_IndexBuffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfSegments_Indices(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def EdgeNumber(self, *args):
        """
        EdgeNumber(Handle_Graphic3d_ArrayOfSegments self) -> Standard_Integer

        Returns the number of defined edges

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_EdgeNumber(self, *args)


    def Edge(self, *args):
        """
        Edge(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theRank) -> Standard_Integer

        Returns the vertex index at rank theRank in the range [1,EdgeNumber()]

        :type theRank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_Edge(self, *args)


    def AddEdge(self, *args):
        """
        AddEdge(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theVertexIndex) -> Standard_Integer

        Adds an edge in the range [1,VertexNumber()] in the array.
        @return the actual edges number

        :type theVertexIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_AddEdge(self, *args)


    def Bounds(self, *args):
        """
        Returns optional bounds buffer.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_BoundBuffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfSegments_Bounds(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasBoundColors(self, *args):
        """
        HasBoundColors(Handle_Graphic3d_ArrayOfSegments self) -> Standard_Boolean

        Returns TRUE when bound colors array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_HasBoundColors(self, *args)


    def BoundNumber(self, *args):
        """
        BoundNumber(Handle_Graphic3d_ArrayOfSegments self) -> Standard_Integer

        Returns the number of defined bounds

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_BoundNumber(self, *args)


    def Bound(self, *args):
        """
        Bound(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theRank) -> Standard_Integer

        Returns the edge number at rank theRank.

        :type theRank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_Bound(self, *args)


    def BoundColor(self, *args):
        """
        BoundColor(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theRank) -> Quantity_Color
        BoundColor(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theRank)

        Returns the bound color values at rank theRank from the bound table if defined.

        :type theRank: int
        :type theR: float
        :type theG: float
        :type theB: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_BoundColor(self, *args)


    def AddBound(self, *args):
        """
        AddBound(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theEdgeNumber) -> Standard_Integer
        AddBound(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theEdgeNumber, Quantity_Color theBColor) -> Standard_Integer
        AddBound(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theEdgeNumber, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB) -> Standard_Integer

        Adds a bound of length theEdgeNumber and bound color coordinates in the bound array.
        Warning: <theR,theG,theB> are ignored when the hasBColors constructor parameter is FALSE
        @return the actual bounds number

        :type theEdgeNumber: int
        :type theR: float
        :type theG: float
        :type theB: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_AddBound(self, *args)


    def SetBoundColor(self, *args):
        """
        SetBoundColor(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theIndex, Quantity_Color theColor)
        SetBoundColor(Handle_Graphic3d_ArrayOfSegments self, Standard_Integer const theIndex, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB)

        Change the bound color of rank theIndex in the array.

        :type theIndex: int
        :type theR: float
        :type theG: float
        :type theB: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_SetBoundColor(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_ArrayOfSegments self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_ArrayOfSegments self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_ArrayOfSegments self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_ArrayOfSegments self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_ArrayOfSegments self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_ArrayOfSegments self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_ArrayOfSegments self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_ArrayOfSegments self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_ArrayOfSegments self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_DecrementRefCounter(self, *args)

Handle_Graphic3d_ArrayOfSegments_swigregister = _Graphic3d.Handle_Graphic3d_ArrayOfSegments_swigregister
Handle_Graphic3d_ArrayOfSegments_swigregister(Handle_Graphic3d_ArrayOfSegments)

def Handle_Graphic3d_ArrayOfSegments_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_ArrayOfSegments_DownCast(thing)
Handle_Graphic3d_ArrayOfSegments_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfSegments_DownCast

class Handle_Graphic3d_ArrayOfPolylines(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_ArrayOfPolylines self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_ArrayOfPolylines self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_ArrayOfPolylines self, Graphic3d_ArrayOfPolylines thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_ArrayOfPolylines self, Handle_Graphic3d_ArrayOfPolylines theHandle) -> Handle_Graphic3d_ArrayOfPolylines
        assign(Handle_Graphic3d_ArrayOfPolylines self, Graphic3d_ArrayOfPolylines thePtr) -> Handle_Graphic3d_ArrayOfPolylines
        assign(Handle_Graphic3d_ArrayOfPolylines self, Handle_Graphic3d_ArrayOfPolylines theHandle) -> Handle_Graphic3d_ArrayOfPolylines

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_ArrayOfPolylines self) -> Graphic3d_ArrayOfPolylines

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_ArrayOfPolylines self) -> Graphic3d_ArrayOfPolylines

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_ArrayOfPolylines self) -> Graphic3d_ArrayOfPolylines

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_ArrayOfPolylines(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ArrayOfPolylines_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_ArrayOfPolylines

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_ArrayOfPolylines self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Attributes(self, *args):
        """
        Returns vertex attributes buffer (colors, normals, texture coordinates).

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Buffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_Attributes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Type(self, *args):
        """
        Type(Handle_Graphic3d_ArrayOfPolylines self) -> Graphic3d_TypeOfPrimitiveArray

        Returns the type of this primitive

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfPrimitiveArray

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_Type(self, *args)


    def StringType(self, *args):
        """
        StringType(Handle_Graphic3d_ArrayOfPolylines self) -> Standard_CString

        Returns the string type of this primitive

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_StringType(self, *args)


    def HasVertexNormals(self, *args):
        """
        HasVertexNormals(Handle_Graphic3d_ArrayOfPolylines self) -> Standard_Boolean

        Returns TRUE when vertex normals array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_HasVertexNormals(self, *args)


    def HasVertexColors(self, *args):
        """
        HasVertexColors(Handle_Graphic3d_ArrayOfPolylines self) -> Standard_Boolean

        Returns TRUE when vertex colors array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_HasVertexColors(self, *args)


    def HasVertexTexels(self, *args):
        """
        HasVertexTexels(Handle_Graphic3d_ArrayOfPolylines self) -> Standard_Boolean

        Returns TRUE when vertex texels array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_HasVertexTexels(self, *args)


    def VertexNumber(self, *args):
        """
        VertexNumber(Handle_Graphic3d_ArrayOfPolylines self) -> Standard_Integer

        Returns the number of defined vertex

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_VertexNumber(self, *args)


    def ItemNumber(self, *args):
        """
        ItemNumber(Handle_Graphic3d_ArrayOfPolylines self) -> Standard_Integer

        Returns the number of total items according to the array type.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_ItemNumber(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_Graphic3d_ArrayOfPolylines self) -> Standard_Boolean

        Returns TRUE only when the contains of this array is available.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_IsValid(self, *args)


    def AddVertex(self, *args):
        """
        AddVertex(Handle_Graphic3d_ArrayOfPolylines self, gp_Pnt theVertex) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolylines self, NCollection_Vec3_Standard_ShortReal theVertex) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolylines self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolylines self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolylines self, gp_Pnt theVertex, Quantity_Color theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolylines self, gp_Pnt theVertex, Standard_Integer const theColor32) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolylines self, gp_Pnt theVertex, Graphic3d_Vec4ub const & theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolylines self, gp_Pnt theVertex, gp_Dir theNormal) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolylines self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolylines self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theNX, Standard_ShortReal const theNY, Standard_ShortReal const theNZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolylines self, gp_Pnt theVertex, gp_Dir theNormal, Quantity_Color theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolylines self, gp_Pnt theVertex, gp_Dir theNormal, Standard_Integer const theColor32) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolylines self, gp_Pnt theVertex, gp_Pnt2d theTexel) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolylines self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theTX, Standard_Real const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolylines self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theTX, Standard_ShortReal const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolylines self, gp_Pnt theVertex, gp_Dir theNormal, gp_Pnt2d theTexel) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolylines self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ, Standard_Real const theTX, Standard_Real const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolylines self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theNX, Standard_ShortReal const theNY, Standard_ShortReal const theNZ, Standard_ShortReal const theTX, Standard_ShortReal const theTY) -> Standard_Integer

        Adds a vertice,vertex normal and texture in the vertex array.
        Warning: Normal is ignored when the hasVNormals constructor parameter is FALSE
        and  Texel  is ignored when the hasVTexels  constructor parameter is FALSE.
        @return the actual vertex number

        :type theX: float
        :type theY: float
        :type theZ: float
        :type theNX: float
        :type theNY: float
        :type theNZ: float
        :type theTX: float
        :type theTY: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_AddVertex(self, *args)


    def SetVertice(self, *args):
        """
        SetVertice(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theIndex, gp_Pnt theVertex)
        SetVertice(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theIndex, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ)

        Change the vertice of rank theIndex in the array.

        :type theIndex: int
        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_SetVertice(self, *args)


    def SetVertexColor(self, *args):
        """
        SetVertexColor(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theIndex, Quantity_Color theColor)
        SetVertexColor(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theIndex, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB)
        SetVertexColor(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theIndex, Graphic3d_Vec4ub const & theColor)
        SetVertexColor(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theIndex, Standard_Integer const theColor32)

        Change the vertex color of rank theIndex> in the array.
        @code
        theColor32 = Alpha << 24 + Blue << 16 + Green << 8 + Red
        @endcode

        :type theIndex: int
        :type theColor32: int

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_SetVertexColor(self, *args)


    def SetVertexNormal(self, *args):
        """
        SetVertexNormal(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theIndex, gp_Dir theNormal)
        SetVertexNormal(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theIndex, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ)

        Change the vertex normal of rank theIndex in the array.

        :type theIndex: int
        :type theNX: float
        :type theNY: float
        :type theNZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_SetVertexNormal(self, *args)


    def SetVertexTexel(self, *args):
        """
        SetVertexTexel(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theIndex, gp_Pnt2d theTexel)
        SetVertexTexel(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theIndex, Standard_Real const theTX, Standard_Real const theTY)

        Change the vertex texel of rank theIndex in the array.

        :type theIndex: int
        :type theTX: float
        :type theTY: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_SetVertexTexel(self, *args)


    def Vertice(self, *args):
        """
        Vertice(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theRank) -> gp_Pnt
        Vertice(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theRank)

        Returns the vertice coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_Vertice(self, *args)


    def VertexColor(self, *args):
        """
        VertexColor(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theRank) -> Quantity_Color
        VertexColor(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theIndex, Graphic3d_Vec4ub & theColor)
        VertexColor(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theRank)
        VertexColor(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theRank)

        Returns the vertex color values at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theColor: int

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_VertexColor(self, *args)


    def VertexNormal(self, *args):
        """
        VertexNormal(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theRank) -> gp_Dir
        VertexNormal(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theRank)

        Returns the vertex normal coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theNX: float
        :type theNY: float
        :type theNZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_VertexNormal(self, *args)


    def VertexTexel(self, *args):
        """
        VertexTexel(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theRank) -> gp_Pnt2d
        VertexTexel(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theRank)

        Returns the vertex texture coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theTX: float
        :type theTY: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_VertexTexel(self, *args)


    def Indices(self, *args):
        """
        Returns optional index buffer.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_IndexBuffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_Indices(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def EdgeNumber(self, *args):
        """
        EdgeNumber(Handle_Graphic3d_ArrayOfPolylines self) -> Standard_Integer

        Returns the number of defined edges

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_EdgeNumber(self, *args)


    def Edge(self, *args):
        """
        Edge(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theRank) -> Standard_Integer

        Returns the vertex index at rank theRank in the range [1,EdgeNumber()]

        :type theRank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_Edge(self, *args)


    def AddEdge(self, *args):
        """
        AddEdge(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theVertexIndex) -> Standard_Integer

        Adds an edge in the range [1,VertexNumber()] in the array.
        @return the actual edges number

        :type theVertexIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_AddEdge(self, *args)


    def Bounds(self, *args):
        """
        Returns optional bounds buffer.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_BoundBuffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_Bounds(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasBoundColors(self, *args):
        """
        HasBoundColors(Handle_Graphic3d_ArrayOfPolylines self) -> Standard_Boolean

        Returns TRUE when bound colors array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_HasBoundColors(self, *args)


    def BoundNumber(self, *args):
        """
        BoundNumber(Handle_Graphic3d_ArrayOfPolylines self) -> Standard_Integer

        Returns the number of defined bounds

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_BoundNumber(self, *args)


    def Bound(self, *args):
        """
        Bound(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theRank) -> Standard_Integer

        Returns the edge number at rank theRank.

        :type theRank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_Bound(self, *args)


    def BoundColor(self, *args):
        """
        BoundColor(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theRank) -> Quantity_Color
        BoundColor(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theRank)

        Returns the bound color values at rank theRank from the bound table if defined.

        :type theRank: int
        :type theR: float
        :type theG: float
        :type theB: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_BoundColor(self, *args)


    def AddBound(self, *args):
        """
        AddBound(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theEdgeNumber) -> Standard_Integer
        AddBound(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theEdgeNumber, Quantity_Color theBColor) -> Standard_Integer
        AddBound(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theEdgeNumber, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB) -> Standard_Integer

        Adds a bound of length theEdgeNumber and bound color coordinates in the bound array.
        Warning: <theR,theG,theB> are ignored when the hasBColors constructor parameter is FALSE
        @return the actual bounds number

        :type theEdgeNumber: int
        :type theR: float
        :type theG: float
        :type theB: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_AddBound(self, *args)


    def SetBoundColor(self, *args):
        """
        SetBoundColor(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theIndex, Quantity_Color theColor)
        SetBoundColor(Handle_Graphic3d_ArrayOfPolylines self, Standard_Integer const theIndex, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB)

        Change the bound color of rank theIndex in the array.

        :type theIndex: int
        :type theR: float
        :type theG: float
        :type theB: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_SetBoundColor(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_ArrayOfPolylines self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_ArrayOfPolylines self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_ArrayOfPolylines self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_ArrayOfPolylines self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_ArrayOfPolylines self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_ArrayOfPolylines self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_ArrayOfPolylines self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_ArrayOfPolylines self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_ArrayOfPolylines self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_DecrementRefCounter(self, *args)

Handle_Graphic3d_ArrayOfPolylines_swigregister = _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_swigregister
Handle_Graphic3d_ArrayOfPolylines_swigregister(Handle_Graphic3d_ArrayOfPolylines)

def Handle_Graphic3d_ArrayOfPolylines_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_DownCast(thing)
Handle_Graphic3d_ArrayOfPolylines_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfPolylines_DownCast

class NCollection_Sequence_Handle_Graphic3d_Group(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_Graphic3d_Group self) -> NCollection_Sequence< opencascade::handle< Graphic3d_Group > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_Graphic3d_Group self) -> NCollection_Sequence< opencascade::handle< Graphic3d_Group > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_Graphic3d_Group self) -> NCollection_Sequence< opencascade::handle< Graphic3d_Group > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_Graphic3d_Group self) -> NCollection_Sequence< opencascade::handle< Graphic3d_Group > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _Graphic3d.new_NCollection_Sequence_Handle_Graphic3d_Group(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_Graphic3d_Group self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_Graphic3d_Group self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_Graphic3d_Group self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_Graphic3d_Group self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_Graphic3d_Group self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_Graphic3d_Group self)

        Reverse sequence


        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_Graphic3d_Group self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_Graphic3d_Group self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_Graphic3d_Group self, NCollection_Sequence_Handle_Graphic3d_Group theOther) -> NCollection_Sequence_Handle_Graphic3d_Group

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_Graphic3d_Group self, NCollection_Sequence_Handle_Graphic3d_Group theOther) -> NCollection_Sequence_Handle_Graphic3d_Group

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_Graphic3d_Group self, NCollection_Sequence< opencascade::handle< Graphic3d_Group > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_Graphic3d_Group self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_Graphic3d_Group self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_Graphic3d_Group self, Handle_Graphic3d_Group theItem)
        Append(NCollection_Sequence_Handle_Graphic3d_Group self, NCollection_Sequence_Handle_Graphic3d_Group theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_Graphic3d_Group self, Handle_Graphic3d_Group theItem)
        Prepend(NCollection_Sequence_Handle_Graphic3d_Group self, NCollection_Sequence_Handle_Graphic3d_Group theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_Graphic3d_Group self, Standard_Integer const theIndex, Handle_Graphic3d_Group theItem)
        InsertBefore(NCollection_Sequence_Handle_Graphic3d_Group self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Graphic3d_Group theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_Graphic3d_Group self, NCollection_Sequence< opencascade::handle< Graphic3d_Group > >::Iterator & thePosition, Handle_Graphic3d_Group theItem)
        InsertAfter(NCollection_Sequence_Handle_Graphic3d_Group self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Graphic3d_Group theSeq)
        InsertAfter(NCollection_Sequence_Handle_Graphic3d_Group self, Standard_Integer const theIndex, Handle_Graphic3d_Group theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_Graphic3d_Group self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Graphic3d_Group theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_Graphic3d_Group self) -> Handle_Graphic3d_Group

        First item access

        :rtype: TheItemType &

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_Graphic3d_Group self) -> Handle_Graphic3d_Group

        Last item access

        :rtype: TheItemType &

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_Graphic3d_Group self, Standard_Integer const theIndex) -> Handle_Graphic3d_Group

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_Graphic3d_Group self, Standard_Integer const theIndex, Handle_Graphic3d_Group theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_SetValue(self, *args)


    def __iter__(self):
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group___iter__(self)
    __swig_destroy__ = _Graphic3d.delete_NCollection_Sequence_Handle_Graphic3d_Group
NCollection_Sequence_Handle_Graphic3d_Group_swigregister = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_swigregister
NCollection_Sequence_Handle_Graphic3d_Group_swigregister(NCollection_Sequence_Handle_Graphic3d_Group)

def NCollection_Sequence_Handle_Graphic3d_Group_delNode(*args):
    """
    NCollection_Sequence_Handle_Graphic3d_Group_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_delNode(*args)

class NCollection_Sequence_Handle_Graphic3d_Group_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _Graphic3d.new_NCollection_Sequence_Handle_Graphic3d_Group_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Graphic3d.delete_NCollection_Sequence_Handle_Graphic3d_Group_IteratorHelper

    def __next__(self):
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_IteratorHelper___next__(self)
NCollection_Sequence_Handle_Graphic3d_Group_IteratorHelper_swigregister = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Group_IteratorHelper_swigregister
NCollection_Sequence_Handle_Graphic3d_Group_IteratorHelper_swigregister(NCollection_Sequence_Handle_Graphic3d_Group_IteratorHelper)


try:
	Graphic3d_SequenceOfGroup = NCollection_Sequence_Handle_Graphic3d_Group
except NameError:
	pass # does not exist, probably ignored

class Handle_Graphic3d_ShaderObject(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_ShaderObject self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_ShaderObject_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_ShaderObject self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_ShaderObject_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_ShaderObject self, Graphic3d_ShaderObject thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_ShaderObject_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_ShaderObject self, Handle_Graphic3d_ShaderObject theHandle) -> Handle_Graphic3d_ShaderObject
        assign(Handle_Graphic3d_ShaderObject self, Graphic3d_ShaderObject thePtr) -> Handle_Graphic3d_ShaderObject
        assign(Handle_Graphic3d_ShaderObject self, Handle_Graphic3d_ShaderObject theHandle) -> Handle_Graphic3d_ShaderObject

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_ShaderObject_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_ShaderObject self) -> Graphic3d_ShaderObject

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ShaderObject_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_ShaderObject self) -> Graphic3d_ShaderObject

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ShaderObject___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_ShaderObject self) -> Graphic3d_ShaderObject

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_ShaderObject___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_ShaderObject___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_ShaderObject___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_ShaderObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ShaderObject_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_ShaderObject

    def IsDone(self, *args):
        """
        IsDone(Handle_Graphic3d_ShaderObject self) -> Standard_Boolean

        Checks if the shader object is valid or not.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ShaderObject_IsDone(self, *args)


    def Path(self, *args):
        """
        Returns the full path to the shader source.

        :rtype: OCC.wrapper.OSD.OSD_Path

        """
        res = _Graphic3d.Handle_Graphic3d_ShaderObject_Path(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Source(self, *args):
        """
        Returns the source code of the shader object.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Handle_Graphic3d_ShaderObject_Source(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Type(self, *args):
        """
        Type(Handle_Graphic3d_ShaderObject self) -> Graphic3d_TypeOfShaderObject

        Returns type of the shader object.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfShaderObject

        """
        return _Graphic3d.Handle_Graphic3d_ShaderObject_Type(self, *args)


    def GetId(self, *args):
        """
        Returns unique ID used to manage resource in graphic driver.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Handle_Graphic3d_ShaderObject_GetId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CreateFromFile(self, *args):
        """
        CreateFromFile(Handle_Graphic3d_ShaderObject self, Graphic3d_TypeOfShaderObject const theType, TCollection_AsciiString thePath) -> Handle_Graphic3d_ShaderObject

        Creates new shader object from specified file.

        :type theType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfShaderObject
        :type thePath: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderObject

        """
        return _Graphic3d.Handle_Graphic3d_ShaderObject_CreateFromFile(self, *args)


    def CreateFromSource(self, *args):
        """
        CreateFromSource(Handle_Graphic3d_ShaderObject self, Graphic3d_TypeOfShaderObject const theType, TCollection_AsciiString theSource) -> Handle_Graphic3d_ShaderObject

        Creates new shader object from specified source.

        :type theType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfShaderObject
        :type theSource: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderObject

        """
        return _Graphic3d.Handle_Graphic3d_ShaderObject_CreateFromSource(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_ShaderObject self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_ShaderObject_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ShaderObject_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ShaderObject_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_ShaderObject self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_ShaderObject_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_ShaderObject self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_ShaderObject self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ShaderObject_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_ShaderObject self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_ShaderObject self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ShaderObject_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_ShaderObject self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_ShaderObject_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_ShaderObject self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ShaderObject_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_ShaderObject self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_ShaderObject_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_ShaderObject self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ShaderObject_DecrementRefCounter(self, *args)

Handle_Graphic3d_ShaderObject_swigregister = _Graphic3d.Handle_Graphic3d_ShaderObject_swigregister
Handle_Graphic3d_ShaderObject_swigregister(Handle_Graphic3d_ShaderObject)

def Handle_Graphic3d_ShaderObject_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_ShaderObject_DownCast(thing)
Handle_Graphic3d_ShaderObject_DownCast = _Graphic3d.Handle_Graphic3d_ShaderObject_DownCast

class NCollection_Lerp_Handle_Graphic3d_Camera(object):
    """
    Linear interpolation tool for transformation defined by gp_Trsf.

    In general case, there is a no well-defined interpolation between arbitrary transformations,
    because desired transient values might vary depending on application needs.

    This tool performs independent interpolation of three logical
    transformation parts - rotation (using gp_QuaternionNLerp), translation and scale factor.
    Result of such interpolation might be not what application expects,
    thus this tool might be considered for simple cases or for interpolating between small intervals.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(NCollection_Lerp<(opencascade::handle<(Graphic3d_Camera)>)> self) -> NCollection_Lerp_Handle_Graphic3d_Camera
        __init__(NCollection_Lerp<(opencascade::handle<(Graphic3d_Camera)>)> self, Handle_Graphic3d_Camera theStart, Handle_Graphic3d_Camera theEnd) -> NCollection_Lerp_Handle_Graphic3d_Camera

        Main constructor.

        :type theStart: OCC.wrapper.gp.gp_Trsf
        :type theEnd: OCC.wrapper.gp.gp_Trsf

        """
        this = _Graphic3d.new_NCollection_Lerp_Handle_Graphic3d_Camera(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Lerp_Handle_Graphic3d_Camera self, Handle_Graphic3d_Camera theStart, Handle_Graphic3d_Camera theEnd)

        Initialize values.

        :type theStart: OCC.wrapper.gp.gp_Trsf
        :type theEnd: OCC.wrapper.gp.gp_Trsf

        """
        return _Graphic3d.NCollection_Lerp_Handle_Graphic3d_Camera_Init(self, *args)


    def Interpolate(self, *args):
        """
        Interpolate(NCollection_Lerp_Handle_Graphic3d_Camera self, Handle_Graphic3d_Camera theStart, Handle_Graphic3d_Camera theEnd, double theT) -> Handle_Graphic3d_Camera
        Interpolate(NCollection_Lerp_Handle_Graphic3d_Camera self, double theT, Handle_Graphic3d_Camera theResult)

        Compute interpolated value between two values.
        @param theT normalized interpolation coefficient within [0, 1] range,
        with 0 pointing to first value and 1 to the second value.
        @param theResult [out] interpolated value

        :type theT: double
        :type theResult: OCC.wrapper.gp.gp_Trsf

        """
        return _Graphic3d.NCollection_Lerp_Handle_Graphic3d_Camera_Interpolate(self, *args)

    __swig_destroy__ = _Graphic3d.delete_NCollection_Lerp_Handle_Graphic3d_Camera
NCollection_Lerp_Handle_Graphic3d_Camera_swigregister = _Graphic3d.NCollection_Lerp_Handle_Graphic3d_Camera_swigregister
NCollection_Lerp_Handle_Graphic3d_Camera_swigregister(NCollection_Lerp_Handle_Graphic3d_Camera)


try:
	Graphic3d_CameraLerp = NCollection_Lerp_Handle_Graphic3d_Camera
except NameError:
	pass # does not exist, probably ignored

class Graphic3d_UniformValue_Graphic3d_Vec4(object):
    """Describes specific value of custom uniform variable."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, theValue):
        """Describes specific value of custom uniform variable."""
        this = _Graphic3d.new_Graphic3d_UniformValue_Graphic3d_Vec4(theValue)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def TypeID(self, *args):
        """
        TypeID(Graphic3d_UniformValue_Graphic3d_Vec4 self) -> Standard_Size

        Returns unique identifier of value type.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Graphic3d_UniformValue_Graphic3d_Vec4_TypeID(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_UniformValue_Graphic3d_Vec4
Graphic3d_UniformValue_Graphic3d_Vec4_swigregister = _Graphic3d.Graphic3d_UniformValue_Graphic3d_Vec4_swigregister
Graphic3d_UniformValue_Graphic3d_Vec4_swigregister(Graphic3d_UniformValue_Graphic3d_Vec4)


try:
	Graphic3d_UniformVec4 = Graphic3d_UniformValue_Graphic3d_Vec4
except NameError:
	pass # does not exist, probably ignored

class NCollection_Vec2_Standard_Byte(object):
    """
    Defines the 2D-vector template.
    The main target for this class - to handle raw low-level arrays (from/to graphic driver etc.).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Length(*args):
        """
        Length() -> int

        Returns the number of components.

        :rtype: int

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte_Length(*args)

    Length = staticmethod(Length)

    def __init__(self, *args):
        """
        Defines the 2D-vector template.
        The main target for this class - to handle raw low-level arrays (from/to graphic driver etc.).
        """
        this = _Graphic3d.new_NCollection_Vec2_Standard_Byte(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetValues(self, *args):
        """
        SetValues(NCollection_Vec2_Standard_Byte self, unsigned char const theX, unsigned char const theY)

        Assign new values to the vector.

        :type theX: const Element_t
        :type theY: const Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte_SetValues(self, *args)


    def xy(self, *args):
        """
        xy(NCollection_Vec2_Standard_Byte self) -> NCollection_Vec2_Standard_Byte

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte_xy(self, *args)


    def yx(self, *args):
        """
        yx(NCollection_Vec2_Standard_Byte self) -> NCollection_Vec2_Standard_Byte

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte_yx(self, *args)


    def x(self, *args):
        """
        x(NCollection_Vec2_Standard_Byte self) -> unsigned char
        x(NCollection_Vec2_Standard_Byte self) -> unsigned char &

        Alias to 1st component as X coordinate in XY.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte_x(self, *args)


    def y(self, *args):
        """
        y(NCollection_Vec2_Standard_Byte self) -> unsigned char
        y(NCollection_Vec2_Standard_Byte self) -> unsigned char &

        Alias to 2nd component as Y coordinate in XY.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte_y(self, *args)


    def IsEqual(self, *args):
        """
        IsEqual(NCollection_Vec2_Standard_Byte self, NCollection_Vec2_Standard_Byte theOther) -> bool

        Check this vector with another vector for equality (without tolerance!).

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte_IsEqual(self, *args)


    def __eq__(self, *args):
        """
        __eq__(NCollection_Vec2_Standard_Byte self, NCollection_Vec2_Standard_Byte theOther) -> bool
        __eq__(NCollection_Vec2_Standard_Byte self, NCollection_Vec2_Standard_Byte theOther) -> bool

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte___eq__(self, *args)


    def __ne__(self, *args):
        """
        __ne__(NCollection_Vec2_Standard_Byte self, NCollection_Vec2_Standard_Byte theOther) -> bool
        __ne__(NCollection_Vec2_Standard_Byte self, NCollection_Vec2_Standard_Byte theOther) -> bool

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte___ne__(self, *args)


    def GetData(self, *args):
        """
        GetData(NCollection_Vec2_Standard_Byte self) -> unsigned char const *

        Raw access to the data (for OpenGL exchange).

        :rtype: const Element_t *

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte_GetData(self, *args)


    def ChangeData(self, *args):
        """
        ChangeData(NCollection_Vec2_Standard_Byte self) -> unsigned char *

        :rtype: Element_t *

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte_ChangeData(self, *args)


    def __iadd__(self, *args):
        """
        __iadd__(NCollection_Vec2_Standard_Byte self, NCollection_Vec2_Standard_Byte theAdd) -> NCollection_Vec2_Standard_Byte

        Compute per-component summary.

        :type theAdd: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte___iadd__(self, *args)


    def __isub__(self, *args):
        """
        __isub__(NCollection_Vec2_Standard_Byte self, NCollection_Vec2_Standard_Byte theDec) -> NCollection_Vec2_Standard_Byte

        Compute per-component subtraction.

        :type theDec: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte___isub__(self, *args)


    def __neg__(self, *args):
        """
        __neg__(NCollection_Vec2_Standard_Byte self) -> NCollection_Vec2_Standard_Byte

        Unary -.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte___neg__(self, *args)


    def Multiply(self, *args):
        """
        Multiply(NCollection_Vec2_Standard_Byte self, unsigned char const theFactor)

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte_Multiply(self, *args)


    def Multiplied(self, *args):
        """
        Multiplied(NCollection_Vec2_Standard_Byte self, unsigned char const theFactor) -> NCollection_Vec2_Standard_Byte

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte_Multiplied(self, *args)


    def cwiseMin(self, *args):
        """
        cwiseMin(NCollection_Vec2_Standard_Byte self, NCollection_Vec2_Standard_Byte theVec) -> NCollection_Vec2_Standard_Byte

        Compute component-wise minimum of two vectors.

        :type theVec: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte_cwiseMin(self, *args)


    def cwiseMax(self, *args):
        """
        cwiseMax(NCollection_Vec2_Standard_Byte self, NCollection_Vec2_Standard_Byte theVec) -> NCollection_Vec2_Standard_Byte

        Compute component-wise maximum of two vectors.

        :type theVec: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte_cwiseMax(self, *args)


    def cwiseAbs(self, *args):
        """
        cwiseAbs(NCollection_Vec2_Standard_Byte self) -> NCollection_Vec2_Standard_Byte

        Compute component-wise modulus of the vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte_cwiseAbs(self, *args)


    def maxComp(self, *args):
        """
        maxComp(NCollection_Vec2_Standard_Byte self) -> unsigned char

        Compute maximum component of the vector.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte_maxComp(self, *args)


    def minComp(self, *args):
        """
        minComp(NCollection_Vec2_Standard_Byte self) -> unsigned char

        Compute minimum component of the vector.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte_minComp(self, *args)


    def __imul__(self, *args):
        """
        __imul__(NCollection_Vec2_Standard_Byte self, NCollection_Vec2_Standard_Byte theRight) -> NCollection_Vec2_Standard_Byte
        __imul__(NCollection_Vec2_Standard_Byte self, unsigned char const theFactor) -> NCollection_Vec2_Standard_Byte

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte___imul__(self, *args)


    def __itruediv__(self, *args):
        return _Graphic3d.NCollection_Vec2_Standard_Byte___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __mul__(self, *args):
        """
        __mul__(NCollection_Vec2_Standard_Byte self, unsigned char const theFactor) -> NCollection_Vec2_Standard_Byte

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte___mul__(self, *args)


    def __truediv__(self, *args):
        return _Graphic3d.NCollection_Vec2_Standard_Byte___truediv__(self, *args)
    __div__ = __truediv__



    def Dot(self, *args):
        """
        Dot(NCollection_Vec2_Standard_Byte self, NCollection_Vec2_Standard_Byte theOther) -> unsigned char

        Computes the dot product.

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte_Dot(self, *args)


    def Modulus(self, *args):
        """
        Modulus(NCollection_Vec2_Standard_Byte self) -> unsigned char

        Computes the vector modulus (magnitude, length).

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte_Modulus(self, *args)


    def SquareModulus(self, *args):
        """
        SquareModulus(NCollection_Vec2_Standard_Byte self) -> unsigned char

        Computes the square of vector modulus (magnitude, length).
        This method may be used for performance tricks.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte_SquareModulus(self, *args)


    def DX(*args):
        """
        DX() -> NCollection_Vec2_Standard_Byte

        Constuct DX unit vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte_DX(*args)

    DX = staticmethod(DX)

    def DY(*args):
        """
        DY() -> NCollection_Vec2_Standard_Byte

        Constuct DY unit vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Byte_DY(*args)

    DY = staticmethod(DY)
    __swig_destroy__ = _Graphic3d.delete_NCollection_Vec2_Standard_Byte
NCollection_Vec2_Standard_Byte_swigregister = _Graphic3d.NCollection_Vec2_Standard_Byte_swigregister
NCollection_Vec2_Standard_Byte_swigregister(NCollection_Vec2_Standard_Byte)

def NCollection_Vec2_Standard_Byte_Length(*args):
    """
    NCollection_Vec2_Standard_Byte_Length() -> int

    Returns the number of components.

    :rtype: int

    """
    return _Graphic3d.NCollection_Vec2_Standard_Byte_Length(*args)

def NCollection_Vec2_Standard_Byte_DX(*args):
    """
    NCollection_Vec2_Standard_Byte_DX() -> NCollection_Vec2_Standard_Byte

    Constuct DX unit vector.

    :rtype: OCC.wrapper.NCollection.NCollection_Vec2

    """
    return _Graphic3d.NCollection_Vec2_Standard_Byte_DX(*args)

def NCollection_Vec2_Standard_Byte_DY(*args):
    """
    NCollection_Vec2_Standard_Byte_DY() -> NCollection_Vec2_Standard_Byte

    Constuct DY unit vector.

    :rtype: OCC.wrapper.NCollection.NCollection_Vec2

    """
    return _Graphic3d.NCollection_Vec2_Standard_Byte_DY(*args)


try:
	Graphic3d_Vec2ub = NCollection_Vec2_Standard_Byte
except NameError:
	pass # does not exist, probably ignored

class Handle_Graphic3d_TextureParams(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_TextureParams self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_TextureParams self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_TextureParams self, Graphic3d_TextureParams thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_TextureParams self, Handle_Graphic3d_TextureParams theHandle) -> Handle_Graphic3d_TextureParams
        assign(Handle_Graphic3d_TextureParams self, Graphic3d_TextureParams thePtr) -> Handle_Graphic3d_TextureParams
        assign(Handle_Graphic3d_TextureParams self, Handle_Graphic3d_TextureParams theHandle) -> Handle_Graphic3d_TextureParams

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_TextureParams self) -> Graphic3d_TextureParams

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_TextureParams self) -> Graphic3d_TextureParams

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_TextureParams self) -> Graphic3d_TextureParams

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_TextureParams___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_TextureParams___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_TextureParams(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_TextureParams_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_TextureParams

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_TextureParams self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_TextureParams_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_TextureParams_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TextureUnit(self, *args):
        """
        TextureUnit(Handle_Graphic3d_TextureParams self) -> Graphic3d_TextureUnit

        Default texture unit to be used, default is Graphic3d_TextureUnit_BaseColor.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TextureUnit

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_TextureUnit(self, *args)


    def SetTextureUnit(self, *args):
        """
        SetTextureUnit(Handle_Graphic3d_TextureParams self, Graphic3d_TextureUnit theUnit)

        Setup default texture unit.

        :type theUnit: OCC.wrapper.Graphic3d.Graphic3d_TextureUnit

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_SetTextureUnit(self, *args)


    def IsModulate(self, *args):
        """
        IsModulate(Handle_Graphic3d_TextureParams self) -> Standard_Boolean

        @return TRUE if the texture is modulate.
        Default value is FALSE.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_IsModulate(self, *args)


    def SetModulate(self, *args):
        """
        SetModulate(Handle_Graphic3d_TextureParams self, Standard_Boolean const theToModulate)

        @param theToModulate turn modulation on/off.

        :type theToModulate: bool

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_SetModulate(self, *args)


    def IsRepeat(self, *args):
        """
        IsRepeat(Handle_Graphic3d_TextureParams self) -> Standard_Boolean

        @return TRUE if the texture repeat is enabled.
        Default value is FALSE.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_IsRepeat(self, *args)


    def SetRepeat(self, *args):
        """
        SetRepeat(Handle_Graphic3d_TextureParams self, Standard_Boolean const theToRepeat)

        @param theToRepeat turn texture repeat mode ON or OFF (clamping).

        :type theToRepeat: bool

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_SetRepeat(self, *args)


    def Filter(self, *args):
        """
        Filter(Handle_Graphic3d_TextureParams self) -> Graphic3d_TypeOfTextureFilter

        @return texture interpolation filter.
        Default value is Graphic3d_TOTF_NEAREST.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfTextureFilter

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_Filter(self, *args)


    def SetFilter(self, *args):
        """
        SetFilter(Handle_Graphic3d_TextureParams self, Graphic3d_TypeOfTextureFilter const theFilter)

        @param theFilter texture interpolation filter.

        :type theFilter: OCC.wrapper.Graphic3d.Graphic3d_TypeOfTextureFilter

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_SetFilter(self, *args)


    def AnisoFilter(self, *args):
        """
        AnisoFilter(Handle_Graphic3d_TextureParams self) -> Graphic3d_LevelOfTextureAnisotropy

        @return level of anisontropy texture filter.
        Default value is Graphic3d_LOTA_OFF.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_LevelOfTextureAnisotropy

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_AnisoFilter(self, *args)


    def SetAnisoFilter(self, *args):
        """
        SetAnisoFilter(Handle_Graphic3d_TextureParams self, Graphic3d_LevelOfTextureAnisotropy const theLevel)

        @param theLevel level of anisontropy texture filter.

        :type theLevel: OCC.wrapper.Graphic3d.Graphic3d_LevelOfTextureAnisotropy

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_SetAnisoFilter(self, *args)


    def Rotation(self, *args):
        """
        Rotation(Handle_Graphic3d_TextureParams self) -> Standard_ShortReal

        @return rotation angle in degrees
        Default value is 0.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_Rotation(self, *args)


    def SetRotation(self, *args):
        """
        SetRotation(Handle_Graphic3d_TextureParams self, Standard_ShortReal const theAngleDegrees)

        @param theAngleDegrees rotation angle.

        :type theAngleDegrees: float

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_SetRotation(self, *args)


    def Scale(self, *args):
        """
        @return scale factor
        Default value is no scaling (1.0; 1.0).

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Vec2

        """
        res = _Graphic3d.Handle_Graphic3d_TextureParams_Scale(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetScale(self, *args):
        """
        SetScale(Handle_Graphic3d_TextureParams self, NCollection_Vec2_Standard_ShortReal theScale)

        @param theScale scale factor.

        :type theScale: OCC.wrapper.Graphic3d.Graphic3d_Vec2

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_SetScale(self, *args)


    def Translation(self, *args):
        """
        @return translation vector
        Default value is no translation (0.0; 0.0).

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Vec2

        """
        res = _Graphic3d.Handle_Graphic3d_TextureParams_Translation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTranslation(self, *args):
        """
        SetTranslation(Handle_Graphic3d_TextureParams self, NCollection_Vec2_Standard_ShortReal theVec)

        @param theVec translation vector.

        :type theVec: OCC.wrapper.Graphic3d.Graphic3d_Vec2

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_SetTranslation(self, *args)


    def GenMode(self, *args):
        """
        GenMode(Handle_Graphic3d_TextureParams self) -> Graphic3d_TypeOfTextureMode

        @return texture coordinates generation mode.
        Default value is Graphic3d_TOTM_MANUAL.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfTextureMode

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_GenMode(self, *args)


    def GenPlaneS(self, *args):
        """
        @return texture coordinates generation plane S.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Vec4

        """
        res = _Graphic3d.Handle_Graphic3d_TextureParams_GenPlaneS(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GenPlaneT(self, *args):
        """
        @return texture coordinates generation plane T.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Vec4

        """
        res = _Graphic3d.Handle_Graphic3d_TextureParams_GenPlaneT(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetGenMode(self, *args):
        """
        SetGenMode(Handle_Graphic3d_TextureParams self, Graphic3d_TypeOfTextureMode const theMode, Graphic3d_Vec4 const thePlaneS, Graphic3d_Vec4 const thePlaneT)

        Setup texture coordinates generation mode.

        :type theMode: OCC.wrapper.Graphic3d.Graphic3d_TypeOfTextureMode
        :type thePlaneS: OCC.wrapper.Graphic3d.Graphic3d_Vec4
        :type thePlaneT: OCC.wrapper.Graphic3d.Graphic3d_Vec4

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_SetGenMode(self, *args)


    def SamplerRevision(self, *args):
        """
        SamplerRevision(Handle_Graphic3d_TextureParams self) -> unsigned int

        Return modification counter of parameters related to sampler state.

        :rtype: unsigned int

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_SamplerRevision(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_TextureParams self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_TextureParams self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_TextureParams self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_TextureParams self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_TextureParams self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_TextureParams self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_TextureParams self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_TextureParams self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_TextureParams self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_TextureParams_DecrementRefCounter(self, *args)

Handle_Graphic3d_TextureParams_swigregister = _Graphic3d.Handle_Graphic3d_TextureParams_swigregister
Handle_Graphic3d_TextureParams_swigregister(Handle_Graphic3d_TextureParams)

def Handle_Graphic3d_TextureParams_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_TextureParams_DownCast(thing)
Handle_Graphic3d_TextureParams_DownCast = _Graphic3d.Handle_Graphic3d_TextureParams_DownCast

class Handle_Graphic3d_GraphicDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_GraphicDriver self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_GraphicDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_GraphicDriver self, Graphic3d_GraphicDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_GraphicDriver self, Handle_Graphic3d_GraphicDriver theHandle) -> Handle_Graphic3d_GraphicDriver
        assign(Handle_Graphic3d_GraphicDriver self, Graphic3d_GraphicDriver thePtr) -> Handle_Graphic3d_GraphicDriver
        assign(Handle_Graphic3d_GraphicDriver self, Handle_Graphic3d_GraphicDriver theHandle) -> Handle_Graphic3d_GraphicDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_GraphicDriver self) -> Graphic3d_GraphicDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_GraphicDriver self) -> Graphic3d_GraphicDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_GraphicDriver self) -> Graphic3d_GraphicDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_GraphicDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_GraphicDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_GraphicDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_GraphicDriver_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_GraphicDriver

    def InquireLimit(self, *args):
        """
        InquireLimit(Handle_Graphic3d_GraphicDriver self, Graphic3d_TypeOfLimit const theType) -> Standard_Integer

        Request limit of graphic resource of specific type.

        :type theType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfLimit
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_InquireLimit(self, *args)


    def InquireLightLimit(self, *args):
        """
        InquireLightLimit(Handle_Graphic3d_GraphicDriver self) -> Standard_Integer

        Request maximum number of active light sources supported by driver and hardware.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_InquireLightLimit(self, *args)


    def InquirePlaneLimit(self, *args):
        """
        InquirePlaneLimit(Handle_Graphic3d_GraphicDriver self) -> Standard_Integer

        Request maximum number of active clipping planes supported by driver and hardware.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_InquirePlaneLimit(self, *args)


    def InquireViewLimit(self, *args):
        """
        InquireViewLimit(Handle_Graphic3d_GraphicDriver self) -> Standard_Integer

        Request maximum number of views supported by driver.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_InquireViewLimit(self, *args)


    def CreateStructure(self, *args):
        """
        CreateStructure(Handle_Graphic3d_GraphicDriver self, Handle_Graphic3d_StructureManager theManager) -> Handle_Graphic3d_CStructure

        Creates new empty graphic structure

        :type theManager: OCC.wrapper.Graphic3d.Handle_Graphic3d_StructureManager
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_CStructure

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_CreateStructure(self, *args)


    def RemoveStructure(self, *args):
        """
        RemoveStructure(Handle_Graphic3d_GraphicDriver self, Handle_Graphic3d_CStructure theCStructure)

        Removes structure from graphic driver and releases its resources.

        :type theCStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_CStructure

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_RemoveStructure(self, *args)


    def CreateView(self, *args):
        """
        CreateView(Handle_Graphic3d_GraphicDriver self, Handle_Graphic3d_StructureManager theMgr) -> Handle_Graphic3d_CView

        Creates new view for this graphic driver.

        :type theMgr: OCC.wrapper.Graphic3d.Handle_Graphic3d_StructureManager
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_CView

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_CreateView(self, *args)


    def RemoveView(self, *args):
        """
        RemoveView(Handle_Graphic3d_GraphicDriver self, Handle_Graphic3d_CView theView)

        Removes view from graphic driver and releases its resources.

        :type theView: OCC.wrapper.Graphic3d.Handle_Graphic3d_CView

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_RemoveView(self, *args)


    def EnableVBO(self, *args):
        """
        EnableVBO(Handle_Graphic3d_GraphicDriver self, Standard_Boolean const status)

        enables/disables usage of OpenGL vertex buffer arrays while drawing primitiev arrays

        :type status: bool

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_EnableVBO(self, *args)


    def MemoryInfo(self, *args):
        """
        MemoryInfo(Handle_Graphic3d_GraphicDriver self, TCollection_AsciiString theInfo) -> Standard_Boolean

        Returns information about GPU memory usage.

        :type theFreeBytes: int
        :type theInfo: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_MemoryInfo(self, *args)


    def DefaultTextHeight(self, *args):
        """
        DefaultTextHeight(Handle_Graphic3d_GraphicDriver self) -> Standard_ShortReal

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_DefaultTextHeight(self, *args)


    def TextSize(self, *args):
        """
        TextSize(Handle_Graphic3d_GraphicDriver self, Handle_Graphic3d_CView theView, Standard_CString const theText, Standard_ShortReal const theHeight)

        Computes text width.

        :type theView: OCC.wrapper.Graphic3d.Handle_Graphic3d_CView
        :type theText: OCC.wrapper.Standard.Standard_CString
        :type theHeight: float
        :type theWidth: float
        :type theAscent: float
        :type theDescent: float

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_TextSize(self, *args)


    def AddZLayer(self, *args):
        """
        AddZLayer(Handle_Graphic3d_GraphicDriver self, Graphic3d_ZLayerId const theLayerId)

        Add a new top-level z layer with ID <theLayerId> for
        the view. Z layers allow drawing structures in higher layers
        in foreground of structures in lower layers. To add a structure
        to desired layer on display it is necessary to set the layer
        ID for the structure.

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_AddZLayer(self, *args)


    def RemoveZLayer(self, *args):
        """
        RemoveZLayer(Handle_Graphic3d_GraphicDriver self, Graphic3d_ZLayerId const theLayerId)

        Removes Z layer. All structures displayed at the moment in layer will be displayed in
        default layer (the bottom-level z layer). By default, there are always default
        bottom-level layer that can't be removed.  The passed theLayerId should be not less than 0
        (reserved for default layers that can not be removed).

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_RemoveZLayer(self, *args)


    def ZLayers(self, *args):
        """
        ZLayers(Handle_Graphic3d_GraphicDriver self, NCollection_Sequence_Standard_Integer theLayerSeq)

        Returns list of Z layers defined for the graphical driver.

        :type theLayerSeq: OCC.wrapper.TColStd.TColStd_SequenceOfInteger

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_ZLayers(self, *args)


    def SetZLayerSettings(self, *args):
        """
        SetZLayerSettings(Handle_Graphic3d_GraphicDriver self, Graphic3d_ZLayerId const theLayerId, Graphic3d_ZLayerSettings const & theSettings)

        Sets the settings for a single Z layer.

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId
        :type theSettings: OCC.wrapper.Graphic3d.Graphic3d_ZLayerSettings

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_SetZLayerSettings(self, *args)


    def ZLayerSettings(self, *args):
        """
        Returns the settings of a single Z layer.

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ZLayerSettings

        """
        res = _Graphic3d.Handle_Graphic3d_GraphicDriver_ZLayerSettings(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ViewExists(self, *args):
        """
        ViewExists(Handle_Graphic3d_GraphicDriver self, Handle_Aspect_Window theWindow, Handle_Graphic3d_CView theView) -> Standard_Boolean

        Returns view associated with the window if it is exists and is activated.
        Returns Standard_True if the view associated to the window exists.

        :type theWindow: OCC.wrapper.Aspect.Handle_Aspect_Window
        :type theView: OCC.wrapper.Graphic3d.Handle_Graphic3d_CView
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_ViewExists(self, *args)


    def GetDisplayConnection(self, *args):
        """
        returns Handle to display connection

        :rtype: OCC.wrapper.Aspect.Handle_Aspect_DisplayConnection

        """
        res = _Graphic3d.Handle_Graphic3d_GraphicDriver_GetDisplayConnection(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewIdentification(self, *args):
        """
        NewIdentification(Handle_Graphic3d_GraphicDriver self) -> Standard_Integer

        Returns a new identification number for a new structure.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_NewIdentification(self, *args)


    def RemoveIdentification(self, *args):
        """
        RemoveIdentification(Handle_Graphic3d_GraphicDriver self, Standard_Integer const theId)

        Frees the identifier of a structure.

        :type theId: int

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_RemoveIdentification(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_GraphicDriver self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_GraphicDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_GraphicDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_GraphicDriver self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_GraphicDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_GraphicDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_GraphicDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_GraphicDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_GraphicDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_GraphicDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_GraphicDriver self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_GraphicDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_GraphicDriver_DecrementRefCounter(self, *args)

Handle_Graphic3d_GraphicDriver_swigregister = _Graphic3d.Handle_Graphic3d_GraphicDriver_swigregister
Handle_Graphic3d_GraphicDriver_swigregister(Handle_Graphic3d_GraphicDriver)

def Handle_Graphic3d_GraphicDriver_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_GraphicDriver_DownCast(thing)
Handle_Graphic3d_GraphicDriver_DownCast = _Graphic3d.Handle_Graphic3d_GraphicDriver_DownCast

class Graphic3d_PriorityDefinitionError(Standard.Standard_OutOfRange):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_PriorityDefinitionError
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_PriorityDefinitionError(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Graphic3d_PriorityDefinitionError self) -> Graphic3d_PriorityDefinitionError
        __init__(Graphic3d_PriorityDefinitionError self, Standard_CString const theMessage) -> Graphic3d_PriorityDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString

        """
        this = _Graphic3d.new_Graphic3d_PriorityDefinitionError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewInstance(*args):
        """
        NewInstance(Standard_CString const theMessage) -> Handle_Graphic3d_PriorityDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_PriorityDefinitionError

        """
        return _Graphic3d.Graphic3d_PriorityDefinitionError_NewInstance(*args)

    NewInstance = staticmethod(NewInstance)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_PriorityDefinitionError_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_PriorityDefinitionError_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_PriorityDefinitionError_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_PriorityDefinitionError
Graphic3d_PriorityDefinitionError_swigregister = _Graphic3d.Graphic3d_PriorityDefinitionError_swigregister
Graphic3d_PriorityDefinitionError_swigregister(Graphic3d_PriorityDefinitionError)

def Graphic3d_PriorityDefinitionError_NewInstance(*args):
    """
    Graphic3d_PriorityDefinitionError_NewInstance(Standard_CString const theMessage) -> Handle_Graphic3d_PriorityDefinitionError

    :type theMessage: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_PriorityDefinitionError

    """
    return _Graphic3d.Graphic3d_PriorityDefinitionError_NewInstance(*args)

def Graphic3d_PriorityDefinitionError_get_type_name(*args):
    """
    Graphic3d_PriorityDefinitionError_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_PriorityDefinitionError_get_type_name(*args)

def Graphic3d_PriorityDefinitionError_get_type_descriptor(*args):
    """
    Graphic3d_PriorityDefinitionError_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_PriorityDefinitionError_get_type_descriptor(*args)

class Handle_Graphic3d_Texture2Dmanual(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_Texture2Dmanual self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_Texture2Dmanual self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_Texture2Dmanual self, Graphic3d_Texture2Dmanual thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_Texture2Dmanual self, Handle_Graphic3d_Texture2Dmanual theHandle) -> Handle_Graphic3d_Texture2Dmanual
        assign(Handle_Graphic3d_Texture2Dmanual self, Graphic3d_Texture2Dmanual thePtr) -> Handle_Graphic3d_Texture2Dmanual
        assign(Handle_Graphic3d_Texture2Dmanual self, Handle_Graphic3d_Texture2Dmanual theHandle) -> Handle_Graphic3d_Texture2Dmanual

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_Texture2Dmanual self) -> Graphic3d_Texture2Dmanual

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_Texture2Dmanual self) -> Graphic3d_Texture2Dmanual

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_Texture2Dmanual self) -> Graphic3d_Texture2Dmanual

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_Texture2Dmanual___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_Texture2Dmanual(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_Texture2Dmanual_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_Texture2Dmanual

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_Texture2Dmanual self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_Texture2Dmanual_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_Texture2Dmanual_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NumberOfTextures(self, *args):
        """
        NumberOfTextures(Handle_Graphic3d_Texture2Dmanual self) -> Standard_Integer

        Returns the number of predefined textures.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_NumberOfTextures(self, *args)


    def TextureName(self, *args):
        """
        TextureName(Handle_Graphic3d_Texture2Dmanual self, Standard_Integer const theRank) -> TCollection_AsciiString

        Returns the name of the predefined texture of rank <aRank>

        :type theRank: int
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_TextureName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_Graphic3d_Texture2Dmanual self) -> Graphic3d_NameOfTexture2D

        Returns the name of the predefined textures or NOT_2D_UNKNOWN
        when the name is given as a filename.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_NameOfTexture2D

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_Name(self, *args)


    def SetImage(self, *args):
        """
        SetImage(Handle_Graphic3d_Texture2Dmanual self, Handle_Image_PixMap thePixMap)

        Assign new image to the texture.
        Note that this method does not invalidate already uploaded resources - consider calling ::UpdateRevision() if needed.

        :type thePixMap: OCC.wrapper.Image.Handle_Image_PixMap

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_SetImage(self, *args)


    def HasMipMaps(self, *args):
        """
        HasMipMaps(Handle_Graphic3d_Texture2Dmanual self) -> Standard_Boolean

        Return true if mip-maps should be used.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_HasMipMaps(self, *args)


    def SetMipMaps(self, *args):
        """
        SetMipMaps(Handle_Graphic3d_Texture2Dmanual self, Standard_Boolean const theToUse)

        Set if mip-maps should be used (generated if needed).
        Note that this method should be called before loading / using the texture.

        :type theToUse: bool

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_SetMipMaps(self, *args)


    def EnableSmooth(self, *args):
        """
        EnableSmooth(Handle_Graphic3d_Texture2Dmanual self)

        enable texture smoothing


        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_EnableSmooth(self, *args)


    def IsSmoothed(self, *args):
        """
        IsSmoothed(Handle_Graphic3d_Texture2Dmanual self) -> Standard_Boolean

        Returns TRUE if the texture is smoothed.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_IsSmoothed(self, *args)


    def DisableSmooth(self, *args):
        """
        DisableSmooth(Handle_Graphic3d_Texture2Dmanual self)

        disable texture smoothing


        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_DisableSmooth(self, *args)


    def EnableModulate(self, *args):
        """
        EnableModulate(Handle_Graphic3d_Texture2Dmanual self)

        enable texture modulate mode.
        the image is modulate with the shading of the surface.


        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_EnableModulate(self, *args)


    def DisableModulate(self, *args):
        """
        DisableModulate(Handle_Graphic3d_Texture2Dmanual self)

        disable texture modulate mode.
        the image is directly decal on the surface.


        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_DisableModulate(self, *args)


    def IsModulate(self, *args):
        """
        IsModulate(Handle_Graphic3d_Texture2Dmanual self) -> Standard_Boolean

        Returns TRUE if the texture is modulate.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_IsModulate(self, *args)


    def EnableRepeat(self, *args):
        """
        EnableRepeat(Handle_Graphic3d_Texture2Dmanual self)

        use this methods if you want to enable
        texture repetition on your objects.


        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_EnableRepeat(self, *args)


    def DisableRepeat(self, *args):
        """
        DisableRepeat(Handle_Graphic3d_Texture2Dmanual self)

        use this methods if you want to disable
        texture repetition on your objects.


        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_DisableRepeat(self, *args)


    def IsRepeat(self, *args):
        """
        IsRepeat(Handle_Graphic3d_Texture2Dmanual self) -> Standard_Boolean

        Returns TRUE if the texture repeat is enable.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_IsRepeat(self, *args)


    def AnisoFilter(self, *args):
        """
        AnisoFilter(Handle_Graphic3d_Texture2Dmanual self) -> Graphic3d_LevelOfTextureAnisotropy

        @return level of anisontropy texture filter.
        Default value is Graphic3d_LOTA_OFF.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_LevelOfTextureAnisotropy

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_AnisoFilter(self, *args)


    def SetAnisoFilter(self, *args):
        """
        SetAnisoFilter(Handle_Graphic3d_Texture2Dmanual self, Graphic3d_LevelOfTextureAnisotropy const theLevel)

        @param theLevel level of anisontropy texture filter.

        :type theLevel: OCC.wrapper.Graphic3d.Graphic3d_LevelOfTextureAnisotropy

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_SetAnisoFilter(self, *args)


    def TexturesFolder(self, *args):
        """
        TexturesFolder(Handle_Graphic3d_Texture2Dmanual self) -> TCollection_AsciiString

        The path to textures determined from CSF_MDTVTexturesDirectory or CASROOT environment variables.
        @return the root folder with default textures.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_TexturesFolder(self, *args)


    def IsDone(self, *args):
        """
        IsDone(Handle_Graphic3d_Texture2Dmanual self) -> Standard_Boolean

        Checks if a texture class is valid or not.
        @return true if the construction of the class is correct

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_IsDone(self, *args)


    def Path(self, *args):
        """
        Returns the full path of the defined texture.
        It could be empty path if GetImage() is overridden to load image not from file.

        :rtype: OCC.wrapper.OSD.OSD_Path

        """
        res = _Graphic3d.Handle_Graphic3d_Texture2Dmanual_Path(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Type(self, *args):
        """
        Type(Handle_Graphic3d_Texture2Dmanual self) -> Graphic3d_TypeOfTexture

        @return the texture type.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfTexture

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_Type(self, *args)


    def GetId(self, *args):
        """
        This ID will be used to manage resource in graphic driver.

        Default implementation generates unique ID within constructor;
        inheritors may re-initialize it within their constructor,
        but should never modify it afterwards.

        Multiple Graphic3d_TextureRoot instances with same ID
        will be treated as single texture with different parameters
        to optimize memory usage though this will be more natural
        to use same instance of Graphic3d_TextureRoot when possible.

        If this ID is set to empty string by inheritor,
        then independent graphical resource will be created
        for each instance of Graphic3d_AspectFillArea3d where texture will be used.

        @return texture identifier.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Handle_Graphic3d_Texture2Dmanual_GetId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Revision(self, *args):
        """
        Revision(Handle_Graphic3d_Texture2Dmanual self) -> Standard_Size

        Return image revision.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_Revision(self, *args)


    def UpdateRevision(self, *args):
        """
        UpdateRevision(Handle_Graphic3d_Texture2Dmanual self)

        Update image revision.
        Can be used for signaling changes in the texture source (e.g. file update, pixmap update)
        without re-creating texture source itself (since unique id should be never modified).


        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_UpdateRevision(self, *args)


    def GetImage(self, *args):
        """
        GetImage(Handle_Graphic3d_Texture2Dmanual self) -> Handle_Image_PixMap

        This method will be called by graphic driver each time when texture resource should be created.
        Default constructors allow defining the texture source as path to texture image or directly as pixmap.
        If the source is defined as path, then the image will be dynamically loaded when this method is called
        (and no copy will be preserved in this class instance).
        Inheritors may dynamically generate the image.
        Notice, image data should be in Bottom-Up order (see Image_PixMap::IsTopDown())!
        @return the image for texture.

        :rtype: OCC.wrapper.Image.Handle_Image_PixMap

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_GetImage(self, *args)


    def GetParams(self, *args):
        """
        @return low-level texture parameters

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureParams

        """
        res = _Graphic3d.Handle_Graphic3d_Texture2Dmanual_GetParams(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_Texture2Dmanual self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_Texture2Dmanual self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_Texture2Dmanual self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_Texture2Dmanual self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_Texture2Dmanual self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_Texture2Dmanual self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_Texture2Dmanual self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_Texture2Dmanual self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_Texture2Dmanual self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_DecrementRefCounter(self, *args)

Handle_Graphic3d_Texture2Dmanual_swigregister = _Graphic3d.Handle_Graphic3d_Texture2Dmanual_swigregister
Handle_Graphic3d_Texture2Dmanual_swigregister(Handle_Graphic3d_Texture2Dmanual)

def Handle_Graphic3d_Texture2Dmanual_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_Texture2Dmanual_DownCast(thing)
Handle_Graphic3d_Texture2Dmanual_DownCast = _Graphic3d.Handle_Graphic3d_Texture2Dmanual_DownCast

class BVH_Box_Standard_ShortReal_(object):
    """
    Defines axis aligned bounding box (AABB) based on BVH vectors.
    	param T Numeric data type
    	param N Vector dimension
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Defines axis aligned bounding box (AABB) based on BVH vectors.
        	param T Numeric data type
        	param N Vector dimension
        """
        this = _Graphic3d.new_BVH_Box_Standard_ShortReal_(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clear(self, *args):
        """
        Clear(BVH_Box_Standard_ShortReal_ self)

        Clears bounding box.


        """
        return _Graphic3d.BVH_Box_Standard_ShortReal__Clear(self, *args)


    def IsValid(self, *args):
        """
        IsValid(BVH_Box_Standard_ShortReal_ self) -> Standard_Boolean

        Is bounding box valid?

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.BVH_Box_Standard_ShortReal__IsValid(self, *args)


    def Add(self, *args):
        """
        Add(BVH_Box_Standard_ShortReal_ self, BVH_Box< Standard_ShortReal,4 >::BVH_VecNt const & thePoint)

        Appends new point to the bounding box.

        :type thePoint: OCC.wrapper.BVH.BVH_VecNt

        """
        return _Graphic3d.BVH_Box_Standard_ShortReal__Add(self, *args)


    def Combine(self, *args):
        """
        Combine(BVH_Box_Standard_ShortReal_ self, BVH_Box_Standard_ShortReal_ theBox)

        Combines bounding box with another one.

        :type theBox: OCC.wrapper.BVH.BVH_Box

        """
        return _Graphic3d.BVH_Box_Standard_ShortReal__Combine(self, *args)


    def CornerMin(self, *args):
        """
        Returns minimum point of bounding box.

        :rtype: OCC.wrapper.BVH.BVH_VecNt

        """
        res = _Graphic3d.BVH_Box_Standard_ShortReal__CornerMin(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CornerMax(self, *args):
        """
        Returns maximum point of bounding box.

        :rtype: OCC.wrapper.BVH.BVH_VecNt

        """
        res = _Graphic3d.BVH_Box_Standard_ShortReal__CornerMax(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Area(self, *args):
        """
        Area(BVH_Box_Standard_ShortReal_ self) -> float

        Returns surface area of bounding box.
        If the box is degenerated into line, returns the perimeter instead.

        :rtype: T

        """
        return _Graphic3d.BVH_Box_Standard_ShortReal__Area(self, *args)


    def Size(self, *args):
        """
        Size(BVH_Box_Standard_ShortReal_ self) -> BVH_Box< Standard_ShortReal,4 >::BVH_VecNt

        Returns diagonal of bounding box.

        :rtype: OCC.wrapper.BVH.BVH_VecNt

        """
        return _Graphic3d.BVH_Box_Standard_ShortReal__Size(self, *args)


    def Center(self, *args):
        """
        Center(BVH_Box_Standard_ShortReal_ self) -> BVH_Box< Standard_ShortReal,4 >::BVH_VecNt
        Center(BVH_Box_Standard_ShortReal_ self, Standard_Integer const theAxis) -> float

        Returns center of bounding box along the given axis.

        :type theAxis: int
        :rtype: T

        """
        return _Graphic3d.BVH_Box_Standard_ShortReal__Center(self, *args)

    __swig_destroy__ = _Graphic3d.delete_BVH_Box_Standard_ShortReal_
BVH_Box_Standard_ShortReal__swigregister = _Graphic3d.BVH_Box_Standard_ShortReal__swigregister
BVH_Box_Standard_ShortReal__swigregister(BVH_Box_Standard_ShortReal_)


try:
	Graphic3d_BndBox4f = BVH_Box_Standard_ShortReal_
except NameError:
	pass # does not exist, probably ignored

class Graphic3d_Texture2Dplane(Graphic3d_Texture2D):
    """
    This class allows the management of a 2D texture defined from a plane equation
    Use the SetXXX() methods for positioning the texture as you want.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_Texture2Dplane
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_Texture2Dplane(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Graphic3d_Texture2Dplane self, TCollection_AsciiString theFileName) -> Graphic3d_Texture2Dplane
        __init__(Graphic3d_Texture2Dplane self, Graphic3d_NameOfTexture2D const theNOT) -> Graphic3d_Texture2Dplane
        __init__(Graphic3d_Texture2Dplane self, Handle_Image_PixMap thePixMap) -> Graphic3d_Texture2Dplane

        Creates a texture from the pixmap.

        :type thePixMap: OCC.wrapper.Image.Handle_Image_PixMap

        """
        this = _Graphic3d.new_Graphic3d_Texture2Dplane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetPlaneS(self, *args):
        """
        SetPlaneS(Graphic3d_Texture2Dplane self, Standard_ShortReal const A, Standard_ShortReal const B, Standard_ShortReal const C, Standard_ShortReal const D)

        Defines the texture projection plane for texture coordinate S
        default is <1.0, 0.0, 0.0, 0.0>

        :type A: float
        :type B: float
        :type C: float
        :type D: float

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_SetPlaneS(self, *args)


    def SetPlaneT(self, *args):
        """
        SetPlaneT(Graphic3d_Texture2Dplane self, Standard_ShortReal const A, Standard_ShortReal const B, Standard_ShortReal const C, Standard_ShortReal const D)

        Defines the texture projection plane for texture coordinate T
        default is <0.0, 1.0, 0.0, 0.0>

        :type A: float
        :type B: float
        :type C: float
        :type D: float

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_SetPlaneT(self, *args)


    def SetPlane(self, *args):
        """
        SetPlane(Graphic3d_Texture2Dplane self, Graphic3d_NameOfTexturePlane const thePlane)

        Defines the texture projection plane for both S and T texture coordinate
        default is NOTP_XY meaning:
        <1.0, 0.0, 0.0, 0.0> for S
        and  <0.0, 1.0, 0.0, 0.0> for T

        :type thePlane: OCC.wrapper.Graphic3d.Graphic3d_NameOfTexturePlane

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_SetPlane(self, *args)


    def SetScaleS(self, *args):
        """
        SetScaleS(Graphic3d_Texture2Dplane self, Standard_ShortReal const theVal)

        Defines the texture scale for the S texture coordinate
        much easier than recomputing the S plane equation
        but the result is the same
        default to 1.0

        :type theVal: float

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_SetScaleS(self, *args)


    def SetScaleT(self, *args):
        """
        SetScaleT(Graphic3d_Texture2Dplane self, Standard_ShortReal const theVal)

        Defines the texture scale for the T texture coordinate
        much easier than recompution the T plane equation
        but the result is the same
        default to 1.0

        :type theVal: float

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_SetScaleT(self, *args)


    def SetTranslateS(self, *args):
        """
        SetTranslateS(Graphic3d_Texture2Dplane self, Standard_ShortReal const theVal)

        Defines the texture translation for the S texture coordinate
        you can obtain the same effect by modifying the S plane
        equation but its not easier.
        default to 0.0

        :type theVal: float

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_SetTranslateS(self, *args)


    def SetTranslateT(self, *args):
        """
        SetTranslateT(Graphic3d_Texture2Dplane self, Standard_ShortReal const theVal)

        Defines the texture translation for the T texture coordinate
        you can obtain the same effect by modifying the T plane
        equation but its not easier.
        default to 0.0

        :type theVal: float

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_SetTranslateT(self, *args)


    def SetRotation(self, *args):
        """
        SetRotation(Graphic3d_Texture2Dplane self, Standard_ShortReal const theVal)

        Sets the rotation angle of the whole texture.
        the same result might be achieved by recomputing the
        S and T plane equation but it's not the easiest way...
        the angle is expressed in degrees
        default is 0.0

        :type theVal: float

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_SetRotation(self, *args)


    def Plane(self, *args):
        """
        Plane(Graphic3d_Texture2Dplane self) -> Graphic3d_NameOfTexturePlane

        Returns the current texture plane name or NOTP_UNKNOWN
        when the plane is user defined.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_NameOfTexturePlane

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_Plane(self, *args)


    def PlaneS(self, *args):
        """
        PlaneS(Graphic3d_Texture2Dplane self)

        Returns the current texture plane S equation

        :type A: float
        :type B: float
        :type C: float
        :type D: float

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_PlaneS(self, *args)


    def PlaneT(self, *args):
        """
        PlaneT(Graphic3d_Texture2Dplane self)

        Returns   the current texture plane T equation

        :type A: float
        :type B: float
        :type C: float
        :type D: float

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_PlaneT(self, *args)


    def TranslateS(self, *args):
        """
        TranslateS(Graphic3d_Texture2Dplane self)

        Returns  the current texture S translation value

        :type theVal: float

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_TranslateS(self, *args)


    def TranslateT(self, *args):
        """
        TranslateT(Graphic3d_Texture2Dplane self)

        Returns the current texture T translation value

        :type theVal: float

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_TranslateT(self, *args)


    def ScaleS(self, *args):
        """
        ScaleS(Graphic3d_Texture2Dplane self)

        Returns the current texture S scale value

        :type theVal: float

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_ScaleS(self, *args)


    def ScaleT(self, *args):
        """
        ScaleT(Graphic3d_Texture2Dplane self)

        Returns the current texture T scale value

        :type theVal: float

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_ScaleT(self, *args)


    def Rotation(self, *args):
        """
        Rotation(Graphic3d_Texture2Dplane self)

        Returns the current texture rotation angle

        :type theVal: float

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_Rotation(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_Texture2Dplane_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_Texture2Dplane_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Texture2Dplane
Graphic3d_Texture2Dplane_swigregister = _Graphic3d.Graphic3d_Texture2Dplane_swigregister
Graphic3d_Texture2Dplane_swigregister(Graphic3d_Texture2Dplane)

def Graphic3d_Texture2Dplane_get_type_name(*args):
    """
    Graphic3d_Texture2Dplane_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_Texture2Dplane_get_type_name(*args)

def Graphic3d_Texture2Dplane_get_type_descriptor(*args):
    """
    Graphic3d_Texture2Dplane_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_Texture2Dplane_get_type_descriptor(*args)

class Handle_Graphic3d_Structure(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_Structure self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_Structure_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_Structure self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_Structure_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_Structure self, Graphic3d_Structure thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_Structure_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_Structure self, Handle_Graphic3d_Structure theHandle) -> Handle_Graphic3d_Structure
        assign(Handle_Graphic3d_Structure self, Graphic3d_Structure thePtr) -> Handle_Graphic3d_Structure
        assign(Handle_Graphic3d_Structure self, Handle_Graphic3d_Structure theHandle) -> Handle_Graphic3d_Structure

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_Structure_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_Structure self) -> Graphic3d_Structure

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_Structure_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_Structure self) -> Graphic3d_Structure

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_Structure___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_Structure self) -> Graphic3d_Structure

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_Structure___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_Structure___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_Structure___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_Structure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_Structure_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_Structure

    def Clear(self, *args):
        """
        Clear(Handle_Graphic3d_Structure self, Standard_Boolean const WithDestruction)

        if WithDestruction == Standard_True then
        suppress all the groups of primitives in the structure.
        and it is mandatory to create a new group in <me>.
        if WithDestruction == Standard_False then
        clears all the groups of primitives in the structure.
        and all the groups are conserved and empty.
        They will be erased at the next screen update.
        The structure itself is conserved.
        The transformation and the attributes of <me> are conserved.
        The childs of <me> are conserved.

        :type WithDestruction: bool

        """
        return _Graphic3d.Handle_Graphic3d_Structure_Clear(self, *args)


    def Display(self, *args):
        """
        Display(Handle_Graphic3d_Structure self)

        Displays the structure <me> in all the views of the visualiser.


        """
        return _Graphic3d.Handle_Graphic3d_Structure_Display(self, *args)


    def DisplayPriority(self, *args):
        """
        DisplayPriority(Handle_Graphic3d_Structure self) -> Standard_Integer

        Returns the current display priority for the
        structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Structure_DisplayPriority(self, *args)


    def Erase(self, *args):
        """
        Erase(Handle_Graphic3d_Structure self)

        Erases the structure <me> in all the views
        of the visualiser.


        """
        return _Graphic3d.Handle_Graphic3d_Structure_Erase(self, *args)


    def Highlight(self, *args):
        """
        Highlight(Handle_Graphic3d_Structure self, Handle_Graphic3d_PresentationAttributes theStyle, Standard_Boolean const theToUpdateMgr)

        Highlights the structure in all the views with the given style
        @param theStyle [in] the style (type of highlighting: box/color, color and opacity)
        @param theToUpdateMgr [in] defines whether related computed structures will be
        highlighted via structure manager or not

        :type theStyle: OCC.wrapper.Graphic3d.Handle_Graphic3d_PresentationAttributes
        :type theToUpdateMgr: bool

        """
        return _Graphic3d.Handle_Graphic3d_Structure_Highlight(self, *args)


    def Remove(self, *args):
        """
        Remove(Handle_Graphic3d_Structure self)
        Remove(Handle_Graphic3d_Structure self, Standard_Address const APtr, Graphic3d_TypeOfConnection const AType)

        Suppress the adress <APtr> in the list
        of descendants or in the list of ancestors.

        :type APtr: OCC.wrapper.Standard.Standard_Address
        :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection

        """
        return _Graphic3d.Handle_Graphic3d_Structure_Remove(self, *args)


    def CalculateBoundBox(self, *args):
        """
        CalculateBoundBox(Handle_Graphic3d_Structure self)

        Computes axis-aligned bounding box of a structure.


        """
        return _Graphic3d.Handle_Graphic3d_Structure_CalculateBoundBox(self, *args)


    def SetInfiniteState(self, *args):
        """
        SetInfiniteState(Handle_Graphic3d_Structure self, Standard_Boolean const theToSet)

        If <theToSet> is Standard_True then <me> is infinite and
        the MinMaxValues method method return :
        theXMin = theYMin = theZMin = RealFirst().
        theXMax = theYMax = theZMax = RealLast().
        By default, <me> is not infinite but empty.

        :type theToSet: bool

        """
        return _Graphic3d.Handle_Graphic3d_Structure_SetInfiniteState(self, *args)


    def SetDisplayPriority(self, *args):
        """
        SetDisplayPriority(Handle_Graphic3d_Structure self, Standard_Integer const Priority)

        Modifies the order of displaying the structure.
        Values are between 0 and 10.
        Structures are drawn according to their display priorities
        in ascending order.
        A structure of priority 10 is displayed the last and appears over the others.
        The default value is 5.
        Category: Methods to modify the class definition
        Warning: If <me> is displayed then the SetDisplayPriority
        method erase <me> and display <me> with the
        new priority.
        Raises PriorityDefinitionError if <Priority> is
        greater than 10 or a negative value.

        :type Priority: int

        """
        return _Graphic3d.Handle_Graphic3d_Structure_SetDisplayPriority(self, *args)


    def ResetDisplayPriority(self, *args):
        """
        ResetDisplayPriority(Handle_Graphic3d_Structure self)

        Reset the current priority of the structure to the
        previous priority.
        Category: Methods to modify the class definition
        Warning: If <me> is displayed then the SetDisplayPriority
        method erase <me> and display <me> with the
        previous priority.


        """
        return _Graphic3d.Handle_Graphic3d_Structure_ResetDisplayPriority(self, *args)


    def SetZLayer(self, *args):
        """
        SetZLayer(Handle_Graphic3d_Structure self, Graphic3d_ZLayerId const theLayerId)

        Set Z layer ID for the structure. The Z layer mechanism
        allows to display structures presented in higher layers in overlay
        of structures in lower layers by switching off z buffer depth
        test between layers

        :type theLayerId: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Handle_Graphic3d_Structure_SetZLayer(self, *args)


    def GetZLayer(self, *args):
        """
        GetZLayer(Handle_Graphic3d_Structure self) -> Graphic3d_ZLayerId

        Get Z layer ID of displayed structure. The method
        returns -1 if the structure has no ID (deleted from graphic driver).

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Handle_Graphic3d_Structure_GetZLayer(self, *args)


    def SetClipPlanes(self, *args):
        """
        SetClipPlanes(Handle_Graphic3d_Structure self, Handle_Graphic3d_SequenceOfHClipPlane thePlanes)

        Changes a sequence of clip planes slicing the structure on rendering.
        @param thePlanes [in] the set of clip planes.

        :type thePlanes: OCC.wrapper.Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane

        """
        return _Graphic3d.Handle_Graphic3d_Structure_SetClipPlanes(self, *args)


    def ClipPlanes(self, *args):
        """
        Get clip planes slicing the structure on rendering.
        @return set of clip planes.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane

        """
        res = _Graphic3d.Handle_Graphic3d_Structure_ClipPlanes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetVisible(self, *args):
        """
        SetVisible(Handle_Graphic3d_Structure self, Standard_Boolean const AValue)

        Modifies the visibility indicator to Standard_True or
        Standard_False for the structure <me>.
        The default value at the definition of <me> is
        Standard_True.

        :type AValue: bool

        """
        return _Graphic3d.Handle_Graphic3d_Structure_SetVisible(self, *args)


    def SetVisual(self, *args):
        """
        SetVisual(Handle_Graphic3d_Structure self, Graphic3d_TypeOfStructure const AVisual)

        Modifies the visualisation mode for the structure <me>.

        :type AVisual: OCC.wrapper.Graphic3d.Graphic3d_TypeOfStructure

        """
        return _Graphic3d.Handle_Graphic3d_Structure_SetVisual(self, *args)


    def SetZoomLimit(self, *args):
        """
        SetZoomLimit(Handle_Graphic3d_Structure self, Standard_Real const LimitInf, Standard_Real const LimitSup)

        Modifies the minimum and maximum zoom coefficients
        for the structure <me>.
        The default value at the definition of <me> is unlimited.
        Category: Methods to modify the class definition
        Warning: Raises StructureDefinitionError if <LimitInf> is
        greater than <LimitSup> or if <LimitInf> or
        <LimitSup> is a negative value.

        :type LimitInf: float
        :type LimitSup: float

        """
        return _Graphic3d.Handle_Graphic3d_Structure_SetZoomLimit(self, *args)


    def SetIsForHighlight(self, *args):
        """
        SetIsForHighlight(Handle_Graphic3d_Structure self, Standard_Boolean const isForHighlight)

        marks the structure <me> representing wired structure needed for
        highlight only so it won't be added to BVH tree.
        Category: Methods to modify the class definition

        :type isForHighlight: bool

        """
        return _Graphic3d.Handle_Graphic3d_Structure_SetIsForHighlight(self, *args)


    def UnHighlight(self, *args):
        """
        UnHighlight(Handle_Graphic3d_Structure self)

        Suppresses the highlight for the structure <me>
        in all the views of the visualiser.


        """
        return _Graphic3d.Handle_Graphic3d_Structure_UnHighlight(self, *args)


    def Compute(self, *args):
        """
        Compute(Handle_Graphic3d_Structure self)
        Compute(Handle_Graphic3d_Structure self, Handle_Graphic3d_DataStructureManager aProjector) -> Handle_Graphic3d_Structure
        Compute(Handle_Graphic3d_Structure self, Handle_Graphic3d_DataStructureManager theProjector, Handle_Geom_Transformation theTrsf) -> Handle_Graphic3d_Structure
        Compute(Handle_Graphic3d_Structure self, Handle_Graphic3d_DataStructureManager aProjector, Handle_Graphic3d_Structure aStructure)
        Compute(Handle_Graphic3d_Structure self, Handle_Graphic3d_DataStructureManager theProjector, Handle_Geom_Transformation theTrsf, Handle_Graphic3d_Structure theStructure)

        Returns the new Structure defined for the new visualization

        :type theProjector: OCC.wrapper.Graphic3d.Handle_Graphic3d_DataStructureManager
        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation
        :type theStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Handle_Graphic3d_Structure_Compute(self, *args)


    def ReCompute(self, *args):
        """
        ReCompute(Handle_Graphic3d_Structure self)
        ReCompute(Handle_Graphic3d_Structure self, Handle_Graphic3d_DataStructureManager aProjector)

        Forces a new construction of the structure <me>
        if <me> is displayed in <aProjetor> and TOS_COMPUTED.

        :type aProjector: OCC.wrapper.Graphic3d.Handle_Graphic3d_DataStructureManager

        """
        return _Graphic3d.Handle_Graphic3d_Structure_ReCompute(self, *args)


    def ContainsFacet(self, *args):
        """
        ContainsFacet(Handle_Graphic3d_Structure self) -> Standard_Boolean

        Returns Standard_True if the structure <me> contains
        Polygons, Triangles or Quadrangles.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Structure_ContainsFacet(self, *args)


    def Groups(self, *args):
        """
        Returns the groups sequence included in the structure <me> (internal storage).

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_SequenceOfGroup

        """
        res = _Graphic3d.Handle_Graphic3d_Structure_Groups(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NumberOfGroups(self, *args):
        """
        NumberOfGroups(Handle_Graphic3d_Structure self) -> Standard_Integer

        Returns the current number of groups in the
        structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Structure_NumberOfGroups(self, *args)


    def NewGroup(self, *args):
        """
        NewGroup(Handle_Graphic3d_Structure self) -> Handle_Graphic3d_Group

        Append new group to this structure.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Group

        """
        return _Graphic3d.Handle_Graphic3d_Structure_NewGroup(self, *args)


    def HighlightStyle(self, *args):
        """
        Returns the highlight color for the Highlight method
        with the highlight method TOHM_COLOR or TOHM_BOUNDBOX.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_PresentationAttributes

        """
        res = _Graphic3d.Handle_Graphic3d_Structure_HighlightStyle(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsDeleted(self, *args):
        """
        IsDeleted(Handle_Graphic3d_Structure self) -> Standard_Boolean

        Returns Standard_True if the structure <me> is deleted.
        <me> is deleted after the call Remove (me).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Structure_IsDeleted(self, *args)


    def IsDisplayed(self, *args):
        """
        IsDisplayed(Handle_Graphic3d_Structure self) -> Standard_Boolean

        Returns the display indicator for the structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Structure_IsDisplayed(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_Graphic3d_Structure self) -> Standard_Boolean

        Returns Standard_True if the structure <me> is empty.
        Warning: A structure is empty if :
        it do not have group or all the groups are empties
        and it do not have descendant or all the descendants
        are empties.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Structure_IsEmpty(self, *args)


    def IsInfinite(self, *args):
        """
        IsInfinite(Handle_Graphic3d_Structure self) -> Standard_Boolean

        Returns Standard_True if the structure <me> is infinite.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Structure_IsInfinite(self, *args)


    def IsHighlighted(self, *args):
        """
        IsHighlighted(Handle_Graphic3d_Structure self) -> Standard_Boolean

        Returns the highlight indicator for the structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Structure_IsHighlighted(self, *args)


    def IsTransformed(self, *args):
        """
        IsTransformed(Handle_Graphic3d_Structure self) -> Standard_Boolean

        Returns Standard_True if the structure <me> is transformed.
        <=> The transformation != Identity.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Structure_IsTransformed(self, *args)


    def IsVisible(self, *args):
        """
        IsVisible(Handle_Graphic3d_Structure self) -> Standard_Boolean

        Returns the visibility indicator for the structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Structure_IsVisible(self, *args)


    def MinMaxValues(self, *args):
        """
        MinMaxValues(Handle_Graphic3d_Structure self, Standard_Boolean const theToIgnoreInfiniteFlag) -> Bnd_Box

        Returns the coordinates of the boundary box of the structure <me>.
        If <theToIgnoreInfiniteFlag> is TRUE, the method returns actual graphical
        boundaries of the Graphic3d_Group components. Otherwise, the
        method returns boundaries taking into account infinite state
        of the structure. This approach generally used for application
        specific fit operation (e.g. fitting the model into screen,
        not taking into accout infinite helper elements).
        Warning: If the structure <me> is empty then the empty box is returned,
        If the structure <me> is infinite then the whole box is returned.

        :type theToIgnoreInfiniteFlag: bool
        :rtype: OCC.wrapper.Bnd.Bnd_Box

        """
        return _Graphic3d.Handle_Graphic3d_Structure_MinMaxValues(self, *args)


    def Visual(self, *args):
        """
        Visual(Handle_Graphic3d_Structure self) -> Graphic3d_TypeOfStructure

        Returns the visualisation mode for the structure <me>.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfStructure

        """
        return _Graphic3d.Handle_Graphic3d_Structure_Visual(self, *args)


    def AcceptConnection(self, *args):
        """
        AcceptConnection(Handle_Graphic3d_Structure self, Handle_Graphic3d_Structure AStructure1, Handle_Graphic3d_Structure AStructure2, Graphic3d_TypeOfConnection const AType) -> Standard_Boolean

        Returns Standard_True if the connection is possible between
        <AStructure1> and <AStructure2> without a creation
        of a cycle.

        It's not possible to call the method
        AStructure1->Connect (AStructure2, TypeOfConnection)
        if
        - the set of all ancestors of <AStructure1> contains
        <AStructure1> and if the
        TypeOfConnection == TOC_DESCENDANT
        - the set of all descendants of <AStructure1> contains
        <AStructure2> and if the
        TypeOfConnection == TOC_ANCESTOR

        :type AStructure1: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type AStructure2: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Structure_AcceptConnection(self, *args)


    def Ancestors(self, *args):
        """
        Ancestors(Handle_Graphic3d_Structure self, Graphic3d_MapOfStructure & SG)

        Returns the group of structures to which <me> is connected.

        :type SG: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure

        """
        return _Graphic3d.Handle_Graphic3d_Structure_Ancestors(self, *args)


    def Connect(self, *args):
        """
        Connect(Handle_Graphic3d_Structure self, Handle_Graphic3d_Structure AStructure, Graphic3d_TypeOfConnection const AType, Standard_Boolean const WithCheck)

        If Atype is TOC_DESCENDANT then add <AStructure>
        as a child structure of  <me>.
        If Atype is TOC_ANCESTOR then add <AStructure>
        as a parent structure of <me>.
        The connection propagates Display, Highlight, Erase,
        Remove, and stacks the transformations.
        No connection if the graph of the structures
        contains a cycle and <WithCheck> is Standard_True;

        :type AStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection
        :type WithCheck: bool

        """
        return _Graphic3d.Handle_Graphic3d_Structure_Connect(self, *args)


    def Descendants(self, *args):
        """
        Descendants(Handle_Graphic3d_Structure self, Graphic3d_MapOfStructure & SG)

        Returns the group of structures connected to <me>.

        :type SG: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure

        """
        return _Graphic3d.Handle_Graphic3d_Structure_Descendants(self, *args)


    def Disconnect(self, *args):
        """
        Disconnect(Handle_Graphic3d_Structure self, Handle_Graphic3d_Structure AStructure)

        Suppress the connection between <AStructure> and <me>.

        :type AStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Handle_Graphic3d_Structure_Disconnect(self, *args)


    def DisconnectAll(self, *args):
        """
        DisconnectAll(Handle_Graphic3d_Structure self, Graphic3d_TypeOfConnection const AType)

        If Atype is TOC_DESCENDANT then suppress all
        the connections with the child structures of <me>.
        If Atype is TOC_ANCESTOR then suppress all
        the connections with the parent structures of <me>.

        :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection

        """
        return _Graphic3d.Handle_Graphic3d_Structure_DisconnectAll(self, *args)


    def Network(self, *args):
        """
        Network(Handle_Graphic3d_Structure self, Handle_Graphic3d_Structure AStructure, Graphic3d_TypeOfConnection const AType, Graphic3d_MapOfStructure & ASet)

        Returns <ASet> the group of structures :
        - directly or indirectly connected to <AStructure> if the
        TypeOfConnection == TOC_DESCENDANT
        - to which <AStructure> is directly or indirectly connected
        if the TypeOfConnection == TOC_ANCESTOR

        :type AStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection
        :type ASet: OCC.wrapper.Graphic3d.Graphic3d_MapOfStructure

        """
        return _Graphic3d.Handle_Graphic3d_Structure_Network(self, *args)


    def SetOwner(self, *args):
        """
        SetOwner(Handle_Graphic3d_Structure self, Standard_Address const Owner)

        :type Owner: OCC.wrapper.Standard.Standard_Address

        """
        return _Graphic3d.Handle_Graphic3d_Structure_SetOwner(self, *args)


    def Owner(self, *args):
        """
        Owner(Handle_Graphic3d_Structure self) -> Standard_Address

        :rtype: OCC.wrapper.Standard.Standard_Address

        """
        return _Graphic3d.Handle_Graphic3d_Structure_Owner(self, *args)


    def SetHLRValidation(self, *args):
        """
        SetHLRValidation(Handle_Graphic3d_Structure self, Standard_Boolean const AFlag)

        :type AFlag: bool

        """
        return _Graphic3d.Handle_Graphic3d_Structure_SetHLRValidation(self, *args)


    def HLRValidation(self, *args):
        """
        HLRValidation(Handle_Graphic3d_Structure self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Structure_HLRValidation(self, *args)


    def Transformation(self, *args):
        """
        Return local transformation.

        :rtype: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        res = _Graphic3d.Handle_Graphic3d_Structure_Transformation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTransformation(self, *args):
        """
        SetTransformation(Handle_Graphic3d_Structure self, Handle_Geom_Transformation theTrsf)

        Modifies the current local transformation

        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        return _Graphic3d.Handle_Graphic3d_Structure_SetTransformation(self, *args)


    def Transform(self, *args):
        """
        Transform(Handle_Graphic3d_Structure self, Handle_Geom_Transformation theTrsf)

        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        return _Graphic3d.Handle_Graphic3d_Structure_Transform(self, *args)


    def SetTransformPersistence(self, *args):
        """
        SetTransformPersistence(Handle_Graphic3d_Structure self, Handle_Graphic3d_TransformPers theTrsfPers)

        Modifies the current transform persistence (pan, zoom or rotate)

        :type theTrsfPers: OCC.wrapper.Graphic3d.Handle_Graphic3d_TransformPers

        """
        return _Graphic3d.Handle_Graphic3d_Structure_SetTransformPersistence(self, *args)


    def TransformPersistence(self, *args):
        """
        @return transform persistence of the presentable object.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TransformPers

        """
        res = _Graphic3d.Handle_Graphic3d_Structure_TransformPersistence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetMutable(self, *args):
        """
        SetMutable(Handle_Graphic3d_Structure self, Standard_Boolean const theIsMutable)

        Sets if the structure location has mutable nature (content or location will be changed regularly).

        :type theIsMutable: bool

        """
        return _Graphic3d.Handle_Graphic3d_Structure_SetMutable(self, *args)


    def IsMutable(self, *args):
        """
        IsMutable(Handle_Graphic3d_Structure self) -> Standard_Boolean

        Returns true if structure has mutable nature (content or location are be changed regularly).
        Mutable structure will be managed in different way than static onces.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Structure_IsMutable(self, *args)


    def ComputeVisual(self, *args):
        """
        ComputeVisual(Handle_Graphic3d_Structure self) -> Graphic3d_TypeOfStructure

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfStructure

        """
        return _Graphic3d.Handle_Graphic3d_Structure_ComputeVisual(self, *args)


    def GraphicClear(self, *args):
        """
        GraphicClear(Handle_Graphic3d_Structure self, Standard_Boolean const WithDestruction)

        Clears the structure <me>.

        :type WithDestruction: bool

        """
        return _Graphic3d.Handle_Graphic3d_Structure_GraphicClear(self, *args)


    def GraphicConnect(self, *args):
        """
        GraphicConnect(Handle_Graphic3d_Structure self, Handle_Graphic3d_Structure ADaughter)

        :type ADaughter: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Handle_Graphic3d_Structure_GraphicConnect(self, *args)


    def GraphicDisconnect(self, *args):
        """
        GraphicDisconnect(Handle_Graphic3d_Structure self, Handle_Graphic3d_Structure ADaughter)

        :type ADaughter: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Handle_Graphic3d_Structure_GraphicDisconnect(self, *args)


    def GraphicTransform(self, *args):
        """
        GraphicTransform(Handle_Graphic3d_Structure self, Handle_Geom_Transformation theTrsf)

        Internal method which sets new transformation without calling graphic manager callbacks.

        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        return _Graphic3d.Handle_Graphic3d_Structure_GraphicTransform(self, *args)


    def Identification(self, *args):
        """
        Identification(Handle_Graphic3d_Structure self) -> Standard_Integer

        Returns the identification number of the structure <me>.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Structure_Identification(self, *args)


    def PrintNetwork(self, *args):
        """
        PrintNetwork(Handle_Graphic3d_Structure self, Handle_Graphic3d_Structure AStructure, Graphic3d_TypeOfConnection const AType)

        Prints informations about the network associated
        with the structure <AStructure>.

        :type AStructure: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :type AType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfConnection

        """
        return _Graphic3d.Handle_Graphic3d_Structure_PrintNetwork(self, *args)


    def SetComputeVisual(self, *args):
        """
        SetComputeVisual(Handle_Graphic3d_Structure self, Graphic3d_TypeOfStructure const AVisual)

        :type AVisual: OCC.wrapper.Graphic3d.Graphic3d_TypeOfStructure

        """
        return _Graphic3d.Handle_Graphic3d_Structure_SetComputeVisual(self, *args)


    def Transforms(self, *args):
        """
        Transforms(Handle_Graphic3d_Structure self, gp_Trsf theTrsf, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ)

        Transforms theX, theY, theZ with the transformation theTrsf.

        :type theTrsf: OCC.wrapper.gp.gp_Trsf
        :type theX: float
        :type theY: float
        :type theZ: float
        :type theNewX: float
        :type theNewY: float
        :type theNewZ: float

        """
        return _Graphic3d.Handle_Graphic3d_Structure_Transforms(self, *args)


    def CStructure(self, *args):
        """
        Returns the low-level structure

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_CStructure

        """
        res = _Graphic3d.Handle_Graphic3d_Structure_CStructure(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_Structure self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_Structure_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_Structure_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_Structure_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_Structure self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_Structure_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_Structure self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_Structure self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Structure_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_Structure self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_Structure self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Structure_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_Structure self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_Structure_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_Structure self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Structure_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_Structure self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_Structure_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_Structure self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Structure_DecrementRefCounter(self, *args)

Handle_Graphic3d_Structure_swigregister = _Graphic3d.Handle_Graphic3d_Structure_swigregister
Handle_Graphic3d_Structure_swigregister(Handle_Graphic3d_Structure)

def Handle_Graphic3d_Structure_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_Structure_DownCast(thing)
Handle_Graphic3d_Structure_DownCast = _Graphic3d.Handle_Graphic3d_Structure_DownCast

class Graphic3d_GroupDefinitionError(Standard.Standard_OutOfRange):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_GroupDefinitionError
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_GroupDefinitionError(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Graphic3d_GroupDefinitionError self) -> Graphic3d_GroupDefinitionError
        __init__(Graphic3d_GroupDefinitionError self, Standard_CString const theMessage) -> Graphic3d_GroupDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString

        """
        this = _Graphic3d.new_Graphic3d_GroupDefinitionError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewInstance(*args):
        """
        NewInstance(Standard_CString const theMessage) -> Handle_Graphic3d_GroupDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_GroupDefinitionError

        """
        return _Graphic3d.Graphic3d_GroupDefinitionError_NewInstance(*args)

    NewInstance = staticmethod(NewInstance)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_GroupDefinitionError_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_GroupDefinitionError_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_GroupDefinitionError_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Graphic3d.delete_Graphic3d_GroupDefinitionError
Graphic3d_GroupDefinitionError_swigregister = _Graphic3d.Graphic3d_GroupDefinitionError_swigregister
Graphic3d_GroupDefinitionError_swigregister(Graphic3d_GroupDefinitionError)

def Graphic3d_GroupDefinitionError_NewInstance(*args):
    """
    Graphic3d_GroupDefinitionError_NewInstance(Standard_CString const theMessage) -> Handle_Graphic3d_GroupDefinitionError

    :type theMessage: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_GroupDefinitionError

    """
    return _Graphic3d.Graphic3d_GroupDefinitionError_NewInstance(*args)

def Graphic3d_GroupDefinitionError_get_type_name(*args):
    """
    Graphic3d_GroupDefinitionError_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_GroupDefinitionError_get_type_name(*args)

def Graphic3d_GroupDefinitionError_get_type_descriptor(*args):
    """
    Graphic3d_GroupDefinitionError_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_GroupDefinitionError_get_type_descriptor(*args)

class Graphic3d_AxisAspect(object):
    """
    Class that stores style for one graduated trihedron axis such as colors, lengths and customization flags.
    It is used in Graphic3d_GraduatedTrihedron.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Graphic3d_AxisAspect self, TCollection_ExtendedString theName, Quantity_Color theNameColor=Quantity_NOC_BLACK, Quantity_Color theColor=Quantity_NOC_BLACK, Standard_Integer const theValuesOffset=10, Standard_Integer const theNameOffset=30, Standard_Integer const theTickmarksNumber=5, Standard_Integer const theTickmarksLength=10, Standard_Boolean const theToDrawName, Standard_Boolean const theToDrawValues, Standard_Boolean const theToDrawTickmarks) -> Graphic3d_AxisAspect

        :type theName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theNameColor: OCC.wrapper.Quantity.Quantity_Color
        :type theColor: OCC.wrapper.Quantity.Quantity_Color
        :type theValuesOffset: int
        :type theNameOffset: int
        :type theTickmarksNumber: int
        :type theTickmarksLength: int
        :type theToDrawName: bool
        :type theToDrawValues: bool
        :type theToDrawTickmarks: bool

        """
        this = _Graphic3d.new_Graphic3d_AxisAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetName(self, *args):
        """
        SetName(Graphic3d_AxisAspect self, TCollection_ExtendedString theName)

        :type theName: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _Graphic3d.Graphic3d_AxisAspect_SetName(self, *args)


    def Name(self, *args):
        """
        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        res = _Graphic3d.Graphic3d_AxisAspect_Name(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ToDrawName(self, *args):
        """
        ToDrawName(Graphic3d_AxisAspect self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_AxisAspect_ToDrawName(self, *args)


    def SetDrawName(self, *args):
        """
        SetDrawName(Graphic3d_AxisAspect self, Standard_Boolean const theToDraw)

        :type theToDraw: bool

        """
        return _Graphic3d.Graphic3d_AxisAspect_SetDrawName(self, *args)


    def ToDrawTickmarks(self, *args):
        """
        ToDrawTickmarks(Graphic3d_AxisAspect self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_AxisAspect_ToDrawTickmarks(self, *args)


    def SetDrawTickmarks(self, *args):
        """
        SetDrawTickmarks(Graphic3d_AxisAspect self, Standard_Boolean const theToDraw)

        :type theToDraw: bool

        """
        return _Graphic3d.Graphic3d_AxisAspect_SetDrawTickmarks(self, *args)


    def ToDrawValues(self, *args):
        """
        ToDrawValues(Graphic3d_AxisAspect self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_AxisAspect_ToDrawValues(self, *args)


    def SetDrawValues(self, *args):
        """
        SetDrawValues(Graphic3d_AxisAspect self, Standard_Boolean const theToDraw)

        :type theToDraw: bool

        """
        return _Graphic3d.Graphic3d_AxisAspect_SetDrawValues(self, *args)


    def NameColor(self, *args):
        """
        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Graphic3d_AxisAspect_NameColor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetNameColor(self, *args):
        """
        SetNameColor(Graphic3d_AxisAspect self, Quantity_Color theColor)

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Graphic3d.Graphic3d_AxisAspect_SetNameColor(self, *args)


    def Color(self, *args):
        """
        Color of axis and values

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Graphic3d_AxisAspect_Color(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetColor(self, *args):
        """
        SetColor(Graphic3d_AxisAspect self, Quantity_Color theColor)

        Sets color of axis and values

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Graphic3d.Graphic3d_AxisAspect_SetColor(self, *args)


    def TickmarksNumber(self, *args):
        """
        TickmarksNumber(Graphic3d_AxisAspect self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_AxisAspect_TickmarksNumber(self, *args)


    def SetTickmarksNumber(self, *args):
        """
        SetTickmarksNumber(Graphic3d_AxisAspect self, Standard_Integer const theValue)

        :type theValue: int

        """
        return _Graphic3d.Graphic3d_AxisAspect_SetTickmarksNumber(self, *args)


    def TickmarksLength(self, *args):
        """
        TickmarksLength(Graphic3d_AxisAspect self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_AxisAspect_TickmarksLength(self, *args)


    def SetTickmarksLength(self, *args):
        """
        SetTickmarksLength(Graphic3d_AxisAspect self, Standard_Integer const theValue)

        :type theValue: int

        """
        return _Graphic3d.Graphic3d_AxisAspect_SetTickmarksLength(self, *args)


    def ValuesOffset(self, *args):
        """
        ValuesOffset(Graphic3d_AxisAspect self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_AxisAspect_ValuesOffset(self, *args)


    def SetValuesOffset(self, *args):
        """
        SetValuesOffset(Graphic3d_AxisAspect self, Standard_Integer const theValue)

        :type theValue: int

        """
        return _Graphic3d.Graphic3d_AxisAspect_SetValuesOffset(self, *args)


    def NameOffset(self, *args):
        """
        NameOffset(Graphic3d_AxisAspect self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_AxisAspect_NameOffset(self, *args)


    def SetNameOffset(self, *args):
        """
        SetNameOffset(Graphic3d_AxisAspect self, Standard_Integer const theValue)

        :type theValue: int

        """
        return _Graphic3d.Graphic3d_AxisAspect_SetNameOffset(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_AxisAspect
Graphic3d_AxisAspect_swigregister = _Graphic3d.Graphic3d_AxisAspect_swigregister
Graphic3d_AxisAspect_swigregister(Graphic3d_AxisAspect)

class Handle_Graphic3d_AspectFillArea3d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_AspectFillArea3d self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_AspectFillArea3d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_AspectFillArea3d self, Graphic3d_AspectFillArea3d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_AspectFillArea3d self, Handle_Graphic3d_AspectFillArea3d theHandle) -> Handle_Graphic3d_AspectFillArea3d
        assign(Handle_Graphic3d_AspectFillArea3d self, Graphic3d_AspectFillArea3d thePtr) -> Handle_Graphic3d_AspectFillArea3d
        assign(Handle_Graphic3d_AspectFillArea3d self, Handle_Graphic3d_AspectFillArea3d theHandle) -> Handle_Graphic3d_AspectFillArea3d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_AspectFillArea3d self) -> Graphic3d_AspectFillArea3d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_AspectFillArea3d self) -> Graphic3d_AspectFillArea3d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_AspectFillArea3d self) -> Graphic3d_AspectFillArea3d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_AspectFillArea3d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_AspectFillArea3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_AspectFillArea3d_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_AspectFillArea3d

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_AspectFillArea3d self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_AspectFillArea3d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_AspectFillArea3d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def InteriorStyle(self, *args):
        """
        InteriorStyle(Handle_Graphic3d_AspectFillArea3d self) -> Aspect_InteriorStyle

        Return interior rendering style (Aspect_IS_EMPTY by default, which means nothing will be rendered!).

        :rtype: OCC.wrapper.Aspect.Aspect_InteriorStyle

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_InteriorStyle(self, *args)


    def SetInteriorStyle(self, *args):
        """
        SetInteriorStyle(Handle_Graphic3d_AspectFillArea3d self, Aspect_InteriorStyle const theStyle)

        Modifies the interior type used for rendering

        :type theStyle: OCC.wrapper.Aspect.Aspect_InteriorStyle

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_SetInteriorStyle(self, *args)


    def ShadingModel(self, *args):
        """
        ShadingModel(Handle_Graphic3d_AspectFillArea3d self) -> Graphic3d_TypeOfShadingModel

        Returns shading model (Graphic3d_TOSM_DEFAULT by default, which means that Shading Model set as default for entire Viewer will be used)

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfShadingModel

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_ShadingModel(self, *args)


    def SetShadingModel(self, *args):
        """
        SetShadingModel(Handle_Graphic3d_AspectFillArea3d self, Graphic3d_TypeOfShadingModel const theShadingModel)

        Sets shading model

        :type theShadingModel: OCC.wrapper.Graphic3d.Graphic3d_TypeOfShadingModel

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_SetShadingModel(self, *args)


    def AlphaMode(self, *args):
        """
        AlphaMode(Handle_Graphic3d_AspectFillArea3d self) -> Graphic3d_AlphaMode

        Returns the way how alpha value should be treated (Graphic3d_AlphaMode_BlendAuto by default, for backward compatibility).

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_AlphaMode

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_AlphaMode(self, *args)


    def AlphaCutoff(self, *args):
        """
        AlphaCutoff(Handle_Graphic3d_AspectFillArea3d self) -> Standard_ShortReal

        Returns alpha cutoff threshold, for discarding fragments within Graphic3d_AlphaMode_Mask mode (0.5 by default).
        If the alpha value is greater than or equal to this value then it is rendered as fully opaque, otherwise, it is rendered as fully transparent.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_AlphaCutoff(self, *args)


    def SetAlphaMode(self, *args):
        """
        SetAlphaMode(Handle_Graphic3d_AspectFillArea3d self, Graphic3d_AlphaMode theMode, Standard_ShortReal theAlphaCutoff=0.5)

        Defines the way how alpha value should be treated.

        :type theMode: OCC.wrapper.Graphic3d.Graphic3d_AlphaMode
        :type theAlphaCutoff: float

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_SetAlphaMode(self, *args)


    def InteriorColor(self, *args):
        """
        Return interior color.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Handle_Graphic3d_AspectFillArea3d_InteriorColor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def InteriorColorRGBA(self, *args):
        """
        Return interior color.

        :rtype: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        res = _Graphic3d.Handle_Graphic3d_AspectFillArea3d_InteriorColorRGBA(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetInteriorColor(self, *args):
        """
        SetInteriorColor(Handle_Graphic3d_AspectFillArea3d self, Quantity_Color theColor)
        SetInteriorColor(Handle_Graphic3d_AspectFillArea3d self, Quantity_ColorRGBA theColor)

        Modifies the color of the interior of the face

        :type theColor: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_SetInteriorColor(self, *args)


    def BackInteriorColor(self, *args):
        """
        Return back interior color.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Handle_Graphic3d_AspectFillArea3d_BackInteriorColor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def BackInteriorColorRGBA(self, *args):
        """
        Return back interior color.

        :rtype: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        res = _Graphic3d.Handle_Graphic3d_AspectFillArea3d_BackInteriorColorRGBA(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetBackInteriorColor(self, *args):
        """
        SetBackInteriorColor(Handle_Graphic3d_AspectFillArea3d self, Quantity_Color theColor)
        SetBackInteriorColor(Handle_Graphic3d_AspectFillArea3d self, Quantity_ColorRGBA theColor)

        Modifies the color of the interior of the back face

        :type theColor: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_SetBackInteriorColor(self, *args)


    def FrontMaterial(self, *args):
        """
        Returns the surface material of external faces

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect

        """
        res = _Graphic3d.Handle_Graphic3d_AspectFillArea3d_FrontMaterial(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFrontMaterial(self, *args):
        """
        ChangeFrontMaterial(Handle_Graphic3d_AspectFillArea3d self) -> Graphic3d_MaterialAspect

        Returns the surface material of external faces

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_ChangeFrontMaterial(self, *args)


    def SetFrontMaterial(self, *args):
        """
        SetFrontMaterial(Handle_Graphic3d_AspectFillArea3d self, Graphic3d_MaterialAspect theMaterial)

        Modifies the surface material of external faces

        :type theMaterial: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_SetFrontMaterial(self, *args)


    def BackMaterial(self, *args):
        """
        Returns the surface material of internal faces

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect

        """
        res = _Graphic3d.Handle_Graphic3d_AspectFillArea3d_BackMaterial(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeBackMaterial(self, *args):
        """
        ChangeBackMaterial(Handle_Graphic3d_AspectFillArea3d self) -> Graphic3d_MaterialAspect

        Returns the surface material of internal faces

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_ChangeBackMaterial(self, *args)


    def SetBackMaterial(self, *args):
        """
        SetBackMaterial(Handle_Graphic3d_AspectFillArea3d self, Graphic3d_MaterialAspect theMaterial)

        Modifies the surface material of internal faces

        :type theMaterial: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_SetBackMaterial(self, *args)


    def ToSuppressBackFaces(self, *args):
        """
        ToSuppressBackFaces(Handle_Graphic3d_AspectFillArea3d self) -> bool

        Returns true if back faces should be suppressed (true by default).

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_ToSuppressBackFaces(self, *args)


    def SetSuppressBackFaces(self, *args):
        """
        SetSuppressBackFaces(Handle_Graphic3d_AspectFillArea3d self, bool theToSuppress)

        Assign back faces culling flag.

        :type theToSuppress: bool

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_SetSuppressBackFaces(self, *args)


    def BackFace(self, *args):
        """
        BackFace(Handle_Graphic3d_AspectFillArea3d self) -> bool

        Returns true if back faces should be suppressed (true by default).

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_BackFace(self, *args)


    def AllowBackFace(self, *args):
        """
        AllowBackFace(Handle_Graphic3d_AspectFillArea3d self)

        Allows the display of back-facing filled polygons.


        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_AllowBackFace(self, *args)


    def SuppressBackFace(self, *args):
        """
        SuppressBackFace(Handle_Graphic3d_AspectFillArea3d self)

        Suppress the display of back-facing filled polygons.
        A back-facing polygon is defined as a polygon whose
        vertices are in a clockwise order with respect to screen coordinates.


        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_SuppressBackFace(self, *args)


    def Distinguish(self, *args):
        """
        Distinguish(Handle_Graphic3d_AspectFillArea3d self) -> bool

        Returns true if material properties should be distinguished for back and front faces (false by default).

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_Distinguish(self, *args)


    def SetDistinguish(self, *args):
        """
        SetDistinguish(Handle_Graphic3d_AspectFillArea3d self, bool toDistinguish)

        Set material distinction between front and back faces.

        :type toDistinguish: bool

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_SetDistinguish(self, *args)


    def SetDistinguishOn(self, *args):
        """
        SetDistinguishOn(Handle_Graphic3d_AspectFillArea3d self)

        Allows material distinction between front and back faces.


        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_SetDistinguishOn(self, *args)


    def SetDistinguishOff(self, *args):
        """
        SetDistinguishOff(Handle_Graphic3d_AspectFillArea3d self)

        Forbids material distinction between front and back faces.


        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_SetDistinguishOff(self, *args)


    def ShaderProgram(self, *args):
        """
        Return shader program.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderProgram

        """
        res = _Graphic3d.Handle_Graphic3d_AspectFillArea3d_ShaderProgram(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetShaderProgram(self, *args):
        """
        SetShaderProgram(Handle_Graphic3d_AspectFillArea3d self, Handle_Graphic3d_ShaderProgram theProgram)

        Sets up OpenGL/GLSL shader program.

        :type theProgram: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderProgram

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_SetShaderProgram(self, *args)


    def TextureSet(self, *args):
        """
        Return texture array to be mapped.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureSet

        """
        res = _Graphic3d.Handle_Graphic3d_AspectFillArea3d_TextureSet(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTextureSet(self, *args):
        """
        SetTextureSet(Handle_Graphic3d_AspectFillArea3d self, Handle_Graphic3d_TextureSet theTextures)

        Setup texture array to be mapped.

        :type theTextures: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureSet

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_SetTextureSet(self, *args)


    def TextureMap(self, *args):
        """
        TextureMap(Handle_Graphic3d_AspectFillArea3d self) -> Handle_Graphic3d_TextureMap

        Return texture to be mapped.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureMap

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_TextureMap(self, *args)


    def SetTextureMap(self, *args):
        """
        SetTextureMap(Handle_Graphic3d_AspectFillArea3d self, Handle_Graphic3d_TextureMap theTexture)

        Assign texture to be mapped.
        See also SetTextureMapOn() to actually activate texture mapping.

        :type theTexture: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureMap

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_SetTextureMap(self, *args)


    def ToMapTexture(self, *args):
        """
        ToMapTexture(Handle_Graphic3d_AspectFillArea3d self) -> bool

        Return true if texture mapping is enabled (false by default).

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_ToMapTexture(self, *args)


    def TextureMapState(self, *args):
        """
        TextureMapState(Handle_Graphic3d_AspectFillArea3d self) -> bool

        Return true if texture mapping is enabled (false by default).

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_TextureMapState(self, *args)


    def SetTextureMapOn(self, *args):
        """
        SetTextureMapOn(Handle_Graphic3d_AspectFillArea3d self, bool theToMap)
        SetTextureMapOn(Handle_Graphic3d_AspectFillArea3d self)

        Enable texture mapping (has no effect if texture is not set).


        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_SetTextureMapOn(self, *args)


    def SetTextureMapOff(self, *args):
        """
        SetTextureMapOff(Handle_Graphic3d_AspectFillArea3d self)

        Disable texture mapping.


        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_SetTextureMapOff(self, *args)


    def PolygonOffset(self, *args):
        """
        Returns current polygon offsets settings.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_PolygonOffset

        """
        res = _Graphic3d.Handle_Graphic3d_AspectFillArea3d_PolygonOffset(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PolygonOffsets(self, *args):
        """
        PolygonOffsets(Handle_Graphic3d_AspectFillArea3d self)

        Returns current polygon offsets settings.

        :type theMode: int
        :type theFactor: float
        :type theUnits: float

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_PolygonOffsets(self, *args)


    def SetPolygonOffsets(self, *args):
        """
        SetPolygonOffsets(Handle_Graphic3d_AspectFillArea3d self, Standard_Integer const theMode, Standard_ShortReal const theFactor=1.0, Standard_ShortReal const theUnits=0.0)

        Sets up OpenGL polygon offsets mechanism.
        <aMode> parameter can contain various combinations of
        Aspect_PolygonOffsetMode enumeration elements (Aspect_POM_None means
        that polygon offsets are not changed).
        If <aMode> is different from Aspect_POM_Off and Aspect_POM_None, then <aFactor> and <aUnits>
        arguments are used by graphic renderer to calculate a depth offset value:

        offset = <aFactor> * m + <aUnits> * r, where
        m - maximum depth slope for the polygon currently being displayed,
        r - minimum window coordinates depth resolution (implementation-specific)

        Default settings for OCC 3D viewer: mode = Aspect_POM_Fill, factor = 1., units = 0.

        Negative offset values move polygons closer to the viewport,
        while positive values shift polygons away.
        Consult OpenGL reference for details (glPolygonOffset function description).

        :type theMode: int
        :type theFactor: float
        :type theUnits: float

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_SetPolygonOffsets(self, *args)


    def ToDrawEdges(self, *args):
        """
        ToDrawEdges(Handle_Graphic3d_AspectFillArea3d self) -> bool

        Returns true if edges should be drawn (false by default).

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_ToDrawEdges(self, *args)


    def SetDrawEdges(self, *args):
        """
        SetDrawEdges(Handle_Graphic3d_AspectFillArea3d self, bool theToDraw)

        Set if edges should be drawn or not.

        :type theToDraw: bool

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_SetDrawEdges(self, *args)


    def Edge(self, *args):
        """
        Edge(Handle_Graphic3d_AspectFillArea3d self) -> bool

        Returns true if edges should be drawn.

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_Edge(self, *args)


    def SetEdgeOn(self, *args):
        """
        SetEdgeOn(Handle_Graphic3d_AspectFillArea3d self)

        The edges of FillAreas are drawn.


        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_SetEdgeOn(self, *args)


    def SetEdgeOff(self, *args):
        """
        SetEdgeOff(Handle_Graphic3d_AspectFillArea3d self)

        The edges of FillAreas are not drawn.


        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_SetEdgeOff(self, *args)


    def EdgeColor(self, *args):
        """
        Return color of edges.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Handle_Graphic3d_AspectFillArea3d_EdgeColor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def EdgeColorRGBA(self, *args):
        """
        Return color of edges.

        :rtype: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        res = _Graphic3d.Handle_Graphic3d_AspectFillArea3d_EdgeColorRGBA(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetEdgeColor(self, *args):
        """
        SetEdgeColor(Handle_Graphic3d_AspectFillArea3d self, Quantity_Color theColor)

        Modifies the color of the edge of the face

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_SetEdgeColor(self, *args)


    def EdgeLineType(self, *args):
        """
        EdgeLineType(Handle_Graphic3d_AspectFillArea3d self) -> Aspect_TypeOfLine

        Return edges line type.

        :rtype: OCC.wrapper.Aspect.Aspect_TypeOfLine

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_EdgeLineType(self, *args)


    def SetEdgeLineType(self, *args):
        """
        SetEdgeLineType(Handle_Graphic3d_AspectFillArea3d self, Aspect_TypeOfLine const theType)

        Modifies the edge line type

        :type theType: OCC.wrapper.Aspect.Aspect_TypeOfLine

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_SetEdgeLineType(self, *args)


    def EdgeWidth(self, *args):
        """
        EdgeWidth(Handle_Graphic3d_AspectFillArea3d self) -> Standard_ShortReal

        Return width for edges in pixels.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_EdgeWidth(self, *args)


    def SetEdgeWidth(self, *args):
        """
        SetEdgeWidth(Handle_Graphic3d_AspectFillArea3d self, Standard_Real const theWidth)

        Modifies the edge thickness
        Warning: Raises AspectFillAreaDefinitionError if the width is a negative value.

        :type theWidth: float

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_SetEdgeWidth(self, *args)


    def HatchStyle(self, *args):
        """
        Returns the hatch type used when InteriorStyle is IS_HATCH

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_HatchStyle

        """
        res = _Graphic3d.Handle_Graphic3d_AspectFillArea3d_HatchStyle(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetHatchStyle(self, *args):
        """
        SetHatchStyle(Handle_Graphic3d_AspectFillArea3d self, Handle_Graphic3d_HatchStyle theStyle)
        SetHatchStyle(Handle_Graphic3d_AspectFillArea3d self, Aspect_HatchStyle const theStyle)

        Modifies the hatch type used when InteriorStyle is IS_HATCH
        @warning This method always creates a new handle for a given hatch style

        :type theStyle: OCC.wrapper.Aspect.Aspect_HatchStyle

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_SetHatchStyle(self, *args)


    def Values(self, *args):
        """
        Values(Handle_Graphic3d_AspectFillArea3d self, Quantity_Color theIntColor, Quantity_Color theEdgeColor)
        Values(Handle_Graphic3d_AspectFillArea3d self, Quantity_Color theIntColor, Quantity_Color theBackIntColor, Quantity_Color theEdgeColor)

        Returns the current values.

        :type theStyle: OCC.wrapper.Aspect.Aspect_InteriorStyle
        :type theIntColor: OCC.wrapper.Quantity.Quantity_Color
        :type theBackIntColor: OCC.wrapper.Quantity.Quantity_Color
        :type theEdgeColor: OCC.wrapper.Quantity.Quantity_Color
        :type theType: OCC.wrapper.Aspect.Aspect_TypeOfLine
        :type theWidth: float

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_Values(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_AspectFillArea3d self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_AspectFillArea3d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_AspectFillArea3d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_AspectFillArea3d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_AspectFillArea3d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_AspectFillArea3d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_AspectFillArea3d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_AspectFillArea3d self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_AspectFillArea3d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_DecrementRefCounter(self, *args)

Handle_Graphic3d_AspectFillArea3d_swigregister = _Graphic3d.Handle_Graphic3d_AspectFillArea3d_swigregister
Handle_Graphic3d_AspectFillArea3d_swigregister(Handle_Graphic3d_AspectFillArea3d)

def Handle_Graphic3d_AspectFillArea3d_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_AspectFillArea3d_DownCast(thing)
Handle_Graphic3d_AspectFillArea3d_DownCast = _Graphic3d.Handle_Graphic3d_AspectFillArea3d_DownCast

class Graphic3d_MaterialAspect(object):
    """
    This class allows the definition of the type of a surface.
    Aspect attributes of a 3d face.
    Keywords: Material, FillArea, Shininess, Ambient, Color, Diffuse,
    Specular, Transparency, Emissive, ReflectionMode,
    BackFace, FrontFace, Reflection, Absorbtion
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def NumberOfMaterials(*args):
        """
        NumberOfMaterials() -> Standard_Integer

        Returns the number of predefined textures.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_MaterialAspect_NumberOfMaterials(*args)

    NumberOfMaterials = staticmethod(NumberOfMaterials)

    def MaterialFromName(*args):
        """
        MaterialFromName(Standard_CString const theName) -> Graphic3d_NameOfMaterial

        Returns the material for specified name or Graphic3d_NOM_DEFAULT if name is unknown.

        :type theName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_NameOfMaterial

        """
        return _Graphic3d.Graphic3d_MaterialAspect_MaterialFromName(*args)

    MaterialFromName = staticmethod(MaterialFromName)

    def __init__(self, *args):
        """
        __init__(Graphic3d_MaterialAspect self) -> Graphic3d_MaterialAspect
        __init__(Graphic3d_MaterialAspect self, Graphic3d_NameOfMaterial const theName) -> Graphic3d_MaterialAspect

        Creates a generic material.

        :type theName: OCC.wrapper.Graphic3d.Graphic3d_NameOfMaterial

        """
        this = _Graphic3d.new_Graphic3d_MaterialAspect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Name(self, *args):
        """
        Name(Graphic3d_MaterialAspect self) -> Graphic3d_NameOfMaterial

        Returns the material name (within predefined enumeration).

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_NameOfMaterial

        """
        return _Graphic3d.Graphic3d_MaterialAspect_Name(self, *args)


    def RequestedName(self, *args):
        """
        RequestedName(Graphic3d_MaterialAspect self) -> Graphic3d_NameOfMaterial

        Returns the material name within predefined enumeration which has been requested (before modifications).

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_NameOfMaterial

        """
        return _Graphic3d.Graphic3d_MaterialAspect_RequestedName(self, *args)


    def StringName(self, *args):
        """
        Returns the given name of this material. This might be:
        - given name set by method ::SetMaterialName()
        - standard name for a material within enumeration
        - "UserDefined" for non-standard material without name specified externally.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Graphic3d_MaterialAspect_StringName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def MaterialName(self, *args):
        """
        MaterialName(Graphic3d_MaterialAspect self, Standard_Integer const theRank) -> Standard_CString
        MaterialName(Graphic3d_MaterialAspect self) -> Standard_CString

        Returns the given name of this material. This might be:

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Graphic3d_MaterialAspect_MaterialName(self, *args)


    def SetMaterialName(self, *args):
        """
        SetMaterialName(Graphic3d_MaterialAspect self, TCollection_AsciiString theName)

        The current material become a "UserDefined" material.
        Set the name of the "UserDefined" material.

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetMaterialName(self, *args)


    def Reset(self, *args):
        """
        Reset(Graphic3d_MaterialAspect self)

        Resets the material with the original values according to
        the material name but leave the current color values untouched
        for the material of type ASPECT.


        """
        return _Graphic3d.Graphic3d_MaterialAspect_Reset(self, *args)


    def Color(self, *args):
        """
        Returns the diffuse color of the surface.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Graphic3d_MaterialAspect_Color(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetColor(self, *args):
        """
        SetColor(Graphic3d_MaterialAspect self, Quantity_Color theColor)

        Modifies the ambient and diffuse color of the surface.

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetColor(self, *args)


    def Transparency(self, *args):
        """
        Transparency(Graphic3d_MaterialAspect self) -> Standard_ShortReal

        Returns the transparency coefficient of the surface (1.0 - Alpha); 0.0 means opaque.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_MaterialAspect_Transparency(self, *args)


    def Alpha(self, *args):
        """
        Alpha(Graphic3d_MaterialAspect self) -> Standard_ShortReal

        Returns the alpha coefficient of the surface (1.0 - Transparency); 1.0 means opaque.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_MaterialAspect_Alpha(self, *args)


    def SetTransparency(self, *args):
        """
        SetTransparency(Graphic3d_MaterialAspect self, Standard_ShortReal const theValue)

        Modifies the transparency coefficient of the surface, where 0 is opaque and 1 is fully transparent.
        Transparency is applicable to materials that have at least one of reflection modes (ambient, diffuse, specular or emissive) enabled.
        See also SetReflectionModeOn() and SetReflectionModeOff() methods.

        Warning: Raises MaterialDefinitionError if given value is a negative value or greater than 1.0.

        :type theValue: float

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetTransparency(self, *args)


    def SetAlpha(self, *args):
        """
        SetAlpha(Graphic3d_MaterialAspect self, Standard_ShortReal theValue)

        Modifies the alpha coefficient of the surface, where 1.0 is opaque and 0.0 is fully transparent.

        :type theValue: float

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetAlpha(self, *args)


    def AmbientColor(self, *args):
        """
        Returns the ambient color of the surface.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Graphic3d_MaterialAspect_AmbientColor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAmbientColor(self, *args):
        """
        SetAmbientColor(Graphic3d_MaterialAspect self, Quantity_Color theColor)

        Modifies the ambient color of the surface.

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetAmbientColor(self, *args)


    def DiffuseColor(self, *args):
        """
        Returns the diffuse color of the surface.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Graphic3d_MaterialAspect_DiffuseColor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetDiffuseColor(self, *args):
        """
        SetDiffuseColor(Graphic3d_MaterialAspect self, Quantity_Color theColor)

        Modifies the diffuse color of the surface.

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetDiffuseColor(self, *args)


    def SpecularColor(self, *args):
        """
        Returns the specular color of the surface.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Graphic3d_MaterialAspect_SpecularColor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetSpecularColor(self, *args):
        """
        SetSpecularColor(Graphic3d_MaterialAspect self, Quantity_Color theColor)

        Modifies the specular color of the surface.

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetSpecularColor(self, *args)


    def EmissiveColor(self, *args):
        """
        Returns the emissive color of the surface.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Graphic3d_MaterialAspect_EmissiveColor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetEmissiveColor(self, *args):
        """
        SetEmissiveColor(Graphic3d_MaterialAspect self, Quantity_Color theColor)

        Modifies the emissive color of the surface.

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetEmissiveColor(self, *args)


    def Ambient(self, *args):
        """
        Ambient(Graphic3d_MaterialAspect self) -> Standard_ShortReal

        Returns the reflection properties of the surface.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_MaterialAspect_Ambient(self, *args)


    def SetAmbient(self, *args):
        """
        SetAmbient(Graphic3d_MaterialAspect self, Standard_ShortReal const theValue)

        Modifies the reflection properties of the surface.
        Warning: Raises MaterialDefinitionError if given value is a negative value or greater than 1.0.

        :type theValue: float

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetAmbient(self, *args)


    def Diffuse(self, *args):
        """
        Diffuse(Graphic3d_MaterialAspect self) -> Standard_ShortReal

        Returns the reflection properties of the surface.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_MaterialAspect_Diffuse(self, *args)


    def SetDiffuse(self, *args):
        """
        SetDiffuse(Graphic3d_MaterialAspect self, Standard_ShortReal const theValue)

        Modifies the reflection properties of the surface.
        Warning: Raises MaterialDefinitionError if given value is a negative value or greater than 1.0.

        :type theValue: float

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetDiffuse(self, *args)


    def Specular(self, *args):
        """
        Specular(Graphic3d_MaterialAspect self) -> Standard_ShortReal

        Returns the reflection properties of the surface.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_MaterialAspect_Specular(self, *args)


    def SetSpecular(self, *args):
        """
        SetSpecular(Graphic3d_MaterialAspect self, Standard_ShortReal const theValue)

        Modifies the reflection properties of the surface.
        Warning: Raises MaterialDefinitionError if given value is a negative value or greater than 1.0.

        :type theValue: float

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetSpecular(self, *args)


    def Emissive(self, *args):
        """
        Emissive(Graphic3d_MaterialAspect self) -> Standard_ShortReal

        Returns the emissive coefficient of the surface.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_MaterialAspect_Emissive(self, *args)


    def SetEmissive(self, *args):
        """
        SetEmissive(Graphic3d_MaterialAspect self, Standard_ShortReal const theValue)

        Modifies the reflection properties of the surface.
        Warning: Raises MaterialDefinitionError if given value is a negative value or greater than 1.0.

        :type theValue: float

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetEmissive(self, *args)


    def Shininess(self, *args):
        """
        Shininess(Graphic3d_MaterialAspect self) -> Standard_ShortReal

        Returns the luminosity of the surface.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_MaterialAspect_Shininess(self, *args)


    def SetShininess(self, *args):
        """
        SetShininess(Graphic3d_MaterialAspect self, Standard_ShortReal const theValue)

        Modifies the luminosity of the surface.
        Warning: Raises MaterialDefinitionError if given value is a negative value or greater than 1.0.

        :type theValue: float

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetShininess(self, *args)


    def IncreaseShine(self, *args):
        """
        IncreaseShine(Graphic3d_MaterialAspect self, Standard_ShortReal const theDelta)

        Increases or decreases the luminosity.
        @param theDelta a signed percentage

        :type theDelta: float

        """
        return _Graphic3d.Graphic3d_MaterialAspect_IncreaseShine(self, *args)


    def RefractionIndex(self, *args):
        """
        RefractionIndex(Graphic3d_MaterialAspect self) -> Standard_ShortReal

        Returns the refraction index of the material

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_MaterialAspect_RefractionIndex(self, *args)


    def SetRefractionIndex(self, *args):
        """
        SetRefractionIndex(Graphic3d_MaterialAspect self, Standard_ShortReal const theValue)

        Modifies the refraction index of the material.
        Warning: Raises MaterialDefinitionError if given value is a lesser than 1.0.

        :type theValue: float

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetRefractionIndex(self, *args)


    def BSDF(self, *args):
        """
        Returns BSDF (bidirectional scattering distribution function).

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_BSDF

        """
        res = _Graphic3d.Graphic3d_MaterialAspect_BSDF(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetBSDF(self, *args):
        """
        SetBSDF(Graphic3d_MaterialAspect self, Graphic3d_BSDF theBSDF)

        Modifies the BSDF (bidirectional scattering distribution function).

        :type theBSDF: OCC.wrapper.Graphic3d.Graphic3d_BSDF

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetBSDF(self, *args)


    def ReflectionMode(self, *args):
        """
        ReflectionMode(Graphic3d_MaterialAspect self, Graphic3d_TypeOfReflection const theType) -> Standard_Boolean

        Returns TRUE if the reflection mode is active, FALSE otherwise.

        :type theType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfReflection
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_MaterialAspect_ReflectionMode(self, *args)


    def SetReflectionMode(self, *args):
        """
        SetReflectionMode(Graphic3d_MaterialAspect self, Graphic3d_TypeOfReflection const theType, Standard_Boolean const theValue)

        Activates or deactivates the reflective properties of the surface with specified reflection type.

        Disabling diffuse and specular reflectance is useful for efficient visualization
        of large amounts of data as definition of normals for graphic primitives is not needed
        when only "all-directional" reflectance is active.

        NOTE: Disabling all four reflection modes also turns off the following effects:
        1. Lighting. Colors of primitives are not affected by the material properties when lighting is off.
        2. Transparency.

        :type theType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfReflection
        :type theValue: bool

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetReflectionMode(self, *args)


    def SetReflectionModeOn(self, *args):
        """
        SetReflectionModeOn(Graphic3d_MaterialAspect self, Graphic3d_TypeOfReflection const theType)

        Activates the reflective properties of the surface with specified reflection type.

        :type theType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfReflection

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetReflectionModeOn(self, *args)


    def SetReflectionModeOff(self, *args):
        """
        SetReflectionModeOff(Graphic3d_MaterialAspect self, Graphic3d_TypeOfReflection const theType)

        Deactivates the reflective properties of the surface with specified reflection type.

        :type theType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfReflection

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetReflectionModeOff(self, *args)


    def MaterialType(self, *args):
        """
        MaterialType(Graphic3d_MaterialAspect self, Standard_Integer const theRank) -> Graphic3d_TypeOfMaterial
        MaterialType(Graphic3d_MaterialAspect self, Graphic3d_TypeOfMaterial const theType) -> Standard_Boolean

        Returns TRUE if type of this material is equal to specified type.

        :type theType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfMaterial
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_MaterialAspect_MaterialType(self, *args)


    def SetMaterialType(self, *args):
        """
        SetMaterialType(Graphic3d_MaterialAspect self, Graphic3d_TypeOfMaterial const theType)

        Set material type.

        :type theType: OCC.wrapper.Graphic3d.Graphic3d_TypeOfMaterial

        """
        return _Graphic3d.Graphic3d_MaterialAspect_SetMaterialType(self, *args)


    def IsDifferent(self, *args):
        """
        IsDifferent(Graphic3d_MaterialAspect self, Graphic3d_MaterialAspect theOther) -> Standard_Boolean

        Returns TRUE if this material differs from specified one.

        :type theOther: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_MaterialAspect_IsDifferent(self, *args)


    def __ne__(self, *args):
        """
        __ne__(Graphic3d_MaterialAspect self, Graphic3d_MaterialAspect theOther) -> Standard_Boolean

        Returns TRUE if this material differs from specified one.

        :type theOther: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_MaterialAspect___ne__(self, *args)


    def IsEqual(self, *args):
        """
        IsEqual(Graphic3d_MaterialAspect self, Graphic3d_MaterialAspect theOther) -> Standard_Boolean

        Returns TRUE if this material is identical to specified one.

        :type theOther: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_MaterialAspect_IsEqual(self, *args)


    def __eq__(self, *args):
        """
        __eq__(Graphic3d_MaterialAspect self, Graphic3d_MaterialAspect theOther) -> Standard_Boolean

        Returns TRUE if this material is identical to specified one.

        :type theOther: OCC.wrapper.Graphic3d.Graphic3d_MaterialAspect
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_MaterialAspect___eq__(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_MaterialAspect
Graphic3d_MaterialAspect_swigregister = _Graphic3d.Graphic3d_MaterialAspect_swigregister
Graphic3d_MaterialAspect_swigregister(Graphic3d_MaterialAspect)

def Graphic3d_MaterialAspect_NumberOfMaterials(*args):
    """
    Graphic3d_MaterialAspect_NumberOfMaterials() -> Standard_Integer

    Returns the number of predefined textures.

    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _Graphic3d.Graphic3d_MaterialAspect_NumberOfMaterials(*args)

def Graphic3d_MaterialAspect_MaterialFromName(*args):
    """
    Graphic3d_MaterialAspect_MaterialFromName(Standard_CString const theName) -> Graphic3d_NameOfMaterial

    Returns the material for specified name or Graphic3d_NOM_DEFAULT if name is unknown.

    :type theName: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Graphic3d.Graphic3d_NameOfMaterial

    """
    return _Graphic3d.Graphic3d_MaterialAspect_MaterialFromName(*args)

class Handle_Graphic3d_TransformError(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_TransformError self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_TransformError_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_TransformError self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_TransformError_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_TransformError self, Graphic3d_TransformError thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_TransformError_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_TransformError self, Handle_Graphic3d_TransformError theHandle) -> Handle_Graphic3d_TransformError
        assign(Handle_Graphic3d_TransformError self, Graphic3d_TransformError thePtr) -> Handle_Graphic3d_TransformError
        assign(Handle_Graphic3d_TransformError self, Handle_Graphic3d_TransformError theHandle) -> Handle_Graphic3d_TransformError

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_TransformError_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_TransformError self) -> Graphic3d_TransformError

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_TransformError_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_TransformError self) -> Graphic3d_TransformError

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_TransformError___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_TransformError self) -> Graphic3d_TransformError

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_TransformError___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_TransformError___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_TransformError___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_TransformError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_TransformError_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_TransformError

    def NewInstance(self, *args):
        """
        NewInstance(Handle_Graphic3d_TransformError self, Standard_CString const theMessage) -> Handle_Graphic3d_TransformError

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TransformError

        """
        return _Graphic3d.Handle_Graphic3d_TransformError_NewInstance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_TransformError self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_TransformError_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_TransformError_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_TransformError_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Print(self, *args):
        """
        Print(Handle_Graphic3d_TransformError self, Standard_OStream & s)

        Prints on the stream <s> the exception name followed by
        the error message.
        Level: Advanced
        Warning:
        The operator "OStream& operator<< (Standard_OStream&,
        Handle(Standard_Failure)&)"
        is implemented. (This operator uses the method Print)

        :type s: OCC.wrapper.Standard.Standard_OStream

        """
        return _Graphic3d.Handle_Graphic3d_TransformError_Print(self, *args)


    def GetMessageString(self, *args):
        """
        GetMessageString(Handle_Graphic3d_TransformError self) -> Standard_CString

        Returns error message

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Handle_Graphic3d_TransformError_GetMessageString(self, *args)


    def SetMessageString(self, *args):
        """
        SetMessageString(Handle_Graphic3d_TransformError self, Standard_CString const aMessage)

        Sets error message

        :type aMessage: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Handle_Graphic3d_TransformError_SetMessageString(self, *args)


    def Reraise(self, *args):
        """
        Reraise(Handle_Graphic3d_TransformError self)
        Reraise(Handle_Graphic3d_TransformError self, Standard_CString const aMessage)
        Reraise(Handle_Graphic3d_TransformError self, Standard_SStream const & aReason)

        Reraises a caught exception and changes its error message.

        :type aReason: OCC.wrapper.Standard.Standard_SStream

        """
        return _Graphic3d.Handle_Graphic3d_TransformError_Reraise(self, *args)


    def Jump(self, *args):
        """
        Jump(Handle_Graphic3d_TransformError self)

        Used to throw CASCADE exception from C signal handler.
        On platforms that do not allow throwing C++ exceptions
        from this handler (e.g. Linux), uses longjump to get to
        the current active signal handler, and only then is
        converted to C++ exception.


        """
        return _Graphic3d.Handle_Graphic3d_TransformError_Jump(self, *args)


    def Caught(self, *args):
        """
        Caught(Handle_Graphic3d_TransformError self) -> Handle_Standard_Failure

        Returns the last caught exception.
        Needed when exceptions are emulated by C longjumps,
        in other cases is also provided for compatibility.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Failure

        """
        return _Graphic3d.Handle_Graphic3d_TransformError_Caught(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_TransformError self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_TransformError_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_TransformError self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_TransformError self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_TransformError_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_TransformError self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_TransformError self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_TransformError_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_TransformError self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_TransformError_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_TransformError self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_TransformError_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_TransformError self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_TransformError_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_TransformError self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_TransformError_DecrementRefCounter(self, *args)

Handle_Graphic3d_TransformError_swigregister = _Graphic3d.Handle_Graphic3d_TransformError_swigregister
Handle_Graphic3d_TransformError_swigregister(Handle_Graphic3d_TransformError)

def Handle_Graphic3d_TransformError_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_TransformError_DownCast(thing)
Handle_Graphic3d_TransformError_DownCast = _Graphic3d.Handle_Graphic3d_TransformError_DownCast

class Handle_Graphic3d_Texture1Dsegment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_Texture1Dsegment self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_Texture1Dsegment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_Texture1Dsegment self, Graphic3d_Texture1Dsegment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_Texture1Dsegment self, Handle_Graphic3d_Texture1Dsegment theHandle) -> Handle_Graphic3d_Texture1Dsegment
        assign(Handle_Graphic3d_Texture1Dsegment self, Graphic3d_Texture1Dsegment thePtr) -> Handle_Graphic3d_Texture1Dsegment
        assign(Handle_Graphic3d_Texture1Dsegment self, Handle_Graphic3d_Texture1Dsegment theHandle) -> Handle_Graphic3d_Texture1Dsegment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_Texture1Dsegment self) -> Graphic3d_Texture1Dsegment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_Texture1Dsegment self) -> Graphic3d_Texture1Dsegment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_Texture1Dsegment self) -> Graphic3d_Texture1Dsegment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_Texture1Dsegment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_Texture1Dsegment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_Texture1Dsegment_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_Texture1Dsegment

    def SetSegment(self, *args):
        """
        SetSegment(Handle_Graphic3d_Texture1Dsegment self, Standard_ShortReal const theX1, Standard_ShortReal const theY1, Standard_ShortReal const theZ1, Standard_ShortReal const theX2, Standard_ShortReal const theY2, Standard_ShortReal const theZ2)

        Sets the texture application bounds. Defines the way
        the texture is stretched across facets.
        Default values are <0.0, 0.0, 0.0> , <0.0, 0.0, 1.0>

        :type theX1: float
        :type theY1: float
        :type theZ1: float
        :type theX2: float
        :type theY2: float
        :type theZ2: float

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_SetSegment(self, *args)


    def Segment(self, *args):
        """
        Segment(Handle_Graphic3d_Texture1Dsegment self)

        Returns the values of the current segment X1, Y1, Z1 , X2, Y2, Z2.

        :type theX1: float
        :type theY1: float
        :type theZ1: float
        :type theX2: float
        :type theY2: float
        :type theZ2: float

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_Segment(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_Texture1Dsegment self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_Texture1Dsegment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_Texture1Dsegment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Name(self, *args):
        """
        Name(Handle_Graphic3d_Texture1Dsegment self) -> Graphic3d_NameOfTexture1D

        Returns the name of the predefined textures or NOT_1D_UNKNOWN
        when the name is given as a filename.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_NameOfTexture1D

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_Name(self, *args)


    def NumberOfTextures(self, *args):
        """
        NumberOfTextures(Handle_Graphic3d_Texture1Dsegment self) -> Standard_Integer

        Returns the number of predefined textures.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_NumberOfTextures(self, *args)


    def TextureName(self, *args):
        """
        TextureName(Handle_Graphic3d_Texture1Dsegment self, Standard_Integer const aRank) -> TCollection_AsciiString

        Returns the name of the predefined texture of rank <aRank>

        :type aRank: int
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_TextureName(self, *args)


    def EnableSmooth(self, *args):
        """
        EnableSmooth(Handle_Graphic3d_Texture1Dsegment self)

        enable texture smoothing


        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_EnableSmooth(self, *args)


    def IsSmoothed(self, *args):
        """
        IsSmoothed(Handle_Graphic3d_Texture1Dsegment self) -> Standard_Boolean

        Returns TRUE if the texture is smoothed.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_IsSmoothed(self, *args)


    def DisableSmooth(self, *args):
        """
        DisableSmooth(Handle_Graphic3d_Texture1Dsegment self)

        disable texture smoothing


        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_DisableSmooth(self, *args)


    def EnableModulate(self, *args):
        """
        EnableModulate(Handle_Graphic3d_Texture1Dsegment self)

        enable texture modulate mode.
        the image is modulate with the shading of the surface.


        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_EnableModulate(self, *args)


    def DisableModulate(self, *args):
        """
        DisableModulate(Handle_Graphic3d_Texture1Dsegment self)

        disable texture modulate mode.
        the image is directly decal on the surface.


        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_DisableModulate(self, *args)


    def IsModulate(self, *args):
        """
        IsModulate(Handle_Graphic3d_Texture1Dsegment self) -> Standard_Boolean

        Returns TRUE if the texture is modulate.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_IsModulate(self, *args)


    def EnableRepeat(self, *args):
        """
        EnableRepeat(Handle_Graphic3d_Texture1Dsegment self)

        use this methods if you want to enable
        texture repetition on your objects.


        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_EnableRepeat(self, *args)


    def DisableRepeat(self, *args):
        """
        DisableRepeat(Handle_Graphic3d_Texture1Dsegment self)

        use this methods if you want to disable
        texture repetition on your objects.


        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_DisableRepeat(self, *args)


    def IsRepeat(self, *args):
        """
        IsRepeat(Handle_Graphic3d_Texture1Dsegment self) -> Standard_Boolean

        Returns TRUE if the texture repeat is enable.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_IsRepeat(self, *args)


    def AnisoFilter(self, *args):
        """
        AnisoFilter(Handle_Graphic3d_Texture1Dsegment self) -> Graphic3d_LevelOfTextureAnisotropy

        @return level of anisontropy texture filter.
        Default value is Graphic3d_LOTA_OFF.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_LevelOfTextureAnisotropy

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_AnisoFilter(self, *args)


    def SetAnisoFilter(self, *args):
        """
        SetAnisoFilter(Handle_Graphic3d_Texture1Dsegment self, Graphic3d_LevelOfTextureAnisotropy const theLevel)

        @param theLevel level of anisontropy texture filter.

        :type theLevel: OCC.wrapper.Graphic3d.Graphic3d_LevelOfTextureAnisotropy

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_SetAnisoFilter(self, *args)


    def TexturesFolder(self, *args):
        """
        TexturesFolder(Handle_Graphic3d_Texture1Dsegment self) -> TCollection_AsciiString

        The path to textures determined from CSF_MDTVTexturesDirectory or CASROOT environment variables.
        @return the root folder with default textures.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_TexturesFolder(self, *args)


    def IsDone(self, *args):
        """
        IsDone(Handle_Graphic3d_Texture1Dsegment self) -> Standard_Boolean

        Checks if a texture class is valid or not.
        @return true if the construction of the class is correct

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_IsDone(self, *args)


    def Path(self, *args):
        """
        Returns the full path of the defined texture.
        It could be empty path if GetImage() is overridden to load image not from file.

        :rtype: OCC.wrapper.OSD.OSD_Path

        """
        res = _Graphic3d.Handle_Graphic3d_Texture1Dsegment_Path(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Type(self, *args):
        """
        Type(Handle_Graphic3d_Texture1Dsegment self) -> Graphic3d_TypeOfTexture

        @return the texture type.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfTexture

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_Type(self, *args)


    def GetId(self, *args):
        """
        This ID will be used to manage resource in graphic driver.

        Default implementation generates unique ID within constructor;
        inheritors may re-initialize it within their constructor,
        but should never modify it afterwards.

        Multiple Graphic3d_TextureRoot instances with same ID
        will be treated as single texture with different parameters
        to optimize memory usage though this will be more natural
        to use same instance of Graphic3d_TextureRoot when possible.

        If this ID is set to empty string by inheritor,
        then independent graphical resource will be created
        for each instance of Graphic3d_AspectFillArea3d where texture will be used.

        @return texture identifier.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Handle_Graphic3d_Texture1Dsegment_GetId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Revision(self, *args):
        """
        Revision(Handle_Graphic3d_Texture1Dsegment self) -> Standard_Size

        Return image revision.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_Revision(self, *args)


    def UpdateRevision(self, *args):
        """
        UpdateRevision(Handle_Graphic3d_Texture1Dsegment self)

        Update image revision.
        Can be used for signaling changes in the texture source (e.g. file update, pixmap update)
        without re-creating texture source itself (since unique id should be never modified).


        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_UpdateRevision(self, *args)


    def GetImage(self, *args):
        """
        GetImage(Handle_Graphic3d_Texture1Dsegment self) -> Handle_Image_PixMap

        This method will be called by graphic driver each time when texture resource should be created.
        Default constructors allow defining the texture source as path to texture image or directly as pixmap.
        If the source is defined as path, then the image will be dynamically loaded when this method is called
        (and no copy will be preserved in this class instance).
        Inheritors may dynamically generate the image.
        Notice, image data should be in Bottom-Up order (see Image_PixMap::IsTopDown())!
        @return the image for texture.

        :rtype: OCC.wrapper.Image.Handle_Image_PixMap

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_GetImage(self, *args)


    def GetParams(self, *args):
        """
        @return low-level texture parameters

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureParams

        """
        res = _Graphic3d.Handle_Graphic3d_Texture1Dsegment_GetParams(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_Texture1Dsegment self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_Texture1Dsegment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_Texture1Dsegment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_Texture1Dsegment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_Texture1Dsegment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_Texture1Dsegment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_Texture1Dsegment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_Texture1Dsegment self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_Texture1Dsegment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_DecrementRefCounter(self, *args)

Handle_Graphic3d_Texture1Dsegment_swigregister = _Graphic3d.Handle_Graphic3d_Texture1Dsegment_swigregister
Handle_Graphic3d_Texture1Dsegment_swigregister(Handle_Graphic3d_Texture1Dsegment)

def Handle_Graphic3d_Texture1Dsegment_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_Texture1Dsegment_DownCast(thing)
Handle_Graphic3d_Texture1Dsegment_DownCast = _Graphic3d.Handle_Graphic3d_Texture1Dsegment_DownCast

class Graphic3d_ArrayOfPolygons(Graphic3d_ArrayOfPrimitives):
    """
    Contains polygons array definition.
    WARNING! Polygon primitives might be unsupported by graphics library.
    Triangulation should be used instead of quads for better compatibility.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_ArrayOfPolygons
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_ArrayOfPolygons(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_ArrayOfPolygons_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_ArrayOfPolygons_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_ArrayOfPolygons_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Graphic3d_ArrayOfPolygons self, Standard_Integer const theMaxVertexs, Standard_Integer const theMaxBounds=0, Standard_Integer const theMaxEdges=0, Standard_Boolean const theHasVNormals, Standard_Boolean const theHasVColors, Standard_Boolean const theHasBColors, Standard_Boolean const theHasVTexels) -> Graphic3d_ArrayOfPolygons

        Creates an array of polygons, a polygon can be filled as:
        1) Creating a single polygon defined with his vertexes, i.e:
        @code
        myArray = Graphic3d_ArrayOfPolygons (7);
        myArray->AddVertex (x1, y1, z1);
        ....
        myArray->AddVertex (x7, y7, z7);
        @endcode
        2) Creating separate polygons defined with a predefined number of bounds and the number of vertex per bound, i.e:
        @code
        myArray = Graphic3d_ArrayOfPolygons (7, 2);
        myArray->AddBound (4);
        myArray->AddVertex (x1, y1, z1);
        ....
        myArray->AddVertex (x4, y4, z4);
        myArray->AddBound (3);
        myArray->AddVertex (x5, y5, z5);
        ....
        myArray->AddVertex (x7, y7, z7);
        @endcode
        3) Creating a single indexed polygon defined with his vertex ans edges, i.e:
        @code
        myArray = Graphic3d_ArrayOfPolygons (4, 0, 6);
        myArray->AddVertex (x1, y1, z1);
        ....
        myArray->AddVertex (x4, y4, z4);
        myArray->AddEdge (1);
        myArray->AddEdge (2);
        myArray->AddEdge (3);
        myArray->AddEdge (1);
        myArray->AddEdge (2);
        myArray->AddEdge (4);
        @endcode
        4) Creating separate polygons defined with a predefined number of bounds and the number of edges per bound, i.e:
        @code
        myArray = Graphic3d_ArrayOfPolygons (6, 4, 14);
        myArray->AddBound (3);
        myArray->AddVertex (x1, y1, z1);
        myArray->AddVertex (x2, y2, z2);
        myArray->AddVertex (x3, y3, z3);
        myArray->AddEdge (1);
        myArray->AddEdge (2);
        myArray->AddEdge (3);
        myArray->AddBound (3);
        myArray->AddVertex (x4, y4, z4);
        myArray->AddVertex (x5, y5, z5);
        myArray->AddVertex (x6, y6, z6);
        myArray->AddEdge (4);
        myArray->AddEdge (5);
        myArray->AddEdge (6);
        myArray->AddBound (4);
        myArray->AddEdge (2);
        myArray->AddEdge (3);
        myArray->AddEdge (5);
        myArray->AddEdge (6);
        myArray->AddBound (4);
        myArray->AddEdge (1);
        myArray->AddEdge (3);
        myArray->AddEdge (5);
        myArray->AddEdge (4);
        @endcode
        @param theMaxVertexs defines the maximum allowed vertex number in the array
        @param theMaxBounds  defines the maximum allowed bound  number in the array
        @param theMaxEdges   defines the maximum allowed edge   number in the array

        :type theMaxVertexs: int
        :type theMaxBounds: int
        :type theMaxEdges: int
        :type theHasVNormals: bool
        :type theHasVColors: bool
        :type theHasBColors: bool
        :type theHasVTexels: bool

        """
        this = _Graphic3d.new_Graphic3d_ArrayOfPolygons(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle



    __swig_destroy__ = _Graphic3d.delete_Graphic3d_ArrayOfPolygons
Graphic3d_ArrayOfPolygons_swigregister = _Graphic3d.Graphic3d_ArrayOfPolygons_swigregister
Graphic3d_ArrayOfPolygons_swigregister(Graphic3d_ArrayOfPolygons)

def Graphic3d_ArrayOfPolygons_get_type_name(*args):
    """
    Graphic3d_ArrayOfPolygons_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_ArrayOfPolygons_get_type_name(*args)

def Graphic3d_ArrayOfPolygons_get_type_descriptor(*args):
    """
    Graphic3d_ArrayOfPolygons_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_ArrayOfPolygons_get_type_descriptor(*args)

class Handle_Graphic3d_DataStructureManager(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_DataStructureManager self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_DataStructureManager_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_DataStructureManager self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_DataStructureManager_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_DataStructureManager self, Graphic3d_DataStructureManager thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_DataStructureManager_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_DataStructureManager self, Handle_Graphic3d_DataStructureManager theHandle) -> Handle_Graphic3d_DataStructureManager
        assign(Handle_Graphic3d_DataStructureManager self, Graphic3d_DataStructureManager thePtr) -> Handle_Graphic3d_DataStructureManager
        assign(Handle_Graphic3d_DataStructureManager self, Handle_Graphic3d_DataStructureManager theHandle) -> Handle_Graphic3d_DataStructureManager

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_DataStructureManager_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_DataStructureManager self) -> Graphic3d_DataStructureManager

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_DataStructureManager_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_DataStructureManager self) -> Graphic3d_DataStructureManager

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_DataStructureManager___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_DataStructureManager self) -> Graphic3d_DataStructureManager

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_DataStructureManager___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_DataStructureManager___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_DataStructureManager___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_DataStructureManager(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_DataStructureManager_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_DataStructureManager

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_DataStructureManager self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_DataStructureManager_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_DataStructureManager_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_DataStructureManager_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_DataStructureManager self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_DataStructureManager_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_DataStructureManager self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_DataStructureManager self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_DataStructureManager_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_DataStructureManager self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_DataStructureManager self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_DataStructureManager_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_DataStructureManager self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_DataStructureManager_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_DataStructureManager self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_DataStructureManager_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_DataStructureManager self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_DataStructureManager_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_DataStructureManager self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_DataStructureManager_DecrementRefCounter(self, *args)

Handle_Graphic3d_DataStructureManager_swigregister = _Graphic3d.Handle_Graphic3d_DataStructureManager_swigregister
Handle_Graphic3d_DataStructureManager_swigregister(Handle_Graphic3d_DataStructureManager)

def Handle_Graphic3d_DataStructureManager_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_DataStructureManager_DownCast(thing)
Handle_Graphic3d_DataStructureManager_DownCast = _Graphic3d.Handle_Graphic3d_DataStructureManager_DownCast

class NCollection_Vec3_Standard_Real(object):
    """
    Generic 3-components vector.
    To be used as RGB color pixel or XYZ 3D-point.
    The main target for this class - to handle raw low-level arrays (from/to graphic driver etc.).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Length(*args):
        """
        Length() -> int

        Returns the number of components.

        :rtype: int

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_Length(*args)

    Length = staticmethod(Length)

    def __init__(self, *args):
        """
        Generic 3-components vector.
        To be used as RGB color pixel or XYZ 3D-point.
        The main target for this class - to handle raw low-level arrays (from/to graphic driver etc.).
        """
        this = _Graphic3d.new_NCollection_Vec3_Standard_Real(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetValues(self, *args):
        """
        SetValues(NCollection_Vec3_Standard_Real self, double const theX, double const theY, double const theZ)

        Assign new values to the vector.

        :type theX: const Element_t
        :type theY: const Element_t
        :type theZ: const Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_SetValues(self, *args)


    def yx(self, *args):
        """
        yx(NCollection_Vec3_Standard_Real self) -> NCollection_Vec2_Standard_Real

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_yx(self, *args)


    def xz(self, *args):
        """
        xz(NCollection_Vec3_Standard_Real self) -> NCollection_Vec2_Standard_Real

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_xz(self, *args)


    def zx(self, *args):
        """
        zx(NCollection_Vec3_Standard_Real self) -> NCollection_Vec2_Standard_Real

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_zx(self, *args)


    def zy(self, *args):
        """
        zy(NCollection_Vec3_Standard_Real self) -> NCollection_Vec2_Standard_Real

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_zy(self, *args)


    def xyz(self, *args):
        """
        xyz(NCollection_Vec3_Standard_Real self) -> NCollection_Vec3_Standard_Real

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_xyz(self, *args)


    def xzy(self, *args):
        """
        xzy(NCollection_Vec3_Standard_Real self) -> NCollection_Vec3_Standard_Real

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_xzy(self, *args)


    def yxz(self, *args):
        """
        yxz(NCollection_Vec3_Standard_Real self) -> NCollection_Vec3_Standard_Real

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_yxz(self, *args)


    def yzx(self, *args):
        """
        yzx(NCollection_Vec3_Standard_Real self) -> NCollection_Vec3_Standard_Real

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_yzx(self, *args)


    def zyx(self, *args):
        """
        zyx(NCollection_Vec3_Standard_Real self) -> NCollection_Vec3_Standard_Real

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_zyx(self, *args)


    def zxy(self, *args):
        """
        zxy(NCollection_Vec3_Standard_Real self) -> NCollection_Vec3_Standard_Real

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_zxy(self, *args)


    def x(self, *args):
        """
        x(NCollection_Vec3_Standard_Real self) -> double
        x(NCollection_Vec3_Standard_Real self) -> double &

        Alias to 1st component as X coordinate in XYZ.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_x(self, *args)


    def r(self, *args):
        """
        r(NCollection_Vec3_Standard_Real self) -> double
        r(NCollection_Vec3_Standard_Real self) -> double &

        Alias to 1st component as RED channel in RGB.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_r(self, *args)


    def y(self, *args):
        """
        y(NCollection_Vec3_Standard_Real self) -> double
        y(NCollection_Vec3_Standard_Real self) -> double &

        Alias to 2nd component as Y coordinate in XYZ.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_y(self, *args)


    def g(self, *args):
        """
        g(NCollection_Vec3_Standard_Real self) -> double
        g(NCollection_Vec3_Standard_Real self) -> double &

        Alias to 2nd component as GREEN channel in RGB.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_g(self, *args)


    def z(self, *args):
        """
        z(NCollection_Vec3_Standard_Real self) -> double
        z(NCollection_Vec3_Standard_Real self) -> double &

        Alias to 3rd component as Z coordinate in XYZ.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_z(self, *args)


    def b(self, *args):
        """
        b(NCollection_Vec3_Standard_Real self) -> double
        b(NCollection_Vec3_Standard_Real self) -> double &

        Alias to 3rd component as BLUE channel in RGB.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_b(self, *args)


    def xy(self, *args):
        """
        xy(NCollection_Vec3_Standard_Real self) -> NCollection_Vec2_Standard_Real
        xy(NCollection_Vec3_Standard_Real self) -> NCollection_Vec2_Standard_Real

        @return XY-components modifiable vector

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_xy(self, *args)


    def yz(self, *args):
        """
        yz(NCollection_Vec3_Standard_Real self) -> NCollection_Vec2_Standard_Real
        yz(NCollection_Vec3_Standard_Real self) -> NCollection_Vec2_Standard_Real

        @return YZ-components modifiable vector

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_yz(self, *args)


    def IsEqual(self, *args):
        """
        IsEqual(NCollection_Vec3_Standard_Real self, NCollection_Vec3_Standard_Real theOther) -> bool

        Check this vector with another vector for equality (without tolerance!).

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_IsEqual(self, *args)


    def __eq__(self, *args):
        """
        __eq__(NCollection_Vec3_Standard_Real self, NCollection_Vec3_Standard_Real theOther) -> bool
        __eq__(NCollection_Vec3_Standard_Real self, NCollection_Vec3_Standard_Real theOther) -> bool

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real___eq__(self, *args)


    def __ne__(self, *args):
        """
        __ne__(NCollection_Vec3_Standard_Real self, NCollection_Vec3_Standard_Real theOther) -> bool
        __ne__(NCollection_Vec3_Standard_Real self, NCollection_Vec3_Standard_Real theOther) -> bool

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real___ne__(self, *args)


    def GetData(self, *args):
        """
        GetData(NCollection_Vec3_Standard_Real self) -> double const *

        Raw access to the data (for OpenGL exchange).

        :rtype: const Element_t *

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_GetData(self, *args)


    def ChangeData(self, *args):
        """
        ChangeData(NCollection_Vec3_Standard_Real self) -> double *

        :rtype: Element_t *

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_ChangeData(self, *args)


    def __iadd__(self, *args):
        """
        __iadd__(NCollection_Vec3_Standard_Real self, NCollection_Vec3_Standard_Real theAdd) -> NCollection_Vec3_Standard_Real

        Compute per-component summary.

        :type theAdd: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real___iadd__(self, *args)


    def __neg__(self, *args):
        """
        __neg__(NCollection_Vec3_Standard_Real self) -> NCollection_Vec3_Standard_Real

        Unary -.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real___neg__(self, *args)


    def __isub__(self, *args):
        """
        __isub__(NCollection_Vec3_Standard_Real self, NCollection_Vec3_Standard_Real theDec) -> NCollection_Vec3_Standard_Real

        Compute per-component subtraction.

        :type theDec: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real___isub__(self, *args)


    def Multiply(self, *args):
        """
        Multiply(NCollection_Vec3_Standard_Real self, double const theFactor)

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_Multiply(self, *args)


    def __imul__(self, *args):
        """
        __imul__(NCollection_Vec3_Standard_Real self, NCollection_Vec3_Standard_Real theRight) -> NCollection_Vec3_Standard_Real
        __imul__(NCollection_Vec3_Standard_Real self, double const theFactor) -> NCollection_Vec3_Standard_Real

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real___imul__(self, *args)


    def __mul__(self, *args):
        """
        __mul__(NCollection_Vec3_Standard_Real self, double const theFactor) -> NCollection_Vec3_Standard_Real

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real___mul__(self, *args)


    def Multiplied(self, *args):
        """
        Multiplied(NCollection_Vec3_Standard_Real self, double const theFactor) -> NCollection_Vec3_Standard_Real

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_Multiplied(self, *args)


    def cwiseMin(self, *args):
        """
        cwiseMin(NCollection_Vec3_Standard_Real self, NCollection_Vec3_Standard_Real theVec) -> NCollection_Vec3_Standard_Real

        Compute component-wise minimum of two vectors.

        :type theVec: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_cwiseMin(self, *args)


    def cwiseMax(self, *args):
        """
        cwiseMax(NCollection_Vec3_Standard_Real self, NCollection_Vec3_Standard_Real theVec) -> NCollection_Vec3_Standard_Real

        Compute component-wise maximum of two vectors.

        :type theVec: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_cwiseMax(self, *args)


    def cwiseAbs(self, *args):
        """
        cwiseAbs(NCollection_Vec3_Standard_Real self) -> NCollection_Vec3_Standard_Real

        Compute component-wise modulus of the vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_cwiseAbs(self, *args)


    def maxComp(self, *args):
        """
        maxComp(NCollection_Vec3_Standard_Real self) -> double

        Compute maximum component of the vector.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_maxComp(self, *args)


    def minComp(self, *args):
        """
        minComp(NCollection_Vec3_Standard_Real self) -> double

        Compute minimum component of the vector.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_minComp(self, *args)


    def __itruediv__(self, *args):
        return _Graphic3d.NCollection_Vec3_Standard_Real___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _Graphic3d.NCollection_Vec3_Standard_Real___truediv__(self, *args)
    __div__ = __truediv__



    def Dot(self, *args):
        """
        Dot(NCollection_Vec3_Standard_Real self, NCollection_Vec3_Standard_Real theOther) -> double

        Computes the dot product.

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_Dot(self, *args)


    def Modulus(self, *args):
        """
        Modulus(NCollection_Vec3_Standard_Real self) -> double

        Computes the vector modulus (magnitude, length).

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_Modulus(self, *args)


    def SquareModulus(self, *args):
        """
        SquareModulus(NCollection_Vec3_Standard_Real self) -> double

        Computes the square of vector modulus (magnitude, length).
        This method may be used for performance tricks.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_SquareModulus(self, *args)


    def Normalize(self, *args):
        """
        Normalize(NCollection_Vec3_Standard_Real self)

        Normalize the vector.


        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_Normalize(self, *args)


    def Normalized(self, *args):
        """
        Normalized(NCollection_Vec3_Standard_Real self) -> NCollection_Vec3_Standard_Real

        Normalize the vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_Normalized(self, *args)


    def Cross(*args):
        """
        Cross(NCollection_Vec3_Standard_Real theVec1, NCollection_Vec3_Standard_Real theVec2) -> NCollection_Vec3_Standard_Real

        Computes the cross product.

        :type theVec1: OCC.wrapper.NCollection.NCollection_Vec3
        :type theVec2: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_Cross(*args)

    Cross = staticmethod(Cross)

    def GetLERP(*args):
        """
        GetLERP(NCollection_Vec3_Standard_Real theFrom, NCollection_Vec3_Standard_Real theTo, double const theT) -> NCollection_Vec3_Standard_Real

        Compute linear interpolation between to vectors.
        @param theT - interpolation coefficient 0..1;
        @return interpolation result.

        :type theFrom: OCC.wrapper.NCollection.NCollection_Vec3
        :type theTo: OCC.wrapper.NCollection.NCollection_Vec3
        :type theT: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_GetLERP(*args)

    GetLERP = staticmethod(GetLERP)

    def DX(*args):
        """
        DX() -> NCollection_Vec3_Standard_Real

        Constuct DX unit vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_DX(*args)

    DX = staticmethod(DX)

    def DY(*args):
        """
        DY() -> NCollection_Vec3_Standard_Real

        Constuct DY unit vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_DY(*args)

    DY = staticmethod(DY)

    def DZ(*args):
        """
        DZ() -> NCollection_Vec3_Standard_Real

        Constuct DZ unit vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Real_DZ(*args)

    DZ = staticmethod(DZ)
    __swig_destroy__ = _Graphic3d.delete_NCollection_Vec3_Standard_Real
NCollection_Vec3_Standard_Real_swigregister = _Graphic3d.NCollection_Vec3_Standard_Real_swigregister
NCollection_Vec3_Standard_Real_swigregister(NCollection_Vec3_Standard_Real)

def NCollection_Vec3_Standard_Real_Length(*args):
    """
    NCollection_Vec3_Standard_Real_Length() -> int

    Returns the number of components.

    :rtype: int

    """
    return _Graphic3d.NCollection_Vec3_Standard_Real_Length(*args)

def NCollection_Vec3_Standard_Real_Cross(*args):
    """
    NCollection_Vec3_Standard_Real_Cross(NCollection_Vec3_Standard_Real theVec1, NCollection_Vec3_Standard_Real theVec2) -> NCollection_Vec3_Standard_Real

    Computes the cross product.

    :type theVec1: OCC.wrapper.NCollection.NCollection_Vec3
    :type theVec2: OCC.wrapper.NCollection.NCollection_Vec3
    :rtype: OCC.wrapper.NCollection.NCollection_Vec3

    """
    return _Graphic3d.NCollection_Vec3_Standard_Real_Cross(*args)

def NCollection_Vec3_Standard_Real_GetLERP(*args):
    """
    NCollection_Vec3_Standard_Real_GetLERP(NCollection_Vec3_Standard_Real theFrom, NCollection_Vec3_Standard_Real theTo, double const theT) -> NCollection_Vec3_Standard_Real

    Compute linear interpolation between to vectors.
    @param theT - interpolation coefficient 0..1;
    @return interpolation result.

    :type theFrom: OCC.wrapper.NCollection.NCollection_Vec3
    :type theTo: OCC.wrapper.NCollection.NCollection_Vec3
    :type theT: const Element_t
    :rtype: OCC.wrapper.NCollection.NCollection_Vec3

    """
    return _Graphic3d.NCollection_Vec3_Standard_Real_GetLERP(*args)

def NCollection_Vec3_Standard_Real_DX(*args):
    """
    NCollection_Vec3_Standard_Real_DX() -> NCollection_Vec3_Standard_Real

    Constuct DX unit vector.

    :rtype: OCC.wrapper.NCollection.NCollection_Vec3

    """
    return _Graphic3d.NCollection_Vec3_Standard_Real_DX(*args)

def NCollection_Vec3_Standard_Real_DY(*args):
    """
    NCollection_Vec3_Standard_Real_DY() -> NCollection_Vec3_Standard_Real

    Constuct DY unit vector.

    :rtype: OCC.wrapper.NCollection.NCollection_Vec3

    """
    return _Graphic3d.NCollection_Vec3_Standard_Real_DY(*args)

def NCollection_Vec3_Standard_Real_DZ(*args):
    """
    NCollection_Vec3_Standard_Real_DZ() -> NCollection_Vec3_Standard_Real

    Constuct DZ unit vector.

    :rtype: OCC.wrapper.NCollection.NCollection_Vec3

    """
    return _Graphic3d.NCollection_Vec3_Standard_Real_DZ(*args)


try:
	Graphic3d_Vec3d = NCollection_Vec3_Standard_Real
except NameError:
	pass # does not exist, probably ignored

class Handle_Graphic3d_ArrayOfQuadrangles(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_ArrayOfQuadrangles self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_ArrayOfQuadrangles self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_ArrayOfQuadrangles self, Graphic3d_ArrayOfQuadrangles thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_ArrayOfQuadrangles self, Handle_Graphic3d_ArrayOfQuadrangles theHandle) -> Handle_Graphic3d_ArrayOfQuadrangles
        assign(Handle_Graphic3d_ArrayOfQuadrangles self, Graphic3d_ArrayOfQuadrangles thePtr) -> Handle_Graphic3d_ArrayOfQuadrangles
        assign(Handle_Graphic3d_ArrayOfQuadrangles self, Handle_Graphic3d_ArrayOfQuadrangles theHandle) -> Handle_Graphic3d_ArrayOfQuadrangles

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_ArrayOfQuadrangles self) -> Graphic3d_ArrayOfQuadrangles

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_ArrayOfQuadrangles self) -> Graphic3d_ArrayOfQuadrangles

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_ArrayOfQuadrangles self) -> Graphic3d_ArrayOfQuadrangles

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_ArrayOfQuadrangles(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_ArrayOfQuadrangles

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_ArrayOfQuadrangles self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Attributes(self, *args):
        """
        Returns vertex attributes buffer (colors, normals, texture coordinates).

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Buffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_Attributes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Type(self, *args):
        """
        Type(Handle_Graphic3d_ArrayOfQuadrangles self) -> Graphic3d_TypeOfPrimitiveArray

        Returns the type of this primitive

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfPrimitiveArray

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_Type(self, *args)


    def StringType(self, *args):
        """
        StringType(Handle_Graphic3d_ArrayOfQuadrangles self) -> Standard_CString

        Returns the string type of this primitive

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_StringType(self, *args)


    def HasVertexNormals(self, *args):
        """
        HasVertexNormals(Handle_Graphic3d_ArrayOfQuadrangles self) -> Standard_Boolean

        Returns TRUE when vertex normals array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_HasVertexNormals(self, *args)


    def HasVertexColors(self, *args):
        """
        HasVertexColors(Handle_Graphic3d_ArrayOfQuadrangles self) -> Standard_Boolean

        Returns TRUE when vertex colors array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_HasVertexColors(self, *args)


    def HasVertexTexels(self, *args):
        """
        HasVertexTexels(Handle_Graphic3d_ArrayOfQuadrangles self) -> Standard_Boolean

        Returns TRUE when vertex texels array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_HasVertexTexels(self, *args)


    def VertexNumber(self, *args):
        """
        VertexNumber(Handle_Graphic3d_ArrayOfQuadrangles self) -> Standard_Integer

        Returns the number of defined vertex

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_VertexNumber(self, *args)


    def ItemNumber(self, *args):
        """
        ItemNumber(Handle_Graphic3d_ArrayOfQuadrangles self) -> Standard_Integer

        Returns the number of total items according to the array type.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_ItemNumber(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_Graphic3d_ArrayOfQuadrangles self) -> Standard_Boolean

        Returns TRUE only when the contains of this array is available.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_IsValid(self, *args)


    def AddVertex(self, *args):
        """
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangles self, gp_Pnt theVertex) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangles self, NCollection_Vec3_Standard_ShortReal theVertex) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangles self, gp_Pnt theVertex, Quantity_Color theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangles self, gp_Pnt theVertex, Standard_Integer const theColor32) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangles self, gp_Pnt theVertex, Graphic3d_Vec4ub const & theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangles self, gp_Pnt theVertex, gp_Dir theNormal) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theNX, Standard_ShortReal const theNY, Standard_ShortReal const theNZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangles self, gp_Pnt theVertex, gp_Dir theNormal, Quantity_Color theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangles self, gp_Pnt theVertex, gp_Dir theNormal, Standard_Integer const theColor32) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangles self, gp_Pnt theVertex, gp_Pnt2d theTexel) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theTX, Standard_Real const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theTX, Standard_ShortReal const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangles self, gp_Pnt theVertex, gp_Dir theNormal, gp_Pnt2d theTexel) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ, Standard_Real const theTX, Standard_Real const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theNX, Standard_ShortReal const theNY, Standard_ShortReal const theNZ, Standard_ShortReal const theTX, Standard_ShortReal const theTY) -> Standard_Integer

        Adds a vertice,vertex normal and texture in the vertex array.
        Warning: Normal is ignored when the hasVNormals constructor parameter is FALSE
        and  Texel  is ignored when the hasVTexels  constructor parameter is FALSE.
        @return the actual vertex number

        :type theX: float
        :type theY: float
        :type theZ: float
        :type theNX: float
        :type theNY: float
        :type theNZ: float
        :type theTX: float
        :type theTY: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_AddVertex(self, *args)


    def SetVertice(self, *args):
        """
        SetVertice(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theIndex, gp_Pnt theVertex)
        SetVertice(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theIndex, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ)

        Change the vertice of rank theIndex in the array.

        :type theIndex: int
        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_SetVertice(self, *args)


    def SetVertexColor(self, *args):
        """
        SetVertexColor(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theIndex, Quantity_Color theColor)
        SetVertexColor(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theIndex, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB)
        SetVertexColor(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theIndex, Graphic3d_Vec4ub const & theColor)
        SetVertexColor(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theIndex, Standard_Integer const theColor32)

        Change the vertex color of rank theIndex> in the array.
        @code
        theColor32 = Alpha << 24 + Blue << 16 + Green << 8 + Red
        @endcode

        :type theIndex: int
        :type theColor32: int

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_SetVertexColor(self, *args)


    def SetVertexNormal(self, *args):
        """
        SetVertexNormal(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theIndex, gp_Dir theNormal)
        SetVertexNormal(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theIndex, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ)

        Change the vertex normal of rank theIndex in the array.

        :type theIndex: int
        :type theNX: float
        :type theNY: float
        :type theNZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_SetVertexNormal(self, *args)


    def SetVertexTexel(self, *args):
        """
        SetVertexTexel(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theIndex, gp_Pnt2d theTexel)
        SetVertexTexel(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theIndex, Standard_Real const theTX, Standard_Real const theTY)

        Change the vertex texel of rank theIndex in the array.

        :type theIndex: int
        :type theTX: float
        :type theTY: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_SetVertexTexel(self, *args)


    def Vertice(self, *args):
        """
        Vertice(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theRank) -> gp_Pnt
        Vertice(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theRank)

        Returns the vertice coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_Vertice(self, *args)


    def VertexColor(self, *args):
        """
        VertexColor(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theRank) -> Quantity_Color
        VertexColor(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theIndex, Graphic3d_Vec4ub & theColor)
        VertexColor(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theRank)
        VertexColor(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theRank)

        Returns the vertex color values at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theColor: int

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_VertexColor(self, *args)


    def VertexNormal(self, *args):
        """
        VertexNormal(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theRank) -> gp_Dir
        VertexNormal(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theRank)

        Returns the vertex normal coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theNX: float
        :type theNY: float
        :type theNZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_VertexNormal(self, *args)


    def VertexTexel(self, *args):
        """
        VertexTexel(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theRank) -> gp_Pnt2d
        VertexTexel(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theRank)

        Returns the vertex texture coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theTX: float
        :type theTY: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_VertexTexel(self, *args)


    def Indices(self, *args):
        """
        Returns optional index buffer.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_IndexBuffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_Indices(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def EdgeNumber(self, *args):
        """
        EdgeNumber(Handle_Graphic3d_ArrayOfQuadrangles self) -> Standard_Integer

        Returns the number of defined edges

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_EdgeNumber(self, *args)


    def Edge(self, *args):
        """
        Edge(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theRank) -> Standard_Integer

        Returns the vertex index at rank theRank in the range [1,EdgeNumber()]

        :type theRank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_Edge(self, *args)


    def AddEdge(self, *args):
        """
        AddEdge(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theVertexIndex) -> Standard_Integer

        Adds an edge in the range [1,VertexNumber()] in the array.
        @return the actual edges number

        :type theVertexIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_AddEdge(self, *args)


    def Bounds(self, *args):
        """
        Returns optional bounds buffer.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_BoundBuffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_Bounds(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasBoundColors(self, *args):
        """
        HasBoundColors(Handle_Graphic3d_ArrayOfQuadrangles self) -> Standard_Boolean

        Returns TRUE when bound colors array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_HasBoundColors(self, *args)


    def BoundNumber(self, *args):
        """
        BoundNumber(Handle_Graphic3d_ArrayOfQuadrangles self) -> Standard_Integer

        Returns the number of defined bounds

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_BoundNumber(self, *args)


    def Bound(self, *args):
        """
        Bound(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theRank) -> Standard_Integer

        Returns the edge number at rank theRank.

        :type theRank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_Bound(self, *args)


    def BoundColor(self, *args):
        """
        BoundColor(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theRank) -> Quantity_Color
        BoundColor(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theRank)

        Returns the bound color values at rank theRank from the bound table if defined.

        :type theRank: int
        :type theR: float
        :type theG: float
        :type theB: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_BoundColor(self, *args)


    def AddBound(self, *args):
        """
        AddBound(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theEdgeNumber) -> Standard_Integer
        AddBound(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theEdgeNumber, Quantity_Color theBColor) -> Standard_Integer
        AddBound(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theEdgeNumber, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB) -> Standard_Integer

        Adds a bound of length theEdgeNumber and bound color coordinates in the bound array.
        Warning: <theR,theG,theB> are ignored when the hasBColors constructor parameter is FALSE
        @return the actual bounds number

        :type theEdgeNumber: int
        :type theR: float
        :type theG: float
        :type theB: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_AddBound(self, *args)


    def SetBoundColor(self, *args):
        """
        SetBoundColor(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theIndex, Quantity_Color theColor)
        SetBoundColor(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_Integer const theIndex, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB)

        Change the bound color of rank theIndex in the array.

        :type theIndex: int
        :type theR: float
        :type theG: float
        :type theB: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_SetBoundColor(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_ArrayOfQuadrangles self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_ArrayOfQuadrangles self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_ArrayOfQuadrangles self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_ArrayOfQuadrangles self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_ArrayOfQuadrangles self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_ArrayOfQuadrangles self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_ArrayOfQuadrangles self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_ArrayOfQuadrangles self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_DecrementRefCounter(self, *args)

Handle_Graphic3d_ArrayOfQuadrangles_swigregister = _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_swigregister
Handle_Graphic3d_ArrayOfQuadrangles_swigregister(Handle_Graphic3d_ArrayOfQuadrangles)

def Handle_Graphic3d_ArrayOfQuadrangles_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_DownCast(thing)
Handle_Graphic3d_ArrayOfQuadrangles_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfQuadrangles_DownCast

class Handle_Graphic3d_ArrayOfPoints(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_ArrayOfPoints self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_ArrayOfPoints self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_ArrayOfPoints self, Graphic3d_ArrayOfPoints thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_ArrayOfPoints self, Handle_Graphic3d_ArrayOfPoints theHandle) -> Handle_Graphic3d_ArrayOfPoints
        assign(Handle_Graphic3d_ArrayOfPoints self, Graphic3d_ArrayOfPoints thePtr) -> Handle_Graphic3d_ArrayOfPoints
        assign(Handle_Graphic3d_ArrayOfPoints self, Handle_Graphic3d_ArrayOfPoints theHandle) -> Handle_Graphic3d_ArrayOfPoints

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_ArrayOfPoints self) -> Graphic3d_ArrayOfPoints

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_ArrayOfPoints self) -> Graphic3d_ArrayOfPoints

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_ArrayOfPoints self) -> Graphic3d_ArrayOfPoints

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_ArrayOfPoints___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_ArrayOfPoints(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ArrayOfPoints_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_ArrayOfPoints

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_ArrayOfPoints self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfPoints_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfPoints_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Attributes(self, *args):
        """
        Returns vertex attributes buffer (colors, normals, texture coordinates).

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Buffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfPoints_Attributes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Type(self, *args):
        """
        Type(Handle_Graphic3d_ArrayOfPoints self) -> Graphic3d_TypeOfPrimitiveArray

        Returns the type of this primitive

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfPrimitiveArray

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_Type(self, *args)


    def StringType(self, *args):
        """
        StringType(Handle_Graphic3d_ArrayOfPoints self) -> Standard_CString

        Returns the string type of this primitive

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_StringType(self, *args)


    def HasVertexNormals(self, *args):
        """
        HasVertexNormals(Handle_Graphic3d_ArrayOfPoints self) -> Standard_Boolean

        Returns TRUE when vertex normals array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_HasVertexNormals(self, *args)


    def HasVertexColors(self, *args):
        """
        HasVertexColors(Handle_Graphic3d_ArrayOfPoints self) -> Standard_Boolean

        Returns TRUE when vertex colors array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_HasVertexColors(self, *args)


    def HasVertexTexels(self, *args):
        """
        HasVertexTexels(Handle_Graphic3d_ArrayOfPoints self) -> Standard_Boolean

        Returns TRUE when vertex texels array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_HasVertexTexels(self, *args)


    def VertexNumber(self, *args):
        """
        VertexNumber(Handle_Graphic3d_ArrayOfPoints self) -> Standard_Integer

        Returns the number of defined vertex

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_VertexNumber(self, *args)


    def ItemNumber(self, *args):
        """
        ItemNumber(Handle_Graphic3d_ArrayOfPoints self) -> Standard_Integer

        Returns the number of total items according to the array type.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_ItemNumber(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_Graphic3d_ArrayOfPoints self) -> Standard_Boolean

        Returns TRUE only when the contains of this array is available.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_IsValid(self, *args)


    def AddVertex(self, *args):
        """
        AddVertex(Handle_Graphic3d_ArrayOfPoints self, gp_Pnt theVertex) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPoints self, NCollection_Vec3_Standard_ShortReal theVertex) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPoints self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPoints self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPoints self, gp_Pnt theVertex, Quantity_Color theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPoints self, gp_Pnt theVertex, Standard_Integer const theColor32) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPoints self, gp_Pnt theVertex, Graphic3d_Vec4ub const & theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPoints self, gp_Pnt theVertex, gp_Dir theNormal) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPoints self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPoints self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theNX, Standard_ShortReal const theNY, Standard_ShortReal const theNZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPoints self, gp_Pnt theVertex, gp_Dir theNormal, Quantity_Color theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPoints self, gp_Pnt theVertex, gp_Dir theNormal, Standard_Integer const theColor32) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPoints self, gp_Pnt theVertex, gp_Pnt2d theTexel) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPoints self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theTX, Standard_Real const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPoints self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theTX, Standard_ShortReal const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPoints self, gp_Pnt theVertex, gp_Dir theNormal, gp_Pnt2d theTexel) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPoints self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ, Standard_Real const theTX, Standard_Real const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPoints self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theNX, Standard_ShortReal const theNY, Standard_ShortReal const theNZ, Standard_ShortReal const theTX, Standard_ShortReal const theTY) -> Standard_Integer

        Adds a vertice,vertex normal and texture in the vertex array.
        Warning: Normal is ignored when the hasVNormals constructor parameter is FALSE
        and  Texel  is ignored when the hasVTexels  constructor parameter is FALSE.
        @return the actual vertex number

        :type theX: float
        :type theY: float
        :type theZ: float
        :type theNX: float
        :type theNY: float
        :type theNZ: float
        :type theTX: float
        :type theTY: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_AddVertex(self, *args)


    def SetVertice(self, *args):
        """
        SetVertice(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theIndex, gp_Pnt theVertex)
        SetVertice(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theIndex, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ)

        Change the vertice of rank theIndex in the array.

        :type theIndex: int
        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_SetVertice(self, *args)


    def SetVertexColor(self, *args):
        """
        SetVertexColor(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theIndex, Quantity_Color theColor)
        SetVertexColor(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theIndex, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB)
        SetVertexColor(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theIndex, Graphic3d_Vec4ub const & theColor)
        SetVertexColor(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theIndex, Standard_Integer const theColor32)

        Change the vertex color of rank theIndex> in the array.
        @code
        theColor32 = Alpha << 24 + Blue << 16 + Green << 8 + Red
        @endcode

        :type theIndex: int
        :type theColor32: int

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_SetVertexColor(self, *args)


    def SetVertexNormal(self, *args):
        """
        SetVertexNormal(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theIndex, gp_Dir theNormal)
        SetVertexNormal(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theIndex, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ)

        Change the vertex normal of rank theIndex in the array.

        :type theIndex: int
        :type theNX: float
        :type theNY: float
        :type theNZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_SetVertexNormal(self, *args)


    def SetVertexTexel(self, *args):
        """
        SetVertexTexel(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theIndex, gp_Pnt2d theTexel)
        SetVertexTexel(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theIndex, Standard_Real const theTX, Standard_Real const theTY)

        Change the vertex texel of rank theIndex in the array.

        :type theIndex: int
        :type theTX: float
        :type theTY: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_SetVertexTexel(self, *args)


    def Vertice(self, *args):
        """
        Vertice(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theRank) -> gp_Pnt
        Vertice(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theRank)

        Returns the vertice coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_Vertice(self, *args)


    def VertexColor(self, *args):
        """
        VertexColor(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theRank) -> Quantity_Color
        VertexColor(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theIndex, Graphic3d_Vec4ub & theColor)
        VertexColor(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theRank)
        VertexColor(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theRank)

        Returns the vertex color values at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theColor: int

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_VertexColor(self, *args)


    def VertexNormal(self, *args):
        """
        VertexNormal(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theRank) -> gp_Dir
        VertexNormal(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theRank)

        Returns the vertex normal coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theNX: float
        :type theNY: float
        :type theNZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_VertexNormal(self, *args)


    def VertexTexel(self, *args):
        """
        VertexTexel(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theRank) -> gp_Pnt2d
        VertexTexel(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theRank)

        Returns the vertex texture coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theTX: float
        :type theTY: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_VertexTexel(self, *args)


    def Indices(self, *args):
        """
        Returns optional index buffer.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_IndexBuffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfPoints_Indices(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def EdgeNumber(self, *args):
        """
        EdgeNumber(Handle_Graphic3d_ArrayOfPoints self) -> Standard_Integer

        Returns the number of defined edges

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_EdgeNumber(self, *args)


    def Edge(self, *args):
        """
        Edge(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theRank) -> Standard_Integer

        Returns the vertex index at rank theRank in the range [1,EdgeNumber()]

        :type theRank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_Edge(self, *args)


    def AddEdge(self, *args):
        """
        AddEdge(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theVertexIndex) -> Standard_Integer

        Adds an edge in the range [1,VertexNumber()] in the array.
        @return the actual edges number

        :type theVertexIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_AddEdge(self, *args)


    def Bounds(self, *args):
        """
        Returns optional bounds buffer.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_BoundBuffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfPoints_Bounds(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasBoundColors(self, *args):
        """
        HasBoundColors(Handle_Graphic3d_ArrayOfPoints self) -> Standard_Boolean

        Returns TRUE when bound colors array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_HasBoundColors(self, *args)


    def BoundNumber(self, *args):
        """
        BoundNumber(Handle_Graphic3d_ArrayOfPoints self) -> Standard_Integer

        Returns the number of defined bounds

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_BoundNumber(self, *args)


    def Bound(self, *args):
        """
        Bound(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theRank) -> Standard_Integer

        Returns the edge number at rank theRank.

        :type theRank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_Bound(self, *args)


    def BoundColor(self, *args):
        """
        BoundColor(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theRank) -> Quantity_Color
        BoundColor(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theRank)

        Returns the bound color values at rank theRank from the bound table if defined.

        :type theRank: int
        :type theR: float
        :type theG: float
        :type theB: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_BoundColor(self, *args)


    def AddBound(self, *args):
        """
        AddBound(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theEdgeNumber) -> Standard_Integer
        AddBound(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theEdgeNumber, Quantity_Color theBColor) -> Standard_Integer
        AddBound(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theEdgeNumber, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB) -> Standard_Integer

        Adds a bound of length theEdgeNumber and bound color coordinates in the bound array.
        Warning: <theR,theG,theB> are ignored when the hasBColors constructor parameter is FALSE
        @return the actual bounds number

        :type theEdgeNumber: int
        :type theR: float
        :type theG: float
        :type theB: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_AddBound(self, *args)


    def SetBoundColor(self, *args):
        """
        SetBoundColor(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theIndex, Quantity_Color theColor)
        SetBoundColor(Handle_Graphic3d_ArrayOfPoints self, Standard_Integer const theIndex, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB)

        Change the bound color of rank theIndex in the array.

        :type theIndex: int
        :type theR: float
        :type theG: float
        :type theB: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_SetBoundColor(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_ArrayOfPoints self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_ArrayOfPoints self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_ArrayOfPoints self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_ArrayOfPoints self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_ArrayOfPoints self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_ArrayOfPoints self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_ArrayOfPoints self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_ArrayOfPoints self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_ArrayOfPoints self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_DecrementRefCounter(self, *args)

Handle_Graphic3d_ArrayOfPoints_swigregister = _Graphic3d.Handle_Graphic3d_ArrayOfPoints_swigregister
Handle_Graphic3d_ArrayOfPoints_swigregister(Handle_Graphic3d_ArrayOfPoints)

def Handle_Graphic3d_ArrayOfPoints_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_ArrayOfPoints_DownCast(thing)
Handle_Graphic3d_ArrayOfPoints_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfPoints_DownCast

class NCollection_Vec2_Standard_Real(object):
    """
    Defines the 2D-vector template.
    The main target for this class - to handle raw low-level arrays (from/to graphic driver etc.).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Length(*args):
        """
        Length() -> int

        Returns the number of components.

        :rtype: int

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real_Length(*args)

    Length = staticmethod(Length)

    def __init__(self, *args):
        """
        Defines the 2D-vector template.
        The main target for this class - to handle raw low-level arrays (from/to graphic driver etc.).
        """
        this = _Graphic3d.new_NCollection_Vec2_Standard_Real(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetValues(self, *args):
        """
        SetValues(NCollection_Vec2_Standard_Real self, double const theX, double const theY)

        Assign new values to the vector.

        :type theX: const Element_t
        :type theY: const Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real_SetValues(self, *args)


    def xy(self, *args):
        """
        xy(NCollection_Vec2_Standard_Real self) -> NCollection_Vec2_Standard_Real

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real_xy(self, *args)


    def yx(self, *args):
        """
        yx(NCollection_Vec2_Standard_Real self) -> NCollection_Vec2_Standard_Real

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real_yx(self, *args)


    def x(self, *args):
        """
        x(NCollection_Vec2_Standard_Real self) -> double
        x(NCollection_Vec2_Standard_Real self) -> double &

        Alias to 1st component as X coordinate in XY.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real_x(self, *args)


    def y(self, *args):
        """
        y(NCollection_Vec2_Standard_Real self) -> double
        y(NCollection_Vec2_Standard_Real self) -> double &

        Alias to 2nd component as Y coordinate in XY.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real_y(self, *args)


    def IsEqual(self, *args):
        """
        IsEqual(NCollection_Vec2_Standard_Real self, NCollection_Vec2_Standard_Real theOther) -> bool

        Check this vector with another vector for equality (without tolerance!).

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real_IsEqual(self, *args)


    def __eq__(self, *args):
        """
        __eq__(NCollection_Vec2_Standard_Real self, NCollection_Vec2_Standard_Real theOther) -> bool
        __eq__(NCollection_Vec2_Standard_Real self, NCollection_Vec2_Standard_Real theOther) -> bool

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real___eq__(self, *args)


    def __ne__(self, *args):
        """
        __ne__(NCollection_Vec2_Standard_Real self, NCollection_Vec2_Standard_Real theOther) -> bool
        __ne__(NCollection_Vec2_Standard_Real self, NCollection_Vec2_Standard_Real theOther) -> bool

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real___ne__(self, *args)


    def GetData(self, *args):
        """
        GetData(NCollection_Vec2_Standard_Real self) -> double const *

        Raw access to the data (for OpenGL exchange).

        :rtype: const Element_t *

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real_GetData(self, *args)


    def ChangeData(self, *args):
        """
        ChangeData(NCollection_Vec2_Standard_Real self) -> double *

        :rtype: Element_t *

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real_ChangeData(self, *args)


    def __iadd__(self, *args):
        """
        __iadd__(NCollection_Vec2_Standard_Real self, NCollection_Vec2_Standard_Real theAdd) -> NCollection_Vec2_Standard_Real

        Compute per-component summary.

        :type theAdd: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real___iadd__(self, *args)


    def __isub__(self, *args):
        """
        __isub__(NCollection_Vec2_Standard_Real self, NCollection_Vec2_Standard_Real theDec) -> NCollection_Vec2_Standard_Real

        Compute per-component subtraction.

        :type theDec: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real___isub__(self, *args)


    def __neg__(self, *args):
        """
        __neg__(NCollection_Vec2_Standard_Real self) -> NCollection_Vec2_Standard_Real

        Unary -.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real___neg__(self, *args)


    def Multiply(self, *args):
        """
        Multiply(NCollection_Vec2_Standard_Real self, double const theFactor)

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real_Multiply(self, *args)


    def Multiplied(self, *args):
        """
        Multiplied(NCollection_Vec2_Standard_Real self, double const theFactor) -> NCollection_Vec2_Standard_Real

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real_Multiplied(self, *args)


    def cwiseMin(self, *args):
        """
        cwiseMin(NCollection_Vec2_Standard_Real self, NCollection_Vec2_Standard_Real theVec) -> NCollection_Vec2_Standard_Real

        Compute component-wise minimum of two vectors.

        :type theVec: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real_cwiseMin(self, *args)


    def cwiseMax(self, *args):
        """
        cwiseMax(NCollection_Vec2_Standard_Real self, NCollection_Vec2_Standard_Real theVec) -> NCollection_Vec2_Standard_Real

        Compute component-wise maximum of two vectors.

        :type theVec: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real_cwiseMax(self, *args)


    def cwiseAbs(self, *args):
        """
        cwiseAbs(NCollection_Vec2_Standard_Real self) -> NCollection_Vec2_Standard_Real

        Compute component-wise modulus of the vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real_cwiseAbs(self, *args)


    def maxComp(self, *args):
        """
        maxComp(NCollection_Vec2_Standard_Real self) -> double

        Compute maximum component of the vector.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real_maxComp(self, *args)


    def minComp(self, *args):
        """
        minComp(NCollection_Vec2_Standard_Real self) -> double

        Compute minimum component of the vector.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real_minComp(self, *args)


    def __imul__(self, *args):
        """
        __imul__(NCollection_Vec2_Standard_Real self, NCollection_Vec2_Standard_Real theRight) -> NCollection_Vec2_Standard_Real
        __imul__(NCollection_Vec2_Standard_Real self, double const theFactor) -> NCollection_Vec2_Standard_Real

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real___imul__(self, *args)


    def __itruediv__(self, *args):
        return _Graphic3d.NCollection_Vec2_Standard_Real___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __mul__(self, *args):
        """
        __mul__(NCollection_Vec2_Standard_Real self, double const theFactor) -> NCollection_Vec2_Standard_Real

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real___mul__(self, *args)


    def __truediv__(self, *args):
        return _Graphic3d.NCollection_Vec2_Standard_Real___truediv__(self, *args)
    __div__ = __truediv__



    def Dot(self, *args):
        """
        Dot(NCollection_Vec2_Standard_Real self, NCollection_Vec2_Standard_Real theOther) -> double

        Computes the dot product.

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real_Dot(self, *args)


    def Modulus(self, *args):
        """
        Modulus(NCollection_Vec2_Standard_Real self) -> double

        Computes the vector modulus (magnitude, length).

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real_Modulus(self, *args)


    def SquareModulus(self, *args):
        """
        SquareModulus(NCollection_Vec2_Standard_Real self) -> double

        Computes the square of vector modulus (magnitude, length).
        This method may be used for performance tricks.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real_SquareModulus(self, *args)


    def DX(*args):
        """
        DX() -> NCollection_Vec2_Standard_Real

        Constuct DX unit vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real_DX(*args)

    DX = staticmethod(DX)

    def DY(*args):
        """
        DY() -> NCollection_Vec2_Standard_Real

        Constuct DY unit vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Real_DY(*args)

    DY = staticmethod(DY)
    __swig_destroy__ = _Graphic3d.delete_NCollection_Vec2_Standard_Real
NCollection_Vec2_Standard_Real_swigregister = _Graphic3d.NCollection_Vec2_Standard_Real_swigregister
NCollection_Vec2_Standard_Real_swigregister(NCollection_Vec2_Standard_Real)

def NCollection_Vec2_Standard_Real_Length(*args):
    """
    NCollection_Vec2_Standard_Real_Length() -> int

    Returns the number of components.

    :rtype: int

    """
    return _Graphic3d.NCollection_Vec2_Standard_Real_Length(*args)

def NCollection_Vec2_Standard_Real_DX(*args):
    """
    NCollection_Vec2_Standard_Real_DX() -> NCollection_Vec2_Standard_Real

    Constuct DX unit vector.

    :rtype: OCC.wrapper.NCollection.NCollection_Vec2

    """
    return _Graphic3d.NCollection_Vec2_Standard_Real_DX(*args)

def NCollection_Vec2_Standard_Real_DY(*args):
    """
    NCollection_Vec2_Standard_Real_DY() -> NCollection_Vec2_Standard_Real

    Constuct DY unit vector.

    :rtype: OCC.wrapper.NCollection.NCollection_Vec2

    """
    return _Graphic3d.NCollection_Vec2_Standard_Real_DY(*args)


try:
	Graphic3d_Vec2d = NCollection_Vec2_Standard_Real
except NameError:
	pass # does not exist, probably ignored

class NCollection_Vec2_Standard_Character(object):
    """
    Defines the 2D-vector template.
    The main target for this class - to handle raw low-level arrays (from/to graphic driver etc.).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Length(*args):
        """
        Length() -> int

        Returns the number of components.

        :rtype: int

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character_Length(*args)

    Length = staticmethod(Length)

    def __init__(self, *args):
        """
        Defines the 2D-vector template.
        The main target for this class - to handle raw low-level arrays (from/to graphic driver etc.).
        """
        this = _Graphic3d.new_NCollection_Vec2_Standard_Character(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetValues(self, *args):
        """
        SetValues(NCollection_Vec2_Standard_Character self, char const theX, char const theY)

        Assign new values to the vector.

        :type theX: const Element_t
        :type theY: const Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character_SetValues(self, *args)


    def xy(self, *args):
        """
        xy(NCollection_Vec2_Standard_Character self) -> NCollection_Vec2_Standard_Character

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character_xy(self, *args)


    def yx(self, *args):
        """
        yx(NCollection_Vec2_Standard_Character self) -> NCollection_Vec2_Standard_Character

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character_yx(self, *args)


    def x(self, *args):
        """
        x(NCollection_Vec2_Standard_Character self) -> char
        x(NCollection_Vec2_Standard_Character self) -> char &

        Alias to 1st component as X coordinate in XY.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character_x(self, *args)


    def y(self, *args):
        """
        y(NCollection_Vec2_Standard_Character self) -> char
        y(NCollection_Vec2_Standard_Character self) -> char &

        Alias to 2nd component as Y coordinate in XY.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character_y(self, *args)


    def IsEqual(self, *args):
        """
        IsEqual(NCollection_Vec2_Standard_Character self, NCollection_Vec2_Standard_Character theOther) -> bool

        Check this vector with another vector for equality (without tolerance!).

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character_IsEqual(self, *args)


    def __eq__(self, *args):
        """
        __eq__(NCollection_Vec2_Standard_Character self, NCollection_Vec2_Standard_Character theOther) -> bool
        __eq__(NCollection_Vec2_Standard_Character self, NCollection_Vec2_Standard_Character theOther) -> bool

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character___eq__(self, *args)


    def __ne__(self, *args):
        """
        __ne__(NCollection_Vec2_Standard_Character self, NCollection_Vec2_Standard_Character theOther) -> bool
        __ne__(NCollection_Vec2_Standard_Character self, NCollection_Vec2_Standard_Character theOther) -> bool

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character___ne__(self, *args)


    def GetData(self, *args):
        """
        GetData(NCollection_Vec2_Standard_Character self) -> char const *

        Raw access to the data (for OpenGL exchange).

        :rtype: const Element_t *

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character_GetData(self, *args)


    def ChangeData(self, *args):
        """
        ChangeData(NCollection_Vec2_Standard_Character self) -> char *

        :rtype: Element_t *

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character_ChangeData(self, *args)


    def __iadd__(self, *args):
        """
        __iadd__(NCollection_Vec2_Standard_Character self, NCollection_Vec2_Standard_Character theAdd) -> NCollection_Vec2_Standard_Character

        Compute per-component summary.

        :type theAdd: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character___iadd__(self, *args)


    def __isub__(self, *args):
        """
        __isub__(NCollection_Vec2_Standard_Character self, NCollection_Vec2_Standard_Character theDec) -> NCollection_Vec2_Standard_Character

        Compute per-component subtraction.

        :type theDec: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character___isub__(self, *args)


    def __neg__(self, *args):
        """
        __neg__(NCollection_Vec2_Standard_Character self) -> NCollection_Vec2_Standard_Character

        Unary -.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character___neg__(self, *args)


    def Multiply(self, *args):
        """
        Multiply(NCollection_Vec2_Standard_Character self, char const theFactor)

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character_Multiply(self, *args)


    def Multiplied(self, *args):
        """
        Multiplied(NCollection_Vec2_Standard_Character self, char const theFactor) -> NCollection_Vec2_Standard_Character

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character_Multiplied(self, *args)


    def cwiseMin(self, *args):
        """
        cwiseMin(NCollection_Vec2_Standard_Character self, NCollection_Vec2_Standard_Character theVec) -> NCollection_Vec2_Standard_Character

        Compute component-wise minimum of two vectors.

        :type theVec: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character_cwiseMin(self, *args)


    def cwiseMax(self, *args):
        """
        cwiseMax(NCollection_Vec2_Standard_Character self, NCollection_Vec2_Standard_Character theVec) -> NCollection_Vec2_Standard_Character

        Compute component-wise maximum of two vectors.

        :type theVec: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character_cwiseMax(self, *args)


    def cwiseAbs(self, *args):
        """
        cwiseAbs(NCollection_Vec2_Standard_Character self) -> NCollection_Vec2_Standard_Character

        Compute component-wise modulus of the vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character_cwiseAbs(self, *args)


    def maxComp(self, *args):
        """
        maxComp(NCollection_Vec2_Standard_Character self) -> char

        Compute maximum component of the vector.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character_maxComp(self, *args)


    def minComp(self, *args):
        """
        minComp(NCollection_Vec2_Standard_Character self) -> char

        Compute minimum component of the vector.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character_minComp(self, *args)


    def __imul__(self, *args):
        """
        __imul__(NCollection_Vec2_Standard_Character self, NCollection_Vec2_Standard_Character theRight) -> NCollection_Vec2_Standard_Character
        __imul__(NCollection_Vec2_Standard_Character self, char const theFactor) -> NCollection_Vec2_Standard_Character

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character___imul__(self, *args)


    def __itruediv__(self, *args):
        return _Graphic3d.NCollection_Vec2_Standard_Character___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __mul__(self, *args):
        """
        __mul__(NCollection_Vec2_Standard_Character self, char const theFactor) -> NCollection_Vec2_Standard_Character

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character___mul__(self, *args)


    def __truediv__(self, *args):
        return _Graphic3d.NCollection_Vec2_Standard_Character___truediv__(self, *args)
    __div__ = __truediv__



    def Dot(self, *args):
        """
        Dot(NCollection_Vec2_Standard_Character self, NCollection_Vec2_Standard_Character theOther) -> char

        Computes the dot product.

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character_Dot(self, *args)


    def Modulus(self, *args):
        """
        Modulus(NCollection_Vec2_Standard_Character self) -> char

        Computes the vector modulus (magnitude, length).

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character_Modulus(self, *args)


    def SquareModulus(self, *args):
        """
        SquareModulus(NCollection_Vec2_Standard_Character self) -> char

        Computes the square of vector modulus (magnitude, length).
        This method may be used for performance tricks.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character_SquareModulus(self, *args)


    def DX(*args):
        """
        DX() -> NCollection_Vec2_Standard_Character

        Constuct DX unit vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character_DX(*args)

    DX = staticmethod(DX)

    def DY(*args):
        """
        DY() -> NCollection_Vec2_Standard_Character

        Constuct DY unit vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Character_DY(*args)

    DY = staticmethod(DY)
    __swig_destroy__ = _Graphic3d.delete_NCollection_Vec2_Standard_Character
NCollection_Vec2_Standard_Character_swigregister = _Graphic3d.NCollection_Vec2_Standard_Character_swigregister
NCollection_Vec2_Standard_Character_swigregister(NCollection_Vec2_Standard_Character)

def NCollection_Vec2_Standard_Character_Length(*args):
    """
    NCollection_Vec2_Standard_Character_Length() -> int

    Returns the number of components.

    :rtype: int

    """
    return _Graphic3d.NCollection_Vec2_Standard_Character_Length(*args)

def NCollection_Vec2_Standard_Character_DX(*args):
    """
    NCollection_Vec2_Standard_Character_DX() -> NCollection_Vec2_Standard_Character

    Constuct DX unit vector.

    :rtype: OCC.wrapper.NCollection.NCollection_Vec2

    """
    return _Graphic3d.NCollection_Vec2_Standard_Character_DX(*args)

def NCollection_Vec2_Standard_Character_DY(*args):
    """
    NCollection_Vec2_Standard_Character_DY() -> NCollection_Vec2_Standard_Character

    Constuct DY unit vector.

    :rtype: OCC.wrapper.NCollection.NCollection_Vec2

    """
    return _Graphic3d.NCollection_Vec2_Standard_Character_DY(*args)


try:
	Graphic3d_Vec2b = NCollection_Vec2_Standard_Character
except NameError:
	pass # does not exist, probably ignored

class Graphic3d_GraduatedTrihedron(object):
    """
    Defines the class of a graduated trihedron.
    It contains main style parameters for implementation of graduated trihedron
    @sa OpenGl_GraduatedTrihedron
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Graphic3d_GraduatedTrihedron self, TCollection_AsciiString theNamesFont, Font_FontAspect const & theNamesStyle=Font_FA_Bold, Standard_Integer const theNamesSize=12, TCollection_AsciiString theValuesFont, Font_FontAspect const & theValuesStyle=Font_FA_Regular, Standard_Integer const theValuesSize=12, Standard_ShortReal const theArrowsLength=30.0, Quantity_Color theGridColor=Quantity_NOC_WHITE, Standard_Boolean const theToDrawGrid, Standard_Boolean const theToDrawAxes) -> Graphic3d_GraduatedTrihedron

        Default constructor
        Constructs the default graduated trihedron with grid, X, Y, Z axes, and tickmarks

        :type theNamesFont: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theNamesStyle: OCC.wrapper.Font.Font_FontAspect
        :type theNamesSize: int
        :type theValuesFont: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theValuesStyle: OCC.wrapper.Font.Font_FontAspect
        :type theValuesSize: int
        :type theArrowsLength: float
        :type theGridColor: OCC.wrapper.Quantity.Quantity_Color
        :type theToDrawGrid: bool
        :type theToDrawAxes: bool

        """
        this = _Graphic3d.new_Graphic3d_GraduatedTrihedron(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeXAxisAspect(self, *args):
        """
        ChangeXAxisAspect(Graphic3d_GraduatedTrihedron self) -> Graphic3d_AxisAspect

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_AxisAspect

        """
        return _Graphic3d.Graphic3d_GraduatedTrihedron_ChangeXAxisAspect(self, *args)


    def ChangeYAxisAspect(self, *args):
        """
        ChangeYAxisAspect(Graphic3d_GraduatedTrihedron self) -> Graphic3d_AxisAspect

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_AxisAspect

        """
        return _Graphic3d.Graphic3d_GraduatedTrihedron_ChangeYAxisAspect(self, *args)


    def ChangeZAxisAspect(self, *args):
        """
        ChangeZAxisAspect(Graphic3d_GraduatedTrihedron self) -> Graphic3d_AxisAspect

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_AxisAspect

        """
        return _Graphic3d.Graphic3d_GraduatedTrihedron_ChangeZAxisAspect(self, *args)


    def ChangeAxisAspect(self, *args):
        """
        ChangeAxisAspect(Graphic3d_GraduatedTrihedron self, Standard_Integer const theIndex) -> Graphic3d_AxisAspect

        :type theIndex: int
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_AxisAspect

        """
        return _Graphic3d.Graphic3d_GraduatedTrihedron_ChangeAxisAspect(self, *args)


    def XAxisAspect(self, *args):
        """
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_AxisAspect

        """
        res = _Graphic3d.Graphic3d_GraduatedTrihedron_XAxisAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def YAxisAspect(self, *args):
        """
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_AxisAspect

        """
        res = _Graphic3d.Graphic3d_GraduatedTrihedron_YAxisAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ZAxisAspect(self, *args):
        """
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_AxisAspect

        """
        res = _Graphic3d.Graphic3d_GraduatedTrihedron_ZAxisAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def AxisAspect(self, *args):
        """
        :type theIndex: int
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_AxisAspect

        """
        res = _Graphic3d.Graphic3d_GraduatedTrihedron_AxisAspect(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ArrowsLength(self, *args):
        """
        ArrowsLength(Graphic3d_GraduatedTrihedron self) -> Standard_ShortReal

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_GraduatedTrihedron_ArrowsLength(self, *args)


    def SetArrowsLength(self, *args):
        """
        SetArrowsLength(Graphic3d_GraduatedTrihedron self, Standard_ShortReal const theValue)

        :type theValue: float

        """
        return _Graphic3d.Graphic3d_GraduatedTrihedron_SetArrowsLength(self, *args)


    def GridColor(self, *args):
        """
        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Graphic3d_GraduatedTrihedron_GridColor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetGridColor(self, *args):
        """
        SetGridColor(Graphic3d_GraduatedTrihedron self, Quantity_Color theColor)

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Graphic3d.Graphic3d_GraduatedTrihedron_SetGridColor(self, *args)


    def ToDrawGrid(self, *args):
        """
        ToDrawGrid(Graphic3d_GraduatedTrihedron self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_GraduatedTrihedron_ToDrawGrid(self, *args)


    def SetDrawGrid(self, *args):
        """
        SetDrawGrid(Graphic3d_GraduatedTrihedron self, Standard_Boolean const theToDraw)

        :type theToDraw: bool

        """
        return _Graphic3d.Graphic3d_GraduatedTrihedron_SetDrawGrid(self, *args)


    def ToDrawAxes(self, *args):
        """
        ToDrawAxes(Graphic3d_GraduatedTrihedron self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_GraduatedTrihedron_ToDrawAxes(self, *args)


    def SetDrawAxes(self, *args):
        """
        SetDrawAxes(Graphic3d_GraduatedTrihedron self, Standard_Boolean const theToDraw)

        :type theToDraw: bool

        """
        return _Graphic3d.Graphic3d_GraduatedTrihedron_SetDrawAxes(self, *args)


    def NamesFont(self, *args):
        """
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Graphic3d_GraduatedTrihedron_NamesFont(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetNamesFont(self, *args):
        """
        SetNamesFont(Graphic3d_GraduatedTrihedron self, TCollection_AsciiString theFont)

        :type theFont: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Graphic3d_GraduatedTrihedron_SetNamesFont(self, *args)


    def NamesFontAspect(self, *args):
        """
        NamesFontAspect(Graphic3d_GraduatedTrihedron self) -> Font_FontAspect

        :rtype: OCC.wrapper.Font.Font_FontAspect

        """
        return _Graphic3d.Graphic3d_GraduatedTrihedron_NamesFontAspect(self, *args)


    def SetNamesFontAspect(self, *args):
        """
        SetNamesFontAspect(Graphic3d_GraduatedTrihedron self, Font_FontAspect theAspect)

        :type theAspect: OCC.wrapper.Font.Font_FontAspect

        """
        return _Graphic3d.Graphic3d_GraduatedTrihedron_SetNamesFontAspect(self, *args)


    def NamesSize(self, *args):
        """
        NamesSize(Graphic3d_GraduatedTrihedron self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_GraduatedTrihedron_NamesSize(self, *args)


    def SetNamesSize(self, *args):
        """
        SetNamesSize(Graphic3d_GraduatedTrihedron self, Standard_Integer const theValue)

        :type theValue: int

        """
        return _Graphic3d.Graphic3d_GraduatedTrihedron_SetNamesSize(self, *args)


    def ValuesFont(self, *args):
        """
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Graphic3d_GraduatedTrihedron_ValuesFont(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValuesFont(self, *args):
        """
        SetValuesFont(Graphic3d_GraduatedTrihedron self, TCollection_AsciiString theFont)

        :type theFont: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Graphic3d_GraduatedTrihedron_SetValuesFont(self, *args)


    def ValuesFontAspect(self, *args):
        """
        ValuesFontAspect(Graphic3d_GraduatedTrihedron self) -> Font_FontAspect

        :rtype: OCC.wrapper.Font.Font_FontAspect

        """
        return _Graphic3d.Graphic3d_GraduatedTrihedron_ValuesFontAspect(self, *args)


    def SetValuesFontAspect(self, *args):
        """
        SetValuesFontAspect(Graphic3d_GraduatedTrihedron self, Font_FontAspect theAspect)

        :type theAspect: OCC.wrapper.Font.Font_FontAspect

        """
        return _Graphic3d.Graphic3d_GraduatedTrihedron_SetValuesFontAspect(self, *args)


    def ValuesSize(self, *args):
        """
        ValuesSize(Graphic3d_GraduatedTrihedron self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Graphic3d_GraduatedTrihedron_ValuesSize(self, *args)


    def SetValuesSize(self, *args):
        """
        SetValuesSize(Graphic3d_GraduatedTrihedron self, Standard_Integer const theValue)

        :type theValue: int

        """
        return _Graphic3d.Graphic3d_GraduatedTrihedron_SetValuesSize(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_GraduatedTrihedron
Graphic3d_GraduatedTrihedron_swigregister = _Graphic3d.Graphic3d_GraduatedTrihedron_swigregister
Graphic3d_GraduatedTrihedron_swigregister(Graphic3d_GraduatedTrihedron)

class Handle_Graphic3d_GroupDefinitionError(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_GroupDefinitionError self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_GroupDefinitionError_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_GroupDefinitionError self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_GroupDefinitionError_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_GroupDefinitionError self, Graphic3d_GroupDefinitionError thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_GroupDefinitionError_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_GroupDefinitionError self, Handle_Graphic3d_GroupDefinitionError theHandle) -> Handle_Graphic3d_GroupDefinitionError
        assign(Handle_Graphic3d_GroupDefinitionError self, Graphic3d_GroupDefinitionError thePtr) -> Handle_Graphic3d_GroupDefinitionError
        assign(Handle_Graphic3d_GroupDefinitionError self, Handle_Graphic3d_GroupDefinitionError theHandle) -> Handle_Graphic3d_GroupDefinitionError

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_GroupDefinitionError_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_GroupDefinitionError self) -> Graphic3d_GroupDefinitionError

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_GroupDefinitionError_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_GroupDefinitionError self) -> Graphic3d_GroupDefinitionError

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_GroupDefinitionError___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_GroupDefinitionError self) -> Graphic3d_GroupDefinitionError

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_GroupDefinitionError___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_GroupDefinitionError___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_GroupDefinitionError___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_GroupDefinitionError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_GroupDefinitionError_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_GroupDefinitionError

    def NewInstance(self, *args):
        """
        NewInstance(Handle_Graphic3d_GroupDefinitionError self, Standard_CString const theMessage) -> Handle_Graphic3d_GroupDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_GroupDefinitionError

        """
        return _Graphic3d.Handle_Graphic3d_GroupDefinitionError_NewInstance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_GroupDefinitionError self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_GroupDefinitionError_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_GroupDefinitionError_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_GroupDefinitionError_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Print(self, *args):
        """
        Print(Handle_Graphic3d_GroupDefinitionError self, Standard_OStream & s)

        Prints on the stream <s> the exception name followed by
        the error message.
        Level: Advanced
        Warning:
        The operator "OStream& operator<< (Standard_OStream&,
        Handle(Standard_Failure)&)"
        is implemented. (This operator uses the method Print)

        :type s: OCC.wrapper.Standard.Standard_OStream

        """
        return _Graphic3d.Handle_Graphic3d_GroupDefinitionError_Print(self, *args)


    def GetMessageString(self, *args):
        """
        GetMessageString(Handle_Graphic3d_GroupDefinitionError self) -> Standard_CString

        Returns error message

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Handle_Graphic3d_GroupDefinitionError_GetMessageString(self, *args)


    def SetMessageString(self, *args):
        """
        SetMessageString(Handle_Graphic3d_GroupDefinitionError self, Standard_CString const aMessage)

        Sets error message

        :type aMessage: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Handle_Graphic3d_GroupDefinitionError_SetMessageString(self, *args)


    def Reraise(self, *args):
        """
        Reraise(Handle_Graphic3d_GroupDefinitionError self)
        Reraise(Handle_Graphic3d_GroupDefinitionError self, Standard_CString const aMessage)
        Reraise(Handle_Graphic3d_GroupDefinitionError self, Standard_SStream const & aReason)

        Reraises a caught exception and changes its error message.

        :type aReason: OCC.wrapper.Standard.Standard_SStream

        """
        return _Graphic3d.Handle_Graphic3d_GroupDefinitionError_Reraise(self, *args)


    def Jump(self, *args):
        """
        Jump(Handle_Graphic3d_GroupDefinitionError self)

        Used to throw CASCADE exception from C signal handler.
        On platforms that do not allow throwing C++ exceptions
        from this handler (e.g. Linux), uses longjump to get to
        the current active signal handler, and only then is
        converted to C++ exception.


        """
        return _Graphic3d.Handle_Graphic3d_GroupDefinitionError_Jump(self, *args)


    def Caught(self, *args):
        """
        Caught(Handle_Graphic3d_GroupDefinitionError self) -> Handle_Standard_Failure

        Returns the last caught exception.
        Needed when exceptions are emulated by C longjumps,
        in other cases is also provided for compatibility.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Failure

        """
        return _Graphic3d.Handle_Graphic3d_GroupDefinitionError_Caught(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_GroupDefinitionError self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_GroupDefinitionError_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_GroupDefinitionError self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_GroupDefinitionError self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_GroupDefinitionError_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_GroupDefinitionError self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_GroupDefinitionError self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_GroupDefinitionError_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_GroupDefinitionError self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_GroupDefinitionError_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_GroupDefinitionError self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_GroupDefinitionError_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_GroupDefinitionError self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_GroupDefinitionError_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_GroupDefinitionError self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_GroupDefinitionError_DecrementRefCounter(self, *args)

Handle_Graphic3d_GroupDefinitionError_swigregister = _Graphic3d.Handle_Graphic3d_GroupDefinitionError_swigregister
Handle_Graphic3d_GroupDefinitionError_swigregister(Handle_Graphic3d_GroupDefinitionError)

def Handle_Graphic3d_GroupDefinitionError_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_GroupDefinitionError_DownCast(thing)
Handle_Graphic3d_GroupDefinitionError_DownCast = _Graphic3d.Handle_Graphic3d_GroupDefinitionError_DownCast

class NCollection_Vec3_Standard_ShortReal(object):
    """
    Generic 3-components vector.
    To be used as RGB color pixel or XYZ 3D-point.
    The main target for this class - to handle raw low-level arrays (from/to graphic driver etc.).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Length(*args):
        """
        Length() -> int

        Returns the number of components.

        :rtype: int

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_Length(*args)

    Length = staticmethod(Length)

    def __init__(self, *args):
        """
        Generic 3-components vector.
        To be used as RGB color pixel or XYZ 3D-point.
        The main target for this class - to handle raw low-level arrays (from/to graphic driver etc.).
        """
        this = _Graphic3d.new_NCollection_Vec3_Standard_ShortReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetValues(self, *args):
        """
        SetValues(NCollection_Vec3_Standard_ShortReal self, float const theX, float const theY, float const theZ)

        Assign new values to the vector.

        :type theX: const Element_t
        :type theY: const Element_t
        :type theZ: const Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_SetValues(self, *args)


    def yx(self, *args):
        """
        yx(NCollection_Vec3_Standard_ShortReal self) -> NCollection_Vec2_Standard_ShortReal

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_yx(self, *args)


    def xz(self, *args):
        """
        xz(NCollection_Vec3_Standard_ShortReal self) -> NCollection_Vec2_Standard_ShortReal

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_xz(self, *args)


    def zx(self, *args):
        """
        zx(NCollection_Vec3_Standard_ShortReal self) -> NCollection_Vec2_Standard_ShortReal

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_zx(self, *args)


    def zy(self, *args):
        """
        zy(NCollection_Vec3_Standard_ShortReal self) -> NCollection_Vec2_Standard_ShortReal

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_zy(self, *args)


    def xyz(self, *args):
        """
        xyz(NCollection_Vec3_Standard_ShortReal self) -> NCollection_Vec3_Standard_ShortReal

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_xyz(self, *args)


    def xzy(self, *args):
        """
        xzy(NCollection_Vec3_Standard_ShortReal self) -> NCollection_Vec3_Standard_ShortReal

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_xzy(self, *args)


    def yxz(self, *args):
        """
        yxz(NCollection_Vec3_Standard_ShortReal self) -> NCollection_Vec3_Standard_ShortReal

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_yxz(self, *args)


    def yzx(self, *args):
        """
        yzx(NCollection_Vec3_Standard_ShortReal self) -> NCollection_Vec3_Standard_ShortReal

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_yzx(self, *args)


    def zyx(self, *args):
        """
        zyx(NCollection_Vec3_Standard_ShortReal self) -> NCollection_Vec3_Standard_ShortReal

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_zyx(self, *args)


    def zxy(self, *args):
        """
        zxy(NCollection_Vec3_Standard_ShortReal self) -> NCollection_Vec3_Standard_ShortReal

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_zxy(self, *args)


    def x(self, *args):
        """
        x(NCollection_Vec3_Standard_ShortReal self) -> float
        x(NCollection_Vec3_Standard_ShortReal self) -> float &

        Alias to 1st component as X coordinate in XYZ.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_x(self, *args)


    def r(self, *args):
        """
        r(NCollection_Vec3_Standard_ShortReal self) -> float
        r(NCollection_Vec3_Standard_ShortReal self) -> float &

        Alias to 1st component as RED channel in RGB.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_r(self, *args)


    def y(self, *args):
        """
        y(NCollection_Vec3_Standard_ShortReal self) -> float
        y(NCollection_Vec3_Standard_ShortReal self) -> float &

        Alias to 2nd component as Y coordinate in XYZ.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_y(self, *args)


    def g(self, *args):
        """
        g(NCollection_Vec3_Standard_ShortReal self) -> float
        g(NCollection_Vec3_Standard_ShortReal self) -> float &

        Alias to 2nd component as GREEN channel in RGB.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_g(self, *args)


    def z(self, *args):
        """
        z(NCollection_Vec3_Standard_ShortReal self) -> float
        z(NCollection_Vec3_Standard_ShortReal self) -> float &

        Alias to 3rd component as Z coordinate in XYZ.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_z(self, *args)


    def b(self, *args):
        """
        b(NCollection_Vec3_Standard_ShortReal self) -> float
        b(NCollection_Vec3_Standard_ShortReal self) -> float &

        Alias to 3rd component as BLUE channel in RGB.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_b(self, *args)


    def xy(self, *args):
        """
        xy(NCollection_Vec3_Standard_ShortReal self) -> NCollection_Vec2_Standard_ShortReal
        xy(NCollection_Vec3_Standard_ShortReal self) -> NCollection_Vec2_Standard_ShortReal

        @return XY-components modifiable vector

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_xy(self, *args)


    def yz(self, *args):
        """
        yz(NCollection_Vec3_Standard_ShortReal self) -> NCollection_Vec2_Standard_ShortReal
        yz(NCollection_Vec3_Standard_ShortReal self) -> NCollection_Vec2_Standard_ShortReal

        @return YZ-components modifiable vector

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_yz(self, *args)


    def IsEqual(self, *args):
        """
        IsEqual(NCollection_Vec3_Standard_ShortReal self, NCollection_Vec3_Standard_ShortReal theOther) -> bool

        Check this vector with another vector for equality (without tolerance!).

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_IsEqual(self, *args)


    def __eq__(self, *args):
        """
        __eq__(NCollection_Vec3_Standard_ShortReal self, NCollection_Vec3_Standard_ShortReal theOther) -> bool
        __eq__(NCollection_Vec3_Standard_ShortReal self, NCollection_Vec3_Standard_ShortReal theOther) -> bool

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal___eq__(self, *args)


    def __ne__(self, *args):
        """
        __ne__(NCollection_Vec3_Standard_ShortReal self, NCollection_Vec3_Standard_ShortReal theOther) -> bool
        __ne__(NCollection_Vec3_Standard_ShortReal self, NCollection_Vec3_Standard_ShortReal theOther) -> bool

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal___ne__(self, *args)


    def GetData(self, *args):
        """
        GetData(NCollection_Vec3_Standard_ShortReal self) -> float const *

        Raw access to the data (for OpenGL exchange).

        :rtype: const Element_t *

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_GetData(self, *args)


    def ChangeData(self, *args):
        """
        ChangeData(NCollection_Vec3_Standard_ShortReal self) -> float *

        :rtype: Element_t *

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_ChangeData(self, *args)


    def __iadd__(self, *args):
        """
        __iadd__(NCollection_Vec3_Standard_ShortReal self, NCollection_Vec3_Standard_ShortReal theAdd) -> NCollection_Vec3_Standard_ShortReal

        Compute per-component summary.

        :type theAdd: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal___iadd__(self, *args)


    def __neg__(self, *args):
        """
        __neg__(NCollection_Vec3_Standard_ShortReal self) -> NCollection_Vec3_Standard_ShortReal

        Unary -.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal___neg__(self, *args)


    def __isub__(self, *args):
        """
        __isub__(NCollection_Vec3_Standard_ShortReal self, NCollection_Vec3_Standard_ShortReal theDec) -> NCollection_Vec3_Standard_ShortReal

        Compute per-component subtraction.

        :type theDec: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal___isub__(self, *args)


    def Multiply(self, *args):
        """
        Multiply(NCollection_Vec3_Standard_ShortReal self, float const theFactor)

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_Multiply(self, *args)


    def __imul__(self, *args):
        """
        __imul__(NCollection_Vec3_Standard_ShortReal self, NCollection_Vec3_Standard_ShortReal theRight) -> NCollection_Vec3_Standard_ShortReal
        __imul__(NCollection_Vec3_Standard_ShortReal self, float const theFactor) -> NCollection_Vec3_Standard_ShortReal

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal___imul__(self, *args)


    def __mul__(self, *args):
        """
        __mul__(NCollection_Vec3_Standard_ShortReal self, float const theFactor) -> NCollection_Vec3_Standard_ShortReal

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal___mul__(self, *args)


    def Multiplied(self, *args):
        """
        Multiplied(NCollection_Vec3_Standard_ShortReal self, float const theFactor) -> NCollection_Vec3_Standard_ShortReal

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_Multiplied(self, *args)


    def cwiseMin(self, *args):
        """
        cwiseMin(NCollection_Vec3_Standard_ShortReal self, NCollection_Vec3_Standard_ShortReal theVec) -> NCollection_Vec3_Standard_ShortReal

        Compute component-wise minimum of two vectors.

        :type theVec: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_cwiseMin(self, *args)


    def cwiseMax(self, *args):
        """
        cwiseMax(NCollection_Vec3_Standard_ShortReal self, NCollection_Vec3_Standard_ShortReal theVec) -> NCollection_Vec3_Standard_ShortReal

        Compute component-wise maximum of two vectors.

        :type theVec: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_cwiseMax(self, *args)


    def cwiseAbs(self, *args):
        """
        cwiseAbs(NCollection_Vec3_Standard_ShortReal self) -> NCollection_Vec3_Standard_ShortReal

        Compute component-wise modulus of the vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_cwiseAbs(self, *args)


    def maxComp(self, *args):
        """
        maxComp(NCollection_Vec3_Standard_ShortReal self) -> float

        Compute maximum component of the vector.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_maxComp(self, *args)


    def minComp(self, *args):
        """
        minComp(NCollection_Vec3_Standard_ShortReal self) -> float

        Compute minimum component of the vector.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_minComp(self, *args)


    def __itruediv__(self, *args):
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal___truediv__(self, *args)
    __div__ = __truediv__



    def Dot(self, *args):
        """
        Dot(NCollection_Vec3_Standard_ShortReal self, NCollection_Vec3_Standard_ShortReal theOther) -> float

        Computes the dot product.

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_Dot(self, *args)


    def Modulus(self, *args):
        """
        Modulus(NCollection_Vec3_Standard_ShortReal self) -> float

        Computes the vector modulus (magnitude, length).

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_Modulus(self, *args)


    def SquareModulus(self, *args):
        """
        SquareModulus(NCollection_Vec3_Standard_ShortReal self) -> float

        Computes the square of vector modulus (magnitude, length).
        This method may be used for performance tricks.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_SquareModulus(self, *args)


    def Normalize(self, *args):
        """
        Normalize(NCollection_Vec3_Standard_ShortReal self)

        Normalize the vector.


        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_Normalize(self, *args)


    def Normalized(self, *args):
        """
        Normalized(NCollection_Vec3_Standard_ShortReal self) -> NCollection_Vec3_Standard_ShortReal

        Normalize the vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_Normalized(self, *args)


    def Cross(*args):
        """
        Cross(NCollection_Vec3_Standard_ShortReal theVec1, NCollection_Vec3_Standard_ShortReal theVec2) -> NCollection_Vec3_Standard_ShortReal

        Computes the cross product.

        :type theVec1: OCC.wrapper.NCollection.NCollection_Vec3
        :type theVec2: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_Cross(*args)

    Cross = staticmethod(Cross)

    def GetLERP(*args):
        """
        GetLERP(NCollection_Vec3_Standard_ShortReal theFrom, NCollection_Vec3_Standard_ShortReal theTo, float const theT) -> NCollection_Vec3_Standard_ShortReal

        Compute linear interpolation between to vectors.
        @param theT - interpolation coefficient 0..1;
        @return interpolation result.

        :type theFrom: OCC.wrapper.NCollection.NCollection_Vec3
        :type theTo: OCC.wrapper.NCollection.NCollection_Vec3
        :type theT: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_GetLERP(*args)

    GetLERP = staticmethod(GetLERP)

    def DX(*args):
        """
        DX() -> NCollection_Vec3_Standard_ShortReal

        Constuct DX unit vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_DX(*args)

    DX = staticmethod(DX)

    def DY(*args):
        """
        DY() -> NCollection_Vec3_Standard_ShortReal

        Constuct DY unit vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_DY(*args)

    DY = staticmethod(DY)

    def DZ(*args):
        """
        DZ() -> NCollection_Vec3_Standard_ShortReal

        Constuct DZ unit vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_ShortReal_DZ(*args)

    DZ = staticmethod(DZ)
    __swig_destroy__ = _Graphic3d.delete_NCollection_Vec3_Standard_ShortReal
NCollection_Vec3_Standard_ShortReal_swigregister = _Graphic3d.NCollection_Vec3_Standard_ShortReal_swigregister
NCollection_Vec3_Standard_ShortReal_swigregister(NCollection_Vec3_Standard_ShortReal)

def NCollection_Vec3_Standard_ShortReal_Length(*args):
    """
    NCollection_Vec3_Standard_ShortReal_Length() -> int

    Returns the number of components.

    :rtype: int

    """
    return _Graphic3d.NCollection_Vec3_Standard_ShortReal_Length(*args)

def NCollection_Vec3_Standard_ShortReal_Cross(*args):
    """
    NCollection_Vec3_Standard_ShortReal_Cross(NCollection_Vec3_Standard_ShortReal theVec1, NCollection_Vec3_Standard_ShortReal theVec2) -> NCollection_Vec3_Standard_ShortReal

    Computes the cross product.

    :type theVec1: OCC.wrapper.NCollection.NCollection_Vec3
    :type theVec2: OCC.wrapper.NCollection.NCollection_Vec3
    :rtype: OCC.wrapper.NCollection.NCollection_Vec3

    """
    return _Graphic3d.NCollection_Vec3_Standard_ShortReal_Cross(*args)

def NCollection_Vec3_Standard_ShortReal_GetLERP(*args):
    """
    NCollection_Vec3_Standard_ShortReal_GetLERP(NCollection_Vec3_Standard_ShortReal theFrom, NCollection_Vec3_Standard_ShortReal theTo, float const theT) -> NCollection_Vec3_Standard_ShortReal

    Compute linear interpolation between to vectors.
    @param theT - interpolation coefficient 0..1;
    @return interpolation result.

    :type theFrom: OCC.wrapper.NCollection.NCollection_Vec3
    :type theTo: OCC.wrapper.NCollection.NCollection_Vec3
    :type theT: const Element_t
    :rtype: OCC.wrapper.NCollection.NCollection_Vec3

    """
    return _Graphic3d.NCollection_Vec3_Standard_ShortReal_GetLERP(*args)

def NCollection_Vec3_Standard_ShortReal_DX(*args):
    """
    NCollection_Vec3_Standard_ShortReal_DX() -> NCollection_Vec3_Standard_ShortReal

    Constuct DX unit vector.

    :rtype: OCC.wrapper.NCollection.NCollection_Vec3

    """
    return _Graphic3d.NCollection_Vec3_Standard_ShortReal_DX(*args)

def NCollection_Vec3_Standard_ShortReal_DY(*args):
    """
    NCollection_Vec3_Standard_ShortReal_DY() -> NCollection_Vec3_Standard_ShortReal

    Constuct DY unit vector.

    :rtype: OCC.wrapper.NCollection.NCollection_Vec3

    """
    return _Graphic3d.NCollection_Vec3_Standard_ShortReal_DY(*args)

def NCollection_Vec3_Standard_ShortReal_DZ(*args):
    """
    NCollection_Vec3_Standard_ShortReal_DZ() -> NCollection_Vec3_Standard_ShortReal

    Constuct DZ unit vector.

    :rtype: OCC.wrapper.NCollection.NCollection_Vec3

    """
    return _Graphic3d.NCollection_Vec3_Standard_ShortReal_DZ(*args)


try:
	Graphic3d_Vec3 = NCollection_Vec3_Standard_ShortReal
except NameError:
	pass # does not exist, probably ignored

class Handle_Graphic3d_CStructure(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_CStructure self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_CStructure_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_CStructure self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_CStructure_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_CStructure self, Graphic3d_CStructure thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_CStructure_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_CStructure self, Handle_Graphic3d_CStructure theHandle) -> Handle_Graphic3d_CStructure
        assign(Handle_Graphic3d_CStructure self, Graphic3d_CStructure thePtr) -> Handle_Graphic3d_CStructure
        assign(Handle_Graphic3d_CStructure self, Handle_Graphic3d_CStructure theHandle) -> Handle_Graphic3d_CStructure

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_CStructure_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_CStructure self) -> Graphic3d_CStructure

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_CStructure_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_CStructure self) -> Graphic3d_CStructure

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_CStructure___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_CStructure self) -> Graphic3d_CStructure

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_CStructure___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_CStructure___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_CStructure___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_CStructure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_CStructure_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_CStructure

    def GraphicDriver(self, *args):
        """
        @return graphic driver created this structure

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_GraphicDriver

        """
        res = _Graphic3d.Handle_Graphic3d_CStructure_GraphicDriver(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Groups(self, *args):
        """
        @return graphic groups

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_SequenceOfGroup

        """
        res = _Graphic3d.Handle_Graphic3d_CStructure_Groups(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Transformation(self, *args):
        """
        Return transformation.

        :rtype: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        res = _Graphic3d.Handle_Graphic3d_CStructure_Transformation(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTransformation(self, *args):
        """
        SetTransformation(Handle_Graphic3d_CStructure self, Handle_Geom_Transformation theTrsf)

        Assign transformation.

        :type theTrsf: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        return _Graphic3d.Handle_Graphic3d_CStructure_SetTransformation(self, *args)


    def TransformPersistence(self, *args):
        """
        Return transformation persistence.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TransformPers

        """
        res = _Graphic3d.Handle_Graphic3d_CStructure_TransformPersistence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTransformPersistence(self, *args):
        """
        SetTransformPersistence(Handle_Graphic3d_CStructure self, Handle_Graphic3d_TransformPers theTrsfPers)

        Set transformation persistence.

        :type theTrsfPers: OCC.wrapper.Graphic3d.Handle_Graphic3d_TransformPers

        """
        return _Graphic3d.Handle_Graphic3d_CStructure_SetTransformPersistence(self, *args)


    def ClipPlanes(self, *args):
        """
        @return associated clip planes

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane

        """
        res = _Graphic3d.Handle_Graphic3d_CStructure_ClipPlanes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetClipPlanes(self, *args):
        """
        SetClipPlanes(Handle_Graphic3d_CStructure self, Handle_Graphic3d_SequenceOfHClipPlane thePlanes)

        Pass clip planes to the associated graphic driver structure

        :type thePlanes: OCC.wrapper.Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane

        """
        return _Graphic3d.Handle_Graphic3d_CStructure_SetClipPlanes(self, *args)


    def BoundingBox(self, *args):
        """
        @return bounding box of this presentation

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_BndBox3d

        """
        res = _Graphic3d.Handle_Graphic3d_CStructure_BoundingBox(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeBoundingBox(self, *args):
        """
        ChangeBoundingBox(Handle_Graphic3d_CStructure self) -> BVH_Box_Standard_Real_

        @return bounding box of this presentation
        without transformation matrix applied

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_BndBox3d

        """
        return _Graphic3d.Handle_Graphic3d_CStructure_ChangeBoundingBox(self, *args)


    def IsVisible(self, *args):
        """
        IsVisible(Handle_Graphic3d_CStructure self) -> bool
        IsVisible(Handle_Graphic3d_CStructure self, Standard_Integer const theViewId) -> bool

        Return structure visibility considering both View Affinity and global visibility state.

        :type theViewId: int
        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_CStructure_IsVisible(self, *args)


    def SetZLayer(self, *args):
        """
        SetZLayer(Handle_Graphic3d_CStructure self, Graphic3d_ZLayerId const theLayerIndex)

        Set z layer ID to display the structure in specified layer

        :type theLayerIndex: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Handle_Graphic3d_CStructure_SetZLayer(self, *args)


    def ZLayer(self, *args):
        """
        ZLayer(Handle_Graphic3d_CStructure self) -> Graphic3d_ZLayerId

        Get z layer ID

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ZLayerId

        """
        return _Graphic3d.Handle_Graphic3d_CStructure_ZLayer(self, *args)


    def HighlightStyle(self, *args):
        """
        Returns valid handle to highlight style of the structure in case if
        highlight flag is set to true

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_PresentationAttributes

        """
        res = _Graphic3d.Handle_Graphic3d_CStructure_HighlightStyle(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def OnVisibilityChanged(self, *args):
        """
        OnVisibilityChanged(Handle_Graphic3d_CStructure self)

        Update structure visibility state


        """
        return _Graphic3d.Handle_Graphic3d_CStructure_OnVisibilityChanged(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_Graphic3d_CStructure self)

        Clear graphic data


        """
        return _Graphic3d.Handle_Graphic3d_CStructure_Clear(self, *args)


    def Connect(self, *args):
        """
        Connect(Handle_Graphic3d_CStructure self, Graphic3d_CStructure theStructure)

        Connect other structure to this one

        :type theStructure: OCC.wrapper.Graphic3d.Graphic3d_CStructure

        """
        return _Graphic3d.Handle_Graphic3d_CStructure_Connect(self, *args)


    def Disconnect(self, *args):
        """
        Disconnect(Handle_Graphic3d_CStructure self, Graphic3d_CStructure theStructure)

        Disconnect other structure to this one

        :type theStructure: OCC.wrapper.Graphic3d.Graphic3d_CStructure

        """
        return _Graphic3d.Handle_Graphic3d_CStructure_Disconnect(self, *args)


    def GraphicHighlight(self, *args):
        """
        GraphicHighlight(Handle_Graphic3d_CStructure self, Handle_Graphic3d_PresentationAttributes theStyle, Handle_Graphic3d_Structure theStruct)

        Highlights structure with the given style

        :type theStyle: OCC.wrapper.Graphic3d.Handle_Graphic3d_PresentationAttributes
        :type theStruct: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure

        """
        return _Graphic3d.Handle_Graphic3d_CStructure_GraphicHighlight(self, *args)


    def GraphicUnhighlight(self, *args):
        """
        GraphicUnhighlight(Handle_Graphic3d_CStructure self)

        Unhighlights the structure and invalidates pointer to structure's highlight
        style


        """
        return _Graphic3d.Handle_Graphic3d_CStructure_GraphicUnhighlight(self, *args)


    def ShadowLink(self, *args):
        """
        ShadowLink(Handle_Graphic3d_CStructure self, Handle_Graphic3d_StructureManager theManager) -> Handle_Graphic3d_CStructure

        Create shadow link to this structure

        :type theManager: OCC.wrapper.Graphic3d.Handle_Graphic3d_StructureManager
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_CStructure

        """
        return _Graphic3d.Handle_Graphic3d_CStructure_ShadowLink(self, *args)


    def NewGroup(self, *args):
        """
        NewGroup(Handle_Graphic3d_CStructure self, Handle_Graphic3d_Structure theStruct) -> Handle_Graphic3d_Group

        Create new group within this structure

        :type theStruct: OCC.wrapper.Graphic3d.Handle_Graphic3d_Structure
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Group

        """
        return _Graphic3d.Handle_Graphic3d_CStructure_NewGroup(self, *args)


    def RemoveGroup(self, *args):
        """
        RemoveGroup(Handle_Graphic3d_CStructure self, Handle_Graphic3d_Group theGroup)

        Remove group from this structure

        :type theGroup: OCC.wrapper.Graphic3d.Handle_Graphic3d_Group

        """
        return _Graphic3d.Handle_Graphic3d_CStructure_RemoveGroup(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_CStructure self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_CStructure_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_CStructure_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_CStructure_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_CStructure self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_CStructure_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_CStructure self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_CStructure self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_CStructure_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_CStructure self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_CStructure self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_CStructure_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_CStructure self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_CStructure_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_CStructure self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_CStructure_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_CStructure self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_CStructure_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_CStructure self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_CStructure_DecrementRefCounter(self, *args)

Handle_Graphic3d_CStructure_swigregister = _Graphic3d.Handle_Graphic3d_CStructure_swigregister
Handle_Graphic3d_CStructure_swigregister(Handle_Graphic3d_CStructure)

def Handle_Graphic3d_CStructure_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_CStructure_DownCast(thing)
Handle_Graphic3d_CStructure_DownCast = _Graphic3d.Handle_Graphic3d_CStructure_DownCast

class NCollection_Array1_Graphic3d_Attribute(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Graphic3d_Attribute self) -> NCollection_Array1< Graphic3d_Attribute >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _Graphic3d.NCollection_Array1_Graphic3d_Attribute_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Graphic3d_Attribute self) -> NCollection_Array1< Graphic3d_Attribute >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _Graphic3d.NCollection_Array1_Graphic3d_Attribute_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Graphic3d_Attribute self) -> NCollection_Array1< Graphic3d_Attribute >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _Graphic3d.NCollection_Array1_Graphic3d_Attribute_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Graphic3d_Attribute self) -> NCollection_Array1< Graphic3d_Attribute >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _Graphic3d.NCollection_Array1_Graphic3d_Attribute_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _Graphic3d.new_NCollection_Array1_Graphic3d_Attribute(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Graphic3d_Attribute self, Graphic3d_Attribute const & theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _Graphic3d.NCollection_Array1_Graphic3d_Attribute_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Graphic3d_Attribute self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.NCollection_Array1_Graphic3d_Attribute_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Graphic3d_Attribute self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.NCollection_Array1_Graphic3d_Attribute_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Graphic3d_Attribute self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.NCollection_Array1_Graphic3d_Attribute_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Graphic3d_Attribute self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.NCollection_Array1_Graphic3d_Attribute_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Graphic3d_Attribute self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.NCollection_Array1_Graphic3d_Attribute_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Graphic3d_Attribute self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.NCollection_Array1_Graphic3d_Attribute_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Graphic3d_Attribute self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.NCollection_Array1_Graphic3d_Attribute_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Graphic3d_Attribute self, NCollection_Array1_Graphic3d_Attribute theOther) -> NCollection_Array1_Graphic3d_Attribute

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _Graphic3d.NCollection_Array1_Graphic3d_Attribute_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Graphic3d_Attribute self, NCollection_Array1_Graphic3d_Attribute theOther) -> NCollection_Array1_Graphic3d_Attribute

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _Graphic3d.NCollection_Array1_Graphic3d_Attribute_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Graphic3d_Attribute self, NCollection_Array1_Graphic3d_Attribute theOther) -> NCollection_Array1_Graphic3d_Attribute
        assign(NCollection_Array1_Graphic3d_Attribute self, NCollection_Array1_Graphic3d_Attribute theOther) -> NCollection_Array1_Graphic3d_Attribute

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _Graphic3d.NCollection_Array1_Graphic3d_Attribute_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _Graphic3d.NCollection_Array1_Graphic3d_Attribute_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Graphic3d_Attribute self) -> Graphic3d_Attribute &

        @return first element

        :rtype: TheItemType &

        """
        return _Graphic3d.NCollection_Array1_Graphic3d_Attribute_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _Graphic3d.NCollection_Array1_Graphic3d_Attribute_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Graphic3d_Attribute self) -> Graphic3d_Attribute &

        @return last element

        :rtype: TheItemType &

        """
        return _Graphic3d.NCollection_Array1_Graphic3d_Attribute_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Graphic3d.NCollection_Array1_Graphic3d_Attribute_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Graphic3d_Attribute self, Standard_Integer const theIndex) -> Graphic3d_Attribute &

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _Graphic3d.NCollection_Array1_Graphic3d_Attribute_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Graphic3d.NCollection_Array1_Graphic3d_Attribute___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Graphic3d.NCollection_Array1_Graphic3d_Attribute_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Graphic3d_Attribute self, Standard_Integer const theIndex, Graphic3d_Attribute const & theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _Graphic3d.NCollection_Array1_Graphic3d_Attribute_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Graphic3d_Attribute self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _Graphic3d.NCollection_Array1_Graphic3d_Attribute_Resize(self, *args)

    __swig_destroy__ = _Graphic3d.delete_NCollection_Array1_Graphic3d_Attribute
NCollection_Array1_Graphic3d_Attribute_swigregister = _Graphic3d.NCollection_Array1_Graphic3d_Attribute_swigregister
NCollection_Array1_Graphic3d_Attribute_swigregister(NCollection_Array1_Graphic3d_Attribute)


try:
	Graphic3d_Array1OfAttribute = NCollection_Array1_Graphic3d_Attribute
except NameError:
	pass # does not exist, probably ignored

class Handle_Graphic3d_MaterialDefinitionError(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_MaterialDefinitionError self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_MaterialDefinitionError_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_MaterialDefinitionError self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_MaterialDefinitionError_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_MaterialDefinitionError self, Graphic3d_MaterialDefinitionError thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_MaterialDefinitionError_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_MaterialDefinitionError self, Handle_Graphic3d_MaterialDefinitionError theHandle) -> Handle_Graphic3d_MaterialDefinitionError
        assign(Handle_Graphic3d_MaterialDefinitionError self, Graphic3d_MaterialDefinitionError thePtr) -> Handle_Graphic3d_MaterialDefinitionError
        assign(Handle_Graphic3d_MaterialDefinitionError self, Handle_Graphic3d_MaterialDefinitionError theHandle) -> Handle_Graphic3d_MaterialDefinitionError

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_MaterialDefinitionError_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_MaterialDefinitionError self) -> Graphic3d_MaterialDefinitionError

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_MaterialDefinitionError_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_MaterialDefinitionError self) -> Graphic3d_MaterialDefinitionError

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_MaterialDefinitionError___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_MaterialDefinitionError self) -> Graphic3d_MaterialDefinitionError

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_MaterialDefinitionError___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_MaterialDefinitionError___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_MaterialDefinitionError___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_MaterialDefinitionError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_MaterialDefinitionError_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_MaterialDefinitionError

    def NewInstance(self, *args):
        """
        NewInstance(Handle_Graphic3d_MaterialDefinitionError self, Standard_CString const theMessage) -> Handle_Graphic3d_MaterialDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_MaterialDefinitionError

        """
        return _Graphic3d.Handle_Graphic3d_MaterialDefinitionError_NewInstance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_MaterialDefinitionError self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_MaterialDefinitionError_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_MaterialDefinitionError_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_MaterialDefinitionError_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Print(self, *args):
        """
        Print(Handle_Graphic3d_MaterialDefinitionError self, Standard_OStream & s)

        Prints on the stream <s> the exception name followed by
        the error message.
        Level: Advanced
        Warning:
        The operator "OStream& operator<< (Standard_OStream&,
        Handle(Standard_Failure)&)"
        is implemented. (This operator uses the method Print)

        :type s: OCC.wrapper.Standard.Standard_OStream

        """
        return _Graphic3d.Handle_Graphic3d_MaterialDefinitionError_Print(self, *args)


    def GetMessageString(self, *args):
        """
        GetMessageString(Handle_Graphic3d_MaterialDefinitionError self) -> Standard_CString

        Returns error message

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Handle_Graphic3d_MaterialDefinitionError_GetMessageString(self, *args)


    def SetMessageString(self, *args):
        """
        SetMessageString(Handle_Graphic3d_MaterialDefinitionError self, Standard_CString const aMessage)

        Sets error message

        :type aMessage: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Handle_Graphic3d_MaterialDefinitionError_SetMessageString(self, *args)


    def Reraise(self, *args):
        """
        Reraise(Handle_Graphic3d_MaterialDefinitionError self)
        Reraise(Handle_Graphic3d_MaterialDefinitionError self, Standard_CString const aMessage)
        Reraise(Handle_Graphic3d_MaterialDefinitionError self, Standard_SStream const & aReason)

        Reraises a caught exception and changes its error message.

        :type aReason: OCC.wrapper.Standard.Standard_SStream

        """
        return _Graphic3d.Handle_Graphic3d_MaterialDefinitionError_Reraise(self, *args)


    def Jump(self, *args):
        """
        Jump(Handle_Graphic3d_MaterialDefinitionError self)

        Used to throw CASCADE exception from C signal handler.
        On platforms that do not allow throwing C++ exceptions
        from this handler (e.g. Linux), uses longjump to get to
        the current active signal handler, and only then is
        converted to C++ exception.


        """
        return _Graphic3d.Handle_Graphic3d_MaterialDefinitionError_Jump(self, *args)


    def Caught(self, *args):
        """
        Caught(Handle_Graphic3d_MaterialDefinitionError self) -> Handle_Standard_Failure

        Returns the last caught exception.
        Needed when exceptions are emulated by C longjumps,
        in other cases is also provided for compatibility.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Failure

        """
        return _Graphic3d.Handle_Graphic3d_MaterialDefinitionError_Caught(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_MaterialDefinitionError self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_MaterialDefinitionError_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_MaterialDefinitionError self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_MaterialDefinitionError self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_MaterialDefinitionError_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_MaterialDefinitionError self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_MaterialDefinitionError self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_MaterialDefinitionError_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_MaterialDefinitionError self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_MaterialDefinitionError_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_MaterialDefinitionError self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_MaterialDefinitionError_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_MaterialDefinitionError self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_MaterialDefinitionError_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_MaterialDefinitionError self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_MaterialDefinitionError_DecrementRefCounter(self, *args)

Handle_Graphic3d_MaterialDefinitionError_swigregister = _Graphic3d.Handle_Graphic3d_MaterialDefinitionError_swigregister
Handle_Graphic3d_MaterialDefinitionError_swigregister(Handle_Graphic3d_MaterialDefinitionError)

def Handle_Graphic3d_MaterialDefinitionError_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_MaterialDefinitionError_DownCast(thing)
Handle_Graphic3d_MaterialDefinitionError_DownCast = _Graphic3d.Handle_Graphic3d_MaterialDefinitionError_DownCast

class Handle_Graphic3d_IndexBuffer(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_IndexBuffer self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_IndexBuffer self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_IndexBuffer self, Graphic3d_IndexBuffer thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_IndexBuffer self, Handle_Graphic3d_IndexBuffer theHandle) -> Handle_Graphic3d_IndexBuffer
        assign(Handle_Graphic3d_IndexBuffer self, Graphic3d_IndexBuffer thePtr) -> Handle_Graphic3d_IndexBuffer
        assign(Handle_Graphic3d_IndexBuffer self, Handle_Graphic3d_IndexBuffer theHandle) -> Handle_Graphic3d_IndexBuffer

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_IndexBuffer self) -> Graphic3d_IndexBuffer

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_IndexBuffer self) -> Graphic3d_IndexBuffer

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_IndexBuffer self) -> Graphic3d_IndexBuffer

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_IndexBuffer___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_IndexBuffer___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_IndexBuffer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_IndexBuffer_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_IndexBuffer

    def InitInt32(self, *args):
        """
        InitInt32(Handle_Graphic3d_IndexBuffer self, Standard_Integer const theNbElems) -> bool

        Allocates new empty index array

        :type theNbElems: int
        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_InitInt32(self, *args)


    def Index(self, *args):
        """
        Index(Handle_Graphic3d_IndexBuffer self, Standard_Integer const theIndex) -> Standard_Integer

        Access index at specified position

        :type theIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_Index(self, *args)


    def SetIndex(self, *args):
        """
        SetIndex(Handle_Graphic3d_IndexBuffer self, Standard_Integer const theIndex, Standard_Integer const theValue)

        Change index at specified position

        :type theIndex: int
        :type theValue: int

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_SetIndex(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_IndexBuffer self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_IndexBuffer_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_IndexBuffer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, theNbElems):
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_Init(self, theNbElems)

    def AttributesArray(self, *args):
        """
        AttributesArray(Handle_Graphic3d_IndexBuffer self) -> Graphic3d_Attribute const *

        @return array of attributes definitions

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Attribute

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_AttributesArray(self, *args)


    def Attribute(self, *args):
        """
        @return attribute definition

        :type theAttribIndex: int
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Attribute

        """
        res = _Graphic3d.Handle_Graphic3d_IndexBuffer_Attribute(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeAttribute(self, *args):
        """
        ChangeAttribute(Handle_Graphic3d_IndexBuffer self, Standard_Integer const theAttribIndex) -> Graphic3d_Attribute &

        @return attribute definition

        :type theAttribIndex: int
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Attribute

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_ChangeAttribute(self, *args)


    def AttributeOffset(self, *args):
        """
        AttributeOffset(Handle_Graphic3d_IndexBuffer self, Standard_Integer const theAttribIndex) -> Standard_Integer

        @return data offset to specified attribute

        :type theAttribIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_AttributeOffset(self, *args)


    def Data(self, *args):
        """
        Data(Handle_Graphic3d_IndexBuffer self, Standard_Integer const theAttribIndex) -> Standard_Byte const
        Data(Handle_Graphic3d_IndexBuffer self) -> Standard_Byte const *

        @return buffer data

        :rtype: OCC.wrapper.Standard.Standard_Byte

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_Data(self, *args)


    def ChangeData(self, *args):
        """
        ChangeData(Handle_Graphic3d_IndexBuffer self, Standard_Integer const theAttribIndex) -> Standard_Byte
        ChangeData(Handle_Graphic3d_IndexBuffer self) -> Standard_Byte *

        @return buffer data

        :rtype: OCC.wrapper.Standard.Standard_Byte

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_ChangeData(self, *args)


    def value(self, *args):
        """
        value(Handle_Graphic3d_IndexBuffer self, Standard_Integer const theElem) -> Standard_Byte const *

        Access specified element.

        :type theElem: int
        :rtype: OCC.wrapper.Standard.Standard_Byte

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_value(self, *args)


    def changeValue(self, *args):
        """
        changeValue(Handle_Graphic3d_IndexBuffer self, Standard_Integer const theElem) -> Standard_Byte *

        Access specified element.

        :type theElem: int
        :rtype: OCC.wrapper.Standard.Standard_Byte

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_changeValue(self, *args)


    def release(self, *args):
        """
        release(Handle_Graphic3d_IndexBuffer self)

        Release buffer.


        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_release(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_Graphic3d_IndexBuffer self) -> bool

        @return true if buffer is not allocated

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_IsEmpty(self, *args)


    def Size(self, *args):
        """
        Size(Handle_Graphic3d_IndexBuffer self) -> Standard_Size

        Return buffer length in bytes.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_Size(self, *args)


    def Allocator(self, *args):
        """
        @return buffer allocator

        :rtype: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        res = _Graphic3d.Handle_Graphic3d_IndexBuffer_Allocator(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAllocator(self, *args):
        """
        SetAllocator(Handle_Graphic3d_IndexBuffer self, Handle_NCollection_BaseAllocator theAlloc)

        Assign new buffer allocator with de-allocation of buffer.

        :type theAlloc: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_SetAllocator(self, *args)


    def Allocate(self, *args):
        """
        Allocate(Handle_Graphic3d_IndexBuffer self, Standard_Size const theSize) -> bool

        Allocate the buffer.
        @param theSize buffer length in bytes

        :type theSize: int
        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_Allocate(self, *args)


    def Free(self, *args):
        """
        Free(Handle_Graphic3d_IndexBuffer self)

        De-allocate buffer.


        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_Free(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_IndexBuffer self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_IndexBuffer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_IndexBuffer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_IndexBuffer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_IndexBuffer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_IndexBuffer self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_IndexBuffer self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_IndexBuffer self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_IndexBuffer self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_IndexBuffer_DecrementRefCounter(self, *args)

Handle_Graphic3d_IndexBuffer_swigregister = _Graphic3d.Handle_Graphic3d_IndexBuffer_swigregister
Handle_Graphic3d_IndexBuffer_swigregister(Handle_Graphic3d_IndexBuffer)

def Handle_Graphic3d_IndexBuffer_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_IndexBuffer_DownCast(thing)
Handle_Graphic3d_IndexBuffer_DownCast = _Graphic3d.Handle_Graphic3d_IndexBuffer_DownCast

class Handle_Graphic3d_TextureSet(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_TextureSet self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_TextureSet_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_TextureSet self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_TextureSet_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_TextureSet self, Graphic3d_TextureSet thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_TextureSet_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_TextureSet self, Handle_Graphic3d_TextureSet theHandle) -> Handle_Graphic3d_TextureSet
        assign(Handle_Graphic3d_TextureSet self, Graphic3d_TextureSet thePtr) -> Handle_Graphic3d_TextureSet
        assign(Handle_Graphic3d_TextureSet self, Handle_Graphic3d_TextureSet theHandle) -> Handle_Graphic3d_TextureSet

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_TextureSet_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_TextureSet self) -> Graphic3d_TextureSet

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_TextureSet_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_TextureSet self) -> Graphic3d_TextureSet

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_TextureSet___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_TextureSet self) -> Graphic3d_TextureSet

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_TextureSet___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_TextureSet___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_TextureSet___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_TextureSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_TextureSet_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_TextureSet

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_TextureSet self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_TextureSet_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_TextureSet_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_TextureSet_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_Graphic3d_TextureSet self) -> Standard_Boolean

        Return TRUE if texture array is empty.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_TextureSet_IsEmpty(self, *args)


    def Size(self, *args):
        """
        Size(Handle_Graphic3d_TextureSet self) -> Standard_Integer

        Return number of textures.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_TextureSet_Size(self, *args)


    def Lower(self, *args):
        """
        Lower(Handle_Graphic3d_TextureSet self) -> Standard_Integer

        Return the lower index in texture set.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_TextureSet_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(Handle_Graphic3d_TextureSet self) -> Standard_Integer

        Return the upper index in texture set.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_TextureSet_Upper(self, *args)


    def First(self, *args):
        """
        Return the first texture.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureMap

        """
        res = _Graphic3d.Handle_Graphic3d_TextureSet_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetFirst(self, *args):
        """
        SetFirst(Handle_Graphic3d_TextureSet self, Handle_Graphic3d_TextureMap theTexture)

        Return the first texture.

        :type theTexture: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureMap

        """
        return _Graphic3d.Handle_Graphic3d_TextureSet_SetFirst(self, *args)


    def Value(self, *args):
        """
        Return the texture at specified position within [0, Size()) range.

        :type theIndex: int
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureMap

        """
        res = _Graphic3d.Handle_Graphic3d_TextureSet_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(Handle_Graphic3d_TextureSet self, Standard_Integer theIndex, Handle_Graphic3d_TextureMap theTexture)

        Return the texture at specified position within [0, Size()) range.

        :type theIndex: int
        :type theTexture: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureMap

        """
        return _Graphic3d.Handle_Graphic3d_TextureSet_SetValue(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_TextureSet self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_TextureSet_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_TextureSet self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_TextureSet self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_TextureSet_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_TextureSet self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_TextureSet self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_TextureSet_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_TextureSet self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_TextureSet_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_TextureSet self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_TextureSet_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_TextureSet self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_TextureSet_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_TextureSet self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_TextureSet_DecrementRefCounter(self, *args)

Handle_Graphic3d_TextureSet_swigregister = _Graphic3d.Handle_Graphic3d_TextureSet_swigregister
Handle_Graphic3d_TextureSet_swigregister(Handle_Graphic3d_TextureSet)

def Handle_Graphic3d_TextureSet_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_TextureSet_DownCast(thing)
Handle_Graphic3d_TextureSet_DownCast = _Graphic3d.Handle_Graphic3d_TextureSet_DownCast

class Handle_Graphic3d_HatchStyle(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_HatchStyle self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_HatchStyle_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_HatchStyle self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_HatchStyle_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_HatchStyle self, Graphic3d_HatchStyle thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_HatchStyle_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_HatchStyle self, Handle_Graphic3d_HatchStyle theHandle) -> Handle_Graphic3d_HatchStyle
        assign(Handle_Graphic3d_HatchStyle self, Graphic3d_HatchStyle thePtr) -> Handle_Graphic3d_HatchStyle
        assign(Handle_Graphic3d_HatchStyle self, Handle_Graphic3d_HatchStyle theHandle) -> Handle_Graphic3d_HatchStyle

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_HatchStyle_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_HatchStyle self) -> Graphic3d_HatchStyle

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_HatchStyle_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_HatchStyle self) -> Graphic3d_HatchStyle

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_HatchStyle___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_HatchStyle self) -> Graphic3d_HatchStyle

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_HatchStyle___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_HatchStyle___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_HatchStyle___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_HatchStyle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_HatchStyle_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_HatchStyle

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_HatchStyle self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_HatchStyle_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_HatchStyle_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_HatchStyle_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Pattern(self, *args):
        """
        Pattern(Handle_Graphic3d_HatchStyle self) -> Standard_Byte const *

        Returns the pattern of custom hatch style

        :rtype: OCC.wrapper.Standard.Standard_Byte

        """
        return _Graphic3d.Handle_Graphic3d_HatchStyle_Pattern(self, *args)


    def HatchType(self, *args):
        """
        HatchType(Handle_Graphic3d_HatchStyle self) -> Standard_Integer

        In case if predefined OCCT style is used, returns
        index in Aspect_HatchStyle enumeration. If the style
        is custom, returns unique index of the style

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_HatchStyle_HatchType(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_HatchStyle self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_HatchStyle_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_HatchStyle self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_HatchStyle self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_HatchStyle_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_HatchStyle self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_HatchStyle self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_HatchStyle_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_HatchStyle self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_HatchStyle_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_HatchStyle self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_HatchStyle_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_HatchStyle self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_HatchStyle_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_HatchStyle self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_HatchStyle_DecrementRefCounter(self, *args)

Handle_Graphic3d_HatchStyle_swigregister = _Graphic3d.Handle_Graphic3d_HatchStyle_swigregister
Handle_Graphic3d_HatchStyle_swigregister(Handle_Graphic3d_HatchStyle)

def Handle_Graphic3d_HatchStyle_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_HatchStyle_DownCast(thing)
Handle_Graphic3d_HatchStyle_DownCast = _Graphic3d.Handle_Graphic3d_HatchStyle_DownCast

class Handle_Graphic3d_Texture1D(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_Texture1D self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_Texture1D self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_Texture1D self, Graphic3d_Texture1D thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_Texture1D self, Handle_Graphic3d_Texture1D theHandle) -> Handle_Graphic3d_Texture1D
        assign(Handle_Graphic3d_Texture1D self, Graphic3d_Texture1D thePtr) -> Handle_Graphic3d_Texture1D
        assign(Handle_Graphic3d_Texture1D self, Handle_Graphic3d_Texture1D theHandle) -> Handle_Graphic3d_Texture1D

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_Texture1D self) -> Graphic3d_Texture1D

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_Texture1D self) -> Graphic3d_Texture1D

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_Texture1D___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_Texture1D self) -> Graphic3d_Texture1D

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_Texture1D___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_Texture1D___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_Texture1D___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_Texture1D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_Texture1D_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_Texture1D

    def Name(self, *args):
        """
        Name(Handle_Graphic3d_Texture1D self) -> Graphic3d_NameOfTexture1D

        Returns the name of the predefined textures or NOT_1D_UNKNOWN
        when the name is given as a filename.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_NameOfTexture1D

        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_Name(self, *args)


    def NumberOfTextures(self, *args):
        """
        NumberOfTextures(Handle_Graphic3d_Texture1D self) -> Standard_Integer

        Returns the number of predefined textures.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_NumberOfTextures(self, *args)


    def TextureName(self, *args):
        """
        TextureName(Handle_Graphic3d_Texture1D self, Standard_Integer const aRank) -> TCollection_AsciiString

        Returns the name of the predefined texture of rank <aRank>

        :type aRank: int
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_TextureName(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_Texture1D self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_Texture1D_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_Texture1D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def EnableSmooth(self, *args):
        """
        EnableSmooth(Handle_Graphic3d_Texture1D self)

        enable texture smoothing


        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_EnableSmooth(self, *args)


    def IsSmoothed(self, *args):
        """
        IsSmoothed(Handle_Graphic3d_Texture1D self) -> Standard_Boolean

        Returns TRUE if the texture is smoothed.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_IsSmoothed(self, *args)


    def DisableSmooth(self, *args):
        """
        DisableSmooth(Handle_Graphic3d_Texture1D self)

        disable texture smoothing


        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_DisableSmooth(self, *args)


    def EnableModulate(self, *args):
        """
        EnableModulate(Handle_Graphic3d_Texture1D self)

        enable texture modulate mode.
        the image is modulate with the shading of the surface.


        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_EnableModulate(self, *args)


    def DisableModulate(self, *args):
        """
        DisableModulate(Handle_Graphic3d_Texture1D self)

        disable texture modulate mode.
        the image is directly decal on the surface.


        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_DisableModulate(self, *args)


    def IsModulate(self, *args):
        """
        IsModulate(Handle_Graphic3d_Texture1D self) -> Standard_Boolean

        Returns TRUE if the texture is modulate.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_IsModulate(self, *args)


    def EnableRepeat(self, *args):
        """
        EnableRepeat(Handle_Graphic3d_Texture1D self)

        use this methods if you want to enable
        texture repetition on your objects.


        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_EnableRepeat(self, *args)


    def DisableRepeat(self, *args):
        """
        DisableRepeat(Handle_Graphic3d_Texture1D self)

        use this methods if you want to disable
        texture repetition on your objects.


        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_DisableRepeat(self, *args)


    def IsRepeat(self, *args):
        """
        IsRepeat(Handle_Graphic3d_Texture1D self) -> Standard_Boolean

        Returns TRUE if the texture repeat is enable.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_IsRepeat(self, *args)


    def AnisoFilter(self, *args):
        """
        AnisoFilter(Handle_Graphic3d_Texture1D self) -> Graphic3d_LevelOfTextureAnisotropy

        @return level of anisontropy texture filter.
        Default value is Graphic3d_LOTA_OFF.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_LevelOfTextureAnisotropy

        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_AnisoFilter(self, *args)


    def SetAnisoFilter(self, *args):
        """
        SetAnisoFilter(Handle_Graphic3d_Texture1D self, Graphic3d_LevelOfTextureAnisotropy const theLevel)

        @param theLevel level of anisontropy texture filter.

        :type theLevel: OCC.wrapper.Graphic3d.Graphic3d_LevelOfTextureAnisotropy

        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_SetAnisoFilter(self, *args)


    def TexturesFolder(self, *args):
        """
        TexturesFolder(Handle_Graphic3d_Texture1D self) -> TCollection_AsciiString

        The path to textures determined from CSF_MDTVTexturesDirectory or CASROOT environment variables.
        @return the root folder with default textures.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_TexturesFolder(self, *args)


    def IsDone(self, *args):
        """
        IsDone(Handle_Graphic3d_Texture1D self) -> Standard_Boolean

        Checks if a texture class is valid or not.
        @return true if the construction of the class is correct

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_IsDone(self, *args)


    def Path(self, *args):
        """
        Returns the full path of the defined texture.
        It could be empty path if GetImage() is overridden to load image not from file.

        :rtype: OCC.wrapper.OSD.OSD_Path

        """
        res = _Graphic3d.Handle_Graphic3d_Texture1D_Path(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Type(self, *args):
        """
        Type(Handle_Graphic3d_Texture1D self) -> Graphic3d_TypeOfTexture

        @return the texture type.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfTexture

        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_Type(self, *args)


    def GetId(self, *args):
        """
        This ID will be used to manage resource in graphic driver.

        Default implementation generates unique ID within constructor;
        inheritors may re-initialize it within their constructor,
        but should never modify it afterwards.

        Multiple Graphic3d_TextureRoot instances with same ID
        will be treated as single texture with different parameters
        to optimize memory usage though this will be more natural
        to use same instance of Graphic3d_TextureRoot when possible.

        If this ID is set to empty string by inheritor,
        then independent graphical resource will be created
        for each instance of Graphic3d_AspectFillArea3d where texture will be used.

        @return texture identifier.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Handle_Graphic3d_Texture1D_GetId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Revision(self, *args):
        """
        Revision(Handle_Graphic3d_Texture1D self) -> Standard_Size

        Return image revision.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_Revision(self, *args)


    def UpdateRevision(self, *args):
        """
        UpdateRevision(Handle_Graphic3d_Texture1D self)

        Update image revision.
        Can be used for signaling changes in the texture source (e.g. file update, pixmap update)
        without re-creating texture source itself (since unique id should be never modified).


        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_UpdateRevision(self, *args)


    def GetImage(self, *args):
        """
        GetImage(Handle_Graphic3d_Texture1D self) -> Handle_Image_PixMap

        This method will be called by graphic driver each time when texture resource should be created.
        Default constructors allow defining the texture source as path to texture image or directly as pixmap.
        If the source is defined as path, then the image will be dynamically loaded when this method is called
        (and no copy will be preserved in this class instance).
        Inheritors may dynamically generate the image.
        Notice, image data should be in Bottom-Up order (see Image_PixMap::IsTopDown())!
        @return the image for texture.

        :rtype: OCC.wrapper.Image.Handle_Image_PixMap

        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_GetImage(self, *args)


    def GetParams(self, *args):
        """
        @return low-level texture parameters

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureParams

        """
        res = _Graphic3d.Handle_Graphic3d_Texture1D_GetParams(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_Texture1D self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_Texture1D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_Texture1D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_Texture1D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_Texture1D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_Texture1D self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_Texture1D self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_Texture1D self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_Texture1D self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Texture1D_DecrementRefCounter(self, *args)

Handle_Graphic3d_Texture1D_swigregister = _Graphic3d.Handle_Graphic3d_Texture1D_swigregister
Handle_Graphic3d_Texture1D_swigregister(Handle_Graphic3d_Texture1D)

def Handle_Graphic3d_Texture1D_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_Texture1D_DownCast(thing)
Handle_Graphic3d_Texture1D_DownCast = _Graphic3d.Handle_Graphic3d_Texture1D_DownCast

class Handle_Graphic3d_PriorityDefinitionError(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_PriorityDefinitionError self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_PriorityDefinitionError_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_PriorityDefinitionError self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_PriorityDefinitionError_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_PriorityDefinitionError self, Graphic3d_PriorityDefinitionError thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_PriorityDefinitionError_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_PriorityDefinitionError self, Handle_Graphic3d_PriorityDefinitionError theHandle) -> Handle_Graphic3d_PriorityDefinitionError
        assign(Handle_Graphic3d_PriorityDefinitionError self, Graphic3d_PriorityDefinitionError thePtr) -> Handle_Graphic3d_PriorityDefinitionError
        assign(Handle_Graphic3d_PriorityDefinitionError self, Handle_Graphic3d_PriorityDefinitionError theHandle) -> Handle_Graphic3d_PriorityDefinitionError

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_PriorityDefinitionError_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_PriorityDefinitionError self) -> Graphic3d_PriorityDefinitionError

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_PriorityDefinitionError_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_PriorityDefinitionError self) -> Graphic3d_PriorityDefinitionError

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_PriorityDefinitionError___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_PriorityDefinitionError self) -> Graphic3d_PriorityDefinitionError

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_PriorityDefinitionError___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_PriorityDefinitionError___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_PriorityDefinitionError___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_PriorityDefinitionError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_PriorityDefinitionError_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_PriorityDefinitionError

    def NewInstance(self, *args):
        """
        NewInstance(Handle_Graphic3d_PriorityDefinitionError self, Standard_CString const theMessage) -> Handle_Graphic3d_PriorityDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_PriorityDefinitionError

        """
        return _Graphic3d.Handle_Graphic3d_PriorityDefinitionError_NewInstance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_PriorityDefinitionError self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_PriorityDefinitionError_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_PriorityDefinitionError_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_PriorityDefinitionError_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Print(self, *args):
        """
        Print(Handle_Graphic3d_PriorityDefinitionError self, Standard_OStream & s)

        Prints on the stream <s> the exception name followed by
        the error message.
        Level: Advanced
        Warning:
        The operator "OStream& operator<< (Standard_OStream&,
        Handle(Standard_Failure)&)"
        is implemented. (This operator uses the method Print)

        :type s: OCC.wrapper.Standard.Standard_OStream

        """
        return _Graphic3d.Handle_Graphic3d_PriorityDefinitionError_Print(self, *args)


    def GetMessageString(self, *args):
        """
        GetMessageString(Handle_Graphic3d_PriorityDefinitionError self) -> Standard_CString

        Returns error message

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Handle_Graphic3d_PriorityDefinitionError_GetMessageString(self, *args)


    def SetMessageString(self, *args):
        """
        SetMessageString(Handle_Graphic3d_PriorityDefinitionError self, Standard_CString const aMessage)

        Sets error message

        :type aMessage: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Handle_Graphic3d_PriorityDefinitionError_SetMessageString(self, *args)


    def Reraise(self, *args):
        """
        Reraise(Handle_Graphic3d_PriorityDefinitionError self)
        Reraise(Handle_Graphic3d_PriorityDefinitionError self, Standard_CString const aMessage)
        Reraise(Handle_Graphic3d_PriorityDefinitionError self, Standard_SStream const & aReason)

        Reraises a caught exception and changes its error message.

        :type aReason: OCC.wrapper.Standard.Standard_SStream

        """
        return _Graphic3d.Handle_Graphic3d_PriorityDefinitionError_Reraise(self, *args)


    def Jump(self, *args):
        """
        Jump(Handle_Graphic3d_PriorityDefinitionError self)

        Used to throw CASCADE exception from C signal handler.
        On platforms that do not allow throwing C++ exceptions
        from this handler (e.g. Linux), uses longjump to get to
        the current active signal handler, and only then is
        converted to C++ exception.


        """
        return _Graphic3d.Handle_Graphic3d_PriorityDefinitionError_Jump(self, *args)


    def Caught(self, *args):
        """
        Caught(Handle_Graphic3d_PriorityDefinitionError self) -> Handle_Standard_Failure

        Returns the last caught exception.
        Needed when exceptions are emulated by C longjumps,
        in other cases is also provided for compatibility.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Failure

        """
        return _Graphic3d.Handle_Graphic3d_PriorityDefinitionError_Caught(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_PriorityDefinitionError self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_PriorityDefinitionError_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_PriorityDefinitionError self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_PriorityDefinitionError self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_PriorityDefinitionError_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_PriorityDefinitionError self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_PriorityDefinitionError self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_PriorityDefinitionError_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_PriorityDefinitionError self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_PriorityDefinitionError_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_PriorityDefinitionError self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_PriorityDefinitionError_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_PriorityDefinitionError self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_PriorityDefinitionError_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_PriorityDefinitionError self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_PriorityDefinitionError_DecrementRefCounter(self, *args)

Handle_Graphic3d_PriorityDefinitionError_swigregister = _Graphic3d.Handle_Graphic3d_PriorityDefinitionError_swigregister
Handle_Graphic3d_PriorityDefinitionError_swigregister(Handle_Graphic3d_PriorityDefinitionError)

def Handle_Graphic3d_PriorityDefinitionError_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_PriorityDefinitionError_DownCast(thing)
Handle_Graphic3d_PriorityDefinitionError_DownCast = _Graphic3d.Handle_Graphic3d_PriorityDefinitionError_DownCast

class Graphic3d_BSDF(object):
    """
    Describes material's BSDF (Bidirectional Scattering Distribution Function) used
    for physically-based rendering (in path tracing engine). BSDF is represented as
    weighted mixture of basic BRDFs/BTDFs (Bidirectional Reflectance (Transmittance)
    Distribution Functions).

    NOTE: OCCT uses two-layer material model. We have base diffuse, glossy, or transmissive
    layer, covered by one glossy/specular coat. In the current model, the layers themselves
    have no thickness; they can simply reflect light or transmits it to the layer under it.
    We use actual BRDF model only for direct reflection by the coat layer. For transmission
    through this layer, we approximate it as a flat specular surface.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def CreateDiffuse(*args):
        """
        CreateDiffuse(NCollection_Vec3_Standard_ShortReal theWeight) -> Graphic3d_BSDF

        Creates BSDF describing diffuse (Lambertian) surface.

        :type theWeight: OCC.wrapper.Graphic3d.Graphic3d_Vec3
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_BSDF

        """
        return _Graphic3d.Graphic3d_BSDF_CreateDiffuse(*args)

    CreateDiffuse = staticmethod(CreateDiffuse)

    def CreateMetallic(*args):
        """
        CreateMetallic(NCollection_Vec3_Standard_ShortReal theWeight, Graphic3d_Fresnel theFresnel, Standard_ShortReal const theRoughness) -> Graphic3d_BSDF

        Creates BSDF describing polished metallic-like surface.

        :type theWeight: OCC.wrapper.Graphic3d.Graphic3d_Vec3
        :type theFresnel: OCC.wrapper.Graphic3d.Graphic3d_Fresnel
        :type theRoughness: float
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_BSDF

        """
        return _Graphic3d.Graphic3d_BSDF_CreateMetallic(*args)

    CreateMetallic = staticmethod(CreateMetallic)

    def CreateTransparent(*args):
        """
        CreateTransparent(NCollection_Vec3_Standard_ShortReal theWeight, NCollection_Vec3_Standard_ShortReal theAbsorptionColor, Standard_ShortReal const theAbsorptionCoeff) -> Graphic3d_BSDF

        Creates BSDF describing transparent object.
        Transparent BSDF models simple transparency without
        refraction (the ray passes straight through the surface).

        :type theWeight: OCC.wrapper.Graphic3d.Graphic3d_Vec3
        :type theAbsorptionColor: OCC.wrapper.Graphic3d.Graphic3d_Vec3
        :type theAbsorptionCoeff: float
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_BSDF

        """
        return _Graphic3d.Graphic3d_BSDF_CreateTransparent(*args)

    CreateTransparent = staticmethod(CreateTransparent)

    def CreateGlass(*args):
        """
        CreateGlass(NCollection_Vec3_Standard_ShortReal theWeight, NCollection_Vec3_Standard_ShortReal theAbsorptionColor, Standard_ShortReal const theAbsorptionCoeff, Standard_ShortReal const theRefractionIndex) -> Graphic3d_BSDF

        Creates BSDF describing glass-like object.
        Glass-like BSDF mixes refraction and reflection effects at
        grazing angles using physically-based Fresnel dielectric model.

        :type theWeight: OCC.wrapper.Graphic3d.Graphic3d_Vec3
        :type theAbsorptionColor: OCC.wrapper.Graphic3d.Graphic3d_Vec3
        :type theAbsorptionCoeff: float
        :type theRefractionIndex: float
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_BSDF

        """
        return _Graphic3d.Graphic3d_BSDF_CreateGlass(*args)

    CreateGlass = staticmethod(CreateGlass)

    def __init__(self, *args):
        """
        __init__(Graphic3d_BSDF self) -> Graphic3d_BSDF

        Creates uninitialized BSDF.


        """
        this = _Graphic3d.new_Graphic3d_BSDF(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Normalize(self, *args):
        """
        Normalize(Graphic3d_BSDF self)

        Normalizes BSDF components.


        """
        return _Graphic3d.Graphic3d_BSDF_Normalize(self, *args)


    def __eq__(self, *args):
        """
        __eq__(Graphic3d_BSDF self, Graphic3d_BSDF theOther) -> bool

        Performs comparison of two BSDFs.

        :type theOther: OCC.wrapper.Graphic3d.Graphic3d_BSDF
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_BSDF___eq__(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_BSDF
Graphic3d_BSDF_swigregister = _Graphic3d.Graphic3d_BSDF_swigregister
Graphic3d_BSDF_swigregister(Graphic3d_BSDF)

def Graphic3d_BSDF_CreateDiffuse(*args):
    """
    Graphic3d_BSDF_CreateDiffuse(NCollection_Vec3_Standard_ShortReal theWeight) -> Graphic3d_BSDF

    Creates BSDF describing diffuse (Lambertian) surface.

    :type theWeight: OCC.wrapper.Graphic3d.Graphic3d_Vec3
    :rtype: OCC.wrapper.Graphic3d.Graphic3d_BSDF

    """
    return _Graphic3d.Graphic3d_BSDF_CreateDiffuse(*args)

def Graphic3d_BSDF_CreateMetallic(*args):
    """
    Graphic3d_BSDF_CreateMetallic(NCollection_Vec3_Standard_ShortReal theWeight, Graphic3d_Fresnel theFresnel, Standard_ShortReal const theRoughness) -> Graphic3d_BSDF

    Creates BSDF describing polished metallic-like surface.

    :type theWeight: OCC.wrapper.Graphic3d.Graphic3d_Vec3
    :type theFresnel: OCC.wrapper.Graphic3d.Graphic3d_Fresnel
    :type theRoughness: float
    :rtype: OCC.wrapper.Graphic3d.Graphic3d_BSDF

    """
    return _Graphic3d.Graphic3d_BSDF_CreateMetallic(*args)

def Graphic3d_BSDF_CreateTransparent(*args):
    """
    Graphic3d_BSDF_CreateTransparent(NCollection_Vec3_Standard_ShortReal theWeight, NCollection_Vec3_Standard_ShortReal theAbsorptionColor, Standard_ShortReal const theAbsorptionCoeff) -> Graphic3d_BSDF

    Creates BSDF describing transparent object.
    Transparent BSDF models simple transparency without
    refraction (the ray passes straight through the surface).

    :type theWeight: OCC.wrapper.Graphic3d.Graphic3d_Vec3
    :type theAbsorptionColor: OCC.wrapper.Graphic3d.Graphic3d_Vec3
    :type theAbsorptionCoeff: float
    :rtype: OCC.wrapper.Graphic3d.Graphic3d_BSDF

    """
    return _Graphic3d.Graphic3d_BSDF_CreateTransparent(*args)

def Graphic3d_BSDF_CreateGlass(*args):
    """
    Graphic3d_BSDF_CreateGlass(NCollection_Vec3_Standard_ShortReal theWeight, NCollection_Vec3_Standard_ShortReal theAbsorptionColor, Standard_ShortReal const theAbsorptionCoeff, Standard_ShortReal const theRefractionIndex) -> Graphic3d_BSDF

    Creates BSDF describing glass-like object.
    Glass-like BSDF mixes refraction and reflection effects at
    grazing angles using physically-based Fresnel dielectric model.

    :type theWeight: OCC.wrapper.Graphic3d.Graphic3d_Vec3
    :type theAbsorptionColor: OCC.wrapper.Graphic3d.Graphic3d_Vec3
    :type theAbsorptionCoeff: float
    :type theRefractionIndex: float
    :rtype: OCC.wrapper.Graphic3d.Graphic3d_BSDF

    """
    return _Graphic3d.Graphic3d_BSDF_CreateGlass(*args)

class Handle_Graphic3d_ShaderProgram(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_ShaderProgram self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_ShaderProgram self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_ShaderProgram self, Graphic3d_ShaderProgram thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_ShaderProgram self, Handle_Graphic3d_ShaderProgram theHandle) -> Handle_Graphic3d_ShaderProgram
        assign(Handle_Graphic3d_ShaderProgram self, Graphic3d_ShaderProgram thePtr) -> Handle_Graphic3d_ShaderProgram
        assign(Handle_Graphic3d_ShaderProgram self, Handle_Graphic3d_ShaderProgram theHandle) -> Handle_Graphic3d_ShaderProgram

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_ShaderProgram self) -> Graphic3d_ShaderProgram

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_ShaderProgram self) -> Graphic3d_ShaderProgram

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_ShaderProgram self) -> Graphic3d_ShaderProgram

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_ShaderProgram___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_ShaderProgram___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_ShaderProgram(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ShaderProgram_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_ShaderProgram

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_ShaderProgram self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ShaderProgram_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ShaderProgram_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsDone(self, *args):
        """
        IsDone(Handle_Graphic3d_ShaderProgram self) -> Standard_Boolean

        Checks if the program object is valid or not.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_IsDone(self, *args)


    def GetId(self, *args):
        """
        Returns unique ID used to manage resource in graphic driver.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Handle_Graphic3d_ShaderProgram_GetId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Header(self, *args):
        """
        Returns GLSL header (version code and extensions).

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Handle_Graphic3d_ShaderProgram_Header(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetHeader(self, *args):
        """
        SetHeader(Handle_Graphic3d_ShaderProgram self, TCollection_AsciiString theHeader)

        Setup GLSL header containing language version code and used extensions.
        Will be prepended to the very beginning of the source code.
        Example:
        @code
        #version 300 es
        #extension GL_ARB_bindless_texture : require
        @endcode

        :type theHeader: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_SetHeader(self, *args)


    def AppendToHeader(self, *args):
        """
        AppendToHeader(Handle_Graphic3d_ShaderProgram self, TCollection_AsciiString theHeaderLine)

        Append line to GLSL header.

        :type theHeaderLine: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_AppendToHeader(self, *args)


    def NbLightsMax(self, *args):
        """
        NbLightsMax(Handle_Graphic3d_ShaderProgram self) -> Standard_Integer

        Return the length of array of light sources (THE_MAX_LIGHTS),
        to be used for initialization occLightSources.
        Default value is THE_MAX_LIGHTS_DEFAULT.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_NbLightsMax(self, *args)


    def SetNbLightsMax(self, *args):
        """
        SetNbLightsMax(Handle_Graphic3d_ShaderProgram self, Standard_Integer theNbLights)

        Specify the length of array of light sources (THE_MAX_LIGHTS).

        :type theNbLights: int

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_SetNbLightsMax(self, *args)


    def NbClipPlanesMax(self, *args):
        """
        NbClipPlanesMax(Handle_Graphic3d_ShaderProgram self) -> Standard_Integer

        Return the length of array of clipping planes (THE_MAX_CLIP_PLANES),
        to be used for initialization occClipPlaneEquations.
        Default value is THE_MAX_CLIP_PLANES_DEFAULT.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_NbClipPlanesMax(self, *args)


    def SetNbClipPlanesMax(self, *args):
        """
        SetNbClipPlanesMax(Handle_Graphic3d_ShaderProgram self, Standard_Integer theNbPlanes)

        Specify the length of array of clipping planes (THE_MAX_CLIP_PLANES).

        :type theNbPlanes: int

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_SetNbClipPlanesMax(self, *args)


    def AttachShader(self, *args):
        """
        AttachShader(Handle_Graphic3d_ShaderProgram self, Handle_Graphic3d_ShaderObject theShader) -> Standard_Boolean

        Attaches shader object to the program object.

        :type theShader: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderObject
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_AttachShader(self, *args)


    def DetachShader(self, *args):
        """
        DetachShader(Handle_Graphic3d_ShaderProgram self, Handle_Graphic3d_ShaderObject theShader) -> Standard_Boolean

        Detaches shader object from the program object.

        :type theShader: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderObject
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_DetachShader(self, *args)


    def ShaderObjects(self, *args):
        """
        Returns list of attached shader objects.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ShaderObjectList

        """
        res = _Graphic3d.Handle_Graphic3d_ShaderProgram_ShaderObjects(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Variables(self, *args):
        """
        The list of currently pushed but not applied custom uniform variables.
        This list is automatically cleared after applying to GLSL program.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ShaderVariableList

        """
        res = _Graphic3d.Handle_Graphic3d_ShaderProgram_Variables(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VertexAttributes(self, *args):
        """
        Return the list of custom vertex attributes.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_ShaderAttributeList

        """
        res = _Graphic3d.Handle_Graphic3d_ShaderProgram_VertexAttributes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetVertexAttributes(self, *args):
        """
        SetVertexAttributes(Handle_Graphic3d_ShaderProgram self, NCollection_Sequence_Handle_Graphic3d_ShaderAttribute theAttributes)

        Assign the list of custom vertex attributes.
        Should be done before GLSL program initialization.

        :type theAttributes: OCC.wrapper.Graphic3d.Graphic3d_ShaderAttributeList

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_SetVertexAttributes(self, *args)


    def NbFragmentOutputs(self, *args):
        """
        NbFragmentOutputs(Handle_Graphic3d_ShaderProgram self) -> Standard_Integer

        Returns the number (1+) of Fragment Shader outputs to be written to
        (more than 1 can be in case of multiple draw buffers); 1 by default.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_NbFragmentOutputs(self, *args)


    def SetNbFragmentOutputs(self, *args):
        """
        SetNbFragmentOutputs(Handle_Graphic3d_ShaderProgram self, Standard_Integer const theNbOutputs)

        Sets the number of Fragment Shader outputs to be written to.
        Should be done before GLSL program initialization.

        :type theNbOutputs: int

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_SetNbFragmentOutputs(self, *args)


    def HasAlphaTest(self, *args):
        """
        HasAlphaTest(Handle_Graphic3d_ShaderProgram self) -> Standard_Boolean

        Return true if Fragment Shader should perform alpha test; FALSE by default.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_HasAlphaTest(self, *args)


    def SetAlphaTest(self, *args):
        """
        SetAlphaTest(Handle_Graphic3d_ShaderProgram self, Standard_Boolean theAlphaTest)

        Set if Fragment Shader should perform alpha test.
        Note that this flag is designed for usage with - custom shader program may discard fragment regardless this flag.

        :type theAlphaTest: bool

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_SetAlphaTest(self, *args)


    def HasWeightOitOutput(self, *args):
        """
        HasWeightOitOutput(Handle_Graphic3d_ShaderProgram self) -> Standard_Boolean

        Return true if Fragment Shader color should output the weighted OIT coverage; FALSE by default.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_HasWeightOitOutput(self, *args)


    def SetWeightOitOutput(self, *args):
        """
        SetWeightOitOutput(Handle_Graphic3d_ShaderProgram self, Standard_Boolean theOutput)

        Set if Fragment Shader color should output the weighted OIT coverage.
        Note that weighted OIT also requires at least 2 Fragment Outputs (color + coverage).

        :type theOutput: bool

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_SetWeightOitOutput(self, *args)


    def ClearVariables(self, *args):
        """
        ClearVariables(Handle_Graphic3d_ShaderProgram self)

        Removes all custom uniform variables from the program.


        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_ClearVariables(self, *args)


    def PushVariableFloat(self, *args):
        """
        PushVariableFloat(Handle_Graphic3d_ShaderProgram self, TCollection_AsciiString theName, float const theValue) -> Standard_Boolean

        Pushes float uniform.

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theValue: const float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_PushVariableFloat(self, *args)


    def PushVariableVec2(self, *args):
        """
        PushVariableVec2(Handle_Graphic3d_ShaderProgram self, TCollection_AsciiString theName, NCollection_Vec2_Standard_ShortReal theValue) -> Standard_Boolean

        Pushes vec2 uniform.

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theValue: OCC.wrapper.Graphic3d.Graphic3d_Vec2
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_PushVariableVec2(self, *args)


    def PushVariableVec3(self, *args):
        """
        PushVariableVec3(Handle_Graphic3d_ShaderProgram self, TCollection_AsciiString theName, NCollection_Vec3_Standard_ShortReal theValue) -> Standard_Boolean

        Pushes vec3 uniform.

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theValue: OCC.wrapper.Graphic3d.Graphic3d_Vec3
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_PushVariableVec3(self, *args)


    def PushVariableVec4(self, *args):
        """
        PushVariableVec4(Handle_Graphic3d_ShaderProgram self, TCollection_AsciiString theName, Graphic3d_Vec4 const & theValue) -> Standard_Boolean

        Pushes vec4 uniform.

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theValue: OCC.wrapper.Graphic3d.Graphic3d_Vec4
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_PushVariableVec4(self, *args)


    def PushVariableInt(self, *args):
        """
        PushVariableInt(Handle_Graphic3d_ShaderProgram self, TCollection_AsciiString theName, int const theValue) -> Standard_Boolean

        Pushes int uniform.

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theValue: const int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_PushVariableInt(self, *args)


    def PushVariableVec2i(self, *args):
        """
        PushVariableVec2i(Handle_Graphic3d_ShaderProgram self, TCollection_AsciiString theName, NCollection_Vec2_Standard_Integer theValue) -> Standard_Boolean

        Pushes vec2i uniform.

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theValue: OCC.wrapper.Graphic3d.Graphic3d_Vec2i
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_PushVariableVec2i(self, *args)


    def PushVariableVec3i(self, *args):
        """
        PushVariableVec3i(Handle_Graphic3d_ShaderProgram self, TCollection_AsciiString theName, NCollection_Vec3_Standard_Integer theValue) -> Standard_Boolean

        Pushes vec3i uniform.

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theValue: OCC.wrapper.Graphic3d.Graphic3d_Vec3i
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_PushVariableVec3i(self, *args)


    def PushVariableVec4i(self, *args):
        """
        PushVariableVec4i(Handle_Graphic3d_ShaderProgram self, TCollection_AsciiString theName, Graphic3d_Vec4i const & theValue) -> Standard_Boolean

        Pushes vec4i uniform.

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type theValue: OCC.wrapper.Graphic3d.Graphic3d_Vec4i
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_PushVariableVec4i(self, *args)


    def ShadersFolder(self, *args):
        """
        The path to GLSL programs determined from CSF_ShadersDirectory or CASROOT environment variables.
        @return the root folder with default GLSL programs.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Handle_Graphic3d_ShaderProgram_ShadersFolder(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_ShaderProgram self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_ShaderProgram self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_ShaderProgram self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_ShaderProgram self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_ShaderProgram self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_ShaderProgram self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_ShaderProgram self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_ShaderProgram self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_ShaderProgram self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ShaderProgram_DecrementRefCounter(self, *args)

Handle_Graphic3d_ShaderProgram_swigregister = _Graphic3d.Handle_Graphic3d_ShaderProgram_swigregister
Handle_Graphic3d_ShaderProgram_swigregister(Handle_Graphic3d_ShaderProgram)

def Handle_Graphic3d_ShaderProgram_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_ShaderProgram_DownCast(thing)
Handle_Graphic3d_ShaderProgram_DownCast = _Graphic3d.Handle_Graphic3d_ShaderProgram_DownCast

class Handle_Graphic3d_ViewAffinity(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_ViewAffinity self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_ViewAffinity_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_ViewAffinity self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_ViewAffinity_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_ViewAffinity self, Graphic3d_ViewAffinity thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_ViewAffinity_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_ViewAffinity self, Handle_Graphic3d_ViewAffinity theHandle) -> Handle_Graphic3d_ViewAffinity
        assign(Handle_Graphic3d_ViewAffinity self, Graphic3d_ViewAffinity thePtr) -> Handle_Graphic3d_ViewAffinity
        assign(Handle_Graphic3d_ViewAffinity self, Handle_Graphic3d_ViewAffinity theHandle) -> Handle_Graphic3d_ViewAffinity

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_ViewAffinity_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_ViewAffinity self) -> Graphic3d_ViewAffinity

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ViewAffinity_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_ViewAffinity self) -> Graphic3d_ViewAffinity

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ViewAffinity___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_ViewAffinity self) -> Graphic3d_ViewAffinity

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_ViewAffinity___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_ViewAffinity___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_ViewAffinity___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_ViewAffinity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ViewAffinity_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_ViewAffinity

    def IsVisible(self, *args):
        """
        IsVisible(Handle_Graphic3d_ViewAffinity self, Standard_Integer const theViewId) -> bool

        Return visibility flag.

        :type theViewId: int
        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_ViewAffinity_IsVisible(self, *args)


    def SetVisible(self, *args):
        """
        SetVisible(Handle_Graphic3d_ViewAffinity self, Standard_Boolean const theIsVisible)
        SetVisible(Handle_Graphic3d_ViewAffinity self, Standard_Integer const theViewId, bool const theIsVisible)

        Setup visibility flag.

        :type theViewId: int
        :type theIsVisible: const bool

        """
        return _Graphic3d.Handle_Graphic3d_ViewAffinity_SetVisible(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_ViewAffinity self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_ViewAffinity_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ViewAffinity_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ViewAffinity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_ViewAffinity self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_ViewAffinity_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_ViewAffinity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_ViewAffinity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ViewAffinity_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_ViewAffinity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_ViewAffinity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ViewAffinity_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_ViewAffinity self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_ViewAffinity_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_ViewAffinity self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ViewAffinity_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_ViewAffinity self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_ViewAffinity_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_ViewAffinity self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ViewAffinity_DecrementRefCounter(self, *args)

Handle_Graphic3d_ViewAffinity_swigregister = _Graphic3d.Handle_Graphic3d_ViewAffinity_swigregister
Handle_Graphic3d_ViewAffinity_swigregister(Handle_Graphic3d_ViewAffinity)

def Handle_Graphic3d_ViewAffinity_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_ViewAffinity_DownCast(thing)
Handle_Graphic3d_ViewAffinity_DownCast = _Graphic3d.Handle_Graphic3d_ViewAffinity_DownCast

class Graphic3d_SequenceOfHClipPlane(Standard.Standard_Transient):
    """Class defining the sequence of clipping planes."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_SequenceOfHClipPlane
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_SequenceOfHClipPlane(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_SequenceOfHClipPlane_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_SequenceOfHClipPlane_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_SequenceOfHClipPlane_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Graphic3d_SequenceOfHClipPlane self) -> Graphic3d_SequenceOfHClipPlane

        Empty constructor.


        """
        this = _Graphic3d.new_Graphic3d_SequenceOfHClipPlane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def ToOverrideGlobal(self, *args):
        """
        ToOverrideGlobal(Graphic3d_SequenceOfHClipPlane self) -> Standard_Boolean

        Return true if local properties should override global properties.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_SequenceOfHClipPlane_ToOverrideGlobal(self, *args)


    def SetOverrideGlobal(self, *args):
        """
        SetOverrideGlobal(Graphic3d_SequenceOfHClipPlane self, Standard_Boolean const theToOverride)

        Setup flag defining if local properties should override global properties.

        :type theToOverride: bool

        """
        return _Graphic3d.Graphic3d_SequenceOfHClipPlane_SetOverrideGlobal(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_SequenceOfHClipPlane
Graphic3d_SequenceOfHClipPlane_swigregister = _Graphic3d.Graphic3d_SequenceOfHClipPlane_swigregister
Graphic3d_SequenceOfHClipPlane_swigregister(Graphic3d_SequenceOfHClipPlane)

def Graphic3d_SequenceOfHClipPlane_get_type_name(*args):
    """
    Graphic3d_SequenceOfHClipPlane_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_SequenceOfHClipPlane_get_type_name(*args)

def Graphic3d_SequenceOfHClipPlane_get_type_descriptor(*args):
    """
    Graphic3d_SequenceOfHClipPlane_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_SequenceOfHClipPlane_get_type_descriptor(*args)

class NCollection_Vec3_Standard_Integer(object):
    """
    Generic 3-components vector.
    To be used as RGB color pixel or XYZ 3D-point.
    The main target for this class - to handle raw low-level arrays (from/to graphic driver etc.).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Length(*args):
        """
        Length() -> int

        Returns the number of components.

        :rtype: int

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_Length(*args)

    Length = staticmethod(Length)

    def __init__(self, *args):
        """
        Generic 3-components vector.
        To be used as RGB color pixel or XYZ 3D-point.
        The main target for this class - to handle raw low-level arrays (from/to graphic driver etc.).
        """
        this = _Graphic3d.new_NCollection_Vec3_Standard_Integer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetValues(self, *args):
        """
        SetValues(NCollection_Vec3_Standard_Integer self, int const theX, int const theY, int const theZ)

        Assign new values to the vector.

        :type theX: const Element_t
        :type theY: const Element_t
        :type theZ: const Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_SetValues(self, *args)


    def yx(self, *args):
        """
        yx(NCollection_Vec3_Standard_Integer self) -> NCollection_Vec2_Standard_Integer

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_yx(self, *args)


    def xz(self, *args):
        """
        xz(NCollection_Vec3_Standard_Integer self) -> NCollection_Vec2_Standard_Integer

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_xz(self, *args)


    def zx(self, *args):
        """
        zx(NCollection_Vec3_Standard_Integer self) -> NCollection_Vec2_Standard_Integer

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_zx(self, *args)


    def zy(self, *args):
        """
        zy(NCollection_Vec3_Standard_Integer self) -> NCollection_Vec2_Standard_Integer

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_zy(self, *args)


    def xyz(self, *args):
        """
        xyz(NCollection_Vec3_Standard_Integer self) -> NCollection_Vec3_Standard_Integer

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_xyz(self, *args)


    def xzy(self, *args):
        """
        xzy(NCollection_Vec3_Standard_Integer self) -> NCollection_Vec3_Standard_Integer

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_xzy(self, *args)


    def yxz(self, *args):
        """
        yxz(NCollection_Vec3_Standard_Integer self) -> NCollection_Vec3_Standard_Integer

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_yxz(self, *args)


    def yzx(self, *args):
        """
        yzx(NCollection_Vec3_Standard_Integer self) -> NCollection_Vec3_Standard_Integer

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_yzx(self, *args)


    def zyx(self, *args):
        """
        zyx(NCollection_Vec3_Standard_Integer self) -> NCollection_Vec3_Standard_Integer

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_zyx(self, *args)


    def zxy(self, *args):
        """
        zxy(NCollection_Vec3_Standard_Integer self) -> NCollection_Vec3_Standard_Integer

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_zxy(self, *args)


    def x(self, *args):
        """
        x(NCollection_Vec3_Standard_Integer self) -> int
        x(NCollection_Vec3_Standard_Integer self) -> int &

        Alias to 1st component as X coordinate in XYZ.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_x(self, *args)


    def r(self, *args):
        """
        r(NCollection_Vec3_Standard_Integer self) -> int
        r(NCollection_Vec3_Standard_Integer self) -> int &

        Alias to 1st component as RED channel in RGB.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_r(self, *args)


    def y(self, *args):
        """
        y(NCollection_Vec3_Standard_Integer self) -> int
        y(NCollection_Vec3_Standard_Integer self) -> int &

        Alias to 2nd component as Y coordinate in XYZ.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_y(self, *args)


    def g(self, *args):
        """
        g(NCollection_Vec3_Standard_Integer self) -> int
        g(NCollection_Vec3_Standard_Integer self) -> int &

        Alias to 2nd component as GREEN channel in RGB.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_g(self, *args)


    def z(self, *args):
        """
        z(NCollection_Vec3_Standard_Integer self) -> int
        z(NCollection_Vec3_Standard_Integer self) -> int &

        Alias to 3rd component as Z coordinate in XYZ.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_z(self, *args)


    def b(self, *args):
        """
        b(NCollection_Vec3_Standard_Integer self) -> int
        b(NCollection_Vec3_Standard_Integer self) -> int &

        Alias to 3rd component as BLUE channel in RGB.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_b(self, *args)


    def xy(self, *args):
        """
        xy(NCollection_Vec3_Standard_Integer self) -> NCollection_Vec2_Standard_Integer
        xy(NCollection_Vec3_Standard_Integer self) -> NCollection_Vec2_Standard_Integer

        @return XY-components modifiable vector

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_xy(self, *args)


    def yz(self, *args):
        """
        yz(NCollection_Vec3_Standard_Integer self) -> NCollection_Vec2_Standard_Integer
        yz(NCollection_Vec3_Standard_Integer self) -> NCollection_Vec2_Standard_Integer

        @return YZ-components modifiable vector

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_yz(self, *args)


    def IsEqual(self, *args):
        """
        IsEqual(NCollection_Vec3_Standard_Integer self, NCollection_Vec3_Standard_Integer theOther) -> bool

        Check this vector with another vector for equality (without tolerance!).

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_IsEqual(self, *args)


    def __eq__(self, *args):
        """
        __eq__(NCollection_Vec3_Standard_Integer self, NCollection_Vec3_Standard_Integer theOther) -> bool
        __eq__(NCollection_Vec3_Standard_Integer self, NCollection_Vec3_Standard_Integer theOther) -> bool

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer___eq__(self, *args)


    def __ne__(self, *args):
        """
        __ne__(NCollection_Vec3_Standard_Integer self, NCollection_Vec3_Standard_Integer theOther) -> bool
        __ne__(NCollection_Vec3_Standard_Integer self, NCollection_Vec3_Standard_Integer theOther) -> bool

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer___ne__(self, *args)


    def GetData(self, *args):
        """
        GetData(NCollection_Vec3_Standard_Integer self) -> int const *

        Raw access to the data (for OpenGL exchange).

        :rtype: const Element_t *

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_GetData(self, *args)


    def ChangeData(self, *args):
        """
        ChangeData(NCollection_Vec3_Standard_Integer self) -> int *

        :rtype: Element_t *

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_ChangeData(self, *args)


    def __iadd__(self, *args):
        """
        __iadd__(NCollection_Vec3_Standard_Integer self, NCollection_Vec3_Standard_Integer theAdd) -> NCollection_Vec3_Standard_Integer

        Compute per-component summary.

        :type theAdd: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer___iadd__(self, *args)


    def __neg__(self, *args):
        """
        __neg__(NCollection_Vec3_Standard_Integer self) -> NCollection_Vec3_Standard_Integer

        Unary -.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer___neg__(self, *args)


    def __isub__(self, *args):
        """
        __isub__(NCollection_Vec3_Standard_Integer self, NCollection_Vec3_Standard_Integer theDec) -> NCollection_Vec3_Standard_Integer

        Compute per-component subtraction.

        :type theDec: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer___isub__(self, *args)


    def Multiply(self, *args):
        """
        Multiply(NCollection_Vec3_Standard_Integer self, int const theFactor)

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_Multiply(self, *args)


    def __imul__(self, *args):
        """
        __imul__(NCollection_Vec3_Standard_Integer self, NCollection_Vec3_Standard_Integer theRight) -> NCollection_Vec3_Standard_Integer
        __imul__(NCollection_Vec3_Standard_Integer self, int const theFactor) -> NCollection_Vec3_Standard_Integer

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer___imul__(self, *args)


    def __mul__(self, *args):
        """
        __mul__(NCollection_Vec3_Standard_Integer self, int const theFactor) -> NCollection_Vec3_Standard_Integer

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer___mul__(self, *args)


    def Multiplied(self, *args):
        """
        Multiplied(NCollection_Vec3_Standard_Integer self, int const theFactor) -> NCollection_Vec3_Standard_Integer

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_Multiplied(self, *args)


    def cwiseMin(self, *args):
        """
        cwiseMin(NCollection_Vec3_Standard_Integer self, NCollection_Vec3_Standard_Integer theVec) -> NCollection_Vec3_Standard_Integer

        Compute component-wise minimum of two vectors.

        :type theVec: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_cwiseMin(self, *args)


    def cwiseMax(self, *args):
        """
        cwiseMax(NCollection_Vec3_Standard_Integer self, NCollection_Vec3_Standard_Integer theVec) -> NCollection_Vec3_Standard_Integer

        Compute component-wise maximum of two vectors.

        :type theVec: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_cwiseMax(self, *args)


    def cwiseAbs(self, *args):
        """
        cwiseAbs(NCollection_Vec3_Standard_Integer self) -> NCollection_Vec3_Standard_Integer

        Compute component-wise modulus of the vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_cwiseAbs(self, *args)


    def maxComp(self, *args):
        """
        maxComp(NCollection_Vec3_Standard_Integer self) -> int

        Compute maximum component of the vector.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_maxComp(self, *args)


    def minComp(self, *args):
        """
        minComp(NCollection_Vec3_Standard_Integer self) -> int

        Compute minimum component of the vector.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_minComp(self, *args)


    def __itruediv__(self, *args):
        return _Graphic3d.NCollection_Vec3_Standard_Integer___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _Graphic3d.NCollection_Vec3_Standard_Integer___truediv__(self, *args)
    __div__ = __truediv__



    def Dot(self, *args):
        """
        Dot(NCollection_Vec3_Standard_Integer self, NCollection_Vec3_Standard_Integer theOther) -> int

        Computes the dot product.

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_Dot(self, *args)


    def Modulus(self, *args):
        """
        Modulus(NCollection_Vec3_Standard_Integer self) -> int

        Computes the vector modulus (magnitude, length).

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_Modulus(self, *args)


    def SquareModulus(self, *args):
        """
        SquareModulus(NCollection_Vec3_Standard_Integer self) -> int

        Computes the square of vector modulus (magnitude, length).
        This method may be used for performance tricks.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_SquareModulus(self, *args)


    def Normalize(self, *args):
        """
        Normalize(NCollection_Vec3_Standard_Integer self)

        Normalize the vector.


        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_Normalize(self, *args)


    def Normalized(self, *args):
        """
        Normalized(NCollection_Vec3_Standard_Integer self) -> NCollection_Vec3_Standard_Integer

        Normalize the vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_Normalized(self, *args)


    def Cross(*args):
        """
        Cross(NCollection_Vec3_Standard_Integer theVec1, NCollection_Vec3_Standard_Integer theVec2) -> NCollection_Vec3_Standard_Integer

        Computes the cross product.

        :type theVec1: OCC.wrapper.NCollection.NCollection_Vec3
        :type theVec2: OCC.wrapper.NCollection.NCollection_Vec3
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_Cross(*args)

    Cross = staticmethod(Cross)

    def GetLERP(*args):
        """
        GetLERP(NCollection_Vec3_Standard_Integer theFrom, NCollection_Vec3_Standard_Integer theTo, int const theT) -> NCollection_Vec3_Standard_Integer

        Compute linear interpolation between to vectors.
        @param theT - interpolation coefficient 0..1;
        @return interpolation result.

        :type theFrom: OCC.wrapper.NCollection.NCollection_Vec3
        :type theTo: OCC.wrapper.NCollection.NCollection_Vec3
        :type theT: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_GetLERP(*args)

    GetLERP = staticmethod(GetLERP)

    def DX(*args):
        """
        DX() -> NCollection_Vec3_Standard_Integer

        Constuct DX unit vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_DX(*args)

    DX = staticmethod(DX)

    def DY(*args):
        """
        DY() -> NCollection_Vec3_Standard_Integer

        Constuct DY unit vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_DY(*args)

    DY = staticmethod(DY)

    def DZ(*args):
        """
        DZ() -> NCollection_Vec3_Standard_Integer

        Constuct DZ unit vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec3

        """
        return _Graphic3d.NCollection_Vec3_Standard_Integer_DZ(*args)

    DZ = staticmethod(DZ)
    __swig_destroy__ = _Graphic3d.delete_NCollection_Vec3_Standard_Integer
NCollection_Vec3_Standard_Integer_swigregister = _Graphic3d.NCollection_Vec3_Standard_Integer_swigregister
NCollection_Vec3_Standard_Integer_swigregister(NCollection_Vec3_Standard_Integer)

def NCollection_Vec3_Standard_Integer_Length(*args):
    """
    NCollection_Vec3_Standard_Integer_Length() -> int

    Returns the number of components.

    :rtype: int

    """
    return _Graphic3d.NCollection_Vec3_Standard_Integer_Length(*args)

def NCollection_Vec3_Standard_Integer_Cross(*args):
    """
    NCollection_Vec3_Standard_Integer_Cross(NCollection_Vec3_Standard_Integer theVec1, NCollection_Vec3_Standard_Integer theVec2) -> NCollection_Vec3_Standard_Integer

    Computes the cross product.

    :type theVec1: OCC.wrapper.NCollection.NCollection_Vec3
    :type theVec2: OCC.wrapper.NCollection.NCollection_Vec3
    :rtype: OCC.wrapper.NCollection.NCollection_Vec3

    """
    return _Graphic3d.NCollection_Vec3_Standard_Integer_Cross(*args)

def NCollection_Vec3_Standard_Integer_GetLERP(*args):
    """
    NCollection_Vec3_Standard_Integer_GetLERP(NCollection_Vec3_Standard_Integer theFrom, NCollection_Vec3_Standard_Integer theTo, int const theT) -> NCollection_Vec3_Standard_Integer

    Compute linear interpolation between to vectors.
    @param theT - interpolation coefficient 0..1;
    @return interpolation result.

    :type theFrom: OCC.wrapper.NCollection.NCollection_Vec3
    :type theTo: OCC.wrapper.NCollection.NCollection_Vec3
    :type theT: const Element_t
    :rtype: OCC.wrapper.NCollection.NCollection_Vec3

    """
    return _Graphic3d.NCollection_Vec3_Standard_Integer_GetLERP(*args)

def NCollection_Vec3_Standard_Integer_DX(*args):
    """
    NCollection_Vec3_Standard_Integer_DX() -> NCollection_Vec3_Standard_Integer

    Constuct DX unit vector.

    :rtype: OCC.wrapper.NCollection.NCollection_Vec3

    """
    return _Graphic3d.NCollection_Vec3_Standard_Integer_DX(*args)

def NCollection_Vec3_Standard_Integer_DY(*args):
    """
    NCollection_Vec3_Standard_Integer_DY() -> NCollection_Vec3_Standard_Integer

    Constuct DY unit vector.

    :rtype: OCC.wrapper.NCollection.NCollection_Vec3

    """
    return _Graphic3d.NCollection_Vec3_Standard_Integer_DY(*args)

def NCollection_Vec3_Standard_Integer_DZ(*args):
    """
    NCollection_Vec3_Standard_Integer_DZ() -> NCollection_Vec3_Standard_Integer

    Constuct DZ unit vector.

    :rtype: OCC.wrapper.NCollection.NCollection_Vec3

    """
    return _Graphic3d.NCollection_Vec3_Standard_Integer_DZ(*args)


try:
	Graphic3d_Vec3i = NCollection_Vec3_Standard_Integer
except NameError:
	pass # does not exist, probably ignored

class NCollection_Sequence_Handle_Graphic3d_ShaderObject(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_Graphic3d_ShaderObject self) -> NCollection_Sequence< opencascade::handle< Graphic3d_ShaderObject > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_Graphic3d_ShaderObject self) -> NCollection_Sequence< opencascade::handle< Graphic3d_ShaderObject > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_Graphic3d_ShaderObject self) -> NCollection_Sequence< opencascade::handle< Graphic3d_ShaderObject > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_Graphic3d_ShaderObject self) -> NCollection_Sequence< opencascade::handle< Graphic3d_ShaderObject > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _Graphic3d.new_NCollection_Sequence_Handle_Graphic3d_ShaderObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_Graphic3d_ShaderObject self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_Graphic3d_ShaderObject self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_Graphic3d_ShaderObject self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_Graphic3d_ShaderObject self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_Graphic3d_ShaderObject self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_Graphic3d_ShaderObject self)

        Reverse sequence


        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_Graphic3d_ShaderObject self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_Graphic3d_ShaderObject self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_Graphic3d_ShaderObject self, NCollection_Sequence_Handle_Graphic3d_ShaderObject theOther) -> NCollection_Sequence_Handle_Graphic3d_ShaderObject

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_Graphic3d_ShaderObject self, NCollection_Sequence_Handle_Graphic3d_ShaderObject theOther) -> NCollection_Sequence_Handle_Graphic3d_ShaderObject

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_Graphic3d_ShaderObject self, NCollection_Sequence< opencascade::handle< Graphic3d_ShaderObject > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_Graphic3d_ShaderObject self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_Graphic3d_ShaderObject self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_Graphic3d_ShaderObject self, Handle_Graphic3d_ShaderObject theItem)
        Append(NCollection_Sequence_Handle_Graphic3d_ShaderObject self, NCollection_Sequence_Handle_Graphic3d_ShaderObject theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_Graphic3d_ShaderObject self, Handle_Graphic3d_ShaderObject theItem)
        Prepend(NCollection_Sequence_Handle_Graphic3d_ShaderObject self, NCollection_Sequence_Handle_Graphic3d_ShaderObject theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_Graphic3d_ShaderObject self, Standard_Integer const theIndex, Handle_Graphic3d_ShaderObject theItem)
        InsertBefore(NCollection_Sequence_Handle_Graphic3d_ShaderObject self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Graphic3d_ShaderObject theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_Graphic3d_ShaderObject self, NCollection_Sequence< opencascade::handle< Graphic3d_ShaderObject > >::Iterator & thePosition, Handle_Graphic3d_ShaderObject theItem)
        InsertAfter(NCollection_Sequence_Handle_Graphic3d_ShaderObject self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Graphic3d_ShaderObject theSeq)
        InsertAfter(NCollection_Sequence_Handle_Graphic3d_ShaderObject self, Standard_Integer const theIndex, Handle_Graphic3d_ShaderObject theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_Graphic3d_ShaderObject self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Graphic3d_ShaderObject theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_Graphic3d_ShaderObject self) -> Handle_Graphic3d_ShaderObject

        First item access

        :rtype: TheItemType &

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_Graphic3d_ShaderObject self) -> Handle_Graphic3d_ShaderObject

        Last item access

        :rtype: TheItemType &

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_Graphic3d_ShaderObject self, Standard_Integer const theIndex) -> Handle_Graphic3d_ShaderObject

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_Graphic3d_ShaderObject self, Standard_Integer const theIndex, Handle_Graphic3d_ShaderObject theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_SetValue(self, *args)


    def __iter__(self):
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject___iter__(self)
    __swig_destroy__ = _Graphic3d.delete_NCollection_Sequence_Handle_Graphic3d_ShaderObject
NCollection_Sequence_Handle_Graphic3d_ShaderObject_swigregister = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_swigregister
NCollection_Sequence_Handle_Graphic3d_ShaderObject_swigregister(NCollection_Sequence_Handle_Graphic3d_ShaderObject)

def NCollection_Sequence_Handle_Graphic3d_ShaderObject_delNode(*args):
    """
    NCollection_Sequence_Handle_Graphic3d_ShaderObject_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_delNode(*args)

class NCollection_Sequence_Handle_Graphic3d_ShaderObject_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _Graphic3d.new_NCollection_Sequence_Handle_Graphic3d_ShaderObject_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Graphic3d.delete_NCollection_Sequence_Handle_Graphic3d_ShaderObject_IteratorHelper

    def __next__(self):
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_IteratorHelper___next__(self)
NCollection_Sequence_Handle_Graphic3d_ShaderObject_IteratorHelper_swigregister = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderObject_IteratorHelper_swigregister
NCollection_Sequence_Handle_Graphic3d_ShaderObject_IteratorHelper_swigregister(NCollection_Sequence_Handle_Graphic3d_ShaderObject_IteratorHelper)


try:
	Graphic3d_ShaderObjectList = NCollection_Sequence_Handle_Graphic3d_ShaderObject
except NameError:
	pass # does not exist, probably ignored

class Handle_Graphic3d_AspectText3d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_AspectText3d self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_AspectText3d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_AspectText3d self, Graphic3d_AspectText3d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_AspectText3d self, Handle_Graphic3d_AspectText3d theHandle) -> Handle_Graphic3d_AspectText3d
        assign(Handle_Graphic3d_AspectText3d self, Graphic3d_AspectText3d thePtr) -> Handle_Graphic3d_AspectText3d
        assign(Handle_Graphic3d_AspectText3d self, Handle_Graphic3d_AspectText3d theHandle) -> Handle_Graphic3d_AspectText3d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_AspectText3d self) -> Graphic3d_AspectText3d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_AspectText3d self) -> Graphic3d_AspectText3d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_AspectText3d self) -> Graphic3d_AspectText3d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_AspectText3d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_AspectText3d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_AspectText3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_AspectText3d_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_AspectText3d

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_AspectText3d self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_AspectText3d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_AspectText3d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Color(self, *args):
        """
        Return the text color.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Handle_Graphic3d_AspectText3d_Color(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ColorRGBA(self, *args):
        """
        Return the text color.

        :rtype: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        res = _Graphic3d.Handle_Graphic3d_AspectText3d_ColorRGBA(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetColor(self, *args):
        """
        SetColor(Handle_Graphic3d_AspectText3d self, Quantity_Color theColor)
        SetColor(Handle_Graphic3d_AspectText3d self, Quantity_ColorRGBA theColor)

        Modifies the color.

        :type theColor: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_SetColor(self, *args)


    def SetExpansionFactor(self, *args):
        """
        SetExpansionFactor(Handle_Graphic3d_AspectText3d self, Standard_Real const theFactor)

        Modifies the expansion factor (height/width ratio)
        If the factor is less than 1, the characters will
        be higher than they are wide.

        :type theFactor: float

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_SetExpansionFactor(self, *args)


    def Font(self, *args):
        """
        Return the font.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Handle_Graphic3d_AspectText3d_Font(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetFont(self, *args):
        """
        SetFont(Handle_Graphic3d_AspectText3d self, TCollection_AsciiString theFont)
        SetFont(Handle_Graphic3d_AspectText3d self, Standard_CString const theFont)

        Modifies the font.

        :type theFont: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_SetFont(self, *args)


    def Space(self, *args):
        """
        Space(Handle_Graphic3d_AspectText3d self) -> Standard_Real

        Return the space between characters.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_Space(self, *args)


    def SetSpace(self, *args):
        """
        SetSpace(Handle_Graphic3d_AspectText3d self, Standard_Real const theSpace)

        Modifies the space between the characters.

        :type theSpace: float

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_SetSpace(self, *args)


    def Style(self, *args):
        """
        Style(Handle_Graphic3d_AspectText3d self) -> Aspect_TypeOfStyleText

        Return the text style.

        :rtype: OCC.wrapper.Aspect.Aspect_TypeOfStyleText

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_Style(self, *args)


    def SetStyle(self, *args):
        """
        SetStyle(Handle_Graphic3d_AspectText3d self, Aspect_TypeOfStyleText const theStyle)

        Modifies the style of the text.
        * TOST_NORMAL
        Default text. The text is displayed like any other graphic object.
        This text can be hidden by another object that is nearest from the point of view.
        * TOST_ANNOTATION
        The text is always visible.
        The text is displayed over the other object according to the priority.

        :type theStyle: OCC.wrapper.Aspect.Aspect_TypeOfStyleText

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_SetStyle(self, *args)


    def DisplayType(self, *args):
        """
        DisplayType(Handle_Graphic3d_AspectText3d self) -> Aspect_TypeOfDisplayText

        Return display type.

        :rtype: OCC.wrapper.Aspect.Aspect_TypeOfDisplayText

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_DisplayType(self, *args)


    def SetDisplayType(self, *args):
        """
        SetDisplayType(Handle_Graphic3d_AspectText3d self, Aspect_TypeOfDisplayText const theDisplayType)

        Define the display type of the text.

        TODT_NORMAL     Default display. Text only.
        TODT_SUBTITLE   There is a subtitle under the text.
        TODT_DEKALE     The text is displayed with a 3D style.
        TODT_BLEND      The text is displayed in XOR.
        TODT_DIMENSION  Dimension line under text will be invisible.

        :type theDisplayType: OCC.wrapper.Aspect.Aspect_TypeOfDisplayText

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_SetDisplayType(self, *args)


    def ColorSubTitleRGBA(self, *args):
        """
        Return subtitle color.

        :rtype: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        res = _Graphic3d.Handle_Graphic3d_AspectText3d_ColorSubTitleRGBA(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ColorSubTitle(self, *args):
        """
        Return subtitle color.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Handle_Graphic3d_AspectText3d_ColorSubTitle(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetColorSubTitle(self, *args):
        """
        SetColorSubTitle(Handle_Graphic3d_AspectText3d self, Quantity_Color theColor)
        SetColorSubTitle(Handle_Graphic3d_AspectText3d self, Quantity_ColorRGBA theColor)

        Modifies the color of the subtitle for the TODT_SUBTITLE TextDisplayType
        and the color of background for the TODT_DEKALE TextDisplayType.

        :type theColor: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_SetColorSubTitle(self, *args)


    def GetTextZoomable(self, *args):
        """
        GetTextZoomable(Handle_Graphic3d_AspectText3d self) -> bool

        Returns TRUE when the Text Zoomable is on.

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_GetTextZoomable(self, *args)


    def SetTextZoomable(self, *args):
        """
        SetTextZoomable(Handle_Graphic3d_AspectText3d self, bool const theFlag)

        Turns usage of text zoomable on/off

        :type theFlag: const bool

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_SetTextZoomable(self, *args)


    def GetTextAngle(self, *args):
        """
        GetTextAngle(Handle_Graphic3d_AspectText3d self) -> Standard_Real

        Returns Angle of degree

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_GetTextAngle(self, *args)


    def SetTextAngle(self, *args):
        """
        SetTextAngle(Handle_Graphic3d_AspectText3d self, Standard_Real const theAngle)

        Turns usage of text rotated

        :type theAngle: float

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_SetTextAngle(self, *args)


    def GetTextFontAspect(self, *args):
        """
        GetTextFontAspect(Handle_Graphic3d_AspectText3d self) -> Font_FontAspect

        Returns text FontAspect

        :rtype: OCC.wrapper.Font.Font_FontAspect

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_GetTextFontAspect(self, *args)


    def SetTextFontAspect(self, *args):
        """
        SetTextFontAspect(Handle_Graphic3d_AspectText3d self, Font_FontAspect const theFontAspect)

        Turns usage of Aspect text

        :type theFontAspect: OCC.wrapper.Font.Font_FontAspect

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_SetTextFontAspect(self, *args)


    def ShaderProgram(self, *args):
        """
        Return the shader program.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderProgram

        """
        res = _Graphic3d.Handle_Graphic3d_AspectText3d_ShaderProgram(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetShaderProgram(self, *args):
        """
        SetShaderProgram(Handle_Graphic3d_AspectText3d self, Handle_Graphic3d_ShaderProgram theProgram)

        Sets up OpenGL/GLSL shader program.

        :type theProgram: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderProgram

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_SetShaderProgram(self, *args)


    def Values(self, *args):
        """
        Values(Handle_Graphic3d_AspectText3d self, Quantity_Color theColor, Standard_CString & theFont)
        Values(Handle_Graphic3d_AspectText3d self, Quantity_Color theColor, Standard_CString & theFont, Quantity_Color theColorSubTitle)
        Values(Handle_Graphic3d_AspectText3d self, Quantity_Color theColor, Standard_CString & theFont, Quantity_Color theColorSubTitle)
        Values(Handle_Graphic3d_AspectText3d self, Quantity_Color theColor, Standard_CString & theFont, Quantity_Color theColorSubTitle)

        Returns the current values of the group.

        :type theColor: OCC.wrapper.Quantity.Quantity_Color
        :type theFont: OCC.wrapper.Standard.Standard_CString
        :type theExpansionFactor: float
        :type theSpace: float
        :type theStyle: OCC.wrapper.Aspect.Aspect_TypeOfStyleText
        :type theDisplayType: OCC.wrapper.Aspect.Aspect_TypeOfDisplayText
        :type theColorSubTitle: OCC.wrapper.Quantity.Quantity_Color
        :type theTextZoomable: bool
        :type theTextAngle: float
        :type theTextFontAspect: OCC.wrapper.Font.Font_FontAspect

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_Values(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_AspectText3d self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_AspectText3d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_AspectText3d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_AspectText3d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_AspectText3d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_AspectText3d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_AspectText3d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_AspectText3d self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_AspectText3d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_AspectText3d_DecrementRefCounter(self, *args)

Handle_Graphic3d_AspectText3d_swigregister = _Graphic3d.Handle_Graphic3d_AspectText3d_swigregister
Handle_Graphic3d_AspectText3d_swigregister(Handle_Graphic3d_AspectText3d)

def Handle_Graphic3d_AspectText3d_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_AspectText3d_DownCast(thing)
Handle_Graphic3d_AspectText3d_DownCast = _Graphic3d.Handle_Graphic3d_AspectText3d_DownCast

class Graphic3d_Vertex(object):
    """This class represents a graphical 3D point."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Graphic3d_Vertex self) -> Graphic3d_Vertex
        __init__(Graphic3d_Vertex self, Graphic3d_Vertex thePoint) -> Graphic3d_Vertex
        __init__(Graphic3d_Vertex self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ) -> Graphic3d_Vertex
        __init__(Graphic3d_Vertex self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ) -> Graphic3d_Vertex

        Creates a point with theX, theY and theZ coordinates.

        :type theX: float
        :type theY: float
        :type theZ: float

        """
        this = _Graphic3d.new_Graphic3d_Vertex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetCoord(self, *args):
        """
        SetCoord(Graphic3d_Vertex self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ)
        SetCoord(Graphic3d_Vertex self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ)

        Modifies the coordinates.

        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Graphic3d_Vertex_SetCoord(self, *args)


    def Coord(self, *args):
        """
        Coord(Graphic3d_Vertex self)
        Coord(Graphic3d_Vertex self)

        Returns the coordinates.

        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Graphic3d_Vertex_Coord(self, *args)


    def X(self, *args):
        """
        X(Graphic3d_Vertex self) -> Standard_ShortReal

        Returns the X coordinates.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_Vertex_X(self, *args)


    def Y(self, *args):
        """
        Y(Graphic3d_Vertex self) -> Standard_ShortReal

        Returns the Y coordinate.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_Vertex_Y(self, *args)


    def Z(self, *args):
        """
        Z(Graphic3d_Vertex self) -> Standard_ShortReal

        Returns the Z coordinate.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_Vertex_Z(self, *args)


    def Distance(self, *args):
        """
        Distance(Graphic3d_Vertex self, Graphic3d_Vertex theOther) -> Standard_ShortReal

        Returns the distance between two points.

        :type theOther: OCC.wrapper.Graphic3d.Graphic3d_Vertex
        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_Vertex_Distance(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Vertex
Graphic3d_Vertex_swigregister = _Graphic3d.Graphic3d_Vertex_swigregister
Graphic3d_Vertex_swigregister(Graphic3d_Vertex)

class Handle_Graphic3d_ArrayOfTriangles(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_ArrayOfTriangles self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_ArrayOfTriangles self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_ArrayOfTriangles self, Graphic3d_ArrayOfTriangles thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_ArrayOfTriangles self, Handle_Graphic3d_ArrayOfTriangles theHandle) -> Handle_Graphic3d_ArrayOfTriangles
        assign(Handle_Graphic3d_ArrayOfTriangles self, Graphic3d_ArrayOfTriangles thePtr) -> Handle_Graphic3d_ArrayOfTriangles
        assign(Handle_Graphic3d_ArrayOfTriangles self, Handle_Graphic3d_ArrayOfTriangles theHandle) -> Handle_Graphic3d_ArrayOfTriangles

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_ArrayOfTriangles self) -> Graphic3d_ArrayOfTriangles

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_ArrayOfTriangles self) -> Graphic3d_ArrayOfTriangles

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_ArrayOfTriangles self) -> Graphic3d_ArrayOfTriangles

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_ArrayOfTriangles(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ArrayOfTriangles_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_ArrayOfTriangles

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_ArrayOfTriangles self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Attributes(self, *args):
        """
        Returns vertex attributes buffer (colors, normals, texture coordinates).

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Buffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_Attributes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Type(self, *args):
        """
        Type(Handle_Graphic3d_ArrayOfTriangles self) -> Graphic3d_TypeOfPrimitiveArray

        Returns the type of this primitive

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfPrimitiveArray

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_Type(self, *args)


    def StringType(self, *args):
        """
        StringType(Handle_Graphic3d_ArrayOfTriangles self) -> Standard_CString

        Returns the string type of this primitive

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_StringType(self, *args)


    def HasVertexNormals(self, *args):
        """
        HasVertexNormals(Handle_Graphic3d_ArrayOfTriangles self) -> Standard_Boolean

        Returns TRUE when vertex normals array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_HasVertexNormals(self, *args)


    def HasVertexColors(self, *args):
        """
        HasVertexColors(Handle_Graphic3d_ArrayOfTriangles self) -> Standard_Boolean

        Returns TRUE when vertex colors array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_HasVertexColors(self, *args)


    def HasVertexTexels(self, *args):
        """
        HasVertexTexels(Handle_Graphic3d_ArrayOfTriangles self) -> Standard_Boolean

        Returns TRUE when vertex texels array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_HasVertexTexels(self, *args)


    def VertexNumber(self, *args):
        """
        VertexNumber(Handle_Graphic3d_ArrayOfTriangles self) -> Standard_Integer

        Returns the number of defined vertex

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_VertexNumber(self, *args)


    def ItemNumber(self, *args):
        """
        ItemNumber(Handle_Graphic3d_ArrayOfTriangles self) -> Standard_Integer

        Returns the number of total items according to the array type.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_ItemNumber(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_Graphic3d_ArrayOfTriangles self) -> Standard_Boolean

        Returns TRUE only when the contains of this array is available.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_IsValid(self, *args)


    def AddVertex(self, *args):
        """
        AddVertex(Handle_Graphic3d_ArrayOfTriangles self, gp_Pnt theVertex) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangles self, NCollection_Vec3_Standard_ShortReal theVertex) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangles self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangles self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangles self, gp_Pnt theVertex, Quantity_Color theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangles self, gp_Pnt theVertex, Standard_Integer const theColor32) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangles self, gp_Pnt theVertex, Graphic3d_Vec4ub const & theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangles self, gp_Pnt theVertex, gp_Dir theNormal) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangles self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangles self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theNX, Standard_ShortReal const theNY, Standard_ShortReal const theNZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangles self, gp_Pnt theVertex, gp_Dir theNormal, Quantity_Color theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangles self, gp_Pnt theVertex, gp_Dir theNormal, Standard_Integer const theColor32) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangles self, gp_Pnt theVertex, gp_Pnt2d theTexel) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangles self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theTX, Standard_Real const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangles self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theTX, Standard_ShortReal const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangles self, gp_Pnt theVertex, gp_Dir theNormal, gp_Pnt2d theTexel) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangles self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ, Standard_Real const theTX, Standard_Real const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangles self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theNX, Standard_ShortReal const theNY, Standard_ShortReal const theNZ, Standard_ShortReal const theTX, Standard_ShortReal const theTY) -> Standard_Integer

        Adds a vertice,vertex normal and texture in the vertex array.
        Warning: Normal is ignored when the hasVNormals constructor parameter is FALSE
        and  Texel  is ignored when the hasVTexels  constructor parameter is FALSE.
        @return the actual vertex number

        :type theX: float
        :type theY: float
        :type theZ: float
        :type theNX: float
        :type theNY: float
        :type theNZ: float
        :type theTX: float
        :type theTY: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_AddVertex(self, *args)


    def SetVertice(self, *args):
        """
        SetVertice(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theIndex, gp_Pnt theVertex)
        SetVertice(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theIndex, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ)

        Change the vertice of rank theIndex in the array.

        :type theIndex: int
        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_SetVertice(self, *args)


    def SetVertexColor(self, *args):
        """
        SetVertexColor(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theIndex, Quantity_Color theColor)
        SetVertexColor(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theIndex, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB)
        SetVertexColor(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theIndex, Graphic3d_Vec4ub const & theColor)
        SetVertexColor(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theIndex, Standard_Integer const theColor32)

        Change the vertex color of rank theIndex> in the array.
        @code
        theColor32 = Alpha << 24 + Blue << 16 + Green << 8 + Red
        @endcode

        :type theIndex: int
        :type theColor32: int

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_SetVertexColor(self, *args)


    def SetVertexNormal(self, *args):
        """
        SetVertexNormal(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theIndex, gp_Dir theNormal)
        SetVertexNormal(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theIndex, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ)

        Change the vertex normal of rank theIndex in the array.

        :type theIndex: int
        :type theNX: float
        :type theNY: float
        :type theNZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_SetVertexNormal(self, *args)


    def SetVertexTexel(self, *args):
        """
        SetVertexTexel(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theIndex, gp_Pnt2d theTexel)
        SetVertexTexel(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theIndex, Standard_Real const theTX, Standard_Real const theTY)

        Change the vertex texel of rank theIndex in the array.

        :type theIndex: int
        :type theTX: float
        :type theTY: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_SetVertexTexel(self, *args)


    def Vertice(self, *args):
        """
        Vertice(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theRank) -> gp_Pnt
        Vertice(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theRank)

        Returns the vertice coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_Vertice(self, *args)


    def VertexColor(self, *args):
        """
        VertexColor(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theRank) -> Quantity_Color
        VertexColor(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theIndex, Graphic3d_Vec4ub & theColor)
        VertexColor(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theRank)
        VertexColor(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theRank)

        Returns the vertex color values at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theColor: int

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_VertexColor(self, *args)


    def VertexNormal(self, *args):
        """
        VertexNormal(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theRank) -> gp_Dir
        VertexNormal(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theRank)

        Returns the vertex normal coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theNX: float
        :type theNY: float
        :type theNZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_VertexNormal(self, *args)


    def VertexTexel(self, *args):
        """
        VertexTexel(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theRank) -> gp_Pnt2d
        VertexTexel(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theRank)

        Returns the vertex texture coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theTX: float
        :type theTY: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_VertexTexel(self, *args)


    def Indices(self, *args):
        """
        Returns optional index buffer.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_IndexBuffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_Indices(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def EdgeNumber(self, *args):
        """
        EdgeNumber(Handle_Graphic3d_ArrayOfTriangles self) -> Standard_Integer

        Returns the number of defined edges

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_EdgeNumber(self, *args)


    def Edge(self, *args):
        """
        Edge(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theRank) -> Standard_Integer

        Returns the vertex index at rank theRank in the range [1,EdgeNumber()]

        :type theRank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_Edge(self, *args)


    def AddEdge(self, *args):
        """
        AddEdge(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theVertexIndex) -> Standard_Integer

        Adds an edge in the range [1,VertexNumber()] in the array.
        @return the actual edges number

        :type theVertexIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_AddEdge(self, *args)


    def Bounds(self, *args):
        """
        Returns optional bounds buffer.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_BoundBuffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_Bounds(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasBoundColors(self, *args):
        """
        HasBoundColors(Handle_Graphic3d_ArrayOfTriangles self) -> Standard_Boolean

        Returns TRUE when bound colors array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_HasBoundColors(self, *args)


    def BoundNumber(self, *args):
        """
        BoundNumber(Handle_Graphic3d_ArrayOfTriangles self) -> Standard_Integer

        Returns the number of defined bounds

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_BoundNumber(self, *args)


    def Bound(self, *args):
        """
        Bound(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theRank) -> Standard_Integer

        Returns the edge number at rank theRank.

        :type theRank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_Bound(self, *args)


    def BoundColor(self, *args):
        """
        BoundColor(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theRank) -> Quantity_Color
        BoundColor(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theRank)

        Returns the bound color values at rank theRank from the bound table if defined.

        :type theRank: int
        :type theR: float
        :type theG: float
        :type theB: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_BoundColor(self, *args)


    def AddBound(self, *args):
        """
        AddBound(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theEdgeNumber) -> Standard_Integer
        AddBound(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theEdgeNumber, Quantity_Color theBColor) -> Standard_Integer
        AddBound(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theEdgeNumber, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB) -> Standard_Integer

        Adds a bound of length theEdgeNumber and bound color coordinates in the bound array.
        Warning: <theR,theG,theB> are ignored when the hasBColors constructor parameter is FALSE
        @return the actual bounds number

        :type theEdgeNumber: int
        :type theR: float
        :type theG: float
        :type theB: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_AddBound(self, *args)


    def SetBoundColor(self, *args):
        """
        SetBoundColor(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theIndex, Quantity_Color theColor)
        SetBoundColor(Handle_Graphic3d_ArrayOfTriangles self, Standard_Integer const theIndex, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB)

        Change the bound color of rank theIndex in the array.

        :type theIndex: int
        :type theR: float
        :type theG: float
        :type theB: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_SetBoundColor(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_ArrayOfTriangles self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_ArrayOfTriangles self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_ArrayOfTriangles self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_ArrayOfTriangles self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_ArrayOfTriangles self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_ArrayOfTriangles self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_ArrayOfTriangles self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_ArrayOfTriangles self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_ArrayOfTriangles self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_DecrementRefCounter(self, *args)

Handle_Graphic3d_ArrayOfTriangles_swigregister = _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_swigregister
Handle_Graphic3d_ArrayOfTriangles_swigregister(Handle_Graphic3d_ArrayOfTriangles)

def Handle_Graphic3d_ArrayOfTriangles_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_DownCast(thing)
Handle_Graphic3d_ArrayOfTriangles_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfTriangles_DownCast

class Handle_Graphic3d_ArrayOfPolygons(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_ArrayOfPolygons self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_ArrayOfPolygons self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_ArrayOfPolygons self, Graphic3d_ArrayOfPolygons thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_ArrayOfPolygons self, Handle_Graphic3d_ArrayOfPolygons theHandle) -> Handle_Graphic3d_ArrayOfPolygons
        assign(Handle_Graphic3d_ArrayOfPolygons self, Graphic3d_ArrayOfPolygons thePtr) -> Handle_Graphic3d_ArrayOfPolygons
        assign(Handle_Graphic3d_ArrayOfPolygons self, Handle_Graphic3d_ArrayOfPolygons theHandle) -> Handle_Graphic3d_ArrayOfPolygons

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_ArrayOfPolygons self) -> Graphic3d_ArrayOfPolygons

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_ArrayOfPolygons self) -> Graphic3d_ArrayOfPolygons

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_ArrayOfPolygons self) -> Graphic3d_ArrayOfPolygons

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_ArrayOfPolygons(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ArrayOfPolygons_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_ArrayOfPolygons

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_ArrayOfPolygons self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Attributes(self, *args):
        """
        Returns vertex attributes buffer (colors, normals, texture coordinates).

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Buffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_Attributes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Type(self, *args):
        """
        Type(Handle_Graphic3d_ArrayOfPolygons self) -> Graphic3d_TypeOfPrimitiveArray

        Returns the type of this primitive

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfPrimitiveArray

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_Type(self, *args)


    def StringType(self, *args):
        """
        StringType(Handle_Graphic3d_ArrayOfPolygons self) -> Standard_CString

        Returns the string type of this primitive

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_StringType(self, *args)


    def HasVertexNormals(self, *args):
        """
        HasVertexNormals(Handle_Graphic3d_ArrayOfPolygons self) -> Standard_Boolean

        Returns TRUE when vertex normals array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_HasVertexNormals(self, *args)


    def HasVertexColors(self, *args):
        """
        HasVertexColors(Handle_Graphic3d_ArrayOfPolygons self) -> Standard_Boolean

        Returns TRUE when vertex colors array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_HasVertexColors(self, *args)


    def HasVertexTexels(self, *args):
        """
        HasVertexTexels(Handle_Graphic3d_ArrayOfPolygons self) -> Standard_Boolean

        Returns TRUE when vertex texels array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_HasVertexTexels(self, *args)


    def VertexNumber(self, *args):
        """
        VertexNumber(Handle_Graphic3d_ArrayOfPolygons self) -> Standard_Integer

        Returns the number of defined vertex

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_VertexNumber(self, *args)


    def ItemNumber(self, *args):
        """
        ItemNumber(Handle_Graphic3d_ArrayOfPolygons self) -> Standard_Integer

        Returns the number of total items according to the array type.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_ItemNumber(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_Graphic3d_ArrayOfPolygons self) -> Standard_Boolean

        Returns TRUE only when the contains of this array is available.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_IsValid(self, *args)


    def AddVertex(self, *args):
        """
        AddVertex(Handle_Graphic3d_ArrayOfPolygons self, gp_Pnt theVertex) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolygons self, NCollection_Vec3_Standard_ShortReal theVertex) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolygons self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolygons self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolygons self, gp_Pnt theVertex, Quantity_Color theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolygons self, gp_Pnt theVertex, Standard_Integer const theColor32) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolygons self, gp_Pnt theVertex, Graphic3d_Vec4ub const & theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolygons self, gp_Pnt theVertex, gp_Dir theNormal) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolygons self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolygons self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theNX, Standard_ShortReal const theNY, Standard_ShortReal const theNZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolygons self, gp_Pnt theVertex, gp_Dir theNormal, Quantity_Color theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolygons self, gp_Pnt theVertex, gp_Dir theNormal, Standard_Integer const theColor32) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolygons self, gp_Pnt theVertex, gp_Pnt2d theTexel) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolygons self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theTX, Standard_Real const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolygons self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theTX, Standard_ShortReal const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolygons self, gp_Pnt theVertex, gp_Dir theNormal, gp_Pnt2d theTexel) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolygons self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ, Standard_Real const theTX, Standard_Real const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfPolygons self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theNX, Standard_ShortReal const theNY, Standard_ShortReal const theNZ, Standard_ShortReal const theTX, Standard_ShortReal const theTY) -> Standard_Integer

        Adds a vertice,vertex normal and texture in the vertex array.
        Warning: Normal is ignored when the hasVNormals constructor parameter is FALSE
        and  Texel  is ignored when the hasVTexels  constructor parameter is FALSE.
        @return the actual vertex number

        :type theX: float
        :type theY: float
        :type theZ: float
        :type theNX: float
        :type theNY: float
        :type theNZ: float
        :type theTX: float
        :type theTY: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_AddVertex(self, *args)


    def SetVertice(self, *args):
        """
        SetVertice(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theIndex, gp_Pnt theVertex)
        SetVertice(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theIndex, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ)

        Change the vertice of rank theIndex in the array.

        :type theIndex: int
        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_SetVertice(self, *args)


    def SetVertexColor(self, *args):
        """
        SetVertexColor(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theIndex, Quantity_Color theColor)
        SetVertexColor(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theIndex, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB)
        SetVertexColor(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theIndex, Graphic3d_Vec4ub const & theColor)
        SetVertexColor(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theIndex, Standard_Integer const theColor32)

        Change the vertex color of rank theIndex> in the array.
        @code
        theColor32 = Alpha << 24 + Blue << 16 + Green << 8 + Red
        @endcode

        :type theIndex: int
        :type theColor32: int

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_SetVertexColor(self, *args)


    def SetVertexNormal(self, *args):
        """
        SetVertexNormal(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theIndex, gp_Dir theNormal)
        SetVertexNormal(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theIndex, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ)

        Change the vertex normal of rank theIndex in the array.

        :type theIndex: int
        :type theNX: float
        :type theNY: float
        :type theNZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_SetVertexNormal(self, *args)


    def SetVertexTexel(self, *args):
        """
        SetVertexTexel(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theIndex, gp_Pnt2d theTexel)
        SetVertexTexel(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theIndex, Standard_Real const theTX, Standard_Real const theTY)

        Change the vertex texel of rank theIndex in the array.

        :type theIndex: int
        :type theTX: float
        :type theTY: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_SetVertexTexel(self, *args)


    def Vertice(self, *args):
        """
        Vertice(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theRank) -> gp_Pnt
        Vertice(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theRank)

        Returns the vertice coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_Vertice(self, *args)


    def VertexColor(self, *args):
        """
        VertexColor(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theRank) -> Quantity_Color
        VertexColor(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theIndex, Graphic3d_Vec4ub & theColor)
        VertexColor(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theRank)
        VertexColor(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theRank)

        Returns the vertex color values at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theColor: int

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_VertexColor(self, *args)


    def VertexNormal(self, *args):
        """
        VertexNormal(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theRank) -> gp_Dir
        VertexNormal(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theRank)

        Returns the vertex normal coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theNX: float
        :type theNY: float
        :type theNZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_VertexNormal(self, *args)


    def VertexTexel(self, *args):
        """
        VertexTexel(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theRank) -> gp_Pnt2d
        VertexTexel(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theRank)

        Returns the vertex texture coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theTX: float
        :type theTY: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_VertexTexel(self, *args)


    def Indices(self, *args):
        """
        Returns optional index buffer.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_IndexBuffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_Indices(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def EdgeNumber(self, *args):
        """
        EdgeNumber(Handle_Graphic3d_ArrayOfPolygons self) -> Standard_Integer

        Returns the number of defined edges

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_EdgeNumber(self, *args)


    def Edge(self, *args):
        """
        Edge(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theRank) -> Standard_Integer

        Returns the vertex index at rank theRank in the range [1,EdgeNumber()]

        :type theRank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_Edge(self, *args)


    def AddEdge(self, *args):
        """
        AddEdge(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theVertexIndex) -> Standard_Integer

        Adds an edge in the range [1,VertexNumber()] in the array.
        @return the actual edges number

        :type theVertexIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_AddEdge(self, *args)


    def Bounds(self, *args):
        """
        Returns optional bounds buffer.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_BoundBuffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_Bounds(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasBoundColors(self, *args):
        """
        HasBoundColors(Handle_Graphic3d_ArrayOfPolygons self) -> Standard_Boolean

        Returns TRUE when bound colors array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_HasBoundColors(self, *args)


    def BoundNumber(self, *args):
        """
        BoundNumber(Handle_Graphic3d_ArrayOfPolygons self) -> Standard_Integer

        Returns the number of defined bounds

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_BoundNumber(self, *args)


    def Bound(self, *args):
        """
        Bound(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theRank) -> Standard_Integer

        Returns the edge number at rank theRank.

        :type theRank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_Bound(self, *args)


    def BoundColor(self, *args):
        """
        BoundColor(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theRank) -> Quantity_Color
        BoundColor(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theRank)

        Returns the bound color values at rank theRank from the bound table if defined.

        :type theRank: int
        :type theR: float
        :type theG: float
        :type theB: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_BoundColor(self, *args)


    def AddBound(self, *args):
        """
        AddBound(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theEdgeNumber) -> Standard_Integer
        AddBound(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theEdgeNumber, Quantity_Color theBColor) -> Standard_Integer
        AddBound(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theEdgeNumber, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB) -> Standard_Integer

        Adds a bound of length theEdgeNumber and bound color coordinates in the bound array.
        Warning: <theR,theG,theB> are ignored when the hasBColors constructor parameter is FALSE
        @return the actual bounds number

        :type theEdgeNumber: int
        :type theR: float
        :type theG: float
        :type theB: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_AddBound(self, *args)


    def SetBoundColor(self, *args):
        """
        SetBoundColor(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theIndex, Quantity_Color theColor)
        SetBoundColor(Handle_Graphic3d_ArrayOfPolygons self, Standard_Integer const theIndex, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB)

        Change the bound color of rank theIndex in the array.

        :type theIndex: int
        :type theR: float
        :type theG: float
        :type theB: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_SetBoundColor(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_ArrayOfPolygons self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_ArrayOfPolygons self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_ArrayOfPolygons self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_ArrayOfPolygons self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_ArrayOfPolygons self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_ArrayOfPolygons self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_ArrayOfPolygons self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_ArrayOfPolygons self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_ArrayOfPolygons self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_DecrementRefCounter(self, *args)

Handle_Graphic3d_ArrayOfPolygons_swigregister = _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_swigregister
Handle_Graphic3d_ArrayOfPolygons_swigregister(Handle_Graphic3d_ArrayOfPolygons)

def Handle_Graphic3d_ArrayOfPolygons_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_DownCast(thing)
Handle_Graphic3d_ArrayOfPolygons_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfPolygons_DownCast

class Handle_Graphic3d_Texture2Dplane(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_Texture2Dplane self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_Texture2Dplane self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_Texture2Dplane self, Graphic3d_Texture2Dplane thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_Texture2Dplane self, Handle_Graphic3d_Texture2Dplane theHandle) -> Handle_Graphic3d_Texture2Dplane
        assign(Handle_Graphic3d_Texture2Dplane self, Graphic3d_Texture2Dplane thePtr) -> Handle_Graphic3d_Texture2Dplane
        assign(Handle_Graphic3d_Texture2Dplane self, Handle_Graphic3d_Texture2Dplane theHandle) -> Handle_Graphic3d_Texture2Dplane

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_Texture2Dplane self) -> Graphic3d_Texture2Dplane

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_Texture2Dplane self) -> Graphic3d_Texture2Dplane

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_Texture2Dplane self) -> Graphic3d_Texture2Dplane

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_Texture2Dplane___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_Texture2Dplane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_Texture2Dplane_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_Texture2Dplane

    def SetPlaneS(self, *args):
        """
        SetPlaneS(Handle_Graphic3d_Texture2Dplane self, Standard_ShortReal const A, Standard_ShortReal const B, Standard_ShortReal const C, Standard_ShortReal const D)

        Defines the texture projection plane for texture coordinate S
        default is <1.0, 0.0, 0.0, 0.0>

        :type A: float
        :type B: float
        :type C: float
        :type D: float

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_SetPlaneS(self, *args)


    def SetPlaneT(self, *args):
        """
        SetPlaneT(Handle_Graphic3d_Texture2Dplane self, Standard_ShortReal const A, Standard_ShortReal const B, Standard_ShortReal const C, Standard_ShortReal const D)

        Defines the texture projection plane for texture coordinate T
        default is <0.0, 1.0, 0.0, 0.0>

        :type A: float
        :type B: float
        :type C: float
        :type D: float

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_SetPlaneT(self, *args)


    def SetPlane(self, *args):
        """
        SetPlane(Handle_Graphic3d_Texture2Dplane self, Graphic3d_NameOfTexturePlane const thePlane)

        Defines the texture projection plane for both S and T texture coordinate
        default is NOTP_XY meaning:
        <1.0, 0.0, 0.0, 0.0> for S
        and  <0.0, 1.0, 0.0, 0.0> for T

        :type thePlane: OCC.wrapper.Graphic3d.Graphic3d_NameOfTexturePlane

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_SetPlane(self, *args)


    def SetScaleS(self, *args):
        """
        SetScaleS(Handle_Graphic3d_Texture2Dplane self, Standard_ShortReal const theVal)

        Defines the texture scale for the S texture coordinate
        much easier than recomputing the S plane equation
        but the result is the same
        default to 1.0

        :type theVal: float

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_SetScaleS(self, *args)


    def SetScaleT(self, *args):
        """
        SetScaleT(Handle_Graphic3d_Texture2Dplane self, Standard_ShortReal const theVal)

        Defines the texture scale for the T texture coordinate
        much easier than recompution the T plane equation
        but the result is the same
        default to 1.0

        :type theVal: float

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_SetScaleT(self, *args)


    def SetTranslateS(self, *args):
        """
        SetTranslateS(Handle_Graphic3d_Texture2Dplane self, Standard_ShortReal const theVal)

        Defines the texture translation for the S texture coordinate
        you can obtain the same effect by modifying the S plane
        equation but its not easier.
        default to 0.0

        :type theVal: float

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_SetTranslateS(self, *args)


    def SetTranslateT(self, *args):
        """
        SetTranslateT(Handle_Graphic3d_Texture2Dplane self, Standard_ShortReal const theVal)

        Defines the texture translation for the T texture coordinate
        you can obtain the same effect by modifying the T plane
        equation but its not easier.
        default to 0.0

        :type theVal: float

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_SetTranslateT(self, *args)


    def SetRotation(self, *args):
        """
        SetRotation(Handle_Graphic3d_Texture2Dplane self, Standard_ShortReal const theVal)

        Sets the rotation angle of the whole texture.
        the same result might be achieved by recomputing the
        S and T plane equation but it's not the easiest way...
        the angle is expressed in degrees
        default is 0.0

        :type theVal: float

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_SetRotation(self, *args)


    def Plane(self, *args):
        """
        Plane(Handle_Graphic3d_Texture2Dplane self) -> Graphic3d_NameOfTexturePlane

        Returns the current texture plane name or NOTP_UNKNOWN
        when the plane is user defined.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_NameOfTexturePlane

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_Plane(self, *args)


    def PlaneS(self, *args):
        """
        PlaneS(Handle_Graphic3d_Texture2Dplane self)

        Returns the current texture plane S equation

        :type A: float
        :type B: float
        :type C: float
        :type D: float

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_PlaneS(self, *args)


    def PlaneT(self, *args):
        """
        PlaneT(Handle_Graphic3d_Texture2Dplane self)

        Returns   the current texture plane T equation

        :type A: float
        :type B: float
        :type C: float
        :type D: float

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_PlaneT(self, *args)


    def TranslateS(self, *args):
        """
        TranslateS(Handle_Graphic3d_Texture2Dplane self)

        Returns  the current texture S translation value

        :type theVal: float

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_TranslateS(self, *args)


    def TranslateT(self, *args):
        """
        TranslateT(Handle_Graphic3d_Texture2Dplane self)

        Returns the current texture T translation value

        :type theVal: float

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_TranslateT(self, *args)


    def ScaleS(self, *args):
        """
        ScaleS(Handle_Graphic3d_Texture2Dplane self)

        Returns the current texture S scale value

        :type theVal: float

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_ScaleS(self, *args)


    def ScaleT(self, *args):
        """
        ScaleT(Handle_Graphic3d_Texture2Dplane self)

        Returns the current texture T scale value

        :type theVal: float

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_ScaleT(self, *args)


    def Rotation(self, *args):
        """
        Rotation(Handle_Graphic3d_Texture2Dplane self)

        Returns the current texture rotation angle

        :type theVal: float

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_Rotation(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_Texture2Dplane self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_Texture2Dplane_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_Texture2Dplane_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NumberOfTextures(self, *args):
        """
        NumberOfTextures(Handle_Graphic3d_Texture2Dplane self) -> Standard_Integer

        Returns the number of predefined textures.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_NumberOfTextures(self, *args)


    def TextureName(self, *args):
        """
        TextureName(Handle_Graphic3d_Texture2Dplane self, Standard_Integer const theRank) -> TCollection_AsciiString

        Returns the name of the predefined texture of rank <aRank>

        :type theRank: int
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_TextureName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_Graphic3d_Texture2Dplane self) -> Graphic3d_NameOfTexture2D

        Returns the name of the predefined textures or NOT_2D_UNKNOWN
        when the name is given as a filename.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_NameOfTexture2D

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_Name(self, *args)


    def SetImage(self, *args):
        """
        SetImage(Handle_Graphic3d_Texture2Dplane self, Handle_Image_PixMap thePixMap)

        Assign new image to the texture.
        Note that this method does not invalidate already uploaded resources - consider calling ::UpdateRevision() if needed.

        :type thePixMap: OCC.wrapper.Image.Handle_Image_PixMap

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_SetImage(self, *args)


    def HasMipMaps(self, *args):
        """
        HasMipMaps(Handle_Graphic3d_Texture2Dplane self) -> Standard_Boolean

        Return true if mip-maps should be used.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_HasMipMaps(self, *args)


    def SetMipMaps(self, *args):
        """
        SetMipMaps(Handle_Graphic3d_Texture2Dplane self, Standard_Boolean const theToUse)

        Set if mip-maps should be used (generated if needed).
        Note that this method should be called before loading / using the texture.

        :type theToUse: bool

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_SetMipMaps(self, *args)


    def EnableSmooth(self, *args):
        """
        EnableSmooth(Handle_Graphic3d_Texture2Dplane self)

        enable texture smoothing


        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_EnableSmooth(self, *args)


    def IsSmoothed(self, *args):
        """
        IsSmoothed(Handle_Graphic3d_Texture2Dplane self) -> Standard_Boolean

        Returns TRUE if the texture is smoothed.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_IsSmoothed(self, *args)


    def DisableSmooth(self, *args):
        """
        DisableSmooth(Handle_Graphic3d_Texture2Dplane self)

        disable texture smoothing


        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_DisableSmooth(self, *args)


    def EnableModulate(self, *args):
        """
        EnableModulate(Handle_Graphic3d_Texture2Dplane self)

        enable texture modulate mode.
        the image is modulate with the shading of the surface.


        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_EnableModulate(self, *args)


    def DisableModulate(self, *args):
        """
        DisableModulate(Handle_Graphic3d_Texture2Dplane self)

        disable texture modulate mode.
        the image is directly decal on the surface.


        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_DisableModulate(self, *args)


    def IsModulate(self, *args):
        """
        IsModulate(Handle_Graphic3d_Texture2Dplane self) -> Standard_Boolean

        Returns TRUE if the texture is modulate.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_IsModulate(self, *args)


    def EnableRepeat(self, *args):
        """
        EnableRepeat(Handle_Graphic3d_Texture2Dplane self)

        use this methods if you want to enable
        texture repetition on your objects.


        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_EnableRepeat(self, *args)


    def DisableRepeat(self, *args):
        """
        DisableRepeat(Handle_Graphic3d_Texture2Dplane self)

        use this methods if you want to disable
        texture repetition on your objects.


        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_DisableRepeat(self, *args)


    def IsRepeat(self, *args):
        """
        IsRepeat(Handle_Graphic3d_Texture2Dplane self) -> Standard_Boolean

        Returns TRUE if the texture repeat is enable.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_IsRepeat(self, *args)


    def AnisoFilter(self, *args):
        """
        AnisoFilter(Handle_Graphic3d_Texture2Dplane self) -> Graphic3d_LevelOfTextureAnisotropy

        @return level of anisontropy texture filter.
        Default value is Graphic3d_LOTA_OFF.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_LevelOfTextureAnisotropy

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_AnisoFilter(self, *args)


    def SetAnisoFilter(self, *args):
        """
        SetAnisoFilter(Handle_Graphic3d_Texture2Dplane self, Graphic3d_LevelOfTextureAnisotropy const theLevel)

        @param theLevel level of anisontropy texture filter.

        :type theLevel: OCC.wrapper.Graphic3d.Graphic3d_LevelOfTextureAnisotropy

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_SetAnisoFilter(self, *args)


    def TexturesFolder(self, *args):
        """
        TexturesFolder(Handle_Graphic3d_Texture2Dplane self) -> TCollection_AsciiString

        The path to textures determined from CSF_MDTVTexturesDirectory or CASROOT environment variables.
        @return the root folder with default textures.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_TexturesFolder(self, *args)


    def IsDone(self, *args):
        """
        IsDone(Handle_Graphic3d_Texture2Dplane self) -> Standard_Boolean

        Checks if a texture class is valid or not.
        @return true if the construction of the class is correct

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_IsDone(self, *args)


    def Path(self, *args):
        """
        Returns the full path of the defined texture.
        It could be empty path if GetImage() is overridden to load image not from file.

        :rtype: OCC.wrapper.OSD.OSD_Path

        """
        res = _Graphic3d.Handle_Graphic3d_Texture2Dplane_Path(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Type(self, *args):
        """
        Type(Handle_Graphic3d_Texture2Dplane self) -> Graphic3d_TypeOfTexture

        @return the texture type.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfTexture

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_Type(self, *args)


    def GetId(self, *args):
        """
        This ID will be used to manage resource in graphic driver.

        Default implementation generates unique ID within constructor;
        inheritors may re-initialize it within their constructor,
        but should never modify it afterwards.

        Multiple Graphic3d_TextureRoot instances with same ID
        will be treated as single texture with different parameters
        to optimize memory usage though this will be more natural
        to use same instance of Graphic3d_TextureRoot when possible.

        If this ID is set to empty string by inheritor,
        then independent graphical resource will be created
        for each instance of Graphic3d_AspectFillArea3d where texture will be used.

        @return texture identifier.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Handle_Graphic3d_Texture2Dplane_GetId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Revision(self, *args):
        """
        Revision(Handle_Graphic3d_Texture2Dplane self) -> Standard_Size

        Return image revision.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_Revision(self, *args)


    def UpdateRevision(self, *args):
        """
        UpdateRevision(Handle_Graphic3d_Texture2Dplane self)

        Update image revision.
        Can be used for signaling changes in the texture source (e.g. file update, pixmap update)
        without re-creating texture source itself (since unique id should be never modified).


        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_UpdateRevision(self, *args)


    def GetImage(self, *args):
        """
        GetImage(Handle_Graphic3d_Texture2Dplane self) -> Handle_Image_PixMap

        This method will be called by graphic driver each time when texture resource should be created.
        Default constructors allow defining the texture source as path to texture image or directly as pixmap.
        If the source is defined as path, then the image will be dynamically loaded when this method is called
        (and no copy will be preserved in this class instance).
        Inheritors may dynamically generate the image.
        Notice, image data should be in Bottom-Up order (see Image_PixMap::IsTopDown())!
        @return the image for texture.

        :rtype: OCC.wrapper.Image.Handle_Image_PixMap

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_GetImage(self, *args)


    def GetParams(self, *args):
        """
        @return low-level texture parameters

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureParams

        """
        res = _Graphic3d.Handle_Graphic3d_Texture2Dplane_GetParams(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_Texture2Dplane self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_Texture2Dplane self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_Texture2Dplane self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_Texture2Dplane self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_Texture2Dplane self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_Texture2Dplane self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_Texture2Dplane self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_Texture2Dplane self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_Texture2Dplane self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Texture2Dplane_DecrementRefCounter(self, *args)

Handle_Graphic3d_Texture2Dplane_swigregister = _Graphic3d.Handle_Graphic3d_Texture2Dplane_swigregister
Handle_Graphic3d_Texture2Dplane_swigregister(Handle_Graphic3d_Texture2Dplane)

def Handle_Graphic3d_Texture2Dplane_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_Texture2Dplane_DownCast(thing)
Handle_Graphic3d_Texture2Dplane_DownCast = _Graphic3d.Handle_Graphic3d_Texture2Dplane_DownCast

class Handle_Graphic3d_AspectTextDefinitionError(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_AspectTextDefinitionError self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_AspectTextDefinitionError self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_AspectTextDefinitionError self, Graphic3d_AspectTextDefinitionError thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_AspectTextDefinitionError self, Handle_Graphic3d_AspectTextDefinitionError theHandle) -> Handle_Graphic3d_AspectTextDefinitionError
        assign(Handle_Graphic3d_AspectTextDefinitionError self, Graphic3d_AspectTextDefinitionError thePtr) -> Handle_Graphic3d_AspectTextDefinitionError
        assign(Handle_Graphic3d_AspectTextDefinitionError self, Handle_Graphic3d_AspectTextDefinitionError theHandle) -> Handle_Graphic3d_AspectTextDefinitionError

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_AspectTextDefinitionError self) -> Graphic3d_AspectTextDefinitionError

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_AspectTextDefinitionError self) -> Graphic3d_AspectTextDefinitionError

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_AspectTextDefinitionError self) -> Graphic3d_AspectTextDefinitionError

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_AspectTextDefinitionError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_AspectTextDefinitionError

    def NewInstance(self, *args):
        """
        NewInstance(Handle_Graphic3d_AspectTextDefinitionError self, Standard_CString const theMessage) -> Handle_Graphic3d_AspectTextDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_AspectTextDefinitionError

        """
        return _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_NewInstance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_AspectTextDefinitionError self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Print(self, *args):
        """
        Print(Handle_Graphic3d_AspectTextDefinitionError self, Standard_OStream & s)

        Prints on the stream <s> the exception name followed by
        the error message.
        Level: Advanced
        Warning:
        The operator "OStream& operator<< (Standard_OStream&,
        Handle(Standard_Failure)&)"
        is implemented. (This operator uses the method Print)

        :type s: OCC.wrapper.Standard.Standard_OStream

        """
        return _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_Print(self, *args)


    def GetMessageString(self, *args):
        """
        GetMessageString(Handle_Graphic3d_AspectTextDefinitionError self) -> Standard_CString

        Returns error message

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_GetMessageString(self, *args)


    def SetMessageString(self, *args):
        """
        SetMessageString(Handle_Graphic3d_AspectTextDefinitionError self, Standard_CString const aMessage)

        Sets error message

        :type aMessage: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_SetMessageString(self, *args)


    def Reraise(self, *args):
        """
        Reraise(Handle_Graphic3d_AspectTextDefinitionError self)
        Reraise(Handle_Graphic3d_AspectTextDefinitionError self, Standard_CString const aMessage)
        Reraise(Handle_Graphic3d_AspectTextDefinitionError self, Standard_SStream const & aReason)

        Reraises a caught exception and changes its error message.

        :type aReason: OCC.wrapper.Standard.Standard_SStream

        """
        return _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_Reraise(self, *args)


    def Jump(self, *args):
        """
        Jump(Handle_Graphic3d_AspectTextDefinitionError self)

        Used to throw CASCADE exception from C signal handler.
        On platforms that do not allow throwing C++ exceptions
        from this handler (e.g. Linux), uses longjump to get to
        the current active signal handler, and only then is
        converted to C++ exception.


        """
        return _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_Jump(self, *args)


    def Caught(self, *args):
        """
        Caught(Handle_Graphic3d_AspectTextDefinitionError self) -> Handle_Standard_Failure

        Returns the last caught exception.
        Needed when exceptions are emulated by C longjumps,
        in other cases is also provided for compatibility.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Failure

        """
        return _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_Caught(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_AspectTextDefinitionError self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_AspectTextDefinitionError self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_AspectTextDefinitionError self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_AspectTextDefinitionError self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_AspectTextDefinitionError self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_AspectTextDefinitionError self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_AspectTextDefinitionError self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_AspectTextDefinitionError self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_AspectTextDefinitionError self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_DecrementRefCounter(self, *args)

Handle_Graphic3d_AspectTextDefinitionError_swigregister = _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_swigregister
Handle_Graphic3d_AspectTextDefinitionError_swigregister(Handle_Graphic3d_AspectTextDefinitionError)

def Handle_Graphic3d_AspectTextDefinitionError_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_DownCast(thing)
Handle_Graphic3d_AspectTextDefinitionError_DownCast = _Graphic3d.Handle_Graphic3d_AspectTextDefinitionError_DownCast

class Handle_Graphic3d_TextureMap(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_TextureMap self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_TextureMap self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_TextureMap self, Graphic3d_TextureMap thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_TextureMap self, Handle_Graphic3d_TextureMap theHandle) -> Handle_Graphic3d_TextureMap
        assign(Handle_Graphic3d_TextureMap self, Graphic3d_TextureMap thePtr) -> Handle_Graphic3d_TextureMap
        assign(Handle_Graphic3d_TextureMap self, Handle_Graphic3d_TextureMap theHandle) -> Handle_Graphic3d_TextureMap

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_TextureMap self) -> Graphic3d_TextureMap

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_TextureMap self) -> Graphic3d_TextureMap

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_TextureMap___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_TextureMap self) -> Graphic3d_TextureMap

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_TextureMap___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_TextureMap___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_TextureMap___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_TextureMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_TextureMap_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_TextureMap

    def EnableSmooth(self, *args):
        """
        EnableSmooth(Handle_Graphic3d_TextureMap self)

        enable texture smoothing


        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_EnableSmooth(self, *args)


    def IsSmoothed(self, *args):
        """
        IsSmoothed(Handle_Graphic3d_TextureMap self) -> Standard_Boolean

        Returns TRUE if the texture is smoothed.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_IsSmoothed(self, *args)


    def DisableSmooth(self, *args):
        """
        DisableSmooth(Handle_Graphic3d_TextureMap self)

        disable texture smoothing


        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_DisableSmooth(self, *args)


    def EnableModulate(self, *args):
        """
        EnableModulate(Handle_Graphic3d_TextureMap self)

        enable texture modulate mode.
        the image is modulate with the shading of the surface.


        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_EnableModulate(self, *args)


    def DisableModulate(self, *args):
        """
        DisableModulate(Handle_Graphic3d_TextureMap self)

        disable texture modulate mode.
        the image is directly decal on the surface.


        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_DisableModulate(self, *args)


    def IsModulate(self, *args):
        """
        IsModulate(Handle_Graphic3d_TextureMap self) -> Standard_Boolean

        Returns TRUE if the texture is modulate.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_IsModulate(self, *args)


    def EnableRepeat(self, *args):
        """
        EnableRepeat(Handle_Graphic3d_TextureMap self)

        use this methods if you want to enable
        texture repetition on your objects.


        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_EnableRepeat(self, *args)


    def DisableRepeat(self, *args):
        """
        DisableRepeat(Handle_Graphic3d_TextureMap self)

        use this methods if you want to disable
        texture repetition on your objects.


        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_DisableRepeat(self, *args)


    def IsRepeat(self, *args):
        """
        IsRepeat(Handle_Graphic3d_TextureMap self) -> Standard_Boolean

        Returns TRUE if the texture repeat is enable.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_IsRepeat(self, *args)


    def AnisoFilter(self, *args):
        """
        AnisoFilter(Handle_Graphic3d_TextureMap self) -> Graphic3d_LevelOfTextureAnisotropy

        @return level of anisontropy texture filter.
        Default value is Graphic3d_LOTA_OFF.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_LevelOfTextureAnisotropy

        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_AnisoFilter(self, *args)


    def SetAnisoFilter(self, *args):
        """
        SetAnisoFilter(Handle_Graphic3d_TextureMap self, Graphic3d_LevelOfTextureAnisotropy const theLevel)

        @param theLevel level of anisontropy texture filter.

        :type theLevel: OCC.wrapper.Graphic3d.Graphic3d_LevelOfTextureAnisotropy

        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_SetAnisoFilter(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_TextureMap self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_TextureMap_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_TextureMap_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TexturesFolder(self, *args):
        """
        TexturesFolder(Handle_Graphic3d_TextureMap self) -> TCollection_AsciiString

        The path to textures determined from CSF_MDTVTexturesDirectory or CASROOT environment variables.
        @return the root folder with default textures.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_TexturesFolder(self, *args)


    def IsDone(self, *args):
        """
        IsDone(Handle_Graphic3d_TextureMap self) -> Standard_Boolean

        Checks if a texture class is valid or not.
        @return true if the construction of the class is correct

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_IsDone(self, *args)


    def Path(self, *args):
        """
        Returns the full path of the defined texture.
        It could be empty path if GetImage() is overridden to load image not from file.

        :rtype: OCC.wrapper.OSD.OSD_Path

        """
        res = _Graphic3d.Handle_Graphic3d_TextureMap_Path(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Type(self, *args):
        """
        Type(Handle_Graphic3d_TextureMap self) -> Graphic3d_TypeOfTexture

        @return the texture type.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfTexture

        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_Type(self, *args)


    def GetId(self, *args):
        """
        This ID will be used to manage resource in graphic driver.

        Default implementation generates unique ID within constructor;
        inheritors may re-initialize it within their constructor,
        but should never modify it afterwards.

        Multiple Graphic3d_TextureRoot instances with same ID
        will be treated as single texture with different parameters
        to optimize memory usage though this will be more natural
        to use same instance of Graphic3d_TextureRoot when possible.

        If this ID is set to empty string by inheritor,
        then independent graphical resource will be created
        for each instance of Graphic3d_AspectFillArea3d where texture will be used.

        @return texture identifier.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Handle_Graphic3d_TextureMap_GetId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Revision(self, *args):
        """
        Revision(Handle_Graphic3d_TextureMap self) -> Standard_Size

        Return image revision.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_Revision(self, *args)


    def UpdateRevision(self, *args):
        """
        UpdateRevision(Handle_Graphic3d_TextureMap self)

        Update image revision.
        Can be used for signaling changes in the texture source (e.g. file update, pixmap update)
        without re-creating texture source itself (since unique id should be never modified).


        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_UpdateRevision(self, *args)


    def GetImage(self, *args):
        """
        GetImage(Handle_Graphic3d_TextureMap self) -> Handle_Image_PixMap

        This method will be called by graphic driver each time when texture resource should be created.
        Default constructors allow defining the texture source as path to texture image or directly as pixmap.
        If the source is defined as path, then the image will be dynamically loaded when this method is called
        (and no copy will be preserved in this class instance).
        Inheritors may dynamically generate the image.
        Notice, image data should be in Bottom-Up order (see Image_PixMap::IsTopDown())!
        @return the image for texture.

        :rtype: OCC.wrapper.Image.Handle_Image_PixMap

        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_GetImage(self, *args)


    def GetParams(self, *args):
        """
        @return low-level texture parameters

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureParams

        """
        res = _Graphic3d.Handle_Graphic3d_TextureMap_GetParams(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_TextureMap self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_TextureMap self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_TextureMap self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_TextureMap self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_TextureMap self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_TextureMap self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_TextureMap self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_TextureMap self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_TextureMap self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_TextureMap_DecrementRefCounter(self, *args)

Handle_Graphic3d_TextureMap_swigregister = _Graphic3d.Handle_Graphic3d_TextureMap_swigregister
Handle_Graphic3d_TextureMap_swigregister(Handle_Graphic3d_TextureMap)

def Handle_Graphic3d_TextureMap_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_TextureMap_DownCast(thing)
Handle_Graphic3d_TextureMap_DownCast = _Graphic3d.Handle_Graphic3d_TextureMap_DownCast

class Handle_Graphic3d_ArrayOfTriangleFans(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_ArrayOfTriangleFans self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_ArrayOfTriangleFans self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_ArrayOfTriangleFans self, Graphic3d_ArrayOfTriangleFans thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_ArrayOfTriangleFans self, Handle_Graphic3d_ArrayOfTriangleFans theHandle) -> Handle_Graphic3d_ArrayOfTriangleFans
        assign(Handle_Graphic3d_ArrayOfTriangleFans self, Graphic3d_ArrayOfTriangleFans thePtr) -> Handle_Graphic3d_ArrayOfTriangleFans
        assign(Handle_Graphic3d_ArrayOfTriangleFans self, Handle_Graphic3d_ArrayOfTriangleFans theHandle) -> Handle_Graphic3d_ArrayOfTriangleFans

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_ArrayOfTriangleFans self) -> Graphic3d_ArrayOfTriangleFans

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_ArrayOfTriangleFans self) -> Graphic3d_ArrayOfTriangleFans

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_ArrayOfTriangleFans self) -> Graphic3d_ArrayOfTriangleFans

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_ArrayOfTriangleFans(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_ArrayOfTriangleFans

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_ArrayOfTriangleFans self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Attributes(self, *args):
        """
        Returns vertex attributes buffer (colors, normals, texture coordinates).

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_Buffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_Attributes(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Type(self, *args):
        """
        Type(Handle_Graphic3d_ArrayOfTriangleFans self) -> Graphic3d_TypeOfPrimitiveArray

        Returns the type of this primitive

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfPrimitiveArray

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_Type(self, *args)


    def StringType(self, *args):
        """
        StringType(Handle_Graphic3d_ArrayOfTriangleFans self) -> Standard_CString

        Returns the string type of this primitive

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_StringType(self, *args)


    def HasVertexNormals(self, *args):
        """
        HasVertexNormals(Handle_Graphic3d_ArrayOfTriangleFans self) -> Standard_Boolean

        Returns TRUE when vertex normals array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_HasVertexNormals(self, *args)


    def HasVertexColors(self, *args):
        """
        HasVertexColors(Handle_Graphic3d_ArrayOfTriangleFans self) -> Standard_Boolean

        Returns TRUE when vertex colors array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_HasVertexColors(self, *args)


    def HasVertexTexels(self, *args):
        """
        HasVertexTexels(Handle_Graphic3d_ArrayOfTriangleFans self) -> Standard_Boolean

        Returns TRUE when vertex texels array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_HasVertexTexels(self, *args)


    def VertexNumber(self, *args):
        """
        VertexNumber(Handle_Graphic3d_ArrayOfTriangleFans self) -> Standard_Integer

        Returns the number of defined vertex

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_VertexNumber(self, *args)


    def ItemNumber(self, *args):
        """
        ItemNumber(Handle_Graphic3d_ArrayOfTriangleFans self) -> Standard_Integer

        Returns the number of total items according to the array type.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_ItemNumber(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_Graphic3d_ArrayOfTriangleFans self) -> Standard_Boolean

        Returns TRUE only when the contains of this array is available.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_IsValid(self, *args)


    def AddVertex(self, *args):
        """
        AddVertex(Handle_Graphic3d_ArrayOfTriangleFans self, gp_Pnt theVertex) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleFans self, NCollection_Vec3_Standard_ShortReal theVertex) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleFans self, gp_Pnt theVertex, Quantity_Color theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleFans self, gp_Pnt theVertex, Standard_Integer const theColor32) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleFans self, gp_Pnt theVertex, Graphic3d_Vec4ub const & theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleFans self, gp_Pnt theVertex, gp_Dir theNormal) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theNX, Standard_ShortReal const theNY, Standard_ShortReal const theNZ) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleFans self, gp_Pnt theVertex, gp_Dir theNormal, Quantity_Color theColor) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleFans self, gp_Pnt theVertex, gp_Dir theNormal, Standard_Integer const theColor32) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleFans self, gp_Pnt theVertex, gp_Pnt2d theTexel) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theTX, Standard_Real const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theTX, Standard_ShortReal const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleFans self, gp_Pnt theVertex, gp_Dir theNormal, gp_Pnt2d theTexel) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Real const theX, Standard_Real const theY, Standard_Real const theZ, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ, Standard_Real const theTX, Standard_Real const theTY) -> Standard_Integer
        AddVertex(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ, Standard_ShortReal const theNX, Standard_ShortReal const theNY, Standard_ShortReal const theNZ, Standard_ShortReal const theTX, Standard_ShortReal const theTY) -> Standard_Integer

        Adds a vertice,vertex normal and texture in the vertex array.
        Warning: Normal is ignored when the hasVNormals constructor parameter is FALSE
        and  Texel  is ignored when the hasVTexels  constructor parameter is FALSE.
        @return the actual vertex number

        :type theX: float
        :type theY: float
        :type theZ: float
        :type theNX: float
        :type theNY: float
        :type theNZ: float
        :type theTX: float
        :type theTY: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_AddVertex(self, *args)


    def SetVertice(self, *args):
        """
        SetVertice(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theIndex, gp_Pnt theVertex)
        SetVertice(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theIndex, Standard_ShortReal const theX, Standard_ShortReal const theY, Standard_ShortReal const theZ)

        Change the vertice of rank theIndex in the array.

        :type theIndex: int
        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_SetVertice(self, *args)


    def SetVertexColor(self, *args):
        """
        SetVertexColor(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theIndex, Quantity_Color theColor)
        SetVertexColor(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theIndex, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB)
        SetVertexColor(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theIndex, Graphic3d_Vec4ub const & theColor)
        SetVertexColor(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theIndex, Standard_Integer const theColor32)

        Change the vertex color of rank theIndex> in the array.
        @code
        theColor32 = Alpha << 24 + Blue << 16 + Green << 8 + Red
        @endcode

        :type theIndex: int
        :type theColor32: int

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_SetVertexColor(self, *args)


    def SetVertexNormal(self, *args):
        """
        SetVertexNormal(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theIndex, gp_Dir theNormal)
        SetVertexNormal(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theIndex, Standard_Real const theNX, Standard_Real const theNY, Standard_Real const theNZ)

        Change the vertex normal of rank theIndex in the array.

        :type theIndex: int
        :type theNX: float
        :type theNY: float
        :type theNZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_SetVertexNormal(self, *args)


    def SetVertexTexel(self, *args):
        """
        SetVertexTexel(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theIndex, gp_Pnt2d theTexel)
        SetVertexTexel(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theIndex, Standard_Real const theTX, Standard_Real const theTY)

        Change the vertex texel of rank theIndex in the array.

        :type theIndex: int
        :type theTX: float
        :type theTY: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_SetVertexTexel(self, *args)


    def Vertice(self, *args):
        """
        Vertice(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theRank) -> gp_Pnt
        Vertice(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theRank)

        Returns the vertice coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theX: float
        :type theY: float
        :type theZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_Vertice(self, *args)


    def VertexColor(self, *args):
        """
        VertexColor(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theRank) -> Quantity_Color
        VertexColor(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theIndex, Graphic3d_Vec4ub & theColor)
        VertexColor(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theRank)
        VertexColor(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theRank)

        Returns the vertex color values at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theColor: int

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_VertexColor(self, *args)


    def VertexNormal(self, *args):
        """
        VertexNormal(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theRank) -> gp_Dir
        VertexNormal(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theRank)

        Returns the vertex normal coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theNX: float
        :type theNY: float
        :type theNZ: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_VertexNormal(self, *args)


    def VertexTexel(self, *args):
        """
        VertexTexel(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theRank) -> gp_Pnt2d
        VertexTexel(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theRank)

        Returns the vertex texture coordinates at rank theRank from the vertex table if defined.

        :type theRank: int
        :type theTX: float
        :type theTY: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_VertexTexel(self, *args)


    def Indices(self, *args):
        """
        Returns optional index buffer.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_IndexBuffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_Indices(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def EdgeNumber(self, *args):
        """
        EdgeNumber(Handle_Graphic3d_ArrayOfTriangleFans self) -> Standard_Integer

        Returns the number of defined edges

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_EdgeNumber(self, *args)


    def Edge(self, *args):
        """
        Edge(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theRank) -> Standard_Integer

        Returns the vertex index at rank theRank in the range [1,EdgeNumber()]

        :type theRank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_Edge(self, *args)


    def AddEdge(self, *args):
        """
        AddEdge(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theVertexIndex) -> Standard_Integer

        Adds an edge in the range [1,VertexNumber()] in the array.
        @return the actual edges number

        :type theVertexIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_AddEdge(self, *args)


    def Bounds(self, *args):
        """
        Returns optional bounds buffer.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_BoundBuffer

        """
        res = _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_Bounds(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def HasBoundColors(self, *args):
        """
        HasBoundColors(Handle_Graphic3d_ArrayOfTriangleFans self) -> Standard_Boolean

        Returns TRUE when bound colors array is defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_HasBoundColors(self, *args)


    def BoundNumber(self, *args):
        """
        BoundNumber(Handle_Graphic3d_ArrayOfTriangleFans self) -> Standard_Integer

        Returns the number of defined bounds

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_BoundNumber(self, *args)


    def Bound(self, *args):
        """
        Bound(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theRank) -> Standard_Integer

        Returns the edge number at rank theRank.

        :type theRank: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_Bound(self, *args)


    def BoundColor(self, *args):
        """
        BoundColor(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theRank) -> Quantity_Color
        BoundColor(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theRank)

        Returns the bound color values at rank theRank from the bound table if defined.

        :type theRank: int
        :type theR: float
        :type theG: float
        :type theB: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_BoundColor(self, *args)


    def AddBound(self, *args):
        """
        AddBound(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theEdgeNumber) -> Standard_Integer
        AddBound(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theEdgeNumber, Quantity_Color theBColor) -> Standard_Integer
        AddBound(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theEdgeNumber, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB) -> Standard_Integer

        Adds a bound of length theEdgeNumber and bound color coordinates in the bound array.
        Warning: <theR,theG,theB> are ignored when the hasBColors constructor parameter is FALSE
        @return the actual bounds number

        :type theEdgeNumber: int
        :type theR: float
        :type theG: float
        :type theB: float
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_AddBound(self, *args)


    def SetBoundColor(self, *args):
        """
        SetBoundColor(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theIndex, Quantity_Color theColor)
        SetBoundColor(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_Integer const theIndex, Standard_Real const theR, Standard_Real const theG, Standard_Real const theB)

        Change the bound color of rank theIndex in the array.

        :type theIndex: int
        :type theR: float
        :type theG: float
        :type theB: float

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_SetBoundColor(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_ArrayOfTriangleFans self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_ArrayOfTriangleFans self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_ArrayOfTriangleFans self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_ArrayOfTriangleFans self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_ArrayOfTriangleFans self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_ArrayOfTriangleFans self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_ArrayOfTriangleFans self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_ArrayOfTriangleFans self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_DecrementRefCounter(self, *args)

Handle_Graphic3d_ArrayOfTriangleFans_swigregister = _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_swigregister
Handle_Graphic3d_ArrayOfTriangleFans_swigregister(Handle_Graphic3d_ArrayOfTriangleFans)

def Handle_Graphic3d_ArrayOfTriangleFans_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_DownCast(thing)
Handle_Graphic3d_ArrayOfTriangleFans_DownCast = _Graphic3d.Handle_Graphic3d_ArrayOfTriangleFans_DownCast

class Graphic3d_UniformValue_Standard_ShortReal(object):
    """Describes specific value of custom uniform variable."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, theValue):
        """Describes specific value of custom uniform variable."""
        this = _Graphic3d.new_Graphic3d_UniformValue_Standard_ShortReal(theValue)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def TypeID(self, *args):
        """
        TypeID(Graphic3d_UniformValue_Standard_ShortReal self) -> Standard_Size

        Returns unique identifier of value type.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Graphic3d_UniformValue_Standard_ShortReal_TypeID(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_UniformValue_Standard_ShortReal
Graphic3d_UniformValue_Standard_ShortReal_swigregister = _Graphic3d.Graphic3d_UniformValue_Standard_ShortReal_swigregister
Graphic3d_UniformValue_Standard_ShortReal_swigregister(Graphic3d_UniformValue_Standard_ShortReal)


try:
	Graphic3d_UniformFloat = Graphic3d_UniformValue_Standard_ShortReal
except NameError:
	pass # does not exist, probably ignored

class NCollection_Vec2_Standard_Integer(object):
    """
    Defines the 2D-vector template.
    The main target for this class - to handle raw low-level arrays (from/to graphic driver etc.).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Length(*args):
        """
        Length() -> int

        Returns the number of components.

        :rtype: int

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer_Length(*args)

    Length = staticmethod(Length)

    def __init__(self, *args):
        """
        Defines the 2D-vector template.
        The main target for this class - to handle raw low-level arrays (from/to graphic driver etc.).
        """
        this = _Graphic3d.new_NCollection_Vec2_Standard_Integer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetValues(self, *args):
        """
        SetValues(NCollection_Vec2_Standard_Integer self, int const theX, int const theY)

        Assign new values to the vector.

        :type theX: const Element_t
        :type theY: const Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer_SetValues(self, *args)


    def xy(self, *args):
        """
        xy(NCollection_Vec2_Standard_Integer self) -> NCollection_Vec2_Standard_Integer

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer_xy(self, *args)


    def yx(self, *args):
        """
        yx(NCollection_Vec2_Standard_Integer self) -> NCollection_Vec2_Standard_Integer

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2_Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer_yx(self, *args)


    def x(self, *args):
        """
        x(NCollection_Vec2_Standard_Integer self) -> int
        x(NCollection_Vec2_Standard_Integer self) -> int &

        Alias to 1st component as X coordinate in XY.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer_x(self, *args)


    def y(self, *args):
        """
        y(NCollection_Vec2_Standard_Integer self) -> int
        y(NCollection_Vec2_Standard_Integer self) -> int &

        Alias to 2nd component as Y coordinate in XY.

        :rtype: Element_t &

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer_y(self, *args)


    def IsEqual(self, *args):
        """
        IsEqual(NCollection_Vec2_Standard_Integer self, NCollection_Vec2_Standard_Integer theOther) -> bool

        Check this vector with another vector for equality (without tolerance!).

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer_IsEqual(self, *args)


    def __eq__(self, *args):
        """
        __eq__(NCollection_Vec2_Standard_Integer self, NCollection_Vec2_Standard_Integer theOther) -> bool
        __eq__(NCollection_Vec2_Standard_Integer self, NCollection_Vec2_Standard_Integer theOther) -> bool

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer___eq__(self, *args)


    def __ne__(self, *args):
        """
        __ne__(NCollection_Vec2_Standard_Integer self, NCollection_Vec2_Standard_Integer theOther) -> bool
        __ne__(NCollection_Vec2_Standard_Integer self, NCollection_Vec2_Standard_Integer theOther) -> bool

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: bool

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer___ne__(self, *args)


    def GetData(self, *args):
        """
        GetData(NCollection_Vec2_Standard_Integer self) -> int const *

        Raw access to the data (for OpenGL exchange).

        :rtype: const Element_t *

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer_GetData(self, *args)


    def ChangeData(self, *args):
        """
        ChangeData(NCollection_Vec2_Standard_Integer self) -> int *

        :rtype: Element_t *

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer_ChangeData(self, *args)


    def __iadd__(self, *args):
        """
        __iadd__(NCollection_Vec2_Standard_Integer self, NCollection_Vec2_Standard_Integer theAdd) -> NCollection_Vec2_Standard_Integer

        Compute per-component summary.

        :type theAdd: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer___iadd__(self, *args)


    def __isub__(self, *args):
        """
        __isub__(NCollection_Vec2_Standard_Integer self, NCollection_Vec2_Standard_Integer theDec) -> NCollection_Vec2_Standard_Integer

        Compute per-component subtraction.

        :type theDec: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer___isub__(self, *args)


    def __neg__(self, *args):
        """
        __neg__(NCollection_Vec2_Standard_Integer self) -> NCollection_Vec2_Standard_Integer

        Unary -.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer___neg__(self, *args)


    def Multiply(self, *args):
        """
        Multiply(NCollection_Vec2_Standard_Integer self, int const theFactor)

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer_Multiply(self, *args)


    def Multiplied(self, *args):
        """
        Multiplied(NCollection_Vec2_Standard_Integer self, int const theFactor) -> NCollection_Vec2_Standard_Integer

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer_Multiplied(self, *args)


    def cwiseMin(self, *args):
        """
        cwiseMin(NCollection_Vec2_Standard_Integer self, NCollection_Vec2_Standard_Integer theVec) -> NCollection_Vec2_Standard_Integer

        Compute component-wise minimum of two vectors.

        :type theVec: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer_cwiseMin(self, *args)


    def cwiseMax(self, *args):
        """
        cwiseMax(NCollection_Vec2_Standard_Integer self, NCollection_Vec2_Standard_Integer theVec) -> NCollection_Vec2_Standard_Integer

        Compute component-wise maximum of two vectors.

        :type theVec: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer_cwiseMax(self, *args)


    def cwiseAbs(self, *args):
        """
        cwiseAbs(NCollection_Vec2_Standard_Integer self) -> NCollection_Vec2_Standard_Integer

        Compute component-wise modulus of the vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer_cwiseAbs(self, *args)


    def maxComp(self, *args):
        """
        maxComp(NCollection_Vec2_Standard_Integer self) -> int

        Compute maximum component of the vector.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer_maxComp(self, *args)


    def minComp(self, *args):
        """
        minComp(NCollection_Vec2_Standard_Integer self) -> int

        Compute minimum component of the vector.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer_minComp(self, *args)


    def __imul__(self, *args):
        """
        __imul__(NCollection_Vec2_Standard_Integer self, NCollection_Vec2_Standard_Integer theRight) -> NCollection_Vec2_Standard_Integer
        __imul__(NCollection_Vec2_Standard_Integer self, int const theFactor) -> NCollection_Vec2_Standard_Integer

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer___imul__(self, *args)


    def __itruediv__(self, *args):
        return _Graphic3d.NCollection_Vec2_Standard_Integer___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __mul__(self, *args):
        """
        __mul__(NCollection_Vec2_Standard_Integer self, int const theFactor) -> NCollection_Vec2_Standard_Integer

        Compute per-component multiplication by scale factor.

        :type theFactor: const Element_t
        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer___mul__(self, *args)


    def __truediv__(self, *args):
        return _Graphic3d.NCollection_Vec2_Standard_Integer___truediv__(self, *args)
    __div__ = __truediv__



    def Dot(self, *args):
        """
        Dot(NCollection_Vec2_Standard_Integer self, NCollection_Vec2_Standard_Integer theOther) -> int

        Computes the dot product.

        :type theOther: OCC.wrapper.NCollection.NCollection_Vec2
        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer_Dot(self, *args)


    def Modulus(self, *args):
        """
        Modulus(NCollection_Vec2_Standard_Integer self) -> int

        Computes the vector modulus (magnitude, length).

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer_Modulus(self, *args)


    def SquareModulus(self, *args):
        """
        SquareModulus(NCollection_Vec2_Standard_Integer self) -> int

        Computes the square of vector modulus (magnitude, length).
        This method may be used for performance tricks.

        :rtype: Element_t

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer_SquareModulus(self, *args)


    def DX(*args):
        """
        DX() -> NCollection_Vec2_Standard_Integer

        Constuct DX unit vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer_DX(*args)

    DX = staticmethod(DX)

    def DY(*args):
        """
        DY() -> NCollection_Vec2_Standard_Integer

        Constuct DY unit vector.

        :rtype: OCC.wrapper.NCollection.NCollection_Vec2

        """
        return _Graphic3d.NCollection_Vec2_Standard_Integer_DY(*args)

    DY = staticmethod(DY)
    __swig_destroy__ = _Graphic3d.delete_NCollection_Vec2_Standard_Integer
NCollection_Vec2_Standard_Integer_swigregister = _Graphic3d.NCollection_Vec2_Standard_Integer_swigregister
NCollection_Vec2_Standard_Integer_swigregister(NCollection_Vec2_Standard_Integer)

def NCollection_Vec2_Standard_Integer_Length(*args):
    """
    NCollection_Vec2_Standard_Integer_Length() -> int

    Returns the number of components.

    :rtype: int

    """
    return _Graphic3d.NCollection_Vec2_Standard_Integer_Length(*args)

def NCollection_Vec2_Standard_Integer_DX(*args):
    """
    NCollection_Vec2_Standard_Integer_DX() -> NCollection_Vec2_Standard_Integer

    Constuct DX unit vector.

    :rtype: OCC.wrapper.NCollection.NCollection_Vec2

    """
    return _Graphic3d.NCollection_Vec2_Standard_Integer_DX(*args)

def NCollection_Vec2_Standard_Integer_DY(*args):
    """
    NCollection_Vec2_Standard_Integer_DY() -> NCollection_Vec2_Standard_Integer

    Constuct DY unit vector.

    :rtype: OCC.wrapper.NCollection.NCollection_Vec2

    """
    return _Graphic3d.NCollection_Vec2_Standard_Integer_DY(*args)


try:
	Graphic3d_Vec2i = NCollection_Vec2_Standard_Integer
except NameError:
	pass # does not exist, probably ignored

class Graphic3d_CameraTile(object):
    """Class defines the area (Tile) inside a view."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Graphic3d_CameraTile self) -> Graphic3d_CameraTile

        Default constructor.
        Initializes the empty Tile of zero size and lower-left offset orientation.
        Such Tile is considered uninitialized (invalid).


        """
        this = _Graphic3d.new_Graphic3d_CameraTile(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsValid(self, *args):
        """
        IsValid(Graphic3d_CameraTile self) -> bool

        Return true if Tile has been defined.

        :rtype: bool

        """
        return _Graphic3d.Graphic3d_CameraTile_IsValid(self, *args)


    def OffsetLowerLeft(self, *args):
        """
        OffsetLowerLeft(Graphic3d_CameraTile self) -> NCollection_Vec2_Standard_Integer

        Return offset position from lower-left corner.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Vec2i

        """
        return _Graphic3d.Graphic3d_CameraTile_OffsetLowerLeft(self, *args)


    def Cropped(self, *args):
        """
        Cropped(Graphic3d_CameraTile self) -> Graphic3d_CameraTile

        Return the copy cropped by total size

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_CameraTile

        """
        return _Graphic3d.Graphic3d_CameraTile_Cropped(self, *args)


    def __eq__(self, *args):
        """
        __eq__(Graphic3d_CameraTile self, Graphic3d_CameraTile theOther) -> bool

        Equality check.

        :type theOther: OCC.wrapper.Graphic3d.Graphic3d_CameraTile
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_CameraTile___eq__(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_CameraTile
Graphic3d_CameraTile_swigregister = _Graphic3d.Graphic3d_CameraTile_swigregister
Graphic3d_CameraTile_swigregister(Graphic3d_CameraTile)

class Graphic3d_AspectMarker3d(Standard.Standard_Transient):
    """
    Creates and updates an attribute group for marker type primitives.
    This group contains the type of marker, its color, and its scale factor.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Graphic3d_AspectMarker3d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Graphic3d_AspectMarker3d(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Graphic3d_AspectMarker3d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Graphic3d.Graphic3d_AspectMarker3d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Graphic3d_AspectMarker3d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self, *args):
        """
        __init__(Graphic3d_AspectMarker3d self) -> Graphic3d_AspectMarker3d
        __init__(Graphic3d_AspectMarker3d self, Aspect_TypeOfMarker const theType, Quantity_Color theColor, Standard_Real const theScale) -> Graphic3d_AspectMarker3d
        __init__(Graphic3d_AspectMarker3d self, Quantity_Color theColor, Standard_Integer const theWidth, Standard_Integer const theHeight, Handle_TColStd_HArray1OfByte theTextureBitmap) -> Graphic3d_AspectMarker3d
        __init__(Graphic3d_AspectMarker3d self, Handle_Image_PixMap theTextureImage) -> Graphic3d_AspectMarker3d

        Creates a context table for marker primitives
        defined with the specified values.

        :type theTextureImage: OCC.wrapper.Image.Handle_Image_PixMap

        """
        this = _Graphic3d.new_Graphic3d_AspectMarker3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def ColorRGBA(self, *args):
        """
        Return color.

        :rtype: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        res = _Graphic3d.Graphic3d_AspectMarker3d_ColorRGBA(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Color(self, *args):
        """
        Return the color.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Graphic3d_AspectMarker3d_Color(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetColor(self, *args):
        """
        SetColor(Graphic3d_AspectMarker3d self, Quantity_Color theColor)

        Modifies the color.

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Graphic3d.Graphic3d_AspectMarker3d_SetColor(self, *args)


    def Scale(self, *args):
        """
        Scale(Graphic3d_AspectMarker3d self) -> Standard_ShortReal

        Return scale factor.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Graphic3d_AspectMarker3d_Scale(self, *args)


    def SetScale(self, *args):
        """
        SetScale(Graphic3d_AspectMarker3d self, Standard_ShortReal const theScale)
        SetScale(Graphic3d_AspectMarker3d self, Standard_Real const theScale)

        Assign scale factor.

        :type theScale: float

        """
        return _Graphic3d.Graphic3d_AspectMarker3d_SetScale(self, *args)


    def Type(self, *args):
        """
        Type(Graphic3d_AspectMarker3d self) -> Aspect_TypeOfMarker

        Return marker type.

        :rtype: OCC.wrapper.Aspect.Aspect_TypeOfMarker

        """
        return _Graphic3d.Graphic3d_AspectMarker3d_Type(self, *args)


    def SetType(self, *args):
        """
        SetType(Graphic3d_AspectMarker3d self, Aspect_TypeOfMarker const theType)

        Modifies the type of marker.

        :type theType: OCC.wrapper.Aspect.Aspect_TypeOfMarker

        """
        return _Graphic3d.Graphic3d_AspectMarker3d_SetType(self, *args)


    def GetTextureSize(self, *args):
        """
        GetTextureSize(Graphic3d_AspectMarker3d self)

        Returns marker's texture size.

        :type theWidth: int
        :type theHeight: int

        """
        return _Graphic3d.Graphic3d_AspectMarker3d_GetTextureSize(self, *args)


    def GetMarkerImage(self, *args):
        """
        Returns marker's image texture.
        Could be null handle if marker aspect has been initialized as default type of marker.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_MarkerImage

        """
        res = _Graphic3d.Graphic3d_AspectMarker3d_GetMarkerImage(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetMarkerImage(self, *args):
        """
        SetMarkerImage(Graphic3d_AspectMarker3d self, Handle_Graphic3d_MarkerImage theImage)

        Set marker's image texture.

        :type theImage: OCC.wrapper.Graphic3d.Handle_Graphic3d_MarkerImage

        """
        return _Graphic3d.Graphic3d_AspectMarker3d_SetMarkerImage(self, *args)


    def SetBitMap(self, *args):
        """
        SetBitMap(Graphic3d_AspectMarker3d self, Standard_Integer const theWidth, Standard_Integer const theHeight, Handle_TColStd_HArray1OfByte theTexture)

        :type theWidth: int
        :type theHeight: int
        :type theTexture: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfByte

        """
        return _Graphic3d.Graphic3d_AspectMarker3d_SetBitMap(self, *args)


    def ShaderProgram(self, *args):
        """
        Return the program.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderProgram

        """
        res = _Graphic3d.Graphic3d_AspectMarker3d_ShaderProgram(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetShaderProgram(self, *args):
        """
        SetShaderProgram(Graphic3d_AspectMarker3d self, Handle_Graphic3d_ShaderProgram theProgram)

        Sets up OpenGL/GLSL shader program.

        :type theProgram: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderProgram

        """
        return _Graphic3d.Graphic3d_AspectMarker3d_SetShaderProgram(self, *args)


    def Values(self, *args):
        """
        Values(Graphic3d_AspectMarker3d self, Quantity_Color theColor)

        Returns the current values of the group.

        :type theColor: OCC.wrapper.Quantity.Quantity_Color
        :type theType: OCC.wrapper.Aspect.Aspect_TypeOfMarker
        :type theScale: float

        """
        return _Graphic3d.Graphic3d_AspectMarker3d_Values(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_AspectMarker3d
Graphic3d_AspectMarker3d_swigregister = _Graphic3d.Graphic3d_AspectMarker3d_swigregister
Graphic3d_AspectMarker3d_swigregister(Graphic3d_AspectMarker3d)

def Graphic3d_AspectMarker3d_get_type_name(*args):
    """
    Graphic3d_AspectMarker3d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Graphic3d.Graphic3d_AspectMarker3d_get_type_name(*args)

def Graphic3d_AspectMarker3d_get_type_descriptor(*args):
    """
    Graphic3d_AspectMarker3d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Graphic3d.Graphic3d_AspectMarker3d_get_type_descriptor(*args)

class NCollection_Sequence_Handle_Graphic3d_ShaderVariable(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self) -> NCollection_Sequence< opencascade::handle< Graphic3d_ShaderVariable > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self) -> NCollection_Sequence< opencascade::handle< Graphic3d_ShaderVariable > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self) -> NCollection_Sequence< opencascade::handle< Graphic3d_ShaderVariable > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self) -> NCollection_Sequence< opencascade::handle< Graphic3d_ShaderVariable > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _Graphic3d.new_NCollection_Sequence_Handle_Graphic3d_ShaderVariable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self)

        Reverse sequence


        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self, NCollection_Sequence_Handle_Graphic3d_ShaderVariable theOther) -> NCollection_Sequence_Handle_Graphic3d_ShaderVariable

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self, NCollection_Sequence_Handle_Graphic3d_ShaderVariable theOther) -> NCollection_Sequence_Handle_Graphic3d_ShaderVariable

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self, NCollection_Sequence< opencascade::handle< Graphic3d_ShaderVariable > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self, Handle_Graphic3d_ShaderVariable theItem)
        Append(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self, NCollection_Sequence_Handle_Graphic3d_ShaderVariable theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self, Handle_Graphic3d_ShaderVariable theItem)
        Prepend(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self, NCollection_Sequence_Handle_Graphic3d_ShaderVariable theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self, Standard_Integer const theIndex, Handle_Graphic3d_ShaderVariable theItem)
        InsertBefore(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Graphic3d_ShaderVariable theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self, NCollection_Sequence< opencascade::handle< Graphic3d_ShaderVariable > >::Iterator & thePosition, Handle_Graphic3d_ShaderVariable theItem)
        InsertAfter(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Graphic3d_ShaderVariable theSeq)
        InsertAfter(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self, Standard_Integer const theIndex, Handle_Graphic3d_ShaderVariable theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Graphic3d_ShaderVariable theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self) -> Handle_Graphic3d_ShaderVariable

        First item access

        :rtype: TheItemType &

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self) -> Handle_Graphic3d_ShaderVariable

        Last item access

        :rtype: TheItemType &

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self, Standard_Integer const theIndex) -> Handle_Graphic3d_ShaderVariable

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_Graphic3d_ShaderVariable self, Standard_Integer const theIndex, Handle_Graphic3d_ShaderVariable theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_SetValue(self, *args)


    def __iter__(self):
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable___iter__(self)
    __swig_destroy__ = _Graphic3d.delete_NCollection_Sequence_Handle_Graphic3d_ShaderVariable
NCollection_Sequence_Handle_Graphic3d_ShaderVariable_swigregister = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_swigregister
NCollection_Sequence_Handle_Graphic3d_ShaderVariable_swigregister(NCollection_Sequence_Handle_Graphic3d_ShaderVariable)

def NCollection_Sequence_Handle_Graphic3d_ShaderVariable_delNode(*args):
    """
    NCollection_Sequence_Handle_Graphic3d_ShaderVariable_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_delNode(*args)

class NCollection_Sequence_Handle_Graphic3d_ShaderVariable_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _Graphic3d.new_NCollection_Sequence_Handle_Graphic3d_ShaderVariable_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Graphic3d.delete_NCollection_Sequence_Handle_Graphic3d_ShaderVariable_IteratorHelper

    def __next__(self):
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_IteratorHelper___next__(self)
NCollection_Sequence_Handle_Graphic3d_ShaderVariable_IteratorHelper_swigregister = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_ShaderVariable_IteratorHelper_swigregister
NCollection_Sequence_Handle_Graphic3d_ShaderVariable_IteratorHelper_swigregister(NCollection_Sequence_Handle_Graphic3d_ShaderVariable_IteratorHelper)


try:
	Graphic3d_ShaderVariableList = NCollection_Sequence_Handle_Graphic3d_ShaderVariable
except NameError:
	pass # does not exist, probably ignored

class Graphic3d_WorldViewProjState(object):
    """
    Helper class for keeping reference on world-view-projection state.
    Helpful for synchronizing state of WVP dependent data structures.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Graphic3d_WorldViewProjState self) -> Graphic3d_WorldViewProjState
        __init__(Graphic3d_WorldViewProjState self, Standard_Size const theProjectionState, Standard_Size const theWorldViewState, Standard_Transient theCamera=None) -> Graphic3d_WorldViewProjState

        Constructor for custom projector type.
        @param theProjectionState [in] the projection state.
        @param theWorldViewState [in] the world view state.
        @param theCamera [in] the pointer to the class supplying projection and
        world view matrices (camera).

        :type theProjectionState: int
        :type theWorldViewState: int
        :type theCamera: OCC.wrapper.Standard.Standard_Transient

        """
        this = _Graphic3d.new_Graphic3d_WorldViewProjState(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def IsValid(self, *args):
        """
        IsValid(Graphic3d_WorldViewProjState self) -> Standard_Boolean

        Check state validity.
        @return true if state is set.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_WorldViewProjState_IsValid(self, *args)


    def Reset(self, *args):
        """
        Reset(Graphic3d_WorldViewProjState self)

        Invalidate world view projection state.


        """
        return _Graphic3d.Graphic3d_WorldViewProjState_Reset(self, *args)


    def Initialize(self, *args):
        """
        Initialize(Graphic3d_WorldViewProjState self, Standard_Size const theProjectionState, Standard_Size const theWorldViewState, Standard_Transient theCamera=None)
        Initialize(Graphic3d_WorldViewProjState self, Standard_Transient theCamera=None)

        Initialize world view projection state.

        :type theCamera: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Graphic3d_WorldViewProjState_Initialize(self, *args)


    def ProjectionState(self, *args):
        """
        ProjectionState(Graphic3d_WorldViewProjState self) -> Standard_Size &

        @return projection state counter.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Graphic3d_WorldViewProjState_ProjectionState(self, *args)


    def WorldViewState(self, *args):
        """
        WorldViewState(Graphic3d_WorldViewProjState self) -> Standard_Size &

        @return world view state counter.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Graphic3d_WorldViewProjState_WorldViewState(self, *args)


    def IsProjectionChanged(self, *args):
        """
        IsProjectionChanged(Graphic3d_WorldViewProjState self, Graphic3d_WorldViewProjState theState) -> Standard_Boolean

        Compare projection with other state.
        @return true when the projection of the given camera state differs from this one.

        :type theState: OCC.wrapper.Graphic3d.Graphic3d_WorldViewProjState
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_WorldViewProjState_IsProjectionChanged(self, *args)


    def IsWorldViewChanged(self, *args):
        """
        IsWorldViewChanged(Graphic3d_WorldViewProjState self, Graphic3d_WorldViewProjState theState) -> Standard_Boolean

        Compare world view transformation with other state.
        @return true when the orientation of the given camera state differs from this one.

        :type theState: OCC.wrapper.Graphic3d.Graphic3d_WorldViewProjState
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_WorldViewProjState_IsWorldViewChanged(self, *args)


    def IsChanged(self, *args):
        """
        IsChanged(Graphic3d_WorldViewProjState self, Graphic3d_WorldViewProjState theState) -> Standard_Boolean

        Compare with other world view projection state.
        @return true when the projection of the given camera state differs from this one.

        :type theState: OCC.wrapper.Graphic3d.Graphic3d_WorldViewProjState
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Graphic3d_WorldViewProjState_IsChanged(self, *args)


    def __ne__(self, *args):
        """
        __ne__(Graphic3d_WorldViewProjState self, Graphic3d_WorldViewProjState theOther) -> bool

        Compare with other world view projection state.
        @return true if the other projection state is different to this one.

        :type theOther: OCC.wrapper.Graphic3d.Graphic3d_WorldViewProjState
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_WorldViewProjState___ne__(self, *args)


    def __eq__(self, *args):
        """
        __eq__(Graphic3d_WorldViewProjState self, Graphic3d_WorldViewProjState theOther) -> bool

        Compare with other world view projection state.
        @return true if the other projection state is equal to this one.

        :type theOther: OCC.wrapper.Graphic3d.Graphic3d_WorldViewProjState
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_WorldViewProjState___eq__(self, *args)


    def assign(self, *args):
        """
        assign(Graphic3d_WorldViewProjState self, Graphic3d_WorldViewProjState theOther)

        Copy world view projection state.

        :type theOther: OCC.wrapper.Graphic3d.Graphic3d_WorldViewProjState

        """
        return _Graphic3d.Graphic3d_WorldViewProjState_assign(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_WorldViewProjState
Graphic3d_WorldViewProjState_swigregister = _Graphic3d.Graphic3d_WorldViewProjState_swigregister
Graphic3d_WorldViewProjState_swigregister(Graphic3d_WorldViewProjState)

class Graphic3d_Fresnel(object):
    """Describes Fresnel reflectance parameters."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Graphic3d_Fresnel self) -> Graphic3d_Fresnel

        Creates uninitialized Fresnel factor.


        """
        this = _Graphic3d.new_Graphic3d_Fresnel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CreateSchlick(*args):
        """
        CreateSchlick(NCollection_Vec3_Standard_ShortReal theSpecularColor) -> Graphic3d_Fresnel

        Creates Schlick's approximation of Fresnel factor.

        :type theSpecularColor: OCC.wrapper.Graphic3d.Graphic3d_Vec3
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Fresnel

        """
        return _Graphic3d.Graphic3d_Fresnel_CreateSchlick(*args)

    CreateSchlick = staticmethod(CreateSchlick)

    def CreateConstant(*args):
        """
        CreateConstant(Standard_ShortReal const theReflection) -> Graphic3d_Fresnel

        Creates Fresnel factor for constant reflection.

        :type theReflection: float
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Fresnel

        """
        return _Graphic3d.Graphic3d_Fresnel_CreateConstant(*args)

    CreateConstant = staticmethod(CreateConstant)

    def CreateDielectric(*args):
        """
        CreateDielectric(Standard_ShortReal theRefractionIndex) -> Graphic3d_Fresnel

        Creates Fresnel factor for physical-based dielectric model.

        :type theRefractionIndex: float
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Fresnel

        """
        return _Graphic3d.Graphic3d_Fresnel_CreateDielectric(*args)

    CreateDielectric = staticmethod(CreateDielectric)

    def CreateConductor(*args):
        """
        CreateConductor(Standard_ShortReal theRefractionIndex, Standard_ShortReal theAbsorptionIndex) -> Graphic3d_Fresnel
        CreateConductor(NCollection_Vec3_Standard_ShortReal theRefractionIndex, NCollection_Vec3_Standard_ShortReal theAbsorptionIndex) -> Graphic3d_Fresnel

        Creates Fresnel factor for physical-based conductor model (spectral version).

        :type theRefractionIndex: OCC.wrapper.Graphic3d.Graphic3d_Vec3
        :type theAbsorptionIndex: OCC.wrapper.Graphic3d.Graphic3d_Vec3
        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Fresnel

        """
        return _Graphic3d.Graphic3d_Fresnel_CreateConductor(*args)

    CreateConductor = staticmethod(CreateConductor)

    def Serialize(self, *args):
        """
        Serialize(Graphic3d_Fresnel self) -> Graphic3d_Vec4

        Returns serialized representation of Fresnel factor.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_Vec4

        """
        return _Graphic3d.Graphic3d_Fresnel_Serialize(self, *args)


    def __eq__(self, *args):
        """
        __eq__(Graphic3d_Fresnel self, Graphic3d_Fresnel theOther) -> bool

        Performs comparison of two objects describing Fresnel factor.

        :type theOther: OCC.wrapper.Graphic3d.Graphic3d_Fresnel
        :rtype: bool

        """
        return _Graphic3d.Graphic3d_Fresnel___eq__(self, *args)


    def FresnelType(self, *args):
        """
        FresnelType(Graphic3d_Fresnel self) -> Graphic3d_FresnelModel

        Returns type of Fresnel.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_FresnelModel

        """
        return _Graphic3d.Graphic3d_Fresnel_FresnelType(self, *args)

    __swig_destroy__ = _Graphic3d.delete_Graphic3d_Fresnel
Graphic3d_Fresnel_swigregister = _Graphic3d.Graphic3d_Fresnel_swigregister
Graphic3d_Fresnel_swigregister(Graphic3d_Fresnel)

def Graphic3d_Fresnel_CreateSchlick(*args):
    """
    Graphic3d_Fresnel_CreateSchlick(NCollection_Vec3_Standard_ShortReal theSpecularColor) -> Graphic3d_Fresnel

    Creates Schlick's approximation of Fresnel factor.

    :type theSpecularColor: OCC.wrapper.Graphic3d.Graphic3d_Vec3
    :rtype: OCC.wrapper.Graphic3d.Graphic3d_Fresnel

    """
    return _Graphic3d.Graphic3d_Fresnel_CreateSchlick(*args)

def Graphic3d_Fresnel_CreateConstant(*args):
    """
    Graphic3d_Fresnel_CreateConstant(Standard_ShortReal const theReflection) -> Graphic3d_Fresnel

    Creates Fresnel factor for constant reflection.

    :type theReflection: float
    :rtype: OCC.wrapper.Graphic3d.Graphic3d_Fresnel

    """
    return _Graphic3d.Graphic3d_Fresnel_CreateConstant(*args)

def Graphic3d_Fresnel_CreateDielectric(*args):
    """
    Graphic3d_Fresnel_CreateDielectric(Standard_ShortReal theRefractionIndex) -> Graphic3d_Fresnel

    Creates Fresnel factor for physical-based dielectric model.

    :type theRefractionIndex: float
    :rtype: OCC.wrapper.Graphic3d.Graphic3d_Fresnel

    """
    return _Graphic3d.Graphic3d_Fresnel_CreateDielectric(*args)

def Graphic3d_Fresnel_CreateConductor(*args):
    """
    CreateConductor(Standard_ShortReal theRefractionIndex, Standard_ShortReal theAbsorptionIndex) -> Graphic3d_Fresnel
    Graphic3d_Fresnel_CreateConductor(NCollection_Vec3_Standard_ShortReal theRefractionIndex, NCollection_Vec3_Standard_ShortReal theAbsorptionIndex) -> Graphic3d_Fresnel

    Creates Fresnel factor for physical-based conductor model (spectral version).

    :type theRefractionIndex: OCC.wrapper.Graphic3d.Graphic3d_Vec3
    :type theAbsorptionIndex: OCC.wrapper.Graphic3d.Graphic3d_Vec3
    :rtype: OCC.wrapper.Graphic3d.Graphic3d_Fresnel

    """
    return _Graphic3d.Graphic3d_Fresnel_CreateConductor(*args)

class Handle_Graphic3d_SequenceOfHClipPlane(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_SequenceOfHClipPlane self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_SequenceOfHClipPlane self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_SequenceOfHClipPlane self, Graphic3d_SequenceOfHClipPlane thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_SequenceOfHClipPlane self, Handle_Graphic3d_SequenceOfHClipPlane theHandle) -> Handle_Graphic3d_SequenceOfHClipPlane
        assign(Handle_Graphic3d_SequenceOfHClipPlane self, Graphic3d_SequenceOfHClipPlane thePtr) -> Handle_Graphic3d_SequenceOfHClipPlane
        assign(Handle_Graphic3d_SequenceOfHClipPlane self, Handle_Graphic3d_SequenceOfHClipPlane theHandle) -> Handle_Graphic3d_SequenceOfHClipPlane

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_SequenceOfHClipPlane self) -> Graphic3d_SequenceOfHClipPlane

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_SequenceOfHClipPlane self) -> Graphic3d_SequenceOfHClipPlane

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_SequenceOfHClipPlane self) -> Graphic3d_SequenceOfHClipPlane

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_SequenceOfHClipPlane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_SequenceOfHClipPlane

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_SequenceOfHClipPlane self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ToOverrideGlobal(self, *args):
        """
        ToOverrideGlobal(Handle_Graphic3d_SequenceOfHClipPlane self) -> Standard_Boolean

        Return true if local properties should override global properties.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane_ToOverrideGlobal(self, *args)


    def SetOverrideGlobal(self, *args):
        """
        SetOverrideGlobal(Handle_Graphic3d_SequenceOfHClipPlane self, Standard_Boolean const theToOverride)

        Setup flag defining if local properties should override global properties.

        :type theToOverride: bool

        """
        return _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane_SetOverrideGlobal(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_SequenceOfHClipPlane self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_SequenceOfHClipPlane self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_SequenceOfHClipPlane self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_SequenceOfHClipPlane self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_SequenceOfHClipPlane self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_SequenceOfHClipPlane self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_SequenceOfHClipPlane self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_SequenceOfHClipPlane self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_SequenceOfHClipPlane self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane_DecrementRefCounter(self, *args)

Handle_Graphic3d_SequenceOfHClipPlane_swigregister = _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane_swigregister
Handle_Graphic3d_SequenceOfHClipPlane_swigregister(Handle_Graphic3d_SequenceOfHClipPlane)

def Handle_Graphic3d_SequenceOfHClipPlane_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane_DownCast(thing)
Handle_Graphic3d_SequenceOfHClipPlane_DownCast = _Graphic3d.Handle_Graphic3d_SequenceOfHClipPlane_DownCast

class NCollection_Sequence_Handle_Graphic3d_Structure(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_Graphic3d_Structure self) -> NCollection_Sequence< opencascade::handle< Graphic3d_Structure > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_Graphic3d_Structure self) -> NCollection_Sequence< opencascade::handle< Graphic3d_Structure > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_Graphic3d_Structure self) -> NCollection_Sequence< opencascade::handle< Graphic3d_Structure > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_Graphic3d_Structure self) -> NCollection_Sequence< opencascade::handle< Graphic3d_Structure > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _Graphic3d.new_NCollection_Sequence_Handle_Graphic3d_Structure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_Graphic3d_Structure self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_Graphic3d_Structure self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_Graphic3d_Structure self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_Graphic3d_Structure self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_Graphic3d_Structure self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_Graphic3d_Structure self)

        Reverse sequence


        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_Graphic3d_Structure self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_Graphic3d_Structure self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_Graphic3d_Structure self, NCollection_Sequence_Handle_Graphic3d_Structure theOther) -> NCollection_Sequence_Handle_Graphic3d_Structure

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_Graphic3d_Structure self, NCollection_Sequence_Handle_Graphic3d_Structure theOther) -> NCollection_Sequence_Handle_Graphic3d_Structure

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_Graphic3d_Structure self, NCollection_Sequence< opencascade::handle< Graphic3d_Structure > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_Graphic3d_Structure self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_Graphic3d_Structure self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_Graphic3d_Structure self, Handle_Graphic3d_Structure theItem)
        Append(NCollection_Sequence_Handle_Graphic3d_Structure self, NCollection_Sequence_Handle_Graphic3d_Structure theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_Graphic3d_Structure self, Handle_Graphic3d_Structure theItem)
        Prepend(NCollection_Sequence_Handle_Graphic3d_Structure self, NCollection_Sequence_Handle_Graphic3d_Structure theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_Graphic3d_Structure self, Standard_Integer const theIndex, Handle_Graphic3d_Structure theItem)
        InsertBefore(NCollection_Sequence_Handle_Graphic3d_Structure self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Graphic3d_Structure theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_Graphic3d_Structure self, NCollection_Sequence< opencascade::handle< Graphic3d_Structure > >::Iterator & thePosition, Handle_Graphic3d_Structure theItem)
        InsertAfter(NCollection_Sequence_Handle_Graphic3d_Structure self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Graphic3d_Structure theSeq)
        InsertAfter(NCollection_Sequence_Handle_Graphic3d_Structure self, Standard_Integer const theIndex, Handle_Graphic3d_Structure theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_Graphic3d_Structure self, Standard_Integer const theIndex, NCollection_Sequence_Handle_Graphic3d_Structure theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_Graphic3d_Structure self) -> Handle_Graphic3d_Structure

        First item access

        :rtype: TheItemType &

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_Graphic3d_Structure self) -> Handle_Graphic3d_Structure

        Last item access

        :rtype: TheItemType &

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_Graphic3d_Structure self, Standard_Integer const theIndex) -> Handle_Graphic3d_Structure

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_Graphic3d_Structure self, Standard_Integer const theIndex, Handle_Graphic3d_Structure theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_SetValue(self, *args)


    def __iter__(self):
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure___iter__(self)
    __swig_destroy__ = _Graphic3d.delete_NCollection_Sequence_Handle_Graphic3d_Structure
NCollection_Sequence_Handle_Graphic3d_Structure_swigregister = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_swigregister
NCollection_Sequence_Handle_Graphic3d_Structure_swigregister(NCollection_Sequence_Handle_Graphic3d_Structure)

def NCollection_Sequence_Handle_Graphic3d_Structure_delNode(*args):
    """
    NCollection_Sequence_Handle_Graphic3d_Structure_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_delNode(*args)

class NCollection_Sequence_Handle_Graphic3d_Structure_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _Graphic3d.new_NCollection_Sequence_Handle_Graphic3d_Structure_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Graphic3d.delete_NCollection_Sequence_Handle_Graphic3d_Structure_IteratorHelper

    def __next__(self):
        return _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_IteratorHelper___next__(self)
NCollection_Sequence_Handle_Graphic3d_Structure_IteratorHelper_swigregister = _Graphic3d.NCollection_Sequence_Handle_Graphic3d_Structure_IteratorHelper_swigregister
NCollection_Sequence_Handle_Graphic3d_Structure_IteratorHelper_swigregister(NCollection_Sequence_Handle_Graphic3d_Structure_IteratorHelper)


try:
	Graphic3d_SequenceOfStructure = NCollection_Sequence_Handle_Graphic3d_Structure
except NameError:
	pass # does not exist, probably ignored

class Handle_Graphic3d_Texture2D(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_Texture2D self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_Texture2D self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_Texture2D self, Graphic3d_Texture2D thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_Texture2D self, Handle_Graphic3d_Texture2D theHandle) -> Handle_Graphic3d_Texture2D
        assign(Handle_Graphic3d_Texture2D self, Graphic3d_Texture2D thePtr) -> Handle_Graphic3d_Texture2D
        assign(Handle_Graphic3d_Texture2D self, Handle_Graphic3d_Texture2D theHandle) -> Handle_Graphic3d_Texture2D

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_Texture2D self) -> Graphic3d_Texture2D

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_Texture2D self) -> Graphic3d_Texture2D

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_Texture2D self) -> Graphic3d_Texture2D

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_Texture2D___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_Texture2D___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_Texture2D(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_Texture2D_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_Texture2D

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_Texture2D self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_Texture2D_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_Texture2D_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NumberOfTextures(self, *args):
        """
        NumberOfTextures(Handle_Graphic3d_Texture2D self) -> Standard_Integer

        Returns the number of predefined textures.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_NumberOfTextures(self, *args)


    def TextureName(self, *args):
        """
        TextureName(Handle_Graphic3d_Texture2D self, Standard_Integer const theRank) -> TCollection_AsciiString

        Returns the name of the predefined texture of rank <aRank>

        :type theRank: int
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_TextureName(self, *args)


    def Name(self, *args):
        """
        Name(Handle_Graphic3d_Texture2D self) -> Graphic3d_NameOfTexture2D

        Returns the name of the predefined textures or NOT_2D_UNKNOWN
        when the name is given as a filename.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_NameOfTexture2D

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_Name(self, *args)


    def SetImage(self, *args):
        """
        SetImage(Handle_Graphic3d_Texture2D self, Handle_Image_PixMap thePixMap)

        Assign new image to the texture.
        Note that this method does not invalidate already uploaded resources - consider calling ::UpdateRevision() if needed.

        :type thePixMap: OCC.wrapper.Image.Handle_Image_PixMap

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_SetImage(self, *args)


    def HasMipMaps(self, *args):
        """
        HasMipMaps(Handle_Graphic3d_Texture2D self) -> Standard_Boolean

        Return true if mip-maps should be used.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_HasMipMaps(self, *args)


    def SetMipMaps(self, *args):
        """
        SetMipMaps(Handle_Graphic3d_Texture2D self, Standard_Boolean const theToUse)

        Set if mip-maps should be used (generated if needed).
        Note that this method should be called before loading / using the texture.

        :type theToUse: bool

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_SetMipMaps(self, *args)


    def EnableSmooth(self, *args):
        """
        EnableSmooth(Handle_Graphic3d_Texture2D self)

        enable texture smoothing


        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_EnableSmooth(self, *args)


    def IsSmoothed(self, *args):
        """
        IsSmoothed(Handle_Graphic3d_Texture2D self) -> Standard_Boolean

        Returns TRUE if the texture is smoothed.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_IsSmoothed(self, *args)


    def DisableSmooth(self, *args):
        """
        DisableSmooth(Handle_Graphic3d_Texture2D self)

        disable texture smoothing


        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_DisableSmooth(self, *args)


    def EnableModulate(self, *args):
        """
        EnableModulate(Handle_Graphic3d_Texture2D self)

        enable texture modulate mode.
        the image is modulate with the shading of the surface.


        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_EnableModulate(self, *args)


    def DisableModulate(self, *args):
        """
        DisableModulate(Handle_Graphic3d_Texture2D self)

        disable texture modulate mode.
        the image is directly decal on the surface.


        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_DisableModulate(self, *args)


    def IsModulate(self, *args):
        """
        IsModulate(Handle_Graphic3d_Texture2D self) -> Standard_Boolean

        Returns TRUE if the texture is modulate.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_IsModulate(self, *args)


    def EnableRepeat(self, *args):
        """
        EnableRepeat(Handle_Graphic3d_Texture2D self)

        use this methods if you want to enable
        texture repetition on your objects.


        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_EnableRepeat(self, *args)


    def DisableRepeat(self, *args):
        """
        DisableRepeat(Handle_Graphic3d_Texture2D self)

        use this methods if you want to disable
        texture repetition on your objects.


        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_DisableRepeat(self, *args)


    def IsRepeat(self, *args):
        """
        IsRepeat(Handle_Graphic3d_Texture2D self) -> Standard_Boolean

        Returns TRUE if the texture repeat is enable.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_IsRepeat(self, *args)


    def AnisoFilter(self, *args):
        """
        AnisoFilter(Handle_Graphic3d_Texture2D self) -> Graphic3d_LevelOfTextureAnisotropy

        @return level of anisontropy texture filter.
        Default value is Graphic3d_LOTA_OFF.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_LevelOfTextureAnisotropy

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_AnisoFilter(self, *args)


    def SetAnisoFilter(self, *args):
        """
        SetAnisoFilter(Handle_Graphic3d_Texture2D self, Graphic3d_LevelOfTextureAnisotropy const theLevel)

        @param theLevel level of anisontropy texture filter.

        :type theLevel: OCC.wrapper.Graphic3d.Graphic3d_LevelOfTextureAnisotropy

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_SetAnisoFilter(self, *args)


    def TexturesFolder(self, *args):
        """
        TexturesFolder(Handle_Graphic3d_Texture2D self) -> TCollection_AsciiString

        The path to textures determined from CSF_MDTVTexturesDirectory or CASROOT environment variables.
        @return the root folder with default textures.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_TexturesFolder(self, *args)


    def IsDone(self, *args):
        """
        IsDone(Handle_Graphic3d_Texture2D self) -> Standard_Boolean

        Checks if a texture class is valid or not.
        @return true if the construction of the class is correct

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_IsDone(self, *args)


    def Path(self, *args):
        """
        Returns the full path of the defined texture.
        It could be empty path if GetImage() is overridden to load image not from file.

        :rtype: OCC.wrapper.OSD.OSD_Path

        """
        res = _Graphic3d.Handle_Graphic3d_Texture2D_Path(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Type(self, *args):
        """
        Type(Handle_Graphic3d_Texture2D self) -> Graphic3d_TypeOfTexture

        @return the texture type.

        :rtype: OCC.wrapper.Graphic3d.Graphic3d_TypeOfTexture

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_Type(self, *args)


    def GetId(self, *args):
        """
        This ID will be used to manage resource in graphic driver.

        Default implementation generates unique ID within constructor;
        inheritors may re-initialize it within their constructor,
        but should never modify it afterwards.

        Multiple Graphic3d_TextureRoot instances with same ID
        will be treated as single texture with different parameters
        to optimize memory usage though this will be more natural
        to use same instance of Graphic3d_TextureRoot when possible.

        If this ID is set to empty string by inheritor,
        then independent graphical resource will be created
        for each instance of Graphic3d_AspectFillArea3d where texture will be used.

        @return texture identifier.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Handle_Graphic3d_Texture2D_GetId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Revision(self, *args):
        """
        Revision(Handle_Graphic3d_Texture2D self) -> Standard_Size

        Return image revision.

        :rtype: OCC.wrapper.Standard.Standard_Size

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_Revision(self, *args)


    def UpdateRevision(self, *args):
        """
        UpdateRevision(Handle_Graphic3d_Texture2D self)

        Update image revision.
        Can be used for signaling changes in the texture source (e.g. file update, pixmap update)
        without re-creating texture source itself (since unique id should be never modified).


        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_UpdateRevision(self, *args)


    def GetImage(self, *args):
        """
        GetImage(Handle_Graphic3d_Texture2D self) -> Handle_Image_PixMap

        This method will be called by graphic driver each time when texture resource should be created.
        Default constructors allow defining the texture source as path to texture image or directly as pixmap.
        If the source is defined as path, then the image will be dynamically loaded when this method is called
        (and no copy will be preserved in this class instance).
        Inheritors may dynamically generate the image.
        Notice, image data should be in Bottom-Up order (see Image_PixMap::IsTopDown())!
        @return the image for texture.

        :rtype: OCC.wrapper.Image.Handle_Image_PixMap

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_GetImage(self, *args)


    def GetParams(self, *args):
        """
        @return low-level texture parameters

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_TextureParams

        """
        res = _Graphic3d.Handle_Graphic3d_Texture2D_GetParams(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_Texture2D self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_Texture2D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_Texture2D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_Texture2D self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_Texture2D self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_Texture2D self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_Texture2D self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_Texture2D self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_Texture2D self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_Texture2D_DecrementRefCounter(self, *args)

Handle_Graphic3d_Texture2D_swigregister = _Graphic3d.Handle_Graphic3d_Texture2D_swigregister
Handle_Graphic3d_Texture2D_swigregister(Handle_Graphic3d_Texture2D)

def Handle_Graphic3d_Texture2D_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_Texture2D_DownCast(thing)
Handle_Graphic3d_Texture2D_DownCast = _Graphic3d.Handle_Graphic3d_Texture2D_DownCast

class Handle_Graphic3d_AspectMarker3d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_AspectMarker3d self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_AspectMarker3d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_AspectMarker3d self, Graphic3d_AspectMarker3d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_AspectMarker3d self, Handle_Graphic3d_AspectMarker3d theHandle) -> Handle_Graphic3d_AspectMarker3d
        assign(Handle_Graphic3d_AspectMarker3d self, Graphic3d_AspectMarker3d thePtr) -> Handle_Graphic3d_AspectMarker3d
        assign(Handle_Graphic3d_AspectMarker3d self, Handle_Graphic3d_AspectMarker3d theHandle) -> Handle_Graphic3d_AspectMarker3d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_AspectMarker3d self) -> Graphic3d_AspectMarker3d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_AspectMarker3d self) -> Graphic3d_AspectMarker3d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_AspectMarker3d self) -> Graphic3d_AspectMarker3d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_AspectMarker3d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_AspectMarker3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_AspectMarker3d_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_AspectMarker3d

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_AspectMarker3d self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_AspectMarker3d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_AspectMarker3d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ColorRGBA(self, *args):
        """
        Return color.

        :rtype: OCC.wrapper.Quantity.Quantity_ColorRGBA

        """
        res = _Graphic3d.Handle_Graphic3d_AspectMarker3d_ColorRGBA(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Color(self, *args):
        """
        Return the color.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Graphic3d.Handle_Graphic3d_AspectMarker3d_Color(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetColor(self, *args):
        """
        SetColor(Handle_Graphic3d_AspectMarker3d self, Quantity_Color theColor)

        Modifies the color.

        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d_SetColor(self, *args)


    def Scale(self, *args):
        """
        Scale(Handle_Graphic3d_AspectMarker3d self) -> Standard_ShortReal

        Return scale factor.

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d_Scale(self, *args)


    def SetScale(self, *args):
        """
        SetScale(Handle_Graphic3d_AspectMarker3d self, Standard_ShortReal const theScale)
        SetScale(Handle_Graphic3d_AspectMarker3d self, Standard_Real const theScale)

        Assign scale factor.

        :type theScale: float

        """
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d_SetScale(self, *args)


    def Type(self, *args):
        """
        Type(Handle_Graphic3d_AspectMarker3d self) -> Aspect_TypeOfMarker

        Return marker type.

        :rtype: OCC.wrapper.Aspect.Aspect_TypeOfMarker

        """
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d_Type(self, *args)


    def SetType(self, *args):
        """
        SetType(Handle_Graphic3d_AspectMarker3d self, Aspect_TypeOfMarker const theType)

        Modifies the type of marker.

        :type theType: OCC.wrapper.Aspect.Aspect_TypeOfMarker

        """
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d_SetType(self, *args)


    def GetTextureSize(self, *args):
        """
        GetTextureSize(Handle_Graphic3d_AspectMarker3d self)

        Returns marker's texture size.

        :type theWidth: int
        :type theHeight: int

        """
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d_GetTextureSize(self, *args)


    def GetMarkerImage(self, *args):
        """
        Returns marker's image texture.
        Could be null handle if marker aspect has been initialized as default type of marker.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_MarkerImage

        """
        res = _Graphic3d.Handle_Graphic3d_AspectMarker3d_GetMarkerImage(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetMarkerImage(self, *args):
        """
        SetMarkerImage(Handle_Graphic3d_AspectMarker3d self, Handle_Graphic3d_MarkerImage theImage)

        Set marker's image texture.

        :type theImage: OCC.wrapper.Graphic3d.Handle_Graphic3d_MarkerImage

        """
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d_SetMarkerImage(self, *args)


    def SetBitMap(self, *args):
        """
        SetBitMap(Handle_Graphic3d_AspectMarker3d self, Standard_Integer const theWidth, Standard_Integer const theHeight, Handle_TColStd_HArray1OfByte theTexture)

        :type theWidth: int
        :type theHeight: int
        :type theTexture: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfByte

        """
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d_SetBitMap(self, *args)


    def ShaderProgram(self, *args):
        """
        Return the program.

        :rtype: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderProgram

        """
        res = _Graphic3d.Handle_Graphic3d_AspectMarker3d_ShaderProgram(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetShaderProgram(self, *args):
        """
        SetShaderProgram(Handle_Graphic3d_AspectMarker3d self, Handle_Graphic3d_ShaderProgram theProgram)

        Sets up OpenGL/GLSL shader program.

        :type theProgram: OCC.wrapper.Graphic3d.Handle_Graphic3d_ShaderProgram

        """
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d_SetShaderProgram(self, *args)


    def Values(self, *args):
        """
        Values(Handle_Graphic3d_AspectMarker3d self, Quantity_Color theColor)

        Returns the current values of the group.

        :type theColor: OCC.wrapper.Quantity.Quantity_Color
        :type theType: OCC.wrapper.Aspect.Aspect_TypeOfMarker
        :type theScale: float

        """
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d_Values(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_AspectMarker3d self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_AspectMarker3d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_AspectMarker3d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_AspectMarker3d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_AspectMarker3d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_AspectMarker3d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_AspectMarker3d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_AspectMarker3d self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_AspectMarker3d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_AspectMarker3d_DecrementRefCounter(self, *args)

Handle_Graphic3d_AspectMarker3d_swigregister = _Graphic3d.Handle_Graphic3d_AspectMarker3d_swigregister
Handle_Graphic3d_AspectMarker3d_swigregister(Handle_Graphic3d_AspectMarker3d)

def Handle_Graphic3d_AspectMarker3d_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_AspectMarker3d_DownCast(thing)
Handle_Graphic3d_AspectMarker3d_DownCast = _Graphic3d.Handle_Graphic3d_AspectMarker3d_DownCast

class Handle_Graphic3d_MarkerImage(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Graphic3d_MarkerImage self)

        Nullify the handle


        """
        return _Graphic3d.Handle_Graphic3d_MarkerImage_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Graphic3d_MarkerImage self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Graphic3d.Handle_Graphic3d_MarkerImage_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Graphic3d_MarkerImage self, Graphic3d_MarkerImage thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Graphic3d.Handle_Graphic3d_MarkerImage_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Graphic3d_MarkerImage self, Handle_Graphic3d_MarkerImage theHandle) -> Handle_Graphic3d_MarkerImage
        assign(Handle_Graphic3d_MarkerImage self, Graphic3d_MarkerImage thePtr) -> Handle_Graphic3d_MarkerImage
        assign(Handle_Graphic3d_MarkerImage self, Handle_Graphic3d_MarkerImage theHandle) -> Handle_Graphic3d_MarkerImage

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Graphic3d.Handle_Graphic3d_MarkerImage_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Graphic3d_MarkerImage self) -> Graphic3d_MarkerImage

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_MarkerImage_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Graphic3d_MarkerImage self) -> Graphic3d_MarkerImage

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Graphic3d.Handle_Graphic3d_MarkerImage___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Graphic3d_MarkerImage self) -> Graphic3d_MarkerImage

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Graphic3d.Handle_Graphic3d_MarkerImage___ref__(self, *args)


    def __hash__(self):
        return _Graphic3d.Handle_Graphic3d_MarkerImage___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Graphic3d.Handle_Graphic3d_MarkerImage___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Graphic3d.new_Handle_Graphic3d_MarkerImage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Graphic3d.Handle_Graphic3d_MarkerImage_DownCast)
    __swig_destroy__ = _Graphic3d.delete_Handle_Graphic3d_MarkerImage

    def GetBitMapArray(self, *args):
        """
        GetBitMapArray(Handle_Graphic3d_MarkerImage self, Standard_Real const & theAlphaValue=0.5) -> Handle_TColStd_HArray1OfByte

        @param theAlphaValue pixels in the image that have alpha value greater than
        or equal to this parameter will be stored in bitmap as "1",
        others will be stored as "0"
        @return marker image as array of bytes. If an instance of the class has been
        initialized with image, it will be converted to bitmap based on the parameter theAlphaValue.

        :type theAlphaValue: float
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfByte

        """
        return _Graphic3d.Handle_Graphic3d_MarkerImage_GetBitMapArray(self, *args)


    def GetImage(self, *args):
        """
        @return marker image. If an instance of the class has been initialized with a bitmap, it will be
        converted to image.

        :rtype: OCC.wrapper.Image.Handle_Image_PixMap

        """
        res = _Graphic3d.Handle_Graphic3d_MarkerImage_GetImage(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetImageAlpha(self, *args):
        """
        @return image alpha as grayscale image. Note that if an instance of the class has been initialized
        with a bitmap or with grayscale image this method will return exactly the same image as GetImage()

        :rtype: OCC.wrapper.Image.Handle_Image_PixMap

        """
        res = _Graphic3d.Handle_Graphic3d_MarkerImage_GetImageAlpha(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetImageId(self, *args):
        """
        @return an unique ID. This ID will be used to manage resource in graphic driver.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Handle_Graphic3d_MarkerImage_GetImageId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetImageAlphaId(self, *args):
        """
        @return an unique ID. This ID will be used to manage resource in graphic driver.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _Graphic3d.Handle_Graphic3d_MarkerImage_GetImageAlphaId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetTextureSize(self, *args):
        """
        GetTextureSize(Handle_Graphic3d_MarkerImage self)

        @return texture size

        :type theWidth: int
        :type theHeight: int

        """
        return _Graphic3d.Handle_Graphic3d_MarkerImage_GetTextureSize(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Graphic3d_MarkerImage self) -> char const *

        :rtype: const char *

        """
        return _Graphic3d.Handle_Graphic3d_MarkerImage_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_MarkerImage_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Graphic3d.Handle_Graphic3d_MarkerImage_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Graphic3d_MarkerImage self)

        Memory deallocator for transient classes


        """
        return _Graphic3d.Handle_Graphic3d_MarkerImage_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Graphic3d_MarkerImage self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Graphic3d_MarkerImage self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_MarkerImage_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Graphic3d_MarkerImage self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Graphic3d_MarkerImage self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Graphic3d.Handle_Graphic3d_MarkerImage_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Graphic3d_MarkerImage self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Graphic3d.Handle_Graphic3d_MarkerImage_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Graphic3d_MarkerImage self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_MarkerImage_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Graphic3d_MarkerImage self)

        Increments the reference counter of this object


        """
        return _Graphic3d.Handle_Graphic3d_MarkerImage_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Graphic3d_MarkerImage self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Graphic3d.Handle_Graphic3d_MarkerImage_DecrementRefCounter(self, *args)

Handle_Graphic3d_MarkerImage_swigregister = _Graphic3d.Handle_Graphic3d_MarkerImage_swigregister
Handle_Graphic3d_MarkerImage_swigregister(Handle_Graphic3d_MarkerImage)

def Handle_Graphic3d_MarkerImage_DownCast(thing):
    return _Graphic3d.Handle_Graphic3d_MarkerImage_DownCast(thing)
Handle_Graphic3d_MarkerImage_DownCast = _Graphic3d.Handle_Graphic3d_MarkerImage_DownCast



