# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepToIGESBRep')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepToIGESBRep')
    _BRepToIGESBRep = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepToIGESBRep', [dirname(__file__)])
        except ImportError:
            import _BRepToIGESBRep
            return _BRepToIGESBRep
        try:
            _mod = imp.load_module('_BRepToIGESBRep', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepToIGESBRep = swig_import_helper()
    del swig_import_helper
else:
    import _BRepToIGESBRep
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepToIGESBRep.delete_SwigPyIterator

    def value(self):
        return _BRepToIGESBRep.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BRepToIGESBRep.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BRepToIGESBRep.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BRepToIGESBRep.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BRepToIGESBRep.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BRepToIGESBRep.SwigPyIterator_copy(self)

    def next(self):
        return _BRepToIGESBRep.SwigPyIterator_next(self)

    def __next__(self):
        return _BRepToIGESBRep.SwigPyIterator___next__(self)

    def previous(self):
        return _BRepToIGESBRep.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BRepToIGESBRep.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BRepToIGESBRep.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BRepToIGESBRep.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BRepToIGESBRep.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BRepToIGESBRep.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BRepToIGESBRep.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BRepToIGESBRep.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BRepToIGESBRep.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BRepToIGESBRep.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_BRepToIGESBRep.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _BRepToIGESBRep.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BRepToIGESBRep.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BRepToIGESBRep.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _BRepToIGESBRep.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _BRepToIGESBRep.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _BRepToIGESBRep.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BRepToIGESBRep.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_BRepToIGESBRep.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _BRepToIGESBRep.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BRepToIGESBRep.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BRepToIGESBRep.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _BRepToIGESBRep.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _BRepToIGESBRep.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _BRepToIGESBRep.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _BRepToIGESBRep.ptr_to_number(item)
ptr_to_number = _BRepToIGESBRep.ptr_to_number

def HashCode(*args):
    return _BRepToIGESBRep.HashCode(*args)
HashCode = _BRepToIGESBRep.HashCode

def ptr_equal(a, b):
    return _BRepToIGESBRep.ptr_equal(a, b)
ptr_equal = _BRepToIGESBRep.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESData
else:
    import IGESData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepToIGES
else:
    import BRepToIGES
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Transfer
else:
    import Transfer
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESSolid
else:
    import IGESSolid
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESGeom
else:
    import IGESGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESBasic
else:
    import IGESBasic
del _swig_python_version_info
class BRepToIGESBRep_Entity(BRepToIGES.BRepToIGES_BREntity):
    """provides methods to transfer BRep entity from CASCADE to IGESBRep."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepToIGESBRep_Entity self) -> BRepToIGESBRep_Entity

        Creates a tool Entity


        """
        this = _BRepToIGESBRep.new_BRepToIGESBRep_Entity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clear(self, *args):
        """
        Clear(BRepToIGESBRep_Entity self)

        Clears the contents of the fields


        """
        return _BRepToIGESBRep.BRepToIGESBRep_Entity_Clear(self, *args)


    def TransferVertexList(self, *args):
        """
        TransferVertexList(BRepToIGESBRep_Entity self)

        Create the VertexList entity


        """
        return _BRepToIGESBRep.BRepToIGESBRep_Entity_TransferVertexList(self, *args)


    def IndexVertex(self, *args):
        """
        IndexVertex(BRepToIGESBRep_Entity self, TopoDS_Vertex myvertex) -> Standard_Integer

        Returns the index of <myvertex> in "myVertices"

        :type myvertex: OCC.wrapper.TopoDS.TopoDS_Vertex
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepToIGESBRep.BRepToIGESBRep_Entity_IndexVertex(self, *args)


    def AddVertex(self, *args):
        """
        AddVertex(BRepToIGESBRep_Entity self, TopoDS_Vertex myvertex) -> Standard_Integer

        Stores <myvertex> in "myVertices"
        Returns the index of <myvertex>.

        :type myvertex: OCC.wrapper.TopoDS.TopoDS_Vertex
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepToIGESBRep.BRepToIGESBRep_Entity_AddVertex(self, *args)


    def TransferEdgeList(self, *args):
        """
        TransferEdgeList(BRepToIGESBRep_Entity self)

        Transfert an Edge entity from TopoDS to IGES


        """
        return _BRepToIGESBRep.BRepToIGESBRep_Entity_TransferEdgeList(self, *args)


    def IndexEdge(self, *args):
        """
        IndexEdge(BRepToIGESBRep_Entity self, TopoDS_Edge myedge) -> Standard_Integer

        Returns the index of <myedge> in "myEdges"

        :type myedge: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepToIGESBRep.BRepToIGESBRep_Entity_IndexEdge(self, *args)


    def AddEdge(self, *args):
        """
        AddEdge(BRepToIGESBRep_Entity self, TopoDS_Edge myedge, Handle_IGESData_IGESEntity mycurve3d) -> Standard_Integer

        Stores <myedge> in "myEdges" and <mycurve3d> in "myCurves".
        Returns the index of <myedge>.

        :type myedge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type mycurve3d: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepToIGESBRep.BRepToIGESBRep_Entity_AddEdge(self, *args)


    def TransferShape(self, *args):
        """
        TransferShape(BRepToIGESBRep_Entity self, TopoDS_Shape start) -> Handle_IGESData_IGESEntity

        Returns the result of the transfert of any Shape
        If  the transfer has  failed, this member return a NullEntity.

        :type start: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _BRepToIGESBRep.BRepToIGESBRep_Entity_TransferShape(self, *args)


    def TransferEdge(self, *args):
        """
        TransferEdge(BRepToIGESBRep_Entity self, TopoDS_Edge myedge) -> Handle_IGESData_IGESEntity
        TransferEdge(BRepToIGESBRep_Entity self, TopoDS_Edge myedge, TopoDS_Face myface, Standard_Real const length) -> Handle_IGESData_IGESEntity

        Transfert an Edge entity from TopoDS to IGES
        If this Entity could not be converted, this member returns a NullEntity.

        :type myedge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type myface: OCC.wrapper.TopoDS.TopoDS_Face
        :type length: float
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _BRepToIGESBRep.BRepToIGESBRep_Entity_TransferEdge(self, *args)


    def TransferWire(self, *args):
        """
        TransferWire(BRepToIGESBRep_Entity self, TopoDS_Wire mywire, TopoDS_Face myface, Standard_Real const length) -> Handle_IGESSolid_Loop

        Transfert a Wire entity from TopoDS to IGES.
        Returns the curve associated to mywire in the parametric space of myface.
        If this Entity could not be converted, this member returns a NullEntity.

        :type mywire: OCC.wrapper.TopoDS.TopoDS_Wire
        :type myface: OCC.wrapper.TopoDS.TopoDS_Face
        :type length: float
        :rtype: OCC.wrapper.IGESSolid.Handle_IGESSolid_Loop

        """
        return _BRepToIGESBRep.BRepToIGESBRep_Entity_TransferWire(self, *args)


    def TransferFace(self, *args):
        """
        TransferFace(BRepToIGESBRep_Entity self, TopoDS_Face start) -> Handle_IGESSolid_Face

        Transfert a Face entity from TopoDS to IGES
        If this Entity could not be converted, this member returns a NullEntity.

        :type start: OCC.wrapper.TopoDS.TopoDS_Face
        :rtype: OCC.wrapper.IGESSolid.Handle_IGESSolid_Face

        """
        return _BRepToIGESBRep.BRepToIGESBRep_Entity_TransferFace(self, *args)


    def TransferShell(self, *args):
        """
        TransferShell(BRepToIGESBRep_Entity self, TopoDS_Shell start) -> Handle_IGESSolid_Shell

        Transfert an Shell entity from TopoDS to IGES
        If this Entity could not be converted, this member returns a NullEntity.

        :type start: OCC.wrapper.TopoDS.TopoDS_Shell
        :rtype: OCC.wrapper.IGESSolid.Handle_IGESSolid_Shell

        """
        return _BRepToIGESBRep.BRepToIGESBRep_Entity_TransferShell(self, *args)


    def TransferSolid(self, *args):
        """
        TransferSolid(BRepToIGESBRep_Entity self, TopoDS_Solid start) -> Handle_IGESSolid_ManifoldSolid

        Transfert a Solid entity from TopoDS to IGES
        If this Entity could not be converted, this member returns a NullEntity.

        :type start: OCC.wrapper.TopoDS.TopoDS_Solid
        :rtype: OCC.wrapper.IGESSolid.Handle_IGESSolid_ManifoldSolid

        """
        return _BRepToIGESBRep.BRepToIGESBRep_Entity_TransferSolid(self, *args)


    def TransferCompSolid(self, *args):
        """
        TransferCompSolid(BRepToIGESBRep_Entity self, TopoDS_CompSolid start) -> Handle_IGESData_IGESEntity

        Transfert an CompSolid entity from TopoDS to IGES
        If this Entity could not be converted, this member returns a NullEntity.

        :type start: OCC.wrapper.TopoDS.TopoDS_CompSolid
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _BRepToIGESBRep.BRepToIGESBRep_Entity_TransferCompSolid(self, *args)


    def TransferCompound(self, *args):
        """
        TransferCompound(BRepToIGESBRep_Entity self, TopoDS_Compound start) -> Handle_IGESData_IGESEntity

        Transfert a Compound entity from TopoDS to IGES
        If this Entity could not be converted, this member returns a NullEntity.

        :type start: OCC.wrapper.TopoDS.TopoDS_Compound
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _BRepToIGESBRep.BRepToIGESBRep_Entity_TransferCompound(self, *args)

    __swig_destroy__ = _BRepToIGESBRep.delete_BRepToIGESBRep_Entity
BRepToIGESBRep_Entity_swigregister = _BRepToIGESBRep.BRepToIGESBRep_Entity_swigregister
BRepToIGESBRep_Entity_swigregister(BRepToIGESBRep_Entity)



