# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IGESDefs')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IGESDefs')
    _IGESDefs = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IGESDefs', [dirname(__file__)])
        except ImportError:
            import _IGESDefs
            return _IGESDefs
        try:
            _mod = imp.load_module('_IGESDefs', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IGESDefs = swig_import_helper()
    del swig_import_helper
else:
    import _IGESDefs
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IGESDefs.delete_SwigPyIterator

    def value(self):
        return _IGESDefs.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IGESDefs.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IGESDefs.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IGESDefs.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IGESDefs.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IGESDefs.SwigPyIterator_copy(self)

    def next(self):
        return _IGESDefs.SwigPyIterator_next(self)

    def __next__(self):
        return _IGESDefs.SwigPyIterator___next__(self)

    def previous(self):
        return _IGESDefs.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IGESDefs.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IGESDefs.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IGESDefs.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IGESDefs.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IGESDefs.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IGESDefs.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IGESDefs.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _IGESDefs.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESDefs.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_IGESDefs.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESDefs.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESDefs.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESDefs.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _IGESDefs.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _IGESDefs.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _IGESDefs.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESDefs.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_IGESDefs.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESDefs.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESDefs.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESDefs.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _IGESDefs.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _IGESDefs.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _IGESDefs.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _IGESDefs.ptr_to_number(item)
ptr_to_number = _IGESDefs.ptr_to_number

def HashCode(*args):
    return _IGESDefs.HashCode(*args)
HashCode = _IGESDefs.HashCode

def ptr_equal(a, b):
    return _IGESDefs.ptr_equal(a, b)
ptr_equal = _IGESDefs.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESData
else:
    import IGESData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESBasic
else:
    import IGESBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESGraph
else:
    import IGESGraph
del _swig_python_version_info
class IGESDefs_MacroDef(IGESData.IGESData_IGESEntity):
    """
    defines IGES Macro Definition Entity, Type <306> Form <0>
    in package IGESDefs
    This Class specifies the action of a specific MACRO.
    After specification MACRO can be used as necessary
    by means of MACRO class instance entity.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDefs_MacroDef
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDefs_MacroDef(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDefs_MacroDef self) -> IGESDefs_MacroDef

        defines IGES Macro Definition Entity, Type <306> Form <0>
        in package IGESDefs
        This Class specifies the action of a specific MACRO.
        After specification MACRO can be used as necessary
        by means of MACRO class instance entity.
        """
        this = _IGESDefs.new_IGESDefs_MacroDef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDefs_MacroDef self, Handle_TCollection_HAsciiString macro, Standard_Integer const entityTypeID, Handle_Interface_HArray1OfHAsciiString langStatements, Handle_TCollection_HAsciiString endMacro)

        This method is used to set the fields of the class
        MacroDef
        - macro          : MACRO
        - entityTypeID   : Entity Type ID
        - langStatements : Language Statements
        - endMacro       : END MACRO

        :type macro: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type entityTypeID: int
        :type langStatements: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString
        :type endMacro: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.IGESDefs_MacroDef_Init(self, *args)


    def NbStatements(self, *args):
        """
        NbStatements(IGESDefs_MacroDef self) -> Standard_Integer

        returns the number of language statements

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_MacroDef_NbStatements(self, *args)


    def MACRO(self, *args):
        """
        MACRO(IGESDefs_MacroDef self) -> Handle_TCollection_HAsciiString

        returns the MACRO(Literal)

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.IGESDefs_MacroDef_MACRO(self, *args)


    def EntityTypeID(self, *args):
        """
        EntityTypeID(IGESDefs_MacroDef self) -> Standard_Integer

        returns the Entity Type ID

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_MacroDef_EntityTypeID(self, *args)


    def LanguageStatement(self, *args):
        """
        LanguageStatement(IGESDefs_MacroDef self, Standard_Integer const StatNum) -> Handle_TCollection_HAsciiString

        :type StatNum: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.IGESDefs_MacroDef_LanguageStatement(self, *args)


    def ENDMACRO(self, *args):
        """
        ENDMACRO(IGESDefs_MacroDef self) -> Handle_TCollection_HAsciiString

        returns the ENDM(Literal)

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.IGESDefs_MacroDef_ENDMACRO(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDefs.IGESDefs_MacroDef_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDefs.IGESDefs_MacroDef_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.IGESDefs_MacroDef_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDefs.delete_IGESDefs_MacroDef
IGESDefs_MacroDef_swigregister = _IGESDefs.IGESDefs_MacroDef_swigregister
IGESDefs_MacroDef_swigregister(IGESDefs_MacroDef)

def IGESDefs_MacroDef_get_type_name(*args):
    """
    IGESDefs_MacroDef_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDefs.IGESDefs_MacroDef_get_type_name(*args)

def IGESDefs_MacroDef_get_type_descriptor(*args):
    """
    IGESDefs_MacroDef_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDefs.IGESDefs_MacroDef_get_type_descriptor(*args)

class IGESDefs_AssociativityDef(IGESData.IGESData_IGESEntity):
    """
    defines IGES Associativity Definition Entity, Type <302>
    Form <5001 - 9999> in package IGESDefs.
    This class permits the preprocessor to define an
    associativity schema. i.e., by using it preprocessor
    defines the type of relationship.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDefs_AssociativityDef
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDefs_AssociativityDef(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDefs_AssociativityDef self) -> IGESDefs_AssociativityDef

        defines IGES Associativity Definition Entity, Type <302>
        Form <5001 - 9999> in package IGESDefs.
        This class permits the preprocessor to define an
        associativity schema. i.e., by using it preprocessor
        defines the type of relationship.
        """
        this = _IGESDefs.new_IGESDefs_AssociativityDef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDefs_AssociativityDef self, Handle_TColStd_HArray1OfInteger requirements, Handle_TColStd_HArray1OfInteger orders, Handle_TColStd_HArray1OfInteger numItems, Handle_IGESBasic_HArray1OfHArray1OfInteger items)

        This method is used to set the fields of the class
        AssociativityDef
        - requirements : Back Pointers requirements
        - orders       : Class Orders
        - numItems     : Number of Items per Class
        - items        : Items in each class
        raises exception if lengths of the arrays are not the same.

        :type requirements: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type orders: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type numItems: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type items: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger

        """
        return _IGESDefs.IGESDefs_AssociativityDef_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(IGESDefs_AssociativityDef self, Standard_Integer const form)

        :type form: int

        """
        return _IGESDefs.IGESDefs_AssociativityDef_SetFormNumber(self, *args)


    def NbClassDefs(self, *args):
        """
        NbClassDefs(IGESDefs_AssociativityDef self) -> Standard_Integer

        returns the Number of class definitions

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_AssociativityDef_NbClassDefs(self, *args)


    def IsBackPointerReq(self, *args):
        """
        IsBackPointerReq(IGESDefs_AssociativityDef self, Standard_Integer const ClassNum) -> Standard_Boolean

        returns 1 if the theBackPointerReqs(ClassNum) = 1
        returns 0 if the theBackPointerReqs(ClassNum) = 2
        raises exception if ClassNum <= 0 or ClassNum > NbClassDefs()

        :type ClassNum: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.IGESDefs_AssociativityDef_IsBackPointerReq(self, *args)


    def BackPointerReq(self, *args):
        """
        BackPointerReq(IGESDefs_AssociativityDef self, Standard_Integer const ClassNum) -> Standard_Integer

        returns 1 or 2
        raises exception if ClassNum <= 0 or ClassNum > NbClassDefs()

        :type ClassNum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_AssociativityDef_BackPointerReq(self, *args)


    def IsOrdered(self, *args):
        """
        IsOrdered(IGESDefs_AssociativityDef self, Standard_Integer const ClassNum) -> Standard_Boolean

        returns 1 if theClassOrders(ClassNum) = 1 (ordered class)
        returns 0 if theClassOrders(ClassNum) = 2 (unordered class)
        raises exception if ClassNum <= 0 or ClassNum > NbClassDefs()

        :type ClassNum: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.IGESDefs_AssociativityDef_IsOrdered(self, *args)


    def ClassOrder(self, *args):
        """
        ClassOrder(IGESDefs_AssociativityDef self, Standard_Integer const ClassNum) -> Standard_Integer

        returns 1 or 2
        raises exception if ClassNum <= 0 or ClassNum > NbClassDefs()

        :type ClassNum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_AssociativityDef_ClassOrder(self, *args)


    def NbItemsPerClass(self, *args):
        """
        NbItemsPerClass(IGESDefs_AssociativityDef self, Standard_Integer const ClassNum) -> Standard_Integer

        returns no. of items per class entry
        raises exception if ClassNum <= 0 or ClassNum > NbClassDefs()

        :type ClassNum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_AssociativityDef_NbItemsPerClass(self, *args)


    def Item(self, *args):
        """
        Item(IGESDefs_AssociativityDef self, Standard_Integer const ClassNum, Standard_Integer const ItemNum) -> Standard_Integer

        returns ItemNum'th Item of ClassNum'th Class
        raises exception if
        ClassNum <= 0 or ClassNum > NbClassDefs()
        ItemNum <= 0 or ItemNum > NbItemsPerClass(ClassNum)

        :type ClassNum: int
        :type ItemNum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_AssociativityDef_Item(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDefs.IGESDefs_AssociativityDef_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDefs.IGESDefs_AssociativityDef_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.IGESDefs_AssociativityDef_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDefs.delete_IGESDefs_AssociativityDef
IGESDefs_AssociativityDef_swigregister = _IGESDefs.IGESDefs_AssociativityDef_swigregister
IGESDefs_AssociativityDef_swigregister(IGESDefs_AssociativityDef)

def IGESDefs_AssociativityDef_get_type_name(*args):
    """
    IGESDefs_AssociativityDef_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDefs.IGESDefs_AssociativityDef_get_type_name(*args)

def IGESDefs_AssociativityDef_get_type_descriptor(*args):
    """
    IGESDefs_AssociativityDef_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDefs.IGESDefs_AssociativityDef_get_type_descriptor(*args)

class IGESDefs_AttributeDef(IGESData.IGESData_IGESEntity):
    """
    defines IGES Attribute Table Definition Entity,
    Type <322> Form [0, 1, 2] in package IGESDefs.
    This is class is used to support the concept of well
    defined collection of attributes, whether it is a table
    or a single row of attributes.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDefs_AttributeDef
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDefs_AttributeDef(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDefs_AttributeDef self) -> IGESDefs_AttributeDef

        defines IGES Attribute Table Definition Entity,
        Type <322> Form [0, 1, 2] in package IGESDefs.
        This is class is used to support the concept of well
        defined collection of attributes, whether it is a table
        or a single row of attributes.
        """
        this = _IGESDefs.new_IGESDefs_AttributeDef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDefs_AttributeDef self, Handle_TCollection_HAsciiString aName, Standard_Integer const aListType, Handle_TColStd_HArray1OfInteger attrTypes, Handle_TColStd_HArray1OfInteger attrValueDataTypes, Handle_TColStd_HArray1OfInteger attrValueCounts, Handle_TColStd_HArray1OfTransient attrValues, Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate attrValuePointers)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aListType: int
        :type attrTypes: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type attrValueDataTypes: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type attrValueCounts: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type attrValues: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfTransient
        :type attrValuePointers: OCC.wrapper.IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate

        """
        return _IGESDefs.IGESDefs_AttributeDef_Init(self, *args)


    def HasTableName(self, *args):
        """
        HasTableName(IGESDefs_AttributeDef self) -> Standard_Boolean

        Returns True if a Table Name is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.IGESDefs_AttributeDef_HasTableName(self, *args)


    def TableName(self, *args):
        """
        TableName(IGESDefs_AttributeDef self) -> Handle_TCollection_HAsciiString

        returns the Attribute Table name, or comment
        (default = null, no name : seeHasTableName)

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.IGESDefs_AttributeDef_TableName(self, *args)


    def ListType(self, *args):
        """
        ListType(IGESDefs_AttributeDef self) -> Standard_Integer

        returns the Attribute List Type

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_AttributeDef_ListType(self, *args)


    def NbAttributes(self, *args):
        """
        NbAttributes(IGESDefs_AttributeDef self) -> Standard_Integer

        returns the Number of Attributes

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_AttributeDef_NbAttributes(self, *args)


    def AttributeType(self, *args):
        """
        AttributeType(IGESDefs_AttributeDef self, Standard_Integer const num) -> Standard_Integer

        returns the num'th Attribute Type
        raises exception if num <= 0 or num > NbAttributes()

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_AttributeDef_AttributeType(self, *args)


    def AttributeValueDataType(self, *args):
        """
        AttributeValueDataType(IGESDefs_AttributeDef self, Standard_Integer const num) -> Standard_Integer

        returns the num'th Attribute value data type
        raises exception if num <= 0 or num > NbAttributes()

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_AttributeDef_AttributeValueDataType(self, *args)


    def AttributeValueCount(self, *args):
        """
        AttributeValueCount(IGESDefs_AttributeDef self, Standard_Integer const num) -> Standard_Integer

        returns the num'th Attribute value count
        raises exception if num <= 0 or num > NbAttributes()

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_AttributeDef_AttributeValueCount(self, *args)


    def HasValues(self, *args):
        """
        HasValues(IGESDefs_AttributeDef self) -> Standard_Boolean

        returns false if Values are defined (i.e. for Form = 1 or 2)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.IGESDefs_AttributeDef_HasValues(self, *args)


    def HasTextDisplay(self, *args):
        """
        HasTextDisplay(IGESDefs_AttributeDef self) -> Standard_Boolean

        returns false if TextDisplays are defined (i.e. for Form = 2)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.IGESDefs_AttributeDef_HasTextDisplay(self, *args)


    def AttributeTextDisplay(self, *args):
        """
        AttributeTextDisplay(IGESDefs_AttributeDef self, Standard_Integer const AttrNum, Standard_Integer const PointerNum) -> Handle_IGESGraph_TextDisplayTemplate

        :type AttrNum: int
        :type PointerNum: int
        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate

        """
        return _IGESDefs.IGESDefs_AttributeDef_AttributeTextDisplay(self, *args)


    def AttributeList(self, *args):
        """
        AttributeList(IGESDefs_AttributeDef self, Standard_Integer const AttrNum) -> Handle_Standard_Transient

        Returns the List of Attributes <AttrNum>, as a Transient.
        Its effective Type depends of the Type of Attribute :
        HArray1OfInteger for Integer, Logical(0-1),
        HArray1OfReal for Real, HArray1OfHSaciiString for String,
        HArray1OfIGESEntity for Entity (Pointer)
        See methods AttributeAs... for an accurate access

        :type AttrNum: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESDefs.IGESDefs_AttributeDef_AttributeList(self, *args)


    def AttributeAsInteger(self, *args):
        """
        AttributeAsInteger(IGESDefs_AttributeDef self, Standard_Integer const AttrNum, Standard_Integer const ValueNum) -> Standard_Integer

        Returns Attribute Value <AttrNum, rank ValueNum> as an Integer
        Error if Indices out of Range, or no Value defined, or not an Integer

        :type AttrNum: int
        :type ValueNum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_AttributeDef_AttributeAsInteger(self, *args)


    def AttributeAsReal(self, *args):
        """
        AttributeAsReal(IGESDefs_AttributeDef self, Standard_Integer const AttrNum, Standard_Integer const ValueNum) -> Standard_Real

        Returns Attribute Value <AttrNum, rank ValueNum> as a Real
        Error if Indices out of Range, or no Value defined, or not a Real

        :type AttrNum: int
        :type ValueNum: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDefs.IGESDefs_AttributeDef_AttributeAsReal(self, *args)


    def AttributeAsString(self, *args):
        """
        AttributeAsString(IGESDefs_AttributeDef self, Standard_Integer const AttrNum, Standard_Integer const ValueNum) -> Handle_TCollection_HAsciiString

        Returns Attribute Value <AttrNum, rank ValueNum> as an Integer

        :type AttrNum: int
        :type ValueNum: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.IGESDefs_AttributeDef_AttributeAsString(self, *args)


    def AttributeAsEntity(self, *args):
        """
        AttributeAsEntity(IGESDefs_AttributeDef self, Standard_Integer const AttrNum, Standard_Integer const ValueNum) -> Handle_IGESData_IGESEntity

        Returns Attribute Value <AttrNum, rank ValueNum> as an Entity
        Error if Indices out of Range, or no Value defined, or not a Entity

        :type AttrNum: int
        :type ValueNum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.IGESDefs_AttributeDef_AttributeAsEntity(self, *args)


    def AttributeAsLogical(self, *args):
        """
        AttributeAsLogical(IGESDefs_AttributeDef self, Standard_Integer const AttrNum, Standard_Integer const ValueNum) -> Standard_Boolean

        Returns Attribute Value <AttrNum, rank ValueNum> as a Boolean
        Error if Indices out of Range, or no Value defined, or not a Logical

        :type AttrNum: int
        :type ValueNum: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.IGESDefs_AttributeDef_AttributeAsLogical(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDefs.IGESDefs_AttributeDef_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDefs.IGESDefs_AttributeDef_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.IGESDefs_AttributeDef_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDefs.delete_IGESDefs_AttributeDef
IGESDefs_AttributeDef_swigregister = _IGESDefs.IGESDefs_AttributeDef_swigregister
IGESDefs_AttributeDef_swigregister(IGESDefs_AttributeDef)

def IGESDefs_AttributeDef_get_type_name(*args):
    """
    IGESDefs_AttributeDef_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDefs.IGESDefs_AttributeDef_get_type_name(*args)

def IGESDefs_AttributeDef_get_type_descriptor(*args):
    """
    IGESDefs_AttributeDef_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDefs.IGESDefs_AttributeDef_get_type_descriptor(*args)

class IGESDefs_Protocol(IGESData.IGESData_Protocol):
    """Description of Protocol for IGESDefs"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDefs_Protocol
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDefs_Protocol(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDefs_Protocol self) -> IGESDefs_Protocol

        Description of Protocol for IGESDefs
        """
        this = _IGESDefs.new_IGESDefs_Protocol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NbResources(self, *args):
        """
        NbResources(IGESDefs_Protocol self) -> Standard_Integer

        Gives the count of Resource Protocol. Here, one
        (Protocol from IGESGraph)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_Protocol_NbResources(self, *args)


    def Resource(self, *args):
        """
        Resource(IGESDefs_Protocol self, Standard_Integer const num) -> Handle_Interface_Protocol

        Returns a Resource, given a rank.

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESDefs.IGESDefs_Protocol_Resource(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(IGESDefs_Protocol self, Handle_Standard_Type atype) -> Standard_Integer

        Returns a Case Number, specific of each recognized Type
        This Case Number is then used in Libraries : the various
        Modules attached to this class of Protocol must use them
        in accordance (for a given value of TypeNumber, they must
        consider the same Type as the Protocol defines)

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_Protocol_TypeNumber(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDefs.IGESDefs_Protocol_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDefs.IGESDefs_Protocol_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.IGESDefs_Protocol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDefs.delete_IGESDefs_Protocol
IGESDefs_Protocol_swigregister = _IGESDefs.IGESDefs_Protocol_swigregister
IGESDefs_Protocol_swigregister(IGESDefs_Protocol)

def IGESDefs_Protocol_get_type_name(*args):
    """
    IGESDefs_Protocol_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDefs.IGESDefs_Protocol_get_type_name(*args)

def IGESDefs_Protocol_get_type_descriptor(*args):
    """
    IGESDefs_Protocol_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDefs.IGESDefs_Protocol_get_type_descriptor(*args)

class IGESDefs_SpecificModule(IGESData.IGESData_SpecificModule):
    """Defines Services attached to IGES Entities : Dump, for IGESDefs"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDefs_SpecificModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDefs_SpecificModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDefs_SpecificModule self) -> IGESDefs_SpecificModule

        Creates a SpecificModule from IGESDefs & puts it into SpecificLib


        """
        this = _IGESDefs.new_IGESDefs_SpecificModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def OwnDump(self, *args):
        """
        OwnDump(IGESDefs_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Specific Dump (own parameters) for IGESDefs

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDefs.IGESDefs_SpecificModule_OwnDump(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDefs.IGESDefs_SpecificModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDefs.IGESDefs_SpecificModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.IGESDefs_SpecificModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDefs.delete_IGESDefs_SpecificModule
IGESDefs_SpecificModule_swigregister = _IGESDefs.IGESDefs_SpecificModule_swigregister
IGESDefs_SpecificModule_swigregister(IGESDefs_SpecificModule)

def IGESDefs_SpecificModule_get_type_name(*args):
    """
    IGESDefs_SpecificModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDefs.IGESDefs_SpecificModule_get_type_name(*args)

def IGESDefs_SpecificModule_get_type_descriptor(*args):
    """
    IGESDefs_SpecificModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDefs.IGESDefs_SpecificModule_get_type_descriptor(*args)

class IGESDefs_UnitsData(IGESData.IGESData_IGESEntity):
    """
    defines IGES UnitsData Entity, Type <316> Form <0>
    in package IGESDefs
    This class stores data about a model's fundamental units.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDefs_UnitsData
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDefs_UnitsData(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDefs_UnitsData self) -> IGESDefs_UnitsData

        defines IGES UnitsData Entity, Type <316> Form <0>
        in package IGESDefs
        This class stores data about a model's fundamental units.
        """
        this = _IGESDefs.new_IGESDefs_UnitsData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDefs_UnitsData self, Handle_Interface_HArray1OfHAsciiString unitTypes, Handle_Interface_HArray1OfHAsciiString unitValues, Handle_TColStd_HArray1OfReal unitScales)

        This method is used to set the fields of the class
        UnitsData
        - unitTypes  : Types of the units being defined
        - unitValues : Unit Values of the units
        - unitScales : Multiplicative Scale Factors
        raises exception if lengths of unitTypes, unitValues and
        unitScale are not same

        :type unitTypes: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString
        :type unitValues: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString
        :type unitScales: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _IGESDefs.IGESDefs_UnitsData_Init(self, *args)


    def NbUnits(self, *args):
        """
        NbUnits(IGESDefs_UnitsData self) -> Standard_Integer

        returns the Number of units defined by this entity

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_UnitsData_NbUnits(self, *args)


    def UnitType(self, *args):
        """
        UnitType(IGESDefs_UnitsData self, Standard_Integer const UnitNum) -> Handle_TCollection_HAsciiString

        returns the Type of the UnitNum'th unit being defined
        raises exception if UnitNum <= 0 or UnitNum > NbUnits()

        :type UnitNum: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.IGESDefs_UnitsData_UnitType(self, *args)


    def UnitValue(self, *args):
        """
        UnitValue(IGESDefs_UnitsData self, Standard_Integer const UnitNum) -> Handle_TCollection_HAsciiString

        returns the Units of the UnitNum'th unit being defined
        raises exception if UnitNum <= 0 or UnitNum > NbUnits()

        :type UnitNum: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.IGESDefs_UnitsData_UnitValue(self, *args)


    def ScaleFactor(self, *args):
        """
        ScaleFactor(IGESDefs_UnitsData self, Standard_Integer const UnitNum) -> Standard_Real

        returns the multiplicative scale factor to be apllied to the
        UnitNum'th unit being defined
        raises exception if UnitNum <= 0 or UnitNum > NbUnits()

        :type UnitNum: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDefs.IGESDefs_UnitsData_ScaleFactor(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDefs.IGESDefs_UnitsData_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDefs.IGESDefs_UnitsData_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.IGESDefs_UnitsData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDefs.delete_IGESDefs_UnitsData
IGESDefs_UnitsData_swigregister = _IGESDefs.IGESDefs_UnitsData_swigregister
IGESDefs_UnitsData_swigregister(IGESDefs_UnitsData)

def IGESDefs_UnitsData_get_type_name(*args):
    """
    IGESDefs_UnitsData_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDefs.IGESDefs_UnitsData_get_type_name(*args)

def IGESDefs_UnitsData_get_type_descriptor(*args):
    """
    IGESDefs_UnitsData_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDefs.IGESDefs_UnitsData_get_type_descriptor(*args)

class IGESDefs_ToolUnitsData(object):
    """
    Tool to work on a UnitsData. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDefs_ToolUnitsData self) -> IGESDefs_ToolUnitsData

        Returns a ToolUnitsData, ready to work


        """
        this = _IGESDefs.new_IGESDefs_ToolUnitsData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDefs_ToolUnitsData self, Handle_IGESDefs_UnitsData ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_UnitsData
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDefs.IGESDefs_ToolUnitsData_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDefs_ToolUnitsData self, Handle_IGESDefs_UnitsData ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_UnitsData
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDefs.IGESDefs_ToolUnitsData_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDefs_ToolUnitsData self, Handle_IGESDefs_UnitsData ent, Interface_EntityIterator iter)

        Lists the Entities shared by a UnitsData <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_UnitsData
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.IGESDefs_ToolUnitsData_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDefs_ToolUnitsData self, Handle_IGESDefs_UnitsData ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_UnitsData
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDefs.IGESDefs_ToolUnitsData_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDefs_ToolUnitsData self, Handle_IGESDefs_UnitsData ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_UnitsData
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDefs.IGESDefs_ToolUnitsData_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDefs_ToolUnitsData self, Handle_IGESDefs_UnitsData entfrom, Handle_IGESDefs_UnitsData entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDefs.Handle_IGESDefs_UnitsData
        :type entto: OCC.wrapper.IGESDefs.Handle_IGESDefs_UnitsData
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDefs.IGESDefs_ToolUnitsData_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDefs_ToolUnitsData self, Handle_IGESDefs_UnitsData ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_UnitsData
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDefs.IGESDefs_ToolUnitsData_OwnDump(self, *args)

    __swig_destroy__ = _IGESDefs.delete_IGESDefs_ToolUnitsData
IGESDefs_ToolUnitsData_swigregister = _IGESDefs.IGESDefs_ToolUnitsData_swigregister
IGESDefs_ToolUnitsData_swigregister(IGESDefs_ToolUnitsData)

class IGESDefs_TabularData(IGESData.IGESData_IGESEntity):
    """
    Defines IGES Tabular Data, Type <406> Form <11>,
    in package IGESDefs
    This Class is used to provide a Structure to accomodate
    point form data.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDefs_TabularData
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDefs_TabularData(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDefs_TabularData self) -> IGESDefs_TabularData

        Defines IGES Tabular Data, Type <406> Form <11>,
        in package IGESDefs
        This Class is used to provide a Structure to accomodate
        point form data.
        """
        this = _IGESDefs.new_IGESDefs_TabularData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDefs_TabularData self, Standard_Integer const nbProps, Standard_Integer const propType, Handle_TColStd_HArray1OfInteger typesInd, Handle_TColStd_HArray1OfInteger nbValuesInd, Handle_IGESBasic_HArray1OfHArray1OfReal valuesInd, Handle_IGESBasic_HArray1OfHArray1OfReal valuesDep)

        This method is used to set the fields of the class
        TabularData
        - nbProps     : Number of property values
        - propType    : Property Type
        - typesInd    : Type of independent variables
        - nbValuesInd : Number of values of independent variables
        - valuesInd   : Values of independent variables
        - valuesDep   : Values of dependent variables
        raises exception if lengths of typeInd and nbValuesInd are not same

        :type nbProps: int
        :type propType: int
        :type typesInd: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type nbValuesInd: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type valuesInd: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal
        :type valuesDep: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal

        """
        return _IGESDefs.IGESDefs_TabularData_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESDefs_TabularData self) -> Standard_Integer

        returns the number of property values (recorded)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_TabularData_NbPropertyValues(self, *args)


    def ComputedNbPropertyValues(self, *args):
        """
        ComputedNbPropertyValues(IGESDefs_TabularData self) -> Standard_Integer

        determines the number of property values required

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_TabularData_ComputedNbPropertyValues(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESDefs_TabularData self) -> Standard_Boolean

        checks, and correct as necessary, the number of property
        values. Returns True if corrected, False if already OK

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.IGESDefs_TabularData_OwnCorrect(self, *args)


    def PropertyType(self, *args):
        """
        PropertyType(IGESDefs_TabularData self) -> Standard_Integer

        returns the property type

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_TabularData_PropertyType(self, *args)


    def NbDependents(self, *args):
        """
        NbDependents(IGESDefs_TabularData self) -> Standard_Integer

        returns the number of dependent variables

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_TabularData_NbDependents(self, *args)


    def NbIndependents(self, *args):
        """
        NbIndependents(IGESDefs_TabularData self) -> Standard_Integer

        returns the number of independent variables

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_TabularData_NbIndependents(self, *args)


    def TypeOfIndependents(self, *args):
        """
        TypeOfIndependents(IGESDefs_TabularData self, Standard_Integer const num) -> Standard_Integer

        returns the type of the num'th independent variable
        raises exception if num <= 0 or num > NbIndependents()

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_TabularData_TypeOfIndependents(self, *args)


    def NbValues(self, *args):
        """
        NbValues(IGESDefs_TabularData self, Standard_Integer const num) -> Standard_Integer

        returns the number of different values of the num'th indep. variable
        raises exception if num <= 0 or num > NbIndependents()

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_TabularData_NbValues(self, *args)


    def IndependentValue(self, *args):
        """
        IndependentValue(IGESDefs_TabularData self, Standard_Integer const variablenum, Standard_Integer const valuenum) -> Standard_Real

        :type variablenum: int
        :type valuenum: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDefs.IGESDefs_TabularData_IndependentValue(self, *args)


    def DependentValues(self, *args):
        """
        DependentValues(IGESDefs_TabularData self, Standard_Integer const num) -> Handle_TColStd_HArray1OfReal

        :type num: int
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _IGESDefs.IGESDefs_TabularData_DependentValues(self, *args)


    def DependentValue(self, *args):
        """
        DependentValue(IGESDefs_TabularData self, Standard_Integer const variablenum, Standard_Integer const valuenum) -> Standard_Real

        :type variablenum: int
        :type valuenum: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDefs.IGESDefs_TabularData_DependentValue(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDefs.IGESDefs_TabularData_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDefs.IGESDefs_TabularData_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.IGESDefs_TabularData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDefs.delete_IGESDefs_TabularData
IGESDefs_TabularData_swigregister = _IGESDefs.IGESDefs_TabularData_swigregister
IGESDefs_TabularData_swigregister(IGESDefs_TabularData)

def IGESDefs_TabularData_get_type_name(*args):
    """
    IGESDefs_TabularData_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDefs.IGESDefs_TabularData_get_type_name(*args)

def IGESDefs_TabularData_get_type_descriptor(*args):
    """
    IGESDefs_TabularData_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDefs.IGESDefs_TabularData_get_type_descriptor(*args)

class Handle_IGESDefs_AssociativityDef(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDefs_AssociativityDef self)

        Nullify the handle


        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDefs_AssociativityDef self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDefs_AssociativityDef self, IGESDefs_AssociativityDef thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDefs_AssociativityDef self, Handle_IGESDefs_AssociativityDef theHandle) -> Handle_IGESDefs_AssociativityDef
        assign(Handle_IGESDefs_AssociativityDef self, IGESDefs_AssociativityDef thePtr) -> Handle_IGESDefs_AssociativityDef
        assign(Handle_IGESDefs_AssociativityDef self, Handle_IGESDefs_AssociativityDef theHandle) -> Handle_IGESDefs_AssociativityDef

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDefs_AssociativityDef self) -> IGESDefs_AssociativityDef

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDefs_AssociativityDef self) -> IGESDefs_AssociativityDef

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDefs_AssociativityDef self) -> IGESDefs_AssociativityDef

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef___ref__(self, *args)


    def __hash__(self):
        return _IGESDefs.Handle_IGESDefs_AssociativityDef___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDefs.Handle_IGESDefs_AssociativityDef___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDefs.new_Handle_IGESDefs_AssociativityDef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDefs.Handle_IGESDefs_AssociativityDef_DownCast)
    __swig_destroy__ = _IGESDefs.delete_Handle_IGESDefs_AssociativityDef

    def Init(self, *args):
        """
        Init(Handle_IGESDefs_AssociativityDef self, Handle_TColStd_HArray1OfInteger requirements, Handle_TColStd_HArray1OfInteger orders, Handle_TColStd_HArray1OfInteger numItems, Handle_IGESBasic_HArray1OfHArray1OfInteger items)

        This method is used to set the fields of the class
        AssociativityDef
        - requirements : Back Pointers requirements
        - orders       : Class Orders
        - numItems     : Number of Items per Class
        - items        : Items in each class
        raises exception if lengths of the arrays are not the same.

        :type requirements: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type orders: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type numItems: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type items: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_Init(self, *args)


    def SetFormNumber(self, *args):
        """
        SetFormNumber(Handle_IGESDefs_AssociativityDef self, Standard_Integer const form)

        :type form: int

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_SetFormNumber(self, *args)


    def NbClassDefs(self, *args):
        """
        NbClassDefs(Handle_IGESDefs_AssociativityDef self) -> Standard_Integer

        returns the Number of class definitions

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_NbClassDefs(self, *args)


    def IsBackPointerReq(self, *args):
        """
        IsBackPointerReq(Handle_IGESDefs_AssociativityDef self, Standard_Integer const ClassNum) -> Standard_Boolean

        returns 1 if the theBackPointerReqs(ClassNum) = 1
        returns 0 if the theBackPointerReqs(ClassNum) = 2
        raises exception if ClassNum <= 0 or ClassNum > NbClassDefs()

        :type ClassNum: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_IsBackPointerReq(self, *args)


    def BackPointerReq(self, *args):
        """
        BackPointerReq(Handle_IGESDefs_AssociativityDef self, Standard_Integer const ClassNum) -> Standard_Integer

        returns 1 or 2
        raises exception if ClassNum <= 0 or ClassNum > NbClassDefs()

        :type ClassNum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_BackPointerReq(self, *args)


    def IsOrdered(self, *args):
        """
        IsOrdered(Handle_IGESDefs_AssociativityDef self, Standard_Integer const ClassNum) -> Standard_Boolean

        returns 1 if theClassOrders(ClassNum) = 1 (ordered class)
        returns 0 if theClassOrders(ClassNum) = 2 (unordered class)
        raises exception if ClassNum <= 0 or ClassNum > NbClassDefs()

        :type ClassNum: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_IsOrdered(self, *args)


    def ClassOrder(self, *args):
        """
        ClassOrder(Handle_IGESDefs_AssociativityDef self, Standard_Integer const ClassNum) -> Standard_Integer

        returns 1 or 2
        raises exception if ClassNum <= 0 or ClassNum > NbClassDefs()

        :type ClassNum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_ClassOrder(self, *args)


    def NbItemsPerClass(self, *args):
        """
        NbItemsPerClass(Handle_IGESDefs_AssociativityDef self, Standard_Integer const ClassNum) -> Standard_Integer

        returns no. of items per class entry
        raises exception if ClassNum <= 0 or ClassNum > NbClassDefs()

        :type ClassNum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_NbItemsPerClass(self, *args)


    def Item(self, *args):
        """
        Item(Handle_IGESDefs_AssociativityDef self, Standard_Integer const ClassNum, Standard_Integer const ItemNum) -> Standard_Integer

        returns ItemNum'th Item of ClassNum'th Class
        raises exception if
        ClassNum <= 0 or ClassNum > NbClassDefs()
        ItemNum <= 0 or ItemNum > NbItemsPerClass(ClassNum)

        :type ClassNum: int
        :type ItemNum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_Item(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDefs_AssociativityDef self) -> char const *

        :rtype: const char *

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_AssociativityDef_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_AssociativityDef_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDefs_AssociativityDef self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDefs_AssociativityDef self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDefs_AssociativityDef self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDefs_AssociativityDef self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDefs_AssociativityDef self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDefs_AssociativityDef self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDefs_AssociativityDef self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDefs_AssociativityDef self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDefs_AssociativityDef self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDefs_AssociativityDef self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDefs_AssociativityDef self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDefs_AssociativityDef self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDefs_AssociativityDef self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDefs_AssociativityDef self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDefs_AssociativityDef self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDefs_AssociativityDef self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDefs_AssociativityDef self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDefs_AssociativityDef self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDefs_AssociativityDef self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDefs_AssociativityDef self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDefs_AssociativityDef self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDefs_AssociativityDef self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDefs_AssociativityDef self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDefs_AssociativityDef self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDefs_AssociativityDef self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDefs_AssociativityDef self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDefs_AssociativityDef self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDefs_AssociativityDef self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDefs_AssociativityDef self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDefs_AssociativityDef self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDefs_AssociativityDef self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDefs_AssociativityDef self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDefs_AssociativityDef self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDefs_AssociativityDef self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDefs_AssociativityDef self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDefs_AssociativityDef self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDefs_AssociativityDef self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDefs_AssociativityDef self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDefs_AssociativityDef self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDefs_AssociativityDef self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDefs_AssociativityDef self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDefs_AssociativityDef self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDefs_AssociativityDef self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDefs_AssociativityDef self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDefs_AssociativityDef self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDefs_AssociativityDef self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDefs_AssociativityDef self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDefs_AssociativityDef self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDefs_AssociativityDef self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDefs_AssociativityDef self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDefs_AssociativityDef self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDefs_AssociativityDef self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDefs_AssociativityDef self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDefs_AssociativityDef self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDefs_AssociativityDef self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDefs_AssociativityDef self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDefs_AssociativityDef self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDefs_AssociativityDef self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDefs_AssociativityDef self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDefs_AssociativityDef self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDefs_AssociativityDef self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDefs_AssociativityDef self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDefs_AssociativityDef self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDefs_AssociativityDef self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDefs_AssociativityDef self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDefs_AssociativityDef self)

        Memory deallocator for transient classes


        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDefs_AssociativityDef self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDefs_AssociativityDef self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDefs_AssociativityDef self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDefs_AssociativityDef self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDefs_AssociativityDef self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDefs_AssociativityDef self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDefs_AssociativityDef self)

        Increments the reference counter of this object


        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDefs_AssociativityDef self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AssociativityDef_DecrementRefCounter(self, *args)

Handle_IGESDefs_AssociativityDef_swigregister = _IGESDefs.Handle_IGESDefs_AssociativityDef_swigregister
Handle_IGESDefs_AssociativityDef_swigregister(Handle_IGESDefs_AssociativityDef)

def Handle_IGESDefs_AssociativityDef_DownCast(thing):
    return _IGESDefs.Handle_IGESDefs_AssociativityDef_DownCast(thing)
Handle_IGESDefs_AssociativityDef_DownCast = _IGESDefs.Handle_IGESDefs_AssociativityDef_DownCast

class IGESDefs_ToolTabularData(object):
    """
    Tool to work on a TabularData. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDefs_ToolTabularData self) -> IGESDefs_ToolTabularData

        Returns a ToolTabularData, ready to work


        """
        this = _IGESDefs.new_IGESDefs_ToolTabularData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDefs_ToolTabularData self, Handle_IGESDefs_TabularData ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_TabularData
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDefs.IGESDefs_ToolTabularData_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDefs_ToolTabularData self, Handle_IGESDefs_TabularData ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_TabularData
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDefs.IGESDefs_ToolTabularData_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDefs_ToolTabularData self, Handle_IGESDefs_TabularData ent, Interface_EntityIterator iter)

        Lists the Entities shared by a TabularData <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_TabularData
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.IGESDefs_ToolTabularData_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDefs_ToolTabularData self, Handle_IGESDefs_TabularData ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_TabularData
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDefs.IGESDefs_ToolTabularData_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDefs_ToolTabularData self, Handle_IGESDefs_TabularData ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_TabularData
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDefs.IGESDefs_ToolTabularData_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDefs_ToolTabularData self, Handle_IGESDefs_TabularData entfrom, Handle_IGESDefs_TabularData entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDefs.Handle_IGESDefs_TabularData
        :type entto: OCC.wrapper.IGESDefs.Handle_IGESDefs_TabularData
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDefs.IGESDefs_ToolTabularData_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDefs_ToolTabularData self, Handle_IGESDefs_TabularData ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_TabularData
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDefs.IGESDefs_ToolTabularData_OwnDump(self, *args)

    __swig_destroy__ = _IGESDefs.delete_IGESDefs_ToolTabularData
IGESDefs_ToolTabularData_swigregister = _IGESDefs.IGESDefs_ToolTabularData_swigregister
IGESDefs_ToolTabularData_swigregister(IGESDefs_ToolTabularData)

class IGESDefs_ReadWriteModule(IGESData.IGESData_ReadWriteModule):
    """
    Defines Defs File Access Module for IGESDefs (specific parts)
    Specific actions concern : Read and Write Own Parameters of
    an IGESEntity.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDefs_ReadWriteModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDefs_ReadWriteModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDefs_ReadWriteModule self) -> IGESDefs_ReadWriteModule

        Creates a ReadWriteModule & puts it into ReaderLib & WriterLib


        """
        this = _IGESDefs.new_IGESDefs_ReadWriteModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def CaseIGES(self, *args):
        """
        CaseIGES(IGESDefs_ReadWriteModule self, Standard_Integer const typenum, Standard_Integer const formnum) -> Standard_Integer

        Defines Case Numbers for Entities of IGESDefs

        :type typenum: int
        :type formnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_ReadWriteModule_CaseIGES(self, *args)


    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDefs_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file for an Entity of IGESDefs

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDefs.IGESDefs_ReadWriteModule_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDefs_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDefs.IGESDefs_ReadWriteModule_WriteOwnParams(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDefs.IGESDefs_ReadWriteModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDefs.IGESDefs_ReadWriteModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.IGESDefs_ReadWriteModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDefs.delete_IGESDefs_ReadWriteModule
IGESDefs_ReadWriteModule_swigregister = _IGESDefs.IGESDefs_ReadWriteModule_swigregister
IGESDefs_ReadWriteModule_swigregister(IGESDefs_ReadWriteModule)

def IGESDefs_ReadWriteModule_get_type_name(*args):
    """
    IGESDefs_ReadWriteModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDefs.IGESDefs_ReadWriteModule_get_type_name(*args)

def IGESDefs_ReadWriteModule_get_type_descriptor(*args):
    """
    IGESDefs_ReadWriteModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDefs.IGESDefs_ReadWriteModule_get_type_descriptor(*args)

class IGESDefs_ToolMacroDef(object):
    """
    Tool to work on a MacroDef. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDefs_ToolMacroDef self) -> IGESDefs_ToolMacroDef

        Returns a ToolMacroDef, ready to work


        """
        this = _IGESDefs.new_IGESDefs_ToolMacroDef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDefs_ToolMacroDef self, Handle_IGESDefs_MacroDef ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_MacroDef
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDefs.IGESDefs_ToolMacroDef_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDefs_ToolMacroDef self, Handle_IGESDefs_MacroDef ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_MacroDef
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDefs.IGESDefs_ToolMacroDef_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDefs_ToolMacroDef self, Handle_IGESDefs_MacroDef ent, Interface_EntityIterator iter)

        Lists the Entities shared by a MacroDef <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_MacroDef
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.IGESDefs_ToolMacroDef_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDefs_ToolMacroDef self, Handle_IGESDefs_MacroDef ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_MacroDef
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDefs.IGESDefs_ToolMacroDef_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDefs_ToolMacroDef self, Handle_IGESDefs_MacroDef ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_MacroDef
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDefs.IGESDefs_ToolMacroDef_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDefs_ToolMacroDef self, Handle_IGESDefs_MacroDef entfrom, Handle_IGESDefs_MacroDef entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDefs.Handle_IGESDefs_MacroDef
        :type entto: OCC.wrapper.IGESDefs.Handle_IGESDefs_MacroDef
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDefs.IGESDefs_ToolMacroDef_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDefs_ToolMacroDef self, Handle_IGESDefs_MacroDef ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_MacroDef
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDefs.IGESDefs_ToolMacroDef_OwnDump(self, *args)

    __swig_destroy__ = _IGESDefs.delete_IGESDefs_ToolMacroDef
IGESDefs_ToolMacroDef_swigregister = _IGESDefs.IGESDefs_ToolMacroDef_swigregister
IGESDefs_ToolMacroDef_swigregister(IGESDefs_ToolMacroDef)

class Handle_IGESDefs_MacroDef(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDefs_MacroDef self)

        Nullify the handle


        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDefs_MacroDef self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDefs_MacroDef self, IGESDefs_MacroDef thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDefs_MacroDef self, Handle_IGESDefs_MacroDef theHandle) -> Handle_IGESDefs_MacroDef
        assign(Handle_IGESDefs_MacroDef self, IGESDefs_MacroDef thePtr) -> Handle_IGESDefs_MacroDef
        assign(Handle_IGESDefs_MacroDef self, Handle_IGESDefs_MacroDef theHandle) -> Handle_IGESDefs_MacroDef

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDefs_MacroDef self) -> IGESDefs_MacroDef

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDefs_MacroDef self) -> IGESDefs_MacroDef

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDefs_MacroDef self) -> IGESDefs_MacroDef

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef___ref__(self, *args)


    def __hash__(self):
        return _IGESDefs.Handle_IGESDefs_MacroDef___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDefs.Handle_IGESDefs_MacroDef___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDefs.new_Handle_IGESDefs_MacroDef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDefs.Handle_IGESDefs_MacroDef_DownCast)
    __swig_destroy__ = _IGESDefs.delete_Handle_IGESDefs_MacroDef

    def Init(self, *args):
        """
        Init(Handle_IGESDefs_MacroDef self, Handle_TCollection_HAsciiString macro, Standard_Integer const entityTypeID, Handle_Interface_HArray1OfHAsciiString langStatements, Handle_TCollection_HAsciiString endMacro)

        This method is used to set the fields of the class
        MacroDef
        - macro          : MACRO
        - entityTypeID   : Entity Type ID
        - langStatements : Language Statements
        - endMacro       : END MACRO

        :type macro: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type entityTypeID: int
        :type langStatements: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString
        :type endMacro: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_Init(self, *args)


    def NbStatements(self, *args):
        """
        NbStatements(Handle_IGESDefs_MacroDef self) -> Standard_Integer

        returns the number of language statements

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_NbStatements(self, *args)


    def MACRO(self, *args):
        """
        MACRO(Handle_IGESDefs_MacroDef self) -> Handle_TCollection_HAsciiString

        returns the MACRO(Literal)

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_MACRO(self, *args)


    def EntityTypeID(self, *args):
        """
        EntityTypeID(Handle_IGESDefs_MacroDef self) -> Standard_Integer

        returns the Entity Type ID

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_EntityTypeID(self, *args)


    def LanguageStatement(self, *args):
        """
        LanguageStatement(Handle_IGESDefs_MacroDef self, Standard_Integer const StatNum) -> Handle_TCollection_HAsciiString

        :type StatNum: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_LanguageStatement(self, *args)


    def ENDMACRO(self, *args):
        """
        ENDMACRO(Handle_IGESDefs_MacroDef self) -> Handle_TCollection_HAsciiString

        returns the ENDM(Literal)

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_ENDMACRO(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDefs_MacroDef self) -> char const *

        :rtype: const char *

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_MacroDef_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_MacroDef_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDefs_MacroDef self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDefs_MacroDef self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDefs_MacroDef self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDefs_MacroDef self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDefs_MacroDef self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDefs_MacroDef self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDefs_MacroDef self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDefs_MacroDef self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDefs_MacroDef self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDefs_MacroDef self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDefs_MacroDef self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDefs_MacroDef self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDefs_MacroDef self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDefs_MacroDef self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDefs_MacroDef self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDefs_MacroDef self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDefs_MacroDef self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDefs_MacroDef self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDefs_MacroDef self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDefs_MacroDef self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDefs_MacroDef self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDefs_MacroDef self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDefs_MacroDef self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDefs_MacroDef self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDefs_MacroDef self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDefs_MacroDef self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDefs_MacroDef self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDefs_MacroDef self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDefs_MacroDef self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDefs_MacroDef self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDefs_MacroDef self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDefs_MacroDef self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDefs_MacroDef self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDefs_MacroDef self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDefs_MacroDef self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDefs_MacroDef self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDefs_MacroDef self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDefs_MacroDef self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDefs_MacroDef self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDefs_MacroDef self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDefs_MacroDef self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDefs_MacroDef self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDefs_MacroDef self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDefs_MacroDef self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDefs_MacroDef self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDefs_MacroDef self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDefs_MacroDef self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDefs_MacroDef self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDefs_MacroDef self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDefs_MacroDef self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDefs_MacroDef self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDefs_MacroDef self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDefs_MacroDef self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDefs_MacroDef self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDefs_MacroDef self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDefs_MacroDef self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDefs_MacroDef self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDefs_MacroDef self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDefs_MacroDef self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDefs_MacroDef self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDefs_MacroDef self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDefs_MacroDef self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDefs_MacroDef self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDefs_MacroDef self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDefs_MacroDef self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDefs_MacroDef self)

        Memory deallocator for transient classes


        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDefs_MacroDef self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDefs_MacroDef self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDefs_MacroDef self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDefs_MacroDef self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDefs_MacroDef self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDefs_MacroDef self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDefs_MacroDef self)

        Increments the reference counter of this object


        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDefs_MacroDef self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_MacroDef_DecrementRefCounter(self, *args)

Handle_IGESDefs_MacroDef_swigregister = _IGESDefs.Handle_IGESDefs_MacroDef_swigregister
Handle_IGESDefs_MacroDef_swigregister(Handle_IGESDefs_MacroDef)

def Handle_IGESDefs_MacroDef_DownCast(thing):
    return _IGESDefs.Handle_IGESDefs_MacroDef_DownCast(thing)
Handle_IGESDefs_MacroDef_DownCast = _IGESDefs.Handle_IGESDefs_MacroDef_DownCast

class IGESDefs_HArray1OfTabularData(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDefs_HArray1OfTabularData
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDefs_HArray1OfTabularData(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDefs_HArray1OfTabularData self, Standard_Integer const theLower, Standard_Integer const theUpper) -> IGESDefs_HArray1OfTabularData
        __init__(IGESDefs_HArray1OfTabularData self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_IGESDefs_TabularData theValue) -> IGESDefs_HArray1OfTabularData
        __init__(IGESDefs_HArray1OfTabularData self, NCollection_Array1_Handle_IGESDefs_TabularData theOther) -> IGESDefs_HArray1OfTabularData

        :type theOther: OCC.wrapper.IGESDefs.IGESDefs_Array1OfTabularData

        """
        this = _IGESDefs.new_IGESDefs_HArray1OfTabularData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESDefs.IGESDefs_Array1OfTabularData

        """
        res = _IGESDefs.IGESDefs_HArray1OfTabularData_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(IGESDefs_HArray1OfTabularData self) -> NCollection_Array1_Handle_IGESDefs_TabularData

        :rtype: OCC.wrapper.IGESDefs.IGESDefs_Array1OfTabularData

        """
        return _IGESDefs.IGESDefs_HArray1OfTabularData_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDefs.IGESDefs_HArray1OfTabularData_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDefs.IGESDefs_HArray1OfTabularData_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.IGESDefs_HArray1OfTabularData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDefs.delete_IGESDefs_HArray1OfTabularData
IGESDefs_HArray1OfTabularData_swigregister = _IGESDefs.IGESDefs_HArray1OfTabularData_swigregister
IGESDefs_HArray1OfTabularData_swigregister(IGESDefs_HArray1OfTabularData)

def IGESDefs_HArray1OfTabularData_get_type_name(*args):
    """
    IGESDefs_HArray1OfTabularData_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDefs.IGESDefs_HArray1OfTabularData_get_type_name(*args)

def IGESDefs_HArray1OfTabularData_get_type_descriptor(*args):
    """
    IGESDefs_HArray1OfTabularData_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDefs.IGESDefs_HArray1OfTabularData_get_type_descriptor(*args)

class IGESDefs_AttributeTable(IGESData.IGESData_IGESEntity):
    """
    defines IGES Attribute Table, Type <422> Form <0, 1>
    in package IGESDefs
    This class is used to represent an occurence of
    Attribute Table. This Class may be independent
    or dependent or pointed at by other Entities.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDefs_AttributeTable
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDefs_AttributeTable(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDefs_AttributeTable self) -> IGESDefs_AttributeTable

        defines IGES Attribute Table, Type <422> Form <0, 1>
        in package IGESDefs
        This class is used to represent an occurence of
        Attribute Table. This Class may be independent
        or dependent or pointed at by other Entities.
        """
        this = _IGESDefs.new_IGESDefs_AttributeTable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDefs_AttributeTable self, Handle_TColStd_HArray2OfTransient attributes)

        This method is used to set the fields of the class
        AttributeTable
        - attributes : Attribute instances, created as
        (1,NbAttributes,1,NbRows)
        - NbRows = 1 is a particular case (Form 0)

        :type attributes: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfTransient

        """
        return _IGESDefs.IGESDefs_AttributeTable_Init(self, *args)


    def SetDefinition(self, *args):
        """
        SetDefinition(IGESDefs_AttributeTable self, Handle_IGESDefs_AttributeDef arg2)

        Sets a Definition as Structure information
        (works by calling InitMisc)

        :type def: OCC.wrapper.IGESDefs.Handle_IGESDefs_AttributeDef

        """
        return _IGESDefs.IGESDefs_AttributeTable_SetDefinition(self, *args)


    def Definition(self, *args):
        """
        Definition(IGESDefs_AttributeTable self) -> Handle_IGESDefs_AttributeDef

        Return the Structure information in Directory Entry,
        casted as an AttributeDef

        :rtype: OCC.wrapper.IGESDefs.Handle_IGESDefs_AttributeDef

        """
        return _IGESDefs.IGESDefs_AttributeTable_Definition(self, *args)


    def NbRows(self, *args):
        """
        NbRows(IGESDefs_AttributeTable self) -> Standard_Integer

        returns Number of Rows. Remark that it is always 1 if Form = 0
        It means that the list of Attributes (by their number, and for each
        one its type and ValueCount) is repeated <NbRows> times

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_AttributeTable_NbRows(self, *args)


    def NbAttributes(self, *args):
        """
        NbAttributes(IGESDefs_AttributeTable self) -> Standard_Integer

        returns Number of Attributes

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_AttributeTable_NbAttributes(self, *args)


    def DataType(self, *args):
        """
        DataType(IGESDefs_AttributeTable self, Standard_Integer const Atnum) -> Standard_Integer

        returns the Type of an Attribute, given its No. : it is read in the
        Definition.
        (1 : Integer, 2 : Real, 3 : String, 4 : Entity, 6 : Logical)

        :type Atnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_AttributeTable_DataType(self, *args)


    def ValueCount(self, *args):
        """
        ValueCount(IGESDefs_AttributeTable self, Standard_Integer const Atnum) -> Standard_Integer

        returns the Count of Value for an Attribute, given its No. :
        it is read in the Definition.

        :type Atnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_AttributeTable_ValueCount(self, *args)


    def AttributeList(self, *args):
        """
        AttributeList(IGESDefs_AttributeTable self, Standard_Integer const Attribnum, Standard_Integer const Rownum) -> Handle_Standard_Transient

        :type Attribnum: int
        :type Rownum: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESDefs.IGESDefs_AttributeTable_AttributeList(self, *args)


    def AttributeAsInteger(self, *args):
        """
        AttributeAsInteger(IGESDefs_AttributeTable self, Standard_Integer const AtNum, Standard_Integer const Rownum, Standard_Integer const ValNum) -> Standard_Integer

        Returns Attribute Value <AtNum, Rownum, rank ValNum> as an Integer
        Error if Indices out of Range, or no Value defined, or not an Integer

        :type AtNum: int
        :type Rownum: int
        :type ValNum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_AttributeTable_AttributeAsInteger(self, *args)


    def AttributeAsReal(self, *args):
        """
        AttributeAsReal(IGESDefs_AttributeTable self, Standard_Integer const AtNum, Standard_Integer const Rownum, Standard_Integer const ValNum) -> Standard_Real

        Returns Attribute Value <AtNum, Rownum, rank ValNum> as a Real
        Error if Indices out of Range, or no Value defined, or not a Real

        :type AtNum: int
        :type Rownum: int
        :type ValNum: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDefs.IGESDefs_AttributeTable_AttributeAsReal(self, *args)


    def AttributeAsString(self, *args):
        """
        AttributeAsString(IGESDefs_AttributeTable self, Standard_Integer const AtNum, Standard_Integer const Rownum, Standard_Integer const ValNum) -> Handle_TCollection_HAsciiString

        Returns Attribute Value <AtNum, Rownum, rank ValNum> as an Integer

        :type AtNum: int
        :type Rownum: int
        :type ValNum: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.IGESDefs_AttributeTable_AttributeAsString(self, *args)


    def AttributeAsEntity(self, *args):
        """
        AttributeAsEntity(IGESDefs_AttributeTable self, Standard_Integer const AtNum, Standard_Integer const Rownum, Standard_Integer const ValNum) -> Handle_IGESData_IGESEntity

        Returns Attribute Value <AtNum, Rownum, rank ValNum> as an Entity
        Error if Indices out of Range, or no Value defined, or not an Entity

        :type AtNum: int
        :type Rownum: int
        :type ValNum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.IGESDefs_AttributeTable_AttributeAsEntity(self, *args)


    def AttributeAsLogical(self, *args):
        """
        AttributeAsLogical(IGESDefs_AttributeTable self, Standard_Integer const AtNum, Standard_Integer const Rownum, Standard_Integer const ValNum) -> Standard_Boolean

        Returns Attribute Value <AtNum, Rownum, rank ValNum> as a Boolean
        Error if Indices out of Range, or no Value defined, or not a Logical

        :type AtNum: int
        :type Rownum: int
        :type ValNum: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.IGESDefs_AttributeTable_AttributeAsLogical(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDefs.IGESDefs_AttributeTable_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDefs.IGESDefs_AttributeTable_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.IGESDefs_AttributeTable_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDefs.delete_IGESDefs_AttributeTable
IGESDefs_AttributeTable_swigregister = _IGESDefs.IGESDefs_AttributeTable_swigregister
IGESDefs_AttributeTable_swigregister(IGESDefs_AttributeTable)

def IGESDefs_AttributeTable_get_type_name(*args):
    """
    IGESDefs_AttributeTable_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDefs.IGESDefs_AttributeTable_get_type_name(*args)

def IGESDefs_AttributeTable_get_type_descriptor(*args):
    """
    IGESDefs_AttributeTable_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDefs.IGESDefs_AttributeTable_get_type_descriptor(*args)

class IGESDefs_ToolAttributeDef(object):
    """
    Tool to work on a AttributeDef. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDefs_ToolAttributeDef self) -> IGESDefs_ToolAttributeDef

        Returns a ToolAttributeDef, ready to work


        """
        this = _IGESDefs.new_IGESDefs_ToolAttributeDef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDefs_ToolAttributeDef self, Handle_IGESDefs_AttributeDef ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_AttributeDef
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDefs.IGESDefs_ToolAttributeDef_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDefs_ToolAttributeDef self, Handle_IGESDefs_AttributeDef ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_AttributeDef
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDefs.IGESDefs_ToolAttributeDef_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDefs_ToolAttributeDef self, Handle_IGESDefs_AttributeDef ent, Interface_EntityIterator iter)

        Lists the Entities shared by a AttributeDef <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_AttributeDef
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.IGESDefs_ToolAttributeDef_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDefs_ToolAttributeDef self, Handle_IGESDefs_AttributeDef ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_AttributeDef
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDefs.IGESDefs_ToolAttributeDef_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDefs_ToolAttributeDef self, Handle_IGESDefs_AttributeDef ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_AttributeDef
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDefs.IGESDefs_ToolAttributeDef_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDefs_ToolAttributeDef self, Handle_IGESDefs_AttributeDef entfrom, Handle_IGESDefs_AttributeDef entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDefs.Handle_IGESDefs_AttributeDef
        :type entto: OCC.wrapper.IGESDefs.Handle_IGESDefs_AttributeDef
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDefs.IGESDefs_ToolAttributeDef_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDefs_ToolAttributeDef self, Handle_IGESDefs_AttributeDef ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_AttributeDef
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDefs.IGESDefs_ToolAttributeDef_OwnDump(self, *args)

    __swig_destroy__ = _IGESDefs.delete_IGESDefs_ToolAttributeDef
IGESDefs_ToolAttributeDef_swigregister = _IGESDefs.IGESDefs_ToolAttributeDef_swigregister
IGESDefs_ToolAttributeDef_swigregister(IGESDefs_ToolAttributeDef)

class IGESDefs_ToolGenericData(object):
    """
    Tool to work on a GenericData. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDefs_ToolGenericData self) -> IGESDefs_ToolGenericData

        Returns a ToolGenericData, ready to work


        """
        this = _IGESDefs.new_IGESDefs_ToolGenericData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDefs_ToolGenericData self, Handle_IGESDefs_GenericData ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_GenericData
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDefs.IGESDefs_ToolGenericData_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDefs_ToolGenericData self, Handle_IGESDefs_GenericData ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_GenericData
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDefs.IGESDefs_ToolGenericData_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDefs_ToolGenericData self, Handle_IGESDefs_GenericData ent, Interface_EntityIterator iter)

        Lists the Entities shared by a GenericData <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_GenericData
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.IGESDefs_ToolGenericData_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDefs_ToolGenericData self, Handle_IGESDefs_GenericData ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_GenericData
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDefs.IGESDefs_ToolGenericData_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDefs_ToolGenericData self, Handle_IGESDefs_GenericData ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_GenericData
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDefs.IGESDefs_ToolGenericData_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDefs_ToolGenericData self, Handle_IGESDefs_GenericData entfrom, Handle_IGESDefs_GenericData entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDefs.Handle_IGESDefs_GenericData
        :type entto: OCC.wrapper.IGESDefs.Handle_IGESDefs_GenericData
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDefs.IGESDefs_ToolGenericData_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDefs_ToolGenericData self, Handle_IGESDefs_GenericData ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_GenericData
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDefs.IGESDefs_ToolGenericData_OwnDump(self, *args)

    __swig_destroy__ = _IGESDefs.delete_IGESDefs_ToolGenericData
IGESDefs_ToolGenericData_swigregister = _IGESDefs.IGESDefs_ToolGenericData_swigregister
IGESDefs_ToolGenericData_swigregister(IGESDefs_ToolGenericData)

class Handle_IGESDefs_AttributeDef(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDefs_AttributeDef self)

        Nullify the handle


        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDefs_AttributeDef self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDefs_AttributeDef self, IGESDefs_AttributeDef thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDefs_AttributeDef self, Handle_IGESDefs_AttributeDef theHandle) -> Handle_IGESDefs_AttributeDef
        assign(Handle_IGESDefs_AttributeDef self, IGESDefs_AttributeDef thePtr) -> Handle_IGESDefs_AttributeDef
        assign(Handle_IGESDefs_AttributeDef self, Handle_IGESDefs_AttributeDef theHandle) -> Handle_IGESDefs_AttributeDef

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDefs_AttributeDef self) -> IGESDefs_AttributeDef

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDefs_AttributeDef self) -> IGESDefs_AttributeDef

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDefs_AttributeDef self) -> IGESDefs_AttributeDef

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef___ref__(self, *args)


    def __hash__(self):
        return _IGESDefs.Handle_IGESDefs_AttributeDef___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDefs.Handle_IGESDefs_AttributeDef___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDefs.new_Handle_IGESDefs_AttributeDef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDefs.Handle_IGESDefs_AttributeDef_DownCast)
    __swig_destroy__ = _IGESDefs.delete_Handle_IGESDefs_AttributeDef

    def Init(self, *args):
        """
        Init(Handle_IGESDefs_AttributeDef self, Handle_TCollection_HAsciiString aName, Standard_Integer const aListType, Handle_TColStd_HArray1OfInteger attrTypes, Handle_TColStd_HArray1OfInteger attrValueDataTypes, Handle_TColStd_HArray1OfInteger attrValueCounts, Handle_TColStd_HArray1OfTransient attrValues, Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate attrValuePointers)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aListType: int
        :type attrTypes: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type attrValueDataTypes: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type attrValueCounts: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type attrValues: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfTransient
        :type attrValuePointers: OCC.wrapper.IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_Init(self, *args)


    def HasTableName(self, *args):
        """
        HasTableName(Handle_IGESDefs_AttributeDef self) -> Standard_Boolean

        Returns True if a Table Name is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_HasTableName(self, *args)


    def TableName(self, *args):
        """
        TableName(Handle_IGESDefs_AttributeDef self) -> Handle_TCollection_HAsciiString

        returns the Attribute Table name, or comment
        (default = null, no name : seeHasTableName)

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_TableName(self, *args)


    def ListType(self, *args):
        """
        ListType(Handle_IGESDefs_AttributeDef self) -> Standard_Integer

        returns the Attribute List Type

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_ListType(self, *args)


    def NbAttributes(self, *args):
        """
        NbAttributes(Handle_IGESDefs_AttributeDef self) -> Standard_Integer

        returns the Number of Attributes

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_NbAttributes(self, *args)


    def AttributeType(self, *args):
        """
        AttributeType(Handle_IGESDefs_AttributeDef self, Standard_Integer const num) -> Standard_Integer

        returns the num'th Attribute Type
        raises exception if num <= 0 or num > NbAttributes()

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_AttributeType(self, *args)


    def AttributeValueDataType(self, *args):
        """
        AttributeValueDataType(Handle_IGESDefs_AttributeDef self, Standard_Integer const num) -> Standard_Integer

        returns the num'th Attribute value data type
        raises exception if num <= 0 or num > NbAttributes()

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_AttributeValueDataType(self, *args)


    def AttributeValueCount(self, *args):
        """
        AttributeValueCount(Handle_IGESDefs_AttributeDef self, Standard_Integer const num) -> Standard_Integer

        returns the num'th Attribute value count
        raises exception if num <= 0 or num > NbAttributes()

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_AttributeValueCount(self, *args)


    def HasValues(self, *args):
        """
        HasValues(Handle_IGESDefs_AttributeDef self) -> Standard_Boolean

        returns false if Values are defined (i.e. for Form = 1 or 2)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_HasValues(self, *args)


    def HasTextDisplay(self, *args):
        """
        HasTextDisplay(Handle_IGESDefs_AttributeDef self) -> Standard_Boolean

        returns false if TextDisplays are defined (i.e. for Form = 2)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_HasTextDisplay(self, *args)


    def AttributeTextDisplay(self, *args):
        """
        AttributeTextDisplay(Handle_IGESDefs_AttributeDef self, Standard_Integer const AttrNum, Standard_Integer const PointerNum) -> Handle_IGESGraph_TextDisplayTemplate

        :type AttrNum: int
        :type PointerNum: int
        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_TextDisplayTemplate

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_AttributeTextDisplay(self, *args)


    def AttributeList(self, *args):
        """
        AttributeList(Handle_IGESDefs_AttributeDef self, Standard_Integer const AttrNum) -> Handle_Standard_Transient

        Returns the List of Attributes <AttrNum>, as a Transient.
        Its effective Type depends of the Type of Attribute :
        HArray1OfInteger for Integer, Logical(0-1),
        HArray1OfReal for Real, HArray1OfHSaciiString for String,
        HArray1OfIGESEntity for Entity (Pointer)
        See methods AttributeAs... for an accurate access

        :type AttrNum: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_AttributeList(self, *args)


    def AttributeAsInteger(self, *args):
        """
        AttributeAsInteger(Handle_IGESDefs_AttributeDef self, Standard_Integer const AttrNum, Standard_Integer const ValueNum) -> Standard_Integer

        Returns Attribute Value <AttrNum, rank ValueNum> as an Integer
        Error if Indices out of Range, or no Value defined, or not an Integer

        :type AttrNum: int
        :type ValueNum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_AttributeAsInteger(self, *args)


    def AttributeAsReal(self, *args):
        """
        AttributeAsReal(Handle_IGESDefs_AttributeDef self, Standard_Integer const AttrNum, Standard_Integer const ValueNum) -> Standard_Real

        Returns Attribute Value <AttrNum, rank ValueNum> as a Real
        Error if Indices out of Range, or no Value defined, or not a Real

        :type AttrNum: int
        :type ValueNum: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_AttributeAsReal(self, *args)


    def AttributeAsString(self, *args):
        """
        AttributeAsString(Handle_IGESDefs_AttributeDef self, Standard_Integer const AttrNum, Standard_Integer const ValueNum) -> Handle_TCollection_HAsciiString

        Returns Attribute Value <AttrNum, rank ValueNum> as an Integer

        :type AttrNum: int
        :type ValueNum: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_AttributeAsString(self, *args)


    def AttributeAsEntity(self, *args):
        """
        AttributeAsEntity(Handle_IGESDefs_AttributeDef self, Standard_Integer const AttrNum, Standard_Integer const ValueNum) -> Handle_IGESData_IGESEntity

        Returns Attribute Value <AttrNum, rank ValueNum> as an Entity
        Error if Indices out of Range, or no Value defined, or not a Entity

        :type AttrNum: int
        :type ValueNum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_AttributeAsEntity(self, *args)


    def AttributeAsLogical(self, *args):
        """
        AttributeAsLogical(Handle_IGESDefs_AttributeDef self, Standard_Integer const AttrNum, Standard_Integer const ValueNum) -> Standard_Boolean

        Returns Attribute Value <AttrNum, rank ValueNum> as a Boolean
        Error if Indices out of Range, or no Value defined, or not a Logical

        :type AttrNum: int
        :type ValueNum: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_AttributeAsLogical(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDefs_AttributeDef self) -> char const *

        :rtype: const char *

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_AttributeDef_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_AttributeDef_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDefs_AttributeDef self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDefs_AttributeDef self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDefs_AttributeDef self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDefs_AttributeDef self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDefs_AttributeDef self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDefs_AttributeDef self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDefs_AttributeDef self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDefs_AttributeDef self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDefs_AttributeDef self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDefs_AttributeDef self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDefs_AttributeDef self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDefs_AttributeDef self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDefs_AttributeDef self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDefs_AttributeDef self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDefs_AttributeDef self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDefs_AttributeDef self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDefs_AttributeDef self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDefs_AttributeDef self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDefs_AttributeDef self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDefs_AttributeDef self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDefs_AttributeDef self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDefs_AttributeDef self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDefs_AttributeDef self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDefs_AttributeDef self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDefs_AttributeDef self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDefs_AttributeDef self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDefs_AttributeDef self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDefs_AttributeDef self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDefs_AttributeDef self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDefs_AttributeDef self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDefs_AttributeDef self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDefs_AttributeDef self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDefs_AttributeDef self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDefs_AttributeDef self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDefs_AttributeDef self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDefs_AttributeDef self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDefs_AttributeDef self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDefs_AttributeDef self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDefs_AttributeDef self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDefs_AttributeDef self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDefs_AttributeDef self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDefs_AttributeDef self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDefs_AttributeDef self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDefs_AttributeDef self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDefs_AttributeDef self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDefs_AttributeDef self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDefs_AttributeDef self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDefs_AttributeDef self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDefs_AttributeDef self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDefs_AttributeDef self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDefs_AttributeDef self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDefs_AttributeDef self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDefs_AttributeDef self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDefs_AttributeDef self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDefs_AttributeDef self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDefs_AttributeDef self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDefs_AttributeDef self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDefs_AttributeDef self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDefs_AttributeDef self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDefs_AttributeDef self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDefs_AttributeDef self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDefs_AttributeDef self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDefs_AttributeDef self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDefs_AttributeDef self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDefs_AttributeDef self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDefs_AttributeDef self)

        Memory deallocator for transient classes


        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDefs_AttributeDef self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDefs_AttributeDef self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDefs_AttributeDef self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDefs_AttributeDef self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDefs_AttributeDef self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDefs_AttributeDef self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDefs_AttributeDef self)

        Increments the reference counter of this object


        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDefs_AttributeDef self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeDef_DecrementRefCounter(self, *args)

Handle_IGESDefs_AttributeDef_swigregister = _IGESDefs.Handle_IGESDefs_AttributeDef_swigregister
Handle_IGESDefs_AttributeDef_swigregister(Handle_IGESDefs_AttributeDef)

def Handle_IGESDefs_AttributeDef_DownCast(thing):
    return _IGESDefs.Handle_IGESDefs_AttributeDef_DownCast(thing)
Handle_IGESDefs_AttributeDef_DownCast = _IGESDefs.Handle_IGESDefs_AttributeDef_DownCast

class Handle_IGESDefs_HArray1OfTabularData(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDefs_HArray1OfTabularData self)

        Nullify the handle


        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfTabularData_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDefs_HArray1OfTabularData self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfTabularData_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDefs_HArray1OfTabularData self, IGESDefs_HArray1OfTabularData thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfTabularData_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDefs_HArray1OfTabularData self, Handle_IGESDefs_HArray1OfTabularData theHandle) -> Handle_IGESDefs_HArray1OfTabularData
        assign(Handle_IGESDefs_HArray1OfTabularData self, IGESDefs_HArray1OfTabularData thePtr) -> Handle_IGESDefs_HArray1OfTabularData
        assign(Handle_IGESDefs_HArray1OfTabularData self, Handle_IGESDefs_HArray1OfTabularData theHandle) -> Handle_IGESDefs_HArray1OfTabularData

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfTabularData_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDefs_HArray1OfTabularData self) -> IGESDefs_HArray1OfTabularData

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfTabularData_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDefs_HArray1OfTabularData self) -> IGESDefs_HArray1OfTabularData

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfTabularData___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDefs_HArray1OfTabularData self) -> IGESDefs_HArray1OfTabularData

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfTabularData___ref__(self, *args)


    def __hash__(self):
        return _IGESDefs.Handle_IGESDefs_HArray1OfTabularData___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDefs.Handle_IGESDefs_HArray1OfTabularData___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDefs.new_Handle_IGESDefs_HArray1OfTabularData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDefs.Handle_IGESDefs_HArray1OfTabularData_DownCast)
    __swig_destroy__ = _IGESDefs.delete_Handle_IGESDefs_HArray1OfTabularData

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESDefs.IGESDefs_Array1OfTabularData

        """
        res = _IGESDefs.Handle_IGESDefs_HArray1OfTabularData_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_IGESDefs_HArray1OfTabularData self) -> NCollection_Array1_Handle_IGESDefs_TabularData

        :rtype: OCC.wrapper.IGESDefs.IGESDefs_Array1OfTabularData

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfTabularData_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDefs_HArray1OfTabularData self) -> char const *

        :rtype: const char *

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfTabularData_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_HArray1OfTabularData_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_HArray1OfTabularData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESDefs_HArray1OfTabularData self)

        Memory deallocator for transient classes


        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfTabularData_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDefs_HArray1OfTabularData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDefs_HArray1OfTabularData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfTabularData_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDefs_HArray1OfTabularData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDefs_HArray1OfTabularData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfTabularData_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDefs_HArray1OfTabularData self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfTabularData_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDefs_HArray1OfTabularData self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfTabularData_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDefs_HArray1OfTabularData self)

        Increments the reference counter of this object


        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfTabularData_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDefs_HArray1OfTabularData self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfTabularData_DecrementRefCounter(self, *args)

Handle_IGESDefs_HArray1OfTabularData_swigregister = _IGESDefs.Handle_IGESDefs_HArray1OfTabularData_swigregister
Handle_IGESDefs_HArray1OfTabularData_swigregister(Handle_IGESDefs_HArray1OfTabularData)

def Handle_IGESDefs_HArray1OfTabularData_DownCast(thing):
    return _IGESDefs.Handle_IGESDefs_HArray1OfTabularData_DownCast(thing)
Handle_IGESDefs_HArray1OfTabularData_DownCast = _IGESDefs.Handle_IGESDefs_HArray1OfTabularData_DownCast

class Handle_IGESDefs_TabularData(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDefs_TabularData self)

        Nullify the handle


        """
        return _IGESDefs.Handle_IGESDefs_TabularData_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDefs_TabularData self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDefs_TabularData self, IGESDefs_TabularData thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDefs_TabularData self, Handle_IGESDefs_TabularData theHandle) -> Handle_IGESDefs_TabularData
        assign(Handle_IGESDefs_TabularData self, IGESDefs_TabularData thePtr) -> Handle_IGESDefs_TabularData
        assign(Handle_IGESDefs_TabularData self, Handle_IGESDefs_TabularData theHandle) -> Handle_IGESDefs_TabularData

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDefs_TabularData self) -> IGESDefs_TabularData

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDefs_TabularData self) -> IGESDefs_TabularData

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_TabularData___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDefs_TabularData self) -> IGESDefs_TabularData

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDefs.Handle_IGESDefs_TabularData___ref__(self, *args)


    def __hash__(self):
        return _IGESDefs.Handle_IGESDefs_TabularData___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDefs.Handle_IGESDefs_TabularData___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDefs.new_Handle_IGESDefs_TabularData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDefs.Handle_IGESDefs_TabularData_DownCast)
    __swig_destroy__ = _IGESDefs.delete_Handle_IGESDefs_TabularData

    def Init(self, *args):
        """
        Init(Handle_IGESDefs_TabularData self, Standard_Integer const nbProps, Standard_Integer const propType, Handle_TColStd_HArray1OfInteger typesInd, Handle_TColStd_HArray1OfInteger nbValuesInd, Handle_IGESBasic_HArray1OfHArray1OfReal valuesInd, Handle_IGESBasic_HArray1OfHArray1OfReal valuesDep)

        This method is used to set the fields of the class
        TabularData
        - nbProps     : Number of property values
        - propType    : Property Type
        - typesInd    : Type of independent variables
        - nbValuesInd : Number of values of independent variables
        - valuesInd   : Values of independent variables
        - valuesDep   : Values of dependent variables
        raises exception if lengths of typeInd and nbValuesInd are not same

        :type nbProps: int
        :type propType: int
        :type typesInd: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type nbValuesInd: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type valuesInd: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal
        :type valuesDep: OCC.wrapper.IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESDefs_TabularData self) -> Standard_Integer

        returns the number of property values (recorded)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_NbPropertyValues(self, *args)


    def ComputedNbPropertyValues(self, *args):
        """
        ComputedNbPropertyValues(Handle_IGESDefs_TabularData self) -> Standard_Integer

        determines the number of property values required

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_ComputedNbPropertyValues(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(Handle_IGESDefs_TabularData self) -> Standard_Boolean

        checks, and correct as necessary, the number of property
        values. Returns True if corrected, False if already OK

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_OwnCorrect(self, *args)


    def PropertyType(self, *args):
        """
        PropertyType(Handle_IGESDefs_TabularData self) -> Standard_Integer

        returns the property type

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_PropertyType(self, *args)


    def NbDependents(self, *args):
        """
        NbDependents(Handle_IGESDefs_TabularData self) -> Standard_Integer

        returns the number of dependent variables

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_NbDependents(self, *args)


    def NbIndependents(self, *args):
        """
        NbIndependents(Handle_IGESDefs_TabularData self) -> Standard_Integer

        returns the number of independent variables

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_NbIndependents(self, *args)


    def TypeOfIndependents(self, *args):
        """
        TypeOfIndependents(Handle_IGESDefs_TabularData self, Standard_Integer const num) -> Standard_Integer

        returns the type of the num'th independent variable
        raises exception if num <= 0 or num > NbIndependents()

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_TypeOfIndependents(self, *args)


    def NbValues(self, *args):
        """
        NbValues(Handle_IGESDefs_TabularData self, Standard_Integer const num) -> Standard_Integer

        returns the number of different values of the num'th indep. variable
        raises exception if num <= 0 or num > NbIndependents()

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_NbValues(self, *args)


    def IndependentValue(self, *args):
        """
        IndependentValue(Handle_IGESDefs_TabularData self, Standard_Integer const variablenum, Standard_Integer const valuenum) -> Standard_Real

        :type variablenum: int
        :type valuenum: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_IndependentValue(self, *args)


    def DependentValues(self, *args):
        """
        DependentValues(Handle_IGESDefs_TabularData self, Standard_Integer const num) -> Handle_TColStd_HArray1OfReal

        :type num: int
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_DependentValues(self, *args)


    def DependentValue(self, *args):
        """
        DependentValue(Handle_IGESDefs_TabularData self, Standard_Integer const variablenum, Standard_Integer const valuenum) -> Standard_Real

        :type variablenum: int
        :type valuenum: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_DependentValue(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDefs_TabularData self) -> char const *

        :rtype: const char *

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_TabularData_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_TabularData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDefs_TabularData self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDefs_TabularData self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDefs_TabularData self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDefs_TabularData self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDefs_TabularData self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDefs_TabularData self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDefs_TabularData self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDefs_TabularData self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDefs_TabularData self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDefs_TabularData self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDefs_TabularData self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDefs_TabularData self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDefs_TabularData self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDefs_TabularData self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDefs_TabularData self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDefs_TabularData self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDefs_TabularData self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDefs_TabularData self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDefs_TabularData self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDefs_TabularData self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDefs_TabularData self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDefs_TabularData self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDefs_TabularData self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDefs_TabularData self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDefs_TabularData self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDefs_TabularData self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDefs_TabularData self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDefs_TabularData self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDefs_TabularData self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDefs_TabularData self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDefs_TabularData self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDefs_TabularData self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDefs_TabularData self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDefs_TabularData self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDefs_TabularData self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDefs_TabularData self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDefs_TabularData self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDefs_TabularData self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDefs_TabularData self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDefs_TabularData self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDefs_TabularData self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDefs_TabularData self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDefs_TabularData self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDefs_TabularData self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDefs_TabularData self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDefs_TabularData self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDefs_TabularData self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDefs_TabularData self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDefs_TabularData self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDefs_TabularData self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDefs_TabularData self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDefs_TabularData self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDefs_TabularData self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDefs_TabularData self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDefs_TabularData self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDefs_TabularData self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDefs_TabularData self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDefs_TabularData self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDefs_TabularData self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDefs_TabularData self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDefs_TabularData self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDefs_TabularData self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDefs_TabularData self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDefs_TabularData self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDefs_TabularData self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDefs_TabularData self)

        Memory deallocator for transient classes


        """
        return _IGESDefs.Handle_IGESDefs_TabularData_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDefs_TabularData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDefs_TabularData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDefs_TabularData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDefs_TabularData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDefs_TabularData self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDefs_TabularData self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDefs_TabularData self)

        Increments the reference counter of this object


        """
        return _IGESDefs.Handle_IGESDefs_TabularData_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDefs_TabularData self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_TabularData_DecrementRefCounter(self, *args)

Handle_IGESDefs_TabularData_swigregister = _IGESDefs.Handle_IGESDefs_TabularData_swigregister
Handle_IGESDefs_TabularData_swigregister(Handle_IGESDefs_TabularData)

def Handle_IGESDefs_TabularData_DownCast(thing):
    return _IGESDefs.Handle_IGESDefs_TabularData_DownCast(thing)
Handle_IGESDefs_TabularData_DownCast = _IGESDefs.Handle_IGESDefs_TabularData_DownCast

class IGESDefs_GeneralModule(IGESData.IGESData_GeneralModule):
    """
    Definition of General Services for IGESDefs (specific part)
    This Services comprise : Shared & Implied Lists, Copy, Check
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDefs_GeneralModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDefs_GeneralModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDefs_GeneralModule self) -> IGESDefs_GeneralModule

        Creates a GeneralModule from IGESDefs and puts it into GeneralLib


        """
        this = _IGESDefs.new_IGESDefs_GeneralModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def OwnSharedCase(self, *args):
        """
        OwnSharedCase(IGESDefs_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Lists the Entities shared by a given IGESEntity <ent>, from
        its specific parameters : specific for each type

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.IGESDefs_GeneralModule_OwnSharedCase(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDefs_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> IGESData_DirChecker

        Returns a DirChecker, specific for each type of Entity
        (identified by its Case Number) : this DirChecker defines
        constraints which must be respected by the DirectoryPart

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDefs.IGESDefs_GeneralModule_DirChecker(self, *args)


    def OwnCheckCase(self, *args):
        """
        OwnCheckCase(IGESDefs_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDefs.IGESDefs_GeneralModule_OwnCheckCase(self, *args)


    def NewVoid(self, *args):
        """
        NewVoid(IGESDefs_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entto) -> Standard_Boolean

        Specific creation of a new void entity

        :type CN: int
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.IGESDefs_GeneralModule_NewVoid(self, *args)


    def OwnCopyCase(self, *args):
        """
        OwnCopyCase(IGESDefs_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Copies parameters which are specific of each Type of Entity

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDefs.IGESDefs_GeneralModule_OwnCopyCase(self, *args)


    def CategoryNumber(self, *args):
        """
        CategoryNumber(IGESDefs_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Standard_Integer

        Returns a category number which characterizes an entity
        Auxiliary for all

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_GeneralModule_CategoryNumber(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDefs.IGESDefs_GeneralModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDefs.IGESDefs_GeneralModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.IGESDefs_GeneralModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDefs.delete_IGESDefs_GeneralModule
IGESDefs_GeneralModule_swigregister = _IGESDefs.IGESDefs_GeneralModule_swigregister
IGESDefs_GeneralModule_swigregister(IGESDefs_GeneralModule)

def IGESDefs_GeneralModule_get_type_name(*args):
    """
    IGESDefs_GeneralModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDefs.IGESDefs_GeneralModule_get_type_name(*args)

def IGESDefs_GeneralModule_get_type_descriptor(*args):
    """
    IGESDefs_GeneralModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDefs.IGESDefs_GeneralModule_get_type_descriptor(*args)

class Handle_IGESDefs_ReadWriteModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDefs_ReadWriteModule self)

        Nullify the handle


        """
        return _IGESDefs.Handle_IGESDefs_ReadWriteModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDefs_ReadWriteModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDefs.Handle_IGESDefs_ReadWriteModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDefs_ReadWriteModule self, IGESDefs_ReadWriteModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDefs.Handle_IGESDefs_ReadWriteModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDefs_ReadWriteModule self, Handle_IGESDefs_ReadWriteModule theHandle) -> Handle_IGESDefs_ReadWriteModule
        assign(Handle_IGESDefs_ReadWriteModule self, IGESDefs_ReadWriteModule thePtr) -> Handle_IGESDefs_ReadWriteModule
        assign(Handle_IGESDefs_ReadWriteModule self, Handle_IGESDefs_ReadWriteModule theHandle) -> Handle_IGESDefs_ReadWriteModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDefs.Handle_IGESDefs_ReadWriteModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDefs_ReadWriteModule self) -> IGESDefs_ReadWriteModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_ReadWriteModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDefs_ReadWriteModule self) -> IGESDefs_ReadWriteModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_ReadWriteModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDefs_ReadWriteModule self) -> IGESDefs_ReadWriteModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDefs.Handle_IGESDefs_ReadWriteModule___ref__(self, *args)


    def __hash__(self):
        return _IGESDefs.Handle_IGESDefs_ReadWriteModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDefs.Handle_IGESDefs_ReadWriteModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDefs.new_Handle_IGESDefs_ReadWriteModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDefs.Handle_IGESDefs_ReadWriteModule_DownCast)
    __swig_destroy__ = _IGESDefs.delete_Handle_IGESDefs_ReadWriteModule

    def CaseIGES(self, *args):
        """
        CaseIGES(Handle_IGESDefs_ReadWriteModule self, Standard_Integer const typenum, Standard_Integer const formnum) -> Standard_Integer

        Defines Case Numbers for Entities of IGESDefs

        :type typenum: int
        :type formnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_ReadWriteModule_CaseIGES(self, *args)


    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(Handle_IGESDefs_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file for an Entity of IGESDefs

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDefs.Handle_IGESDefs_ReadWriteModule_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(Handle_IGESDefs_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDefs.Handle_IGESDefs_ReadWriteModule_WriteOwnParams(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDefs_ReadWriteModule self) -> char const *

        :rtype: const char *

        """
        return _IGESDefs.Handle_IGESDefs_ReadWriteModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_ReadWriteModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_ReadWriteModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CaseNum(self, *args):
        """
        CaseNum(Handle_IGESDefs_ReadWriteModule self, Handle_Interface_FileReaderData data, Standard_Integer const num) -> Standard_Integer

        Translates the Type of record <num> in <data> to a positive
        Case Number, or 0 if failed.
        Works with IGESReaderData which provides Type & Form Numbers,
        and calls CaseIGES (see below)

        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_ReadWriteModule_CaseNum(self, *args)


    def Read(self, *args):
        """
        Read(Handle_IGESDefs_ReadWriteModule self, Standard_Integer const CN, Handle_Interface_FileReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_Standard_Transient ent)

        General Read Function. See IGESReaderTool for more info

        :type CN: int
        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESDefs.Handle_IGESDefs_ReadWriteModule_Read(self, *args)


    def NewRead(self, *args):
        """
        NewRead(Handle_IGESDefs_ReadWriteModule self, Standard_Integer const casenum, Handle_Interface_FileReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_Standard_Transient ent) -> Standard_Boolean

        Specific operator (create+read) defaulted to do nothing.
        It can be redefined when it is not possible to work in two
        steps (NewVoid then Read). This occurs when no default
        constructor is defined : hence the result <ent> must be
        created with an effective definition from the reader.
        Remark : if NewRead is defined, Copy has nothing to do.

        Returns True if it has produced something, false else.
        If nothing was produced, <ach> should be filled : it will be
        treated as "Unrecognized case" by reader tool.

        :type casenum: int
        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_ReadWriteModule_NewRead(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDefs_ReadWriteModule self)

        Memory deallocator for transient classes


        """
        return _IGESDefs.Handle_IGESDefs_ReadWriteModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDefs_ReadWriteModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDefs_ReadWriteModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_ReadWriteModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDefs_ReadWriteModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDefs_ReadWriteModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_ReadWriteModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDefs_ReadWriteModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDefs.Handle_IGESDefs_ReadWriteModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDefs_ReadWriteModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_ReadWriteModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDefs_ReadWriteModule self)

        Increments the reference counter of this object


        """
        return _IGESDefs.Handle_IGESDefs_ReadWriteModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDefs_ReadWriteModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_ReadWriteModule_DecrementRefCounter(self, *args)

Handle_IGESDefs_ReadWriteModule_swigregister = _IGESDefs.Handle_IGESDefs_ReadWriteModule_swigregister
Handle_IGESDefs_ReadWriteModule_swigregister(Handle_IGESDefs_ReadWriteModule)

def Handle_IGESDefs_ReadWriteModule_DownCast(thing):
    return _IGESDefs.Handle_IGESDefs_ReadWriteModule_DownCast(thing)
Handle_IGESDefs_ReadWriteModule_DownCast = _IGESDefs.Handle_IGESDefs_ReadWriteModule_DownCast

class Handle_IGESDefs_Protocol(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDefs_Protocol self)

        Nullify the handle


        """
        return _IGESDefs.Handle_IGESDefs_Protocol_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDefs_Protocol self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDefs.Handle_IGESDefs_Protocol_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDefs_Protocol self, IGESDefs_Protocol thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDefs.Handle_IGESDefs_Protocol_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDefs_Protocol self, Handle_IGESDefs_Protocol theHandle) -> Handle_IGESDefs_Protocol
        assign(Handle_IGESDefs_Protocol self, IGESDefs_Protocol thePtr) -> Handle_IGESDefs_Protocol
        assign(Handle_IGESDefs_Protocol self, Handle_IGESDefs_Protocol theHandle) -> Handle_IGESDefs_Protocol

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDefs.Handle_IGESDefs_Protocol_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDefs_Protocol self) -> IGESDefs_Protocol

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_Protocol_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDefs_Protocol self) -> IGESDefs_Protocol

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_Protocol___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDefs_Protocol self) -> IGESDefs_Protocol

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDefs.Handle_IGESDefs_Protocol___ref__(self, *args)


    def __hash__(self):
        return _IGESDefs.Handle_IGESDefs_Protocol___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDefs.Handle_IGESDefs_Protocol___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDefs.new_Handle_IGESDefs_Protocol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDefs.Handle_IGESDefs_Protocol_DownCast)
    __swig_destroy__ = _IGESDefs.delete_Handle_IGESDefs_Protocol

    def NbResources(self, *args):
        """
        NbResources(Handle_IGESDefs_Protocol self) -> Standard_Integer

        Gives the count of Resource Protocol. Here, one
        (Protocol from IGESGraph)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_Protocol_NbResources(self, *args)


    def Resource(self, *args):
        """
        Resource(Handle_IGESDefs_Protocol self, Standard_Integer const num) -> Handle_Interface_Protocol

        Returns a Resource, given a rank.

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESDefs.Handle_IGESDefs_Protocol_Resource(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDefs_Protocol self, Handle_Standard_Type atype) -> Standard_Integer

        Returns a Case Number, specific of each recognized Type
        This Case Number is then used in Libraries : the various
        Modules attached to this class of Protocol must use them
        in accordance (for a given value of TypeNumber, they must
        consider the same Type as the Protocol defines)

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_Protocol_TypeNumber(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDefs_Protocol self) -> char const *

        :rtype: const char *

        """
        return _IGESDefs.Handle_IGESDefs_Protocol_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_Protocol_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_Protocol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewModel(self, *args):
        """
        NewModel(Handle_IGESDefs_Protocol self) -> Handle_Interface_InterfaceModel

        Creates an empty Model for IGES Norm

        :rtype: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESDefs.Handle_IGESDefs_Protocol_NewModel(self, *args)


    def IsSuitableModel(self, *args):
        """
        IsSuitableModel(Handle_IGESDefs_Protocol self, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        Returns True if <model> is a Model of IGES Norm

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_Protocol_IsSuitableModel(self, *args)


    def UnknownEntity(self, *args):
        """
        UnknownEntity(Handle_IGESDefs_Protocol self) -> Handle_Standard_Transient

        Creates a new Unknown Entity for IGES (UndefinedEntity)

        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESDefs.Handle_IGESDefs_Protocol_UnknownEntity(self, *args)


    def IsUnknownEntity(self, *args):
        """
        IsUnknownEntity(Handle_IGESDefs_Protocol self, Handle_Standard_Transient ent) -> Standard_Boolean

        Returns True if <ent> is an Unknown Entity for the Norm, i.e.
        Type UndefinedEntity, status Unknown

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_Protocol_IsUnknownEntity(self, *args)


    def Active(self, *args):
        """
        Active(Handle_IGESDefs_Protocol self) -> Handle_Interface_Protocol

        Returns the Active Protocol, if defined (else, returns a
        Null Handle, which means "no defined active protocol")

        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESDefs.Handle_IGESDefs_Protocol_Active(self, *args)


    def SetActive(self, *args):
        """
        SetActive(Handle_IGESDefs_Protocol self, Handle_Interface_Protocol aprotocol)

        Sets a given Protocol to be the Active one (for the users of
        Active, see just above). Applies to every sub-type of Protocol

        :type aprotocol: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESDefs.Handle_IGESDefs_Protocol_SetActive(self, *args)


    def ClearActive(self, *args):
        """
        ClearActive(Handle_IGESDefs_Protocol self)

        Erases the Active Protocol (hence it becomes undefined)


        """
        return _IGESDefs.Handle_IGESDefs_Protocol_ClearActive(self, *args)


    def CaseNumber(self, *args):
        """
        CaseNumber(Handle_IGESDefs_Protocol self, Handle_Standard_Transient obj) -> Standard_Integer

        Returns a unique positive CaseNumber for each Recognized
        Object. By default, recognition is based on Type(1)
        By default, calls the following one which is deferred.

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_Protocol_CaseNumber(self, *args)


    def IsDynamicType(self, *args):
        """
        IsDynamicType(Handle_IGESDefs_Protocol self, Handle_Standard_Transient obj) -> Standard_Boolean

        Returns True if type of <obj> is that defined from CDL
        This is the default but it may change according implementation

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_Protocol_IsDynamicType(self, *args)


    def NbTypes(self, *args):
        """
        NbTypes(Handle_IGESDefs_Protocol self, Handle_Standard_Transient obj) -> Standard_Integer

        Returns the count of DISTINCT types under which an entity may
        be processed. Each one is candidate to be recognized by
        TypeNumber, <obj> is then processed according it
        By default, returns 1 (the DynamicType)

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_Protocol_NbTypes(self, *args)


    def Type(self, *args):
        """
        Type(Handle_IGESDefs_Protocol self, Handle_Standard_Transient obj, Standard_Integer const nt=1) -> Handle_Standard_Type

        Returns a type under which <obj> can be recognized and
        processed, according its rank in its definition list (see
        NbTypes).
        By default, returns DynamicType

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :type nt: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDefs.Handle_IGESDefs_Protocol_Type(self, *args)


    def GlobalCheck(self, *args):
        """
        GlobalCheck(Handle_IGESDefs_Protocol self, Interface_Graph G, Handle_Interface_Check ach) -> Standard_Boolean

        Evaluates a Global Check for a model (with its Graph)
        Returns True when done, False if data in model do not apply

        Very specific of each norm, i.e. of each protocol : the
        uppest level Protocol assumes it, it can call GlobalCheck of
        its ressources only if it is necessary

        Default does nothing, can be redefined

        :type G: OCC.wrapper.Interface.Interface_Graph
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_Protocol_GlobalCheck(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDefs_Protocol self)

        Memory deallocator for transient classes


        """
        return _IGESDefs.Handle_IGESDefs_Protocol_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDefs_Protocol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDefs_Protocol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_Protocol_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDefs_Protocol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDefs_Protocol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_Protocol_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDefs_Protocol self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDefs.Handle_IGESDefs_Protocol_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDefs_Protocol self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_Protocol_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDefs_Protocol self)

        Increments the reference counter of this object


        """
        return _IGESDefs.Handle_IGESDefs_Protocol_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDefs_Protocol self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_Protocol_DecrementRefCounter(self, *args)

Handle_IGESDefs_Protocol_swigregister = _IGESDefs.Handle_IGESDefs_Protocol_swigregister
Handle_IGESDefs_Protocol_swigregister(Handle_IGESDefs_Protocol)

def Handle_IGESDefs_Protocol_DownCast(thing):
    return _IGESDefs.Handle_IGESDefs_Protocol_DownCast(thing)
Handle_IGESDefs_Protocol_DownCast = _IGESDefs.Handle_IGESDefs_Protocol_DownCast

class IGESDefs_GenericData(IGESData.IGESData_IGESEntity):
    """
    defines IGES Generic Data, Type <406> Form <27>
    in package IGESDefs
    Used to communicate information defined by the system
    operator while creating the model. The information is
    system specific and does not map into one of the
    predefined properties or associativities. Properties
    and property values can be defined by multiple
    instances of this property.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDefs_GenericData
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDefs_GenericData(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDefs_GenericData self) -> IGESDefs_GenericData

        defines IGES Generic Data, Type <406> Form <27>
        in package IGESDefs
        Used to communicate information defined by the system
        operator while creating the model. The information is
        system specific and does not map into one of the
        predefined properties or associativities. Properties
        and property values can be defined by multiple
        instances of this property.
        """
        this = _IGESDefs.new_IGESDefs_GenericData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESDefs_GenericData self, Standard_Integer const nbPropVal, Handle_TCollection_HAsciiString aName, Handle_TColStd_HArray1OfInteger allTypes, Handle_TColStd_HArray1OfTransient allValues)

        This method is used to set the fields of the class
        GenericData
        - nbPropVal : Number of property values
        - aName     : Property Name
        - allTypes  : Property Types
        - allValues : Property Values

        :type nbPropVal: int
        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type allTypes: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allValues: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfTransient

        """
        return _IGESDefs.IGESDefs_GenericData_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESDefs_GenericData self) -> Standard_Integer

        returns the number of property values

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_GenericData_NbPropertyValues(self, *args)


    def Name(self, *args):
        """
        Name(IGESDefs_GenericData self) -> Handle_TCollection_HAsciiString

        returns property name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.IGESDefs_GenericData_Name(self, *args)


    def NbTypeValuePairs(self, *args):
        """
        NbTypeValuePairs(IGESDefs_GenericData self) -> Standard_Integer

        returns the number of TYPE/VALUE pairs

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_GenericData_NbTypeValuePairs(self, *args)


    def Type(self, *args):
        """
        Type(IGESDefs_GenericData self, Standard_Integer const Index) -> Standard_Integer

        returns the Index'th property value data type
        raises exception if Index <= 0 or Index > NbTypeValuePairs()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_GenericData_Type(self, *args)


    def Value(self, *args):
        """
        Value(IGESDefs_GenericData self, Standard_Integer const Index) -> Handle_Standard_Transient

        HArray1OfInteger (length 1), HArray1OfReal (length 1) for
        Integer, Real, Boolean (= Integer 0/1),
        HAsciiString for String (the value itself),
        IGESEntity for Entity (the value itself)

        :type Index: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESDefs.IGESDefs_GenericData_Value(self, *args)


    def ValueAsInteger(self, *args):
        """
        ValueAsInteger(IGESDefs_GenericData self, Standard_Integer const ValueNum) -> Standard_Integer

        Returns Attribute Value <AttrNum, rank ValueNum> as an Integer
        Error if Index out of Range, or not an Integer

        :type ValueNum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_GenericData_ValueAsInteger(self, *args)


    def ValueAsReal(self, *args):
        """
        ValueAsReal(IGESDefs_GenericData self, Standard_Integer const ValueNum) -> Standard_Real

        Returns Attribute Value <AttrNum, rank ValueNum> as a Real
        Error if Index out of Range, or not a Real

        :type ValueNum: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDefs.IGESDefs_GenericData_ValueAsReal(self, *args)


    def ValueAsString(self, *args):
        """
        ValueAsString(IGESDefs_GenericData self, Standard_Integer const ValueNum) -> Handle_TCollection_HAsciiString

        Returns Attribute Value <AttrNum, rank ValueNum> as an Integer

        :type ValueNum: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.IGESDefs_GenericData_ValueAsString(self, *args)


    def ValueAsEntity(self, *args):
        """
        ValueAsEntity(IGESDefs_GenericData self, Standard_Integer const ValueNum) -> Handle_IGESData_IGESEntity

        Returns Attribute Value <AttrNum, rank ValueNum> as an Entity
        Error if Index out of Range, or not a Entity

        :type ValueNum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.IGESDefs_GenericData_ValueAsEntity(self, *args)


    def ValueAsLogical(self, *args):
        """
        ValueAsLogical(IGESDefs_GenericData self, Standard_Integer const ValueNum) -> Standard_Boolean

        Returns Attribute Value <AttrNum, rank ValueNum> as a Boolean
        Error if Index out of Range, or not a Logical

        :type ValueNum: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.IGESDefs_GenericData_ValueAsLogical(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDefs.IGESDefs_GenericData_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDefs.IGESDefs_GenericData_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.IGESDefs_GenericData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDefs.delete_IGESDefs_GenericData
IGESDefs_GenericData_swigregister = _IGESDefs.IGESDefs_GenericData_swigregister
IGESDefs_GenericData_swigregister(IGESDefs_GenericData)

def IGESDefs_GenericData_get_type_name(*args):
    """
    IGESDefs_GenericData_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDefs.IGESDefs_GenericData_get_type_name(*args)

def IGESDefs_GenericData_get_type_descriptor(*args):
    """
    IGESDefs_GenericData_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDefs.IGESDefs_GenericData_get_type_descriptor(*args)

class Handle_IGESDefs_SpecificModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDefs_SpecificModule self)

        Nullify the handle


        """
        return _IGESDefs.Handle_IGESDefs_SpecificModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDefs_SpecificModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDefs.Handle_IGESDefs_SpecificModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDefs_SpecificModule self, IGESDefs_SpecificModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDefs.Handle_IGESDefs_SpecificModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDefs_SpecificModule self, Handle_IGESDefs_SpecificModule theHandle) -> Handle_IGESDefs_SpecificModule
        assign(Handle_IGESDefs_SpecificModule self, IGESDefs_SpecificModule thePtr) -> Handle_IGESDefs_SpecificModule
        assign(Handle_IGESDefs_SpecificModule self, Handle_IGESDefs_SpecificModule theHandle) -> Handle_IGESDefs_SpecificModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDefs.Handle_IGESDefs_SpecificModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDefs_SpecificModule self) -> IGESDefs_SpecificModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_SpecificModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDefs_SpecificModule self) -> IGESDefs_SpecificModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_SpecificModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDefs_SpecificModule self) -> IGESDefs_SpecificModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDefs.Handle_IGESDefs_SpecificModule___ref__(self, *args)


    def __hash__(self):
        return _IGESDefs.Handle_IGESDefs_SpecificModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDefs.Handle_IGESDefs_SpecificModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDefs.new_Handle_IGESDefs_SpecificModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDefs.Handle_IGESDefs_SpecificModule_DownCast)
    __swig_destroy__ = _IGESDefs.delete_Handle_IGESDefs_SpecificModule

    def OwnDump(self, *args):
        """
        OwnDump(Handle_IGESDefs_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Specific Dump (own parameters) for IGESDefs

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDefs.Handle_IGESDefs_SpecificModule_OwnDump(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDefs_SpecificModule self) -> char const *

        :rtype: const char *

        """
        return _IGESDefs.Handle_IGESDefs_SpecificModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_SpecificModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_SpecificModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def OwnCorrect(self, *args):
        """
        OwnCorrect(Handle_IGESDefs_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Specific Automatic Correction on own Parameters of an Entity.
        It works by setting in accordance redundant data, if there are
        when there is no ambiguity (else, it does nothing).
        Remark that classic Corrections on Directory Entry (to set
        void data) are taken into account alsewhere.

        For instance, many "Associativity Entities" have a Number of
        Properties which must have a fixed value.
        Or, a ConicalArc has its Form Number which records the kind of
        Conic, also determined from its coefficients
        But, a CircularArc of which Distances (Center-Start) and
        (Center-End) are not equal cannot be corrected ...

        Returns True if something has been corrected in <ent>
        By default, does nothing. If at least one of the Types
        processed by a sub-class of SpecificModule has a Correct
        procedure attached, this method can be redefined

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_SpecificModule_OwnCorrect(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDefs_SpecificModule self)

        Memory deallocator for transient classes


        """
        return _IGESDefs.Handle_IGESDefs_SpecificModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDefs_SpecificModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDefs_SpecificModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_SpecificModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDefs_SpecificModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDefs_SpecificModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_SpecificModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDefs_SpecificModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDefs.Handle_IGESDefs_SpecificModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDefs_SpecificModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_SpecificModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDefs_SpecificModule self)

        Increments the reference counter of this object


        """
        return _IGESDefs.Handle_IGESDefs_SpecificModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDefs_SpecificModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_SpecificModule_DecrementRefCounter(self, *args)

Handle_IGESDefs_SpecificModule_swigregister = _IGESDefs.Handle_IGESDefs_SpecificModule_swigregister
Handle_IGESDefs_SpecificModule_swigregister(Handle_IGESDefs_SpecificModule)

def Handle_IGESDefs_SpecificModule_DownCast(thing):
    return _IGESDefs.Handle_IGESDefs_SpecificModule_DownCast(thing)
Handle_IGESDefs_SpecificModule_DownCast = _IGESDefs.Handle_IGESDefs_SpecificModule_DownCast

class Handle_IGESDefs_AttributeTable(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDefs_AttributeTable self)

        Nullify the handle


        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDefs_AttributeTable self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDefs_AttributeTable self, IGESDefs_AttributeTable thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDefs_AttributeTable self, Handle_IGESDefs_AttributeTable theHandle) -> Handle_IGESDefs_AttributeTable
        assign(Handle_IGESDefs_AttributeTable self, IGESDefs_AttributeTable thePtr) -> Handle_IGESDefs_AttributeTable
        assign(Handle_IGESDefs_AttributeTable self, Handle_IGESDefs_AttributeTable theHandle) -> Handle_IGESDefs_AttributeTable

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDefs_AttributeTable self) -> IGESDefs_AttributeTable

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDefs_AttributeTable self) -> IGESDefs_AttributeTable

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDefs_AttributeTable self) -> IGESDefs_AttributeTable

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable___ref__(self, *args)


    def __hash__(self):
        return _IGESDefs.Handle_IGESDefs_AttributeTable___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDefs.Handle_IGESDefs_AttributeTable___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDefs.new_Handle_IGESDefs_AttributeTable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDefs.Handle_IGESDefs_AttributeTable_DownCast)
    __swig_destroy__ = _IGESDefs.delete_Handle_IGESDefs_AttributeTable

    def Init(self, *args):
        """
        Init(Handle_IGESDefs_AttributeTable self, Handle_TColStd_HArray2OfTransient attributes)

        This method is used to set the fields of the class
        AttributeTable
        - attributes : Attribute instances, created as
        (1,NbAttributes,1,NbRows)
        - NbRows = 1 is a particular case (Form 0)

        :type attributes: OCC.wrapper.TColStd.Handle_TColStd_HArray2OfTransient

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_Init(self, *args)


    def SetDefinition(self, *args):
        """
        SetDefinition(Handle_IGESDefs_AttributeTable self, Handle_IGESDefs_AttributeDef arg2)

        Sets a Definition as Structure information
        (works by calling InitMisc)

        :type def: OCC.wrapper.IGESDefs.Handle_IGESDefs_AttributeDef

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_SetDefinition(self, *args)


    def Definition(self, *args):
        """
        Definition(Handle_IGESDefs_AttributeTable self) -> Handle_IGESDefs_AttributeDef

        Return the Structure information in Directory Entry,
        casted as an AttributeDef

        :rtype: OCC.wrapper.IGESDefs.Handle_IGESDefs_AttributeDef

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_Definition(self, *args)


    def NbRows(self, *args):
        """
        NbRows(Handle_IGESDefs_AttributeTable self) -> Standard_Integer

        returns Number of Rows. Remark that it is always 1 if Form = 0
        It means that the list of Attributes (by their number, and for each
        one its type and ValueCount) is repeated <NbRows> times

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_NbRows(self, *args)


    def NbAttributes(self, *args):
        """
        NbAttributes(Handle_IGESDefs_AttributeTable self) -> Standard_Integer

        returns Number of Attributes

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_NbAttributes(self, *args)


    def DataType(self, *args):
        """
        DataType(Handle_IGESDefs_AttributeTable self, Standard_Integer const Atnum) -> Standard_Integer

        returns the Type of an Attribute, given its No. : it is read in the
        Definition.
        (1 : Integer, 2 : Real, 3 : String, 4 : Entity, 6 : Logical)

        :type Atnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_DataType(self, *args)


    def ValueCount(self, *args):
        """
        ValueCount(Handle_IGESDefs_AttributeTable self, Standard_Integer const Atnum) -> Standard_Integer

        returns the Count of Value for an Attribute, given its No. :
        it is read in the Definition.

        :type Atnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_ValueCount(self, *args)


    def AttributeList(self, *args):
        """
        AttributeList(Handle_IGESDefs_AttributeTable self, Standard_Integer const Attribnum, Standard_Integer const Rownum) -> Handle_Standard_Transient

        :type Attribnum: int
        :type Rownum: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_AttributeList(self, *args)


    def AttributeAsInteger(self, *args):
        """
        AttributeAsInteger(Handle_IGESDefs_AttributeTable self, Standard_Integer const AtNum, Standard_Integer const Rownum, Standard_Integer const ValNum) -> Standard_Integer

        Returns Attribute Value <AtNum, Rownum, rank ValNum> as an Integer
        Error if Indices out of Range, or no Value defined, or not an Integer

        :type AtNum: int
        :type Rownum: int
        :type ValNum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_AttributeAsInteger(self, *args)


    def AttributeAsReal(self, *args):
        """
        AttributeAsReal(Handle_IGESDefs_AttributeTable self, Standard_Integer const AtNum, Standard_Integer const Rownum, Standard_Integer const ValNum) -> Standard_Real

        Returns Attribute Value <AtNum, Rownum, rank ValNum> as a Real
        Error if Indices out of Range, or no Value defined, or not a Real

        :type AtNum: int
        :type Rownum: int
        :type ValNum: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_AttributeAsReal(self, *args)


    def AttributeAsString(self, *args):
        """
        AttributeAsString(Handle_IGESDefs_AttributeTable self, Standard_Integer const AtNum, Standard_Integer const Rownum, Standard_Integer const ValNum) -> Handle_TCollection_HAsciiString

        Returns Attribute Value <AtNum, Rownum, rank ValNum> as an Integer

        :type AtNum: int
        :type Rownum: int
        :type ValNum: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_AttributeAsString(self, *args)


    def AttributeAsEntity(self, *args):
        """
        AttributeAsEntity(Handle_IGESDefs_AttributeTable self, Standard_Integer const AtNum, Standard_Integer const Rownum, Standard_Integer const ValNum) -> Handle_IGESData_IGESEntity

        Returns Attribute Value <AtNum, Rownum, rank ValNum> as an Entity
        Error if Indices out of Range, or no Value defined, or not an Entity

        :type AtNum: int
        :type Rownum: int
        :type ValNum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_AttributeAsEntity(self, *args)


    def AttributeAsLogical(self, *args):
        """
        AttributeAsLogical(Handle_IGESDefs_AttributeTable self, Standard_Integer const AtNum, Standard_Integer const Rownum, Standard_Integer const ValNum) -> Standard_Boolean

        Returns Attribute Value <AtNum, Rownum, rank ValNum> as a Boolean
        Error if Indices out of Range, or no Value defined, or not a Logical

        :type AtNum: int
        :type Rownum: int
        :type ValNum: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_AttributeAsLogical(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDefs_AttributeTable self) -> char const *

        :rtype: const char *

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_AttributeTable_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_AttributeTable_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDefs_AttributeTable self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDefs_AttributeTable self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDefs_AttributeTable self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDefs_AttributeTable self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDefs_AttributeTable self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDefs_AttributeTable self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDefs_AttributeTable self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDefs_AttributeTable self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDefs_AttributeTable self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDefs_AttributeTable self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDefs_AttributeTable self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDefs_AttributeTable self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDefs_AttributeTable self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDefs_AttributeTable self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDefs_AttributeTable self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDefs_AttributeTable self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDefs_AttributeTable self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDefs_AttributeTable self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDefs_AttributeTable self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDefs_AttributeTable self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDefs_AttributeTable self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDefs_AttributeTable self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDefs_AttributeTable self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDefs_AttributeTable self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDefs_AttributeTable self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDefs_AttributeTable self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDefs_AttributeTable self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDefs_AttributeTable self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDefs_AttributeTable self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDefs_AttributeTable self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDefs_AttributeTable self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDefs_AttributeTable self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDefs_AttributeTable self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDefs_AttributeTable self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDefs_AttributeTable self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDefs_AttributeTable self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDefs_AttributeTable self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDefs_AttributeTable self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDefs_AttributeTable self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDefs_AttributeTable self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDefs_AttributeTable self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDefs_AttributeTable self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDefs_AttributeTable self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDefs_AttributeTable self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDefs_AttributeTable self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDefs_AttributeTable self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDefs_AttributeTable self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDefs_AttributeTable self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDefs_AttributeTable self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDefs_AttributeTable self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDefs_AttributeTable self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDefs_AttributeTable self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDefs_AttributeTable self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDefs_AttributeTable self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDefs_AttributeTable self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDefs_AttributeTable self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDefs_AttributeTable self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDefs_AttributeTable self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDefs_AttributeTable self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDefs_AttributeTable self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDefs_AttributeTable self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDefs_AttributeTable self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDefs_AttributeTable self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDefs_AttributeTable self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDefs_AttributeTable self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDefs_AttributeTable self)

        Memory deallocator for transient classes


        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDefs_AttributeTable self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDefs_AttributeTable self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDefs_AttributeTable self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDefs_AttributeTable self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDefs_AttributeTable self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDefs_AttributeTable self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDefs_AttributeTable self)

        Increments the reference counter of this object


        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDefs_AttributeTable self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_AttributeTable_DecrementRefCounter(self, *args)

Handle_IGESDefs_AttributeTable_swigregister = _IGESDefs.Handle_IGESDefs_AttributeTable_swigregister
Handle_IGESDefs_AttributeTable_swigregister(Handle_IGESDefs_AttributeTable)

def Handle_IGESDefs_AttributeTable_DownCast(thing):
    return _IGESDefs.Handle_IGESDefs_AttributeTable_DownCast(thing)
Handle_IGESDefs_AttributeTable_DownCast = _IGESDefs.Handle_IGESDefs_AttributeTable_DownCast

class Handle_IGESDefs_UnitsData(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDefs_UnitsData self)

        Nullify the handle


        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDefs_UnitsData self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDefs_UnitsData self, IGESDefs_UnitsData thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDefs_UnitsData self, Handle_IGESDefs_UnitsData theHandle) -> Handle_IGESDefs_UnitsData
        assign(Handle_IGESDefs_UnitsData self, IGESDefs_UnitsData thePtr) -> Handle_IGESDefs_UnitsData
        assign(Handle_IGESDefs_UnitsData self, Handle_IGESDefs_UnitsData theHandle) -> Handle_IGESDefs_UnitsData

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDefs_UnitsData self) -> IGESDefs_UnitsData

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDefs_UnitsData self) -> IGESDefs_UnitsData

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDefs_UnitsData self) -> IGESDefs_UnitsData

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData___ref__(self, *args)


    def __hash__(self):
        return _IGESDefs.Handle_IGESDefs_UnitsData___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDefs.Handle_IGESDefs_UnitsData___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDefs.new_Handle_IGESDefs_UnitsData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDefs.Handle_IGESDefs_UnitsData_DownCast)
    __swig_destroy__ = _IGESDefs.delete_Handle_IGESDefs_UnitsData

    def Init(self, *args):
        """
        Init(Handle_IGESDefs_UnitsData self, Handle_Interface_HArray1OfHAsciiString unitTypes, Handle_Interface_HArray1OfHAsciiString unitValues, Handle_TColStd_HArray1OfReal unitScales)

        This method is used to set the fields of the class
        UnitsData
        - unitTypes  : Types of the units being defined
        - unitValues : Unit Values of the units
        - unitScales : Multiplicative Scale Factors
        raises exception if lengths of unitTypes, unitValues and
        unitScale are not same

        :type unitTypes: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString
        :type unitValues: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString
        :type unitScales: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_Init(self, *args)


    def NbUnits(self, *args):
        """
        NbUnits(Handle_IGESDefs_UnitsData self) -> Standard_Integer

        returns the Number of units defined by this entity

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_NbUnits(self, *args)


    def UnitType(self, *args):
        """
        UnitType(Handle_IGESDefs_UnitsData self, Standard_Integer const UnitNum) -> Handle_TCollection_HAsciiString

        returns the Type of the UnitNum'th unit being defined
        raises exception if UnitNum <= 0 or UnitNum > NbUnits()

        :type UnitNum: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_UnitType(self, *args)


    def UnitValue(self, *args):
        """
        UnitValue(Handle_IGESDefs_UnitsData self, Standard_Integer const UnitNum) -> Handle_TCollection_HAsciiString

        returns the Units of the UnitNum'th unit being defined
        raises exception if UnitNum <= 0 or UnitNum > NbUnits()

        :type UnitNum: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_UnitValue(self, *args)


    def ScaleFactor(self, *args):
        """
        ScaleFactor(Handle_IGESDefs_UnitsData self, Standard_Integer const UnitNum) -> Standard_Real

        returns the multiplicative scale factor to be apllied to the
        UnitNum'th unit being defined
        raises exception if UnitNum <= 0 or UnitNum > NbUnits()

        :type UnitNum: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_ScaleFactor(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDefs_UnitsData self) -> char const *

        :rtype: const char *

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_UnitsData_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_UnitsData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDefs_UnitsData self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDefs_UnitsData self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDefs_UnitsData self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDefs_UnitsData self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDefs_UnitsData self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDefs_UnitsData self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDefs_UnitsData self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDefs_UnitsData self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDefs_UnitsData self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDefs_UnitsData self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDefs_UnitsData self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDefs_UnitsData self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDefs_UnitsData self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDefs_UnitsData self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDefs_UnitsData self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDefs_UnitsData self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDefs_UnitsData self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDefs_UnitsData self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDefs_UnitsData self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDefs_UnitsData self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDefs_UnitsData self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDefs_UnitsData self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDefs_UnitsData self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDefs_UnitsData self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDefs_UnitsData self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDefs_UnitsData self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDefs_UnitsData self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDefs_UnitsData self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDefs_UnitsData self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDefs_UnitsData self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDefs_UnitsData self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDefs_UnitsData self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDefs_UnitsData self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDefs_UnitsData self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDefs_UnitsData self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDefs_UnitsData self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDefs_UnitsData self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDefs_UnitsData self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDefs_UnitsData self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDefs_UnitsData self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDefs_UnitsData self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDefs_UnitsData self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDefs_UnitsData self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDefs_UnitsData self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDefs_UnitsData self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDefs_UnitsData self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDefs_UnitsData self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDefs_UnitsData self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDefs_UnitsData self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDefs_UnitsData self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDefs_UnitsData self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDefs_UnitsData self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDefs_UnitsData self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDefs_UnitsData self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDefs_UnitsData self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDefs_UnitsData self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDefs_UnitsData self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDefs_UnitsData self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDefs_UnitsData self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDefs_UnitsData self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDefs_UnitsData self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDefs_UnitsData self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDefs_UnitsData self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDefs_UnitsData self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDefs_UnitsData self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDefs_UnitsData self)

        Memory deallocator for transient classes


        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDefs_UnitsData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDefs_UnitsData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDefs_UnitsData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDefs_UnitsData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDefs_UnitsData self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDefs_UnitsData self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDefs_UnitsData self)

        Increments the reference counter of this object


        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDefs_UnitsData self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_UnitsData_DecrementRefCounter(self, *args)

Handle_IGESDefs_UnitsData_swigregister = _IGESDefs.Handle_IGESDefs_UnitsData_swigregister
Handle_IGESDefs_UnitsData_swigregister(Handle_IGESDefs_UnitsData)

def Handle_IGESDefs_UnitsData_DownCast(thing):
    return _IGESDefs.Handle_IGESDefs_UnitsData_DownCast(thing)
Handle_IGESDefs_UnitsData_DownCast = _IGESDefs.Handle_IGESDefs_UnitsData_DownCast

class IGESDefs_HArray1OfHArray1OfTextDisplayTemplate(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self, Standard_Integer const low, Standard_Integer const up) -> IGESDefs_HArray1OfHArray1OfTextDisplayTemplate

        :type low: int
        :type up: int

        """
        this = _IGESDefs.new_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Lower(self, *args):
        """
        Lower(IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_Upper(self, *args)


    def Length(self, *args):
        """
        Length(IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_Length(self, *args)


    def SetValue(self, *args):
        """
        SetValue(IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self, Standard_Integer const num, Handle_IGESGraph_HArray1OfTextDisplayTemplate val)

        :type num: int
        :type val: OCC.wrapper.IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate

        """
        return _IGESDefs.IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_SetValue(self, *args)


    def Value(self, *args):
        """
        Value(IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self, Standard_Integer const num) -> Handle_IGESGraph_HArray1OfTextDisplayTemplate

        :type num: int
        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate

        """
        return _IGESDefs.IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_Value(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESDefs.IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESDefs.IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESDefs.delete_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate
IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_swigregister = _IGESDefs.IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_swigregister
IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_swigregister(IGESDefs_HArray1OfHArray1OfTextDisplayTemplate)

def IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_get_type_name(*args):
    """
    IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESDefs.IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_get_type_name(*args)

def IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_get_type_descriptor(*args):
    """
    IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESDefs.IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_get_type_descriptor(*args)

class IGESDefs_ToolAttributeTable(object):
    """
    Tool to work on a AttributeTable. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDefs_ToolAttributeTable self) -> IGESDefs_ToolAttributeTable

        Returns a ToolAttributeTable, ready to work


        """
        this = _IGESDefs.new_IGESDefs_ToolAttributeTable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDefs_ToolAttributeTable self, Handle_IGESDefs_AttributeTable ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_AttributeTable
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDefs.IGESDefs_ToolAttributeTable_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDefs_ToolAttributeTable self, Handle_IGESDefs_AttributeTable ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_AttributeTable
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDefs.IGESDefs_ToolAttributeTable_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDefs_ToolAttributeTable self, Handle_IGESDefs_AttributeTable ent, Interface_EntityIterator iter)

        Lists the Entities shared by a AttributeTable <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_AttributeTable
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.IGESDefs_ToolAttributeTable_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDefs_ToolAttributeTable self, Handle_IGESDefs_AttributeTable ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_AttributeTable
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDefs.IGESDefs_ToolAttributeTable_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDefs_ToolAttributeTable self, Handle_IGESDefs_AttributeTable ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_AttributeTable
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDefs.IGESDefs_ToolAttributeTable_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDefs_ToolAttributeTable self, Handle_IGESDefs_AttributeTable entfrom, Handle_IGESDefs_AttributeTable entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDefs.Handle_IGESDefs_AttributeTable
        :type entto: OCC.wrapper.IGESDefs.Handle_IGESDefs_AttributeTable
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDefs.IGESDefs_ToolAttributeTable_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDefs_ToolAttributeTable self, Handle_IGESDefs_AttributeTable ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_AttributeTable
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDefs.IGESDefs_ToolAttributeTable_OwnDump(self, *args)

    __swig_destroy__ = _IGESDefs.delete_IGESDefs_ToolAttributeTable
IGESDefs_ToolAttributeTable_swigregister = _IGESDefs.IGESDefs_ToolAttributeTable_swigregister
IGESDefs_ToolAttributeTable_swigregister(IGESDefs_ToolAttributeTable)

class IGESDefs_ToolAssociativityDef(object):
    """
    Tool to work on a AssociativityDef. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESDefs_ToolAssociativityDef self) -> IGESDefs_ToolAssociativityDef

        Returns a ToolAssociativityDef, ready to work


        """
        this = _IGESDefs.new_IGESDefs_ToolAssociativityDef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESDefs_ToolAssociativityDef self, Handle_IGESDefs_AssociativityDef ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_AssociativityDef
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESDefs.IGESDefs_ToolAssociativityDef_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESDefs_ToolAssociativityDef self, Handle_IGESDefs_AssociativityDef ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_AssociativityDef
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESDefs.IGESDefs_ToolAssociativityDef_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESDefs_ToolAssociativityDef self, Handle_IGESDefs_AssociativityDef ent, Interface_EntityIterator iter)

        Lists the Entities shared by a AssociativityDef <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_AssociativityDef
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.IGESDefs_ToolAssociativityDef_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESDefs_ToolAssociativityDef self, Handle_IGESDefs_AssociativityDef ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_AssociativityDef
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDefs.IGESDefs_ToolAssociativityDef_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESDefs_ToolAssociativityDef self, Handle_IGESDefs_AssociativityDef ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_AssociativityDef
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDefs.IGESDefs_ToolAssociativityDef_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESDefs_ToolAssociativityDef self, Handle_IGESDefs_AssociativityDef entfrom, Handle_IGESDefs_AssociativityDef entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESDefs.Handle_IGESDefs_AssociativityDef
        :type entto: OCC.wrapper.IGESDefs.Handle_IGESDefs_AssociativityDef
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDefs.IGESDefs_ToolAssociativityDef_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESDefs_ToolAssociativityDef self, Handle_IGESDefs_AssociativityDef ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESDefs.Handle_IGESDefs_AssociativityDef
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESDefs.IGESDefs_ToolAssociativityDef_OwnDump(self, *args)

    __swig_destroy__ = _IGESDefs.delete_IGESDefs_ToolAssociativityDef
IGESDefs_ToolAssociativityDef_swigregister = _IGESDefs.IGESDefs_ToolAssociativityDef_swigregister
IGESDefs_ToolAssociativityDef_swigregister(IGESDefs_ToolAssociativityDef)

class Handle_IGESDefs_GeneralModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDefs_GeneralModule self)

        Nullify the handle


        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDefs_GeneralModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDefs_GeneralModule self, IGESDefs_GeneralModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDefs_GeneralModule self, Handle_IGESDefs_GeneralModule theHandle) -> Handle_IGESDefs_GeneralModule
        assign(Handle_IGESDefs_GeneralModule self, IGESDefs_GeneralModule thePtr) -> Handle_IGESDefs_GeneralModule
        assign(Handle_IGESDefs_GeneralModule self, Handle_IGESDefs_GeneralModule theHandle) -> Handle_IGESDefs_GeneralModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDefs_GeneralModule self) -> IGESDefs_GeneralModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDefs_GeneralModule self) -> IGESDefs_GeneralModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDefs_GeneralModule self) -> IGESDefs_GeneralModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule___ref__(self, *args)


    def __hash__(self):
        return _IGESDefs.Handle_IGESDefs_GeneralModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDefs.Handle_IGESDefs_GeneralModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDefs.new_Handle_IGESDefs_GeneralModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDefs.Handle_IGESDefs_GeneralModule_DownCast)
    __swig_destroy__ = _IGESDefs.delete_Handle_IGESDefs_GeneralModule

    def OwnSharedCase(self, *args):
        """
        OwnSharedCase(Handle_IGESDefs_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Lists the Entities shared by a given IGESEntity <ent>, from
        its specific parameters : specific for each type

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_OwnSharedCase(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(Handle_IGESDefs_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> IGESData_DirChecker

        Returns a DirChecker, specific for each type of Entity
        (identified by its Case Number) : this DirChecker defines
        constraints which must be respected by the DirectoryPart

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_DirChecker(self, *args)


    def OwnCheckCase(self, *args):
        """
        OwnCheckCase(Handle_IGESDefs_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_OwnCheckCase(self, *args)


    def NewVoid(self, *args):
        """
        NewVoid(Handle_IGESDefs_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entto) -> Standard_Boolean

        Specific creation of a new void entity

        :type CN: int
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_NewVoid(self, *args)


    def OwnCopyCase(self, *args):
        """
        OwnCopyCase(Handle_IGESDefs_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Copies parameters which are specific of each Type of Entity

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_OwnCopyCase(self, *args)


    def CategoryNumber(self, *args):
        """
        CategoryNumber(Handle_IGESDefs_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Standard_Integer

        Returns a category number which characterizes an entity
        Auxiliary for all

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_CategoryNumber(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDefs_GeneralModule self) -> char const *

        :rtype: const char *

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_GeneralModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_GeneralModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FillSharedCase(self, *args):
        """
        FillSharedCase(Handle_IGESDefs_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Fills the list of Entities shared by an IGESEntity <ent>,
        according a Case Number <CN> (formerly computed by CaseNum).
        Considers Properties and Directory Part, and calls
        OwnSharedCase (which is adapted to each Type of Entity)

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_FillSharedCase(self, *args)


    def ListImpliedCase(self, *args):
        """
        ListImpliedCase(Handle_IGESDefs_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Lists the Implied References of <ent>. Here, these are the
        Associativities, plus the Entities defined by OwnSharedCase

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_ListImpliedCase(self, *args)


    def OwnImpliedCase(self, *args):
        """
        OwnImpliedCase(Handle_IGESDefs_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Specific list of Entities implied by a given IGESEntity <ent>
        (in addition to Associativities). By default, there are none,
        but this method can be redefined as required

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_OwnImpliedCase(self, *args)


    def CheckCase(self, *args):
        """
        CheckCase(Handle_IGESDefs_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Semantic Checking of an IGESEntity. Performs general Checks,
        which use DirChecker, then call OwnCheck which does a check
        specific for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_CheckCase(self, *args)


    def CanCopy(self, *args):
        """
        CanCopy(Handle_IGESDefs_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent) -> Standard_Boolean

        Specific answer to the question "is Copy properly implemented"
        For IGES, answer is always True

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_CanCopy(self, *args)


    def CopyCase(self, *args):
        """
        CopyCase(Handle_IGESDefs_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC)

        Copy ("Deep") from <entfrom> to <entto> (same type)
        by using a CopyTool which provides its working Map.
        For IGESEntities, Copies general data (Directory Part, List of
        Properties) and call OwnCopyCase

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_CopyCase(self, *args)


    def RenewImpliedCase(self, *args):
        """
        RenewImpliedCase(Handle_IGESDefs_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC)

        Renewing of Implied References.
        For IGESEntities, Copies general data(List of Associativities)
        and calls OwnRenewCase

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_RenewImpliedCase(self, *args)


    def OwnRenewCase(self, *args):
        """
        OwnRenewCase(Handle_IGESDefs_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Renews parameters which are specific of each Type of Entity :
        the provided default does nothing, but this method may be
        redefined as required

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_OwnRenewCase(self, *args)


    def WhenDeleteCase(self, *args):
        """
        WhenDeleteCase(Handle_IGESDefs_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Standard_Boolean const dispatched)

        Prepares an IGES Entity for delete : works on directory part
        then calls OwnDeleteCase
        While dispatch requires to copy the entities, <dispatched> is
        ignored, entities are cleared in any case

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type dispatched: bool

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_WhenDeleteCase(self, *args)


    def OwnDeleteCase(self, *args):
        """
        OwnDeleteCase(Handle_IGESDefs_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent)

        Specific preparation for delete, acts on own parameters
        Default does nothing, to be redefined as required

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_OwnDeleteCase(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESDefs_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Handle_TCollection_HAsciiString

        Returns the name of an IGES Entity (its NameValue)
        Can be redefined for an even more specific case ...

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_Name(self, *args)


    def FillShared(self, *args):
        """
        FillShared(Handle_IGESDefs_GeneralModule self, Handle_Interface_InterfaceModel model, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Specific filling of the list of Entities shared by an Entity
        <ent>, according a Case Number <CN> (formerly computed by
        CaseNum), considered in the context of a Model <model>
        Default calls FillSharedCase (i.e., ignores the model)
        Can be redefined to use the model for working

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_FillShared(self, *args)


    def Share(self, *args):
        """
        Share(Handle_IGESDefs_GeneralModule self, Interface_EntityIterator iter, Handle_Standard_Transient shared)

        Adds an Entity to a Shared List (uses GetOneItem on <iter>)

        :type iter: OCC.wrapper.Interface.Interface_EntityIterator
        :type shared: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_Share(self, *args)


    def ListImplied(self, *args):
        """
        ListImplied(Handle_IGESDefs_GeneralModule self, Handle_Interface_InterfaceModel model, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        List the Implied References of <ent> considered in the context
        of a Model <model> : i.e. the Entities which are Referenced
        while not considered as Shared (not copied if <ent> is,
        references not renewed by CopyCase but by ImpliedCase, only
        if referenced Entities have been Copied too)
        FillShared + ListImplied give the complete list of References
        Default calls ListImpliedCase (i.e. ignores the model)
        Can be redefined to use the model for working

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_ListImplied(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESDefs_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC) -> Standard_Boolean

        Dispatches an entity
        Returns True if it works by copy, False if it just duplicates
        the starting Handle

        Dispatching means producing a new entity, image of the
        starting one, in order to be put into a new Model, this Model
        being itself the result of a dispatch from an original Model

        According to the cases, dispatch can either
        * just return <entto> as equating <entfrom>
        -> the new model designates the starting entity : it is
        lighter, but the dispatched entity being shared might not be
        modified for dispatch
        * copy <entfrom> to <entto>
        by calling NewVoid+CopyCase (two steps) or NewCopiedCase (1)
        -> the dispatched entity is a COPY, hence it can be modified

        The provided default just duplicates the handle without
        copying, then returns False. Can be redefined

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_Dispatch(self, *args)


    def NewCopiedCase(self, *args):
        """
        NewCopiedCase(Handle_IGESDefs_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC) -> Standard_Boolean

        Specific operator (create+copy) defaulted to do nothing.
        It can be redefined : When it is not possible to work in two
        steps (NewVoid then CopyCase). This can occur when there is
        no default constructor : hence the result <entto> must be
        created with an effective definition.
        Remark : if NewCopiedCase is defined, CopyCase has nothing to do
        Returns True if it has produced something, false else

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_NewCopiedCase(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDefs_GeneralModule self)

        Memory deallocator for transient classes


        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDefs_GeneralModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDefs_GeneralModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDefs_GeneralModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDefs_GeneralModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDefs_GeneralModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDefs_GeneralModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDefs_GeneralModule self)

        Increments the reference counter of this object


        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDefs_GeneralModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_GeneralModule_DecrementRefCounter(self, *args)

Handle_IGESDefs_GeneralModule_swigregister = _IGESDefs.Handle_IGESDefs_GeneralModule_swigregister
Handle_IGESDefs_GeneralModule_swigregister(Handle_IGESDefs_GeneralModule)

def Handle_IGESDefs_GeneralModule_DownCast(thing):
    return _IGESDefs.Handle_IGESDefs_GeneralModule_DownCast(thing)
Handle_IGESDefs_GeneralModule_DownCast = _IGESDefs.Handle_IGESDefs_GeneralModule_DownCast

class NCollection_Array1_Handle_IGESDefs_TabularData(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_IGESDefs_TabularData self) -> NCollection_Array1< opencascade::handle< IGESDefs_TabularData > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_IGESDefs_TabularData self) -> NCollection_Array1< opencascade::handle< IGESDefs_TabularData > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_IGESDefs_TabularData self) -> NCollection_Array1< opencascade::handle< IGESDefs_TabularData > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_IGESDefs_TabularData self) -> NCollection_Array1< opencascade::handle< IGESDefs_TabularData > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _IGESDefs.new_NCollection_Array1_Handle_IGESDefs_TabularData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_IGESDefs_TabularData self, Handle_IGESDefs_TabularData theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_IGESDefs_TabularData self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_IGESDefs_TabularData self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_IGESDefs_TabularData self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_IGESDefs_TabularData self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_IGESDefs_TabularData self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_IGESDefs_TabularData self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_IGESDefs_TabularData self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_IGESDefs_TabularData self, NCollection_Array1_Handle_IGESDefs_TabularData theOther) -> NCollection_Array1_Handle_IGESDefs_TabularData

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_IGESDefs_TabularData self, NCollection_Array1_Handle_IGESDefs_TabularData theOther) -> NCollection_Array1_Handle_IGESDefs_TabularData

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_IGESDefs_TabularData self, NCollection_Array1_Handle_IGESDefs_TabularData theOther) -> NCollection_Array1_Handle_IGESDefs_TabularData
        assign(NCollection_Array1_Handle_IGESDefs_TabularData self, NCollection_Array1_Handle_IGESDefs_TabularData theOther) -> NCollection_Array1_Handle_IGESDefs_TabularData

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_IGESDefs_TabularData self) -> Handle_IGESDefs_TabularData

        @return first element

        :rtype: TheItemType &

        """
        return _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_IGESDefs_TabularData self) -> Handle_IGESDefs_TabularData

        @return last element

        :rtype: TheItemType &

        """
        return _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_IGESDefs_TabularData self, Standard_Integer const theIndex) -> Handle_IGESDefs_TabularData

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_IGESDefs_TabularData self, Standard_Integer const theIndex, Handle_IGESDefs_TabularData theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_IGESDefs_TabularData self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData_Resize(self, *args)

    __swig_destroy__ = _IGESDefs.delete_NCollection_Array1_Handle_IGESDefs_TabularData
NCollection_Array1_Handle_IGESDefs_TabularData_swigregister = _IGESDefs.NCollection_Array1_Handle_IGESDefs_TabularData_swigregister
NCollection_Array1_Handle_IGESDefs_TabularData_swigregister(NCollection_Array1_Handle_IGESDefs_TabularData)


try:
	IGESDefs_Array1OfTabularData = NCollection_Array1_Handle_IGESDefs_TabularData
except NameError:
	pass # does not exist, probably ignored

class Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self)

        Nullify the handle


        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self, IGESDefs_HArray1OfHArray1OfTextDisplayTemplate thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self, Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate theHandle) -> Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate
        assign(Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self, IGESDefs_HArray1OfHArray1OfTextDisplayTemplate thePtr) -> Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate
        assign(Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self, Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate theHandle) -> Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self) -> IGESDefs_HArray1OfHArray1OfTextDisplayTemplate

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self) -> IGESDefs_HArray1OfHArray1OfTextDisplayTemplate

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self) -> IGESDefs_HArray1OfHArray1OfTextDisplayTemplate

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate___ref__(self, *args)


    def __hash__(self):
        return _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDefs.new_Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_DownCast)
    __swig_destroy__ = _IGESDefs.delete_Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate

    def Lower(self, *args):
        """
        Lower(Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_Upper(self, *args)


    def Length(self, *args):
        """
        Length(Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_Length(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self, Standard_Integer const num, Handle_IGESGraph_HArray1OfTextDisplayTemplate val)

        :type num: int
        :type val: OCC.wrapper.IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_SetValue(self, *args)


    def Value(self, *args):
        """
        Value(Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self, Standard_Integer const num) -> Handle_IGESGraph_HArray1OfTextDisplayTemplate

        :type num: int
        :rtype: OCC.wrapper.IGESGraph.Handle_IGESGraph_HArray1OfTextDisplayTemplate

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_Value(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self) -> char const *

        :rtype: const char *

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self)

        Memory deallocator for transient classes


        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self)

        Increments the reference counter of this object


        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_DecrementRefCounter(self, *args)

Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_swigregister = _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_swigregister
Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_swigregister(Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate)

def Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_DownCast(thing):
    return _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_DownCast(thing)
Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_DownCast = _IGESDefs.Handle_IGESDefs_HArray1OfHArray1OfTextDisplayTemplate_DownCast

class IGESDefs_(object):
    """
    To embody general definitions of Entities
    (Parameters, Tables ...)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(*args):
        """
        Init()

        Prepares dynamic data (Protocol, Modules) for this package


        """
        return _IGESDefs.IGESDefs__Init(*args)

    Init = staticmethod(Init)

    def Protocol(*args):
        """
        Protocol() -> Handle_IGESDefs_Protocol

        Returns the Protocol for this Package

        :rtype: OCC.wrapper.IGESDefs.Handle_IGESDefs_Protocol

        """
        return _IGESDefs.IGESDefs__Protocol(*args)

    Protocol = staticmethod(Protocol)

    def __init__(self):
        """
        To embody general definitions of Entities
        (Parameters, Tables ...)
        """
        this = _IGESDefs.new_IGESDefs_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESDefs.delete_IGESDefs_
IGESDefs__swigregister = _IGESDefs.IGESDefs__swigregister
IGESDefs__swigregister(IGESDefs_)

def IGESDefs__Init(*args):
    """
    IGESDefs__Init()

    Prepares dynamic data (Protocol, Modules) for this package


    """
    return _IGESDefs.IGESDefs__Init(*args)

def IGESDefs__Protocol(*args):
    """
    IGESDefs__Protocol() -> Handle_IGESDefs_Protocol

    Returns the Protocol for this Package

    :rtype: OCC.wrapper.IGESDefs.Handle_IGESDefs_Protocol

    """
    return _IGESDefs.IGESDefs__Protocol(*args)

class Handle_IGESDefs_GenericData(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESDefs_GenericData self)

        Nullify the handle


        """
        return _IGESDefs.Handle_IGESDefs_GenericData_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESDefs_GenericData self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESDefs_GenericData self, IGESDefs_GenericData thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESDefs_GenericData self, Handle_IGESDefs_GenericData theHandle) -> Handle_IGESDefs_GenericData
        assign(Handle_IGESDefs_GenericData self, IGESDefs_GenericData thePtr) -> Handle_IGESDefs_GenericData
        assign(Handle_IGESDefs_GenericData self, Handle_IGESDefs_GenericData theHandle) -> Handle_IGESDefs_GenericData

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESDefs_GenericData self) -> IGESDefs_GenericData

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESDefs_GenericData self) -> IGESDefs_GenericData

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESDefs.Handle_IGESDefs_GenericData___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESDefs_GenericData self) -> IGESDefs_GenericData

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESDefs.Handle_IGESDefs_GenericData___ref__(self, *args)


    def __hash__(self):
        return _IGESDefs.Handle_IGESDefs_GenericData___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESDefs.Handle_IGESDefs_GenericData___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESDefs.new_Handle_IGESDefs_GenericData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESDefs.Handle_IGESDefs_GenericData_DownCast)
    __swig_destroy__ = _IGESDefs.delete_Handle_IGESDefs_GenericData

    def Init(self, *args):
        """
        Init(Handle_IGESDefs_GenericData self, Standard_Integer const nbPropVal, Handle_TCollection_HAsciiString aName, Handle_TColStd_HArray1OfInteger allTypes, Handle_TColStd_HArray1OfTransient allValues)

        This method is used to set the fields of the class
        GenericData
        - nbPropVal : Number of property values
        - aName     : Property Name
        - allTypes  : Property Types
        - allValues : Property Values

        :type nbPropVal: int
        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type allTypes: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger
        :type allValues: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfTransient

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESDefs_GenericData self) -> Standard_Integer

        returns the number of property values

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_NbPropertyValues(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESDefs_GenericData self) -> Handle_TCollection_HAsciiString

        returns property name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_Name(self, *args)


    def NbTypeValuePairs(self, *args):
        """
        NbTypeValuePairs(Handle_IGESDefs_GenericData self) -> Standard_Integer

        returns the number of TYPE/VALUE pairs

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_NbTypeValuePairs(self, *args)


    def Type(self, *args):
        """
        Type(Handle_IGESDefs_GenericData self, Standard_Integer const Index) -> Standard_Integer

        returns the Index'th property value data type
        raises exception if Index <= 0 or Index > NbTypeValuePairs()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_Type(self, *args)


    def Value(self, *args):
        """
        Value(Handle_IGESDefs_GenericData self, Standard_Integer const Index) -> Handle_Standard_Transient

        HArray1OfInteger (length 1), HArray1OfReal (length 1) for
        Integer, Real, Boolean (= Integer 0/1),
        HAsciiString for String (the value itself),
        IGESEntity for Entity (the value itself)

        :type Index: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_Value(self, *args)


    def ValueAsInteger(self, *args):
        """
        ValueAsInteger(Handle_IGESDefs_GenericData self, Standard_Integer const ValueNum) -> Standard_Integer

        Returns Attribute Value <AttrNum, rank ValueNum> as an Integer
        Error if Index out of Range, or not an Integer

        :type ValueNum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_ValueAsInteger(self, *args)


    def ValueAsReal(self, *args):
        """
        ValueAsReal(Handle_IGESDefs_GenericData self, Standard_Integer const ValueNum) -> Standard_Real

        Returns Attribute Value <AttrNum, rank ValueNum> as a Real
        Error if Index out of Range, or not a Real

        :type ValueNum: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_ValueAsReal(self, *args)


    def ValueAsString(self, *args):
        """
        ValueAsString(Handle_IGESDefs_GenericData self, Standard_Integer const ValueNum) -> Handle_TCollection_HAsciiString

        Returns Attribute Value <AttrNum, rank ValueNum> as an Integer

        :type ValueNum: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_ValueAsString(self, *args)


    def ValueAsEntity(self, *args):
        """
        ValueAsEntity(Handle_IGESDefs_GenericData self, Standard_Integer const ValueNum) -> Handle_IGESData_IGESEntity

        Returns Attribute Value <AttrNum, rank ValueNum> as an Entity
        Error if Index out of Range, or not a Entity

        :type ValueNum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_ValueAsEntity(self, *args)


    def ValueAsLogical(self, *args):
        """
        ValueAsLogical(Handle_IGESDefs_GenericData self, Standard_Integer const ValueNum) -> Standard_Boolean

        Returns Attribute Value <AttrNum, rank ValueNum> as a Boolean
        Error if Index out of Range, or not a Logical

        :type ValueNum: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_ValueAsLogical(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESDefs_GenericData self) -> char const *

        :rtype: const char *

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_GenericData_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESDefs.Handle_IGESDefs_GenericData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESDefs_GenericData self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESDefs_GenericData self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESDefs_GenericData self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESDefs_GenericData self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESDefs_GenericData self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESDefs_GenericData self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESDefs_GenericData self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESDefs_GenericData self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESDefs_GenericData self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESDefs_GenericData self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESDefs_GenericData self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESDefs_GenericData self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESDefs_GenericData self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESDefs_GenericData self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESDefs_GenericData self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESDefs_GenericData self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESDefs_GenericData self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESDefs_GenericData self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESDefs_GenericData self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESDefs_GenericData self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESDefs_GenericData self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESDefs_GenericData self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESDefs_GenericData self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESDefs_GenericData self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESDefs_GenericData self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESDefs_GenericData self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESDefs_GenericData self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESDefs_GenericData self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESDefs_GenericData self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESDefs_GenericData self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESDefs_GenericData self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESDefs_GenericData self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESDefs_GenericData self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESDefs_GenericData self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESDefs_GenericData self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESDefs_GenericData self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESDefs_GenericData self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESDefs_GenericData self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESDefs_GenericData self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESDefs_GenericData self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESDefs_GenericData self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESDefs_GenericData self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESDefs_GenericData self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESDefs_GenericData self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESDefs_GenericData self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESDefs_GenericData self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESDefs_GenericData self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESDefs_GenericData self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESDefs_GenericData self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESDefs_GenericData self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESDefs_GenericData self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESDefs_GenericData self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESDefs_GenericData self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESDefs_GenericData self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESDefs_GenericData self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESDefs_GenericData self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESDefs_GenericData self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESDefs_GenericData self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESDefs_GenericData self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESDefs_GenericData self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESDefs_GenericData self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESDefs_GenericData self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESDefs_GenericData self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESDefs_GenericData self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESDefs_GenericData self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESDefs_GenericData self)

        Memory deallocator for transient classes


        """
        return _IGESDefs.Handle_IGESDefs_GenericData_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESDefs_GenericData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESDefs_GenericData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESDefs_GenericData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESDefs_GenericData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESDefs_GenericData self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESDefs_GenericData self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESDefs_GenericData self)

        Increments the reference counter of this object


        """
        return _IGESDefs.Handle_IGESDefs_GenericData_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESDefs_GenericData self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESDefs.Handle_IGESDefs_GenericData_DecrementRefCounter(self, *args)

Handle_IGESDefs_GenericData_swigregister = _IGESDefs.Handle_IGESDefs_GenericData_swigregister
Handle_IGESDefs_GenericData_swigregister(Handle_IGESDefs_GenericData)

def Handle_IGESDefs_GenericData_DownCast(thing):
    return _IGESDefs.Handle_IGESDefs_GenericData_DownCast(thing)
Handle_IGESDefs_GenericData_DownCast = _IGESDefs.Handle_IGESDefs_GenericData_DownCast



