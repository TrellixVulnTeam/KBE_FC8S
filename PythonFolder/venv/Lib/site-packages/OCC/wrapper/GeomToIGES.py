# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GeomToIGES')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GeomToIGES')
    _GeomToIGES = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GeomToIGES', [dirname(__file__)])
        except ImportError:
            import _GeomToIGES
            return _GeomToIGES
        try:
            _mod = imp.load_module('_GeomToIGES', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GeomToIGES = swig_import_helper()
    del swig_import_helper
else:
    import _GeomToIGES
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomToIGES.delete_SwigPyIterator

    def value(self):
        return _GeomToIGES.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _GeomToIGES.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _GeomToIGES.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _GeomToIGES.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _GeomToIGES.SwigPyIterator_equal(self, x)

    def copy(self):
        return _GeomToIGES.SwigPyIterator_copy(self)

    def next(self):
        return _GeomToIGES.SwigPyIterator_next(self)

    def __next__(self):
        return _GeomToIGES.SwigPyIterator___next__(self)

    def previous(self):
        return _GeomToIGES.SwigPyIterator_previous(self)

    def advance(self, n):
        return _GeomToIGES.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _GeomToIGES.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _GeomToIGES.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _GeomToIGES.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _GeomToIGES.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _GeomToIGES.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _GeomToIGES.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _GeomToIGES.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _GeomToIGES.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_GeomToIGES.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _GeomToIGES.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _GeomToIGES.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomToIGES.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _GeomToIGES.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _GeomToIGES.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _GeomToIGES.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _GeomToIGES.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_GeomToIGES.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _GeomToIGES.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _GeomToIGES.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomToIGES.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _GeomToIGES.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _GeomToIGES.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _GeomToIGES.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _GeomToIGES.ptr_to_number(item)
ptr_to_number = _GeomToIGES.ptr_to_number

def HashCode(*args):
    return _GeomToIGES.HashCode(*args)
HashCode = _GeomToIGES.HashCode

def ptr_equal(a, b):
    return _GeomToIGES.ptr_equal(a, b)
ptr_equal = _GeomToIGES.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESData
else:
    import IGESData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESGeom
else:
    import IGESGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESBasic
else:
    import IGESBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
class GeomToIGES_GeomEntity(object):
    """provides methods to transfer Geom entity from CASCADE to IGES."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToIGES_GeomEntity self) -> GeomToIGES_GeomEntity
        __init__(GeomToIGES_GeomEntity self, GeomToIGES_GeomEntity GE) -> GeomToIGES_GeomEntity

        Creates a tool ready to run and sets its
        fields as GE's.

        :type GE: OCC.wrapper.GeomToIGES.GeomToIGES_GeomEntity

        """
        this = _GeomToIGES.new_GeomToIGES_GeomEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetModel(self, *args):
        """
        SetModel(GeomToIGES_GeomEntity self, Handle_IGESData_IGESModel model)

        Set the value of "TheModel"

        :type model: OCC.wrapper.IGESData.Handle_IGESData_IGESModel

        """
        return _GeomToIGES.GeomToIGES_GeomEntity_SetModel(self, *args)


    def GetModel(self, *args):
        """
        GetModel(GeomToIGES_GeomEntity self) -> Handle_IGESData_IGESModel

        Returns the value of "TheModel"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESModel

        """
        return _GeomToIGES.GeomToIGES_GeomEntity_GetModel(self, *args)


    def SetUnit(self, *args):
        """
        SetUnit(GeomToIGES_GeomEntity self, Standard_Real const unit)

        Sets the value of the UnitFlag

        :type unit: float

        """
        return _GeomToIGES.GeomToIGES_GeomEntity_SetUnit(self, *args)


    def GetUnit(self, *args):
        """
        GetUnit(GeomToIGES_GeomEntity self) -> Standard_Real

        Returns the value of the UnitFlag of the header of the model
        in meters.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomToIGES.GeomToIGES_GeomEntity_GetUnit(self, *args)

    __swig_destroy__ = _GeomToIGES.delete_GeomToIGES_GeomEntity
GeomToIGES_GeomEntity_swigregister = _GeomToIGES.GeomToIGES_GeomEntity_swigregister
GeomToIGES_GeomEntity_swigregister(GeomToIGES_GeomEntity)

class GeomToIGES_GeomSurface(GeomToIGES_GeomEntity):
    """
    This class implements the transfer of the Surface Entity from Geom
    To IGES. These can be :
    . BoundedSurface
    * BSplineSurface
    * BezierSurface
    * RectangularTrimmedSurface
    . ElementarySurface
    * Plane
    * CylindricalSurface
    * ConicalSurface
    * SphericalSurface
    * ToroidalSurface
    . SweptSurface
    * SurfaceOfLinearExtrusion
    * SurfaceOfRevolution
    . OffsetSurface
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToIGES_GeomSurface self) -> GeomToIGES_GeomSurface
        __init__(GeomToIGES_GeomSurface self, GeomToIGES_GeomEntity GE) -> GeomToIGES_GeomSurface

        Creates a tool GeomSurface ready to run and sets its
        fields as GE's.

        :type GE: OCC.wrapper.GeomToIGES.GeomToIGES_GeomEntity

        """
        this = _GeomToIGES.new_GeomToIGES_GeomSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def TransferSurface(self, *args):
        """
        TransferSurface(GeomToIGES_GeomSurface self, Handle_Geom_Surface start, Standard_Real const Udeb, Standard_Real const Ufin, Standard_Real const Vdeb, Standard_Real const Vfin) -> Handle_IGESData_IGESEntity
        TransferSurface(GeomToIGES_GeomSurface self, Handle_Geom_BoundedSurface start, Standard_Real const Udeb, Standard_Real const Ufin, Standard_Real const Vdeb, Standard_Real const Vfin) -> Handle_IGESData_IGESEntity
        TransferSurface(GeomToIGES_GeomSurface self, Handle_Geom_BSplineSurface start, Standard_Real const Udeb, Standard_Real const Ufin, Standard_Real const Vdeb, Standard_Real const Vfin) -> Handle_IGESData_IGESEntity
        TransferSurface(GeomToIGES_GeomSurface self, Handle_Geom_BezierSurface start, Standard_Real const Udeb, Standard_Real const Ufin, Standard_Real const Vdeb, Standard_Real const Vfin) -> Handle_IGESData_IGESEntity
        TransferSurface(GeomToIGES_GeomSurface self, Handle_Geom_RectangularTrimmedSurface start, Standard_Real const Udeb, Standard_Real const Ufin, Standard_Real const Vdeb, Standard_Real const Vfin) -> Handle_IGESData_IGESEntity
        TransferSurface(GeomToIGES_GeomSurface self, Handle_Geom_ElementarySurface start, Standard_Real const Udeb, Standard_Real const Ufin, Standard_Real const Vdeb, Standard_Real const Vfin) -> Handle_IGESData_IGESEntity
        TransferSurface(GeomToIGES_GeomSurface self, Handle_Geom_Plane start, Standard_Real const Udeb, Standard_Real const Ufin, Standard_Real const Vdeb, Standard_Real const Vfin) -> Handle_IGESData_IGESEntity
        TransferSurface(GeomToIGES_GeomSurface self, Handle_Geom_CylindricalSurface start, Standard_Real const Udeb, Standard_Real const Ufin, Standard_Real const Vdeb, Standard_Real const Vfin) -> Handle_IGESData_IGESEntity
        TransferSurface(GeomToIGES_GeomSurface self, Handle_Geom_ConicalSurface start, Standard_Real const Udeb, Standard_Real const Ufin, Standard_Real const Vdeb, Standard_Real const Vfin) -> Handle_IGESData_IGESEntity
        TransferSurface(GeomToIGES_GeomSurface self, Handle_Geom_SphericalSurface start, Standard_Real const Udeb, Standard_Real const Ufin, Standard_Real const Vdeb, Standard_Real const Vfin) -> Handle_IGESData_IGESEntity
        TransferSurface(GeomToIGES_GeomSurface self, Handle_Geom_ToroidalSurface start, Standard_Real const Udeb, Standard_Real const Ufin, Standard_Real const Vdeb, Standard_Real const Vfin) -> Handle_IGESData_IGESEntity
        TransferSurface(GeomToIGES_GeomSurface self, Handle_Geom_SweptSurface start, Standard_Real const Udeb, Standard_Real const Ufin, Standard_Real const Vdeb, Standard_Real const Vfin) -> Handle_IGESData_IGESEntity
        TransferSurface(GeomToIGES_GeomSurface self, Handle_Geom_SurfaceOfLinearExtrusion start, Standard_Real const Udeb, Standard_Real const Ufin, Standard_Real const Vdeb, Standard_Real const Vfin) -> Handle_IGESData_IGESEntity
        TransferSurface(GeomToIGES_GeomSurface self, Handle_Geom_SurfaceOfRevolution start, Standard_Real const Udeb, Standard_Real const Ufin, Standard_Real const Vdeb, Standard_Real const Vfin) -> Handle_IGESData_IGESEntity
        TransferSurface(GeomToIGES_GeomSurface self, Handle_Geom_OffsetSurface start, Standard_Real const Udeb, Standard_Real const Ufin, Standard_Real const Vdeb, Standard_Real const Vfin) -> Handle_IGESData_IGESEntity

        :type start: OCC.wrapper.Geom.Handle_Geom_OffsetSurface
        :type Udeb: float
        :type Ufin: float
        :type Vdeb: float
        :type Vfin: float
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _GeomToIGES.GeomToIGES_GeomSurface_TransferSurface(self, *args)


    def TransferPlaneSurface(self, *args):
        """
        TransferPlaneSurface(GeomToIGES_GeomSurface self, Handle_Geom_Plane start, Standard_Real const Udeb, Standard_Real const Ufin, Standard_Real const Vdeb, Standard_Real const Vfin) -> Handle_IGESData_IGESEntity

        :type start: OCC.wrapper.Geom.Handle_Geom_Plane
        :type Udeb: float
        :type Ufin: float
        :type Vdeb: float
        :type Vfin: float
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _GeomToIGES.GeomToIGES_GeomSurface_TransferPlaneSurface(self, *args)


    def TransferCylindricalSurface(self, *args):
        """
        TransferCylindricalSurface(GeomToIGES_GeomSurface self, Handle_Geom_CylindricalSurface start, Standard_Real const Udeb, Standard_Real const Ufin, Standard_Real const Vdeb, Standard_Real const Vfin) -> Handle_IGESData_IGESEntity

        :type start: OCC.wrapper.Geom.Handle_Geom_CylindricalSurface
        :type Udeb: float
        :type Ufin: float
        :type Vdeb: float
        :type Vfin: float
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _GeomToIGES.GeomToIGES_GeomSurface_TransferCylindricalSurface(self, *args)


    def TransferConicalSurface(self, *args):
        """
        TransferConicalSurface(GeomToIGES_GeomSurface self, Handle_Geom_ConicalSurface start, Standard_Real const Udeb, Standard_Real const Ufin, Standard_Real const Vdeb, Standard_Real const Vfin) -> Handle_IGESData_IGESEntity

        :type start: OCC.wrapper.Geom.Handle_Geom_ConicalSurface
        :type Udeb: float
        :type Ufin: float
        :type Vdeb: float
        :type Vfin: float
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _GeomToIGES.GeomToIGES_GeomSurface_TransferConicalSurface(self, *args)


    def TransferSphericalSurface(self, *args):
        """
        TransferSphericalSurface(GeomToIGES_GeomSurface self, Handle_Geom_SphericalSurface start, Standard_Real const Udeb, Standard_Real const Ufin, Standard_Real const Vdeb, Standard_Real const Vfin) -> Handle_IGESData_IGESEntity

        :type start: OCC.wrapper.Geom.Handle_Geom_SphericalSurface
        :type Udeb: float
        :type Ufin: float
        :type Vdeb: float
        :type Vfin: float
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _GeomToIGES.GeomToIGES_GeomSurface_TransferSphericalSurface(self, *args)


    def TransferToroidalSurface(self, *args):
        """
        TransferToroidalSurface(GeomToIGES_GeomSurface self, Handle_Geom_ToroidalSurface start, Standard_Real const Udeb, Standard_Real const Ufin, Standard_Real const Vdeb, Standard_Real const Vfin) -> Handle_IGESData_IGESEntity

        :type start: OCC.wrapper.Geom.Handle_Geom_ToroidalSurface
        :type Udeb: float
        :type Ufin: float
        :type Vdeb: float
        :type Vfin: float
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _GeomToIGES.GeomToIGES_GeomSurface_TransferToroidalSurface(self, *args)


    def Length(self, *args):
        """
        Length(GeomToIGES_GeomSurface self) -> Standard_Real

        Returns the value of "TheLength"

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeomToIGES.GeomToIGES_GeomSurface_Length(self, *args)


    def GetBRepMode(self, *args):
        """
        GetBRepMode(GeomToIGES_GeomSurface self) -> Standard_Boolean

        Returns Brep mode flag.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomToIGES.GeomToIGES_GeomSurface_GetBRepMode(self, *args)


    def SetBRepMode(self, *args):
        """
        SetBRepMode(GeomToIGES_GeomSurface self, Standard_Boolean const flag)

        Sets BRep mode flag.

        :type flag: bool

        """
        return _GeomToIGES.GeomToIGES_GeomSurface_SetBRepMode(self, *args)


    def GetAnalyticMode(self, *args):
        """
        GetAnalyticMode(GeomToIGES_GeomSurface self) -> Standard_Boolean

        Returns flag for writing elementary surfaces

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomToIGES.GeomToIGES_GeomSurface_GetAnalyticMode(self, *args)


    def SetAnalyticMode(self, *args):
        """
        SetAnalyticMode(GeomToIGES_GeomSurface self, Standard_Boolean const flag)

        Setst flag for writing elementary surfaces

        :type flag: bool

        """
        return _GeomToIGES.GeomToIGES_GeomSurface_SetAnalyticMode(self, *args)

    __swig_destroy__ = _GeomToIGES.delete_GeomToIGES_GeomSurface
GeomToIGES_GeomSurface_swigregister = _GeomToIGES.GeomToIGES_GeomSurface_swigregister
GeomToIGES_GeomSurface_swigregister(GeomToIGES_GeomSurface)

class GeomToIGES_GeomPoint(GeomToIGES_GeomEntity):
    """
    This class implements the transfer of the Point Entity from Geom
    to IGES . These are :
    . Point
    * CartesianPoint
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToIGES_GeomPoint self) -> GeomToIGES_GeomPoint
        __init__(GeomToIGES_GeomPoint self, GeomToIGES_GeomEntity GE) -> GeomToIGES_GeomPoint

        Creates a tool GeomPoint ready to run and sets its
        fields as GE's.

        :type GE: OCC.wrapper.GeomToIGES.GeomToIGES_GeomEntity

        """
        this = _GeomToIGES.new_GeomToIGES_GeomPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def TransferPoint(self, *args):
        """
        TransferPoint(GeomToIGES_GeomPoint self, Handle_Geom_Point start) -> Handle_IGESGeom_Point
        TransferPoint(GeomToIGES_GeomPoint self, Handle_Geom_CartesianPoint start) -> Handle_IGESGeom_Point

        Transfert  a  CartesianPoint from Geom to IGES. If this
        Entity could not be converted, this member returns a NullEntity.

        :type start: OCC.wrapper.Geom.Handle_Geom_CartesianPoint
        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point

        """
        return _GeomToIGES.GeomToIGES_GeomPoint_TransferPoint(self, *args)

    __swig_destroy__ = _GeomToIGES.delete_GeomToIGES_GeomPoint
GeomToIGES_GeomPoint_swigregister = _GeomToIGES.GeomToIGES_GeomPoint_swigregister
GeomToIGES_GeomPoint_swigregister(GeomToIGES_GeomPoint)

class GeomToIGES_GeomCurve(GeomToIGES_GeomEntity):
    """
    This class implements the transfer of the Curve Entity from Geom
    To IGES. These can be :
    Curve
    . BoundedCurve
    * BSplineCurve
    * BezierCurve
    * TrimmedCurve
    . Conic
    * Circle
    * Ellipse
    * Hyperbloa
    * Line
    * Parabola
    . OffsetCurve
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToIGES_GeomCurve self) -> GeomToIGES_GeomCurve
        __init__(GeomToIGES_GeomCurve self, GeomToIGES_GeomEntity GE) -> GeomToIGES_GeomCurve

        Creates a tool GeomCurve ready to run and sets its
        fields as GE's.

        :type GE: OCC.wrapper.GeomToIGES.GeomToIGES_GeomEntity

        """
        this = _GeomToIGES.new_GeomToIGES_GeomCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def TransferCurve(self, *args):
        """
        TransferCurve(GeomToIGES_GeomCurve self, Handle_Geom_Curve start, Standard_Real const Udeb, Standard_Real const Ufin) -> Handle_IGESData_IGESEntity
        TransferCurve(GeomToIGES_GeomCurve self, Handle_Geom_BoundedCurve start, Standard_Real const Udeb, Standard_Real const Ufin) -> Handle_IGESData_IGESEntity
        TransferCurve(GeomToIGES_GeomCurve self, Handle_Geom_BSplineCurve start, Standard_Real const Udeb, Standard_Real const Ufin) -> Handle_IGESData_IGESEntity
        TransferCurve(GeomToIGES_GeomCurve self, Handle_Geom_BezierCurve start, Standard_Real const Udeb, Standard_Real const Ufin) -> Handle_IGESData_IGESEntity
        TransferCurve(GeomToIGES_GeomCurve self, Handle_Geom_TrimmedCurve start, Standard_Real const Udeb, Standard_Real const Ufin) -> Handle_IGESData_IGESEntity
        TransferCurve(GeomToIGES_GeomCurve self, Handle_Geom_Conic start, Standard_Real const Udeb, Standard_Real const Ufin) -> Handle_IGESData_IGESEntity
        TransferCurve(GeomToIGES_GeomCurve self, Handle_Geom_Circle start, Standard_Real const Udeb, Standard_Real const Ufin) -> Handle_IGESData_IGESEntity
        TransferCurve(GeomToIGES_GeomCurve self, Handle_Geom_Ellipse start, Standard_Real const Udeb, Standard_Real const Ufin) -> Handle_IGESData_IGESEntity
        TransferCurve(GeomToIGES_GeomCurve self, Handle_Geom_Hyperbola start, Standard_Real const Udeb, Standard_Real const Ufin) -> Handle_IGESData_IGESEntity
        TransferCurve(GeomToIGES_GeomCurve self, Handle_Geom_Line start, Standard_Real const Udeb, Standard_Real const Ufin) -> Handle_IGESData_IGESEntity
        TransferCurve(GeomToIGES_GeomCurve self, Handle_Geom_Parabola start, Standard_Real const Udeb, Standard_Real const Ufin) -> Handle_IGESData_IGESEntity
        TransferCurve(GeomToIGES_GeomCurve self, Handle_Geom_OffsetCurve start, Standard_Real const Udeb, Standard_Real const Ufin) -> Handle_IGESData_IGESEntity

        :type start: OCC.wrapper.Geom.Handle_Geom_OffsetCurve
        :type Udeb: float
        :type Ufin: float
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _GeomToIGES.GeomToIGES_GeomCurve_TransferCurve(self, *args)

    __swig_destroy__ = _GeomToIGES.delete_GeomToIGES_GeomCurve
GeomToIGES_GeomCurve_swigregister = _GeomToIGES.GeomToIGES_GeomCurve_swigregister
GeomToIGES_GeomCurve_swigregister(GeomToIGES_GeomCurve)

class GeomToIGES_GeomVector(GeomToIGES_GeomEntity):
    """
    This class implements the transfer of the Vector from Geom
    to IGES . These can be :
    . Vector
    * Direction
    * VectorWithMagnitude
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(GeomToIGES_GeomVector self) -> GeomToIGES_GeomVector
        __init__(GeomToIGES_GeomVector self, GeomToIGES_GeomEntity GE) -> GeomToIGES_GeomVector

        Creates a tool GeomVector ready to run and sets its
        fields as GE's.

        :type GE: OCC.wrapper.GeomToIGES.GeomToIGES_GeomEntity

        """
        this = _GeomToIGES.new_GeomToIGES_GeomVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def TransferVector(self, *args):
        """
        TransferVector(GeomToIGES_GeomVector self, Handle_Geom_Vector start) -> Handle_IGESGeom_Direction
        TransferVector(GeomToIGES_GeomVector self, Handle_Geom_VectorWithMagnitude start) -> Handle_IGESGeom_Direction
        TransferVector(GeomToIGES_GeomVector self, Handle_Geom_Direction start) -> Handle_IGESGeom_Direction

        :type start: OCC.wrapper.Geom.Handle_Geom_Direction
        :rtype: OCC.wrapper.IGESGeom.Handle_IGESGeom_Direction

        """
        return _GeomToIGES.GeomToIGES_GeomVector_TransferVector(self, *args)

    __swig_destroy__ = _GeomToIGES.delete_GeomToIGES_GeomVector
GeomToIGES_GeomVector_swigregister = _GeomToIGES.GeomToIGES_GeomVector_swigregister
GeomToIGES_GeomVector_swigregister(GeomToIGES_GeomVector)



