# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IGESBasic')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IGESBasic')
    _IGESBasic = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IGESBasic', [dirname(__file__)])
        except ImportError:
            import _IGESBasic
            return _IGESBasic
        try:
            _mod = imp.load_module('_IGESBasic', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IGESBasic = swig_import_helper()
    del swig_import_helper
else:
    import _IGESBasic
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IGESBasic.delete_SwigPyIterator

    def value(self):
        return _IGESBasic.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IGESBasic.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IGESBasic.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IGESBasic.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IGESBasic.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IGESBasic.SwigPyIterator_copy(self)

    def next(self):
        return _IGESBasic.SwigPyIterator_next(self)

    def __next__(self):
        return _IGESBasic.SwigPyIterator___next__(self)

    def previous(self):
        return _IGESBasic.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IGESBasic.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IGESBasic.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IGESBasic.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IGESBasic.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IGESBasic.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IGESBasic.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IGESBasic.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _IGESBasic.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESBasic.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_IGESBasic.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESBasic.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESBasic.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESBasic.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _IGESBasic.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _IGESBasic.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _IGESBasic.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESBasic.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_IGESBasic.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESBasic.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESBasic.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESBasic.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _IGESBasic.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _IGESBasic.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _IGESBasic.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _IGESBasic.ptr_to_number(item)
ptr_to_number = _IGESBasic.ptr_to_number

def HashCode(*args):
    return _IGESBasic.HashCode(*args)
HashCode = _IGESBasic.HashCode

def ptr_equal(a, b):
    return _IGESBasic.ptr_equal(a, b)
ptr_equal = _IGESBasic.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESData
else:
    import IGESData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
class IGESBasic_Group(IGESData.IGESData_IGESEntity):
    """
    defines Group, Type <402> Form <1>
    in package IGESBasic
    The Group Associativity allows a collection of a set
    of entities to be maintained as a single, logical
    entity

    Group, OrderedGroup, GroupWithoutBackP, OrderedGroupWithoutBackP
    share the same definition (class Group), form number changes

    non Ordered, non WithoutBackP : form  1
    non Ordered,     WithoutBackP : form  7
    Ordered, non WithoutBackP : form 14
    Ordered,     WithoutBackP : form 15
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_Group
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_Group(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_Group self) -> IGESBasic_Group
        __init__(IGESBasic_Group self, Standard_Integer const nb) -> IGESBasic_Group

        Creates a Group with a predefined count of items
        (which all start as null)

        :type nb: int

        """
        this = _IGESBasic.new_IGESBasic_Group(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESBasic_Group self, Handle_IGESData_HArray1OfIGESEntity allEntities)

        This method is used to set the fields of the class Group
        - allEntities : Used to store pointers to members of
        the Group.

        :type allEntities: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESBasic.IGESBasic_Group_Init(self, *args)


    def SetOrdered(self, *args):
        """
        SetOrdered(IGESBasic_Group self, Standard_Boolean const mode)

        Sets a Group to be, or not to be  Ordered (according mode)

        :type mode: bool

        """
        return _IGESBasic.IGESBasic_Group_SetOrdered(self, *args)


    def SetWithoutBackP(self, *args):
        """
        SetWithoutBackP(IGESBasic_Group self, Standard_Boolean const mode)

        Sets a Group to be, or not to be  WithoutBackP

        :type mode: bool

        """
        return _IGESBasic.IGESBasic_Group_SetWithoutBackP(self, *args)


    def IsOrdered(self, *args):
        """
        IsOrdered(IGESBasic_Group self) -> Standard_Boolean

        Returns True if <me> is Ordered

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.IGESBasic_Group_IsOrdered(self, *args)


    def IsWithoutBackP(self, *args):
        """
        IsWithoutBackP(IGESBasic_Group self) -> Standard_Boolean

        Returns True if <me> is WithoutBackP

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.IGESBasic_Group_IsWithoutBackP(self, *args)


    def SetUser(self, *args):
        """
        SetUser(IGESBasic_Group self, Standard_Integer const type, Standard_Integer const form)

        Enforce a new value for the type and form

        :type type: int
        :type form: int

        """
        return _IGESBasic.IGESBasic_Group_SetUser(self, *args)


    def SetNb(self, *args):
        """
        SetNb(IGESBasic_Group self, Standard_Integer const nb)

        Changes the count of item
        If greater, new items are null
        If lower, old items are lost

        :type nb: int

        """
        return _IGESBasic.IGESBasic_Group_SetNb(self, *args)


    def NbEntities(self, *args):
        """
        NbEntities(IGESBasic_Group self) -> Standard_Integer

        returns the number of IGESEntities in the Group

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_Group_NbEntities(self, *args)


    def Entity(self, *args):
        """
        Entity(IGESBasic_Group self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the specific entity from the Group

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.IGESBasic_Group_Entity(self, *args)


    def Value(self, *args):
        """
        Value(IGESBasic_Group self, Standard_Integer const Index) -> Handle_Standard_Transient

        returns the specific entity from the Group

        :type Index: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESBasic.IGESBasic_Group_Value(self, *args)


    def SetValue(self, *args):
        """
        SetValue(IGESBasic_Group self, Standard_Integer const Index, Handle_IGESData_IGESEntity ent)

        Sets a new value for item <Index>

        :type Index: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.IGESBasic_Group_SetValue(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_Group_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_Group_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_Group_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_Group
IGESBasic_Group_swigregister = _IGESBasic.IGESBasic_Group_swigregister
IGESBasic_Group_swigregister(IGESBasic_Group)

def IGESBasic_Group_get_type_name(*args):
    """
    IGESBasic_Group_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_Group_get_type_name(*args)

def IGESBasic_Group_get_type_descriptor(*args):
    """
    IGESBasic_Group_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_Group_get_type_descriptor(*args)

class IGESBasic_ExternalRefFile(IGESData.IGESData_IGESEntity):
    """
    defines ExternalRefFile, Type <416> Form <1>
    in package IGESBasic
    Used when entire reference file is to be instanced
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_ExternalRefFile
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_ExternalRefFile(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_ExternalRefFile self) -> IGESBasic_ExternalRefFile

        defines ExternalRefFile, Type <416> Form <1>
        in package IGESBasic
        Used when entire reference file is to be instanced
        """
        this = _IGESBasic.new_IGESBasic_ExternalRefFile(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESBasic_ExternalRefFile self, Handle_TCollection_HAsciiString aFileIdent)

        This method is used to set the field of the class
        ExternalRefFile
        - aFileIdent : External Reference File Identifier

        :type aFileIdent: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.IGESBasic_ExternalRefFile_Init(self, *args)


    def FileId(self, *args):
        """
        FileId(IGESBasic_ExternalRefFile self) -> Handle_TCollection_HAsciiString

        returns External Reference File Identifier

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.IGESBasic_ExternalRefFile_FileId(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_ExternalRefFile_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_ExternalRefFile_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_ExternalRefFile_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_ExternalRefFile
IGESBasic_ExternalRefFile_swigregister = _IGESBasic.IGESBasic_ExternalRefFile_swigregister
IGESBasic_ExternalRefFile_swigregister(IGESBasic_ExternalRefFile)

def IGESBasic_ExternalRefFile_get_type_name(*args):
    """
    IGESBasic_ExternalRefFile_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_ExternalRefFile_get_type_name(*args)

def IGESBasic_ExternalRefFile_get_type_descriptor(*args):
    """
    IGESBasic_ExternalRefFile_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_ExternalRefFile_get_type_descriptor(*args)

class IGESBasic_ExternalRefFileName(IGESData.IGESData_IGESEntity):
    """
    defines ExternalRefFileName, Type <416> Form <0-2>
    in package IGESBasic
    Used when single definition from the reference file is
    required or for external logical references where an
    entity in one file relates to an entity in another file
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_ExternalRefFileName
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_ExternalRefFileName(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_ExternalRefFileName self) -> IGESBasic_ExternalRefFileName

        defines ExternalRefFileName, Type <416> Form <0-2>
        in package IGESBasic
        Used when single definition from the reference file is
        required or for external logical references where an
        entity in one file relates to an entity in another file
        """
        this = _IGESBasic.new_IGESBasic_ExternalRefFileName(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESBasic_ExternalRefFileName self, Handle_TCollection_HAsciiString aFileIdent, Handle_TCollection_HAsciiString anExtName)

        This method is used to set the fields of the class
        ExternalRefFileName
        - aFileIdent : External Reference File Identifier
        - anExtName  : External Reference Entity Symbolic Name

        :type aFileIdent: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type anExtName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.IGESBasic_ExternalRefFileName_Init(self, *args)


    def SetForEntity(self, *args):
        """
        SetForEntity(IGESBasic_ExternalRefFileName self, Standard_Boolean const mode)

        Changes FormNumber to be 2 if <mode> is True (For Entity)
        or 0 if <mode> is False (For Definition)

        :type mode: bool

        """
        return _IGESBasic.IGESBasic_ExternalRefFileName_SetForEntity(self, *args)


    def FileId(self, *args):
        """
        FileId(IGESBasic_ExternalRefFileName self) -> Handle_TCollection_HAsciiString

        returns External Reference File Identifier

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.IGESBasic_ExternalRefFileName_FileId(self, *args)


    def ReferenceName(self, *args):
        """
        ReferenceName(IGESBasic_ExternalRefFileName self) -> Handle_TCollection_HAsciiString

        returns External Reference Entity Symbolic Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.IGESBasic_ExternalRefFileName_ReferenceName(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_ExternalRefFileName_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_ExternalRefFileName_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_ExternalRefFileName_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_ExternalRefFileName
IGESBasic_ExternalRefFileName_swigregister = _IGESBasic.IGESBasic_ExternalRefFileName_swigregister
IGESBasic_ExternalRefFileName_swigregister(IGESBasic_ExternalRefFileName)

def IGESBasic_ExternalRefFileName_get_type_name(*args):
    """
    IGESBasic_ExternalRefFileName_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_ExternalRefFileName_get_type_name(*args)

def IGESBasic_ExternalRefFileName_get_type_descriptor(*args):
    """
    IGESBasic_ExternalRefFileName_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_ExternalRefFileName_get_type_descriptor(*args)

class IGESBasic_SubfigureDef(IGESData.IGESData_IGESEntity):
    """
    defines SubfigureDef, Type <308> Form <0>
    in package IGESBasic
    This Entity permits a single definition of a detail to
    be utilized in multiple instances in the creation of
    the whole picture
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_SubfigureDef
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_SubfigureDef(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_SubfigureDef self) -> IGESBasic_SubfigureDef

        defines SubfigureDef, Type <308> Form <0>
        in package IGESBasic
        This Entity permits a single definition of a detail to
        be utilized in multiple instances in the creation of
        the whole picture
        """
        this = _IGESBasic.new_IGESBasic_SubfigureDef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESBasic_SubfigureDef self, Standard_Integer const aDepth, Handle_TCollection_HAsciiString aName, Handle_IGESData_HArray1OfIGESEntity allAssocEntities)

        This method is used to set the fields of the class
        SubfigureDef
        - aDepth           : It indicates the amount of nesting
        - aName            : the subfigure name
        - allAssocEntities : the associated entities

        :type aDepth: int
        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type allAssocEntities: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESBasic.IGESBasic_SubfigureDef_Init(self, *args)


    def Depth(self, *args):
        """
        Depth(IGESBasic_SubfigureDef self) -> Standard_Integer

        returns depth of the Subfigure
        if theDepth = 0 - No reference to any subfigure instance.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_SubfigureDef_Depth(self, *args)


    def Name(self, *args):
        """
        Name(IGESBasic_SubfigureDef self) -> Handle_TCollection_HAsciiString

        returns the name of Subfigure

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.IGESBasic_SubfigureDef_Name(self, *args)


    def NbEntities(self, *args):
        """
        NbEntities(IGESBasic_SubfigureDef self) -> Standard_Integer

        returns number of entities. Is greater than or equal to zero.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_SubfigureDef_NbEntities(self, *args)


    def AssociatedEntity(self, *args):
        """
        AssociatedEntity(IGESBasic_SubfigureDef self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the specific entity as indicated by Index
        raises exception if Index <= 0 or Index > NbEntities()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.IGESBasic_SubfigureDef_AssociatedEntity(self, *args)


    def Value(self, *args):
        """
        Value(IGESBasic_SubfigureDef self, Standard_Integer const Index) -> Handle_Standard_Transient

        returns the specific entity as indicated by Index
        raises exception if Index <= 0 or Index > NbEntities()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESBasic.IGESBasic_SubfigureDef_Value(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_SubfigureDef_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_SubfigureDef_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_SubfigureDef_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_SubfigureDef
IGESBasic_SubfigureDef_swigregister = _IGESBasic.IGESBasic_SubfigureDef_swigregister
IGESBasic_SubfigureDef_swigregister(IGESBasic_SubfigureDef)

def IGESBasic_SubfigureDef_get_type_name(*args):
    """
    IGESBasic_SubfigureDef_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_SubfigureDef_get_type_name(*args)

def IGESBasic_SubfigureDef_get_type_descriptor(*args):
    """
    IGESBasic_SubfigureDef_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_SubfigureDef_get_type_descriptor(*args)

class IGESBasic_GroupWithoutBackP(IGESBasic_Group):
    """
    defines GroupWithoutBackP, Type <402> Form <7>
    in package IGESBasic
    this class defines a Group without back pointers

    It inherits from Group
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_GroupWithoutBackP
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_GroupWithoutBackP(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_GroupWithoutBackP self) -> IGESBasic_GroupWithoutBackP

        defines GroupWithoutBackP, Type <402> Form <7>
        in package IGESBasic
        this class defines a Group without back pointers

        It inherits from Group
        """
        this = _IGESBasic.new_IGESBasic_GroupWithoutBackP(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_GroupWithoutBackP_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_GroupWithoutBackP_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_GroupWithoutBackP_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_GroupWithoutBackP
IGESBasic_GroupWithoutBackP_swigregister = _IGESBasic.IGESBasic_GroupWithoutBackP_swigregister
IGESBasic_GroupWithoutBackP_swigregister(IGESBasic_GroupWithoutBackP)

def IGESBasic_GroupWithoutBackP_get_type_name(*args):
    """
    IGESBasic_GroupWithoutBackP_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_GroupWithoutBackP_get_type_name(*args)

def IGESBasic_GroupWithoutBackP_get_type_descriptor(*args):
    """
    IGESBasic_GroupWithoutBackP_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_GroupWithoutBackP_get_type_descriptor(*args)

class IGESBasic_Hierarchy(IGESData.IGESData_IGESEntity):
    """
    defines Hierarchy, Type <406> Form <10>
    in package IGESBasic
    Provides ability to control the hierarchy of each
    directory entry attribute.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_Hierarchy
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_Hierarchy(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_Hierarchy self) -> IGESBasic_Hierarchy

        defines Hierarchy, Type <406> Form <10>
        in package IGESBasic
        Provides ability to control the hierarchy of each
        directory entry attribute.
        """
        this = _IGESBasic.new_IGESBasic_Hierarchy(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESBasic_Hierarchy self, Standard_Integer const nbPropVal, Standard_Integer const aLineFont, Standard_Integer const aView, Standard_Integer const anEntityLevel, Standard_Integer const aBlankStatus, Standard_Integer const aLineWt, Standard_Integer const aColorNum)

        This method is used to set the fields of the class
        Hierarchy
        - nbPropVal     : Number of Property values = 6
        - aLineFont     : indicates the line font
        - aView         : indicates the view
        - aEntityLevel  : indicates the entity level
        - aBlankStatus  : indicates the blank status
        - aLineWt       : indicates the line weight
        - aColorNum     : indicates the color num
        aLineFont, aView, aEntityLevel, aBlankStatus, aLineWt and
        aColorNum can take 0 or 1.
        0 : The directory entry attribute will apply to entities
        physically subordinate to this entity.
        1 : The directory entry attribute of this entity will not
        apply to physically subordinate entities.

        :type nbPropVal: int
        :type aLineFont: int
        :type aView: int
        :type anEntityLevel: int
        :type aBlankStatus: int
        :type aLineWt: int
        :type aColorNum: int

        """
        return _IGESBasic.IGESBasic_Hierarchy_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESBasic_Hierarchy self) -> Standard_Integer

        returns the number of property values, which should be 6

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_Hierarchy_NbPropertyValues(self, *args)


    def NewLineFont(self, *args):
        """
        NewLineFont(IGESBasic_Hierarchy self) -> Standard_Integer

        returns the line font

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_Hierarchy_NewLineFont(self, *args)


    def NewView(self, *args):
        """
        NewView(IGESBasic_Hierarchy self) -> Standard_Integer

        returns the view

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_Hierarchy_NewView(self, *args)


    def NewEntityLevel(self, *args):
        """
        NewEntityLevel(IGESBasic_Hierarchy self) -> Standard_Integer

        returns the entity level

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_Hierarchy_NewEntityLevel(self, *args)


    def NewBlankStatus(self, *args):
        """
        NewBlankStatus(IGESBasic_Hierarchy self) -> Standard_Integer

        returns the blank status

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_Hierarchy_NewBlankStatus(self, *args)


    def NewLineWeight(self, *args):
        """
        NewLineWeight(IGESBasic_Hierarchy self) -> Standard_Integer

        returns the line weight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_Hierarchy_NewLineWeight(self, *args)


    def NewColorNum(self, *args):
        """
        NewColorNum(IGESBasic_Hierarchy self) -> Standard_Integer

        returns the color number

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_Hierarchy_NewColorNum(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_Hierarchy_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_Hierarchy_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_Hierarchy_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_Hierarchy
IGESBasic_Hierarchy_swigregister = _IGESBasic.IGESBasic_Hierarchy_swigregister
IGESBasic_Hierarchy_swigregister(IGESBasic_Hierarchy)

def IGESBasic_Hierarchy_get_type_name(*args):
    """
    IGESBasic_Hierarchy_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_Hierarchy_get_type_name(*args)

def IGESBasic_Hierarchy_get_type_descriptor(*args):
    """
    IGESBasic_Hierarchy_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_Hierarchy_get_type_descriptor(*args)

class IGESBasic_ExternalRefLibName(IGESData.IGESData_IGESEntity):
    """
    defines ExternalRefLibName, Type <416> Form <4>
    in package IGESBasic
    Used when it is assumed that a copy of the subfigure
    exists in native form in a library on the receiving
    system
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_ExternalRefLibName
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_ExternalRefLibName(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_ExternalRefLibName self) -> IGESBasic_ExternalRefLibName

        defines ExternalRefLibName, Type <416> Form <4>
        in package IGESBasic
        Used when it is assumed that a copy of the subfigure
        exists in native form in a library on the receiving
        system
        """
        this = _IGESBasic.new_IGESBasic_ExternalRefLibName(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESBasic_ExternalRefLibName self, Handle_TCollection_HAsciiString aLibName, Handle_TCollection_HAsciiString anExtName)

        This method is used to set the fields of the class
        ExternalRefLibName
        - aLibName  : Name of library in which ExtName resides
        - anExtName : External Reference Entity Symbolic Name

        :type aLibName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type anExtName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.IGESBasic_ExternalRefLibName_Init(self, *args)


    def LibraryName(self, *args):
        """
        LibraryName(IGESBasic_ExternalRefLibName self) -> Handle_TCollection_HAsciiString

        returns name of library in which External Reference Entity
        Symbolic Name resides

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.IGESBasic_ExternalRefLibName_LibraryName(self, *args)


    def ReferenceName(self, *args):
        """
        ReferenceName(IGESBasic_ExternalRefLibName self) -> Handle_TCollection_HAsciiString

        returns External Reference Entity Symbolic Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.IGESBasic_ExternalRefLibName_ReferenceName(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_ExternalRefLibName_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_ExternalRefLibName_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_ExternalRefLibName_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_ExternalRefLibName
IGESBasic_ExternalRefLibName_swigregister = _IGESBasic.IGESBasic_ExternalRefLibName_swigregister
IGESBasic_ExternalRefLibName_swigregister(IGESBasic_ExternalRefLibName)

def IGESBasic_ExternalRefLibName_get_type_name(*args):
    """
    IGESBasic_ExternalRefLibName_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_ExternalRefLibName_get_type_name(*args)

def IGESBasic_ExternalRefLibName_get_type_descriptor(*args):
    """
    IGESBasic_ExternalRefLibName_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_ExternalRefLibName_get_type_descriptor(*args)

class IGESBasic_ExternalReferenceFile(IGESData.IGESData_IGESEntity):
    """
    defines ExternalReferenceFile, Type <406> Form <12>
    in package IGESBasic
    References definitions residing in another file
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_ExternalReferenceFile
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_ExternalReferenceFile(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_ExternalReferenceFile self) -> IGESBasic_ExternalReferenceFile

        defines ExternalReferenceFile, Type <406> Form <12>
        in package IGESBasic
        References definitions residing in another file
        """
        this = _IGESBasic.new_IGESBasic_ExternalReferenceFile(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESBasic_ExternalReferenceFile self, Handle_Interface_HArray1OfHAsciiString aNameArray)

        This method is used to set the fields of the class
        ExternalReferenceFile
        - aNameArray : External Reference File Names

        :type aNameArray: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _IGESBasic.IGESBasic_ExternalReferenceFile_Init(self, *args)


    def NbListEntries(self, *args):
        """
        NbListEntries(IGESBasic_ExternalReferenceFile self) -> Standard_Integer

        returns number of External Reference File Names

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_ExternalReferenceFile_NbListEntries(self, *args)


    def Name(self, *args):
        """
        Name(IGESBasic_ExternalReferenceFile self, Standard_Integer const Index) -> Handle_TCollection_HAsciiString

        returns External Reference File Name
        raises exception if Index <= 0 or Index > NbListEntries()

        :type Index: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.IGESBasic_ExternalReferenceFile_Name(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_ExternalReferenceFile_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_ExternalReferenceFile_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_ExternalReferenceFile_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_ExternalReferenceFile
IGESBasic_ExternalReferenceFile_swigregister = _IGESBasic.IGESBasic_ExternalReferenceFile_swigregister
IGESBasic_ExternalReferenceFile_swigregister(IGESBasic_ExternalReferenceFile)

def IGESBasic_ExternalReferenceFile_get_type_name(*args):
    """
    IGESBasic_ExternalReferenceFile_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_ExternalReferenceFile_get_type_name(*args)

def IGESBasic_ExternalReferenceFile_get_type_descriptor(*args):
    """
    IGESBasic_ExternalReferenceFile_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_ExternalReferenceFile_get_type_descriptor(*args)

class IGESBasic_ReadWriteModule(IGESData.IGESData_ReadWriteModule):
    """
    Defines basic File Access Module for IGESBasic (specific parts)
    Specific actions concern : Read and Write Own Parameters of
    an IGESEntity.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_ReadWriteModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_ReadWriteModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_ReadWriteModule self) -> IGESBasic_ReadWriteModule

        Creates a ReadWriteModule & puts it into ReaderLib & WriterLib


        """
        this = _IGESBasic.new_IGESBasic_ReadWriteModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def CaseIGES(self, *args):
        """
        CaseIGES(IGESBasic_ReadWriteModule self, Standard_Integer const typenum, Standard_Integer const formnum) -> Standard_Integer

        Defines Case Numbers for Entities of IGESBasic

        :type typenum: int
        :type formnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_ReadWriteModule_CaseIGES(self, *args)


    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESBasic_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file for an Entity of IGESBasic

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESBasic.IGESBasic_ReadWriteModule_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESBasic_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESBasic.IGESBasic_ReadWriteModule_WriteOwnParams(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_ReadWriteModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_ReadWriteModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_ReadWriteModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_ReadWriteModule
IGESBasic_ReadWriteModule_swigregister = _IGESBasic.IGESBasic_ReadWriteModule_swigregister
IGESBasic_ReadWriteModule_swigregister(IGESBasic_ReadWriteModule)

def IGESBasic_ReadWriteModule_get_type_name(*args):
    """
    IGESBasic_ReadWriteModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_ReadWriteModule_get_type_name(*args)

def IGESBasic_ReadWriteModule_get_type_descriptor(*args):
    """
    IGESBasic_ReadWriteModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_ReadWriteModule_get_type_descriptor(*args)

class IGESBasic_Name(IGESData.IGESData_NameEntity):
    """
    defines Name, Type <406> Form <15>
    in package IGESBasic
    Used to specify a user defined name
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_Name
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_Name(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_Name self) -> IGESBasic_Name

        defines Name, Type <406> Form <15>
        in package IGESBasic
        Used to specify a user defined name
        """
        this = _IGESBasic.new_IGESBasic_Name(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESBasic_Name self, Standard_Integer const nbPropVal, Handle_TCollection_HAsciiString aName)

        This method is used to set the fields of the class Name
        - nbPropVal  : Number of property values, always = 1
        - aName      : Stores the Name

        :type nbPropVal: int
        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.IGESBasic_Name_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(IGESBasic_Name self) -> Standard_Integer

        returns the number of property values, which should be 1

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_Name_NbPropertyValues(self, *args)


    def Value(self, *args):
        """
        Value(IGESBasic_Name self) -> Handle_TCollection_HAsciiString

        returns the user defined Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.IGESBasic_Name_Value(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_Name_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_Name_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_Name_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_Name
IGESBasic_Name_swigregister = _IGESBasic.IGESBasic_Name_swigregister
IGESBasic_Name_swigregister(IGESBasic_Name)

def IGESBasic_Name_get_type_name(*args):
    """
    IGESBasic_Name_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_Name_get_type_name(*args)

def IGESBasic_Name_get_type_descriptor(*args):
    """
    IGESBasic_Name_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_Name_get_type_descriptor(*args)

class IGESBasic_SingularSubfigure(IGESData.IGESData_IGESEntity):
    """
    defines SingularSubfigure, Type <408> Form <0>
    in package IGESBasic
    Defines the occurrence of a single instance of the
    defined Subfigure.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_SingularSubfigure
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_SingularSubfigure(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_SingularSubfigure self) -> IGESBasic_SingularSubfigure

        defines SingularSubfigure, Type <408> Form <0>
        in package IGESBasic
        Defines the occurrence of a single instance of the
        defined Subfigure.
        """
        this = _IGESBasic.new_IGESBasic_SingularSubfigure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESBasic_SingularSubfigure self, Handle_IGESBasic_SubfigureDef aSubfigureDef, gp_XYZ aTranslation, Standard_Boolean const hasScale, Standard_Real const aScale)

        This method is used to set the fields of the class
        SingularSubfigure
        - aSubfigureDef : the Subfigure Definition entity
        - aTranslation  : used to store the X,Y,Z coord
        - hasScale      : Indicates the presence of scale factor
        - aScale        : Used to store the scale factor

        :type aSubfigureDef: OCC.wrapper.IGESBasic.Handle_IGESBasic_SubfigureDef
        :type aTranslation: OCC.wrapper.gp.gp_XYZ
        :type hasScale: bool
        :type aScale: float

        """
        return _IGESBasic.IGESBasic_SingularSubfigure_Init(self, *args)


    def Subfigure(self, *args):
        """
        Subfigure(IGESBasic_SingularSubfigure self) -> Handle_IGESBasic_SubfigureDef

        returns the subfigure definition entity

        :rtype: OCC.wrapper.IGESBasic.Handle_IGESBasic_SubfigureDef

        """
        return _IGESBasic.IGESBasic_SingularSubfigure_Subfigure(self, *args)


    def Translation(self, *args):
        """
        Translation(IGESBasic_SingularSubfigure self) -> gp_XYZ

        returns the X, Y, Z coordinates

        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESBasic.IGESBasic_SingularSubfigure_Translation(self, *args)


    def ScaleFactor(self, *args):
        """
        ScaleFactor(IGESBasic_SingularSubfigure self) -> Standard_Real

        returns the scale factor
        if hasScaleFactor is False, returns 1.0 (default)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESBasic.IGESBasic_SingularSubfigure_ScaleFactor(self, *args)


    def HasScaleFactor(self, *args):
        """
        HasScaleFactor(IGESBasic_SingularSubfigure self) -> Standard_Boolean

        returns a boolean indicating whether scale factor
        is present or not

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.IGESBasic_SingularSubfigure_HasScaleFactor(self, *args)


    def TransformedTranslation(self, *args):
        """
        TransformedTranslation(IGESBasic_SingularSubfigure self) -> gp_XYZ

        returns the Translation after transformation

        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESBasic.IGESBasic_SingularSubfigure_TransformedTranslation(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_SingularSubfigure_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_SingularSubfigure_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_SingularSubfigure_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_SingularSubfigure
IGESBasic_SingularSubfigure_swigregister = _IGESBasic.IGESBasic_SingularSubfigure_swigregister
IGESBasic_SingularSubfigure_swigregister(IGESBasic_SingularSubfigure)

def IGESBasic_SingularSubfigure_get_type_name(*args):
    """
    IGESBasic_SingularSubfigure_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_SingularSubfigure_get_type_name(*args)

def IGESBasic_SingularSubfigure_get_type_descriptor(*args):
    """
    IGESBasic_SingularSubfigure_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_SingularSubfigure_get_type_descriptor(*args)

class IGESBasic_Protocol(IGESData.IGESData_Protocol):
    """Description of Protocol for IGESBasic"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_Protocol
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_Protocol(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_Protocol self) -> IGESBasic_Protocol

        Description of Protocol for IGESBasic
        """
        this = _IGESBasic.new_IGESBasic_Protocol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NbResources(self, *args):
        """
        NbResources(IGESBasic_Protocol self) -> Standard_Integer

        Gives the count of Resource Protocol. Here, one
        (Protocol from IGESData)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_Protocol_NbResources(self, *args)


    def Resource(self, *args):
        """
        Resource(IGESBasic_Protocol self, Standard_Integer const num) -> Handle_Interface_Protocol

        Returns a Resource, given a rank.

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESBasic.IGESBasic_Protocol_Resource(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(IGESBasic_Protocol self, Handle_Standard_Type atype) -> Standard_Integer

        Returns a Case Number, specific of each recognized Type
        This Case Number is then used in Libraries : the various
        Modules attached to this class of Protocol must use them
        in accordance (for a given value of TypeNumber, they must
        consider the same Type as the Protocol defines)

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_Protocol_TypeNumber(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_Protocol_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_Protocol_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_Protocol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_Protocol
IGESBasic_Protocol_swigregister = _IGESBasic.IGESBasic_Protocol_swigregister
IGESBasic_Protocol_swigregister(IGESBasic_Protocol)

def IGESBasic_Protocol_get_type_name(*args):
    """
    IGESBasic_Protocol_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_Protocol_get_type_name(*args)

def IGESBasic_Protocol_get_type_descriptor(*args):
    """
    IGESBasic_Protocol_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_Protocol_get_type_descriptor(*args)

class IGESBasic_GeneralModule(IGESData.IGESData_GeneralModule):
    """
    Definition of General Services for IGESBasic (specific part)
    This Services comprise : Shared & Implied Lists, Copy, Check
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_GeneralModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_GeneralModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_GeneralModule self) -> IGESBasic_GeneralModule

        Creates a GeneralModule from IGESBasic and puts it into GeneralLib


        """
        this = _IGESBasic.new_IGESBasic_GeneralModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def OwnSharedCase(self, *args):
        """
        OwnSharedCase(IGESBasic_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Lists the Entities shared by a given IGESEntity <ent>, from
        its specific parameters : specific for each type

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.IGESBasic_GeneralModule_OwnSharedCase(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESBasic_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> IGESData_DirChecker

        Returns a DirChecker, specific for each type of Entity
        (identified by its Case Number) : this DirChecker defines
        constraints which must be respected by the DirectoryPart

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESBasic.IGESBasic_GeneralModule_DirChecker(self, *args)


    def OwnCheckCase(self, *args):
        """
        OwnCheckCase(IGESBasic_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESBasic.IGESBasic_GeneralModule_OwnCheckCase(self, *args)


    def NewVoid(self, *args):
        """
        NewVoid(IGESBasic_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entto) -> Standard_Boolean

        Specific creation of a new void entity

        :type CN: int
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.IGESBasic_GeneralModule_NewVoid(self, *args)


    def OwnCopyCase(self, *args):
        """
        OwnCopyCase(IGESBasic_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Copies parameters which are specific of each Type of Entity

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESBasic.IGESBasic_GeneralModule_OwnCopyCase(self, *args)


    def CategoryNumber(self, *args):
        """
        CategoryNumber(IGESBasic_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Standard_Integer

        Returns a category number which characterizes an entity
        Structure for Groups, Figures & Co
        Description for External Refs
        Auxiliary for other

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_GeneralModule_CategoryNumber(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_GeneralModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_GeneralModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_GeneralModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_GeneralModule
IGESBasic_GeneralModule_swigregister = _IGESBasic.IGESBasic_GeneralModule_swigregister
IGESBasic_GeneralModule_swigregister(IGESBasic_GeneralModule)

def IGESBasic_GeneralModule_get_type_name(*args):
    """
    IGESBasic_GeneralModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_GeneralModule_get_type_name(*args)

def IGESBasic_GeneralModule_get_type_descriptor(*args):
    """
    IGESBasic_GeneralModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_GeneralModule_get_type_descriptor(*args)

class IGESBasic_HArray1OfLineFontEntity(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_HArray1OfLineFontEntity
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_HArray1OfLineFontEntity(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_HArray1OfLineFontEntity self, Standard_Integer const theLower, Standard_Integer const theUpper) -> IGESBasic_HArray1OfLineFontEntity
        __init__(IGESBasic_HArray1OfLineFontEntity self, Standard_Integer const theLower, Standard_Integer const theUpper, Handle_IGESData_LineFontEntity theValue) -> IGESBasic_HArray1OfLineFontEntity
        __init__(IGESBasic_HArray1OfLineFontEntity self, NCollection_Array1_Handle_IGESData_LineFontEntity theOther) -> IGESBasic_HArray1OfLineFontEntity

        :type theOther: OCC.wrapper.IGESBasic.IGESBasic_Array1OfLineFontEntity

        """
        this = _IGESBasic.new_IGESBasic_HArray1OfLineFontEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESBasic.IGESBasic_Array1OfLineFontEntity

        """
        res = _IGESBasic.IGESBasic_HArray1OfLineFontEntity_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(IGESBasic_HArray1OfLineFontEntity self) -> NCollection_Array1_Handle_IGESData_LineFontEntity

        :rtype: OCC.wrapper.IGESBasic.IGESBasic_Array1OfLineFontEntity

        """
        return _IGESBasic.IGESBasic_HArray1OfLineFontEntity_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_HArray1OfLineFontEntity_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_HArray1OfLineFontEntity_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_HArray1OfLineFontEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_HArray1OfLineFontEntity
IGESBasic_HArray1OfLineFontEntity_swigregister = _IGESBasic.IGESBasic_HArray1OfLineFontEntity_swigregister
IGESBasic_HArray1OfLineFontEntity_swigregister(IGESBasic_HArray1OfLineFontEntity)

def IGESBasic_HArray1OfLineFontEntity_get_type_name(*args):
    """
    IGESBasic_HArray1OfLineFontEntity_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_HArray1OfLineFontEntity_get_type_name(*args)

def IGESBasic_HArray1OfLineFontEntity_get_type_descriptor(*args):
    """
    IGESBasic_HArray1OfLineFontEntity_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_HArray1OfLineFontEntity_get_type_descriptor(*args)

class IGESBasic_OrderedGroupWithoutBackP(IGESBasic_Group):
    """
    defines OrderedGroupWithoutBackP, Type <402> Form <15>
    in package IGESBasic
    Allows a collection of a set of entities to be
    maintained as a single entity, but the group is
    ordered and there are no back pointers.
    It inherits from Group
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_OrderedGroupWithoutBackP
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_OrderedGroupWithoutBackP(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_OrderedGroupWithoutBackP self) -> IGESBasic_OrderedGroupWithoutBackP

        defines OrderedGroupWithoutBackP, Type <402> Form <15>
        in package IGESBasic
        Allows a collection of a set of entities to be
        maintained as a single entity, but the group is
        ordered and there are no back pointers.
        It inherits from Group
        """
        this = _IGESBasic.new_IGESBasic_OrderedGroupWithoutBackP(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_OrderedGroupWithoutBackP_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_OrderedGroupWithoutBackP_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_OrderedGroupWithoutBackP_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_OrderedGroupWithoutBackP
IGESBasic_OrderedGroupWithoutBackP_swigregister = _IGESBasic.IGESBasic_OrderedGroupWithoutBackP_swigregister
IGESBasic_OrderedGroupWithoutBackP_swigregister(IGESBasic_OrderedGroupWithoutBackP)

def IGESBasic_OrderedGroupWithoutBackP_get_type_name(*args):
    """
    IGESBasic_OrderedGroupWithoutBackP_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_OrderedGroupWithoutBackP_get_type_name(*args)

def IGESBasic_OrderedGroupWithoutBackP_get_type_descriptor(*args):
    """
    IGESBasic_OrderedGroupWithoutBackP_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_OrderedGroupWithoutBackP_get_type_descriptor(*args)

class IGESBasic_OrderedGroup(IGESBasic_Group):
    """
    defines OrderedGroup, Type <402> Form <14>
    in package IGESBasic
    this class defines an Ordered Group with back pointers
    Allows a collection of a set of entities to be
    maintained as a single entity, but the group is
    ordered.
    It inherits from Group
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_OrderedGroup
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_OrderedGroup(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_OrderedGroup self) -> IGESBasic_OrderedGroup

        defines OrderedGroup, Type <402> Form <14>
        in package IGESBasic
        this class defines an Ordered Group with back pointers
        Allows a collection of a set of entities to be
        maintained as a single entity, but the group is
        ordered.
        It inherits from Group
        """
        this = _IGESBasic.new_IGESBasic_OrderedGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_OrderedGroup_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_OrderedGroup_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_OrderedGroup_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_OrderedGroup
IGESBasic_OrderedGroup_swigregister = _IGESBasic.IGESBasic_OrderedGroup_swigregister
IGESBasic_OrderedGroup_swigregister(IGESBasic_OrderedGroup)

def IGESBasic_OrderedGroup_get_type_name(*args):
    """
    IGESBasic_OrderedGroup_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_OrderedGroup_get_type_name(*args)

def IGESBasic_OrderedGroup_get_type_descriptor(*args):
    """
    IGESBasic_OrderedGroup_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_OrderedGroup_get_type_descriptor(*args)

class IGESBasic_ExternalRefFileIndex(IGESData.IGESData_IGESEntity):
    """
    defines ExternalRefFileIndex, Type <402> Form <12>
    in package IGESBasic
    Contains a list of the symbolic names used by the
    referencing files and the DE pointers to the
    corresponding definitions within the referenced file
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_ExternalRefFileIndex
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_ExternalRefFileIndex(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_ExternalRefFileIndex self) -> IGESBasic_ExternalRefFileIndex

        defines ExternalRefFileIndex, Type <402> Form <12>
        in package IGESBasic
        Contains a list of the symbolic names used by the
        referencing files and the DE pointers to the
        corresponding definitions within the referenced file
        """
        this = _IGESBasic.new_IGESBasic_ExternalRefFileIndex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESBasic_ExternalRefFileIndex self, Handle_Interface_HArray1OfHAsciiString aNameArray, Handle_IGESData_HArray1OfIGESEntity allEntities)

        This method is used to set the fields of the class
        ExternalRefFileIndex
        - aNameArray  : External Reference Entity symbolic names
        - allEntities : External Reference Entities
        raises exception if array lengths are not equal
        if size of aNameArray is not equal to size of allEntities

        :type aNameArray: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString
        :type allEntities: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESBasic.IGESBasic_ExternalRefFileIndex_Init(self, *args)


    def NbEntries(self, *args):
        """
        NbEntries(IGESBasic_ExternalRefFileIndex self) -> Standard_Integer

        returns number of index entries

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_ExternalRefFileIndex_NbEntries(self, *args)


    def Name(self, *args):
        """
        Name(IGESBasic_ExternalRefFileIndex self, Standard_Integer const Index) -> Handle_TCollection_HAsciiString

        returns the External Reference Entity symbolic name
        raises exception if Index <= 0 or Index > NbEntries()

        :type Index: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.IGESBasic_ExternalRefFileIndex_Name(self, *args)


    def Entity(self, *args):
        """
        Entity(IGESBasic_ExternalRefFileIndex self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the internal entity
        raises exception if Index <= 0 or Index > NbEntries()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.IGESBasic_ExternalRefFileIndex_Entity(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_ExternalRefFileIndex_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_ExternalRefFileIndex_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_ExternalRefFileIndex_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_ExternalRefFileIndex
IGESBasic_ExternalRefFileIndex_swigregister = _IGESBasic.IGESBasic_ExternalRefFileIndex_swigregister
IGESBasic_ExternalRefFileIndex_swigregister(IGESBasic_ExternalRefFileIndex)

def IGESBasic_ExternalRefFileIndex_get_type_name(*args):
    """
    IGESBasic_ExternalRefFileIndex_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_ExternalRefFileIndex_get_type_name(*args)

def IGESBasic_ExternalRefFileIndex_get_type_descriptor(*args):
    """
    IGESBasic_ExternalRefFileIndex_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_ExternalRefFileIndex_get_type_descriptor(*args)

class Handle_IGESBasic_Hierarchy(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_Hierarchy self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_Hierarchy self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_Hierarchy self, IGESBasic_Hierarchy thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_Hierarchy self, Handle_IGESBasic_Hierarchy theHandle) -> Handle_IGESBasic_Hierarchy
        assign(Handle_IGESBasic_Hierarchy self, IGESBasic_Hierarchy thePtr) -> Handle_IGESBasic_Hierarchy
        assign(Handle_IGESBasic_Hierarchy self, Handle_IGESBasic_Hierarchy theHandle) -> Handle_IGESBasic_Hierarchy

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_Hierarchy self) -> IGESBasic_Hierarchy

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_Hierarchy self) -> IGESBasic_Hierarchy

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_Hierarchy self) -> IGESBasic_Hierarchy

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_Hierarchy___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_Hierarchy___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_Hierarchy(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_Hierarchy_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_Hierarchy

    def Init(self, *args):
        """
        Init(Handle_IGESBasic_Hierarchy self, Standard_Integer const nbPropVal, Standard_Integer const aLineFont, Standard_Integer const aView, Standard_Integer const anEntityLevel, Standard_Integer const aBlankStatus, Standard_Integer const aLineWt, Standard_Integer const aColorNum)

        This method is used to set the fields of the class
        Hierarchy
        - nbPropVal     : Number of Property values = 6
        - aLineFont     : indicates the line font
        - aView         : indicates the view
        - aEntityLevel  : indicates the entity level
        - aBlankStatus  : indicates the blank status
        - aLineWt       : indicates the line weight
        - aColorNum     : indicates the color num
        aLineFont, aView, aEntityLevel, aBlankStatus, aLineWt and
        aColorNum can take 0 or 1.
        0 : The directory entry attribute will apply to entities
        physically subordinate to this entity.
        1 : The directory entry attribute of this entity will not
        apply to physically subordinate entities.

        :type nbPropVal: int
        :type aLineFont: int
        :type aView: int
        :type anEntityLevel: int
        :type aBlankStatus: int
        :type aLineWt: int
        :type aColorNum: int

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESBasic_Hierarchy self) -> Standard_Integer

        returns the number of property values, which should be 6

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_NbPropertyValues(self, *args)


    def NewLineFont(self, *args):
        """
        NewLineFont(Handle_IGESBasic_Hierarchy self) -> Standard_Integer

        returns the line font

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_NewLineFont(self, *args)


    def NewView(self, *args):
        """
        NewView(Handle_IGESBasic_Hierarchy self) -> Standard_Integer

        returns the view

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_NewView(self, *args)


    def NewEntityLevel(self, *args):
        """
        NewEntityLevel(Handle_IGESBasic_Hierarchy self) -> Standard_Integer

        returns the entity level

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_NewEntityLevel(self, *args)


    def NewBlankStatus(self, *args):
        """
        NewBlankStatus(Handle_IGESBasic_Hierarchy self) -> Standard_Integer

        returns the blank status

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_NewBlankStatus(self, *args)


    def NewLineWeight(self, *args):
        """
        NewLineWeight(Handle_IGESBasic_Hierarchy self) -> Standard_Integer

        returns the line weight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_NewLineWeight(self, *args)


    def NewColorNum(self, *args):
        """
        NewColorNum(Handle_IGESBasic_Hierarchy self) -> Standard_Integer

        returns the color number

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_NewColorNum(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_Hierarchy self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_Hierarchy_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_Hierarchy_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESBasic_Hierarchy self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESBasic_Hierarchy self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESBasic_Hierarchy self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESBasic_Hierarchy self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESBasic_Hierarchy self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESBasic_Hierarchy self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESBasic_Hierarchy self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESBasic_Hierarchy self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESBasic_Hierarchy self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESBasic_Hierarchy self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESBasic_Hierarchy self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESBasic_Hierarchy self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESBasic_Hierarchy self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESBasic_Hierarchy self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESBasic_Hierarchy self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESBasic_Hierarchy self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESBasic_Hierarchy self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESBasic_Hierarchy self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESBasic_Hierarchy self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESBasic_Hierarchy self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESBasic_Hierarchy self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESBasic_Hierarchy self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESBasic_Hierarchy self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESBasic_Hierarchy self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESBasic_Hierarchy self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESBasic_Hierarchy self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESBasic_Hierarchy self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESBasic_Hierarchy self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESBasic_Hierarchy self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESBasic_Hierarchy self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESBasic_Hierarchy self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESBasic_Hierarchy self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESBasic_Hierarchy self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESBasic_Hierarchy self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESBasic_Hierarchy self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESBasic_Hierarchy self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESBasic_Hierarchy self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESBasic_Hierarchy self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESBasic_Hierarchy self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESBasic_Hierarchy self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESBasic_Hierarchy self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESBasic_Hierarchy self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESBasic_Hierarchy self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESBasic_Hierarchy self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESBasic_Hierarchy self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESBasic_Hierarchy self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESBasic_Hierarchy self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESBasic_Hierarchy self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESBasic_Hierarchy self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESBasic_Hierarchy self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESBasic_Hierarchy self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESBasic_Hierarchy self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESBasic_Hierarchy self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESBasic_Hierarchy self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESBasic_Hierarchy self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESBasic_Hierarchy self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESBasic_Hierarchy self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESBasic_Hierarchy self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESBasic_Hierarchy self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESBasic_Hierarchy self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESBasic_Hierarchy self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESBasic_Hierarchy self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESBasic_Hierarchy self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESBasic_Hierarchy self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESBasic_Hierarchy self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_Hierarchy self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_Hierarchy self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_Hierarchy self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_Hierarchy self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_Hierarchy self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_Hierarchy self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_Hierarchy self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_Hierarchy self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_Hierarchy self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Hierarchy_DecrementRefCounter(self, *args)

Handle_IGESBasic_Hierarchy_swigregister = _IGESBasic.Handle_IGESBasic_Hierarchy_swigregister
Handle_IGESBasic_Hierarchy_swigregister(Handle_IGESBasic_Hierarchy)

def Handle_IGESBasic_Hierarchy_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_Hierarchy_DownCast(thing)
Handle_IGESBasic_Hierarchy_DownCast = _IGESBasic.Handle_IGESBasic_Hierarchy_DownCast

class IGESBasic_ToolHierarchy(object):
    """
    Tool to work on a Hierarchy. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESBasic_ToolHierarchy self) -> IGESBasic_ToolHierarchy

        Returns a ToolHierarchy, ready to work


        """
        this = _IGESBasic.new_IGESBasic_ToolHierarchy(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESBasic_ToolHierarchy self, Handle_IGESBasic_Hierarchy ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_Hierarchy
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESBasic.IGESBasic_ToolHierarchy_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESBasic_ToolHierarchy self, Handle_IGESBasic_Hierarchy ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_Hierarchy
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESBasic.IGESBasic_ToolHierarchy_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESBasic_ToolHierarchy self, Handle_IGESBasic_Hierarchy ent, Interface_EntityIterator iter)

        Lists the Entities shared by a Hierarchy <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_Hierarchy
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.IGESBasic_ToolHierarchy_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESBasic_ToolHierarchy self, Handle_IGESBasic_Hierarchy ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a Hierarchy
        (NbPropertyValues forced to 6)

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_Hierarchy
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.IGESBasic_ToolHierarchy_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESBasic_ToolHierarchy self, Handle_IGESBasic_Hierarchy ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_Hierarchy
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESBasic.IGESBasic_ToolHierarchy_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESBasic_ToolHierarchy self, Handle_IGESBasic_Hierarchy ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_Hierarchy
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESBasic.IGESBasic_ToolHierarchy_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESBasic_ToolHierarchy self, Handle_IGESBasic_Hierarchy entfrom, Handle_IGESBasic_Hierarchy entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESBasic.Handle_IGESBasic_Hierarchy
        :type entto: OCC.wrapper.IGESBasic.Handle_IGESBasic_Hierarchy
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESBasic.IGESBasic_ToolHierarchy_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESBasic_ToolHierarchy self, Handle_IGESBasic_Hierarchy ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_Hierarchy
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESBasic.IGESBasic_ToolHierarchy_OwnDump(self, *args)

    __swig_destroy__ = _IGESBasic.delete_IGESBasic_ToolHierarchy
IGESBasic_ToolHierarchy_swigregister = _IGESBasic.IGESBasic_ToolHierarchy_swigregister
IGESBasic_ToolHierarchy_swigregister(IGESBasic_ToolHierarchy)

class Handle_IGESBasic_Name(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_Name self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_Name_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_Name self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_Name_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_Name self, IGESBasic_Name thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_Name_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_Name self, Handle_IGESBasic_Name theHandle) -> Handle_IGESBasic_Name
        assign(Handle_IGESBasic_Name self, IGESBasic_Name thePtr) -> Handle_IGESBasic_Name
        assign(Handle_IGESBasic_Name self, Handle_IGESBasic_Name theHandle) -> Handle_IGESBasic_Name

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_Name_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_Name self) -> IGESBasic_Name

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_Name_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_Name self) -> IGESBasic_Name

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_Name___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_Name self) -> IGESBasic_Name

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_Name___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_Name___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_Name___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_Name(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_Name_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_Name

    def Init(self, *args):
        """
        Init(Handle_IGESBasic_Name self, Standard_Integer const nbPropVal, Handle_TCollection_HAsciiString aName)

        This method is used to set the fields of the class Name
        - nbPropVal  : Number of property values, always = 1
        - aName      : Stores the Name

        :type nbPropVal: int
        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_Name_Init(self, *args)


    def NbPropertyValues(self, *args):
        """
        NbPropertyValues(Handle_IGESBasic_Name self) -> Standard_Integer

        returns the number of property values, which should be 1

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Name_NbPropertyValues(self, *args)


    def Value(self, *args):
        """
        Value(Handle_IGESBasic_Name self) -> Handle_TCollection_HAsciiString

        returns the user defined Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_Name_Value(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_Name self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_Name_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_Name_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_Name_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESBasic_Name self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESBasic.Handle_IGESBasic_Name_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESBasic_Name self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Name_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESBasic_Name self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Name_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESBasic_Name self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Name_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESBasic_Name self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Name_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESBasic_Name self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Name_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESBasic_Name self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_Name_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESBasic_Name self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Name_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESBasic_Name self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESBasic.Handle_IGESBasic_Name_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESBasic_Name self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_Name_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESBasic_Name self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Name_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESBasic_Name self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESBasic.Handle_IGESBasic_Name_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESBasic_Name self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_Name_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESBasic_Name self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_Name_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESBasic_Name self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_Name_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESBasic_Name self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_Name_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESBasic_Name self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Name_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESBasic_Name self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_Name_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESBasic_Name self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Name_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESBasic_Name self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESBasic.Handle_IGESBasic_Name_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESBasic_Name self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Name_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESBasic_Name self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Name_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESBasic_Name self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Name_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESBasic_Name self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Name_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESBasic_Name self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Name_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESBasic_Name self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESBasic.Handle_IGESBasic_Name_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESBasic_Name self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_Name_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESBasic_Name self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Name_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESBasic_Name self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESBasic.Handle_IGESBasic_Name_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESBasic_Name self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Name_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESBasic_Name self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Name_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESBasic_Name self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_Name_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESBasic_Name self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Name_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESBasic_Name self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Name_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESBasic_Name self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Name_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESBasic_Name self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_Name_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESBasic_Name self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_Name_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESBasic_Name self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_Name_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESBasic_Name self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESBasic.Handle_IGESBasic_Name_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESBasic_Name self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_Name_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESBasic_Name self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESBasic.Handle_IGESBasic_Name_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESBasic_Name self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESBasic.Handle_IGESBasic_Name_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESBasic_Name self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESBasic.Handle_IGESBasic_Name_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESBasic_Name self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Name_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESBasic_Name self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Name_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESBasic_Name self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_Name_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESBasic_Name self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_Name_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESBasic_Name self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_Name_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESBasic_Name self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Name_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESBasic_Name self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_Name_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESBasic_Name self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Name_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESBasic_Name self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Name_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESBasic_Name self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_Name_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESBasic_Name self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Name_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESBasic_Name self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Name_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESBasic_Name self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Name_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESBasic_Name self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Name_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESBasic_Name self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Name_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESBasic_Name self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Name_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESBasic_Name self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_Name_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESBasic_Name self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Name_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESBasic_Name self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Name_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESBasic_Name self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Name_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESBasic_Name self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Name_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESBasic_Name self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESBasic.Handle_IGESBasic_Name_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_Name self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_Name_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_Name self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_Name self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Name_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_Name self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_Name self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Name_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_Name self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_Name_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_Name self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Name_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_Name self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_Name_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_Name self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Name_DecrementRefCounter(self, *args)

Handle_IGESBasic_Name_swigregister = _IGESBasic.Handle_IGESBasic_Name_swigregister
Handle_IGESBasic_Name_swigregister(Handle_IGESBasic_Name)

def Handle_IGESBasic_Name_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_Name_DownCast(thing)
Handle_IGESBasic_Name_DownCast = _IGESBasic.Handle_IGESBasic_Name_DownCast

class Handle_IGESBasic_ReadWriteModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_ReadWriteModule self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_ReadWriteModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_ReadWriteModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_ReadWriteModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_ReadWriteModule self, IGESBasic_ReadWriteModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_ReadWriteModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_ReadWriteModule self, Handle_IGESBasic_ReadWriteModule theHandle) -> Handle_IGESBasic_ReadWriteModule
        assign(Handle_IGESBasic_ReadWriteModule self, IGESBasic_ReadWriteModule thePtr) -> Handle_IGESBasic_ReadWriteModule
        assign(Handle_IGESBasic_ReadWriteModule self, Handle_IGESBasic_ReadWriteModule theHandle) -> Handle_IGESBasic_ReadWriteModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_ReadWriteModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_ReadWriteModule self) -> IGESBasic_ReadWriteModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_ReadWriteModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_ReadWriteModule self) -> IGESBasic_ReadWriteModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_ReadWriteModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_ReadWriteModule self) -> IGESBasic_ReadWriteModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_ReadWriteModule___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_ReadWriteModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_ReadWriteModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_ReadWriteModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_ReadWriteModule_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_ReadWriteModule

    def CaseIGES(self, *args):
        """
        CaseIGES(Handle_IGESBasic_ReadWriteModule self, Standard_Integer const typenum, Standard_Integer const formnum) -> Standard_Integer

        Defines Case Numbers for Entities of IGESBasic

        :type typenum: int
        :type formnum: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ReadWriteModule_CaseIGES(self, *args)


    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(Handle_IGESBasic_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file for an Entity of IGESBasic

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESBasic.Handle_IGESBasic_ReadWriteModule_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(Handle_IGESBasic_ReadWriteModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESBasic.Handle_IGESBasic_ReadWriteModule_WriteOwnParams(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_ReadWriteModule self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_ReadWriteModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_ReadWriteModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_ReadWriteModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CaseNum(self, *args):
        """
        CaseNum(Handle_IGESBasic_ReadWriteModule self, Handle_Interface_FileReaderData data, Standard_Integer const num) -> Standard_Integer

        Translates the Type of record <num> in <data> to a positive
        Case Number, or 0 if failed.
        Works with IGESReaderData which provides Type & Form Numbers,
        and calls CaseIGES (see below)

        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ReadWriteModule_CaseNum(self, *args)


    def Read(self, *args):
        """
        Read(Handle_IGESBasic_ReadWriteModule self, Standard_Integer const CN, Handle_Interface_FileReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_Standard_Transient ent)

        General Read Function. See IGESReaderTool for more info

        :type CN: int
        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_ReadWriteModule_Read(self, *args)


    def NewRead(self, *args):
        """
        NewRead(Handle_IGESBasic_ReadWriteModule self, Standard_Integer const casenum, Handle_Interface_FileReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_Standard_Transient ent) -> Standard_Boolean

        Specific operator (create+read) defaulted to do nothing.
        It can be redefined when it is not possible to work in two
        steps (NewVoid then Read). This occurs when no default
        constructor is defined : hence the result <ent> must be
        created with an effective definition from the reader.
        Remark : if NewRead is defined, Copy has nothing to do.

        Returns True if it has produced something, false else.
        If nothing was produced, <ach> should be filled : it will be
        treated as "Unrecognized case" by reader tool.

        :type casenum: int
        :type data: OCC.wrapper.Interface.Handle_Interface_FileReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ReadWriteModule_NewRead(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_ReadWriteModule self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_ReadWriteModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_ReadWriteModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_ReadWriteModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ReadWriteModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_ReadWriteModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_ReadWriteModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ReadWriteModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_ReadWriteModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_ReadWriteModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_ReadWriteModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ReadWriteModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_ReadWriteModule self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_ReadWriteModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_ReadWriteModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ReadWriteModule_DecrementRefCounter(self, *args)

Handle_IGESBasic_ReadWriteModule_swigregister = _IGESBasic.Handle_IGESBasic_ReadWriteModule_swigregister
Handle_IGESBasic_ReadWriteModule_swigregister(Handle_IGESBasic_ReadWriteModule)

def Handle_IGESBasic_ReadWriteModule_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_ReadWriteModule_DownCast(thing)
Handle_IGESBasic_ReadWriteModule_DownCast = _IGESBasic.Handle_IGESBasic_ReadWriteModule_DownCast

class Handle_IGESBasic_Group(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_Group self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_Group_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_Group self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_Group_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_Group self, IGESBasic_Group thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_Group_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_Group self, Handle_IGESBasic_Group theHandle) -> Handle_IGESBasic_Group
        assign(Handle_IGESBasic_Group self, IGESBasic_Group thePtr) -> Handle_IGESBasic_Group
        assign(Handle_IGESBasic_Group self, Handle_IGESBasic_Group theHandle) -> Handle_IGESBasic_Group

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_Group_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_Group self) -> IGESBasic_Group

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_Group_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_Group self) -> IGESBasic_Group

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_Group___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_Group self) -> IGESBasic_Group

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_Group___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_Group___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_Group___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_Group(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_Group_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_Group

    def Init(self, *args):
        """
        Init(Handle_IGESBasic_Group self, Handle_IGESData_HArray1OfIGESEntity allEntities)

        This method is used to set the fields of the class Group
        - allEntities : Used to store pointers to members of
        the Group.

        :type allEntities: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Group_Init(self, *args)


    def SetOrdered(self, *args):
        """
        SetOrdered(Handle_IGESBasic_Group self, Standard_Boolean const mode)

        Sets a Group to be, or not to be  Ordered (according mode)

        :type mode: bool

        """
        return _IGESBasic.Handle_IGESBasic_Group_SetOrdered(self, *args)


    def SetWithoutBackP(self, *args):
        """
        SetWithoutBackP(Handle_IGESBasic_Group self, Standard_Boolean const mode)

        Sets a Group to be, or not to be  WithoutBackP

        :type mode: bool

        """
        return _IGESBasic.Handle_IGESBasic_Group_SetWithoutBackP(self, *args)


    def IsOrdered(self, *args):
        """
        IsOrdered(Handle_IGESBasic_Group self) -> Standard_Boolean

        Returns True if <me> is Ordered

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Group_IsOrdered(self, *args)


    def IsWithoutBackP(self, *args):
        """
        IsWithoutBackP(Handle_IGESBasic_Group self) -> Standard_Boolean

        Returns True if <me> is WithoutBackP

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Group_IsWithoutBackP(self, *args)


    def SetUser(self, *args):
        """
        SetUser(Handle_IGESBasic_Group self, Standard_Integer const type, Standard_Integer const form)

        Enforce a new value for the type and form

        :type type: int
        :type form: int

        """
        return _IGESBasic.Handle_IGESBasic_Group_SetUser(self, *args)


    def SetNb(self, *args):
        """
        SetNb(Handle_IGESBasic_Group self, Standard_Integer const nb)

        Changes the count of item
        If greater, new items are null
        If lower, old items are lost

        :type nb: int

        """
        return _IGESBasic.Handle_IGESBasic_Group_SetNb(self, *args)


    def NbEntities(self, *args):
        """
        NbEntities(Handle_IGESBasic_Group self) -> Standard_Integer

        returns the number of IGESEntities in the Group

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Group_NbEntities(self, *args)


    def Entity(self, *args):
        """
        Entity(Handle_IGESBasic_Group self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the specific entity from the Group

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Group_Entity(self, *args)


    def Value(self, *args):
        """
        Value(Handle_IGESBasic_Group self, Standard_Integer const Index) -> Handle_Standard_Transient

        returns the specific entity from the Group

        :type Index: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_Group_Value(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_IGESBasic_Group self, Standard_Integer const Index, Handle_IGESData_IGESEntity ent)

        Sets a new value for item <Index>

        :type Index: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Group_SetValue(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_Group self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_Group_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_Group_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_Group_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESBasic_Group self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESBasic.Handle_IGESBasic_Group_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESBasic_Group self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Group_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESBasic_Group self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Group_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESBasic_Group self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Group_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESBasic_Group self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Group_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESBasic_Group self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Group_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESBasic_Group self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_Group_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESBasic_Group self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Group_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESBasic_Group self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESBasic.Handle_IGESBasic_Group_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESBasic_Group self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_Group_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESBasic_Group self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Group_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESBasic_Group self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESBasic.Handle_IGESBasic_Group_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESBasic_Group self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_Group_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESBasic_Group self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_Group_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESBasic_Group self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_Group_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESBasic_Group self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_Group_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESBasic_Group self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Group_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESBasic_Group self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_Group_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESBasic_Group self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Group_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESBasic_Group self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESBasic.Handle_IGESBasic_Group_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESBasic_Group self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Group_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESBasic_Group self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Group_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESBasic_Group self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Group_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESBasic_Group self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Group_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESBasic_Group self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Group_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESBasic_Group self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESBasic.Handle_IGESBasic_Group_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESBasic_Group self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_Group_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESBasic_Group self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Group_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESBasic_Group self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESBasic.Handle_IGESBasic_Group_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESBasic_Group self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Group_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESBasic_Group self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Group_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESBasic_Group self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_Group_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESBasic_Group self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Group_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESBasic_Group self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Group_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESBasic_Group self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Group_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESBasic_Group self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_Group_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESBasic_Group self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_Group_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESBasic_Group self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_Group_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESBasic_Group self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESBasic.Handle_IGESBasic_Group_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESBasic_Group self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_Group_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESBasic_Group self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESBasic.Handle_IGESBasic_Group_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESBasic_Group self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESBasic.Handle_IGESBasic_Group_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESBasic_Group self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESBasic.Handle_IGESBasic_Group_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESBasic_Group self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Group_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESBasic_Group self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Group_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESBasic_Group self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_Group_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESBasic_Group self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_Group_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESBasic_Group self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_Group_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESBasic_Group self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Group_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESBasic_Group self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_Group_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESBasic_Group self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Group_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESBasic_Group self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Group_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESBasic_Group self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_Group_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESBasic_Group self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Group_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESBasic_Group self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Group_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESBasic_Group self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Group_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESBasic_Group self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Group_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESBasic_Group self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Group_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESBasic_Group self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Group_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESBasic_Group self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_Group_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESBasic_Group self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Group_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESBasic_Group self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Group_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESBasic_Group self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Group_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESBasic_Group self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_Group_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESBasic_Group self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESBasic.Handle_IGESBasic_Group_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_Group self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_Group_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_Group self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_Group self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Group_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_Group self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_Group self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Group_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_Group self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_Group_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_Group self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Group_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_Group self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_Group_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_Group self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Group_DecrementRefCounter(self, *args)

Handle_IGESBasic_Group_swigregister = _IGESBasic.Handle_IGESBasic_Group_swigregister
Handle_IGESBasic_Group_swigregister(Handle_IGESBasic_Group)

def Handle_IGESBasic_Group_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_Group_DownCast(thing)
Handle_IGESBasic_Group_DownCast = _IGESBasic.Handle_IGESBasic_Group_DownCast

class IGESBasic_ToolSubfigureDef(object):
    """
    Tool to work on a SubfigureDef. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESBasic_ToolSubfigureDef self) -> IGESBasic_ToolSubfigureDef

        Returns a ToolSubfigureDef, ready to work


        """
        this = _IGESBasic.new_IGESBasic_ToolSubfigureDef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESBasic_ToolSubfigureDef self, Handle_IGESBasic_SubfigureDef ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_SubfigureDef
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESBasic.IGESBasic_ToolSubfigureDef_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESBasic_ToolSubfigureDef self, Handle_IGESBasic_SubfigureDef ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_SubfigureDef
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESBasic.IGESBasic_ToolSubfigureDef_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESBasic_ToolSubfigureDef self, Handle_IGESBasic_SubfigureDef ent, Interface_EntityIterator iter)

        Lists the Entities shared by a SubfigureDef <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_SubfigureDef
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.IGESBasic_ToolSubfigureDef_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESBasic_ToolSubfigureDef self, Handle_IGESBasic_SubfigureDef ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_SubfigureDef
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESBasic.IGESBasic_ToolSubfigureDef_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESBasic_ToolSubfigureDef self, Handle_IGESBasic_SubfigureDef ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_SubfigureDef
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESBasic.IGESBasic_ToolSubfigureDef_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESBasic_ToolSubfigureDef self, Handle_IGESBasic_SubfigureDef entfrom, Handle_IGESBasic_SubfigureDef entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESBasic.Handle_IGESBasic_SubfigureDef
        :type entto: OCC.wrapper.IGESBasic.Handle_IGESBasic_SubfigureDef
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESBasic.IGESBasic_ToolSubfigureDef_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESBasic_ToolSubfigureDef self, Handle_IGESBasic_SubfigureDef ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_SubfigureDef
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESBasic.IGESBasic_ToolSubfigureDef_OwnDump(self, *args)

    __swig_destroy__ = _IGESBasic.delete_IGESBasic_ToolSubfigureDef
IGESBasic_ToolSubfigureDef_swigregister = _IGESBasic.IGESBasic_ToolSubfigureDef_swigregister
IGESBasic_ToolSubfigureDef_swigregister(IGESBasic_ToolSubfigureDef)

class Handle_IGESBasic_ExternalRefFile(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_ExternalRefFile self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_ExternalRefFile self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_ExternalRefFile self, IGESBasic_ExternalRefFile thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_ExternalRefFile self, Handle_IGESBasic_ExternalRefFile theHandle) -> Handle_IGESBasic_ExternalRefFile
        assign(Handle_IGESBasic_ExternalRefFile self, IGESBasic_ExternalRefFile thePtr) -> Handle_IGESBasic_ExternalRefFile
        assign(Handle_IGESBasic_ExternalRefFile self, Handle_IGESBasic_ExternalRefFile theHandle) -> Handle_IGESBasic_ExternalRefFile

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_ExternalRefFile self) -> IGESBasic_ExternalRefFile

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_ExternalRefFile self) -> IGESBasic_ExternalRefFile

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_ExternalRefFile self) -> IGESBasic_ExternalRefFile

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_ExternalRefFile___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_ExternalRefFile(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_ExternalRefFile_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_ExternalRefFile

    def Init(self, *args):
        """
        Init(Handle_IGESBasic_ExternalRefFile self, Handle_TCollection_HAsciiString aFileIdent)

        This method is used to set the field of the class
        ExternalRefFile
        - aFileIdent : External Reference File Identifier

        :type aFileIdent: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_Init(self, *args)


    def FileId(self, *args):
        """
        FileId(Handle_IGESBasic_ExternalRefFile self) -> Handle_TCollection_HAsciiString

        returns External Reference File Identifier

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_FileId(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_ExternalRefFile self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_ExternalRefFile_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_ExternalRefFile_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESBasic_ExternalRefFile self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESBasic_ExternalRefFile self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESBasic_ExternalRefFile self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESBasic_ExternalRefFile self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESBasic_ExternalRefFile self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESBasic_ExternalRefFile self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESBasic_ExternalRefFile self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESBasic_ExternalRefFile self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESBasic_ExternalRefFile self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESBasic_ExternalRefFile self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESBasic_ExternalRefFile self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESBasic_ExternalRefFile self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESBasic_ExternalRefFile self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESBasic_ExternalRefFile self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESBasic_ExternalRefFile self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESBasic_ExternalRefFile self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESBasic_ExternalRefFile self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESBasic_ExternalRefFile self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESBasic_ExternalRefFile self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESBasic_ExternalRefFile self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESBasic_ExternalRefFile self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESBasic_ExternalRefFile self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESBasic_ExternalRefFile self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESBasic_ExternalRefFile self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESBasic_ExternalRefFile self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESBasic_ExternalRefFile self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESBasic_ExternalRefFile self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESBasic_ExternalRefFile self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESBasic_ExternalRefFile self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESBasic_ExternalRefFile self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESBasic_ExternalRefFile self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESBasic_ExternalRefFile self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESBasic_ExternalRefFile self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESBasic_ExternalRefFile self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESBasic_ExternalRefFile self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESBasic_ExternalRefFile self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESBasic_ExternalRefFile self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESBasic_ExternalRefFile self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESBasic_ExternalRefFile self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESBasic_ExternalRefFile self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESBasic_ExternalRefFile self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESBasic_ExternalRefFile self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESBasic_ExternalRefFile self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESBasic_ExternalRefFile self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESBasic_ExternalRefFile self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESBasic_ExternalRefFile self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESBasic_ExternalRefFile self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESBasic_ExternalRefFile self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESBasic_ExternalRefFile self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESBasic_ExternalRefFile self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESBasic_ExternalRefFile self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESBasic_ExternalRefFile self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESBasic_ExternalRefFile self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESBasic_ExternalRefFile self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESBasic_ExternalRefFile self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESBasic_ExternalRefFile self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESBasic_ExternalRefFile self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESBasic_ExternalRefFile self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESBasic_ExternalRefFile self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESBasic_ExternalRefFile self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESBasic_ExternalRefFile self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESBasic_ExternalRefFile self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESBasic_ExternalRefFile self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESBasic_ExternalRefFile self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESBasic_ExternalRefFile self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_ExternalRefFile self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_ExternalRefFile self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_ExternalRefFile self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_ExternalRefFile self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_ExternalRefFile self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_ExternalRefFile self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_ExternalRefFile self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_ExternalRefFile self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_ExternalRefFile self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFile_DecrementRefCounter(self, *args)

Handle_IGESBasic_ExternalRefFile_swigregister = _IGESBasic.Handle_IGESBasic_ExternalRefFile_swigregister
Handle_IGESBasic_ExternalRefFile_swigregister(Handle_IGESBasic_ExternalRefFile)

def Handle_IGESBasic_ExternalRefFile_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_ExternalRefFile_DownCast(thing)
Handle_IGESBasic_ExternalRefFile_DownCast = _IGESBasic.Handle_IGESBasic_ExternalRefFile_DownCast

class Handle_IGESBasic_GroupWithoutBackP(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_GroupWithoutBackP self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_GroupWithoutBackP self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_GroupWithoutBackP self, IGESBasic_GroupWithoutBackP thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_GroupWithoutBackP self, Handle_IGESBasic_GroupWithoutBackP theHandle) -> Handle_IGESBasic_GroupWithoutBackP
        assign(Handle_IGESBasic_GroupWithoutBackP self, IGESBasic_GroupWithoutBackP thePtr) -> Handle_IGESBasic_GroupWithoutBackP
        assign(Handle_IGESBasic_GroupWithoutBackP self, Handle_IGESBasic_GroupWithoutBackP theHandle) -> Handle_IGESBasic_GroupWithoutBackP

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_GroupWithoutBackP self) -> IGESBasic_GroupWithoutBackP

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_GroupWithoutBackP self) -> IGESBasic_GroupWithoutBackP

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_GroupWithoutBackP self) -> IGESBasic_GroupWithoutBackP

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_GroupWithoutBackP(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_GroupWithoutBackP_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_GroupWithoutBackP

    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_GroupWithoutBackP self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_IGESBasic_GroupWithoutBackP self, Handle_IGESData_HArray1OfIGESEntity allEntities)

        This method is used to set the fields of the class Group
        - allEntities : Used to store pointers to members of
        the Group.

        :type allEntities: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_Init(self, *args)


    def SetOrdered(self, *args):
        """
        SetOrdered(Handle_IGESBasic_GroupWithoutBackP self, Standard_Boolean const mode)

        Sets a Group to be, or not to be  Ordered (according mode)

        :type mode: bool

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_SetOrdered(self, *args)


    def SetWithoutBackP(self, *args):
        """
        SetWithoutBackP(Handle_IGESBasic_GroupWithoutBackP self, Standard_Boolean const mode)

        Sets a Group to be, or not to be  WithoutBackP

        :type mode: bool

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_SetWithoutBackP(self, *args)


    def IsOrdered(self, *args):
        """
        IsOrdered(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Boolean

        Returns True if <me> is Ordered

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_IsOrdered(self, *args)


    def IsWithoutBackP(self, *args):
        """
        IsWithoutBackP(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Boolean

        Returns True if <me> is WithoutBackP

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_IsWithoutBackP(self, *args)


    def SetUser(self, *args):
        """
        SetUser(Handle_IGESBasic_GroupWithoutBackP self, Standard_Integer const type, Standard_Integer const form)

        Enforce a new value for the type and form

        :type type: int
        :type form: int

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_SetUser(self, *args)


    def SetNb(self, *args):
        """
        SetNb(Handle_IGESBasic_GroupWithoutBackP self, Standard_Integer const nb)

        Changes the count of item
        If greater, new items are null
        If lower, old items are lost

        :type nb: int

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_SetNb(self, *args)


    def NbEntities(self, *args):
        """
        NbEntities(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Integer

        returns the number of IGESEntities in the Group

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_NbEntities(self, *args)


    def Entity(self, *args):
        """
        Entity(Handle_IGESBasic_GroupWithoutBackP self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the specific entity from the Group

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_Entity(self, *args)


    def Value(self, *args):
        """
        Value(Handle_IGESBasic_GroupWithoutBackP self, Standard_Integer const Index) -> Handle_Standard_Transient

        returns the specific entity from the Group

        :type Index: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_Value(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_IGESBasic_GroupWithoutBackP self, Standard_Integer const Index, Handle_IGESData_IGESEntity ent)

        Sets a new value for item <Index>

        :type Index: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_SetValue(self, *args)


    def IGESType(self, *args):
        """
        IGESType(Handle_IGESBasic_GroupWithoutBackP self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESBasic_GroupWithoutBackP self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESBasic_GroupWithoutBackP self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESBasic_GroupWithoutBackP self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESBasic_GroupWithoutBackP self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESBasic_GroupWithoutBackP self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESBasic_GroupWithoutBackP self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESBasic_GroupWithoutBackP self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESBasic_GroupWithoutBackP self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESBasic_GroupWithoutBackP self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESBasic_GroupWithoutBackP self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESBasic_GroupWithoutBackP self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESBasic_GroupWithoutBackP self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESBasic_GroupWithoutBackP self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESBasic_GroupWithoutBackP self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESBasic_GroupWithoutBackP self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESBasic_GroupWithoutBackP self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESBasic_GroupWithoutBackP self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESBasic_GroupWithoutBackP self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESBasic_GroupWithoutBackP self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESBasic_GroupWithoutBackP self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESBasic_GroupWithoutBackP self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESBasic_GroupWithoutBackP self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESBasic_GroupWithoutBackP self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESBasic_GroupWithoutBackP self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESBasic_GroupWithoutBackP self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESBasic_GroupWithoutBackP self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESBasic_GroupWithoutBackP self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESBasic_GroupWithoutBackP self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESBasic_GroupWithoutBackP self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESBasic_GroupWithoutBackP self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESBasic_GroupWithoutBackP self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESBasic_GroupWithoutBackP self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESBasic_GroupWithoutBackP self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESBasic_GroupWithoutBackP self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESBasic_GroupWithoutBackP self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESBasic_GroupWithoutBackP self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESBasic_GroupWithoutBackP self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESBasic_GroupWithoutBackP self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESBasic_GroupWithoutBackP self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESBasic_GroupWithoutBackP self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESBasic_GroupWithoutBackP self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_GroupWithoutBackP self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_GroupWithoutBackP self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_GroupWithoutBackP self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_GroupWithoutBackP self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_GroupWithoutBackP self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_GroupWithoutBackP self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_GroupWithoutBackP self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_DecrementRefCounter(self, *args)

Handle_IGESBasic_GroupWithoutBackP_swigregister = _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_swigregister
Handle_IGESBasic_GroupWithoutBackP_swigregister(Handle_IGESBasic_GroupWithoutBackP)

def Handle_IGESBasic_GroupWithoutBackP_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_DownCast(thing)
Handle_IGESBasic_GroupWithoutBackP_DownCast = _IGESBasic.Handle_IGESBasic_GroupWithoutBackP_DownCast

class IGESBasic_AssocGroupType(IGESData.IGESData_IGESEntity):
    """
    defines AssocGroupType, Type <406> Form <23>
    in package IGESBasic
    Used to assign an unambiguous identification to a Group
    Associativity.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_AssocGroupType
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_AssocGroupType(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_AssocGroupType self) -> IGESBasic_AssocGroupType

        defines AssocGroupType, Type <406> Form <23>
        in package IGESBasic
        Used to assign an unambiguous identification to a Group
        Associativity.
        """
        this = _IGESBasic.new_IGESBasic_AssocGroupType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESBasic_AssocGroupType self, Standard_Integer const nbDataFields, Standard_Integer const aType, Handle_TCollection_HAsciiString aName)

        This method is used to set the fields of the class
        AssocGroupType
        - nbDataFields : number of parameter data fields = 2
        - aType        : type of attached associativity
        - aName        : identifier of associativity of type AType

        :type nbDataFields: int
        :type aType: int
        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.IGESBasic_AssocGroupType_Init(self, *args)


    def NbData(self, *args):
        """
        NbData(IGESBasic_AssocGroupType self) -> Standard_Integer

        returns the number of parameter data fields, always = 2

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_AssocGroupType_NbData(self, *args)


    def AssocType(self, *args):
        """
        AssocType(IGESBasic_AssocGroupType self) -> Standard_Integer

        returns the type of attached associativity

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_AssocGroupType_AssocType(self, *args)


    def Name(self, *args):
        """
        Name(IGESBasic_AssocGroupType self) -> Handle_TCollection_HAsciiString

        returns identifier of instance of specified associativity

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.IGESBasic_AssocGroupType_Name(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_AssocGroupType_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_AssocGroupType_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_AssocGroupType_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_AssocGroupType
IGESBasic_AssocGroupType_swigregister = _IGESBasic.IGESBasic_AssocGroupType_swigregister
IGESBasic_AssocGroupType_swigregister(IGESBasic_AssocGroupType)

def IGESBasic_AssocGroupType_get_type_name(*args):
    """
    IGESBasic_AssocGroupType_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_AssocGroupType_get_type_name(*args)

def IGESBasic_AssocGroupType_get_type_descriptor(*args):
    """
    IGESBasic_AssocGroupType_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_AssocGroupType_get_type_descriptor(*args)

class IGESBasic_ToolExternalReferenceFile(object):
    """
    Tool to work on a ExternalReferenceFile. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESBasic_ToolExternalReferenceFile self) -> IGESBasic_ToolExternalReferenceFile

        Returns a ToolExternalReferenceFile, ready to work


        """
        this = _IGESBasic.new_IGESBasic_ToolExternalReferenceFile(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESBasic_ToolExternalReferenceFile self, Handle_IGESBasic_ExternalReferenceFile ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalReferenceFile
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESBasic.IGESBasic_ToolExternalReferenceFile_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESBasic_ToolExternalReferenceFile self, Handle_IGESBasic_ExternalReferenceFile ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalReferenceFile
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESBasic.IGESBasic_ToolExternalReferenceFile_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESBasic_ToolExternalReferenceFile self, Handle_IGESBasic_ExternalReferenceFile ent, Interface_EntityIterator iter)

        Lists the Entities shared by a ExternalReferenceFile <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalReferenceFile
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.IGESBasic_ToolExternalReferenceFile_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESBasic_ToolExternalReferenceFile self, Handle_IGESBasic_ExternalReferenceFile ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalReferenceFile
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESBasic.IGESBasic_ToolExternalReferenceFile_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESBasic_ToolExternalReferenceFile self, Handle_IGESBasic_ExternalReferenceFile ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalReferenceFile
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESBasic.IGESBasic_ToolExternalReferenceFile_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESBasic_ToolExternalReferenceFile self, Handle_IGESBasic_ExternalReferenceFile entfrom, Handle_IGESBasic_ExternalReferenceFile entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalReferenceFile
        :type entto: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalReferenceFile
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESBasic.IGESBasic_ToolExternalReferenceFile_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESBasic_ToolExternalReferenceFile self, Handle_IGESBasic_ExternalReferenceFile ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalReferenceFile
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESBasic.IGESBasic_ToolExternalReferenceFile_OwnDump(self, *args)

    __swig_destroy__ = _IGESBasic.delete_IGESBasic_ToolExternalReferenceFile
IGESBasic_ToolExternalReferenceFile_swigregister = _IGESBasic.IGESBasic_ToolExternalReferenceFile_swigregister
IGESBasic_ToolExternalReferenceFile_swigregister(IGESBasic_ToolExternalReferenceFile)

class IGESBasic_ToolExternalRefFileName(object):
    """
    Tool to work on a ExternalRefFileName. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESBasic_ToolExternalRefFileName self) -> IGESBasic_ToolExternalRefFileName

        Returns a ToolExternalRefFileName, ready to work


        """
        this = _IGESBasic.new_IGESBasic_ToolExternalRefFileName(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESBasic_ToolExternalRefFileName self, Handle_IGESBasic_ExternalRefFileName ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefFileName
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESBasic.IGESBasic_ToolExternalRefFileName_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESBasic_ToolExternalRefFileName self, Handle_IGESBasic_ExternalRefFileName ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefFileName
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESBasic.IGESBasic_ToolExternalRefFileName_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESBasic_ToolExternalRefFileName self, Handle_IGESBasic_ExternalRefFileName ent, Interface_EntityIterator iter)

        Lists the Entities shared by a ExternalRefFileName <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefFileName
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.IGESBasic_ToolExternalRefFileName_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESBasic_ToolExternalRefFileName self, Handle_IGESBasic_ExternalRefFileName ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefFileName
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESBasic.IGESBasic_ToolExternalRefFileName_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESBasic_ToolExternalRefFileName self, Handle_IGESBasic_ExternalRefFileName ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefFileName
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESBasic.IGESBasic_ToolExternalRefFileName_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESBasic_ToolExternalRefFileName self, Handle_IGESBasic_ExternalRefFileName entfrom, Handle_IGESBasic_ExternalRefFileName entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefFileName
        :type entto: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefFileName
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESBasic.IGESBasic_ToolExternalRefFileName_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESBasic_ToolExternalRefFileName self, Handle_IGESBasic_ExternalRefFileName ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefFileName
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESBasic.IGESBasic_ToolExternalRefFileName_OwnDump(self, *args)

    __swig_destroy__ = _IGESBasic.delete_IGESBasic_ToolExternalRefFileName
IGESBasic_ToolExternalRefFileName_swigregister = _IGESBasic.IGESBasic_ToolExternalRefFileName_swigregister
IGESBasic_ToolExternalRefFileName_swigregister(IGESBasic_ToolExternalRefFileName)

class IGESBasic_ToolExternalRefFileIndex(object):
    """
    Tool to work on a ExternalRefFileIndex. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESBasic_ToolExternalRefFileIndex self) -> IGESBasic_ToolExternalRefFileIndex

        Returns a ToolExternalRefFileIndex, ready to work


        """
        this = _IGESBasic.new_IGESBasic_ToolExternalRefFileIndex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESBasic_ToolExternalRefFileIndex self, Handle_IGESBasic_ExternalRefFileIndex ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefFileIndex
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESBasic.IGESBasic_ToolExternalRefFileIndex_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESBasic_ToolExternalRefFileIndex self, Handle_IGESBasic_ExternalRefFileIndex ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefFileIndex
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESBasic.IGESBasic_ToolExternalRefFileIndex_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESBasic_ToolExternalRefFileIndex self, Handle_IGESBasic_ExternalRefFileIndex ent, Interface_EntityIterator iter)

        Lists the Entities shared by a ExternalRefFileIndex <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefFileIndex
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.IGESBasic_ToolExternalRefFileIndex_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESBasic_ToolExternalRefFileIndex self, Handle_IGESBasic_ExternalRefFileIndex ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefFileIndex
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESBasic.IGESBasic_ToolExternalRefFileIndex_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESBasic_ToolExternalRefFileIndex self, Handle_IGESBasic_ExternalRefFileIndex ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefFileIndex
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESBasic.IGESBasic_ToolExternalRefFileIndex_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESBasic_ToolExternalRefFileIndex self, Handle_IGESBasic_ExternalRefFileIndex entfrom, Handle_IGESBasic_ExternalRefFileIndex entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefFileIndex
        :type entto: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefFileIndex
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESBasic.IGESBasic_ToolExternalRefFileIndex_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESBasic_ToolExternalRefFileIndex self, Handle_IGESBasic_ExternalRefFileIndex ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefFileIndex
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESBasic.IGESBasic_ToolExternalRefFileIndex_OwnDump(self, *args)

    __swig_destroy__ = _IGESBasic.delete_IGESBasic_ToolExternalRefFileIndex
IGESBasic_ToolExternalRefFileIndex_swigregister = _IGESBasic.IGESBasic_ToolExternalRefFileIndex_swigregister
IGESBasic_ToolExternalRefFileIndex_swigregister(IGESBasic_ToolExternalRefFileIndex)

class IGESBasic_SingleParent(IGESData.IGESData_SingleParentEntity):
    """
    defines SingleParent, Type <402> Form <9>
    in package IGESBasic
    It defines a logical structure of one independent
    (parent) entity and one or more subordinate (children)
    entities
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_SingleParent
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_SingleParent(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_SingleParent self) -> IGESBasic_SingleParent

        defines SingleParent, Type <402> Form <9>
        in package IGESBasic
        It defines a logical structure of one independent
        (parent) entity and one or more subordinate (children)
        entities
        """
        this = _IGESBasic.new_IGESBasic_SingleParent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESBasic_SingleParent self, Standard_Integer const nbParentEntities, Handle_IGESData_IGESEntity aParentEntity, Handle_IGESData_HArray1OfIGESEntity allChildren)

        This method is used to set the fields of the class
        SingleParent
        - nbParentEntities : Indicates number of Parents, always = 1
        - aParentEntity    : Used to hold the Parent Entity
        - allChildren      : Used to hold the children

        :type nbParentEntities: int
        :type aParentEntity: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type allChildren: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESBasic.IGESBasic_SingleParent_Init(self, *args)


    def NbParentEntities(self, *args):
        """
        NbParentEntities(IGESBasic_SingleParent self) -> Standard_Integer

        returns the number of Parent Entities, which should be 1

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_SingleParent_NbParentEntities(self, *args)


    def SingleParent(self, *args):
        """
        SingleParent(IGESBasic_SingleParent self) -> Handle_IGESData_IGESEntity

        Returns the Parent Entity (inherited method)

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.IGESBasic_SingleParent_SingleParent(self, *args)


    def NbChildren(self, *args):
        """
        NbChildren(IGESBasic_SingleParent self) -> Standard_Integer

        returns the number of children of the Parent

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_SingleParent_NbChildren(self, *args)


    def Child(self, *args):
        """
        Child(IGESBasic_SingleParent self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the specific child as indicated by Index
        raises exception if Index <= 0 or Index > NbChildren()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.IGESBasic_SingleParent_Child(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_SingleParent_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_SingleParent_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_SingleParent_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_SingleParent
IGESBasic_SingleParent_swigregister = _IGESBasic.IGESBasic_SingleParent_swigregister
IGESBasic_SingleParent_swigregister(IGESBasic_SingleParent)

def IGESBasic_SingleParent_get_type_name(*args):
    """
    IGESBasic_SingleParent_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_SingleParent_get_type_name(*args)

def IGESBasic_SingleParent_get_type_descriptor(*args):
    """
    IGESBasic_SingleParent_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_SingleParent_get_type_descriptor(*args)

class IGESBasic_ToolAssocGroupType(object):
    """
    Tool to work on a AssocGroupType. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESBasic_ToolAssocGroupType self) -> IGESBasic_ToolAssocGroupType

        Returns a ToolAssocGroupType, ready to work


        """
        this = _IGESBasic.new_IGESBasic_ToolAssocGroupType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESBasic_ToolAssocGroupType self, Handle_IGESBasic_AssocGroupType ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_AssocGroupType
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESBasic.IGESBasic_ToolAssocGroupType_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESBasic_ToolAssocGroupType self, Handle_IGESBasic_AssocGroupType ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_AssocGroupType
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESBasic.IGESBasic_ToolAssocGroupType_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESBasic_ToolAssocGroupType self, Handle_IGESBasic_AssocGroupType ent, Interface_EntityIterator iter)

        Lists the Entities shared by a AssocGroupType <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_AssocGroupType
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.IGESBasic_ToolAssocGroupType_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESBasic_ToolAssocGroupType self, Handle_IGESBasic_AssocGroupType ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a AssocGroupType
        (NbData forced to 2)

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_AssocGroupType
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.IGESBasic_ToolAssocGroupType_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESBasic_ToolAssocGroupType self, Handle_IGESBasic_AssocGroupType ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_AssocGroupType
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESBasic.IGESBasic_ToolAssocGroupType_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESBasic_ToolAssocGroupType self, Handle_IGESBasic_AssocGroupType ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_AssocGroupType
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESBasic.IGESBasic_ToolAssocGroupType_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESBasic_ToolAssocGroupType self, Handle_IGESBasic_AssocGroupType entfrom, Handle_IGESBasic_AssocGroupType entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESBasic.Handle_IGESBasic_AssocGroupType
        :type entto: OCC.wrapper.IGESBasic.Handle_IGESBasic_AssocGroupType
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESBasic.IGESBasic_ToolAssocGroupType_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESBasic_ToolAssocGroupType self, Handle_IGESBasic_AssocGroupType ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_AssocGroupType
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESBasic.IGESBasic_ToolAssocGroupType_OwnDump(self, *args)

    __swig_destroy__ = _IGESBasic.delete_IGESBasic_ToolAssocGroupType
IGESBasic_ToolAssocGroupType_swigregister = _IGESBasic.IGESBasic_ToolAssocGroupType_swigregister
IGESBasic_ToolAssocGroupType_swigregister(IGESBasic_ToolAssocGroupType)

class IGESBasic_HArray1OfHArray1OfReal(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_HArray1OfHArray1OfReal
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_HArray1OfHArray1OfReal(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_HArray1OfHArray1OfReal self, Standard_Integer const low, Standard_Integer const up) -> IGESBasic_HArray1OfHArray1OfReal

        :type low: int
        :type up: int

        """
        this = _IGESBasic.new_IGESBasic_HArray1OfHArray1OfReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Lower(self, *args):
        """
        Lower(IGESBasic_HArray1OfHArray1OfReal self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfReal_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(IGESBasic_HArray1OfHArray1OfReal self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfReal_Upper(self, *args)


    def Length(self, *args):
        """
        Length(IGESBasic_HArray1OfHArray1OfReal self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfReal_Length(self, *args)


    def SetValue(self, *args):
        """
        SetValue(IGESBasic_HArray1OfHArray1OfReal self, Standard_Integer const num, Handle_TColStd_HArray1OfReal val)

        :type num: int
        :type val: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfReal_SetValue(self, *args)


    def Value(self, *args):
        """
        Value(IGESBasic_HArray1OfHArray1OfReal self, Standard_Integer const num) -> Handle_TColStd_HArray1OfReal

        :type num: int
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfReal_Value(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfReal_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfReal_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_HArray1OfHArray1OfReal_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_HArray1OfHArray1OfReal
IGESBasic_HArray1OfHArray1OfReal_swigregister = _IGESBasic.IGESBasic_HArray1OfHArray1OfReal_swigregister
IGESBasic_HArray1OfHArray1OfReal_swigregister(IGESBasic_HArray1OfHArray1OfReal)

def IGESBasic_HArray1OfHArray1OfReal_get_type_name(*args):
    """
    IGESBasic_HArray1OfHArray1OfReal_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_HArray1OfHArray1OfReal_get_type_name(*args)

def IGESBasic_HArray1OfHArray1OfReal_get_type_descriptor(*args):
    """
    IGESBasic_HArray1OfHArray1OfReal_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_HArray1OfHArray1OfReal_get_type_descriptor(*args)

class IGESBasic_ToolName(object):
    """
    Tool to work on a Name. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESBasic_ToolName self) -> IGESBasic_ToolName

        Returns a ToolName, ready to work


        """
        this = _IGESBasic.new_IGESBasic_ToolName(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESBasic_ToolName self, Handle_IGESBasic_Name ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_Name
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESBasic.IGESBasic_ToolName_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESBasic_ToolName self, Handle_IGESBasic_Name ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_Name
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESBasic.IGESBasic_ToolName_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESBasic_ToolName self, Handle_IGESBasic_Name ent, Interface_EntityIterator iter)

        Lists the Entities shared by a Name <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_Name
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.IGESBasic_ToolName_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESBasic_ToolName self, Handle_IGESBasic_Name ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a Name
        (NbPropertyValues forced to 1)

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_Name
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.IGESBasic_ToolName_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESBasic_ToolName self, Handle_IGESBasic_Name ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_Name
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESBasic.IGESBasic_ToolName_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESBasic_ToolName self, Handle_IGESBasic_Name ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_Name
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESBasic.IGESBasic_ToolName_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESBasic_ToolName self, Handle_IGESBasic_Name entfrom, Handle_IGESBasic_Name entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESBasic.Handle_IGESBasic_Name
        :type entto: OCC.wrapper.IGESBasic.Handle_IGESBasic_Name
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESBasic.IGESBasic_ToolName_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESBasic_ToolName self, Handle_IGESBasic_Name ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_Name
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESBasic.IGESBasic_ToolName_OwnDump(self, *args)

    __swig_destroy__ = _IGESBasic.delete_IGESBasic_ToolName
IGESBasic_ToolName_swigregister = _IGESBasic.IGESBasic_ToolName_swigregister
IGESBasic_ToolName_swigregister(IGESBasic_ToolName)

class IGESBasic_HArray2OfHArray1OfReal(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_HArray2OfHArray1OfReal
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_HArray2OfHArray1OfReal(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_HArray2OfHArray1OfReal self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp) -> IGESBasic_HArray2OfHArray1OfReal
        __init__(IGESBasic_HArray2OfHArray1OfReal self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp, Handle_TColStd_HArray1OfReal theValue) -> IGESBasic_HArray2OfHArray1OfReal
        __init__(IGESBasic_HArray2OfHArray1OfReal self, NCollection_Array2_Handle_TColStd_HArray1OfReal theOther) -> IGESBasic_HArray2OfHArray1OfReal

        :type theOther: OCC.wrapper.IGESBasic.IGESBasic_Array2OfHArray1OfReal

        """
        this = _IGESBasic.new_IGESBasic_HArray2OfHArray1OfReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.IGESBasic.IGESBasic_Array2OfHArray1OfReal

        """
        res = _IGESBasic.IGESBasic_HArray2OfHArray1OfReal_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(IGESBasic_HArray2OfHArray1OfReal self) -> NCollection_Array2_Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.IGESBasic.IGESBasic_Array2OfHArray1OfReal

        """
        return _IGESBasic.IGESBasic_HArray2OfHArray1OfReal_ChangeArray2(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_HArray2OfHArray1OfReal_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_HArray2OfHArray1OfReal_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_HArray2OfHArray1OfReal_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_HArray2OfHArray1OfReal
IGESBasic_HArray2OfHArray1OfReal_swigregister = _IGESBasic.IGESBasic_HArray2OfHArray1OfReal_swigregister
IGESBasic_HArray2OfHArray1OfReal_swigregister(IGESBasic_HArray2OfHArray1OfReal)

def IGESBasic_HArray2OfHArray1OfReal_get_type_name(*args):
    """
    IGESBasic_HArray2OfHArray1OfReal_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_HArray2OfHArray1OfReal_get_type_name(*args)

def IGESBasic_HArray2OfHArray1OfReal_get_type_descriptor(*args):
    """
    IGESBasic_HArray2OfHArray1OfReal_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_HArray2OfHArray1OfReal_get_type_descriptor(*args)

class IGESBasic_HArray1OfHArray1OfXYZ(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_HArray1OfHArray1OfXYZ
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_HArray1OfHArray1OfXYZ(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_HArray1OfHArray1OfXYZ self, Standard_Integer const low, Standard_Integer const up) -> IGESBasic_HArray1OfHArray1OfXYZ

        :type low: int
        :type up: int

        """
        this = _IGESBasic.new_IGESBasic_HArray1OfHArray1OfXYZ(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Lower(self, *args):
        """
        Lower(IGESBasic_HArray1OfHArray1OfXYZ self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfXYZ_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(IGESBasic_HArray1OfHArray1OfXYZ self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfXYZ_Upper(self, *args)


    def Length(self, *args):
        """
        Length(IGESBasic_HArray1OfHArray1OfXYZ self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfXYZ_Length(self, *args)


    def SetValue(self, *args):
        """
        SetValue(IGESBasic_HArray1OfHArray1OfXYZ self, Standard_Integer const num, Handle_TColgp_HArray1OfXYZ val)

        :type num: int
        :type val: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXYZ

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfXYZ_SetValue(self, *args)


    def Value(self, *args):
        """
        Value(IGESBasic_HArray1OfHArray1OfXYZ self, Standard_Integer const num) -> Handle_TColgp_HArray1OfXYZ

        :type num: int
        :rtype: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXYZ

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfXYZ_Value(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfXYZ_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfXYZ_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_HArray1OfHArray1OfXYZ_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_HArray1OfHArray1OfXYZ
IGESBasic_HArray1OfHArray1OfXYZ_swigregister = _IGESBasic.IGESBasic_HArray1OfHArray1OfXYZ_swigregister
IGESBasic_HArray1OfHArray1OfXYZ_swigregister(IGESBasic_HArray1OfHArray1OfXYZ)

def IGESBasic_HArray1OfHArray1OfXYZ_get_type_name(*args):
    """
    IGESBasic_HArray1OfHArray1OfXYZ_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_HArray1OfHArray1OfXYZ_get_type_name(*args)

def IGESBasic_HArray1OfHArray1OfXYZ_get_type_descriptor(*args):
    """
    IGESBasic_HArray1OfHArray1OfXYZ_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_HArray1OfHArray1OfXYZ_get_type_descriptor(*args)

class Handle_IGESBasic_ExternalRefFileName(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_ExternalRefFileName self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_ExternalRefFileName self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_ExternalRefFileName self, IGESBasic_ExternalRefFileName thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_ExternalRefFileName self, Handle_IGESBasic_ExternalRefFileName theHandle) -> Handle_IGESBasic_ExternalRefFileName
        assign(Handle_IGESBasic_ExternalRefFileName self, IGESBasic_ExternalRefFileName thePtr) -> Handle_IGESBasic_ExternalRefFileName
        assign(Handle_IGESBasic_ExternalRefFileName self, Handle_IGESBasic_ExternalRefFileName theHandle) -> Handle_IGESBasic_ExternalRefFileName

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_ExternalRefFileName self) -> IGESBasic_ExternalRefFileName

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_ExternalRefFileName self) -> IGESBasic_ExternalRefFileName

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_ExternalRefFileName self) -> IGESBasic_ExternalRefFileName

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_ExternalRefFileName___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_ExternalRefFileName(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_ExternalRefFileName_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_ExternalRefFileName

    def Init(self, *args):
        """
        Init(Handle_IGESBasic_ExternalRefFileName self, Handle_TCollection_HAsciiString aFileIdent, Handle_TCollection_HAsciiString anExtName)

        This method is used to set the fields of the class
        ExternalRefFileName
        - aFileIdent : External Reference File Identifier
        - anExtName  : External Reference Entity Symbolic Name

        :type aFileIdent: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type anExtName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_Init(self, *args)


    def SetForEntity(self, *args):
        """
        SetForEntity(Handle_IGESBasic_ExternalRefFileName self, Standard_Boolean const mode)

        Changes FormNumber to be 2 if <mode> is True (For Entity)
        or 0 if <mode> is False (For Definition)

        :type mode: bool

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_SetForEntity(self, *args)


    def FileId(self, *args):
        """
        FileId(Handle_IGESBasic_ExternalRefFileName self) -> Handle_TCollection_HAsciiString

        returns External Reference File Identifier

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_FileId(self, *args)


    def ReferenceName(self, *args):
        """
        ReferenceName(Handle_IGESBasic_ExternalRefFileName self) -> Handle_TCollection_HAsciiString

        returns External Reference Entity Symbolic Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_ReferenceName(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_ExternalRefFileName self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_ExternalRefFileName_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_ExternalRefFileName_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESBasic_ExternalRefFileName self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESBasic_ExternalRefFileName self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESBasic_ExternalRefFileName self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESBasic_ExternalRefFileName self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESBasic_ExternalRefFileName self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESBasic_ExternalRefFileName self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESBasic_ExternalRefFileName self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESBasic_ExternalRefFileName self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESBasic_ExternalRefFileName self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESBasic_ExternalRefFileName self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESBasic_ExternalRefFileName self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESBasic_ExternalRefFileName self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESBasic_ExternalRefFileName self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESBasic_ExternalRefFileName self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESBasic_ExternalRefFileName self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESBasic_ExternalRefFileName self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESBasic_ExternalRefFileName self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESBasic_ExternalRefFileName self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESBasic_ExternalRefFileName self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESBasic_ExternalRefFileName self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESBasic_ExternalRefFileName self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESBasic_ExternalRefFileName self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESBasic_ExternalRefFileName self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESBasic_ExternalRefFileName self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESBasic_ExternalRefFileName self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESBasic_ExternalRefFileName self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESBasic_ExternalRefFileName self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESBasic_ExternalRefFileName self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESBasic_ExternalRefFileName self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESBasic_ExternalRefFileName self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESBasic_ExternalRefFileName self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESBasic_ExternalRefFileName self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESBasic_ExternalRefFileName self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESBasic_ExternalRefFileName self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESBasic_ExternalRefFileName self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESBasic_ExternalRefFileName self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESBasic_ExternalRefFileName self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESBasic_ExternalRefFileName self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESBasic_ExternalRefFileName self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESBasic_ExternalRefFileName self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESBasic_ExternalRefFileName self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESBasic_ExternalRefFileName self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_ExternalRefFileName self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_ExternalRefFileName self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_ExternalRefFileName self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_ExternalRefFileName self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_ExternalRefFileName self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_ExternalRefFileName self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_ExternalRefFileName self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_DecrementRefCounter(self, *args)

Handle_IGESBasic_ExternalRefFileName_swigregister = _IGESBasic.Handle_IGESBasic_ExternalRefFileName_swigregister
Handle_IGESBasic_ExternalRefFileName_swigregister(Handle_IGESBasic_ExternalRefFileName)

def Handle_IGESBasic_ExternalRefFileName_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_ExternalRefFileName_DownCast(thing)
Handle_IGESBasic_ExternalRefFileName_DownCast = _IGESBasic.Handle_IGESBasic_ExternalRefFileName_DownCast

class IGESBasic_ToolGroupWithoutBackP(object):
    """
    Tool to work on a GroupWithoutBackP. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESBasic_ToolGroupWithoutBackP self) -> IGESBasic_ToolGroupWithoutBackP

        Returns a ToolGroupWithoutBackP, ready to work


        """
        this = _IGESBasic.new_IGESBasic_ToolGroupWithoutBackP(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESBasic_ToolGroupWithoutBackP self, Handle_IGESBasic_GroupWithoutBackP ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_GroupWithoutBackP
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESBasic.IGESBasic_ToolGroupWithoutBackP_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESBasic_ToolGroupWithoutBackP self, Handle_IGESBasic_GroupWithoutBackP ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_GroupWithoutBackP
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESBasic.IGESBasic_ToolGroupWithoutBackP_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESBasic_ToolGroupWithoutBackP self, Handle_IGESBasic_GroupWithoutBackP ent, Interface_EntityIterator iter)

        Lists the Entities shared by a GroupWithoutBackP <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_GroupWithoutBackP
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.IGESBasic_ToolGroupWithoutBackP_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESBasic_ToolGroupWithoutBackP self, Handle_IGESBasic_GroupWithoutBackP ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a GroupWithoutBackP
        (Null Elements are removed from list)

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_GroupWithoutBackP
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.IGESBasic_ToolGroupWithoutBackP_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESBasic_ToolGroupWithoutBackP self, Handle_IGESBasic_GroupWithoutBackP ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_GroupWithoutBackP
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESBasic.IGESBasic_ToolGroupWithoutBackP_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESBasic_ToolGroupWithoutBackP self, Handle_IGESBasic_GroupWithoutBackP ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_GroupWithoutBackP
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESBasic.IGESBasic_ToolGroupWithoutBackP_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESBasic_ToolGroupWithoutBackP self, Handle_IGESBasic_GroupWithoutBackP entfrom, Handle_IGESBasic_GroupWithoutBackP entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESBasic.Handle_IGESBasic_GroupWithoutBackP
        :type entto: OCC.wrapper.IGESBasic.Handle_IGESBasic_GroupWithoutBackP
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESBasic.IGESBasic_ToolGroupWithoutBackP_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESBasic_ToolGroupWithoutBackP self, Handle_IGESBasic_GroupWithoutBackP ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_GroupWithoutBackP
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESBasic.IGESBasic_ToolGroupWithoutBackP_OwnDump(self, *args)

    __swig_destroy__ = _IGESBasic.delete_IGESBasic_ToolGroupWithoutBackP
IGESBasic_ToolGroupWithoutBackP_swigregister = _IGESBasic.IGESBasic_ToolGroupWithoutBackP_swigregister
IGESBasic_ToolGroupWithoutBackP_swigregister(IGESBasic_ToolGroupWithoutBackP)

class IGESBasic_HArray1OfHArray1OfXY(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_HArray1OfHArray1OfXY
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_HArray1OfHArray1OfXY(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_HArray1OfHArray1OfXY self, Standard_Integer const low, Standard_Integer const up) -> IGESBasic_HArray1OfHArray1OfXY

        :type low: int
        :type up: int

        """
        this = _IGESBasic.new_IGESBasic_HArray1OfHArray1OfXY(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Lower(self, *args):
        """
        Lower(IGESBasic_HArray1OfHArray1OfXY self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfXY_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(IGESBasic_HArray1OfHArray1OfXY self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfXY_Upper(self, *args)


    def Length(self, *args):
        """
        Length(IGESBasic_HArray1OfHArray1OfXY self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfXY_Length(self, *args)


    def SetValue(self, *args):
        """
        SetValue(IGESBasic_HArray1OfHArray1OfXY self, Standard_Integer const num, Handle_TColgp_HArray1OfXY val)

        :type num: int
        :type val: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXY

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfXY_SetValue(self, *args)


    def Value(self, *args):
        """
        Value(IGESBasic_HArray1OfHArray1OfXY self, Standard_Integer const num) -> Handle_TColgp_HArray1OfXY

        :type num: int
        :rtype: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXY

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfXY_Value(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfXY_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfXY_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_HArray1OfHArray1OfXY_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_HArray1OfHArray1OfXY
IGESBasic_HArray1OfHArray1OfXY_swigregister = _IGESBasic.IGESBasic_HArray1OfHArray1OfXY_swigregister
IGESBasic_HArray1OfHArray1OfXY_swigregister(IGESBasic_HArray1OfHArray1OfXY)

def IGESBasic_HArray1OfHArray1OfXY_get_type_name(*args):
    """
    IGESBasic_HArray1OfHArray1OfXY_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_HArray1OfHArray1OfXY_get_type_name(*args)

def IGESBasic_HArray1OfHArray1OfXY_get_type_descriptor(*args):
    """
    IGESBasic_HArray1OfHArray1OfXY_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_HArray1OfHArray1OfXY_get_type_descriptor(*args)

class IGESBasic_ToolOrderedGroup(object):
    """
    Tool to work on a OrderedGroup. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESBasic_ToolOrderedGroup self) -> IGESBasic_ToolOrderedGroup

        Returns a ToolOrderedGroup, ready to work


        """
        this = _IGESBasic.new_IGESBasic_ToolOrderedGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESBasic_ToolOrderedGroup self, Handle_IGESBasic_OrderedGroup ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_OrderedGroup
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESBasic.IGESBasic_ToolOrderedGroup_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESBasic_ToolOrderedGroup self, Handle_IGESBasic_OrderedGroup ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_OrderedGroup
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESBasic.IGESBasic_ToolOrderedGroup_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESBasic_ToolOrderedGroup self, Handle_IGESBasic_OrderedGroup ent, Interface_EntityIterator iter)

        Lists the Entities shared by a OrderedGroup <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_OrderedGroup
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.IGESBasic_ToolOrderedGroup_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESBasic_ToolOrderedGroup self, Handle_IGESBasic_OrderedGroup ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on an OrderedGroup
        (Null Elements are removed from list)

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_OrderedGroup
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.IGESBasic_ToolOrderedGroup_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESBasic_ToolOrderedGroup self, Handle_IGESBasic_OrderedGroup ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_OrderedGroup
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESBasic.IGESBasic_ToolOrderedGroup_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESBasic_ToolOrderedGroup self, Handle_IGESBasic_OrderedGroup ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_OrderedGroup
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESBasic.IGESBasic_ToolOrderedGroup_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESBasic_ToolOrderedGroup self, Handle_IGESBasic_OrderedGroup entfrom, Handle_IGESBasic_OrderedGroup entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESBasic.Handle_IGESBasic_OrderedGroup
        :type entto: OCC.wrapper.IGESBasic.Handle_IGESBasic_OrderedGroup
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESBasic.IGESBasic_ToolOrderedGroup_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESBasic_ToolOrderedGroup self, Handle_IGESBasic_OrderedGroup ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_OrderedGroup
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESBasic.IGESBasic_ToolOrderedGroup_OwnDump(self, *args)

    __swig_destroy__ = _IGESBasic.delete_IGESBasic_ToolOrderedGroup
IGESBasic_ToolOrderedGroup_swigregister = _IGESBasic.IGESBasic_ToolOrderedGroup_swigregister
IGESBasic_ToolOrderedGroup_swigregister(IGESBasic_ToolOrderedGroup)

class Handle_IGESBasic_ExternalRefLibName(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_ExternalRefLibName self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_ExternalRefLibName self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_ExternalRefLibName self, IGESBasic_ExternalRefLibName thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_ExternalRefLibName self, Handle_IGESBasic_ExternalRefLibName theHandle) -> Handle_IGESBasic_ExternalRefLibName
        assign(Handle_IGESBasic_ExternalRefLibName self, IGESBasic_ExternalRefLibName thePtr) -> Handle_IGESBasic_ExternalRefLibName
        assign(Handle_IGESBasic_ExternalRefLibName self, Handle_IGESBasic_ExternalRefLibName theHandle) -> Handle_IGESBasic_ExternalRefLibName

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_ExternalRefLibName self) -> IGESBasic_ExternalRefLibName

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_ExternalRefLibName self) -> IGESBasic_ExternalRefLibName

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_ExternalRefLibName self) -> IGESBasic_ExternalRefLibName

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_ExternalRefLibName___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_ExternalRefLibName(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_ExternalRefLibName_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_ExternalRefLibName

    def Init(self, *args):
        """
        Init(Handle_IGESBasic_ExternalRefLibName self, Handle_TCollection_HAsciiString aLibName, Handle_TCollection_HAsciiString anExtName)

        This method is used to set the fields of the class
        ExternalRefLibName
        - aLibName  : Name of library in which ExtName resides
        - anExtName : External Reference Entity Symbolic Name

        :type aLibName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type anExtName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_Init(self, *args)


    def LibraryName(self, *args):
        """
        LibraryName(Handle_IGESBasic_ExternalRefLibName self) -> Handle_TCollection_HAsciiString

        returns name of library in which External Reference Entity
        Symbolic Name resides

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_LibraryName(self, *args)


    def ReferenceName(self, *args):
        """
        ReferenceName(Handle_IGESBasic_ExternalRefLibName self) -> Handle_TCollection_HAsciiString

        returns External Reference Entity Symbolic Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_ReferenceName(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_ExternalRefLibName self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_ExternalRefLibName_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_ExternalRefLibName_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESBasic_ExternalRefLibName self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESBasic_ExternalRefLibName self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESBasic_ExternalRefLibName self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESBasic_ExternalRefLibName self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESBasic_ExternalRefLibName self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESBasic_ExternalRefLibName self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESBasic_ExternalRefLibName self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESBasic_ExternalRefLibName self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESBasic_ExternalRefLibName self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESBasic_ExternalRefLibName self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESBasic_ExternalRefLibName self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESBasic_ExternalRefLibName self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESBasic_ExternalRefLibName self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESBasic_ExternalRefLibName self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESBasic_ExternalRefLibName self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESBasic_ExternalRefLibName self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESBasic_ExternalRefLibName self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESBasic_ExternalRefLibName self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESBasic_ExternalRefLibName self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESBasic_ExternalRefLibName self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESBasic_ExternalRefLibName self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESBasic_ExternalRefLibName self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESBasic_ExternalRefLibName self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESBasic_ExternalRefLibName self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESBasic_ExternalRefLibName self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESBasic_ExternalRefLibName self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESBasic_ExternalRefLibName self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESBasic_ExternalRefLibName self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESBasic_ExternalRefLibName self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESBasic_ExternalRefLibName self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESBasic_ExternalRefLibName self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESBasic_ExternalRefLibName self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESBasic_ExternalRefLibName self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESBasic_ExternalRefLibName self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESBasic_ExternalRefLibName self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESBasic_ExternalRefLibName self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESBasic_ExternalRefLibName self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESBasic_ExternalRefLibName self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESBasic_ExternalRefLibName self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESBasic_ExternalRefLibName self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESBasic_ExternalRefLibName self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESBasic_ExternalRefLibName self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_ExternalRefLibName self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_ExternalRefLibName self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_ExternalRefLibName self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_ExternalRefLibName self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_ExternalRefLibName self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_ExternalRefLibName self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_ExternalRefLibName self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_DecrementRefCounter(self, *args)

Handle_IGESBasic_ExternalRefLibName_swigregister = _IGESBasic.Handle_IGESBasic_ExternalRefLibName_swigregister
Handle_IGESBasic_ExternalRefLibName_swigregister(Handle_IGESBasic_ExternalRefLibName)

def Handle_IGESBasic_ExternalRefLibName_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_ExternalRefLibName_DownCast(thing)
Handle_IGESBasic_ExternalRefLibName_DownCast = _IGESBasic.Handle_IGESBasic_ExternalRefLibName_DownCast

class NCollection_Array2_Handle_TColStd_HArray1OfReal(object):
    """
    Purpose:   The class Array2 represents bi-dimensional arrays 
    of fixed size known at run time. 
    The ranges of indices are user defined.

    Warning:   Programs clients of such class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.LowerRow(); i <= A.UpperRow(); i++)
    for (j = A.LowerCol(); j <= A.UpperCol(); j++)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Purpose:   The class Array2 represents bi-dimensional arrays 
        of fixed size known at run time. 
        The ranges of indices are user defined.

        Warning:   Programs clients of such class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.LowerRow(); i <= A.UpperRow(); i++)
        for (j = A.LowerCol(); j <= A.UpperCol(); j++)
        """
        this = _IGESBasic.new_NCollection_Array2_Handle_TColStd_HArray1OfReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array2_Handle_TColStd_HArray1OfReal self, Handle_TColStd_HArray1OfReal theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _IGESBasic.NCollection_Array2_Handle_TColStd_HArray1OfReal_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array2_Handle_TColStd_HArray1OfReal self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.NCollection_Array2_Handle_TColStd_HArray1OfReal_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array2_Handle_TColStd_HArray1OfReal self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.NCollection_Array2_Handle_TColStd_HArray1OfReal_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(NCollection_Array2_Handle_TColStd_HArray1OfReal self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.NCollection_Array2_Handle_TColStd_HArray1OfReal_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(NCollection_Array2_Handle_TColStd_HArray1OfReal self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.NCollection_Array2_Handle_TColStd_HArray1OfReal_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(NCollection_Array2_Handle_TColStd_HArray1OfReal self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.NCollection_Array2_Handle_TColStd_HArray1OfReal_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(NCollection_Array2_Handle_TColStd_HArray1OfReal self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.NCollection_Array2_Handle_TColStd_HArray1OfReal_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(NCollection_Array2_Handle_TColStd_HArray1OfReal self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.NCollection_Array2_Handle_TColStd_HArray1OfReal_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(NCollection_Array2_Handle_TColStd_HArray1OfReal self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.NCollection_Array2_Handle_TColStd_HArray1OfReal_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array2_Handle_TColStd_HArray1OfReal self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.NCollection_Array2_Handle_TColStd_HArray1OfReal_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array2_Handle_TColStd_HArray1OfReal self, NCollection_Array2_Handle_TColStd_HArray1OfReal theOther) -> NCollection_Array2_Handle_TColStd_HArray1OfReal

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _IGESBasic.NCollection_Array2_Handle_TColStd_HArray1OfReal_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array2_Handle_TColStd_HArray1OfReal self, NCollection_Array2_Handle_TColStd_HArray1OfReal theOther) -> NCollection_Array2_Handle_TColStd_HArray1OfReal

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _IGESBasic.NCollection_Array2_Handle_TColStd_HArray1OfReal_assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _IGESBasic.NCollection_Array2_Handle_TColStd_HArray1OfReal_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array2_Handle_TColStd_HArray1OfReal self, Standard_Integer const theRow, Standard_Integer const theCol) -> Handle_TColStd_HArray1OfReal

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _IGESBasic.NCollection_Array2_Handle_TColStd_HArray1OfReal_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _IGESBasic.NCollection_Array2_Handle_TColStd_HArray1OfReal___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array2_Handle_TColStd_HArray1OfReal self, Standard_Integer const theRow, Standard_Integer const theCol, Handle_TColStd_HArray1OfReal theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _IGESBasic.NCollection_Array2_Handle_TColStd_HArray1OfReal_SetValue(self, *args)

    __swig_destroy__ = _IGESBasic.delete_NCollection_Array2_Handle_TColStd_HArray1OfReal
NCollection_Array2_Handle_TColStd_HArray1OfReal_swigregister = _IGESBasic.NCollection_Array2_Handle_TColStd_HArray1OfReal_swigregister
NCollection_Array2_Handle_TColStd_HArray1OfReal_swigregister(NCollection_Array2_Handle_TColStd_HArray1OfReal)


try:
	IGESBasic_Array2OfHArray1OfReal = NCollection_Array2_Handle_TColStd_HArray1OfReal
except NameError:
	pass # does not exist, probably ignored

class Handle_IGESBasic_HArray1OfLineFontEntity(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_HArray1OfLineFontEntity self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_HArray1OfLineFontEntity self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_HArray1OfLineFontEntity self, IGESBasic_HArray1OfLineFontEntity thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_HArray1OfLineFontEntity self, Handle_IGESBasic_HArray1OfLineFontEntity theHandle) -> Handle_IGESBasic_HArray1OfLineFontEntity
        assign(Handle_IGESBasic_HArray1OfLineFontEntity self, IGESBasic_HArray1OfLineFontEntity thePtr) -> Handle_IGESBasic_HArray1OfLineFontEntity
        assign(Handle_IGESBasic_HArray1OfLineFontEntity self, Handle_IGESBasic_HArray1OfLineFontEntity theHandle) -> Handle_IGESBasic_HArray1OfLineFontEntity

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_HArray1OfLineFontEntity self) -> IGESBasic_HArray1OfLineFontEntity

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_HArray1OfLineFontEntity self) -> IGESBasic_HArray1OfLineFontEntity

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_HArray1OfLineFontEntity self) -> IGESBasic_HArray1OfLineFontEntity

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_HArray1OfLineFontEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_HArray1OfLineFontEntity

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.IGESBasic.IGESBasic_Array1OfLineFontEntity

        """
        res = _IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_IGESBasic_HArray1OfLineFontEntity self) -> NCollection_Array1_Handle_IGESData_LineFontEntity

        :rtype: OCC.wrapper.IGESBasic.IGESBasic_Array1OfLineFontEntity

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_HArray1OfLineFontEntity self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_HArray1OfLineFontEntity self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_HArray1OfLineFontEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_HArray1OfLineFontEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_HArray1OfLineFontEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_HArray1OfLineFontEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_HArray1OfLineFontEntity self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_HArray1OfLineFontEntity self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_HArray1OfLineFontEntity self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_HArray1OfLineFontEntity self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity_DecrementRefCounter(self, *args)

Handle_IGESBasic_HArray1OfLineFontEntity_swigregister = _IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity_swigregister
Handle_IGESBasic_HArray1OfLineFontEntity_swigregister(Handle_IGESBasic_HArray1OfLineFontEntity)

def Handle_IGESBasic_HArray1OfLineFontEntity_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity_DownCast(thing)
Handle_IGESBasic_HArray1OfLineFontEntity_DownCast = _IGESBasic.Handle_IGESBasic_HArray1OfLineFontEntity_DownCast

class Handle_IGESBasic_SubfigureDef(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_SubfigureDef self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_SubfigureDef self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_SubfigureDef self, IGESBasic_SubfigureDef thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_SubfigureDef self, Handle_IGESBasic_SubfigureDef theHandle) -> Handle_IGESBasic_SubfigureDef
        assign(Handle_IGESBasic_SubfigureDef self, IGESBasic_SubfigureDef thePtr) -> Handle_IGESBasic_SubfigureDef
        assign(Handle_IGESBasic_SubfigureDef self, Handle_IGESBasic_SubfigureDef theHandle) -> Handle_IGESBasic_SubfigureDef

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_SubfigureDef self) -> IGESBasic_SubfigureDef

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_SubfigureDef self) -> IGESBasic_SubfigureDef

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_SubfigureDef self) -> IGESBasic_SubfigureDef

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_SubfigureDef___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_SubfigureDef___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_SubfigureDef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_SubfigureDef_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_SubfigureDef

    def Init(self, *args):
        """
        Init(Handle_IGESBasic_SubfigureDef self, Standard_Integer const aDepth, Handle_TCollection_HAsciiString aName, Handle_IGESData_HArray1OfIGESEntity allAssocEntities)

        This method is used to set the fields of the class
        SubfigureDef
        - aDepth           : It indicates the amount of nesting
        - aName            : the subfigure name
        - allAssocEntities : the associated entities

        :type aDepth: int
        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type allAssocEntities: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_Init(self, *args)


    def Depth(self, *args):
        """
        Depth(Handle_IGESBasic_SubfigureDef self) -> Standard_Integer

        returns depth of the Subfigure
        if theDepth = 0 - No reference to any subfigure instance.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_Depth(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESBasic_SubfigureDef self) -> Handle_TCollection_HAsciiString

        returns the name of Subfigure

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_Name(self, *args)


    def NbEntities(self, *args):
        """
        NbEntities(Handle_IGESBasic_SubfigureDef self) -> Standard_Integer

        returns number of entities. Is greater than or equal to zero.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_NbEntities(self, *args)


    def AssociatedEntity(self, *args):
        """
        AssociatedEntity(Handle_IGESBasic_SubfigureDef self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the specific entity as indicated by Index
        raises exception if Index <= 0 or Index > NbEntities()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_AssociatedEntity(self, *args)


    def Value(self, *args):
        """
        Value(Handle_IGESBasic_SubfigureDef self, Standard_Integer const Index) -> Handle_Standard_Transient

        returns the specific entity as indicated by Index
        raises exception if Index <= 0 or Index > NbEntities()

        :type Index: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_Value(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_SubfigureDef self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_SubfigureDef_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_SubfigureDef_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESBasic_SubfigureDef self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESBasic_SubfigureDef self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESBasic_SubfigureDef self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESBasic_SubfigureDef self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESBasic_SubfigureDef self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESBasic_SubfigureDef self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESBasic_SubfigureDef self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESBasic_SubfigureDef self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESBasic_SubfigureDef self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESBasic_SubfigureDef self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESBasic_SubfigureDef self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESBasic_SubfigureDef self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESBasic_SubfigureDef self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESBasic_SubfigureDef self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESBasic_SubfigureDef self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESBasic_SubfigureDef self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESBasic_SubfigureDef self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESBasic_SubfigureDef self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESBasic_SubfigureDef self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESBasic_SubfigureDef self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESBasic_SubfigureDef self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESBasic_SubfigureDef self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESBasic_SubfigureDef self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESBasic_SubfigureDef self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESBasic_SubfigureDef self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESBasic_SubfigureDef self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESBasic_SubfigureDef self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESBasic_SubfigureDef self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESBasic_SubfigureDef self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESBasic_SubfigureDef self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESBasic_SubfigureDef self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESBasic_SubfigureDef self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESBasic_SubfigureDef self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESBasic_SubfigureDef self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESBasic_SubfigureDef self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESBasic_SubfigureDef self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESBasic_SubfigureDef self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESBasic_SubfigureDef self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESBasic_SubfigureDef self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESBasic_SubfigureDef self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESBasic_SubfigureDef self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESBasic_SubfigureDef self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESBasic_SubfigureDef self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESBasic_SubfigureDef self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESBasic_SubfigureDef self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESBasic_SubfigureDef self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESBasic_SubfigureDef self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESBasic_SubfigureDef self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESBasic_SubfigureDef self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESBasic_SubfigureDef self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESBasic_SubfigureDef self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESBasic_SubfigureDef self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESBasic_SubfigureDef self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESBasic_SubfigureDef self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESBasic_SubfigureDef self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESBasic_SubfigureDef self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESBasic_SubfigureDef self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESBasic_SubfigureDef self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESBasic_SubfigureDef self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESBasic_SubfigureDef self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESBasic_SubfigureDef self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESBasic_SubfigureDef self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESBasic_SubfigureDef self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESBasic_SubfigureDef self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESBasic_SubfigureDef self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_SubfigureDef self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_SubfigureDef self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_SubfigureDef self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_SubfigureDef self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_SubfigureDef self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_SubfigureDef self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_SubfigureDef self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_SubfigureDef self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_SubfigureDef self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SubfigureDef_DecrementRefCounter(self, *args)

Handle_IGESBasic_SubfigureDef_swigregister = _IGESBasic.Handle_IGESBasic_SubfigureDef_swigregister
Handle_IGESBasic_SubfigureDef_swigregister(Handle_IGESBasic_SubfigureDef)

def Handle_IGESBasic_SubfigureDef_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_SubfigureDef_DownCast(thing)
Handle_IGESBasic_SubfigureDef_DownCast = _IGESBasic.Handle_IGESBasic_SubfigureDef_DownCast

class IGESBasic_ToolSingleParent(object):
    """
    Tool to work on a SingleParent. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESBasic_ToolSingleParent self) -> IGESBasic_ToolSingleParent

        Returns a ToolSingleParent, ready to work


        """
        this = _IGESBasic.new_IGESBasic_ToolSingleParent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESBasic_ToolSingleParent self, Handle_IGESBasic_SingleParent ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_SingleParent
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESBasic.IGESBasic_ToolSingleParent_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESBasic_ToolSingleParent self, Handle_IGESBasic_SingleParent ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_SingleParent
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESBasic.IGESBasic_ToolSingleParent_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESBasic_ToolSingleParent self, Handle_IGESBasic_SingleParent ent, Interface_EntityIterator iter)

        Lists the Entities shared by a SingleParent <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_SingleParent
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.IGESBasic_ToolSingleParent_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESBasic_ToolSingleParent self, Handle_IGESBasic_SingleParent ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a SingleParent
        (NbParents forced to 1)

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_SingleParent
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.IGESBasic_ToolSingleParent_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESBasic_ToolSingleParent self, Handle_IGESBasic_SingleParent ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_SingleParent
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESBasic.IGESBasic_ToolSingleParent_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESBasic_ToolSingleParent self, Handle_IGESBasic_SingleParent ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_SingleParent
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESBasic.IGESBasic_ToolSingleParent_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESBasic_ToolSingleParent self, Handle_IGESBasic_SingleParent entfrom, Handle_IGESBasic_SingleParent entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESBasic.Handle_IGESBasic_SingleParent
        :type entto: OCC.wrapper.IGESBasic.Handle_IGESBasic_SingleParent
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESBasic.IGESBasic_ToolSingleParent_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESBasic_ToolSingleParent self, Handle_IGESBasic_SingleParent ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_SingleParent
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESBasic.IGESBasic_ToolSingleParent_OwnDump(self, *args)

    __swig_destroy__ = _IGESBasic.delete_IGESBasic_ToolSingleParent
IGESBasic_ToolSingleParent_swigregister = _IGESBasic.IGESBasic_ToolSingleParent_swigregister
IGESBasic_ToolSingleParent_swigregister(IGESBasic_ToolSingleParent)

class Handle_IGESBasic_ExternalReferenceFile(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_ExternalReferenceFile self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_ExternalReferenceFile self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_ExternalReferenceFile self, IGESBasic_ExternalReferenceFile thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_ExternalReferenceFile self, Handle_IGESBasic_ExternalReferenceFile theHandle) -> Handle_IGESBasic_ExternalReferenceFile
        assign(Handle_IGESBasic_ExternalReferenceFile self, IGESBasic_ExternalReferenceFile thePtr) -> Handle_IGESBasic_ExternalReferenceFile
        assign(Handle_IGESBasic_ExternalReferenceFile self, Handle_IGESBasic_ExternalReferenceFile theHandle) -> Handle_IGESBasic_ExternalReferenceFile

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_ExternalReferenceFile self) -> IGESBasic_ExternalReferenceFile

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_ExternalReferenceFile self) -> IGESBasic_ExternalReferenceFile

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_ExternalReferenceFile self) -> IGESBasic_ExternalReferenceFile

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_ExternalReferenceFile(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_ExternalReferenceFile_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_ExternalReferenceFile

    def Init(self, *args):
        """
        Init(Handle_IGESBasic_ExternalReferenceFile self, Handle_Interface_HArray1OfHAsciiString aNameArray)

        This method is used to set the fields of the class
        ExternalReferenceFile
        - aNameArray : External Reference File Names

        :type aNameArray: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_Init(self, *args)


    def NbListEntries(self, *args):
        """
        NbListEntries(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Integer

        returns number of External Reference File Names

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_NbListEntries(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESBasic_ExternalReferenceFile self, Standard_Integer const Index) -> Handle_TCollection_HAsciiString

        returns External Reference File Name
        raises exception if Index <= 0 or Index > NbListEntries()

        :type Index: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_Name(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_ExternalReferenceFile self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESBasic_ExternalReferenceFile self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESBasic_ExternalReferenceFile self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESBasic_ExternalReferenceFile self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESBasic_ExternalReferenceFile self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESBasic_ExternalReferenceFile self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESBasic_ExternalReferenceFile self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESBasic_ExternalReferenceFile self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESBasic_ExternalReferenceFile self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESBasic_ExternalReferenceFile self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESBasic_ExternalReferenceFile self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESBasic_ExternalReferenceFile self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESBasic_ExternalReferenceFile self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESBasic_ExternalReferenceFile self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESBasic_ExternalReferenceFile self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESBasic_ExternalReferenceFile self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESBasic_ExternalReferenceFile self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESBasic_ExternalReferenceFile self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESBasic_ExternalReferenceFile self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESBasic_ExternalReferenceFile self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESBasic_ExternalReferenceFile self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESBasic_ExternalReferenceFile self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESBasic_ExternalReferenceFile self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESBasic_ExternalReferenceFile self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESBasic_ExternalReferenceFile self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESBasic_ExternalReferenceFile self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESBasic_ExternalReferenceFile self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESBasic_ExternalReferenceFile self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESBasic_ExternalReferenceFile self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESBasic_ExternalReferenceFile self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESBasic_ExternalReferenceFile self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESBasic_ExternalReferenceFile self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESBasic_ExternalReferenceFile self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESBasic_ExternalReferenceFile self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESBasic_ExternalReferenceFile self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESBasic_ExternalReferenceFile self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESBasic_ExternalReferenceFile self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESBasic_ExternalReferenceFile self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESBasic_ExternalReferenceFile self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESBasic_ExternalReferenceFile self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESBasic_ExternalReferenceFile self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESBasic_ExternalReferenceFile self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESBasic_ExternalReferenceFile self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_ExternalReferenceFile self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_ExternalReferenceFile self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_ExternalReferenceFile self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_ExternalReferenceFile self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_ExternalReferenceFile self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_ExternalReferenceFile self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_ExternalReferenceFile self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_DecrementRefCounter(self, *args)

Handle_IGESBasic_ExternalReferenceFile_swigregister = _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_swigregister
Handle_IGESBasic_ExternalReferenceFile_swigregister(Handle_IGESBasic_ExternalReferenceFile)

def Handle_IGESBasic_ExternalReferenceFile_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_DownCast(thing)
Handle_IGESBasic_ExternalReferenceFile_DownCast = _IGESBasic.Handle_IGESBasic_ExternalReferenceFile_DownCast

class IGESBasic_(object):
    """This package represents basic entities from IGES"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(*args):
        """
        Init()

        Prepares dynqmic data (Protocol, Modules) for this package


        """
        return _IGESBasic.IGESBasic__Init(*args)

    Init = staticmethod(Init)

    def Protocol(*args):
        """
        Protocol() -> Handle_IGESBasic_Protocol

        Returns the Protocol for this Package

        :rtype: OCC.wrapper.IGESBasic.Handle_IGESBasic_Protocol

        """
        return _IGESBasic.IGESBasic__Protocol(*args)

    Protocol = staticmethod(Protocol)

    def __init__(self):
        """This package represents basic entities from IGES"""
        this = _IGESBasic.new_IGESBasic_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESBasic.delete_IGESBasic_
IGESBasic__swigregister = _IGESBasic.IGESBasic__swigregister
IGESBasic__swigregister(IGESBasic_)

def IGESBasic__Init(*args):
    """
    IGESBasic__Init()

    Prepares dynqmic data (Protocol, Modules) for this package


    """
    return _IGESBasic.IGESBasic__Init(*args)

def IGESBasic__Protocol(*args):
    """
    IGESBasic__Protocol() -> Handle_IGESBasic_Protocol

    Returns the Protocol for this Package

    :rtype: OCC.wrapper.IGESBasic.Handle_IGESBasic_Protocol

    """
    return _IGESBasic.IGESBasic__Protocol(*args)

class Handle_IGESBasic_SingularSubfigure(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_SingularSubfigure self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_SingularSubfigure self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_SingularSubfigure self, IGESBasic_SingularSubfigure thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_SingularSubfigure self, Handle_IGESBasic_SingularSubfigure theHandle) -> Handle_IGESBasic_SingularSubfigure
        assign(Handle_IGESBasic_SingularSubfigure self, IGESBasic_SingularSubfigure thePtr) -> Handle_IGESBasic_SingularSubfigure
        assign(Handle_IGESBasic_SingularSubfigure self, Handle_IGESBasic_SingularSubfigure theHandle) -> Handle_IGESBasic_SingularSubfigure

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_SingularSubfigure self) -> IGESBasic_SingularSubfigure

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_SingularSubfigure self) -> IGESBasic_SingularSubfigure

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_SingularSubfigure self) -> IGESBasic_SingularSubfigure

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_SingularSubfigure___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_SingularSubfigure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_SingularSubfigure_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_SingularSubfigure

    def Init(self, *args):
        """
        Init(Handle_IGESBasic_SingularSubfigure self, Handle_IGESBasic_SubfigureDef aSubfigureDef, gp_XYZ aTranslation, Standard_Boolean const hasScale, Standard_Real const aScale)

        This method is used to set the fields of the class
        SingularSubfigure
        - aSubfigureDef : the Subfigure Definition entity
        - aTranslation  : used to store the X,Y,Z coord
        - hasScale      : Indicates the presence of scale factor
        - aScale        : Used to store the scale factor

        :type aSubfigureDef: OCC.wrapper.IGESBasic.Handle_IGESBasic_SubfigureDef
        :type aTranslation: OCC.wrapper.gp.gp_XYZ
        :type hasScale: bool
        :type aScale: float

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_Init(self, *args)


    def Subfigure(self, *args):
        """
        Subfigure(Handle_IGESBasic_SingularSubfigure self) -> Handle_IGESBasic_SubfigureDef

        returns the subfigure definition entity

        :rtype: OCC.wrapper.IGESBasic.Handle_IGESBasic_SubfigureDef

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_Subfigure(self, *args)


    def Translation(self, *args):
        """
        Translation(Handle_IGESBasic_SingularSubfigure self) -> gp_XYZ

        returns the X, Y, Z coordinates

        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_Translation(self, *args)


    def ScaleFactor(self, *args):
        """
        ScaleFactor(Handle_IGESBasic_SingularSubfigure self) -> Standard_Real

        returns the scale factor
        if hasScaleFactor is False, returns 1.0 (default)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_ScaleFactor(self, *args)


    def HasScaleFactor(self, *args):
        """
        HasScaleFactor(Handle_IGESBasic_SingularSubfigure self) -> Standard_Boolean

        returns a boolean indicating whether scale factor
        is present or not

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_HasScaleFactor(self, *args)


    def TransformedTranslation(self, *args):
        """
        TransformedTranslation(Handle_IGESBasic_SingularSubfigure self) -> gp_XYZ

        returns the Translation after transformation

        :rtype: OCC.wrapper.gp.gp_XYZ

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_TransformedTranslation(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_SingularSubfigure self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_SingularSubfigure_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_SingularSubfigure_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESBasic_SingularSubfigure self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESBasic_SingularSubfigure self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESBasic_SingularSubfigure self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESBasic_SingularSubfigure self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESBasic_SingularSubfigure self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESBasic_SingularSubfigure self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESBasic_SingularSubfigure self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESBasic_SingularSubfigure self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESBasic_SingularSubfigure self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESBasic_SingularSubfigure self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESBasic_SingularSubfigure self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESBasic_SingularSubfigure self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESBasic_SingularSubfigure self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESBasic_SingularSubfigure self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESBasic_SingularSubfigure self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESBasic_SingularSubfigure self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESBasic_SingularSubfigure self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESBasic_SingularSubfigure self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESBasic_SingularSubfigure self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESBasic_SingularSubfigure self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESBasic_SingularSubfigure self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESBasic_SingularSubfigure self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESBasic_SingularSubfigure self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESBasic_SingularSubfigure self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESBasic_SingularSubfigure self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESBasic_SingularSubfigure self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESBasic_SingularSubfigure self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESBasic_SingularSubfigure self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESBasic_SingularSubfigure self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESBasic_SingularSubfigure self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESBasic_SingularSubfigure self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESBasic_SingularSubfigure self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESBasic_SingularSubfigure self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESBasic_SingularSubfigure self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESBasic_SingularSubfigure self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESBasic_SingularSubfigure self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESBasic_SingularSubfigure self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESBasic_SingularSubfigure self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESBasic_SingularSubfigure self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESBasic_SingularSubfigure self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESBasic_SingularSubfigure self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESBasic_SingularSubfigure self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESBasic_SingularSubfigure self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESBasic_SingularSubfigure self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESBasic_SingularSubfigure self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESBasic_SingularSubfigure self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESBasic_SingularSubfigure self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESBasic_SingularSubfigure self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESBasic_SingularSubfigure self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESBasic_SingularSubfigure self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESBasic_SingularSubfigure self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESBasic_SingularSubfigure self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESBasic_SingularSubfigure self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESBasic_SingularSubfigure self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESBasic_SingularSubfigure self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESBasic_SingularSubfigure self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESBasic_SingularSubfigure self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESBasic_SingularSubfigure self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESBasic_SingularSubfigure self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESBasic_SingularSubfigure self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESBasic_SingularSubfigure self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESBasic_SingularSubfigure self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESBasic_SingularSubfigure self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESBasic_SingularSubfigure self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESBasic_SingularSubfigure self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_SingularSubfigure self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_SingularSubfigure self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_SingularSubfigure self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_SingularSubfigure self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_SingularSubfigure self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_SingularSubfigure self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_SingularSubfigure self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_SingularSubfigure self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_SingularSubfigure self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingularSubfigure_DecrementRefCounter(self, *args)

Handle_IGESBasic_SingularSubfigure_swigregister = _IGESBasic.Handle_IGESBasic_SingularSubfigure_swigregister
Handle_IGESBasic_SingularSubfigure_swigregister(Handle_IGESBasic_SingularSubfigure)

def Handle_IGESBasic_SingularSubfigure_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_SingularSubfigure_DownCast(thing)
Handle_IGESBasic_SingularSubfigure_DownCast = _IGESBasic.Handle_IGESBasic_SingularSubfigure_DownCast

class Handle_IGESBasic_HArray2OfHArray1OfReal(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_HArray2OfHArray1OfReal self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_HArray2OfHArray1OfReal self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_HArray2OfHArray1OfReal self, IGESBasic_HArray2OfHArray1OfReal thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_HArray2OfHArray1OfReal self, Handle_IGESBasic_HArray2OfHArray1OfReal theHandle) -> Handle_IGESBasic_HArray2OfHArray1OfReal
        assign(Handle_IGESBasic_HArray2OfHArray1OfReal self, IGESBasic_HArray2OfHArray1OfReal thePtr) -> Handle_IGESBasic_HArray2OfHArray1OfReal
        assign(Handle_IGESBasic_HArray2OfHArray1OfReal self, Handle_IGESBasic_HArray2OfHArray1OfReal theHandle) -> Handle_IGESBasic_HArray2OfHArray1OfReal

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_HArray2OfHArray1OfReal self) -> IGESBasic_HArray2OfHArray1OfReal

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_HArray2OfHArray1OfReal self) -> IGESBasic_HArray2OfHArray1OfReal

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_HArray2OfHArray1OfReal self) -> IGESBasic_HArray2OfHArray1OfReal

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_HArray2OfHArray1OfReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_HArray2OfHArray1OfReal

    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.IGESBasic.IGESBasic_Array2OfHArray1OfReal

        """
        res = _IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(Handle_IGESBasic_HArray2OfHArray1OfReal self) -> NCollection_Array2_Handle_TColStd_HArray1OfReal

        :rtype: OCC.wrapper.IGESBasic.IGESBasic_Array2OfHArray1OfReal

        """
        return _IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal_ChangeArray2(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_HArray2OfHArray1OfReal self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_HArray2OfHArray1OfReal self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_HArray2OfHArray1OfReal self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_HArray2OfHArray1OfReal self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_HArray2OfHArray1OfReal self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_HArray2OfHArray1OfReal self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_HArray2OfHArray1OfReal self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_HArray2OfHArray1OfReal self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_HArray2OfHArray1OfReal self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_HArray2OfHArray1OfReal self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal_DecrementRefCounter(self, *args)

Handle_IGESBasic_HArray2OfHArray1OfReal_swigregister = _IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal_swigregister
Handle_IGESBasic_HArray2OfHArray1OfReal_swigregister(Handle_IGESBasic_HArray2OfHArray1OfReal)

def Handle_IGESBasic_HArray2OfHArray1OfReal_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal_DownCast(thing)
Handle_IGESBasic_HArray2OfHArray1OfReal_DownCast = _IGESBasic.Handle_IGESBasic_HArray2OfHArray1OfReal_DownCast

class IGESBasic_ToolSingularSubfigure(object):
    """
    Tool to work on a SingularSubfigure. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESBasic_ToolSingularSubfigure self) -> IGESBasic_ToolSingularSubfigure

        Returns a ToolSingularSubfigure, ready to work


        """
        this = _IGESBasic.new_IGESBasic_ToolSingularSubfigure(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESBasic_ToolSingularSubfigure self, Handle_IGESBasic_SingularSubfigure ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_SingularSubfigure
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESBasic.IGESBasic_ToolSingularSubfigure_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESBasic_ToolSingularSubfigure self, Handle_IGESBasic_SingularSubfigure ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_SingularSubfigure
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESBasic.IGESBasic_ToolSingularSubfigure_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESBasic_ToolSingularSubfigure self, Handle_IGESBasic_SingularSubfigure ent, Interface_EntityIterator iter)

        Lists the Entities shared by a SingularSubfigure <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_SingularSubfigure
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.IGESBasic_ToolSingularSubfigure_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESBasic_ToolSingularSubfigure self, Handle_IGESBasic_SingularSubfigure ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_SingularSubfigure
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESBasic.IGESBasic_ToolSingularSubfigure_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESBasic_ToolSingularSubfigure self, Handle_IGESBasic_SingularSubfigure ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_SingularSubfigure
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESBasic.IGESBasic_ToolSingularSubfigure_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESBasic_ToolSingularSubfigure self, Handle_IGESBasic_SingularSubfigure entfrom, Handle_IGESBasic_SingularSubfigure entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESBasic.Handle_IGESBasic_SingularSubfigure
        :type entto: OCC.wrapper.IGESBasic.Handle_IGESBasic_SingularSubfigure
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESBasic.IGESBasic_ToolSingularSubfigure_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESBasic_ToolSingularSubfigure self, Handle_IGESBasic_SingularSubfigure ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_SingularSubfigure
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESBasic.IGESBasic_ToolSingularSubfigure_OwnDump(self, *args)

    __swig_destroy__ = _IGESBasic.delete_IGESBasic_ToolSingularSubfigure
IGESBasic_ToolSingularSubfigure_swigregister = _IGESBasic.IGESBasic_ToolSingularSubfigure_swigregister
IGESBasic_ToolSingularSubfigure_swigregister(IGESBasic_ToolSingularSubfigure)

class IGESBasic_HArray1OfHArray1OfInteger(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_HArray1OfHArray1OfInteger
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_HArray1OfHArray1OfInteger(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_HArray1OfHArray1OfInteger self, Standard_Integer const low, Standard_Integer const up) -> IGESBasic_HArray1OfHArray1OfInteger

        :type low: int
        :type up: int

        """
        this = _IGESBasic.new_IGESBasic_HArray1OfHArray1OfInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Lower(self, *args):
        """
        Lower(IGESBasic_HArray1OfHArray1OfInteger self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfInteger_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(IGESBasic_HArray1OfHArray1OfInteger self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfInteger_Upper(self, *args)


    def Length(self, *args):
        """
        Length(IGESBasic_HArray1OfHArray1OfInteger self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfInteger_Length(self, *args)


    def SetValue(self, *args):
        """
        SetValue(IGESBasic_HArray1OfHArray1OfInteger self, Standard_Integer const num, Handle_TColStd_HArray1OfInteger val)

        :type num: int
        :type val: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfInteger_SetValue(self, *args)


    def Value(self, *args):
        """
        Value(IGESBasic_HArray1OfHArray1OfInteger self, Standard_Integer const num) -> Handle_TColStd_HArray1OfInteger

        :type num: int
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfInteger_Value(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfInteger_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfInteger_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_HArray1OfHArray1OfInteger_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_HArray1OfHArray1OfInteger
IGESBasic_HArray1OfHArray1OfInteger_swigregister = _IGESBasic.IGESBasic_HArray1OfHArray1OfInteger_swigregister
IGESBasic_HArray1OfHArray1OfInteger_swigregister(IGESBasic_HArray1OfHArray1OfInteger)

def IGESBasic_HArray1OfHArray1OfInteger_get_type_name(*args):
    """
    IGESBasic_HArray1OfHArray1OfInteger_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_HArray1OfHArray1OfInteger_get_type_name(*args)

def IGESBasic_HArray1OfHArray1OfInteger_get_type_descriptor(*args):
    """
    IGESBasic_HArray1OfHArray1OfInteger_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_HArray1OfHArray1OfInteger_get_type_descriptor(*args)

class IGESBasic_ToolOrderedGroupWithoutBackP(object):
    """
    Tool to work on a OrderedGroupWithoutBackP. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESBasic_ToolOrderedGroupWithoutBackP self) -> IGESBasic_ToolOrderedGroupWithoutBackP

        Returns a ToolOrderedGroupWithoutBackP, ready to work


        """
        this = _IGESBasic.new_IGESBasic_ToolOrderedGroupWithoutBackP(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESBasic_ToolOrderedGroupWithoutBackP self, Handle_IGESBasic_OrderedGroupWithoutBackP ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESBasic.IGESBasic_ToolOrderedGroupWithoutBackP_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESBasic_ToolOrderedGroupWithoutBackP self, Handle_IGESBasic_OrderedGroupWithoutBackP ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESBasic.IGESBasic_ToolOrderedGroupWithoutBackP_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESBasic_ToolOrderedGroupWithoutBackP self, Handle_IGESBasic_OrderedGroupWithoutBackP ent, Interface_EntityIterator iter)

        Lists the Entities shared by a OrderedGroupWithoutBackP <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.IGESBasic_ToolOrderedGroupWithoutBackP_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESBasic_ToolOrderedGroupWithoutBackP self, Handle_IGESBasic_OrderedGroupWithoutBackP ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on an OrderedGroupWithoutBackP
        (Null Elements are removed from list)

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.IGESBasic_ToolOrderedGroupWithoutBackP_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESBasic_ToolOrderedGroupWithoutBackP self, Handle_IGESBasic_OrderedGroupWithoutBackP ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESBasic.IGESBasic_ToolOrderedGroupWithoutBackP_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESBasic_ToolOrderedGroupWithoutBackP self, Handle_IGESBasic_OrderedGroupWithoutBackP ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESBasic.IGESBasic_ToolOrderedGroupWithoutBackP_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESBasic_ToolOrderedGroupWithoutBackP self, Handle_IGESBasic_OrderedGroupWithoutBackP entfrom, Handle_IGESBasic_OrderedGroupWithoutBackP entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP
        :type entto: OCC.wrapper.IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESBasic.IGESBasic_ToolOrderedGroupWithoutBackP_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESBasic_ToolOrderedGroupWithoutBackP self, Handle_IGESBasic_OrderedGroupWithoutBackP ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESBasic.IGESBasic_ToolOrderedGroupWithoutBackP_OwnDump(self, *args)

    __swig_destroy__ = _IGESBasic.delete_IGESBasic_ToolOrderedGroupWithoutBackP
IGESBasic_ToolOrderedGroupWithoutBackP_swigregister = _IGESBasic.IGESBasic_ToolOrderedGroupWithoutBackP_swigregister
IGESBasic_ToolOrderedGroupWithoutBackP_swigregister(IGESBasic_ToolOrderedGroupWithoutBackP)

class Handle_IGESBasic_HArray1OfHArray1OfXYZ(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_HArray1OfHArray1OfXYZ self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_HArray1OfHArray1OfXYZ self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_HArray1OfHArray1OfXYZ self, IGESBasic_HArray1OfHArray1OfXYZ thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_HArray1OfHArray1OfXYZ self, Handle_IGESBasic_HArray1OfHArray1OfXYZ theHandle) -> Handle_IGESBasic_HArray1OfHArray1OfXYZ
        assign(Handle_IGESBasic_HArray1OfHArray1OfXYZ self, IGESBasic_HArray1OfHArray1OfXYZ thePtr) -> Handle_IGESBasic_HArray1OfHArray1OfXYZ
        assign(Handle_IGESBasic_HArray1OfHArray1OfXYZ self, Handle_IGESBasic_HArray1OfHArray1OfXYZ theHandle) -> Handle_IGESBasic_HArray1OfHArray1OfXYZ

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_HArray1OfHArray1OfXYZ self) -> IGESBasic_HArray1OfHArray1OfXYZ

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_HArray1OfHArray1OfXYZ self) -> IGESBasic_HArray1OfHArray1OfXYZ

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_HArray1OfHArray1OfXYZ self) -> IGESBasic_HArray1OfHArray1OfXYZ

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_HArray1OfHArray1OfXYZ(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_HArray1OfHArray1OfXYZ

    def Lower(self, *args):
        """
        Lower(Handle_IGESBasic_HArray1OfHArray1OfXYZ self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(Handle_IGESBasic_HArray1OfHArray1OfXYZ self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ_Upper(self, *args)


    def Length(self, *args):
        """
        Length(Handle_IGESBasic_HArray1OfHArray1OfXYZ self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ_Length(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_IGESBasic_HArray1OfHArray1OfXYZ self, Standard_Integer const num, Handle_TColgp_HArray1OfXYZ val)

        :type num: int
        :type val: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXYZ

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ_SetValue(self, *args)


    def Value(self, *args):
        """
        Value(Handle_IGESBasic_HArray1OfHArray1OfXYZ self, Standard_Integer const num) -> Handle_TColgp_HArray1OfXYZ

        :type num: int
        :rtype: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXYZ

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ_Value(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_HArray1OfHArray1OfXYZ self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_HArray1OfHArray1OfXYZ self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_HArray1OfHArray1OfXYZ self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_HArray1OfHArray1OfXYZ self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_HArray1OfHArray1OfXYZ self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_HArray1OfHArray1OfXYZ self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_HArray1OfHArray1OfXYZ self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_HArray1OfHArray1OfXYZ self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_HArray1OfHArray1OfXYZ self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_HArray1OfHArray1OfXYZ self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ_DecrementRefCounter(self, *args)

Handle_IGESBasic_HArray1OfHArray1OfXYZ_swigregister = _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ_swigregister
Handle_IGESBasic_HArray1OfHArray1OfXYZ_swigregister(Handle_IGESBasic_HArray1OfHArray1OfXYZ)

def Handle_IGESBasic_HArray1OfHArray1OfXYZ_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ_DownCast(thing)
Handle_IGESBasic_HArray1OfHArray1OfXYZ_DownCast = _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXYZ_DownCast

class Handle_IGESBasic_Protocol(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_Protocol self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_Protocol_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_Protocol self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_Protocol_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_Protocol self, IGESBasic_Protocol thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_Protocol_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_Protocol self, Handle_IGESBasic_Protocol theHandle) -> Handle_IGESBasic_Protocol
        assign(Handle_IGESBasic_Protocol self, IGESBasic_Protocol thePtr) -> Handle_IGESBasic_Protocol
        assign(Handle_IGESBasic_Protocol self, Handle_IGESBasic_Protocol theHandle) -> Handle_IGESBasic_Protocol

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_Protocol_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_Protocol self) -> IGESBasic_Protocol

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_Protocol_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_Protocol self) -> IGESBasic_Protocol

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_Protocol___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_Protocol self) -> IGESBasic_Protocol

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_Protocol___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_Protocol___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_Protocol___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_Protocol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_Protocol_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_Protocol

    def NbResources(self, *args):
        """
        NbResources(Handle_IGESBasic_Protocol self) -> Standard_Integer

        Gives the count of Resource Protocol. Here, one
        (Protocol from IGESData)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Protocol_NbResources(self, *args)


    def Resource(self, *args):
        """
        Resource(Handle_IGESBasic_Protocol self, Standard_Integer const num) -> Handle_Interface_Protocol

        Returns a Resource, given a rank.

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESBasic.Handle_IGESBasic_Protocol_Resource(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESBasic_Protocol self, Handle_Standard_Type atype) -> Standard_Integer

        Returns a Case Number, specific of each recognized Type
        This Case Number is then used in Libraries : the various
        Modules attached to this class of Protocol must use them
        in accordance (for a given value of TypeNumber, they must
        consider the same Type as the Protocol defines)

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Protocol_TypeNumber(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_Protocol self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_Protocol_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_Protocol_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_Protocol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewModel(self, *args):
        """
        NewModel(Handle_IGESBasic_Protocol self) -> Handle_Interface_InterfaceModel

        Creates an empty Model for IGES Norm

        :rtype: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESBasic.Handle_IGESBasic_Protocol_NewModel(self, *args)


    def IsSuitableModel(self, *args):
        """
        IsSuitableModel(Handle_IGESBasic_Protocol self, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        Returns True if <model> is a Model of IGES Norm

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Protocol_IsSuitableModel(self, *args)


    def UnknownEntity(self, *args):
        """
        UnknownEntity(Handle_IGESBasic_Protocol self) -> Handle_Standard_Transient

        Creates a new Unknown Entity for IGES (UndefinedEntity)

        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_Protocol_UnknownEntity(self, *args)


    def IsUnknownEntity(self, *args):
        """
        IsUnknownEntity(Handle_IGESBasic_Protocol self, Handle_Standard_Transient ent) -> Standard_Boolean

        Returns True if <ent> is an Unknown Entity for the Norm, i.e.
        Type UndefinedEntity, status Unknown

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Protocol_IsUnknownEntity(self, *args)


    def Active(self, *args):
        """
        Active(Handle_IGESBasic_Protocol self) -> Handle_Interface_Protocol

        Returns the Active Protocol, if defined (else, returns a
        Null Handle, which means "no defined active protocol")

        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESBasic.Handle_IGESBasic_Protocol_Active(self, *args)


    def SetActive(self, *args):
        """
        SetActive(Handle_IGESBasic_Protocol self, Handle_Interface_Protocol aprotocol)

        Sets a given Protocol to be the Active one (for the users of
        Active, see just above). Applies to every sub-type of Protocol

        :type aprotocol: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _IGESBasic.Handle_IGESBasic_Protocol_SetActive(self, *args)


    def ClearActive(self, *args):
        """
        ClearActive(Handle_IGESBasic_Protocol self)

        Erases the Active Protocol (hence it becomes undefined)


        """
        return _IGESBasic.Handle_IGESBasic_Protocol_ClearActive(self, *args)


    def CaseNumber(self, *args):
        """
        CaseNumber(Handle_IGESBasic_Protocol self, Handle_Standard_Transient obj) -> Standard_Integer

        Returns a unique positive CaseNumber for each Recognized
        Object. By default, recognition is based on Type(1)
        By default, calls the following one which is deferred.

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Protocol_CaseNumber(self, *args)


    def IsDynamicType(self, *args):
        """
        IsDynamicType(Handle_IGESBasic_Protocol self, Handle_Standard_Transient obj) -> Standard_Boolean

        Returns True if type of <obj> is that defined from CDL
        This is the default but it may change according implementation

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Protocol_IsDynamicType(self, *args)


    def NbTypes(self, *args):
        """
        NbTypes(Handle_IGESBasic_Protocol self, Handle_Standard_Transient obj) -> Standard_Integer

        Returns the count of DISTINCT types under which an entity may
        be processed. Each one is candidate to be recognized by
        TypeNumber, <obj> is then processed according it
        By default, returns 1 (the DynamicType)

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Protocol_NbTypes(self, *args)


    def Type(self, *args):
        """
        Type(Handle_IGESBasic_Protocol self, Handle_Standard_Transient obj, Standard_Integer const nt=1) -> Handle_Standard_Type

        Returns a type under which <obj> can be recognized and
        processed, according its rank in its definition list (see
        NbTypes).
        By default, returns DynamicType

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :type nt: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.Handle_IGESBasic_Protocol_Type(self, *args)


    def GlobalCheck(self, *args):
        """
        GlobalCheck(Handle_IGESBasic_Protocol self, Interface_Graph G, Handle_Interface_Check ach) -> Standard_Boolean

        Evaluates a Global Check for a model (with its Graph)
        Returns True when done, False if data in model do not apply

        Very specific of each norm, i.e. of each protocol : the
        uppest level Protocol assumes it, it can call GlobalCheck of
        its ressources only if it is necessary

        Default does nothing, can be redefined

        :type G: OCC.wrapper.Interface.Interface_Graph
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Protocol_GlobalCheck(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_Protocol self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_Protocol_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_Protocol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_Protocol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Protocol_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_Protocol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_Protocol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_Protocol_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_Protocol self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_Protocol_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_Protocol self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Protocol_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_Protocol self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_Protocol_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_Protocol self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_Protocol_DecrementRefCounter(self, *args)

Handle_IGESBasic_Protocol_swigregister = _IGESBasic.Handle_IGESBasic_Protocol_swigregister
Handle_IGESBasic_Protocol_swigregister(Handle_IGESBasic_Protocol)

def Handle_IGESBasic_Protocol_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_Protocol_DownCast(thing)
Handle_IGESBasic_Protocol_DownCast = _IGESBasic.Handle_IGESBasic_Protocol_DownCast

class IGESBasic_ToolExternalRefFile(object):
    """
    Tool to work on a ExternalRefFile. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESBasic_ToolExternalRefFile self) -> IGESBasic_ToolExternalRefFile

        Returns a ToolExternalRefFile, ready to work


        """
        this = _IGESBasic.new_IGESBasic_ToolExternalRefFile(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESBasic_ToolExternalRefFile self, Handle_IGESBasic_ExternalRefFile ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefFile
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESBasic.IGESBasic_ToolExternalRefFile_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESBasic_ToolExternalRefFile self, Handle_IGESBasic_ExternalRefFile ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefFile
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESBasic.IGESBasic_ToolExternalRefFile_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESBasic_ToolExternalRefFile self, Handle_IGESBasic_ExternalRefFile ent, Interface_EntityIterator iter)

        Lists the Entities shared by a ExternalRefFile <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefFile
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.IGESBasic_ToolExternalRefFile_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESBasic_ToolExternalRefFile self, Handle_IGESBasic_ExternalRefFile ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefFile
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESBasic.IGESBasic_ToolExternalRefFile_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESBasic_ToolExternalRefFile self, Handle_IGESBasic_ExternalRefFile ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefFile
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESBasic.IGESBasic_ToolExternalRefFile_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESBasic_ToolExternalRefFile self, Handle_IGESBasic_ExternalRefFile entfrom, Handle_IGESBasic_ExternalRefFile entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefFile
        :type entto: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefFile
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESBasic.IGESBasic_ToolExternalRefFile_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESBasic_ToolExternalRefFile self, Handle_IGESBasic_ExternalRefFile ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefFile
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESBasic.IGESBasic_ToolExternalRefFile_OwnDump(self, *args)

    __swig_destroy__ = _IGESBasic.delete_IGESBasic_ToolExternalRefFile
IGESBasic_ToolExternalRefFile_swigregister = _IGESBasic.IGESBasic_ToolExternalRefFile_swigregister
IGESBasic_ToolExternalRefFile_swigregister(IGESBasic_ToolExternalRefFile)

class IGESBasic_ToolExternalRefLibName(object):
    """
    Tool to work on a ExternalRefLibName. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESBasic_ToolExternalRefLibName self) -> IGESBasic_ToolExternalRefLibName

        Returns a ToolExternalRefLibName, ready to work


        """
        this = _IGESBasic.new_IGESBasic_ToolExternalRefLibName(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESBasic_ToolExternalRefLibName self, Handle_IGESBasic_ExternalRefLibName ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefLibName
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESBasic.IGESBasic_ToolExternalRefLibName_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESBasic_ToolExternalRefLibName self, Handle_IGESBasic_ExternalRefLibName ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefLibName
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESBasic.IGESBasic_ToolExternalRefLibName_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESBasic_ToolExternalRefLibName self, Handle_IGESBasic_ExternalRefLibName ent, Interface_EntityIterator iter)

        Lists the Entities shared by a ExternalRefLibName <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefLibName
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.IGESBasic_ToolExternalRefLibName_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESBasic_ToolExternalRefLibName self, Handle_IGESBasic_ExternalRefLibName ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefLibName
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESBasic.IGESBasic_ToolExternalRefLibName_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESBasic_ToolExternalRefLibName self, Handle_IGESBasic_ExternalRefLibName ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefLibName
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESBasic.IGESBasic_ToolExternalRefLibName_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESBasic_ToolExternalRefLibName self, Handle_IGESBasic_ExternalRefLibName entfrom, Handle_IGESBasic_ExternalRefLibName entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefLibName
        :type entto: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefLibName
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESBasic.IGESBasic_ToolExternalRefLibName_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESBasic_ToolExternalRefLibName self, Handle_IGESBasic_ExternalRefLibName ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefLibName
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESBasic.IGESBasic_ToolExternalRefLibName_OwnDump(self, *args)

    __swig_destroy__ = _IGESBasic.delete_IGESBasic_ToolExternalRefLibName
IGESBasic_ToolExternalRefLibName_swigregister = _IGESBasic.IGESBasic_ToolExternalRefLibName_swigregister
IGESBasic_ToolExternalRefLibName_swigregister(IGESBasic_ToolExternalRefLibName)

class Handle_IGESBasic_HArray1OfHArray1OfXY(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_HArray1OfHArray1OfXY self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_HArray1OfHArray1OfXY self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_HArray1OfHArray1OfXY self, IGESBasic_HArray1OfHArray1OfXY thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_HArray1OfHArray1OfXY self, Handle_IGESBasic_HArray1OfHArray1OfXY theHandle) -> Handle_IGESBasic_HArray1OfHArray1OfXY
        assign(Handle_IGESBasic_HArray1OfHArray1OfXY self, IGESBasic_HArray1OfHArray1OfXY thePtr) -> Handle_IGESBasic_HArray1OfHArray1OfXY
        assign(Handle_IGESBasic_HArray1OfHArray1OfXY self, Handle_IGESBasic_HArray1OfHArray1OfXY theHandle) -> Handle_IGESBasic_HArray1OfHArray1OfXY

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_HArray1OfHArray1OfXY self) -> IGESBasic_HArray1OfHArray1OfXY

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_HArray1OfHArray1OfXY self) -> IGESBasic_HArray1OfHArray1OfXY

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_HArray1OfHArray1OfXY self) -> IGESBasic_HArray1OfHArray1OfXY

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_HArray1OfHArray1OfXY(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_HArray1OfHArray1OfXY

    def Lower(self, *args):
        """
        Lower(Handle_IGESBasic_HArray1OfHArray1OfXY self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(Handle_IGESBasic_HArray1OfHArray1OfXY self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY_Upper(self, *args)


    def Length(self, *args):
        """
        Length(Handle_IGESBasic_HArray1OfHArray1OfXY self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY_Length(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_IGESBasic_HArray1OfHArray1OfXY self, Standard_Integer const num, Handle_TColgp_HArray1OfXY val)

        :type num: int
        :type val: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXY

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY_SetValue(self, *args)


    def Value(self, *args):
        """
        Value(Handle_IGESBasic_HArray1OfHArray1OfXY self, Standard_Integer const num) -> Handle_TColgp_HArray1OfXY

        :type num: int
        :rtype: OCC.wrapper.TColgp.Handle_TColgp_HArray1OfXY

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY_Value(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_HArray1OfHArray1OfXY self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_HArray1OfHArray1OfXY self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_HArray1OfHArray1OfXY self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_HArray1OfHArray1OfXY self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_HArray1OfHArray1OfXY self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_HArray1OfHArray1OfXY self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_HArray1OfHArray1OfXY self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_HArray1OfHArray1OfXY self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_HArray1OfHArray1OfXY self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_HArray1OfHArray1OfXY self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY_DecrementRefCounter(self, *args)

Handle_IGESBasic_HArray1OfHArray1OfXY_swigregister = _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY_swigregister
Handle_IGESBasic_HArray1OfHArray1OfXY_swigregister(Handle_IGESBasic_HArray1OfHArray1OfXY)

def Handle_IGESBasic_HArray1OfHArray1OfXY_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY_DownCast(thing)
Handle_IGESBasic_HArray1OfHArray1OfXY_DownCast = _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfXY_DownCast

class Handle_IGESBasic_OrderedGroupWithoutBackP(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_OrderedGroupWithoutBackP self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_OrderedGroupWithoutBackP self, IGESBasic_OrderedGroupWithoutBackP thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_OrderedGroupWithoutBackP self, Handle_IGESBasic_OrderedGroupWithoutBackP theHandle) -> Handle_IGESBasic_OrderedGroupWithoutBackP
        assign(Handle_IGESBasic_OrderedGroupWithoutBackP self, IGESBasic_OrderedGroupWithoutBackP thePtr) -> Handle_IGESBasic_OrderedGroupWithoutBackP
        assign(Handle_IGESBasic_OrderedGroupWithoutBackP self, Handle_IGESBasic_OrderedGroupWithoutBackP theHandle) -> Handle_IGESBasic_OrderedGroupWithoutBackP

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> IGESBasic_OrderedGroupWithoutBackP

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> IGESBasic_OrderedGroupWithoutBackP

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> IGESBasic_OrderedGroupWithoutBackP

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_OrderedGroupWithoutBackP(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_OrderedGroupWithoutBackP

    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_IGESBasic_OrderedGroupWithoutBackP self, Handle_IGESData_HArray1OfIGESEntity allEntities)

        This method is used to set the fields of the class Group
        - allEntities : Used to store pointers to members of
        the Group.

        :type allEntities: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_Init(self, *args)


    def SetOrdered(self, *args):
        """
        SetOrdered(Handle_IGESBasic_OrderedGroupWithoutBackP self, Standard_Boolean const mode)

        Sets a Group to be, or not to be  Ordered (according mode)

        :type mode: bool

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_SetOrdered(self, *args)


    def SetWithoutBackP(self, *args):
        """
        SetWithoutBackP(Handle_IGESBasic_OrderedGroupWithoutBackP self, Standard_Boolean const mode)

        Sets a Group to be, or not to be  WithoutBackP

        :type mode: bool

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_SetWithoutBackP(self, *args)


    def IsOrdered(self, *args):
        """
        IsOrdered(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Boolean

        Returns True if <me> is Ordered

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_IsOrdered(self, *args)


    def IsWithoutBackP(self, *args):
        """
        IsWithoutBackP(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Boolean

        Returns True if <me> is WithoutBackP

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_IsWithoutBackP(self, *args)


    def SetUser(self, *args):
        """
        SetUser(Handle_IGESBasic_OrderedGroupWithoutBackP self, Standard_Integer const type, Standard_Integer const form)

        Enforce a new value for the type and form

        :type type: int
        :type form: int

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_SetUser(self, *args)


    def SetNb(self, *args):
        """
        SetNb(Handle_IGESBasic_OrderedGroupWithoutBackP self, Standard_Integer const nb)

        Changes the count of item
        If greater, new items are null
        If lower, old items are lost

        :type nb: int

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_SetNb(self, *args)


    def NbEntities(self, *args):
        """
        NbEntities(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Integer

        returns the number of IGESEntities in the Group

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_NbEntities(self, *args)


    def Entity(self, *args):
        """
        Entity(Handle_IGESBasic_OrderedGroupWithoutBackP self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the specific entity from the Group

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_Entity(self, *args)


    def Value(self, *args):
        """
        Value(Handle_IGESBasic_OrderedGroupWithoutBackP self, Standard_Integer const Index) -> Handle_Standard_Transient

        returns the specific entity from the Group

        :type Index: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_Value(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_IGESBasic_OrderedGroupWithoutBackP self, Standard_Integer const Index, Handle_IGESData_IGESEntity ent)

        Sets a new value for item <Index>

        :type Index: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_SetValue(self, *args)


    def IGESType(self, *args):
        """
        IGESType(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESBasic_OrderedGroupWithoutBackP self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESBasic_OrderedGroupWithoutBackP self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESBasic_OrderedGroupWithoutBackP self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESBasic_OrderedGroupWithoutBackP self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESBasic_OrderedGroupWithoutBackP self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESBasic_OrderedGroupWithoutBackP self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESBasic_OrderedGroupWithoutBackP self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESBasic_OrderedGroupWithoutBackP self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESBasic_OrderedGroupWithoutBackP self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESBasic_OrderedGroupWithoutBackP self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESBasic_OrderedGroupWithoutBackP self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESBasic_OrderedGroupWithoutBackP self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESBasic_OrderedGroupWithoutBackP self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESBasic_OrderedGroupWithoutBackP self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESBasic_OrderedGroupWithoutBackP self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESBasic_OrderedGroupWithoutBackP self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESBasic_OrderedGroupWithoutBackP self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESBasic_OrderedGroupWithoutBackP self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESBasic_OrderedGroupWithoutBackP self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESBasic_OrderedGroupWithoutBackP self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_OrderedGroupWithoutBackP self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_OrderedGroupWithoutBackP self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_OrderedGroupWithoutBackP self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_OrderedGroupWithoutBackP self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_OrderedGroupWithoutBackP self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_OrderedGroupWithoutBackP self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_OrderedGroupWithoutBackP self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_DecrementRefCounter(self, *args)

Handle_IGESBasic_OrderedGroupWithoutBackP_swigregister = _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_swigregister
Handle_IGESBasic_OrderedGroupWithoutBackP_swigregister(Handle_IGESBasic_OrderedGroupWithoutBackP)

def Handle_IGESBasic_OrderedGroupWithoutBackP_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_DownCast(thing)
Handle_IGESBasic_OrderedGroupWithoutBackP_DownCast = _IGESBasic.Handle_IGESBasic_OrderedGroupWithoutBackP_DownCast

class Handle_IGESBasic_AssocGroupType(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_AssocGroupType self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_AssocGroupType self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_AssocGroupType self, IGESBasic_AssocGroupType thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_AssocGroupType self, Handle_IGESBasic_AssocGroupType theHandle) -> Handle_IGESBasic_AssocGroupType
        assign(Handle_IGESBasic_AssocGroupType self, IGESBasic_AssocGroupType thePtr) -> Handle_IGESBasic_AssocGroupType
        assign(Handle_IGESBasic_AssocGroupType self, Handle_IGESBasic_AssocGroupType theHandle) -> Handle_IGESBasic_AssocGroupType

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_AssocGroupType self) -> IGESBasic_AssocGroupType

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_AssocGroupType self) -> IGESBasic_AssocGroupType

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_AssocGroupType self) -> IGESBasic_AssocGroupType

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_AssocGroupType___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_AssocGroupType___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_AssocGroupType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_AssocGroupType_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_AssocGroupType

    def Init(self, *args):
        """
        Init(Handle_IGESBasic_AssocGroupType self, Standard_Integer const nbDataFields, Standard_Integer const aType, Handle_TCollection_HAsciiString aName)

        This method is used to set the fields of the class
        AssocGroupType
        - nbDataFields : number of parameter data fields = 2
        - aType        : type of attached associativity
        - aName        : identifier of associativity of type AType

        :type nbDataFields: int
        :type aType: int
        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_Init(self, *args)


    def NbData(self, *args):
        """
        NbData(Handle_IGESBasic_AssocGroupType self) -> Standard_Integer

        returns the number of parameter data fields, always = 2

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_NbData(self, *args)


    def AssocType(self, *args):
        """
        AssocType(Handle_IGESBasic_AssocGroupType self) -> Standard_Integer

        returns the type of attached associativity

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_AssocType(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESBasic_AssocGroupType self) -> Handle_TCollection_HAsciiString

        returns identifier of instance of specified associativity

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_Name(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_AssocGroupType self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_AssocGroupType_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_AssocGroupType_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESBasic_AssocGroupType self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESBasic_AssocGroupType self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESBasic_AssocGroupType self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESBasic_AssocGroupType self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESBasic_AssocGroupType self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESBasic_AssocGroupType self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESBasic_AssocGroupType self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESBasic_AssocGroupType self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESBasic_AssocGroupType self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESBasic_AssocGroupType self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESBasic_AssocGroupType self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESBasic_AssocGroupType self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESBasic_AssocGroupType self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESBasic_AssocGroupType self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESBasic_AssocGroupType self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESBasic_AssocGroupType self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESBasic_AssocGroupType self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESBasic_AssocGroupType self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESBasic_AssocGroupType self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESBasic_AssocGroupType self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESBasic_AssocGroupType self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESBasic_AssocGroupType self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESBasic_AssocGroupType self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESBasic_AssocGroupType self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESBasic_AssocGroupType self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESBasic_AssocGroupType self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESBasic_AssocGroupType self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESBasic_AssocGroupType self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESBasic_AssocGroupType self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESBasic_AssocGroupType self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESBasic_AssocGroupType self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESBasic_AssocGroupType self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESBasic_AssocGroupType self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESBasic_AssocGroupType self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESBasic_AssocGroupType self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESBasic_AssocGroupType self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESBasic_AssocGroupType self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESBasic_AssocGroupType self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESBasic_AssocGroupType self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESBasic_AssocGroupType self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESBasic_AssocGroupType self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESBasic_AssocGroupType self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESBasic_AssocGroupType self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESBasic_AssocGroupType self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESBasic_AssocGroupType self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESBasic_AssocGroupType self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESBasic_AssocGroupType self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESBasic_AssocGroupType self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESBasic_AssocGroupType self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESBasic_AssocGroupType self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESBasic_AssocGroupType self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESBasic_AssocGroupType self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESBasic_AssocGroupType self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESBasic_AssocGroupType self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESBasic_AssocGroupType self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESBasic_AssocGroupType self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESBasic_AssocGroupType self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESBasic_AssocGroupType self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESBasic_AssocGroupType self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESBasic_AssocGroupType self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESBasic_AssocGroupType self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESBasic_AssocGroupType self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESBasic_AssocGroupType self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESBasic_AssocGroupType self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESBasic_AssocGroupType self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_AssocGroupType self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_AssocGroupType self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_AssocGroupType self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_AssocGroupType self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_AssocGroupType self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_AssocGroupType self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_AssocGroupType self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_AssocGroupType self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_AssocGroupType self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_AssocGroupType_DecrementRefCounter(self, *args)

Handle_IGESBasic_AssocGroupType_swigregister = _IGESBasic.Handle_IGESBasic_AssocGroupType_swigregister
Handle_IGESBasic_AssocGroupType_swigregister(Handle_IGESBasic_AssocGroupType)

def Handle_IGESBasic_AssocGroupType_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_AssocGroupType_DownCast(thing)
Handle_IGESBasic_AssocGroupType_DownCast = _IGESBasic.Handle_IGESBasic_AssocGroupType_DownCast

class Handle_IGESBasic_ExternalRefFileIndex(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_ExternalRefFileIndex self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_ExternalRefFileIndex self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_ExternalRefFileIndex self, IGESBasic_ExternalRefFileIndex thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_ExternalRefFileIndex self, Handle_IGESBasic_ExternalRefFileIndex theHandle) -> Handle_IGESBasic_ExternalRefFileIndex
        assign(Handle_IGESBasic_ExternalRefFileIndex self, IGESBasic_ExternalRefFileIndex thePtr) -> Handle_IGESBasic_ExternalRefFileIndex
        assign(Handle_IGESBasic_ExternalRefFileIndex self, Handle_IGESBasic_ExternalRefFileIndex theHandle) -> Handle_IGESBasic_ExternalRefFileIndex

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_ExternalRefFileIndex self) -> IGESBasic_ExternalRefFileIndex

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_ExternalRefFileIndex self) -> IGESBasic_ExternalRefFileIndex

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_ExternalRefFileIndex self) -> IGESBasic_ExternalRefFileIndex

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_ExternalRefFileIndex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_ExternalRefFileIndex

    def Init(self, *args):
        """
        Init(Handle_IGESBasic_ExternalRefFileIndex self, Handle_Interface_HArray1OfHAsciiString aNameArray, Handle_IGESData_HArray1OfIGESEntity allEntities)

        This method is used to set the fields of the class
        ExternalRefFileIndex
        - aNameArray  : External Reference Entity symbolic names
        - allEntities : External Reference Entities
        raises exception if array lengths are not equal
        if size of aNameArray is not equal to size of allEntities

        :type aNameArray: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString
        :type allEntities: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_Init(self, *args)


    def NbEntries(self, *args):
        """
        NbEntries(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Integer

        returns number of index entries

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_NbEntries(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESBasic_ExternalRefFileIndex self, Standard_Integer const Index) -> Handle_TCollection_HAsciiString

        returns the External Reference Entity symbolic name
        raises exception if Index <= 0 or Index > NbEntries()

        :type Index: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_Name(self, *args)


    def Entity(self, *args):
        """
        Entity(Handle_IGESBasic_ExternalRefFileIndex self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the internal entity
        raises exception if Index <= 0 or Index > NbEntries()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_Entity(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_ExternalRefFileIndex self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESBasic_ExternalRefFileIndex self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESBasic_ExternalRefFileIndex self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESBasic_ExternalRefFileIndex self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESBasic_ExternalRefFileIndex self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESBasic_ExternalRefFileIndex self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESBasic_ExternalRefFileIndex self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESBasic_ExternalRefFileIndex self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESBasic_ExternalRefFileIndex self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESBasic_ExternalRefFileIndex self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESBasic_ExternalRefFileIndex self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESBasic_ExternalRefFileIndex self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESBasic_ExternalRefFileIndex self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESBasic_ExternalRefFileIndex self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESBasic_ExternalRefFileIndex self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESBasic_ExternalRefFileIndex self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESBasic_ExternalRefFileIndex self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESBasic_ExternalRefFileIndex self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESBasic_ExternalRefFileIndex self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESBasic_ExternalRefFileIndex self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESBasic_ExternalRefFileIndex self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESBasic_ExternalRefFileIndex self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESBasic_ExternalRefFileIndex self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESBasic_ExternalRefFileIndex self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESBasic_ExternalRefFileIndex self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESBasic_ExternalRefFileIndex self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESBasic_ExternalRefFileIndex self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESBasic_ExternalRefFileIndex self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESBasic_ExternalRefFileIndex self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESBasic_ExternalRefFileIndex self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESBasic_ExternalRefFileIndex self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESBasic_ExternalRefFileIndex self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESBasic_ExternalRefFileIndex self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESBasic_ExternalRefFileIndex self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESBasic_ExternalRefFileIndex self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESBasic_ExternalRefFileIndex self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESBasic_ExternalRefFileIndex self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESBasic_ExternalRefFileIndex self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESBasic_ExternalRefFileIndex self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESBasic_ExternalRefFileIndex self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESBasic_ExternalRefFileIndex self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESBasic_ExternalRefFileIndex self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESBasic_ExternalRefFileIndex self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_ExternalRefFileIndex self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_ExternalRefFileIndex self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_ExternalRefFileIndex self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_ExternalRefFileIndex self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_ExternalRefFileIndex self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_ExternalRefFileIndex self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_ExternalRefFileIndex self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_DecrementRefCounter(self, *args)

Handle_IGESBasic_ExternalRefFileIndex_swigregister = _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_swigregister
Handle_IGESBasic_ExternalRefFileIndex_swigregister(Handle_IGESBasic_ExternalRefFileIndex)

def Handle_IGESBasic_ExternalRefFileIndex_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_DownCast(thing)
Handle_IGESBasic_ExternalRefFileIndex_DownCast = _IGESBasic.Handle_IGESBasic_ExternalRefFileIndex_DownCast

class Handle_IGESBasic_OrderedGroup(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_OrderedGroup self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_OrderedGroup self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_OrderedGroup self, IGESBasic_OrderedGroup thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_OrderedGroup self, Handle_IGESBasic_OrderedGroup theHandle) -> Handle_IGESBasic_OrderedGroup
        assign(Handle_IGESBasic_OrderedGroup self, IGESBasic_OrderedGroup thePtr) -> Handle_IGESBasic_OrderedGroup
        assign(Handle_IGESBasic_OrderedGroup self, Handle_IGESBasic_OrderedGroup theHandle) -> Handle_IGESBasic_OrderedGroup

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_OrderedGroup self) -> IGESBasic_OrderedGroup

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_OrderedGroup self) -> IGESBasic_OrderedGroup

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_OrderedGroup self) -> IGESBasic_OrderedGroup

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_OrderedGroup___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_OrderedGroup___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_OrderedGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_OrderedGroup_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_OrderedGroup

    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_OrderedGroup self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_OrderedGroup_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_OrderedGroup_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_IGESBasic_OrderedGroup self, Handle_IGESData_HArray1OfIGESEntity allEntities)

        This method is used to set the fields of the class Group
        - allEntities : Used to store pointers to members of
        the Group.

        :type allEntities: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_Init(self, *args)


    def SetOrdered(self, *args):
        """
        SetOrdered(Handle_IGESBasic_OrderedGroup self, Standard_Boolean const mode)

        Sets a Group to be, or not to be  Ordered (according mode)

        :type mode: bool

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_SetOrdered(self, *args)


    def SetWithoutBackP(self, *args):
        """
        SetWithoutBackP(Handle_IGESBasic_OrderedGroup self, Standard_Boolean const mode)

        Sets a Group to be, or not to be  WithoutBackP

        :type mode: bool

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_SetWithoutBackP(self, *args)


    def IsOrdered(self, *args):
        """
        IsOrdered(Handle_IGESBasic_OrderedGroup self) -> Standard_Boolean

        Returns True if <me> is Ordered

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_IsOrdered(self, *args)


    def IsWithoutBackP(self, *args):
        """
        IsWithoutBackP(Handle_IGESBasic_OrderedGroup self) -> Standard_Boolean

        Returns True if <me> is WithoutBackP

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_IsWithoutBackP(self, *args)


    def SetUser(self, *args):
        """
        SetUser(Handle_IGESBasic_OrderedGroup self, Standard_Integer const type, Standard_Integer const form)

        Enforce a new value for the type and form

        :type type: int
        :type form: int

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_SetUser(self, *args)


    def SetNb(self, *args):
        """
        SetNb(Handle_IGESBasic_OrderedGroup self, Standard_Integer const nb)

        Changes the count of item
        If greater, new items are null
        If lower, old items are lost

        :type nb: int

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_SetNb(self, *args)


    def NbEntities(self, *args):
        """
        NbEntities(Handle_IGESBasic_OrderedGroup self) -> Standard_Integer

        returns the number of IGESEntities in the Group

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_NbEntities(self, *args)


    def Entity(self, *args):
        """
        Entity(Handle_IGESBasic_OrderedGroup self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the specific entity from the Group

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_Entity(self, *args)


    def Value(self, *args):
        """
        Value(Handle_IGESBasic_OrderedGroup self, Standard_Integer const Index) -> Handle_Standard_Transient

        returns the specific entity from the Group

        :type Index: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_Value(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_IGESBasic_OrderedGroup self, Standard_Integer const Index, Handle_IGESData_IGESEntity ent)

        Sets a new value for item <Index>

        :type Index: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_SetValue(self, *args)


    def IGESType(self, *args):
        """
        IGESType(Handle_IGESBasic_OrderedGroup self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESBasic_OrderedGroup self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESBasic_OrderedGroup self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESBasic_OrderedGroup self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESBasic_OrderedGroup self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESBasic_OrderedGroup self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESBasic_OrderedGroup self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESBasic_OrderedGroup self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESBasic_OrderedGroup self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESBasic_OrderedGroup self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESBasic_OrderedGroup self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESBasic_OrderedGroup self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESBasic_OrderedGroup self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESBasic_OrderedGroup self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESBasic_OrderedGroup self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESBasic_OrderedGroup self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESBasic_OrderedGroup self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESBasic_OrderedGroup self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESBasic_OrderedGroup self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESBasic_OrderedGroup self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESBasic_OrderedGroup self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESBasic_OrderedGroup self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESBasic_OrderedGroup self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESBasic_OrderedGroup self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESBasic_OrderedGroup self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESBasic_OrderedGroup self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESBasic_OrderedGroup self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESBasic_OrderedGroup self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESBasic_OrderedGroup self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESBasic_OrderedGroup self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESBasic_OrderedGroup self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESBasic_OrderedGroup self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESBasic_OrderedGroup self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESBasic_OrderedGroup self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESBasic_OrderedGroup self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESBasic_OrderedGroup self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESBasic_OrderedGroup self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESBasic_OrderedGroup self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESBasic_OrderedGroup self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESBasic_OrderedGroup self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESBasic_OrderedGroup self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESBasic_OrderedGroup self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESBasic_OrderedGroup self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESBasic_OrderedGroup self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESBasic_OrderedGroup self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESBasic_OrderedGroup self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESBasic_OrderedGroup self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESBasic_OrderedGroup self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESBasic_OrderedGroup self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESBasic_OrderedGroup self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESBasic_OrderedGroup self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESBasic_OrderedGroup self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESBasic_OrderedGroup self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESBasic_OrderedGroup self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESBasic_OrderedGroup self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESBasic_OrderedGroup self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESBasic_OrderedGroup self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESBasic_OrderedGroup self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESBasic_OrderedGroup self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESBasic_OrderedGroup self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESBasic_OrderedGroup self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESBasic_OrderedGroup self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESBasic_OrderedGroup self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESBasic_OrderedGroup self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESBasic_OrderedGroup self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_OrderedGroup self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_OrderedGroup self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_OrderedGroup self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_OrderedGroup self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_OrderedGroup self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_OrderedGroup self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_OrderedGroup self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_OrderedGroup self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_OrderedGroup self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_OrderedGroup_DecrementRefCounter(self, *args)

Handle_IGESBasic_OrderedGroup_swigregister = _IGESBasic.Handle_IGESBasic_OrderedGroup_swigregister
Handle_IGESBasic_OrderedGroup_swigregister(Handle_IGESBasic_OrderedGroup)

def Handle_IGESBasic_OrderedGroup_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_OrderedGroup_DownCast(thing)
Handle_IGESBasic_OrderedGroup_DownCast = _IGESBasic.Handle_IGESBasic_OrderedGroup_DownCast

class IGESBasic_HArray1OfHArray1OfIGESEntity(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_HArray1OfHArray1OfIGESEntity
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_HArray1OfHArray1OfIGESEntity(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_HArray1OfHArray1OfIGESEntity self, Standard_Integer const low, Standard_Integer const up) -> IGESBasic_HArray1OfHArray1OfIGESEntity

        :type low: int
        :type up: int

        """
        this = _IGESBasic.new_IGESBasic_HArray1OfHArray1OfIGESEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Lower(self, *args):
        """
        Lower(IGESBasic_HArray1OfHArray1OfIGESEntity self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfIGESEntity_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(IGESBasic_HArray1OfHArray1OfIGESEntity self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfIGESEntity_Upper(self, *args)


    def Length(self, *args):
        """
        Length(IGESBasic_HArray1OfHArray1OfIGESEntity self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfIGESEntity_Length(self, *args)


    def SetValue(self, *args):
        """
        SetValue(IGESBasic_HArray1OfHArray1OfIGESEntity self, Standard_Integer const num, Handle_IGESData_HArray1OfIGESEntity val)

        :type num: int
        :type val: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfIGESEntity_SetValue(self, *args)


    def Value(self, *args):
        """
        Value(IGESBasic_HArray1OfHArray1OfIGESEntity self, Standard_Integer const num) -> Handle_IGESData_HArray1OfIGESEntity

        :type num: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfIGESEntity_Value(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfIGESEntity_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_HArray1OfHArray1OfIGESEntity_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_HArray1OfHArray1OfIGESEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_HArray1OfHArray1OfIGESEntity
IGESBasic_HArray1OfHArray1OfIGESEntity_swigregister = _IGESBasic.IGESBasic_HArray1OfHArray1OfIGESEntity_swigregister
IGESBasic_HArray1OfHArray1OfIGESEntity_swigregister(IGESBasic_HArray1OfHArray1OfIGESEntity)

def IGESBasic_HArray1OfHArray1OfIGESEntity_get_type_name(*args):
    """
    IGESBasic_HArray1OfHArray1OfIGESEntity_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_HArray1OfHArray1OfIGESEntity_get_type_name(*args)

def IGESBasic_HArray1OfHArray1OfIGESEntity_get_type_descriptor(*args):
    """
    IGESBasic_HArray1OfHArray1OfIGESEntity_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_HArray1OfHArray1OfIGESEntity_get_type_descriptor(*args)

class Handle_IGESBasic_GeneralModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_GeneralModule self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_GeneralModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_GeneralModule self, IGESBasic_GeneralModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_GeneralModule self, Handle_IGESBasic_GeneralModule theHandle) -> Handle_IGESBasic_GeneralModule
        assign(Handle_IGESBasic_GeneralModule self, IGESBasic_GeneralModule thePtr) -> Handle_IGESBasic_GeneralModule
        assign(Handle_IGESBasic_GeneralModule self, Handle_IGESBasic_GeneralModule theHandle) -> Handle_IGESBasic_GeneralModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_GeneralModule self) -> IGESBasic_GeneralModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_GeneralModule self) -> IGESBasic_GeneralModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_GeneralModule self) -> IGESBasic_GeneralModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_GeneralModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_GeneralModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_GeneralModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_GeneralModule_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_GeneralModule

    def OwnSharedCase(self, *args):
        """
        OwnSharedCase(Handle_IGESBasic_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Lists the Entities shared by a given IGESEntity <ent>, from
        its specific parameters : specific for each type

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_OwnSharedCase(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(Handle_IGESBasic_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> IGESData_DirChecker

        Returns a DirChecker, specific for each type of Entity
        (identified by its Case Number) : this DirChecker defines
        constraints which must be respected by the DirectoryPart

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_DirChecker(self, *args)


    def OwnCheckCase(self, *args):
        """
        OwnCheckCase(Handle_IGESBasic_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_OwnCheckCase(self, *args)


    def NewVoid(self, *args):
        """
        NewVoid(Handle_IGESBasic_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entto) -> Standard_Boolean

        Specific creation of a new void entity

        :type CN: int
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_NewVoid(self, *args)


    def OwnCopyCase(self, *args):
        """
        OwnCopyCase(Handle_IGESBasic_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Copies parameters which are specific of each Type of Entity

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_OwnCopyCase(self, *args)


    def CategoryNumber(self, *args):
        """
        CategoryNumber(Handle_IGESBasic_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Standard_Integer

        Returns a category number which characterizes an entity
        Structure for Groups, Figures & Co
        Description for External Refs
        Auxiliary for other

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_CategoryNumber(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_GeneralModule self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_GeneralModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_GeneralModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FillSharedCase(self, *args):
        """
        FillSharedCase(Handle_IGESBasic_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Fills the list of Entities shared by an IGESEntity <ent>,
        according a Case Number <CN> (formerly computed by CaseNum).
        Considers Properties and Directory Part, and calls
        OwnSharedCase (which is adapted to each Type of Entity)

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_FillSharedCase(self, *args)


    def ListImpliedCase(self, *args):
        """
        ListImpliedCase(Handle_IGESBasic_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Lists the Implied References of <ent>. Here, these are the
        Associativities, plus the Entities defined by OwnSharedCase

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_ListImpliedCase(self, *args)


    def OwnImpliedCase(self, *args):
        """
        OwnImpliedCase(Handle_IGESBasic_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, Interface_EntityIterator iter)

        Specific list of Entities implied by a given IGESEntity <ent>
        (in addition to Associativities). By default, there are none,
        but this method can be redefined as required

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_OwnImpliedCase(self, *args)


    def CheckCase(self, *args):
        """
        CheckCase(Handle_IGESBasic_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Semantic Checking of an IGESEntity. Performs general Checks,
        which use DirChecker, then call OwnCheck which does a check
        specific for each type of Entity

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_CheckCase(self, *args)


    def CanCopy(self, *args):
        """
        CanCopy(Handle_IGESBasic_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent) -> Standard_Boolean

        Specific answer to the question "is Copy properly implemented"
        For IGES, answer is always True

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_CanCopy(self, *args)


    def CopyCase(self, *args):
        """
        CopyCase(Handle_IGESBasic_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC)

        Copy ("Deep") from <entfrom> to <entto> (same type)
        by using a CopyTool which provides its working Map.
        For IGESEntities, Copies general data (Directory Part, List of
        Properties) and call OwnCopyCase

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_CopyCase(self, *args)


    def RenewImpliedCase(self, *args):
        """
        RenewImpliedCase(Handle_IGESBasic_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC)

        Renewing of Implied References.
        For IGESEntities, Copies general data(List of Associativities)
        and calls OwnRenewCase

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_RenewImpliedCase(self, *args)


    def OwnRenewCase(self, *args):
        """
        OwnRenewCase(Handle_IGESBasic_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity entfrom, Handle_IGESData_IGESEntity entto, Interface_CopyTool TC)

        Renews parameters which are specific of each Type of Entity :
        the provided default does nothing, but this method may be
        redefined as required

        :type CN: int
        :type entfrom: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type entto: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_OwnRenewCase(self, *args)


    def WhenDeleteCase(self, *args):
        """
        WhenDeleteCase(Handle_IGESBasic_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Standard_Boolean const dispatched)

        Prepares an IGES Entity for delete : works on directory part
        then calls OwnDeleteCase
        While dispatch requires to copy the entities, <dispatched> is
        ignored, entities are cleared in any case

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type dispatched: bool

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_WhenDeleteCase(self, *args)


    def OwnDeleteCase(self, *args):
        """
        OwnDeleteCase(Handle_IGESBasic_GeneralModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent)

        Specific preparation for delete, acts on own parameters
        Default does nothing, to be redefined as required

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_OwnDeleteCase(self, *args)


    def Name(self, *args):
        """
        Name(Handle_IGESBasic_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_ShareTool shares) -> Handle_TCollection_HAsciiString

        Returns the name of an IGES Entity (its NameValue)
        Can be redefined for an even more specific case ...

        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_Name(self, *args)


    def FillShared(self, *args):
        """
        FillShared(Handle_IGESBasic_GeneralModule self, Handle_Interface_InterfaceModel model, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        Specific filling of the list of Entities shared by an Entity
        <ent>, according a Case Number <CN> (formerly computed by
        CaseNum), considered in the context of a Model <model>
        Default calls FillSharedCase (i.e., ignores the model)
        Can be redefined to use the model for working

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_FillShared(self, *args)


    def Share(self, *args):
        """
        Share(Handle_IGESBasic_GeneralModule self, Interface_EntityIterator iter, Handle_Standard_Transient shared)

        Adds an Entity to a Shared List (uses GetOneItem on <iter>)

        :type iter: OCC.wrapper.Interface.Interface_EntityIterator
        :type shared: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_Share(self, *args)


    def ListImplied(self, *args):
        """
        ListImplied(Handle_IGESBasic_GeneralModule self, Handle_Interface_InterfaceModel model, Standard_Integer const CN, Handle_Standard_Transient ent, Interface_EntityIterator iter)

        List the Implied References of <ent> considered in the context
        of a Model <model> : i.e. the Entities which are Referenced
        while not considered as Shared (not copied if <ent> is,
        references not renewed by CopyCase but by ImpliedCase, only
        if referenced Entities have been Copied too)
        FillShared + ListImplied give the complete list of References
        Default calls ListImpliedCase (i.e. ignores the model)
        Can be redefined to use the model for working

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :type CN: int
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_ListImplied(self, *args)


    def Dispatch(self, *args):
        """
        Dispatch(Handle_IGESBasic_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC) -> Standard_Boolean

        Dispatches an entity
        Returns True if it works by copy, False if it just duplicates
        the starting Handle

        Dispatching means producing a new entity, image of the
        starting one, in order to be put into a new Model, this Model
        being itself the result of a dispatch from an original Model

        According to the cases, dispatch can either
        * just return <entto> as equating <entfrom>
        -> the new model designates the starting entity : it is
        lighter, but the dispatched entity being shared might not be
        modified for dispatch
        * copy <entfrom> to <entto>
        by calling NewVoid+CopyCase (two steps) or NewCopiedCase (1)
        -> the dispatched entity is a COPY, hence it can be modified

        The provided default just duplicates the handle without
        copying, then returns False. Can be redefined

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_Dispatch(self, *args)


    def NewCopiedCase(self, *args):
        """
        NewCopiedCase(Handle_IGESBasic_GeneralModule self, Standard_Integer const CN, Handle_Standard_Transient entfrom, Handle_Standard_Transient entto, Interface_CopyTool TC) -> Standard_Boolean

        Specific operator (create+copy) defaulted to do nothing.
        It can be redefined : When it is not possible to work in two
        steps (NewVoid then CopyCase). This can occur when there is
        no default constructor : hence the result <entto> must be
        created with an effective definition.
        Remark : if NewCopiedCase is defined, CopyCase has nothing to do
        Returns True if it has produced something, false else

        :type CN: int
        :type entfrom: OCC.wrapper.Standard.Handle_Standard_Transient
        :type entto: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TC: OCC.wrapper.Interface.Interface_CopyTool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_NewCopiedCase(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_GeneralModule self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_GeneralModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_GeneralModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_GeneralModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_GeneralModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_GeneralModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_GeneralModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_GeneralModule self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_GeneralModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_GeneralModule_DecrementRefCounter(self, *args)

Handle_IGESBasic_GeneralModule_swigregister = _IGESBasic.Handle_IGESBasic_GeneralModule_swigregister
Handle_IGESBasic_GeneralModule_swigregister(Handle_IGESBasic_GeneralModule)

def Handle_IGESBasic_GeneralModule_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_GeneralModule_DownCast(thing)
Handle_IGESBasic_GeneralModule_DownCast = _IGESBasic.Handle_IGESBasic_GeneralModule_DownCast

class IGESBasic_ExternalRefName(IGESData.IGESData_IGESEntity):
    """
    defines ExternalRefName, Type <416> Form <3>
    in package IGESBasic
    Used when it is assumed that a copy of the subfigure
    exists in native form on the receiving system
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_ExternalRefName
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_ExternalRefName(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_ExternalRefName self) -> IGESBasic_ExternalRefName

        defines ExternalRefName, Type <416> Form <3>
        in package IGESBasic
        Used when it is assumed that a copy of the subfigure
        exists in native form on the receiving system
        """
        this = _IGESBasic.new_IGESBasic_ExternalRefName(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESBasic_ExternalRefName self, Handle_TCollection_HAsciiString anExtName)

        This method is used to set the fields of the class
        ExternalRefName
        - anExtName : External Reference Entity Symbolic Name

        :type anExtName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.IGESBasic_ExternalRefName_Init(self, *args)


    def ReferenceName(self, *args):
        """
        ReferenceName(IGESBasic_ExternalRefName self) -> Handle_TCollection_HAsciiString

        returns External Reference Entity Symbolic Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.IGESBasic_ExternalRefName_ReferenceName(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_ExternalRefName_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_ExternalRefName_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_ExternalRefName_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_ExternalRefName
IGESBasic_ExternalRefName_swigregister = _IGESBasic.IGESBasic_ExternalRefName_swigregister
IGESBasic_ExternalRefName_swigregister(IGESBasic_ExternalRefName)

def IGESBasic_ExternalRefName_get_type_name(*args):
    """
    IGESBasic_ExternalRefName_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_ExternalRefName_get_type_name(*args)

def IGESBasic_ExternalRefName_get_type_descriptor(*args):
    """
    IGESBasic_ExternalRefName_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_ExternalRefName_get_type_descriptor(*args)

class Handle_IGESBasic_HArray1OfHArray1OfIGESEntity(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_HArray1OfHArray1OfIGESEntity self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_HArray1OfHArray1OfIGESEntity self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_HArray1OfHArray1OfIGESEntity self, IGESBasic_HArray1OfHArray1OfIGESEntity thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_HArray1OfHArray1OfIGESEntity self, Handle_IGESBasic_HArray1OfHArray1OfIGESEntity theHandle) -> Handle_IGESBasic_HArray1OfHArray1OfIGESEntity
        assign(Handle_IGESBasic_HArray1OfHArray1OfIGESEntity self, IGESBasic_HArray1OfHArray1OfIGESEntity thePtr) -> Handle_IGESBasic_HArray1OfHArray1OfIGESEntity
        assign(Handle_IGESBasic_HArray1OfHArray1OfIGESEntity self, Handle_IGESBasic_HArray1OfHArray1OfIGESEntity theHandle) -> Handle_IGESBasic_HArray1OfHArray1OfIGESEntity

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_HArray1OfHArray1OfIGESEntity self) -> IGESBasic_HArray1OfHArray1OfIGESEntity

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_HArray1OfHArray1OfIGESEntity self) -> IGESBasic_HArray1OfHArray1OfIGESEntity

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_HArray1OfHArray1OfIGESEntity self) -> IGESBasic_HArray1OfHArray1OfIGESEntity

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_HArray1OfHArray1OfIGESEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_HArray1OfHArray1OfIGESEntity

    def Lower(self, *args):
        """
        Lower(Handle_IGESBasic_HArray1OfHArray1OfIGESEntity self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(Handle_IGESBasic_HArray1OfHArray1OfIGESEntity self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_Upper(self, *args)


    def Length(self, *args):
        """
        Length(Handle_IGESBasic_HArray1OfHArray1OfIGESEntity self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_Length(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_IGESBasic_HArray1OfHArray1OfIGESEntity self, Standard_Integer const num, Handle_IGESData_HArray1OfIGESEntity val)

        :type num: int
        :type val: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_SetValue(self, *args)


    def Value(self, *args):
        """
        Value(Handle_IGESBasic_HArray1OfHArray1OfIGESEntity self, Standard_Integer const num) -> Handle_IGESData_HArray1OfIGESEntity

        :type num: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_Value(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_HArray1OfHArray1OfIGESEntity self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_HArray1OfHArray1OfIGESEntity self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_HArray1OfHArray1OfIGESEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_HArray1OfHArray1OfIGESEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_HArray1OfHArray1OfIGESEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_HArray1OfHArray1OfIGESEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_HArray1OfHArray1OfIGESEntity self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_HArray1OfHArray1OfIGESEntity self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_HArray1OfHArray1OfIGESEntity self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_HArray1OfHArray1OfIGESEntity self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_DecrementRefCounter(self, *args)

Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_swigregister = _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_swigregister
Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_swigregister(Handle_IGESBasic_HArray1OfHArray1OfIGESEntity)

def Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_DownCast(thing)
Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_DownCast = _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfIGESEntity_DownCast

class Handle_IGESBasic_ExternalRefName(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_ExternalRefName self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_ExternalRefName self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_ExternalRefName self, IGESBasic_ExternalRefName thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_ExternalRefName self, Handle_IGESBasic_ExternalRefName theHandle) -> Handle_IGESBasic_ExternalRefName
        assign(Handle_IGESBasic_ExternalRefName self, IGESBasic_ExternalRefName thePtr) -> Handle_IGESBasic_ExternalRefName
        assign(Handle_IGESBasic_ExternalRefName self, Handle_IGESBasic_ExternalRefName theHandle) -> Handle_IGESBasic_ExternalRefName

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_ExternalRefName self) -> IGESBasic_ExternalRefName

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_ExternalRefName self) -> IGESBasic_ExternalRefName

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_ExternalRefName self) -> IGESBasic_ExternalRefName

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_ExternalRefName___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_ExternalRefName___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_ExternalRefName(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_ExternalRefName_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_ExternalRefName

    def Init(self, *args):
        """
        Init(Handle_IGESBasic_ExternalRefName self, Handle_TCollection_HAsciiString anExtName)

        This method is used to set the fields of the class
        ExternalRefName
        - anExtName : External Reference Entity Symbolic Name

        :type anExtName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_Init(self, *args)


    def ReferenceName(self, *args):
        """
        ReferenceName(Handle_IGESBasic_ExternalRefName self) -> Handle_TCollection_HAsciiString

        returns External Reference Entity Symbolic Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_ReferenceName(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_ExternalRefName self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_ExternalRefName_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_ExternalRefName_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESBasic_ExternalRefName self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESBasic_ExternalRefName self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESBasic_ExternalRefName self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESBasic_ExternalRefName self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESBasic_ExternalRefName self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESBasic_ExternalRefName self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESBasic_ExternalRefName self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESBasic_ExternalRefName self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESBasic_ExternalRefName self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESBasic_ExternalRefName self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESBasic_ExternalRefName self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESBasic_ExternalRefName self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESBasic_ExternalRefName self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESBasic_ExternalRefName self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESBasic_ExternalRefName self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESBasic_ExternalRefName self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESBasic_ExternalRefName self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESBasic_ExternalRefName self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESBasic_ExternalRefName self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESBasic_ExternalRefName self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESBasic_ExternalRefName self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESBasic_ExternalRefName self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESBasic_ExternalRefName self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESBasic_ExternalRefName self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESBasic_ExternalRefName self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESBasic_ExternalRefName self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESBasic_ExternalRefName self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESBasic_ExternalRefName self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESBasic_ExternalRefName self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESBasic_ExternalRefName self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESBasic_ExternalRefName self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESBasic_ExternalRefName self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESBasic_ExternalRefName self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESBasic_ExternalRefName self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESBasic_ExternalRefName self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESBasic_ExternalRefName self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESBasic_ExternalRefName self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESBasic_ExternalRefName self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESBasic_ExternalRefName self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESBasic_ExternalRefName self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESBasic_ExternalRefName self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESBasic_ExternalRefName self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESBasic_ExternalRefName self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESBasic_ExternalRefName self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESBasic_ExternalRefName self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESBasic_ExternalRefName self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESBasic_ExternalRefName self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESBasic_ExternalRefName self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESBasic_ExternalRefName self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESBasic_ExternalRefName self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESBasic_ExternalRefName self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESBasic_ExternalRefName self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESBasic_ExternalRefName self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESBasic_ExternalRefName self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESBasic_ExternalRefName self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESBasic_ExternalRefName self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESBasic_ExternalRefName self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESBasic_ExternalRefName self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESBasic_ExternalRefName self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESBasic_ExternalRefName self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESBasic_ExternalRefName self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESBasic_ExternalRefName self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESBasic_ExternalRefName self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESBasic_ExternalRefName self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESBasic_ExternalRefName self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_ExternalRefName self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_ExternalRefName self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_ExternalRefName self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_ExternalRefName self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_ExternalRefName self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_ExternalRefName self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_ExternalRefName self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_ExternalRefName self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_ExternalRefName self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_ExternalRefName_DecrementRefCounter(self, *args)

Handle_IGESBasic_ExternalRefName_swigregister = _IGESBasic.Handle_IGESBasic_ExternalRefName_swigregister
Handle_IGESBasic_ExternalRefName_swigregister(Handle_IGESBasic_ExternalRefName)

def Handle_IGESBasic_ExternalRefName_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_ExternalRefName_DownCast(thing)
Handle_IGESBasic_ExternalRefName_DownCast = _IGESBasic.Handle_IGESBasic_ExternalRefName_DownCast

class IGESBasic_ToolExternalRefName(object):
    """
    Tool to work on a ExternalRefName. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESBasic_ToolExternalRefName self) -> IGESBasic_ToolExternalRefName

        Returns a ToolExternalRefName, ready to work


        """
        this = _IGESBasic.new_IGESBasic_ToolExternalRefName(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESBasic_ToolExternalRefName self, Handle_IGESBasic_ExternalRefName ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefName
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESBasic.IGESBasic_ToolExternalRefName_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESBasic_ToolExternalRefName self, Handle_IGESBasic_ExternalRefName ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefName
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESBasic.IGESBasic_ToolExternalRefName_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESBasic_ToolExternalRefName self, Handle_IGESBasic_ExternalRefName ent, Interface_EntityIterator iter)

        Lists the Entities shared by a ExternalRefName <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefName
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.IGESBasic_ToolExternalRefName_OwnShared(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESBasic_ToolExternalRefName self, Handle_IGESBasic_ExternalRefName ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefName
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESBasic.IGESBasic_ToolExternalRefName_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESBasic_ToolExternalRefName self, Handle_IGESBasic_ExternalRefName ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefName
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESBasic.IGESBasic_ToolExternalRefName_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESBasic_ToolExternalRefName self, Handle_IGESBasic_ExternalRefName entfrom, Handle_IGESBasic_ExternalRefName entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefName
        :type entto: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefName
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESBasic.IGESBasic_ToolExternalRefName_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESBasic_ToolExternalRefName self, Handle_IGESBasic_ExternalRefName ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_ExternalRefName
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESBasic.IGESBasic_ToolExternalRefName_OwnDump(self, *args)

    __swig_destroy__ = _IGESBasic.delete_IGESBasic_ToolExternalRefName
IGESBasic_ToolExternalRefName_swigregister = _IGESBasic.IGESBasic_ToolExternalRefName_swigregister
IGESBasic_ToolExternalRefName_swigregister(IGESBasic_ToolExternalRefName)

class IGESBasic_SpecificModule(IGESData.IGESData_SpecificModule):
    """
    Defines Services attached to IGES Entities :
    Dump & OwnCorrect, for IGESBasic
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESBasic_SpecificModule
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESBasic_SpecificModule(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESBasic_SpecificModule self) -> IGESBasic_SpecificModule

        Creates a SpecificModule from IGESBasic & puts it into SpecificLib


        """
        this = _IGESBasic.new_IGESBasic_SpecificModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def OwnDump(self, *args):
        """
        OwnDump(IGESBasic_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Specific Dump (own parameters) for IGESBasic

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESBasic.IGESBasic_SpecificModule_OwnDump(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESBasic_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Performs non-ambiguous Corrections on Entities which support
        them (AssocGroupType,Hierarchy,Name,SingleParent)

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.IGESBasic_SpecificModule_OwnCorrect(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESBasic.IGESBasic_SpecificModule_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESBasic.IGESBasic_SpecificModule_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.IGESBasic_SpecificModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESBasic.delete_IGESBasic_SpecificModule
IGESBasic_SpecificModule_swigregister = _IGESBasic.IGESBasic_SpecificModule_swigregister
IGESBasic_SpecificModule_swigregister(IGESBasic_SpecificModule)

def IGESBasic_SpecificModule_get_type_name(*args):
    """
    IGESBasic_SpecificModule_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESBasic.IGESBasic_SpecificModule_get_type_name(*args)

def IGESBasic_SpecificModule_get_type_descriptor(*args):
    """
    IGESBasic_SpecificModule_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESBasic.IGESBasic_SpecificModule_get_type_descriptor(*args)

class Handle_IGESBasic_HArray1OfHArray1OfReal(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_HArray1OfHArray1OfReal self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_HArray1OfHArray1OfReal self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_HArray1OfHArray1OfReal self, IGESBasic_HArray1OfHArray1OfReal thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_HArray1OfHArray1OfReal self, Handle_IGESBasic_HArray1OfHArray1OfReal theHandle) -> Handle_IGESBasic_HArray1OfHArray1OfReal
        assign(Handle_IGESBasic_HArray1OfHArray1OfReal self, IGESBasic_HArray1OfHArray1OfReal thePtr) -> Handle_IGESBasic_HArray1OfHArray1OfReal
        assign(Handle_IGESBasic_HArray1OfHArray1OfReal self, Handle_IGESBasic_HArray1OfHArray1OfReal theHandle) -> Handle_IGESBasic_HArray1OfHArray1OfReal

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_HArray1OfHArray1OfReal self) -> IGESBasic_HArray1OfHArray1OfReal

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_HArray1OfHArray1OfReal self) -> IGESBasic_HArray1OfHArray1OfReal

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_HArray1OfHArray1OfReal self) -> IGESBasic_HArray1OfHArray1OfReal

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_HArray1OfHArray1OfReal(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_HArray1OfHArray1OfReal

    def Lower(self, *args):
        """
        Lower(Handle_IGESBasic_HArray1OfHArray1OfReal self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(Handle_IGESBasic_HArray1OfHArray1OfReal self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal_Upper(self, *args)


    def Length(self, *args):
        """
        Length(Handle_IGESBasic_HArray1OfHArray1OfReal self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal_Length(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_IGESBasic_HArray1OfHArray1OfReal self, Standard_Integer const num, Handle_TColStd_HArray1OfReal val)

        :type num: int
        :type val: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal_SetValue(self, *args)


    def Value(self, *args):
        """
        Value(Handle_IGESBasic_HArray1OfHArray1OfReal self, Standard_Integer const num) -> Handle_TColStd_HArray1OfReal

        :type num: int
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfReal

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal_Value(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_HArray1OfHArray1OfReal self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_HArray1OfHArray1OfReal self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_HArray1OfHArray1OfReal self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_HArray1OfHArray1OfReal self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_HArray1OfHArray1OfReal self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_HArray1OfHArray1OfReal self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_HArray1OfHArray1OfReal self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_HArray1OfHArray1OfReal self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_HArray1OfHArray1OfReal self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_HArray1OfHArray1OfReal self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal_DecrementRefCounter(self, *args)

Handle_IGESBasic_HArray1OfHArray1OfReal_swigregister = _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal_swigregister
Handle_IGESBasic_HArray1OfHArray1OfReal_swigregister(Handle_IGESBasic_HArray1OfHArray1OfReal)

def Handle_IGESBasic_HArray1OfHArray1OfReal_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal_DownCast(thing)
Handle_IGESBasic_HArray1OfHArray1OfReal_DownCast = _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfReal_DownCast

class Handle_IGESBasic_SpecificModule(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_SpecificModule self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_SpecificModule_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_SpecificModule self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_SpecificModule_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_SpecificModule self, IGESBasic_SpecificModule thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_SpecificModule_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_SpecificModule self, Handle_IGESBasic_SpecificModule theHandle) -> Handle_IGESBasic_SpecificModule
        assign(Handle_IGESBasic_SpecificModule self, IGESBasic_SpecificModule thePtr) -> Handle_IGESBasic_SpecificModule
        assign(Handle_IGESBasic_SpecificModule self, Handle_IGESBasic_SpecificModule theHandle) -> Handle_IGESBasic_SpecificModule

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_SpecificModule_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_SpecificModule self) -> IGESBasic_SpecificModule

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_SpecificModule_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_SpecificModule self) -> IGESBasic_SpecificModule

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_SpecificModule___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_SpecificModule self) -> IGESBasic_SpecificModule

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_SpecificModule___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_SpecificModule___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_SpecificModule___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_SpecificModule(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_SpecificModule_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_SpecificModule

    def OwnDump(self, *args):
        """
        OwnDump(Handle_IGESBasic_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Specific Dump (own parameters) for IGESBasic

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESBasic.Handle_IGESBasic_SpecificModule_OwnDump(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(Handle_IGESBasic_SpecificModule self, Standard_Integer const CN, Handle_IGESData_IGESEntity ent) -> Standard_Boolean

        Performs non-ambiguous Corrections on Entities which support
        them (AssocGroupType,Hierarchy,Name,SingleParent)

        :type CN: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SpecificModule_OwnCorrect(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_SpecificModule self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_SpecificModule_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_SpecificModule_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_SpecificModule_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_SpecificModule self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_SpecificModule_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_SpecificModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_SpecificModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SpecificModule_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_SpecificModule self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_SpecificModule self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SpecificModule_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_SpecificModule self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_SpecificModule_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_SpecificModule self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SpecificModule_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_SpecificModule self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_SpecificModule_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_SpecificModule self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SpecificModule_DecrementRefCounter(self, *args)

Handle_IGESBasic_SpecificModule_swigregister = _IGESBasic.Handle_IGESBasic_SpecificModule_swigregister
Handle_IGESBasic_SpecificModule_swigregister(Handle_IGESBasic_SpecificModule)

def Handle_IGESBasic_SpecificModule_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_SpecificModule_DownCast(thing)
Handle_IGESBasic_SpecificModule_DownCast = _IGESBasic.Handle_IGESBasic_SpecificModule_DownCast

class Handle_IGESBasic_SingleParent(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_SingleParent self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_SingleParent self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_SingleParent self, IGESBasic_SingleParent thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_SingleParent self, Handle_IGESBasic_SingleParent theHandle) -> Handle_IGESBasic_SingleParent
        assign(Handle_IGESBasic_SingleParent self, IGESBasic_SingleParent thePtr) -> Handle_IGESBasic_SingleParent
        assign(Handle_IGESBasic_SingleParent self, Handle_IGESBasic_SingleParent theHandle) -> Handle_IGESBasic_SingleParent

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_SingleParent self) -> IGESBasic_SingleParent

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_SingleParent self) -> IGESBasic_SingleParent

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_SingleParent self) -> IGESBasic_SingleParent

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_SingleParent___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_SingleParent___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_SingleParent(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_SingleParent_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_SingleParent

    def Init(self, *args):
        """
        Init(Handle_IGESBasic_SingleParent self, Standard_Integer const nbParentEntities, Handle_IGESData_IGESEntity aParentEntity, Handle_IGESData_HArray1OfIGESEntity allChildren)

        This method is used to set the fields of the class
        SingleParent
        - nbParentEntities : Indicates number of Parents, always = 1
        - aParentEntity    : Used to hold the Parent Entity
        - allChildren      : Used to hold the children

        :type nbParentEntities: int
        :type aParentEntity: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type allChildren: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_Init(self, *args)


    def NbParentEntities(self, *args):
        """
        NbParentEntities(Handle_IGESBasic_SingleParent self) -> Standard_Integer

        returns the number of Parent Entities, which should be 1

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_NbParentEntities(self, *args)


    def SingleParent(self, *args):
        """
        SingleParent(Handle_IGESBasic_SingleParent self) -> Handle_IGESData_IGESEntity

        Returns the Parent Entity (inherited method)

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_SingleParent(self, *args)


    def NbChildren(self, *args):
        """
        NbChildren(Handle_IGESBasic_SingleParent self) -> Standard_Integer

        returns the number of children of the Parent

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_NbChildren(self, *args)


    def Child(self, *args):
        """
        Child(Handle_IGESBasic_SingleParent self, Standard_Integer const Index) -> Handle_IGESData_IGESEntity

        returns the specific child as indicated by Index
        raises exception if Index <= 0 or Index > NbChildren()

        :type Index: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_Child(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_SingleParent self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_SingleParent_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_SingleParent_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IGESType(self, *args):
        """
        IGESType(Handle_IGESBasic_SingleParent self) -> IGESData_IGESType

        gives IGES typing info (includes "Type" and "Form" data)

        :rtype: OCC.wrapper.IGESData.IGESData_IGESType

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_IGESType(self, *args)


    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_IGESBasic_SingleParent self) -> Standard_Integer

        gives IGES Type Number (often coupled with Form Number)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_TypeNumber(self, *args)


    def FormNumber(self, *args):
        """
        FormNumber(Handle_IGESBasic_SingleParent self) -> Standard_Integer

        Returns the form number for that
        type of an IGES entity. The default form number is 0.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_FormNumber(self, *args)


    def DirFieldEntity(self, *args):
        """
        DirFieldEntity(Handle_IGESBasic_SingleParent self, Standard_Integer const fieldnum) -> Handle_IGESData_IGESEntity

        Returns the Entity which has been recorded for a given
        Field Number, i.e. without any cast. Maps with :
        3 : Structure   4 : LineFont     5 : LevelList     6 : View
        7 : Transf(ormation Matrix)      8 : LabelDisplay
        13 : Color.  Other values give a null handle
        It can then be of any kind, while specific items have a Type

        :type fieldnum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_DirFieldEntity(self, *args)


    def HasStructure(self, *args):
        """
        HasStructure(Handle_IGESBasic_SingleParent self) -> Standard_Boolean

        returns True if an IGESEntity is defined with a Structure
        (it is normally reserved for certain classes, such as Macros)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_HasStructure(self, *args)


    def Structure(self, *args):
        """
        Structure(Handle_IGESBasic_SingleParent self) -> Handle_IGESData_IGESEntity

        Returns Structure (used by some types of IGES Entities only)
        Returns a Null Handle if Structure is not defined

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_Structure(self, *args)


    def DefLineFont(self, *args):
        """
        DefLineFont(Handle_IGESBasic_SingleParent self) -> IGESData_DefType

        Returns the definition status of LineFont

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_DefLineFont(self, *args)


    def RankLineFont(self, *args):
        """
        RankLineFont(Handle_IGESBasic_SingleParent self) -> Standard_Integer

        Returns LineFont definition as an Integer (if defined as Rank)
        If LineFont is defined as an Entity, returns a negative value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_RankLineFont(self, *args)


    def LineFont(self, *args):
        """
        LineFont(Handle_IGESBasic_SingleParent self) -> Handle_IGESData_LineFontEntity

        Returns LineFont as an Entity (if defined as Reference)
        Returns a Null Handle if DefLineFont is not "DefReference"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_LineFont(self, *args)


    def DefLevel(self, *args):
        """
        DefLevel(Handle_IGESBasic_SingleParent self) -> IGESData_DefList

        Returns the definition status of Level

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_DefLevel(self, *args)


    def Level(self, *args):
        """
        Level(Handle_IGESBasic_SingleParent self) -> Standard_Integer

        Returns the level the entity
        belongs to. Returns -1 if the entity belongs to more than one  level.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_Level(self, *args)


    def LevelList(self, *args):
        """
        LevelList(Handle_IGESBasic_SingleParent self) -> Handle_IGESData_LevelListEntity

        Returns LevelList if Level is
        defined as a list. Returns a null handle if DefLevel is not DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_LevelList(self, *args)


    def DefView(self, *args):
        """
        DefView(Handle_IGESBasic_SingleParent self) -> IGESData_DefList

        Returns the definition status of
        the view. This can be: none, one or several.

        :rtype: OCC.wrapper.IGESData.IGESData_DefList

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_DefView(self, *args)


    def View(self, *args):
        """
        View(Handle_IGESBasic_SingleParent self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity.
        This view can be a single view or a list of views.
        Warning A null handle is returned if the view is not defined.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_View(self, *args)


    def SingleView(self, *args):
        """
        SingleView(Handle_IGESBasic_SingleParent self) -> Handle_IGESData_ViewKindEntity

        Returns the view as a single view
        if it was defined as such and not as a list of views.
        Warning A null handle is returned if DefView does not have the value DefOne.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_SingleView(self, *args)


    def ViewList(self, *args):
        """
        ViewList(Handle_IGESBasic_SingleParent self) -> Handle_IGESData_ViewKindEntity

        Returns the view of this IGES entity as a list.
        Warning A null handle is returned if the
        definition status does not have the value DefSeveral.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_ViewList(self, *args)


    def HasTransf(self, *args):
        """
        HasTransf(Handle_IGESBasic_SingleParent self) -> Standard_Boolean

        Returns True if a Transformation Matrix is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_HasTransf(self, *args)


    def Transf(self, *args):
        """
        Transf(Handle_IGESBasic_SingleParent self) -> Handle_IGESData_TransfEntity

        Returns the Transformation Matrix (under IGES definition)
        Returns a Null Handle if there is none
        for a more complete use, see Location & CompoundLocation

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_Transf(self, *args)


    def HasLabelDisplay(self, *args):
        """
        HasLabelDisplay(Handle_IGESBasic_SingleParent self) -> Standard_Boolean

        Returns True if a LabelDisplay mode is defined for this entity

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_HasLabelDisplay(self, *args)


    def LabelDisplay(self, *args):
        """
        LabelDisplay(Handle_IGESBasic_SingleParent self) -> Handle_IGESData_LabelDisplayEntity

        Returns the Label Display
        Associativity Entity if there is one. Returns a null handle if there is none.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_LabelDisplay(self, *args)


    def BlankStatus(self, *args):
        """
        BlankStatus(Handle_IGESBasic_SingleParent self) -> Standard_Integer

        gives Blank Status (0 visible, 1 blanked)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_BlankStatus(self, *args)


    def SubordinateStatus(self, *args):
        """
        SubordinateStatus(Handle_IGESBasic_SingleParent self) -> Standard_Integer

        gives Subordinate Switch (0-1-2-3)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_SubordinateStatus(self, *args)


    def UseFlag(self, *args):
        """
        UseFlag(Handle_IGESBasic_SingleParent self) -> Standard_Integer

        gives Entity's Use Flag (0 to 5)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_UseFlag(self, *args)


    def HierarchyStatus(self, *args):
        """
        HierarchyStatus(Handle_IGESBasic_SingleParent self) -> Standard_Integer

        gives Hierarchy status (0-1-2)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_HierarchyStatus(self, *args)


    def LineWeightNumber(self, *args):
        """
        LineWeightNumber(Handle_IGESBasic_SingleParent self) -> Standard_Integer

        Returns the LineWeight Number (0  not defined), see also LineWeight

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_LineWeightNumber(self, *args)


    def LineWeight(self, *args):
        """
        LineWeight(Handle_IGESBasic_SingleParent self) -> Standard_Real

        Returns the true Line Weight, computed from LineWeightNumber and
        Global Parameter in the Model by call to SetLineWeight

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_LineWeight(self, *args)


    def DefColor(self, *args):
        """
        DefColor(Handle_IGESBasic_SingleParent self) -> IGESData_DefType

        Returns the definition status of Color.

        :rtype: OCC.wrapper.IGESData.IGESData_DefType

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_DefColor(self, *args)


    def RankColor(self, *args):
        """
        RankColor(Handle_IGESBasic_SingleParent self) -> Standard_Integer

        Returns the color definition as
        an integer value if the color was defined as a rank.
        Warning A negative value is returned if the color was defined as an entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_RankColor(self, *args)


    def Color(self, *args):
        """
        Color(Handle_IGESBasic_SingleParent self) -> Handle_IGESData_ColorEntity

        Returns the IGES entity which
        describes the color of the entity.
        Returns a null handle if this entity was defined as an integer.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_Color(self, *args)


    def CResValues(self, *args):
        """
        CResValues(Handle_IGESBasic_SingleParent self, Standard_CString const res1, Standard_CString const res2) -> Standard_Boolean

        returns "reserved" alphanumeric values res1 and res2
        res1 and res2 have to be reserved as Character[9 at least]
        (remark : their content is changed)
        returned values are ended by null character in 9th
        returned Boolean is False if res1 and res2 are blank, true else

        :type res1: OCC.wrapper.Standard.Standard_CString
        :type res2: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_CResValues(self, *args)


    def HasShortLabel(self, *args):
        """
        HasShortLabel(Handle_IGESBasic_SingleParent self) -> Standard_Boolean

        Returns true if a short label is defined.
        A short label is a non-blank 8-character string.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_HasShortLabel(self, *args)


    def ShortLabel(self, *args):
        """
        ShortLabel(Handle_IGESBasic_SingleParent self) -> Handle_TCollection_HAsciiString

        Returns the label value for this IGES entity as a string.
        Warning If the label is blank, this string is null.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_ShortLabel(self, *args)


    def HasSubScriptNumber(self, *args):
        """
        HasSubScriptNumber(Handle_IGESBasic_SingleParent self) -> Standard_Boolean

        Returns true if a subscript number is defined.
        A subscript number is an integer used to identify a label.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_HasSubScriptNumber(self, *args)


    def SubScriptNumber(self, *args):
        """
        SubScriptNumber(Handle_IGESBasic_SingleParent self) -> Standard_Integer

        Returns the integer subscript number used to identify this IGES entity.
        Warning 0 is returned if no subscript number is defined for this IGES entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_SubScriptNumber(self, *args)


    def InitDirFieldEntity(self, *args):
        """
        InitDirFieldEntity(Handle_IGESBasic_SingleParent self, Standard_Integer const fieldnum, Handle_IGESData_IGESEntity ent)

        Initializes a directory field as an Entiy of any kind
        See DirFieldEntity for more details

        :type fieldnum: int
        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_InitDirFieldEntity(self, *args)


    def InitTransf(self, *args):
        """
        InitTransf(Handle_IGESBasic_SingleParent self, Handle_IGESData_TransfEntity ent)

        Initializes Transf, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_TransfEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_InitTransf(self, *args)


    def InitView(self, *args):
        """
        InitView(Handle_IGESBasic_SingleParent self, Handle_IGESData_ViewKindEntity ent)

        Initializes View, or erases it if <ent> is given Null

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ViewKindEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_InitView(self, *args)


    def InitLineFont(self, *args):
        """
        InitLineFont(Handle_IGESBasic_SingleParent self, Handle_IGESData_LineFontEntity ent, Standard_Integer const rank=0)

        Initializes LineFont : if <ent> is not Null, it gives LineFont,
        else <rank> gives or erases (if zero) RankLineFont

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LineFontEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_InitLineFont(self, *args)


    def InitLevel(self, *args):
        """
        InitLevel(Handle_IGESBasic_SingleParent self, Handle_IGESData_LevelListEntity ent, Standard_Integer const val=0)

        Initializes Level : if <ent> is not Null, it gives LevelList,
        else <val> gives or erases (if zero) unique Level

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_LevelListEntity
        :type val: int

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_InitLevel(self, *args)


    def InitColor(self, *args):
        """
        InitColor(Handle_IGESBasic_SingleParent self, Handle_IGESData_ColorEntity ent, Standard_Integer const rank=0)

        Initializes Color data : if <ent> is not Null, it gives Color,
        else <rank> gives or erases (if zero) RankColor

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_ColorEntity
        :type rank: int

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_InitColor(self, *args)


    def InitStatus(self, *args):
        """
        InitStatus(Handle_IGESBasic_SingleParent self, Standard_Integer const blank, Standard_Integer const subordinate, Standard_Integer const useflag, Standard_Integer const hierarchy)

        Initializes the Status of Directory Part

        :type blank: int
        :type subordinate: int
        :type useflag: int
        :type hierarchy: int

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_InitStatus(self, *args)


    def SetLabel(self, *args):
        """
        SetLabel(Handle_IGESBasic_SingleParent self, Handle_TCollection_HAsciiString label, Standard_Integer const sub=-1)

        Sets a new Label to an IGES Entity
        If <sub> is given, it sets value of SubScriptNumber
        else, SubScriptNumber is erased

        :type label: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type sub: int

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_SetLabel(self, *args)


    def InitMisc(self, *args):
        """
        InitMisc(Handle_IGESBasic_SingleParent self, Handle_IGESData_IGESEntity str, Handle_IGESData_LabelDisplayEntity lab, Standard_Integer const weightnum)

        Initializes various data (those not yet seen above), or erases
        them if they are given as Null (Zero for <weightnum>) :
        <str> for Structure, <lab> for LabelDisplay, and
        <weightnum> for WeightNumber

        :type str: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type lab: OCC.wrapper.IGESData.Handle_IGESData_LabelDisplayEntity
        :type weightnum: int

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_InitMisc(self, *args)


    def HasOneParent(self, *args):
        """
        HasOneParent(Handle_IGESBasic_SingleParent self) -> Standard_Boolean

        Returns True if an entity has one and only one parent, defined
        by a SingleParentEntity Type Associativity (explicit sharing).
        Thus, implicit sharing remains defined at model level
        (see class ToolLocation)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_HasOneParent(self, *args)


    def UniqueParent(self, *args):
        """
        UniqueParent(Handle_IGESBasic_SingleParent self) -> Handle_IGESData_IGESEntity

        Returns the Unique Parent (in the sense given by HasOneParent)
        Error if there is none or several

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_UniqueParent(self, *args)


    def Location(self, *args):
        """
        Location(Handle_IGESBasic_SingleParent self) -> gp_GTrsf

        Returns Location given by Transf in Directory Part (see above)
        It must be considered for local definition : if the Entity is
        set in a "Parent", that one can add its one Location, but this
        is not taken in account here : see CompoundLocation for that.
        If no Transf is defined, returns Identity
        If Transf is itself compound, gives the final result

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_Location(self, *args)


    def VectorLocation(self, *args):
        """
        VectorLocation(Handle_IGESBasic_SingleParent self) -> gp_GTrsf

        Returns Location considered for Vectors, i.e. without its
        Translation Part. As Location, it gives local definition.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_VectorLocation(self, *args)


    def CompoundLocation(self, *args):
        """
        CompoundLocation(Handle_IGESBasic_SingleParent self) -> gp_GTrsf

        Returns Location by taking in account a Parent which has its
        own Location : that one will be combined to that of <me>
        The Parent is considered only if HasOneParent is True,
        else it is ignored and CompoundLocation = Location

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_CompoundLocation(self, *args)


    def HasName(self, *args):
        """
        HasName(Handle_IGESBasic_SingleParent self) -> Standard_Boolean

        says if a Name is defined, as Short Label or as Name Property
        (Property is looked first, else ShortLabel is considered)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_HasName(self, *args)


    def NameValue(self, *args):
        """
        NameValue(Handle_IGESBasic_SingleParent self) -> Handle_TCollection_HAsciiString

        returns Name value as a String (Property Name or ShortLabel)
        if SubNumber is defined, it is concatenated after ShortLabel
        as follows label(number). Ignored with a Property Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_NameValue(self, *args)


    def ArePresentAssociativities(self, *args):
        """
        ArePresentAssociativities(Handle_IGESBasic_SingleParent self) -> Standard_Boolean

        Returns True if the Entity is defined with an Associativity
        list, even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_ArePresentAssociativities(self, *args)


    def NbAssociativities(self, *args):
        """
        NbAssociativities(Handle_IGESBasic_SingleParent self) -> Standard_Integer

        gives number of recorded associativities (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_NbAssociativities(self, *args)


    def Associativities(self, *args):
        """
        Associativities(Handle_IGESBasic_SingleParent self) -> Interface_EntityIterator

        Returns the Associativity List under the form of an EntityIterator.

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_Associativities(self, *args)


    def NbTypedAssociativities(self, *args):
        """
        NbTypedAssociativities(Handle_IGESBasic_SingleParent self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Associativities have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_NbTypedAssociativities(self, *args)


    def TypedAssociativity(self, *args):
        """
        TypedAssociativity(Handle_IGESBasic_SingleParent self, Handle_Standard_Type atype) -> Handle_IGESData_IGESEntity

        returns the Associativity of a given Type (if only one exists)
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_TypedAssociativity(self, *args)


    def Associate(self, *args):
        """
        Associate(Handle_IGESBasic_SingleParent self, Handle_IGESData_IGESEntity ent)

        Sets "me" in the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_Associate(self, *args)


    def Dissociate(self, *args):
        """
        Dissociate(Handle_IGESBasic_SingleParent self, Handle_IGESData_IGESEntity ent)

        Resets "me" from the Associativity list of another Entity

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_Dissociate(self, *args)


    def ArePresentProperties(self, *args):
        """
        ArePresentProperties(Handle_IGESBasic_SingleParent self) -> Standard_Boolean

        Returns True if the Entity is defined with a Property list,
        even empty (that is, file contains its length 0)
        Else, the file contained NO idencation at all about this list

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_ArePresentProperties(self, *args)


    def NbProperties(self, *args):
        """
        NbProperties(Handle_IGESBasic_SingleParent self) -> Standard_Integer

        Gives number of recorded properties (0  no list defined)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_NbProperties(self, *args)


    def Properties(self, *args):
        """
        Properties(Handle_IGESBasic_SingleParent self) -> Interface_EntityIterator

        Returns Property List under the form of an EntityIterator

        :rtype: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_Properties(self, *args)


    def NbTypedProperties(self, *args):
        """
        NbTypedProperties(Handle_IGESBasic_SingleParent self, Handle_Standard_Type atype) -> Standard_Integer

        gives how many Properties have a given type

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_NbTypedProperties(self, *args)


    def TypedProperty(self, *args):
        """
        TypedProperty(Handle_IGESBasic_SingleParent self, Handle_Standard_Type atype, Standard_Integer const anum=0) -> Handle_IGESData_IGESEntity

        returns the Property of a given Type
        Error if none or more than one

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :type anum: int
        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_TypedProperty(self, *args)


    def AddProperty(self, *args):
        """
        AddProperty(Handle_IGESBasic_SingleParent self, Handle_IGESData_IGESEntity ent)

        Adds a Property in the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_AddProperty(self, *args)


    def RemoveProperty(self, *args):
        """
        RemoveProperty(Handle_IGESBasic_SingleParent self, Handle_IGESData_IGESEntity ent)

        Removes a Property from the list

        :type ent: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_RemoveProperty(self, *args)


    def SetLineWeight(self, *args):
        """
        SetLineWeight(Handle_IGESBasic_SingleParent self, Standard_Real const defw, Standard_Real const maxw, Standard_Integer const gradw)

        computes and sets "true" line weight according IGES rules from
        global data MaxLineWeight (maxv) and LineWeightGrad (gradw),
        or sets it to defw (Default) if LineWeightNumber is null

        :type defw: float
        :type maxw: float
        :type gradw: int

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_SetLineWeight(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_SingleParent self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_SingleParent self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_SingleParent self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_SingleParent self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_SingleParent self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_SingleParent self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_SingleParent self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_SingleParent self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_SingleParent self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_SingleParent_DecrementRefCounter(self, *args)

Handle_IGESBasic_SingleParent_swigregister = _IGESBasic.Handle_IGESBasic_SingleParent_swigregister
Handle_IGESBasic_SingleParent_swigregister(Handle_IGESBasic_SingleParent)

def Handle_IGESBasic_SingleParent_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_SingleParent_DownCast(thing)
Handle_IGESBasic_SingleParent_DownCast = _IGESBasic.Handle_IGESBasic_SingleParent_DownCast

class IGESBasic_ToolGroup(object):
    """
    Tool to work on a Group. Called by various Modules
    (ReadWriteModule, GeneralModule, SpecificModule)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESBasic_ToolGroup self) -> IGESBasic_ToolGroup

        Returns a ToolGroup, ready to work


        """
        this = _IGESBasic.new_IGESBasic_ToolGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadOwnParams(self, *args):
        """
        ReadOwnParams(IGESBasic_ToolGroup self, Handle_IGESBasic_Group ent, Handle_IGESData_IGESReaderData IR, IGESData_ParamReader PR)

        Reads own parameters from file. <PR> gives access to them,
        <IR> detains parameter types and values

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_Group
        :type IR: OCC.wrapper.IGESData.Handle_IGESData_IGESReaderData
        :type PR: OCC.wrapper.IGESData.IGESData_ParamReader

        """
        return _IGESBasic.IGESBasic_ToolGroup_ReadOwnParams(self, *args)


    def WriteOwnParams(self, *args):
        """
        WriteOwnParams(IGESBasic_ToolGroup self, Handle_IGESBasic_Group ent, IGESData_IGESWriter IW)

        Writes own parameters to IGESWriter

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_Group
        :type IW: OCC.wrapper.IGESData.IGESData_IGESWriter

        """
        return _IGESBasic.IGESBasic_ToolGroup_WriteOwnParams(self, *args)


    def OwnShared(self, *args):
        """
        OwnShared(IGESBasic_ToolGroup self, Handle_IGESBasic_Group ent, Interface_EntityIterator iter)

        Lists the Entities shared by a Group <ent>, from
        its specific (own) parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_Group
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _IGESBasic.IGESBasic_ToolGroup_OwnShared(self, *args)


    def OwnCorrect(self, *args):
        """
        OwnCorrect(IGESBasic_ToolGroup self, Handle_IGESBasic_Group ent) -> Standard_Boolean

        Sets automatic unambiguous Correction on a Group
        (Null Elements are removed from list)

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_Group
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.IGESBasic_ToolGroup_OwnCorrect(self, *args)


    def DirChecker(self, *args):
        """
        DirChecker(IGESBasic_ToolGroup self, Handle_IGESBasic_Group ent) -> IGESData_DirChecker

        Returns specific DirChecker

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_Group
        :rtype: OCC.wrapper.IGESData.IGESData_DirChecker

        """
        return _IGESBasic.IGESBasic_ToolGroup_DirChecker(self, *args)


    def OwnCheck(self, *args):
        """
        OwnCheck(IGESBasic_ToolGroup self, Handle_IGESBasic_Group ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        Performs Specific Semantic Check

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_Group
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _IGESBasic.IGESBasic_ToolGroup_OwnCheck(self, *args)


    def OwnCopy(self, *args):
        """
        OwnCopy(IGESBasic_ToolGroup self, Handle_IGESBasic_Group entfrom, Handle_IGESBasic_Group entto, Interface_CopyTool TC)

        Copies Specific Parameters

        :type entfrom: OCC.wrapper.IGESBasic.Handle_IGESBasic_Group
        :type entto: OCC.wrapper.IGESBasic.Handle_IGESBasic_Group
        :type TC: OCC.wrapper.Interface.Interface_CopyTool

        """
        return _IGESBasic.IGESBasic_ToolGroup_OwnCopy(self, *args)


    def OwnDump(self, *args):
        """
        OwnDump(IGESBasic_ToolGroup self, Handle_IGESBasic_Group ent, IGESData_IGESDumper dumper, Handle_Message_Messenger S, Standard_Integer const own)

        Dump of Specific Parameters

        :type ent: OCC.wrapper.IGESBasic.Handle_IGESBasic_Group
        :type dumper: OCC.wrapper.IGESData.IGESData_IGESDumper
        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type own: int

        """
        return _IGESBasic.IGESBasic_ToolGroup_OwnDump(self, *args)

    __swig_destroy__ = _IGESBasic.delete_IGESBasic_ToolGroup
IGESBasic_ToolGroup_swigregister = _IGESBasic.IGESBasic_ToolGroup_swigregister
IGESBasic_ToolGroup_swigregister(IGESBasic_ToolGroup)

class Handle_IGESBasic_HArray1OfHArray1OfInteger(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESBasic_HArray1OfHArray1OfInteger self)

        Nullify the handle


        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESBasic_HArray1OfHArray1OfInteger self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESBasic_HArray1OfHArray1OfInteger self, IGESBasic_HArray1OfHArray1OfInteger thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESBasic_HArray1OfHArray1OfInteger self, Handle_IGESBasic_HArray1OfHArray1OfInteger theHandle) -> Handle_IGESBasic_HArray1OfHArray1OfInteger
        assign(Handle_IGESBasic_HArray1OfHArray1OfInteger self, IGESBasic_HArray1OfHArray1OfInteger thePtr) -> Handle_IGESBasic_HArray1OfHArray1OfInteger
        assign(Handle_IGESBasic_HArray1OfHArray1OfInteger self, Handle_IGESBasic_HArray1OfHArray1OfInteger theHandle) -> Handle_IGESBasic_HArray1OfHArray1OfInteger

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESBasic_HArray1OfHArray1OfInteger self) -> IGESBasic_HArray1OfHArray1OfInteger

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESBasic_HArray1OfHArray1OfInteger self) -> IGESBasic_HArray1OfHArray1OfInteger

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESBasic_HArray1OfHArray1OfInteger self) -> IGESBasic_HArray1OfHArray1OfInteger

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger___ref__(self, *args)


    def __hash__(self):
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESBasic.new_Handle_IGESBasic_HArray1OfHArray1OfInteger(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger_DownCast)
    __swig_destroy__ = _IGESBasic.delete_Handle_IGESBasic_HArray1OfHArray1OfInteger

    def Lower(self, *args):
        """
        Lower(Handle_IGESBasic_HArray1OfHArray1OfInteger self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(Handle_IGESBasic_HArray1OfHArray1OfInteger self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger_Upper(self, *args)


    def Length(self, *args):
        """
        Length(Handle_IGESBasic_HArray1OfHArray1OfInteger self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger_Length(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_IGESBasic_HArray1OfHArray1OfInteger self, Standard_Integer const num, Handle_TColStd_HArray1OfInteger val)

        :type num: int
        :type val: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger_SetValue(self, *args)


    def Value(self, *args):
        """
        Value(Handle_IGESBasic_HArray1OfHArray1OfInteger self, Standard_Integer const num) -> Handle_TColStd_HArray1OfInteger

        :type num: int
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HArray1OfInteger

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger_Value(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESBasic_HArray1OfHArray1OfInteger self) -> char const *

        :rtype: const char *

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESBasic_HArray1OfHArray1OfInteger self)

        Memory deallocator for transient classes


        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESBasic_HArray1OfHArray1OfInteger self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESBasic_HArray1OfHArray1OfInteger self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESBasic_HArray1OfHArray1OfInteger self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESBasic_HArray1OfHArray1OfInteger self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESBasic_HArray1OfHArray1OfInteger self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESBasic_HArray1OfHArray1OfInteger self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESBasic_HArray1OfHArray1OfInteger self)

        Increments the reference counter of this object


        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESBasic_HArray1OfHArray1OfInteger self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger_DecrementRefCounter(self, *args)

Handle_IGESBasic_HArray1OfHArray1OfInteger_swigregister = _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger_swigregister
Handle_IGESBasic_HArray1OfHArray1OfInteger_swigregister(Handle_IGESBasic_HArray1OfHArray1OfInteger)

def Handle_IGESBasic_HArray1OfHArray1OfInteger_DownCast(thing):
    return _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger_DownCast(thing)
Handle_IGESBasic_HArray1OfHArray1OfInteger_DownCast = _IGESBasic.Handle_IGESBasic_HArray1OfHArray1OfInteger_DownCast

class NCollection_Array1_Handle_IGESData_LineFontEntity(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Handle_IGESData_LineFontEntity self) -> NCollection_Array1< opencascade::handle< IGESData_LineFontEntity > >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Handle_IGESData_LineFontEntity self) -> NCollection_Array1< opencascade::handle< IGESData_LineFontEntity > >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Handle_IGESData_LineFontEntity self) -> NCollection_Array1< opencascade::handle< IGESData_LineFontEntity > >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Handle_IGESData_LineFontEntity self) -> NCollection_Array1< opencascade::handle< IGESData_LineFontEntity > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _IGESBasic.new_NCollection_Array1_Handle_IGESData_LineFontEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Handle_IGESData_LineFontEntity self, Handle_IGESData_LineFontEntity theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Handle_IGESData_LineFontEntity self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Handle_IGESData_LineFontEntity self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Handle_IGESData_LineFontEntity self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Handle_IGESData_LineFontEntity self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Handle_IGESData_LineFontEntity self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Handle_IGESData_LineFontEntity self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Handle_IGESData_LineFontEntity self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Handle_IGESData_LineFontEntity self, NCollection_Array1_Handle_IGESData_LineFontEntity theOther) -> NCollection_Array1_Handle_IGESData_LineFontEntity

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Handle_IGESData_LineFontEntity self, NCollection_Array1_Handle_IGESData_LineFontEntity theOther) -> NCollection_Array1_Handle_IGESData_LineFontEntity

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Handle_IGESData_LineFontEntity self, NCollection_Array1_Handle_IGESData_LineFontEntity theOther) -> NCollection_Array1_Handle_IGESData_LineFontEntity
        assign(NCollection_Array1_Handle_IGESData_LineFontEntity self, NCollection_Array1_Handle_IGESData_LineFontEntity theOther) -> NCollection_Array1_Handle_IGESData_LineFontEntity

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Handle_IGESData_LineFontEntity self) -> Handle_IGESData_LineFontEntity

        @return first element

        :rtype: TheItemType &

        """
        return _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Handle_IGESData_LineFontEntity self) -> Handle_IGESData_LineFontEntity

        @return last element

        :rtype: TheItemType &

        """
        return _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Handle_IGESData_LineFontEntity self, Standard_Integer const theIndex) -> Handle_IGESData_LineFontEntity

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Handle_IGESData_LineFontEntity self, Standard_Integer const theIndex, Handle_IGESData_LineFontEntity theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Handle_IGESData_LineFontEntity self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity_Resize(self, *args)

    __swig_destroy__ = _IGESBasic.delete_NCollection_Array1_Handle_IGESData_LineFontEntity
NCollection_Array1_Handle_IGESData_LineFontEntity_swigregister = _IGESBasic.NCollection_Array1_Handle_IGESData_LineFontEntity_swigregister
NCollection_Array1_Handle_IGESData_LineFontEntity_swigregister(NCollection_Array1_Handle_IGESData_LineFontEntity)


try:
	IGESBasic_Array1OfLineFontEntity = NCollection_Array1_Handle_IGESData_LineFontEntity
except NameError:
	pass # does not exist, probably ignored



