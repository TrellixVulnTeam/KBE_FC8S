# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_SMDS')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_SMDS')
    _SMDS = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SMDS', [dirname(__file__)])
        except ImportError:
            import _SMDS
            return _SMDS
        try:
            _mod = imp.load_module('_SMDS', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _SMDS = swig_import_helper()
    del swig_import_helper
else:
    import _SMDS
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SMDS.delete_SwigPyIterator

    def value(self):
        return _SMDS.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SMDS.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SMDS.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SMDS.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SMDS.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SMDS.SwigPyIterator_copy(self)

    def next(self):
        return _SMDS.SwigPyIterator_next(self)

    def __next__(self):
        return _SMDS.SwigPyIterator___next__(self)

    def previous(self):
        return _SMDS.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SMDS.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SMDS.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SMDS.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SMDS.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SMDS.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SMDS.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SMDS.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _SMDS.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _SMDS.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_SMDS.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _SMDS.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _SMDS.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SMDS.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _SMDS.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _SMDS.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _SMDS.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _SMDS.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_SMDS.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _SMDS.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _SMDS.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SMDS.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _SMDS.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _SMDS.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _SMDS.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _SMDS.ptr_to_number(item)
ptr_to_number = _SMDS.ptr_to_number

def HashCode(*args):
    return _SMDS.HashCode(*args)
HashCode = _SMDS.HashCode

def ptr_equal(a, b):
    return _SMDS.ptr_equal(a, b)
ptr_equal = _SMDS.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import SMDSAbs
else:
    import SMDSAbs
del _swig_python_version_info
SMDS_TOP_UNSPEC = _SMDS.SMDS_TOP_UNSPEC
SMDS_TOP_VERTEX = _SMDS.SMDS_TOP_VERTEX
SMDS_TOP_EDGE = _SMDS.SMDS_TOP_EDGE
SMDS_TOP_FACE = _SMDS.SMDS_TOP_FACE
SMDS_TOP_3DSPACE = _SMDS.SMDS_TOP_3DSPACE
class SMDS_MeshObject(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        this = _SMDS.new_SMDS_MeshObject()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SMDS.delete_SMDS_MeshObject
SMDS_MeshObject_swigregister = _SMDS.SMDS_MeshObject_swigregister
SMDS_MeshObject_swigregister(SMDS_MeshObject)

class SMDS_MeshElement(SMDS_MeshObject):
    """rief Base class for elements"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def nodesIterator(self, *args):
        """
        nodesIterator(SMDS_MeshElement self) -> shared_ptr_SMDS_Iterator_SMDS_MeshElement

        :rtype: OCC.wrapper.SMDS.SMDS_ElemIteratorPtr

        """
        return _SMDS.SMDS_MeshElement_nodesIterator(self, *args)


    def nodeIterator(self, *args):
        """
        nodeIterator(SMDS_MeshElement self) -> shared_ptr_SMDS_Iterator_SMDS_MeshNode

        :rtype: OCC.wrapper.SMDS.SMDS_NodeIteratorPtr

        """
        return _SMDS.SMDS_MeshElement_nodeIterator(self, *args)


    def interlacedNodesIterator(self, *args):
        """
        interlacedNodesIterator(SMDS_MeshElement self) -> shared_ptr_SMDS_Iterator_SMDS_MeshNode

        :rtype: OCC.wrapper.SMDS.SMDS_NodeIteratorPtr

        """
        return _SMDS.SMDS_MeshElement_interlacedNodesIterator(self, *args)


    def nodesIteratorToUNV(self, *args):
        """
        nodesIteratorToUNV(SMDS_MeshElement self) -> shared_ptr_SMDS_Iterator_SMDS_MeshNode

        :rtype: OCC.wrapper.SMDS.SMDS_NodeIteratorPtr

        """
        return _SMDS.SMDS_MeshElement_nodesIteratorToUNV(self, *args)


    def begin_nodes(self, *args):
        """
        begin_nodes(SMDS_MeshElement self) -> SMDS_MeshElement::iterator

        :rtype: iterator

        """
        return _SMDS.SMDS_MeshElement_begin_nodes(self, *args)


    def end_nodes(self, *args):
        """
        end_nodes(SMDS_MeshElement self) -> SMDS_MeshElement::iterator

        :rtype: iterator

        """
        return _SMDS.SMDS_MeshElement_end_nodes(self, *args)


    def NbNodes(self, *args):
        """
        NbNodes(SMDS_MeshElement self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshElement_NbNodes(self, *args)


    def NbEdges(self, *args):
        """
        NbEdges(SMDS_MeshElement self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshElement_NbEdges(self, *args)


    def NbFaces(self, *args):
        """
        NbFaces(SMDS_MeshElement self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshElement_NbFaces(self, *args)


    def GetType(self, *args):
        """
        GetType(SMDS_MeshElement self) -> SMDSAbs_ElementType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

        """
        return _SMDS.SMDS_MeshElement_GetType(self, *args)


    def GetEntityType(self, *args):
        """
        GetEntityType(SMDS_MeshElement self) -> SMDSAbs_EntityType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType

        """
        return _SMDS.SMDS_MeshElement_GetEntityType(self, *args)


    def GetGeomType(self, *args):
        """
        GetGeomType(SMDS_MeshElement self) -> SMDSAbs_GeometryType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_GeometryType

        """
        return _SMDS.SMDS_MeshElement_GetGeomType(self, *args)


    def GetVtkType(self, *args):
        """
        GetVtkType(SMDS_MeshElement self) -> VTKCellType

        :rtype: VTKCellType

        """
        return _SMDS.SMDS_MeshElement_GetVtkType(self, *args)


    def IsPoly(self, *args):
        """
        IsPoly(SMDS_MeshElement self) -> bool

        :rtype: bool

        """
        return _SMDS.SMDS_MeshElement_IsPoly(self, *args)


    def IsQuadratic(self, *args):
        """
        IsQuadratic(SMDS_MeshElement self) -> bool

        :rtype: bool

        """
        return _SMDS.SMDS_MeshElement_IsQuadratic(self, *args)


    def IsMediumNode(self, *args):
        """
        IsMediumNode(SMDS_MeshElement self, SMDS_MeshNode node) -> bool

        :type node: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: bool

        """
        return _SMDS.SMDS_MeshElement_IsMediumNode(self, *args)


    def NbCornerNodes(self, *args):
        """
        NbCornerNodes(SMDS_MeshElement self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshElement_NbCornerNodes(self, *args)


    def GetNode(self, *args):
        """
        GetNode(SMDS_MeshElement self, int const ind) -> SMDS_MeshNode

        rief Return node by its index
        \param ind - node index
        etval const SMDS_MeshNode* - the node

        :type ind: const int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _SMDS.SMDS_MeshElement_GetNode(self, *args)


    def GetNodeWrap(self, *args):
        """
        GetNodeWrap(SMDS_MeshElement self, int const ind) -> SMDS_MeshNode

        rief Return node by its index
        \param ind - node index
        etval const SMDS_MeshNode* - the node

        Index is wrapped if it is out of a valid range of corner nodes

        :type ind: const int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _SMDS.SMDS_MeshElement_GetNodeWrap(self, *args)


    def IsValidIndex(self, *args):
        """
        IsValidIndex(SMDS_MeshElement self, int const ind) -> bool

        rief Return true if index of node is valid (0 <= ind < NbNodes())
        \param ind - node index
        etval bool - index check result

        :type ind: const int
        :rtype: bool

        """
        return _SMDS.SMDS_MeshElement_IsValidIndex(self, *args)


    def WrappedIndex(self, *args):
        """
        WrappedIndex(SMDS_MeshElement self, int const ind) -> int

        rief Return a valid corner node index, fixing the given one if necessary
        \param ind - node index
        etval int - valid node index

        :type ind: const int
        :rtype: int

        """
        return _SMDS.SMDS_MeshElement_WrappedIndex(self, *args)


    def GetNodeIndex(self, *args):
        """
        GetNodeIndex(SMDS_MeshElement self, SMDS_MeshNode node) -> int

        rief Check if a node belongs to the element
        \param node - the node to check
        etval int - node index within the element, -1 if not found

        :type node: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: int

        """
        return _SMDS.SMDS_MeshElement_GetNodeIndex(self, *args)


    def GetID(self, *args):
        """
        GetID(SMDS_MeshElement self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshElement_GetID(self, *args)


    def GetVtkID(self, *args):
        """
        GetVtkID(SMDS_MeshElement self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshElement_GetVtkID(self, *args)


    def getshapeId(self, *args):
        """
        getshapeId(SMDS_MeshElement self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshElement_getshapeId(self, *args)


    def GetShapeID(self, *args):
        """
        GetShapeID(SMDS_MeshElement self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshElement_GetShapeID(self, *args)


    def setIsMarked(self, *args):
        """
        setIsMarked(SMDS_MeshElement self, bool arg2)

        :type is: bool

        """
        return _SMDS.SMDS_MeshElement_setIsMarked(self, *args)


    def isMarked(self, *args):
        """
        isMarked(SMDS_MeshElement self) -> bool

        :rtype: bool

        """
        return _SMDS.SMDS_MeshElement_isMarked(self, *args)


    def IsNull(self, *args):
        """
        IsNull(SMDS_MeshElement self) -> bool

        :rtype: bool

        """
        return _SMDS.SMDS_MeshElement_IsNull(self, *args)


    def GetMesh(self, *args):
        """
        GetMesh(SMDS_MeshElement self) -> SMDS_Mesh

        :rtype: OCC.wrapper.SMDS.SMDS_Mesh

        """
        return _SMDS.SMDS_MeshElement_GetMesh(self, *args)


    def Print(self, *args):
        """
        Print(SMDS_MeshElement self, std::ostream & OS)

        :type OS: ostream

        """
        return _SMDS.SMDS_MeshElement_Print(self, *args)

    __swig_destroy__ = _SMDS.delete_SMDS_MeshElement
SMDS_MeshElement_swigregister = _SMDS.SMDS_MeshElement_swigregister
SMDS_MeshElement_swigregister(SMDS_MeshElement)

class SMDS_Position(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetTypeOfPosition(self, *args):
        """
        GetTypeOfPosition(SMDS_Position self) -> SMDS_TypeOfPosition

        :rtype: OCC.wrapper.SMDS.SMDS_TypeOfPosition

        """
        return _SMDS.SMDS_Position_GetTypeOfPosition(self, *args)


    def GetDim(self, *args):
        """
        GetDim(SMDS_Position self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_Position_GetDim(self, *args)


    def GetParameters(self, *args):
        """
        GetParameters(SMDS_Position self) -> double const *

        :rtype: const double *

        """
        return _SMDS.SMDS_Position_GetParameters(self, *args)

    __swig_destroy__ = _SMDS.delete_SMDS_Position
SMDS_Position_swigregister = _SMDS.SMDS_Position_swigregister
SMDS_Position_swigregister(SMDS_Position)

class SMDS_MeshNode(SMDS_MeshElement):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def setXYZ(self, *args):
        """
        setXYZ(SMDS_MeshNode self, double x, double y, double z)

        :type x: double
        :type y: double
        :type z: double

        """
        return _SMDS.SMDS_MeshNode_setXYZ(self, *args)


    def X(self, *args):
        """
        X(SMDS_MeshNode self) -> double

        :rtype: double

        """
        return _SMDS.SMDS_MeshNode_X(self, *args)


    def Y(self, *args):
        """
        Y(SMDS_MeshNode self) -> double

        :rtype: double

        """
        return _SMDS.SMDS_MeshNode_Y(self, *args)


    def Z(self, *args):
        """
        Z(SMDS_MeshNode self) -> double

        :rtype: double

        """
        return _SMDS.SMDS_MeshNode_Z(self, *args)


    def GetXYZ(self, *args):
        """
        GetXYZ(SMDS_MeshNode self, double * xyz)

        :type xyz: double [3]

        """
        return _SMDS.SMDS_MeshNode_GetXYZ(self, *args)


    def GetInverseElementIterator(self, *args):
        """
        GetInverseElementIterator(SMDS_MeshNode self, SMDSAbs_ElementType type=SMDSAbs_All) -> shared_ptr_SMDS_Iterator_SMDS_MeshElement

        :type type: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType
        :rtype: OCC.wrapper.SMDS.SMDS_ElemIteratorPtr

        """
        return _SMDS.SMDS_MeshNode_GetInverseElementIterator(self, *args)


    def NbInverseElements(self, *args):
        """
        NbInverseElements(SMDS_MeshNode self, SMDSAbs_ElementType type=SMDSAbs_All) -> int

        :type type: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType
        :rtype: int

        """
        return _SMDS.SMDS_MeshNode_NbInverseElements(self, *args)


    def GetPosition(self, *args):
        """
        GetPosition(SMDS_MeshNode self) -> SMDS_Ptr_SMDS_Position

        :rtype: OCC.wrapper.SMDS.SMDS_PositionPtr

        """
        return _SMDS.SMDS_MeshNode_GetPosition(self, *args)


    def SetPosition(self, *args):
        """
        SetPosition(SMDS_MeshNode self, SMDS_Ptr_SMDS_Position aPos, int shapeID=0)

        :type aPos: OCC.wrapper.SMDS.SMDS_PositionPtr
        :type shapeID: int

        """
        return _SMDS.SMDS_MeshNode_SetPosition(self, *args)


    def GetType(self, *args):
        """
        GetType(SMDS_MeshNode self) -> SMDSAbs_ElementType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

        """
        return _SMDS.SMDS_MeshNode_GetType(self, *args)


    def GetVtkType(self, *args):
        """
        GetVtkType(SMDS_MeshNode self) -> VTKCellType

        :rtype: VTKCellType

        """
        return _SMDS.SMDS_MeshNode_GetVtkType(self, *args)


    def GetEntityType(self, *args):
        """
        GetEntityType(SMDS_MeshNode self) -> SMDSAbs_EntityType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType

        """
        return _SMDS.SMDS_MeshNode_GetEntityType(self, *args)


    def GetGeomType(self, *args):
        """
        GetGeomType(SMDS_MeshNode self) -> SMDSAbs_GeometryType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_GeometryType

        """
        return _SMDS.SMDS_MeshNode_GetGeomType(self, *args)


    def NbNodes(self, *args):
        """
        NbNodes(SMDS_MeshNode self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshNode_NbNodes(self, *args)


    def NbEdges(self, *args):
        """
        NbEdges(SMDS_MeshNode self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshNode_NbEdges(self, *args)


    def NbFaces(self, *args):
        """
        NbFaces(SMDS_MeshNode self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshNode_NbFaces(self, *args)


    def nodesIterator(self, *args):
        """
        nodesIterator(SMDS_MeshNode self) -> shared_ptr_SMDS_Iterator_SMDS_MeshElement

        :rtype: OCC.wrapper.SMDS.SMDS_ElemIteratorPtr

        """
        return _SMDS.SMDS_MeshNode_nodesIterator(self, *args)


    def nodeIterator(self, *args):
        """
        nodeIterator(SMDS_MeshNode self) -> shared_ptr_SMDS_Iterator_SMDS_MeshNode

        :rtype: OCC.wrapper.SMDS.SMDS_NodeIteratorPtr

        """
        return _SMDS.SMDS_MeshNode_nodeIterator(self, *args)


    def GetNode(self, *args):
        """
        GetNode(SMDS_MeshNode self, int const ind) -> SMDS_MeshNode

        :type ind: const int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _SMDS.SMDS_MeshNode_GetNode(self, *args)


    def IsPoly(self, *args):
        """
        IsPoly(SMDS_MeshNode self) -> bool

        :rtype: bool

        """
        return _SMDS.SMDS_MeshNode_IsPoly(self, *args)


    def IsQuadratic(self, *args):
        """
        IsQuadratic(SMDS_MeshNode self) -> bool

        :rtype: bool

        """
        return _SMDS.SMDS_MeshNode_IsQuadratic(self, *args)


    def IsMediumNode(self, *args):
        """
        IsMediumNode(SMDS_MeshNode self, SMDS_MeshNode node) -> bool

        :type node: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: bool

        """
        return _SMDS.SMDS_MeshNode_IsMediumNode(self, *args)


    def NbCornerNodes(self, *args):
        """
        NbCornerNodes(SMDS_MeshNode self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshNode_NbCornerNodes(self, *args)


    def Print(self, *args):
        """
        Print(SMDS_MeshNode self, std::ostream & OS)

        :type OS: ostream

        """
        return _SMDS.SMDS_MeshNode_Print(self, *args)


    def __init__(self):
        this = _SMDS.new_SMDS_MeshNode()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SMDS.delete_SMDS_MeshNode
SMDS_MeshNode_swigregister = _SMDS.SMDS_MeshNode_swigregister
SMDS_MeshNode_swigregister(SMDS_MeshNode)

class SMDS_Downward(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getNumberOfDownCells(self, *args):
        """
        getNumberOfDownCells(SMDS_Downward self, int cellId) -> int

        :type cellId: int
        :rtype: int

        """
        return _SMDS.SMDS_Downward_getNumberOfDownCells(self, *args)


    def getDownCells(self, *args):
        """
        getDownCells(SMDS_Downward self, int cellId) -> int const *

        :type cellId: int
        :rtype: const int *

        """
        return _SMDS.SMDS_Downward_getDownCells(self, *args)


    def getDownTypes(self, *args):
        """
        getDownTypes(SMDS_Downward self, int cellId) -> unsigned char const *

        :type cellId: int
        :rtype: const unsigned char *

        """
        return _SMDS.SMDS_Downward_getDownTypes(self, *args)


    def getNumberOfUpCells(self, *args):
        """
        getNumberOfUpCells(SMDS_Downward self, int cellId) -> int

        :type cellId: int
        :rtype: int

        """
        return _SMDS.SMDS_Downward_getNumberOfUpCells(self, *args)


    def getUpCells(self, *args):
        """
        getUpCells(SMDS_Downward self, int cellId) -> int const *

        :type cellId: int
        :rtype: const int *

        """
        return _SMDS.SMDS_Downward_getUpCells(self, *args)


    def getUpTypes(self, *args):
        """
        getUpTypes(SMDS_Downward self, int cellId) -> unsigned char const *

        :type cellId: int
        :rtype: const unsigned char *

        """
        return _SMDS.SMDS_Downward_getUpTypes(self, *args)


    def getNodeIds(self, *args):
        """
        getNodeIds(SMDS_Downward self, int cellId, std::set< int,std::less< int >,std::allocator< int > > & nodeSet)

        :type cellId: int
        :type nodeSet: OCC.wrapper.SMDS.set

        """
        return _SMDS.SMDS_Downward_getNodeIds(self, *args)


    def getNodes(self, *args):
        """
        getNodes(SMDS_Downward self, int cellId, int * nodevec) -> int

        :type cellId: int
        :type nodevec: int *
        :rtype: int

        """
        return _SMDS.SMDS_Downward_getNodes(self, *args)


    def getOrderedNodesOfFace(self, *args):
        """
        getOrderedNodesOfFace(SMDS_Downward self, int cellId, std::vector< vtkIdType,std::allocator< vtkIdType > > & orderedNodes)

        :type cellId: int
        :type orderedNodes: OCC.wrapper.SMDS.vector_vtkIdType

        """
        return _SMDS.SMDS_Downward_getOrderedNodesOfFace(self, *args)


    def getVtkCellId(self, *args):
        """
        getVtkCellId(SMDS_Downward self, int cellId) -> int

        :type cellId: int
        :rtype: int

        """
        return _SMDS.SMDS_Downward_getVtkCellId(self, *args)


    def getMaxId(self, *args):
        """
        getMaxId(SMDS_Downward self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_Downward_getMaxId(self, *args)


    def getCellDimension(*args):
        """
        getCellDimension(unsigned char cellType) -> int

        :type cellType: unsigned char
        :rtype: int

        """
        return _SMDS.SMDS_Downward_getCellDimension(*args)

    getCellDimension = staticmethod(getCellDimension)
SMDS_Downward_swigregister = _SMDS.SMDS_Downward_swigregister
SMDS_Downward_swigregister(SMDS_Downward)

def SMDS_Downward_getCellDimension(*args):
    """
    SMDS_Downward_getCellDimension(unsigned char cellType) -> int

    :type cellType: unsigned char
    :rtype: int

    """
    return _SMDS.SMDS_Downward_getCellDimension(*args)

class SMDS_MeshCell(SMDS_MeshElement):
    """rief Base class for all cells"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ChangeNodes(self, *args):
        """
        ChangeNodes(SMDS_MeshCell self, SMDS_MeshNode const ** nodes, int const nbNodes) -> bool

        :type nodes: const SMDS_MeshNode *[]
        :type nbNodes: const int
        :rtype: bool

        """
        return _SMDS.SMDS_MeshCell_ChangeNodes(self, *args)


    def GetNodeIndex(self, *args):
        """
        GetNodeIndex(SMDS_MeshCell self, SMDS_MeshNode node) -> int

        :type node: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: int

        """
        return _SMDS.SMDS_MeshCell_GetNodeIndex(self, *args)


    def GetNode(self, *args):
        """
        GetNode(SMDS_MeshCell self, int const ind) -> SMDS_MeshNode

        :type ind: const int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _SMDS.SMDS_MeshCell_GetNode(self, *args)


    def GetType(self, *args):
        """
        GetType(SMDS_MeshCell self) -> SMDSAbs_ElementType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

        """
        return _SMDS.SMDS_MeshCell_GetType(self, *args)


    def GetEntityType(self, *args):
        """
        GetEntityType(SMDS_MeshCell self) -> SMDSAbs_EntityType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType

        """
        return _SMDS.SMDS_MeshCell_GetEntityType(self, *args)


    def GetGeomType(self, *args):
        """
        GetGeomType(SMDS_MeshCell self) -> SMDSAbs_GeometryType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_GeometryType

        """
        return _SMDS.SMDS_MeshCell_GetGeomType(self, *args)


    def GetVtkType(self, *args):
        """
        GetVtkType(SMDS_MeshCell self) -> VTKCellType

        :rtype: VTKCellType

        """
        return _SMDS.SMDS_MeshCell_GetVtkType(self, *args)


    def nodesIterator(self, *args):
        """
        nodesIterator(SMDS_MeshCell self) -> shared_ptr_SMDS_Iterator_SMDS_MeshElement

        :rtype: OCC.wrapper.SMDS.SMDS_ElemIteratorPtr

        """
        return _SMDS.SMDS_MeshCell_nodesIterator(self, *args)


    def nodeIterator(self, *args):
        """
        nodeIterator(SMDS_MeshCell self) -> shared_ptr_SMDS_Iterator_SMDS_MeshNode

        :rtype: OCC.wrapper.SMDS.SMDS_NodeIteratorPtr

        """
        return _SMDS.SMDS_MeshCell_nodeIterator(self, *args)


    def interlacedNodesIterator(self, *args):
        """
        interlacedNodesIterator(SMDS_MeshCell self) -> shared_ptr_SMDS_Iterator_SMDS_MeshNode

        :rtype: OCC.wrapper.SMDS.SMDS_NodeIteratorPtr

        """
        return _SMDS.SMDS_MeshCell_interlacedNodesIterator(self, *args)


    def nodesIteratorToUNV(self, *args):
        """
        nodesIteratorToUNV(SMDS_MeshCell self) -> shared_ptr_SMDS_Iterator_SMDS_MeshNode

        :rtype: OCC.wrapper.SMDS.SMDS_NodeIteratorPtr

        """
        return _SMDS.SMDS_MeshCell_nodesIteratorToUNV(self, *args)


    def InitStaticMembers(*args):
        """InitStaticMembers()"""
        return _SMDS.SMDS_MeshCell_InitStaticMembers(*args)

    InitStaticMembers = staticmethod(InitStaticMembers)

    def toVtkType(*args):
        """
        toVtkType(SMDSAbs_EntityType entityType) -> VTKCellType

        :type entityType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
        :rtype: VTKCellType

        """
        return _SMDS.SMDS_MeshCell_toVtkType(*args)

    toVtkType = staticmethod(toVtkType)

    def toSmdsType(*args):
        """
        toSmdsType(VTKCellType vtkType) -> SMDSAbs_EntityType

        :type vtkType: VTKCellType
        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType

        """
        return _SMDS.SMDS_MeshCell_toSmdsType(*args)

    toSmdsType = staticmethod(toSmdsType)

    def ElemType(*args):
        """
        ElemType(SMDSAbs_GeometryType geomType) -> SMDSAbs_ElementType
        ElemType(SMDSAbs_EntityType entityType) -> SMDSAbs_ElementType

        :type entityType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

        """
        return _SMDS.SMDS_MeshCell_ElemType(*args)

    ElemType = staticmethod(ElemType)

    def GeomType(*args):
        """
        GeomType(SMDSAbs_EntityType entityType) -> SMDSAbs_GeometryType

        :type entityType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_GeometryType

        """
        return _SMDS.SMDS_MeshCell_GeomType(*args)

    GeomType = staticmethod(GeomType)

    def IsPoly(*args):
        """
        IsPoly() -> bool
        IsPoly(SMDSAbs_EntityType entityType) -> bool

        :type entityType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
        :rtype: bool

        """
        return _SMDS.SMDS_MeshCell_IsPoly(*args)

    IsPoly = staticmethod(IsPoly)

    def IsQuadratic(*args):
        """
        IsQuadratic() -> bool
        IsQuadratic(SMDSAbs_EntityType entityType) -> bool

        :type entityType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
        :rtype: bool

        """
        return _SMDS.SMDS_MeshCell_IsQuadratic(*args)

    IsQuadratic = staticmethod(IsQuadratic)

    def NbCornerNodes(*args):
        """
        NbCornerNodes() -> int
        NbCornerNodes(SMDSAbs_EntityType entityType) -> int

        :type entityType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
        :rtype: int

        """
        return _SMDS.SMDS_MeshCell_NbCornerNodes(*args)

    NbCornerNodes = staticmethod(NbCornerNodes)

    def NbNodes(*args):
        """
        NbNodes() -> int
        NbNodes(SMDSAbs_EntityType entityType) -> int

        :type entityType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
        :rtype: int

        """
        return _SMDS.SMDS_MeshCell_NbNodes(*args)

    NbNodes = staticmethod(NbNodes)

    def NbEdges(*args):
        """
        NbEdges() -> int
        NbEdges(SMDSAbs_EntityType entityType) -> int

        :type entityType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
        :rtype: int

        """
        return _SMDS.SMDS_MeshCell_NbEdges(*args)

    NbEdges = staticmethod(NbEdges)

    def NbFaces(*args):
        """
        NbFaces() -> int
        NbFaces(SMDSAbs_EntityType entityType) -> int

        :type entityType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
        :rtype: int

        """
        return _SMDS.SMDS_MeshCell_NbFaces(*args)

    NbFaces = staticmethod(NbFaces)

    def toVtkOrder(*args):
        """
        toVtkOrder(VTKCellType vtkType) -> std::vector< int,std::allocator< int > > const
        toVtkOrder(SMDSAbs_EntityType smdsType) -> std::vector< int,std::allocator< int > > const &

        :type smdsType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
        :rtype: OCC.wrapper.SMDS.vector

        """
        return _SMDS.SMDS_MeshCell_toVtkOrder(*args)

    toVtkOrder = staticmethod(toVtkOrder)

    def fromVtkOrder(*args):
        """
        fromVtkOrder(VTKCellType vtkType) -> std::vector< int,std::allocator< int > > const
        fromVtkOrder(SMDSAbs_EntityType smdsType) -> std::vector< int,std::allocator< int > > const &

        :type smdsType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
        :rtype: OCC.wrapper.SMDS.vector

        """
        return _SMDS.SMDS_MeshCell_fromVtkOrder(*args)

    fromVtkOrder = staticmethod(fromVtkOrder)

    def reverseSmdsOrder(*args):
        """
        reverseSmdsOrder(SMDSAbs_EntityType smdsType, size_t const nbNodes=0) -> std::vector< int,std::allocator< int > > const &

        :type smdsType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
        :type nbNodes: size_t
        :rtype: OCC.wrapper.SMDS.vector

        """
        return _SMDS.SMDS_MeshCell_reverseSmdsOrder(*args)

    reverseSmdsOrder = staticmethod(reverseSmdsOrder)

    def interlacedSmdsOrder(*args):
        """
        interlacedSmdsOrder(SMDSAbs_EntityType smdsType, size_t const nbNodes=0) -> std::vector< int,std::allocator< int > > const &

        :type smdsType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
        :type nbNodes: size_t
        :rtype: OCC.wrapper.SMDS.vector

        """
        return _SMDS.SMDS_MeshCell_interlacedSmdsOrder(*args)

    interlacedSmdsOrder = staticmethod(interlacedSmdsOrder)

    def __init__(self):
        """rief Base class for all cells"""
        this = _SMDS.new_SMDS_MeshCell()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SMDS.delete_SMDS_MeshCell
SMDS_MeshCell_swigregister = _SMDS.SMDS_MeshCell_swigregister
SMDS_MeshCell_swigregister(SMDS_MeshCell)

def SMDS_MeshCell_InitStaticMembers(*args):
    """SMDS_MeshCell_InitStaticMembers()"""
    return _SMDS.SMDS_MeshCell_InitStaticMembers(*args)

def SMDS_MeshCell_toVtkType(*args):
    """
    SMDS_MeshCell_toVtkType(SMDSAbs_EntityType entityType) -> VTKCellType

    :type entityType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
    :rtype: VTKCellType

    """
    return _SMDS.SMDS_MeshCell_toVtkType(*args)

def SMDS_MeshCell_toSmdsType(*args):
    """
    SMDS_MeshCell_toSmdsType(VTKCellType vtkType) -> SMDSAbs_EntityType

    :type vtkType: VTKCellType
    :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType

    """
    return _SMDS.SMDS_MeshCell_toSmdsType(*args)

def SMDS_MeshCell_ElemType(*args):
    """
    ElemType(SMDSAbs_GeometryType geomType) -> SMDSAbs_ElementType
    SMDS_MeshCell_ElemType(SMDSAbs_EntityType entityType) -> SMDSAbs_ElementType

    :type entityType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
    :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

    """
    return _SMDS.SMDS_MeshCell_ElemType(*args)

def SMDS_MeshCell_GeomType(*args):
    """
    SMDS_MeshCell_GeomType(SMDSAbs_EntityType entityType) -> SMDSAbs_GeometryType

    :type entityType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
    :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_GeometryType

    """
    return _SMDS.SMDS_MeshCell_GeomType(*args)

def SMDS_MeshCell_IsPoly(*args):
    """
    IsPoly() -> bool
    SMDS_MeshCell_IsPoly(SMDSAbs_EntityType entityType) -> bool

    :type entityType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
    :rtype: bool

    """
    return _SMDS.SMDS_MeshCell_IsPoly(*args)

def SMDS_MeshCell_IsQuadratic(*args):
    """
    IsQuadratic() -> bool
    SMDS_MeshCell_IsQuadratic(SMDSAbs_EntityType entityType) -> bool

    :type entityType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
    :rtype: bool

    """
    return _SMDS.SMDS_MeshCell_IsQuadratic(*args)

def SMDS_MeshCell_NbCornerNodes(*args):
    """
    NbCornerNodes() -> int
    SMDS_MeshCell_NbCornerNodes(SMDSAbs_EntityType entityType) -> int

    :type entityType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
    :rtype: int

    """
    return _SMDS.SMDS_MeshCell_NbCornerNodes(*args)

def SMDS_MeshCell_NbNodes(*args):
    """
    NbNodes() -> int
    SMDS_MeshCell_NbNodes(SMDSAbs_EntityType entityType) -> int

    :type entityType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
    :rtype: int

    """
    return _SMDS.SMDS_MeshCell_NbNodes(*args)

def SMDS_MeshCell_NbEdges(*args):
    """
    NbEdges() -> int
    SMDS_MeshCell_NbEdges(SMDSAbs_EntityType entityType) -> int

    :type entityType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
    :rtype: int

    """
    return _SMDS.SMDS_MeshCell_NbEdges(*args)

def SMDS_MeshCell_NbFaces(*args):
    """
    NbFaces() -> int
    SMDS_MeshCell_NbFaces(SMDSAbs_EntityType entityType) -> int

    :type entityType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
    :rtype: int

    """
    return _SMDS.SMDS_MeshCell_NbFaces(*args)

def SMDS_MeshCell_toVtkOrder(*args):
    """
    toVtkOrder(VTKCellType vtkType) -> std::vector< int,std::allocator< int > > const
    SMDS_MeshCell_toVtkOrder(SMDSAbs_EntityType smdsType) -> std::vector< int,std::allocator< int > > const &

    :type smdsType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
    :rtype: OCC.wrapper.SMDS.vector

    """
    return _SMDS.SMDS_MeshCell_toVtkOrder(*args)

def SMDS_MeshCell_fromVtkOrder(*args):
    """
    fromVtkOrder(VTKCellType vtkType) -> std::vector< int,std::allocator< int > > const
    SMDS_MeshCell_fromVtkOrder(SMDSAbs_EntityType smdsType) -> std::vector< int,std::allocator< int > > const &

    :type smdsType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
    :rtype: OCC.wrapper.SMDS.vector

    """
    return _SMDS.SMDS_MeshCell_fromVtkOrder(*args)

def SMDS_MeshCell_reverseSmdsOrder(*args):
    """
    SMDS_MeshCell_reverseSmdsOrder(SMDSAbs_EntityType smdsType, size_t const nbNodes=0) -> std::vector< int,std::allocator< int > > const &

    :type smdsType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
    :type nbNodes: size_t
    :rtype: OCC.wrapper.SMDS.vector

    """
    return _SMDS.SMDS_MeshCell_reverseSmdsOrder(*args)

def SMDS_MeshCell_interlacedSmdsOrder(*args):
    """
    SMDS_MeshCell_interlacedSmdsOrder(SMDSAbs_EntityType smdsType, size_t const nbNodes=0) -> std::vector< int,std::allocator< int > > const &

    :type smdsType: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
    :type nbNodes: size_t
    :rtype: OCC.wrapper.SMDS.vector

    """
    return _SMDS.SMDS_MeshCell_interlacedSmdsOrder(*args)

class SMDS_MeshFace(SMDS_MeshCell):
    """
    rief Mesh face. This type is not allocated.
    It is only used as function argument type to provide more clear semantic.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetType(self, *args):
        """
        GetType(SMDS_MeshFace self) -> SMDSAbs_ElementType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

        """
        return _SMDS.SMDS_MeshFace_GetType(self, *args)


    def Type(*args):
        """
        Type() -> SMDSAbs_ElementType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

        """
        return _SMDS.SMDS_MeshFace_Type(*args)

    Type = staticmethod(Type)

    def __init__(self):
        """
        rief Mesh face. This type is not allocated.
        It is only used as function argument type to provide more clear semantic.
        """
        this = _SMDS.new_SMDS_MeshFace()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SMDS.delete_SMDS_MeshFace
SMDS_MeshFace_swigregister = _SMDS.SMDS_MeshFace_swigregister
SMDS_MeshFace_swigregister(SMDS_MeshFace)

def SMDS_MeshFace_Type(*args):
    """
    SMDS_MeshFace_Type() -> SMDSAbs_ElementType

    :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

    """
    return _SMDS.SMDS_MeshFace_Type(*args)

class SMDS_FacePosition(SMDS_Position):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SMDS_FacePosition self, double aUParam=0, double aVParam=0) -> SMDS_FacePosition

        :type aUParam: double
        :type aVParam: double

        """
        this = _SMDS.new_SMDS_FacePosition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetTypeOfPosition(self, *args):
        """
        GetTypeOfPosition(SMDS_FacePosition self) -> SMDS_TypeOfPosition

        :rtype: OCC.wrapper.SMDS.SMDS_TypeOfPosition

        """
        return _SMDS.SMDS_FacePosition_GetTypeOfPosition(self, *args)


    def SetUParameter(self, *args):
        """
        SetUParameter(SMDS_FacePosition self, double aUparam)

        :type aUparam: double

        """
        return _SMDS.SMDS_FacePosition_SetUParameter(self, *args)


    def SetVParameter(self, *args):
        """
        SetVParameter(SMDS_FacePosition self, double aVparam)

        :type aVparam: double

        """
        return _SMDS.SMDS_FacePosition_SetVParameter(self, *args)


    def SetParameters(self, *args):
        """
        SetParameters(SMDS_FacePosition self, double aUparam, double aVparam)

        :type aUparam: double
        :type aVparam: double

        """
        return _SMDS.SMDS_FacePosition_SetParameters(self, *args)


    def GetUParameter(self, *args):
        """
        GetUParameter(SMDS_FacePosition self) -> double

        :rtype: double

        """
        return _SMDS.SMDS_FacePosition_GetUParameter(self, *args)


    def GetVParameter(self, *args):
        """
        GetVParameter(SMDS_FacePosition self) -> double

        :rtype: double

        """
        return _SMDS.SMDS_FacePosition_GetVParameter(self, *args)


    def GetParameters(self, *args):
        """
        GetParameters(SMDS_FacePosition self) -> double const *

        :rtype: const double *

        """
        return _SMDS.SMDS_FacePosition_GetParameters(self, *args)

    __swig_destroy__ = _SMDS.delete_SMDS_FacePosition
SMDS_FacePosition_swigregister = _SMDS.SMDS_FacePosition_swigregister
SMDS_FacePosition_swigregister(SMDS_FacePosition)

class SMDS_Mesh(SMDS_MeshObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """__init__(SMDS_Mesh self) -> SMDS_Mesh"""
        this = _SMDS.new_SMDS_Mesh(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetGrid(self, *args):
        """
        GetGrid(SMDS_Mesh self) -> SMDS_UnstructuredGrid

        actual nodes coordinates, cells definition and reverse connectivity are stored in a vtkUnstructuredGrid

        :rtype: OCC.wrapper.SMDS.SMDS_UnstructuredGrid

        """
        return _SMDS.SMDS_Mesh_GetGrid(self, *args)


    def nodesIterator(self, *args):
        """
        nodesIterator(SMDS_Mesh self) -> shared_ptr_SMDS_Iterator_SMDS_MeshNode

        :rtype: OCC.wrapper.SMDS.SMDS_NodeIteratorPtr

        """
        return _SMDS.SMDS_Mesh_nodesIterator(self, *args)


    def edgesIterator(self, *args):
        """
        edgesIterator(SMDS_Mesh self) -> shared_ptr_SMDS_Iterator_SMDS_MeshEdge

        :rtype: OCC.wrapper.SMDS.SMDS_EdgeIteratorPtr

        """
        return _SMDS.SMDS_Mesh_edgesIterator(self, *args)


    def facesIterator(self, *args):
        """
        facesIterator(SMDS_Mesh self) -> shared_ptr_SMDS_Iterator_SMDS_MeshFace

        :rtype: OCC.wrapper.SMDS.SMDS_FaceIteratorPtr

        """
        return _SMDS.SMDS_Mesh_facesIterator(self, *args)


    def volumesIterator(self, *args):
        """
        volumesIterator(SMDS_Mesh self) -> shared_ptr_SMDS_Iterator_SMDS_MeshVolume

        :rtype: OCC.wrapper.SMDS.SMDS_VolumeIteratorPtr

        """
        return _SMDS.SMDS_Mesh_volumesIterator(self, *args)


    def elementsIterator(self, *args):
        """
        elementsIterator(SMDS_Mesh self, SMDSAbs_ElementType type=SMDSAbs_All) -> shared_ptr_SMDS_Iterator_SMDS_MeshElement

        :type type: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType
        :rtype: OCC.wrapper.SMDS.SMDS_ElemIteratorPtr

        """
        return _SMDS.SMDS_Mesh_elementsIterator(self, *args)


    def elementGeomIterator(self, *args):
        """
        elementGeomIterator(SMDS_Mesh self, SMDSAbs_GeometryType type) -> shared_ptr_SMDS_Iterator_SMDS_MeshElement

        :type type: OCC.wrapper.SMDSAbs.SMDSAbs_GeometryType
        :rtype: OCC.wrapper.SMDS.SMDS_ElemIteratorPtr

        """
        return _SMDS.SMDS_Mesh_elementGeomIterator(self, *args)


    def elementEntityIterator(self, *args):
        """
        elementEntityIterator(SMDS_Mesh self, SMDSAbs_EntityType type) -> shared_ptr_SMDS_Iterator_SMDS_MeshElement

        :type type: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
        :rtype: OCC.wrapper.SMDS.SMDS_ElemIteratorPtr

        """
        return _SMDS.SMDS_Mesh_elementEntityIterator(self, *args)


    def shapeNodesIterator(self, *args):
        """
        shapeNodesIterator(SMDS_Mesh self, int shapeID, size_t nbElemsToReturn=-1, SMDS_MeshNode sm1stNode=None) -> shared_ptr_SMDS_Iterator_SMDS_MeshNode

        :type shapeID: int
        :type nbElemsToReturn: size_t
        :type sm1stNode: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: OCC.wrapper.SMDS.SMDS_NodeIteratorPtr

        """
        return _SMDS.SMDS_Mesh_shapeNodesIterator(self, *args)


    def shapeElementsIterator(self, *args):
        """
        shapeElementsIterator(SMDS_Mesh self, int shapeID, size_t nbElemsToReturn=-1, SMDS_MeshElement sm1stElem=None) -> shared_ptr_SMDS_Iterator_SMDS_MeshElement

        :type shapeID: int
        :type nbElemsToReturn: size_t
        :type sm1stElem: OCC.wrapper.SMDS.SMDS_MeshElement
        :rtype: OCC.wrapper.SMDS.SMDS_ElemIteratorPtr

        """
        return _SMDS.SMDS_Mesh_shapeElementsIterator(self, *args)


    def GetElementType(self, *args):
        """
        GetElementType(SMDS_Mesh self, int const id, bool const iselem) -> SMDSAbs_ElementType

        :type id: const int
        :type iselem: const bool
        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

        """
        return _SMDS.SMDS_Mesh_GetElementType(self, *args)


    def AddSubMesh(self, *args):
        """
        AddSubMesh(SMDS_Mesh self) -> SMDS_Mesh

        :rtype: OCC.wrapper.SMDS.SMDS_Mesh

        """
        return _SMDS.SMDS_Mesh_AddSubMesh(self, *args)


    def AddNodeWithID(self, *args):
        """
        AddNodeWithID(SMDS_Mesh self, double x, double y, double z, int ID) -> SMDS_MeshNode

        :type x: double
        :type y: double
        :type z: double
        :type ID: int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _SMDS.SMDS_Mesh_AddNodeWithID(self, *args)


    def AddNode(self, *args):
        """
        AddNode(SMDS_Mesh self, double x, double y, double z) -> SMDS_MeshNode

        :type x: double
        :type y: double
        :type z: double
        :rtype: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _SMDS.SMDS_Mesh_AddNode(self, *args)


    def Add0DElementWithID(self, *args):
        """
        Add0DElementWithID(SMDS_Mesh self, int n, int ID) -> SMDS_Mesh0DElement
        Add0DElementWithID(SMDS_Mesh self, SMDS_MeshNode n, int ID) -> SMDS_Mesh0DElement

        :type n: OCC.wrapper.SMDS.SMDS_MeshNode
        :type ID: int
        :rtype: OCC.wrapper.SMDS.SMDS_Mesh0DElement

        """
        return _SMDS.SMDS_Mesh_Add0DElementWithID(self, *args)


    def Add0DElement(self, *args):
        """
        Add0DElement(SMDS_Mesh self, SMDS_MeshNode n) -> SMDS_Mesh0DElement

        :type n: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: OCC.wrapper.SMDS.SMDS_Mesh0DElement

        """
        return _SMDS.SMDS_Mesh_Add0DElement(self, *args)


    def AddBallWithID(self, *args):
        """
        AddBallWithID(SMDS_Mesh self, int n, double diameter, int ID) -> SMDS_BallElement
        AddBallWithID(SMDS_Mesh self, SMDS_MeshNode n, double diameter, int ID) -> SMDS_BallElement

        :type n: OCC.wrapper.SMDS.SMDS_MeshNode
        :type diameter: double
        :type ID: int
        :rtype: OCC.wrapper.SMDS.SMDS_BallElement

        """
        return _SMDS.SMDS_Mesh_AddBallWithID(self, *args)


    def AddBall(self, *args):
        """
        AddBall(SMDS_Mesh self, SMDS_MeshNode n, double diameter) -> SMDS_BallElement

        :type n: OCC.wrapper.SMDS.SMDS_MeshNode
        :type diameter: double
        :rtype: OCC.wrapper.SMDS.SMDS_BallElement

        """
        return _SMDS.SMDS_Mesh_AddBall(self, *args)


    def AddEdgeWithID(self, *args):
        """
        AddEdgeWithID(SMDS_Mesh self, int n1, int n2, int ID) -> SMDS_MeshEdge
        AddEdgeWithID(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, int ID) -> SMDS_MeshEdge
        AddEdgeWithID(SMDS_Mesh self, int n1, int n2, int n12, int ID) -> SMDS_MeshEdge
        AddEdgeWithID(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n12, int ID) -> SMDS_MeshEdge

        :type n1: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n2: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n12: OCC.wrapper.SMDS.SMDS_MeshNode
        :type ID: int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshEdge

        """
        return _SMDS.SMDS_Mesh_AddEdgeWithID(self, *args)


    def AddEdge(self, *args):
        """
        AddEdge(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2) -> SMDS_MeshEdge
        AddEdge(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n12) -> SMDS_MeshEdge

        :type n1: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n2: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n12: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: OCC.wrapper.SMDS.SMDS_MeshEdge

        """
        return _SMDS.SMDS_Mesh_AddEdge(self, *args)


    def AddFaceWithID(self, *args):
        """
        AddFaceWithID(SMDS_Mesh self, int n1, int n2, int n3, int ID) -> SMDS_MeshFace
        AddFaceWithID(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, int ID) -> SMDS_MeshFace
        AddFaceWithID(SMDS_Mesh self, int n1, int n2, int n3, int n4, int ID) -> SMDS_MeshFace
        AddFaceWithID(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, int ID) -> SMDS_MeshFace
        AddFaceWithID(SMDS_Mesh self, int n1, int n2, int n3, int n12, int n23, int n31, int ID) -> SMDS_MeshFace
        AddFaceWithID(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n31, int ID) -> SMDS_MeshFace
        AddFaceWithID(SMDS_Mesh self, int n1, int n2, int n3, int n12, int n23, int n31, int nCenter, int ID) -> SMDS_MeshFace
        AddFaceWithID(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n31, SMDS_MeshNode nCenter, int ID) -> SMDS_MeshFace
        AddFaceWithID(SMDS_Mesh self, int n1, int n2, int n3, int n4, int n12, int n23, int n34, int n41, int ID) -> SMDS_MeshFace
        AddFaceWithID(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n34, SMDS_MeshNode n41, int ID) -> SMDS_MeshFace
        AddFaceWithID(SMDS_Mesh self, int n1, int n2, int n3, int n4, int n12, int n23, int n34, int n41, int nCenter, int ID) -> SMDS_MeshFace
        AddFaceWithID(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n34, SMDS_MeshNode n41, SMDS_MeshNode nCenter, int ID) -> SMDS_MeshFace

        :type n1: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n2: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n3: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n4: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n12: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n23: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n34: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n41: OCC.wrapper.SMDS.SMDS_MeshNode
        :type nCenter: OCC.wrapper.SMDS.SMDS_MeshNode
        :type ID: int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshFace

        """
        return _SMDS.SMDS_Mesh_AddFaceWithID(self, *args)


    def AddFace(self, *args):
        """
        AddFace(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3) -> SMDS_MeshFace
        AddFace(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4) -> SMDS_MeshFace
        AddFace(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n31) -> SMDS_MeshFace
        AddFace(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n31, SMDS_MeshNode nCenter) -> SMDS_MeshFace
        AddFace(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n34, SMDS_MeshNode n41) -> SMDS_MeshFace
        AddFace(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n34, SMDS_MeshNode n41, SMDS_MeshNode nCenter) -> SMDS_MeshFace

        :type n1: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n2: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n3: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n4: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n12: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n23: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n34: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n41: OCC.wrapper.SMDS.SMDS_MeshNode
        :type nCenter: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: OCC.wrapper.SMDS.SMDS_MeshFace

        """
        return _SMDS.SMDS_Mesh_AddFace(self, *args)


    def AddVolumeWithID(self, *args):
        """
        AddVolumeWithID(SMDS_Mesh self, int n1, int n2, int n3, int n4, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMDS_Mesh self, int n1, int n2, int n3, int n4, int n5, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMDS_Mesh self, int n1, int n2, int n3, int n4, int n5, int n6, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMDS_Mesh self, int n1, int n2, int n3, int n4, int n5, int n6, int n7, int n8, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n7, SMDS_MeshNode n8, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMDS_Mesh self, int n1, int n2, int n3, int n4, int n5, int n6, int n7, int n8, int n9, int n10, int n11, int n12, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n7, SMDS_MeshNode n8, SMDS_MeshNode n9, SMDS_MeshNode n10, SMDS_MeshNode n11, SMDS_MeshNode n12, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMDS_Mesh self, int n1, int n2, int n3, int n4, int n12, int n23, int n31, int n14, int n24, int n34, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n31, SMDS_MeshNode n14, SMDS_MeshNode n24, SMDS_MeshNode n34, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMDS_Mesh self, int n1, int n2, int n3, int n4, int n5, int n12, int n23, int n34, int n41, int n15, int n25, int n35, int n45, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n34, SMDS_MeshNode n41, SMDS_MeshNode n15, SMDS_MeshNode n25, SMDS_MeshNode n35, SMDS_MeshNode n45, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMDS_Mesh self, int n1, int n2, int n3, int n4, int n5, int n6, int n12, int n23, int n31, int n45, int n56, int n64, int n14, int n25, int n36, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n31, SMDS_MeshNode n45, SMDS_MeshNode n56, SMDS_MeshNode n64, SMDS_MeshNode n14, SMDS_MeshNode n25, SMDS_MeshNode n36, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMDS_Mesh self, int n1, int n2, int n3, int n4, int n5, int n6, int n12, int n23, int n31, int n45, int n56, int n64, int n14, int n25, int n36, int n1245, int n2356, int n1346, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n31, SMDS_MeshNode n45, SMDS_MeshNode n56, SMDS_MeshNode n64, SMDS_MeshNode n14, SMDS_MeshNode n25, SMDS_MeshNode n36, SMDS_MeshNode n1245, SMDS_MeshNode n2356, SMDS_MeshNode n1346, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMDS_Mesh self, int n1, int n2, int n3, int n4, int n5, int n6, int n7, int n8, int n12, int n23, int n34, int n41, int n56, int n67, int n78, int n85, int n15, int n26, int n37, int n48, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n7, SMDS_MeshNode n8, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n34, SMDS_MeshNode n41, SMDS_MeshNode n56, SMDS_MeshNode n67, SMDS_MeshNode n78, SMDS_MeshNode n85, SMDS_MeshNode n15, SMDS_MeshNode n26, SMDS_MeshNode n37, SMDS_MeshNode n48, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMDS_Mesh self, int n1, int n2, int n3, int n4, int n5, int n6, int n7, int n8, int n12, int n23, int n34, int n41, int n56, int n67, int n78, int n85, int n15, int n26, int n37, int n48, int n1234, int n1256, int n2367, int n3478, int n1458, int n5678, int nCenter, int ID) -> SMDS_MeshVolume
        AddVolumeWithID(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n7, SMDS_MeshNode n8, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n34, SMDS_MeshNode n41, SMDS_MeshNode n56, SMDS_MeshNode n67, SMDS_MeshNode n78, SMDS_MeshNode n85, SMDS_MeshNode n15, SMDS_MeshNode n26, SMDS_MeshNode n37, SMDS_MeshNode n48, SMDS_MeshNode n1234, SMDS_MeshNode n1256, SMDS_MeshNode n2367, SMDS_MeshNode n3478, SMDS_MeshNode n1458, SMDS_MeshNode n5678, SMDS_MeshNode nCenter, int ID) -> SMDS_MeshVolume

        :type n1: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n2: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n3: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n4: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n5: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n6: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n7: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n8: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n12: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n23: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n34: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n41: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n56: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n67: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n78: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n85: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n15: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n26: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n37: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n48: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n1234: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n1256: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n2367: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n3478: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n1458: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n5678: OCC.wrapper.SMDS.SMDS_MeshNode
        :type nCenter: OCC.wrapper.SMDS.SMDS_MeshNode
        :type ID: int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshVolume

        """
        return _SMDS.SMDS_Mesh_AddVolumeWithID(self, *args)


    def AddVolume(self, *args):
        """
        AddVolume(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4) -> SMDS_MeshVolume
        AddVolume(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5) -> SMDS_MeshVolume
        AddVolume(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6) -> SMDS_MeshVolume
        AddVolume(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n7, SMDS_MeshNode n8) -> SMDS_MeshVolume
        AddVolume(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n7, SMDS_MeshNode n8, SMDS_MeshNode n9, SMDS_MeshNode n10, SMDS_MeshNode n11, SMDS_MeshNode n12) -> SMDS_MeshVolume
        AddVolume(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n31, SMDS_MeshNode n14, SMDS_MeshNode n24, SMDS_MeshNode n34) -> SMDS_MeshVolume
        AddVolume(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n34, SMDS_MeshNode n41, SMDS_MeshNode n15, SMDS_MeshNode n25, SMDS_MeshNode n35, SMDS_MeshNode n45) -> SMDS_MeshVolume
        AddVolume(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n31, SMDS_MeshNode n45, SMDS_MeshNode n56, SMDS_MeshNode n64, SMDS_MeshNode n14, SMDS_MeshNode n25, SMDS_MeshNode n36) -> SMDS_MeshVolume
        AddVolume(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n31, SMDS_MeshNode n45, SMDS_MeshNode n56, SMDS_MeshNode n64, SMDS_MeshNode n14, SMDS_MeshNode n25, SMDS_MeshNode n36, SMDS_MeshNode n1245, SMDS_MeshNode n2356, SMDS_MeshNode n1346) -> SMDS_MeshVolume
        AddVolume(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n7, SMDS_MeshNode n8, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n34, SMDS_MeshNode n41, SMDS_MeshNode n56, SMDS_MeshNode n67, SMDS_MeshNode n78, SMDS_MeshNode n85, SMDS_MeshNode n15, SMDS_MeshNode n26, SMDS_MeshNode n37, SMDS_MeshNode n48) -> SMDS_MeshVolume
        AddVolume(SMDS_Mesh self, SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n7, SMDS_MeshNode n8, SMDS_MeshNode n12, SMDS_MeshNode n23, SMDS_MeshNode n34, SMDS_MeshNode n41, SMDS_MeshNode n56, SMDS_MeshNode n67, SMDS_MeshNode n78, SMDS_MeshNode n85, SMDS_MeshNode n15, SMDS_MeshNode n26, SMDS_MeshNode n37, SMDS_MeshNode n48, SMDS_MeshNode n1234, SMDS_MeshNode n1256, SMDS_MeshNode n2367, SMDS_MeshNode n3478, SMDS_MeshNode n1458, SMDS_MeshNode n5678, SMDS_MeshNode nCenter) -> SMDS_MeshVolume

        :type n1: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n2: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n3: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n4: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n5: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n6: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n7: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n8: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n12: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n23: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n34: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n41: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n56: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n67: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n78: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n85: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n15: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n26: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n37: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n48: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n1234: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n1256: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n2367: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n3478: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n1458: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n5678: OCC.wrapper.SMDS.SMDS_MeshNode
        :type nCenter: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: OCC.wrapper.SMDS.SMDS_MeshVolume

        """
        return _SMDS.SMDS_Mesh_AddVolume(self, *args)


    def AddPolygonalFaceWithID(self, *args):
        """
        AddPolygonalFaceWithID(SMDS_Mesh self, std::vector< int,std::allocator< int > > const & nodes_ids, int const ID) -> SMDS_MeshFace
        AddPolygonalFaceWithID(SMDS_Mesh self, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > const & nodes, int const ID) -> SMDS_MeshFace

        :type nodes: OCC.wrapper.SMDS.vector_SMDS_MeshNode
        :type ID: const int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshFace

        """
        return _SMDS.SMDS_Mesh_AddPolygonalFaceWithID(self, *args)


    def AddPolygonalFace(self, *args):
        """
        AddPolygonalFace(SMDS_Mesh self, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > const & nodes) -> SMDS_MeshFace

        :type nodes: OCC.wrapper.SMDS.vector_SMDS_MeshNode
        :rtype: OCC.wrapper.SMDS.SMDS_MeshFace

        """
        return _SMDS.SMDS_Mesh_AddPolygonalFace(self, *args)


    def AddQuadPolygonalFaceWithID(self, *args):
        """
        AddQuadPolygonalFaceWithID(SMDS_Mesh self, std::vector< int,std::allocator< int > > const & nodes_ids, int const ID) -> SMDS_MeshFace
        AddQuadPolygonalFaceWithID(SMDS_Mesh self, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > const & nodes, int const ID) -> SMDS_MeshFace

        :type nodes: OCC.wrapper.SMDS.vector_SMDS_MeshNode
        :type ID: const int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshFace

        """
        return _SMDS.SMDS_Mesh_AddQuadPolygonalFaceWithID(self, *args)


    def AddQuadPolygonalFace(self, *args):
        """
        AddQuadPolygonalFace(SMDS_Mesh self, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > const & nodes) -> SMDS_MeshFace

        :type nodes: OCC.wrapper.SMDS.vector_SMDS_MeshNode
        :rtype: OCC.wrapper.SMDS.SMDS_MeshFace

        """
        return _SMDS.SMDS_Mesh_AddQuadPolygonalFace(self, *args)


    def AddPolyhedralVolumeWithID(self, *args):
        """
        AddPolyhedralVolumeWithID(SMDS_Mesh self, std::vector< int,std::allocator< int > > const & nodes_ids, std::vector< int,std::allocator< int > > const & quantities, int const ID) -> SMDS_MeshVolume
        AddPolyhedralVolumeWithID(SMDS_Mesh self, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > const & nodes, std::vector< int,std::allocator< int > > const & quantities, int const ID) -> SMDS_MeshVolume

        :type nodes: OCC.wrapper.SMDS.vector_SMDS_MeshNode
        :type quantities: OCC.wrapper.SMDS.vector
        :type ID: const int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshVolume

        """
        return _SMDS.SMDS_Mesh_AddPolyhedralVolumeWithID(self, *args)


    def AddPolyhedralVolume(self, *args):
        """
        AddPolyhedralVolume(SMDS_Mesh self, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > const & nodes, std::vector< int,std::allocator< int > > const & quantities) -> SMDS_MeshVolume

        :type nodes: OCC.wrapper.SMDS.vector_SMDS_MeshNode
        :type quantities: OCC.wrapper.SMDS.vector
        :rtype: OCC.wrapper.SMDS.SMDS_MeshVolume

        """
        return _SMDS.SMDS_Mesh_AddPolyhedralVolume(self, *args)


    def AddVolumeFromVtkIds(self, *args):
        """
        AddVolumeFromVtkIds(SMDS_Mesh self, std::vector< vtkIdType,std::allocator< vtkIdType > > const & vtkNodeIds) -> SMDS_MeshVolume

        :type vtkNodeIds: OCC.wrapper.SMDS.vector_vtkIdType
        :rtype: OCC.wrapper.SMDS.SMDS_MeshVolume

        """
        return _SMDS.SMDS_Mesh_AddVolumeFromVtkIds(self, *args)


    def AddFaceFromVtkIds(self, *args):
        """
        AddFaceFromVtkIds(SMDS_Mesh self, std::vector< vtkIdType,std::allocator< vtkIdType > > const & vtkNodeIds) -> SMDS_MeshFace

        :type vtkNodeIds: OCC.wrapper.SMDS.vector_vtkIdType
        :rtype: OCC.wrapper.SMDS.SMDS_MeshFace

        """
        return _SMDS.SMDS_Mesh_AddFaceFromVtkIds(self, *args)


    def MoveNode(self, *args):
        """
        MoveNode(SMDS_Mesh self, SMDS_MeshNode n, double x, double y, double z)

        :type n: OCC.wrapper.SMDS.SMDS_MeshNode
        :type x: double
        :type y: double
        :type z: double

        """
        return _SMDS.SMDS_Mesh_MoveNode(self, *args)


    def RemoveElement(self, *args):
        """
        RemoveElement(SMDS_Mesh self, SMDS_MeshElement elem, std::vector< SMDS_MeshElement const *,std::allocator< SMDS_MeshElement const * > > & removedElems, std::vector< SMDS_MeshElement const *,std::allocator< SMDS_MeshElement const * > > & removedNodes, bool const removenodes=False)
        RemoveElement(SMDS_Mesh self, SMDS_MeshElement elem, bool removenodes=False)

        :type elem: OCC.wrapper.SMDS.SMDS_MeshElement
        :type removenodes: bool

        """
        return _SMDS.SMDS_Mesh_RemoveElement(self, *args)


    def RemoveNode(self, *args):
        """
        RemoveNode(SMDS_Mesh self, SMDS_MeshNode node)

        :type node: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _SMDS.SMDS_Mesh_RemoveNode(self, *args)


    def RemoveFreeElement(self, *args):
        """
        RemoveFreeElement(SMDS_Mesh self, SMDS_MeshElement elem)

        Remove only the given element and only if it is free.
        Method does not work for meshes with descendants.
        Implemented for fast cleaning of meshes.

        :type elem: OCC.wrapper.SMDS.SMDS_MeshElement

        """
        return _SMDS.SMDS_Mesh_RemoveFreeElement(self, *args)


    def Clear(self, *args):
        """Clear(SMDS_Mesh self)"""
        return _SMDS.SMDS_Mesh_Clear(self, *args)


    def RemoveFromParent(self, *args):
        """
        RemoveFromParent(SMDS_Mesh self) -> bool

        :rtype: bool

        """
        return _SMDS.SMDS_Mesh_RemoveFromParent(self, *args)


    def RemoveSubMesh(self, *args):
        """
        RemoveSubMesh(SMDS_Mesh self, SMDS_Mesh aMesh) -> bool

        :type aMesh: OCC.wrapper.SMDS.SMDS_Mesh
        :rtype: bool

        """
        return _SMDS.SMDS_Mesh_RemoveSubMesh(self, *args)


    def ChangeElementNodes(self, *args):
        """
        ChangeElementNodes(SMDS_Mesh self, SMDS_MeshElement elem, SMDS_MeshNode const ** nodes, int const nbnodes) -> bool

        :type elem: OCC.wrapper.SMDS.SMDS_MeshElement
        :type nodes: const SMDS_MeshNode *[]
        :type nbnodes: const int
        :rtype: bool

        """
        return _SMDS.SMDS_Mesh_ChangeElementNodes(self, *args)


    def CompactMesh(self, *args):
        """CompactMesh(SMDS_Mesh self)"""
        return _SMDS.SMDS_Mesh_CompactMesh(self, *args)


    def IsCompacted(self, *args):
        """
        IsCompacted(SMDS_Mesh self) -> bool

        :rtype: bool

        """
        return _SMDS.SMDS_Mesh_IsCompacted(self, *args)


    def FindNode(self, *args):
        """
        FindNode(SMDS_Mesh self, int idnode) -> SMDS_MeshNode

        :type idnode: int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _SMDS.SMDS_Mesh_FindNode(self, *args)


    def FindNodeVtk(self, *args):
        """
        FindNodeVtk(SMDS_Mesh self, int idnode) -> SMDS_MeshNode

        :type idnode: int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _SMDS.SMDS_Mesh_FindNodeVtk(self, *args)


    def FindElementVtk(self, *args):
        """
        FindElementVtk(SMDS_Mesh self, int IDelem) -> SMDS_MeshElement

        :type IDelem: int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshElement

        """
        return _SMDS.SMDS_Mesh_FindElementVtk(self, *args)


    def Find0DElement(*args):
        """
        Find0DElement(SMDS_MeshNode n) -> SMDS_Mesh0DElement

        :type n: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: OCC.wrapper.SMDS.SMDS_Mesh0DElement

        """
        return _SMDS.SMDS_Mesh_Find0DElement(*args)

    Find0DElement = staticmethod(Find0DElement)

    def FindBall(*args):
        """
        FindBall(SMDS_MeshNode n) -> SMDS_BallElement

        :type n: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: OCC.wrapper.SMDS.SMDS_BallElement

        """
        return _SMDS.SMDS_Mesh_FindBall(*args)

    FindBall = staticmethod(FindBall)

    def FindEdge(*args):
        """
        FindEdge(SMDS_MeshNode n1, SMDS_MeshNode n2) -> SMDS_MeshEdge
        FindEdge(SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3) -> SMDS_MeshEdge

        :type n1: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n2: OCC.wrapper.SMDS.SMDS_MeshNode
        :type n3: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: OCC.wrapper.SMDS.SMDS_MeshEdge

        """
        return _SMDS.SMDS_Mesh_FindEdge(*args)

    FindEdge = staticmethod(FindEdge)

    def FindFace(*args):
        """
        FindFace(SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3) -> SMDS_MeshFace
        FindFace(SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4) -> SMDS_MeshFace
        FindFace(SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6) -> SMDS_MeshFace
        FindFace(SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n7, SMDS_MeshNode n8) -> SMDS_MeshFace
        FindFace(std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > const & nodes) -> SMDS_MeshFace

        :type nodes: OCC.wrapper.SMDS.vector_SMDS_MeshNode
        :rtype: OCC.wrapper.SMDS.SMDS_MeshFace

        """
        return _SMDS.SMDS_Mesh_FindFace(*args)

    FindFace = staticmethod(FindFace)

    def FindElement(*args):
        """
        FindElement(int IDelem) -> SMDS_MeshElement
        FindElement(std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > const & nodes, SMDSAbs_ElementType const type=SMDSAbs_All, bool const noMedium=True) -> SMDS_MeshElement

        :type nodes: OCC.wrapper.SMDS.vector_SMDS_MeshNode
        :type type: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType
        :type noMedium: const bool
        :rtype: OCC.wrapper.SMDS.SMDS_MeshElement

        """
        return _SMDS.SMDS_Mesh_FindElement(*args)

    FindElement = staticmethod(FindElement)

    def GetElementsByNodes(*args):
        """
        GetElementsByNodes(std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > const & nodes, std::vector< SMDS_MeshElement const *,std::allocator< SMDS_MeshElement const * > > & foundElems, SMDSAbs_ElementType const type=SMDSAbs_All) -> int

        :type nodes: OCC.wrapper.SMDS.vector_SMDS_MeshNode
        :type foundElems: OCC.wrapper.SMDS.vector_SMDS_MeshElement
        :type type: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType
        :rtype: int

        """
        return _SMDS.SMDS_Mesh_GetElementsByNodes(*args)

    GetElementsByNodes = staticmethod(GetElementsByNodes)

    def Contains(self, *args):
        """
        Contains(SMDS_Mesh self, SMDS_MeshElement elem) -> bool

        :type elem: OCC.wrapper.SMDS.SMDS_MeshElement
        :rtype: bool

        """
        return _SMDS.SMDS_Mesh_Contains(self, *args)


    def CheckMemory(*args):
        """
        CheckMemory(bool const doNotRaise=False) -> int

        rief Raise an exception if free memory (ram+swap) too low
        \param doNotRaise - if true, suppress exception, just return free memory size
        etval int - amount of available memory in MB or negative number in failure case

        :type doNotRaise: const bool
        :rtype: int

        """
        return _SMDS.SMDS_Mesh_CheckMemory(*args)

    CheckMemory = staticmethod(CheckMemory)

    def MaxNodeID(self, *args):
        """
        MaxNodeID(SMDS_Mesh self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_Mesh_MaxNodeID(self, *args)


    def MinNodeID(self, *args):
        """
        MinNodeID(SMDS_Mesh self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_Mesh_MinNodeID(self, *args)


    def MaxElementID(self, *args):
        """
        MaxElementID(SMDS_Mesh self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_Mesh_MaxElementID(self, *args)


    def MinElementID(self, *args):
        """
        MinElementID(SMDS_Mesh self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_Mesh_MinElementID(self, *args)


    def GetMeshInfo(self, *args):
        """
        :rtype: OCC.wrapper.SMDS.SMDS_MeshInfo

        """
        res = _SMDS.SMDS_Mesh_GetMeshInfo(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NbNodes(self, *args):
        """
        NbNodes(SMDS_Mesh self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_Mesh_NbNodes(self, *args)


    def NbElements(self, *args):
        """
        NbElements(SMDS_Mesh self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_Mesh_NbElements(self, *args)


    def Nb0DElements(self, *args):
        """
        Nb0DElements(SMDS_Mesh self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_Mesh_Nb0DElements(self, *args)


    def NbBalls(self, *args):
        """
        NbBalls(SMDS_Mesh self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_Mesh_NbBalls(self, *args)


    def NbEdges(self, *args):
        """
        NbEdges(SMDS_Mesh self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_Mesh_NbEdges(self, *args)


    def NbFaces(self, *args):
        """
        NbFaces(SMDS_Mesh self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_Mesh_NbFaces(self, *args)


    def NbVolumes(self, *args):
        """
        NbVolumes(SMDS_Mesh self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_Mesh_NbVolumes(self, *args)


    def NbSubMesh(self, *args):
        """
        NbSubMesh(SMDS_Mesh self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_Mesh_NbSubMesh(self, *args)


    def getMaxDim(self, *args):
        """
        getMaxDim(SMDS_Mesh self) -> double

        :rtype: double

        """
        return _SMDS.SMDS_Mesh_getMaxDim(self, *args)


    def FromVtkToSmds(self, *args):
        """
        FromVtkToSmds(SMDS_Mesh self, int vtkid) -> int

        :type vtkid: int
        :rtype: int

        """
        return _SMDS.SMDS_Mesh_FromVtkToSmds(self, *args)


    def dumpGrid(self, *args):
        """
        dumpGrid(SMDS_Mesh self, std::string ficdump)

        :type ficdump: string

        """
        return _SMDS.SMDS_Mesh_dumpGrid(self, *args)


    def setMyModified(self, *args):
        """
        setMyModified(SMDS_Mesh self)

        low level modification: add, change or remove node or element


        """
        return _SMDS.SMDS_Mesh_setMyModified(self, *args)


    def Modified(self, *args):
        """Modified(SMDS_Mesh self)"""
        return _SMDS.SMDS_Mesh_Modified(self, *args)


    def GetMTime(self, *args):
        """
        GetMTime(SMDS_Mesh self) -> vtkMTimeType

        :rtype: vtkMTimeType

        """
        return _SMDS.SMDS_Mesh_GetMTime(self, *args)

    __swig_destroy__ = _SMDS.delete_SMDS_Mesh
SMDS_Mesh_swigregister = _SMDS.SMDS_Mesh_swigregister
SMDS_Mesh_swigregister(SMDS_Mesh)

def SMDS_Mesh_Find0DElement(*args):
    """
    SMDS_Mesh_Find0DElement(SMDS_MeshNode n) -> SMDS_Mesh0DElement

    :type n: OCC.wrapper.SMDS.SMDS_MeshNode
    :rtype: OCC.wrapper.SMDS.SMDS_Mesh0DElement

    """
    return _SMDS.SMDS_Mesh_Find0DElement(*args)

def SMDS_Mesh_FindBall(*args):
    """
    SMDS_Mesh_FindBall(SMDS_MeshNode n) -> SMDS_BallElement

    :type n: OCC.wrapper.SMDS.SMDS_MeshNode
    :rtype: OCC.wrapper.SMDS.SMDS_BallElement

    """
    return _SMDS.SMDS_Mesh_FindBall(*args)

def SMDS_Mesh_FindEdge(*args):
    """
    FindEdge(SMDS_MeshNode n1, SMDS_MeshNode n2) -> SMDS_MeshEdge
    SMDS_Mesh_FindEdge(SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3) -> SMDS_MeshEdge

    :type n1: OCC.wrapper.SMDS.SMDS_MeshNode
    :type n2: OCC.wrapper.SMDS.SMDS_MeshNode
    :type n3: OCC.wrapper.SMDS.SMDS_MeshNode
    :rtype: OCC.wrapper.SMDS.SMDS_MeshEdge

    """
    return _SMDS.SMDS_Mesh_FindEdge(*args)

def SMDS_Mesh_FindFace(*args):
    """
    FindFace(SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3) -> SMDS_MeshFace
    FindFace(SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4) -> SMDS_MeshFace
    FindFace(SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6) -> SMDS_MeshFace
    FindFace(SMDS_MeshNode n1, SMDS_MeshNode n2, SMDS_MeshNode n3, SMDS_MeshNode n4, SMDS_MeshNode n5, SMDS_MeshNode n6, SMDS_MeshNode n7, SMDS_MeshNode n8) -> SMDS_MeshFace
    SMDS_Mesh_FindFace(std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > const & nodes) -> SMDS_MeshFace

    :type nodes: OCC.wrapper.SMDS.vector_SMDS_MeshNode
    :rtype: OCC.wrapper.SMDS.SMDS_MeshFace

    """
    return _SMDS.SMDS_Mesh_FindFace(*args)

def SMDS_Mesh_FindElement(*args):
    """
    FindElement(int IDelem) -> SMDS_MeshElement
    SMDS_Mesh_FindElement(std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > const & nodes, SMDSAbs_ElementType const type=SMDSAbs_All, bool const noMedium=True) -> SMDS_MeshElement

    :type nodes: OCC.wrapper.SMDS.vector_SMDS_MeshNode
    :type type: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType
    :type noMedium: const bool
    :rtype: OCC.wrapper.SMDS.SMDS_MeshElement

    """
    return _SMDS.SMDS_Mesh_FindElement(*args)

def SMDS_Mesh_GetElementsByNodes(*args):
    """
    SMDS_Mesh_GetElementsByNodes(std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > const & nodes, std::vector< SMDS_MeshElement const *,std::allocator< SMDS_MeshElement const * > > & foundElems, SMDSAbs_ElementType const type=SMDSAbs_All) -> int

    :type nodes: OCC.wrapper.SMDS.vector_SMDS_MeshNode
    :type foundElems: OCC.wrapper.SMDS.vector_SMDS_MeshElement
    :type type: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType
    :rtype: int

    """
    return _SMDS.SMDS_Mesh_GetElementsByNodes(*args)

def SMDS_Mesh_CheckMemory(*args):
    """
    SMDS_Mesh_CheckMemory(bool const doNotRaise=False) -> int

    rief Raise an exception if free memory (ram+swap) too low
    \param doNotRaise - if true, suppress exception, just return free memory size
    etval int - amount of available memory in MB or negative number in failure case

    :type doNotRaise: const bool
    :rtype: int

    """
    return _SMDS.SMDS_Mesh_CheckMemory(*args)

class SMDS_MeshInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """__init__(SMDS_MeshInfo self) -> SMDS_MeshInfo"""
        this = _SMDS.new_SMDS_MeshInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def assign(self, *args):
        """
        assign(SMDS_MeshInfo self, SMDS_MeshInfo other) -> SMDS_MeshInfo

        :type other: OCC.wrapper.SMDS.SMDS_MeshInfo
        :rtype: OCC.wrapper.SMDS.SMDS_MeshInfo

        """
        return _SMDS.SMDS_MeshInfo_assign(self, *args)


    def Clear(self, *args):
        """Clear(SMDS_MeshInfo self)"""
        return _SMDS.SMDS_MeshInfo_Clear(self, *args)


    def NbElements(self, *args):
        """
        NbElements(SMDS_MeshInfo self, SMDSAbs_ElementType type=SMDSAbs_All) -> int
        NbElements(SMDS_MeshInfo self, SMDSAbs_EntityType type) -> int
        NbElements(SMDS_MeshInfo self, SMDSAbs_GeometryType type) -> int

        :type type: OCC.wrapper.SMDSAbs.SMDSAbs_GeometryType
        :rtype: int

        """
        return _SMDS.SMDS_MeshInfo_NbElements(self, *args)


    def NbEntities(self, *args):
        """
        NbEntities(SMDS_MeshInfo self, SMDSAbs_EntityType type) -> int

        :type type: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType
        :rtype: int

        """
        return _SMDS.SMDS_MeshInfo_NbEntities(self, *args)


    def NbElementsOfGeom(self, *args):
        """
        NbElementsOfGeom(SMDS_MeshInfo self, SMDSAbs_GeometryType geom) -> int

        :type geom: OCC.wrapper.SMDSAbs.SMDSAbs_GeometryType
        :rtype: int

        """
        return _SMDS.SMDS_MeshInfo_NbElementsOfGeom(self, *args)


    def NbNodes(self, *args):
        """
        NbNodes(SMDS_MeshInfo self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshInfo_NbNodes(self, *args)


    def Nb0DElements(self, *args):
        """
        Nb0DElements(SMDS_MeshInfo self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshInfo_Nb0DElements(self, *args)


    def NbBalls(self, *args):
        """
        NbBalls(SMDS_MeshInfo self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshInfo_NbBalls(self, *args)


    def NbEdges(self, *args):
        """
        NbEdges(SMDS_MeshInfo self, SMDSAbs_ElementOrder order=ORDER_ANY) -> int

        :type order: OCC.wrapper.SMDSAbs.SMDSAbs_ElementOrder
        :rtype: int

        """
        return _SMDS.SMDS_MeshInfo_NbEdges(self, *args)


    def NbFaces(self, *args):
        """
        NbFaces(SMDS_MeshInfo self, SMDSAbs_ElementOrder order=ORDER_ANY) -> int

        :type order: OCC.wrapper.SMDSAbs.SMDSAbs_ElementOrder
        :rtype: int

        """
        return _SMDS.SMDS_MeshInfo_NbFaces(self, *args)


    def NbTriangles(self, *args):
        """
        NbTriangles(SMDS_MeshInfo self, SMDSAbs_ElementOrder order=ORDER_ANY) -> int

        :type order: OCC.wrapper.SMDSAbs.SMDSAbs_ElementOrder
        :rtype: int

        """
        return _SMDS.SMDS_MeshInfo_NbTriangles(self, *args)


    def NbQuadrangles(self, *args):
        """
        NbQuadrangles(SMDS_MeshInfo self, SMDSAbs_ElementOrder order=ORDER_ANY) -> int

        :type order: OCC.wrapper.SMDSAbs.SMDSAbs_ElementOrder
        :rtype: int

        """
        return _SMDS.SMDS_MeshInfo_NbQuadrangles(self, *args)


    def NbBiQuadTriangles(self, *args):
        """
        NbBiQuadTriangles(SMDS_MeshInfo self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshInfo_NbBiQuadTriangles(self, *args)


    def NbBiQuadQuadrangles(self, *args):
        """
        NbBiQuadQuadrangles(SMDS_MeshInfo self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshInfo_NbBiQuadQuadrangles(self, *args)


    def NbPolygons(self, *args):
        """
        NbPolygons(SMDS_MeshInfo self, SMDSAbs_ElementOrder order=ORDER_ANY) -> int

        :type order: OCC.wrapper.SMDSAbs.SMDSAbs_ElementOrder
        :rtype: int

        """
        return _SMDS.SMDS_MeshInfo_NbPolygons(self, *args)


    def NbVolumes(self, *args):
        """
        NbVolumes(SMDS_MeshInfo self, SMDSAbs_ElementOrder order=ORDER_ANY) -> int

        :type order: OCC.wrapper.SMDSAbs.SMDSAbs_ElementOrder
        :rtype: int

        """
        return _SMDS.SMDS_MeshInfo_NbVolumes(self, *args)


    def NbTetras(self, *args):
        """
        NbTetras(SMDS_MeshInfo self, SMDSAbs_ElementOrder order=ORDER_ANY) -> int

        :type order: OCC.wrapper.SMDSAbs.SMDSAbs_ElementOrder
        :rtype: int

        """
        return _SMDS.SMDS_MeshInfo_NbTetras(self, *args)


    def NbHexas(self, *args):
        """
        NbHexas(SMDS_MeshInfo self, SMDSAbs_ElementOrder order=ORDER_ANY) -> int

        :type order: OCC.wrapper.SMDSAbs.SMDSAbs_ElementOrder
        :rtype: int

        """
        return _SMDS.SMDS_MeshInfo_NbHexas(self, *args)


    def NbPyramids(self, *args):
        """
        NbPyramids(SMDS_MeshInfo self, SMDSAbs_ElementOrder order=ORDER_ANY) -> int

        :type order: OCC.wrapper.SMDSAbs.SMDSAbs_ElementOrder
        :rtype: int

        """
        return _SMDS.SMDS_MeshInfo_NbPyramids(self, *args)


    def NbPrisms(self, *args):
        """
        NbPrisms(SMDS_MeshInfo self, SMDSAbs_ElementOrder order=ORDER_ANY) -> int

        :type order: OCC.wrapper.SMDSAbs.SMDSAbs_ElementOrder
        :rtype: int

        """
        return _SMDS.SMDS_MeshInfo_NbPrisms(self, *args)


    def NbHexPrisms(self, *args):
        """
        NbHexPrisms(SMDS_MeshInfo self, SMDSAbs_ElementOrder order=ORDER_ANY) -> int

        :type order: OCC.wrapper.SMDSAbs.SMDSAbs_ElementOrder
        :rtype: int

        """
        return _SMDS.SMDS_MeshInfo_NbHexPrisms(self, *args)


    def NbTriQuadHexas(self, *args):
        """
        NbTriQuadHexas(SMDS_MeshInfo self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshInfo_NbTriQuadHexas(self, *args)


    def NbQuadPrisms(self, *args):
        """
        NbQuadPrisms(SMDS_MeshInfo self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshInfo_NbQuadPrisms(self, *args)


    def NbBiQuadPrisms(self, *args):
        """
        NbBiQuadPrisms(SMDS_MeshInfo self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshInfo_NbBiQuadPrisms(self, *args)


    def NbPolyhedrons(self, *args):
        """
        NbPolyhedrons(SMDS_MeshInfo self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshInfo_NbPolyhedrons(self, *args)

    __swig_destroy__ = _SMDS.delete_SMDS_MeshInfo
SMDS_MeshInfo_swigregister = _SMDS.SMDS_MeshInfo_swigregister
SMDS_MeshInfo_swigregister(SMDS_MeshInfo)

class SMDS_VertexPosition(SMDS_Position):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetTypeOfPosition(self, *args):
        """
        GetTypeOfPosition(SMDS_VertexPosition self) -> SMDS_TypeOfPosition

        :rtype: OCC.wrapper.SMDS.SMDS_TypeOfPosition

        """
        return _SMDS.SMDS_VertexPosition_GetTypeOfPosition(self, *args)


    def GetParameters(self, *args):
        """
        GetParameters(SMDS_VertexPosition self) -> double const *

        :rtype: const double *

        """
        return _SMDS.SMDS_VertexPosition_GetParameters(self, *args)


    def StaticPosition(*args):
        """
        StaticPosition() -> SMDS_Ptr_SMDS_Position

        :rtype: OCC.wrapper.SMDS.SMDS_PositionPtr

        """
        return _SMDS.SMDS_VertexPosition_StaticPosition(*args)

    StaticPosition = staticmethod(StaticPosition)

    def __init__(self):
        this = _SMDS.new_SMDS_VertexPosition()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SMDS.delete_SMDS_VertexPosition
SMDS_VertexPosition_swigregister = _SMDS.SMDS_VertexPosition_swigregister
SMDS_VertexPosition_swigregister(SMDS_VertexPosition)

def SMDS_VertexPosition_StaticPosition(*args):
    """
    SMDS_VertexPosition_StaticPosition() -> SMDS_Ptr_SMDS_Position

    :rtype: OCC.wrapper.SMDS.SMDS_PositionPtr

    """
    return _SMDS.SMDS_VertexPosition_StaticPosition(*args)

class SMDS_MeshEdge(SMDS_MeshCell):
    """
    rief Edge mesh element. This type is not allocated.
    It is only used as function argument type to provide more clear semantic.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetType(self, *args):
        """
        GetType(SMDS_MeshEdge self) -> SMDSAbs_ElementType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

        """
        return _SMDS.SMDS_MeshEdge_GetType(self, *args)


    def GetGeomType(self, *args):
        """
        GetGeomType(SMDS_MeshEdge self) -> SMDSAbs_GeometryType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_GeometryType

        """
        return _SMDS.SMDS_MeshEdge_GetGeomType(self, *args)


    def Type(*args):
        """
        Type() -> SMDSAbs_ElementType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

        """
        return _SMDS.SMDS_MeshEdge_Type(*args)

    Type = staticmethod(Type)

    def __init__(self):
        """
        rief Edge mesh element. This type is not allocated.
        It is only used as function argument type to provide more clear semantic.
        """
        this = _SMDS.new_SMDS_MeshEdge()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SMDS.delete_SMDS_MeshEdge
SMDS_MeshEdge_swigregister = _SMDS.SMDS_MeshEdge_swigregister
SMDS_MeshEdge_swigregister(SMDS_MeshEdge)

def SMDS_MeshEdge_Type(*args):
    """
    SMDS_MeshEdge_Type() -> SMDSAbs_ElementType

    :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

    """
    return _SMDS.SMDS_MeshEdge_Type(*args)

class SMDS_Down2D(SMDS_Downward):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getNumberOfUpCells(self, *args):
        """
        getNumberOfUpCells(SMDS_Down2D self, int cellId) -> int

        :type cellId: int
        :rtype: int

        """
        return _SMDS.SMDS_Down2D_getNumberOfUpCells(self, *args)


    def getUpCells(self, *args):
        """
        getUpCells(SMDS_Down2D self, int cellId) -> int const *

        :type cellId: int
        :rtype: const int *

        """
        return _SMDS.SMDS_Down2D_getUpCells(self, *args)


    def getUpTypes(self, *args):
        """
        getUpTypes(SMDS_Down2D self, int cellId) -> unsigned char const *

        :type cellId: int
        :rtype: const unsigned char *

        """
        return _SMDS.SMDS_Down2D_getUpTypes(self, *args)


    def getNodeIds(self, *args):
        """
        getNodeIds(SMDS_Down2D self, int cellId, std::set< int,std::less< int >,std::allocator< int > > & nodeSet)

        :type cellId: int
        :type nodeSet: OCC.wrapper.SMDS.set

        """
        return _SMDS.SMDS_Down2D_getNodeIds(self, *args)

SMDS_Down2D_swigregister = _SMDS.SMDS_Down2D_swigregister
SMDS_Down2D_swigregister(SMDS_Down2D)

class SMDS_Iterator_SMDS_MeshEdge(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def more(self, *args):
        """
        more(SMDS_Iterator_SMDS_MeshEdge self) -> bool

        Return true if and only if there are other object in this iterator

        :rtype: bool

        """
        return _SMDS.SMDS_Iterator_SMDS_MeshEdge_more(self, *args)


    def next(self, *args):
        """
        next(SMDS_Iterator_SMDS_MeshEdge self) -> SMDS_MeshEdge

        Return the current object and step to the next one

        :rtype: VALUE

        """
        return _SMDS.SMDS_Iterator_SMDS_MeshEdge_next(self, *args)


    def remove(self, *args):
        """
        remove(SMDS_Iterator_SMDS_MeshEdge self)

        Delete the current element and step to the next one


        """
        return _SMDS.SMDS_Iterator_SMDS_MeshEdge_remove(self, *args)

    __swig_destroy__ = _SMDS.delete_SMDS_Iterator_SMDS_MeshEdge
SMDS_Iterator_SMDS_MeshEdge_swigregister = _SMDS.SMDS_Iterator_SMDS_MeshEdge_swigregister
SMDS_Iterator_SMDS_MeshEdge_swigregister(SMDS_Iterator_SMDS_MeshEdge)


try:
	SMDS_EdgeIterator = SMDS_Iterator_SMDS_MeshEdge
except NameError:
	pass # does not exist, probably ignored

class SMDS_Down3D(SMDS_Downward):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getNumberOfUpCells(self, *args):
        """
        getNumberOfUpCells(SMDS_Down3D self, int cellId) -> int

        :type cellId: int
        :rtype: int

        """
        return _SMDS.SMDS_Down3D_getNumberOfUpCells(self, *args)


    def getUpCells(self, *args):
        """
        getUpCells(SMDS_Down3D self, int cellId) -> int const *

        :type cellId: int
        :rtype: const int *

        """
        return _SMDS.SMDS_Down3D_getUpCells(self, *args)


    def getUpTypes(self, *args):
        """
        getUpTypes(SMDS_Down3D self, int cellId) -> unsigned char const *

        :type cellId: int
        :rtype: const unsigned char *

        """
        return _SMDS.SMDS_Down3D_getUpTypes(self, *args)


    def getNodeIds(self, *args):
        """
        getNodeIds(SMDS_Down3D self, int cellId, std::set< int,std::less< int >,std::allocator< int > > & nodeSet)

        :type cellId: int
        :type nodeSet: OCC.wrapper.SMDS.set

        """
        return _SMDS.SMDS_Down3D_getNodeIds(self, *args)

SMDS_Down3D_swigregister = _SMDS.SMDS_Down3D_swigregister
SMDS_Down3D_swigregister(SMDS_Down3D)

class SMDS_CellOfNodes(SMDS_MeshElement):
    """rief Base class for elements not contained in the mesh"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetID(self, *args):
        """
        GetID(SMDS_CellOfNodes self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_CellOfNodes_GetID(self, *args)


    def GetShapeID(self, *args):
        """
        GetShapeID(SMDS_CellOfNodes self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_CellOfNodes_GetShapeID(self, *args)


    def setIsMarked(self, *args):
        """
        setIsMarked(SMDS_CellOfNodes self, bool arg2)

        :type is: bool

        """
        return _SMDS.SMDS_CellOfNodes_setIsMarked(self, *args)


    def isMarked(self, *args):
        """
        isMarked(SMDS_CellOfNodes self) -> bool

        :rtype: bool

        """
        return _SMDS.SMDS_CellOfNodes_isMarked(self, *args)


    def GetVtkType(self, *args):
        """
        GetVtkType(SMDS_CellOfNodes self) -> VTKCellType

        :rtype: VTKCellType

        """
        return _SMDS.SMDS_CellOfNodes_GetVtkType(self, *args)

    __swig_destroy__ = _SMDS.delete_SMDS_CellOfNodes
SMDS_CellOfNodes_swigregister = _SMDS.SMDS_CellOfNodes_swigregister
SMDS_CellOfNodes_swigregister(SMDS_CellOfNodes)

class SMDS_DownQuadrangle(SMDS_Down2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
SMDS_DownQuadrangle_swigregister = _SMDS.SMDS_DownQuadrangle_swigregister
SMDS_DownQuadrangle_swigregister(SMDS_DownQuadrangle)

class SMDS_Iterator_SMDS_MeshNode(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def more(self, *args):
        """
        more(SMDS_Iterator_SMDS_MeshNode self) -> bool

        Return true if and only if there are other object in this iterator

        :rtype: bool

        """
        return _SMDS.SMDS_Iterator_SMDS_MeshNode_more(self, *args)


    def next(self, *args):
        """
        next(SMDS_Iterator_SMDS_MeshNode self) -> SMDS_MeshNode

        Return the current object and step to the next one

        :rtype: VALUE

        """
        return _SMDS.SMDS_Iterator_SMDS_MeshNode_next(self, *args)


    def remove(self, *args):
        """
        remove(SMDS_Iterator_SMDS_MeshNode self)

        Delete the current element and step to the next one


        """
        return _SMDS.SMDS_Iterator_SMDS_MeshNode_remove(self, *args)

    __swig_destroy__ = _SMDS.delete_SMDS_Iterator_SMDS_MeshNode
SMDS_Iterator_SMDS_MeshNode_swigregister = _SMDS.SMDS_Iterator_SMDS_MeshNode_swigregister
SMDS_Iterator_SMDS_MeshNode_swigregister(SMDS_Iterator_SMDS_MeshNode)


try:
	SMDS_NodeIterator = SMDS_Iterator_SMDS_MeshNode
except NameError:
	pass # does not exist, probably ignored

class SMDS_MeshVolume(SMDS_MeshCell):
    """
    rief Mesh volume. This type is not allocated.
    It is only used as function argument type to provide more clear semantic
    and to provide API specific to polyherdal volume
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetType(self, *args):
        """
        GetType(SMDS_MeshVolume self) -> SMDSAbs_ElementType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

        """
        return _SMDS.SMDS_MeshVolume_GetType(self, *args)


    def GetNode(self, *args):
        """
        GetNode(SMDS_MeshVolume self, int const ind) -> SMDS_MeshNode

        :type ind: const int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _SMDS.SMDS_MeshVolume_GetNode(self, *args)


    def NbNodes(self, *args):
        """
        NbNodes(SMDS_MeshVolume self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshVolume_NbNodes(self, *args)


    def NbFaces(self, *args):
        """
        NbFaces(SMDS_MeshVolume self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshVolume_NbFaces(self, *args)


    def NbEdges(self, *args):
        """
        NbEdges(SMDS_MeshVolume self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshVolume_NbEdges(self, *args)


    def GetNodeIndex(self, *args):
        """
        GetNodeIndex(SMDS_MeshVolume self, SMDS_MeshNode node) -> int

        :type node: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: int

        """
        return _SMDS.SMDS_MeshVolume_GetNodeIndex(self, *args)


    def ChangeNodes(self, *args):
        """
        ChangeNodes(SMDS_MeshVolume self, SMDS_MeshNode const ** nodes, int const nbNodes) -> bool

        :type nodes: const SMDS_MeshNode *[]
        :type nbNodes: const int
        :rtype: bool

        """
        return _SMDS.SMDS_MeshVolume_ChangeNodes(self, *args)


    def IsMediumNode(self, *args):
        """
        IsMediumNode(SMDS_MeshVolume self, SMDS_MeshNode node) -> bool

        :type node: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: bool

        """
        return _SMDS.SMDS_MeshVolume_IsMediumNode(self, *args)


    def NbCornerNodes(self, *args):
        """
        NbCornerNodes(SMDS_MeshVolume self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshVolume_NbCornerNodes(self, *args)


    def nodesIterator(self, *args):
        """
        nodesIterator(SMDS_MeshVolume self) -> shared_ptr_SMDS_Iterator_SMDS_MeshElement

        :rtype: OCC.wrapper.SMDS.SMDS_ElemIteratorPtr

        """
        return _SMDS.SMDS_MeshVolume_nodesIterator(self, *args)


    def nodeIterator(self, *args):
        """
        nodeIterator(SMDS_MeshVolume self) -> shared_ptr_SMDS_Iterator_SMDS_MeshNode

        :rtype: OCC.wrapper.SMDS.SMDS_NodeIteratorPtr

        """
        return _SMDS.SMDS_MeshVolume_nodeIterator(self, *args)


    def NbFaceNodes(self, *args):
        """
        NbFaceNodes(SMDS_MeshVolume self, int const face_ind) -> int

        :type face_ind: const int
        :rtype: int

        """
        return _SMDS.SMDS_MeshVolume_NbFaceNodes(self, *args)


    def GetFaceNode(self, *args):
        """
        GetFaceNode(SMDS_MeshVolume self, int const face_ind, int const node_ind) -> SMDS_MeshNode

        :type face_ind: const int
        :type node_ind: const int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _SMDS.SMDS_MeshVolume_GetFaceNode(self, *args)


    def GetQuantities(self, *args):
        """
        GetQuantities(SMDS_MeshVolume self) -> std::vector< int,std::allocator< int > >

        :rtype: OCC.wrapper.SMDS.vector

        """
        return _SMDS.SMDS_MeshVolume_GetQuantities(self, *args)


    def Type(*args):
        """
        Type() -> SMDSAbs_ElementType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

        """
        return _SMDS.SMDS_MeshVolume_Type(*args)

    Type = staticmethod(Type)
    __swig_destroy__ = _SMDS.delete_SMDS_MeshVolume
SMDS_MeshVolume_swigregister = _SMDS.SMDS_MeshVolume_swigregister
SMDS_MeshVolume_swigregister(SMDS_MeshVolume)

def SMDS_MeshVolume_Type(*args):
    """
    SMDS_MeshVolume_Type() -> SMDSAbs_ElementType

    :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

    """
    return _SMDS.SMDS_MeshVolume_Type(*args)

class SMDS_Mesh0DElement(SMDS_MeshCell):
    """
    rief 0D mesh element. This type is not allocated.
    It is only used as function argument type to provide more clear semantic.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Type(*args):
        """
        Type() -> SMDSAbs_ElementType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

        """
        return _SMDS.SMDS_Mesh0DElement_Type(*args)

    Type = staticmethod(Type)

    def __init__(self):
        """
        rief 0D mesh element. This type is not allocated.
        It is only used as function argument type to provide more clear semantic.
        """
        this = _SMDS.new_SMDS_Mesh0DElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SMDS.delete_SMDS_Mesh0DElement
SMDS_Mesh0DElement_swigregister = _SMDS.SMDS_Mesh0DElement_swigregister
SMDS_Mesh0DElement_swigregister(SMDS_Mesh0DElement)

def SMDS_Mesh0DElement_Type(*args):
    """
    SMDS_Mesh0DElement_Type() -> SMDSAbs_ElementType

    :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

    """
    return _SMDS.SMDS_Mesh0DElement_Type(*args)

class SMDS_Down1D(SMDS_Downward):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getNumberOfUpCells(self, *args):
        """
        getNumberOfUpCells(SMDS_Down1D self, int cellId) -> int

        :type cellId: int
        :rtype: int

        """
        return _SMDS.SMDS_Down1D_getNumberOfUpCells(self, *args)


    def getUpCells(self, *args):
        """
        getUpCells(SMDS_Down1D self, int cellId) -> int const *

        :type cellId: int
        :rtype: const int *

        """
        return _SMDS.SMDS_Down1D_getUpCells(self, *args)


    def getUpTypes(self, *args):
        """
        getUpTypes(SMDS_Down1D self, int cellId) -> unsigned char const *

        :type cellId: int
        :rtype: const unsigned char *

        """
        return _SMDS.SMDS_Down1D_getUpTypes(self, *args)


    def getNodeIds(self, *args):
        """
        getNodeIds(SMDS_Down1D self, int cellId, std::set< int,std::less< int >,std::allocator< int > > & nodeSet)

        :type cellId: int
        :type nodeSet: OCC.wrapper.SMDS.set

        """
        return _SMDS.SMDS_Down1D_getNodeIds(self, *args)


    def getNodes(self, *args):
        """
        getNodes(SMDS_Down1D self, int cellId, int * nodevec) -> int

        :type cellId: int
        :type nodevec: int *
        :rtype: int

        """
        return _SMDS.SMDS_Down1D_getNodes(self, *args)

SMDS_Down1D_swigregister = _SMDS.SMDS_Down1D_swigregister
SMDS_Down1D_swigregister(SMDS_Down1D)

class SMDS_ElementChunk(object):
    """
    rief Allocate SMDS_MeshElement's (SMDS_MeshCell's or SMDS_MeshNode's )
    and bind some attributes to elements:
    element ID, sub-shape ID, isMarked flag, parameters on shape
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Element(self, *args):
        """
        Element(SMDS_ElementChunk self, int index) -> SMDS_MeshElement
        Element(SMDS_ElementChunk self, int index) -> SMDS_MeshElement

        Return an element by an index [0,ChunkSize()]

        :type index: int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshElement

        """
        return _SMDS.SMDS_ElementChunk_Element(self, *args)


    def IsUsed(*args):
        """
        IsUsed(_UsedRange const & r) -> bool

        Check if a given range holds used or non-used elements

        :type r: _UsedRange
        :rtype: bool

        """
        return _SMDS.SMDS_ElementChunk_IsUsed(*args)

    IsUsed = staticmethod(IsUsed)

    def Index(self, *args):
        """
        Index(SMDS_ElementChunk self, SMDS_MeshElement e) -> int

        Return index of an element in the chunk

        :type e: OCC.wrapper.SMDS.SMDS_MeshElement
        :rtype: int

        """
        return _SMDS.SMDS_ElementChunk_Index(self, *args)


    def Get1stID(self, *args):
        """
        Get1stID(SMDS_ElementChunk self) -> int

        Return ID of the 1st element in the chunk

        :rtype: int

        """
        return _SMDS.SMDS_ElementChunk_Get1stID(self, *args)


    def GetUsedRanges(self, *args):
        """
        Return ranges of used/non-used elements

        :rtype: TUsedRangeSet

        """
        res = _SMDS.SMDS_ElementChunk_GetUsedRanges(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetUsedRangesMinMax(self, *args):
        """
        :type min: bool &
        :type max: bool &
        :rtype: TUsedRangeSet

        """
        res = _SMDS.SMDS_ElementChunk_GetUsedRangesMinMax(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetSubIDRangesMinMax(self, *args):
        """
        Return ranges of elements assigned to sub-shapes and min/max of sub-shape IDs

        :type min: int &
        :type max: int &
        :rtype: TSubIDRangeSet

        """
        res = _SMDS.SMDS_ElementChunk_GetSubIDRangesMinMax(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetMesh(self, *args):
        """
        GetMesh(SMDS_ElementChunk self) -> SMDS_Mesh

        :rtype: OCC.wrapper.SMDS.SMDS_Mesh

        """
        return _SMDS.SMDS_ElementChunk_GetMesh(self, *args)

    __swig_destroy__ = _SMDS.delete_SMDS_ElementChunk
SMDS_ElementChunk_swigregister = _SMDS.SMDS_ElementChunk_swigregister
SMDS_ElementChunk_swigregister(SMDS_ElementChunk)

def SMDS_ElementChunk_IsUsed(*args):
    """
    SMDS_ElementChunk_IsUsed(_UsedRange const & r) -> bool

    Check if a given range holds used or non-used elements

    :type r: _UsedRange
    :rtype: bool

    """
    return _SMDS.SMDS_ElementChunk_IsUsed(*args)

class SMDS_Iterator_SMDS_MeshFace(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def more(self, *args):
        """
        more(SMDS_Iterator_SMDS_MeshFace self) -> bool

        Return true if and only if there are other object in this iterator

        :rtype: bool

        """
        return _SMDS.SMDS_Iterator_SMDS_MeshFace_more(self, *args)


    def next(self, *args):
        """
        next(SMDS_Iterator_SMDS_MeshFace self) -> SMDS_MeshFace

        Return the current object and step to the next one

        :rtype: VALUE

        """
        return _SMDS.SMDS_Iterator_SMDS_MeshFace_next(self, *args)


    def remove(self, *args):
        """
        remove(SMDS_Iterator_SMDS_MeshFace self)

        Delete the current element and step to the next one


        """
        return _SMDS.SMDS_Iterator_SMDS_MeshFace_remove(self, *args)

    __swig_destroy__ = _SMDS.delete_SMDS_Iterator_SMDS_MeshFace
SMDS_Iterator_SMDS_MeshFace_swigregister = _SMDS.SMDS_Iterator_SMDS_MeshFace_swigregister
SMDS_Iterator_SMDS_MeshFace_swigregister(SMDS_Iterator_SMDS_MeshFace)

class SMDS_ElementHolder(object):
    """
    rief Base class of object holding SMDS_MeshElement pointers.
    Registering such an object in SMDS_Mesh assures that the
    pointers remain valid after compacting the mesh
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SMDS.delete_SMDS_ElementHolder
SMDS_ElementHolder_swigregister = _SMDS.SMDS_ElementHolder_swigregister
SMDS_ElementHolder_swigregister(SMDS_ElementHolder)

class SMDS_Iterator_SMDS_MeshElement(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def more(self, *args):
        """
        more(SMDS_Iterator_SMDS_MeshElement self) -> bool

        Return true if and only if there are other object in this iterator

        :rtype: bool

        """
        return _SMDS.SMDS_Iterator_SMDS_MeshElement_more(self, *args)


    def next(self, *args):
        """
        next(SMDS_Iterator_SMDS_MeshElement self) -> SMDS_MeshElement

        Return the current object and step to the next one

        :rtype: VALUE

        """
        return _SMDS.SMDS_Iterator_SMDS_MeshElement_next(self, *args)


    def remove(self, *args):
        """
        remove(SMDS_Iterator_SMDS_MeshElement self)

        Delete the current element and step to the next one


        """
        return _SMDS.SMDS_Iterator_SMDS_MeshElement_remove(self, *args)

    __swig_destroy__ = _SMDS.delete_SMDS_Iterator_SMDS_MeshElement
SMDS_Iterator_SMDS_MeshElement_swigregister = _SMDS.SMDS_Iterator_SMDS_MeshElement_swigregister
SMDS_Iterator_SMDS_MeshElement_swigregister(SMDS_Iterator_SMDS_MeshElement)

class SMDS_EdgePosition(SMDS_Position):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SMDS_EdgePosition self, double const aUParam=0) -> SMDS_EdgePosition

        :type aUParam: const double

        """
        this = _SMDS.new_SMDS_EdgePosition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetTypeOfPosition(self, *args):
        """
        GetTypeOfPosition(SMDS_EdgePosition self) -> SMDS_TypeOfPosition

        :rtype: OCC.wrapper.SMDS.SMDS_TypeOfPosition

        """
        return _SMDS.SMDS_EdgePosition_GetTypeOfPosition(self, *args)


    def SetUParameter(self, *args):
        """
        SetUParameter(SMDS_EdgePosition self, double aUparam)

        :type aUparam: double

        """
        return _SMDS.SMDS_EdgePosition_SetUParameter(self, *args)


    def GetUParameter(self, *args):
        """
        GetUParameter(SMDS_EdgePosition self) -> double

        :rtype: double

        """
        return _SMDS.SMDS_EdgePosition_GetUParameter(self, *args)


    def GetParameters(self, *args):
        """
        GetParameters(SMDS_EdgePosition self) -> double const *

        :rtype: const double *

        """
        return _SMDS.SMDS_EdgePosition_GetParameters(self, *args)

    __swig_destroy__ = _SMDS.delete_SMDS_EdgePosition
SMDS_EdgePosition_swigregister = _SMDS.SMDS_EdgePosition_swigregister
SMDS_EdgePosition_swigregister(SMDS_EdgePosition)

class _RangeSet__ShapeIDRange(object):
    """rief Sorted set of ranges"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """rief Sorted set of ranges"""
        this = _SMDS.new__RangeSet__ShapeIDRange()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetIndices(self, *args):
        """
        GetIndices(_RangeSet__ShapeIDRange self, _RangeSet< _ShapeIDRange >::attr_t const theValue, TIndexRanges & theIndices, _RangeSet< _ShapeIDRange >::attr_t const * theMinValue=None, _RangeSet< _ShapeIDRange >::attr_t const * theMaxValue=None) -> bool

        rief Return ranges of indices (from,to) of elements having a given value

        :type theValue: attr_t
        :type theIndices: TIndexRanges
        :type theMinValue: attr_t
        :type theMaxValue: attr_t
        :rtype: bool

        """
        return _SMDS._RangeSet__ShapeIDRange_GetIndices(self, *args)


    def GetValue(self, *args):
        """
        GetValue(_RangeSet__ShapeIDRange self, int theIndex) -> _RangeSet< _ShapeIDRange >::attr_t

        rief Return value of an element attribute
        \param [in] theIndex - element index
        @return attr_t - attribute value

        :type theIndex: int
        :rtype: attr_t

        """
        return _SMDS._RangeSet__ShapeIDRange_GetValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(_RangeSet__ShapeIDRange self, int theIndex, _RangeSet< _ShapeIDRange >::attr_t theValue) -> _RangeSet< _ShapeIDRange >::attr_t

        rief Change value of an element attribute
        \param [in] theIndex - element index
        \param [in] theValue - attribute value
        @return attr_t - previous value

        :type theIndex: int
        :type theValue: attr_t
        :rtype: attr_t

        """
        return _SMDS._RangeSet__ShapeIDRange_SetValue(self, *args)

    __swig_destroy__ = _SMDS.delete__RangeSet__ShapeIDRange
_RangeSet__ShapeIDRange_swigregister = _SMDS._RangeSet__ShapeIDRange_swigregister
_RangeSet__ShapeIDRange_swigregister(_RangeSet__ShapeIDRange)


try:
	TSubIDRangeSet = _RangeSet__ShapeIDRange
except NameError:
	pass # does not exist, probably ignored

class SMDS_BallElement(SMDS_MeshCell):
    """
    rief Ball element. This type is not allocated.
    It is only used as function argument type to provide more clear semantic
    and to provide API specific to ball element
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetDiameter(self, *args):
        """
        GetDiameter(SMDS_BallElement self) -> double

        :rtype: double

        """
        return _SMDS.SMDS_BallElement_GetDiameter(self, *args)


    def SetDiameter(self, *args):
        """
        SetDiameter(SMDS_BallElement self, double diameter)

        :type diameter: double

        """
        return _SMDS.SMDS_BallElement_SetDiameter(self, *args)


    def Type(*args):
        """
        Type() -> SMDSAbs_ElementType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

        """
        return _SMDS.SMDS_BallElement_Type(*args)

    Type = staticmethod(Type)

    def __init__(self):
        """
        rief Ball element. This type is not allocated.
        It is only used as function argument type to provide more clear semantic
        and to provide API specific to ball element
        """
        this = _SMDS.new_SMDS_BallElement()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SMDS.delete_SMDS_BallElement
SMDS_BallElement_swigregister = _SMDS.SMDS_BallElement_swigregister
SMDS_BallElement_swigregister(SMDS_BallElement)

def SMDS_BallElement_Type(*args):
    """
    SMDS_BallElement_Type() -> SMDSAbs_ElementType

    :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

    """
    return _SMDS.SMDS_BallElement_Type(*args)

class SMDS_DownQuadTetra(SMDS_Down3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getOrderedNodesOfFace(self, *args):
        """
        getOrderedNodesOfFace(SMDS_DownQuadTetra self, int cellId, std::vector< vtkIdType,std::allocator< vtkIdType > > & orderedNodes)

        :type cellId: int
        :type orderedNodes: OCC.wrapper.SMDS.vector_vtkIdType

        """
        return _SMDS.SMDS_DownQuadTetra_getOrderedNodesOfFace(self, *args)

SMDS_DownQuadTetra_swigregister = _SMDS.SMDS_DownQuadTetra_swigregister
SMDS_DownQuadTetra_swigregister(SMDS_DownQuadTetra)

class SMDS_Ptr_SMDS_FacePosition(object):
    """
    rief Replace "typedef SMDS_Position* SMDS_PositionPtr" by a smart
    pointer allowing implicit casting to derived types; e.g.
    if ( SMDS_FacePositionPtr fPos = node->GetPosition() )
    fPos->SetUParameter(0);
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        rief Replace "typedef SMDS_Position* SMDS_PositionPtr" by a smart
        pointer allowing implicit casting to derived types; e.g.
        if ( SMDS_FacePositionPtr fPos = node->GetPosition() )
        fPos->SetUParameter(0);
        """
        this = _SMDS.new_SMDS_Ptr_SMDS_FacePosition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def assign(self, *args):
        """
        assign(SMDS_Ptr_SMDS_FacePosition self, SMDS_Ptr_SMDS_FacePosition arg2) -> SMDS_Ptr_SMDS_FacePosition

        :type from: OCC.wrapper.SMDS.SMDS_Ptr
        :rtype: OCC.wrapper.SMDS.SMDS_Ptr

        """
        return _SMDS.SMDS_Ptr_SMDS_FacePosition_assign(self, *args)


    def IsOwner(self, *args):
        """
        IsOwner(SMDS_Ptr_SMDS_FacePosition self) -> bool

        :rtype: bool

        """
        return _SMDS.SMDS_Ptr_SMDS_FacePosition_IsOwner(self, *args)

    __swig_destroy__ = _SMDS.delete_SMDS_Ptr_SMDS_FacePosition
SMDS_Ptr_SMDS_FacePosition_swigregister = _SMDS.SMDS_Ptr_SMDS_FacePosition_swigregister
SMDS_Ptr_SMDS_FacePosition_swigregister(SMDS_Ptr_SMDS_FacePosition)


try:
	SMDS_FacePositionPtr = SMDS_Ptr_SMDS_FacePosition
except NameError:
	pass # does not exist, probably ignored

class SMDS_Iterator_SMDS_MeshVolume(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def more(self, *args):
        """
        more(SMDS_Iterator_SMDS_MeshVolume self) -> bool

        Return true if and only if there are other object in this iterator

        :rtype: bool

        """
        return _SMDS.SMDS_Iterator_SMDS_MeshVolume_more(self, *args)


    def next(self, *args):
        """
        next(SMDS_Iterator_SMDS_MeshVolume self) -> SMDS_MeshVolume

        Return the current object and step to the next one

        :rtype: VALUE

        """
        return _SMDS.SMDS_Iterator_SMDS_MeshVolume_next(self, *args)


    def remove(self, *args):
        """
        remove(SMDS_Iterator_SMDS_MeshVolume self)

        Delete the current element and step to the next one


        """
        return _SMDS.SMDS_Iterator_SMDS_MeshVolume_remove(self, *args)

    __swig_destroy__ = _SMDS.delete_SMDS_Iterator_SMDS_MeshVolume
SMDS_Iterator_SMDS_MeshVolume_swigregister = _SMDS.SMDS_Iterator_SMDS_MeshVolume_swigregister
SMDS_Iterator_SMDS_MeshVolume_swigregister(SMDS_Iterator_SMDS_MeshVolume)

class SMDS_DownTetra(SMDS_Down3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getOrderedNodesOfFace(self, *args):
        """
        getOrderedNodesOfFace(SMDS_DownTetra self, int cellId, std::vector< vtkIdType,std::allocator< vtkIdType > > & orderedNodes)

        :type cellId: int
        :type orderedNodes: OCC.wrapper.SMDS.vector_vtkIdType

        """
        return _SMDS.SMDS_DownTetra_getOrderedNodesOfFace(self, *args)

SMDS_DownTetra_swigregister = _SMDS.SMDS_DownTetra_swigregister
SMDS_DownTetra_swigregister(SMDS_DownTetra)

class shared_ptr_SMDS_Iterator_SMDS_MeshElement(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _SMDS.new_shared_ptr_SMDS_Iterator_SMDS_MeshElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshElement___deref__(self)

    def __ref__(self):
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshElement___ref__(self)
    __swig_destroy__ = _SMDS.delete_shared_ptr_SMDS_Iterator_SMDS_MeshElement

    def more(self, *args):
        """
        more(shared_ptr_SMDS_Iterator_SMDS_MeshElement self) -> bool

        Return true if and only if there are other object in this iterator

        :rtype: bool

        """
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshElement_more(self, *args)


    def next(self, *args):
        """
        next(shared_ptr_SMDS_Iterator_SMDS_MeshElement self) -> SMDS_MeshElement

        Return the current object and step to the next one

        :rtype: VALUE

        """
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshElement_next(self, *args)


    def remove(self, *args):
        """
        remove(shared_ptr_SMDS_Iterator_SMDS_MeshElement self)

        Delete the current element and step to the next one


        """
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshElement_remove(self, *args)

shared_ptr_SMDS_Iterator_SMDS_MeshElement_swigregister = _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshElement_swigregister
shared_ptr_SMDS_Iterator_SMDS_MeshElement_swigregister(shared_ptr_SMDS_Iterator_SMDS_MeshElement)


try:
	SMDS_ElemIteratorPtr = shared_ptr_SMDS_Iterator_SMDS_MeshElement
except NameError:
	pass # does not exist, probably ignored

class SMDS_ElementFactory(object):
    """
    rief Allocate SMDS_MeshElement's (SMDS_MeshCell's or SMDS_MeshNode's )
    and bind some attributes to elements:
    element ID, element VTK ID, sub-mesh ID, position on shape.

    Elements are allocated by chunks, so there are used and non-used elements
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def NewCell(self, *args):
        """
        NewCell(SMDS_ElementFactory self, int const id) -> SMDS_MeshCell

        Return a SMDS_MeshCell by ID. NULL if the cell with the given ID is already used

        :type id: const int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshCell

        """
        return _SMDS.SMDS_ElementFactory_NewCell(self, *args)


    def NbUsedElements(self, *args):
        """
        NbUsedElements(SMDS_ElementFactory self) -> int

        Return a number of used elements

        :rtype: int

        """
        return _SMDS.SMDS_ElementFactory_NbUsedElements(self, *args)

    __swig_destroy__ = _SMDS.delete_SMDS_ElementFactory
SMDS_ElementFactory_swigregister = _SMDS.SMDS_ElementFactory_swigregister
SMDS_ElementFactory_swigregister(SMDS_ElementFactory)

class SMDS_DownQuadPenta(SMDS_Down3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getOrderedNodesOfFace(self, *args):
        """
        getOrderedNodesOfFace(SMDS_DownQuadPenta self, int cellId, std::vector< vtkIdType,std::allocator< vtkIdType > > & orderedNodes)

        :type cellId: int
        :type orderedNodes: OCC.wrapper.SMDS.vector_vtkIdType

        """
        return _SMDS.SMDS_DownQuadPenta_getOrderedNodesOfFace(self, *args)

SMDS_DownQuadPenta_swigregister = _SMDS.SMDS_DownQuadPenta_swigregister
SMDS_DownQuadPenta_swigregister(SMDS_DownQuadPenta)

class shared_ptr_SMDS_Iterator_SMDS_MeshFace(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _SMDS.new_shared_ptr_SMDS_Iterator_SMDS_MeshFace(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshFace___deref__(self)

    def __ref__(self):
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshFace___ref__(self)
    __swig_destroy__ = _SMDS.delete_shared_ptr_SMDS_Iterator_SMDS_MeshFace

    def more(self, *args):
        """
        more(shared_ptr_SMDS_Iterator_SMDS_MeshFace self) -> bool

        Return true if and only if there are other object in this iterator

        :rtype: bool

        """
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshFace_more(self, *args)


    def next(self, *args):
        """
        next(shared_ptr_SMDS_Iterator_SMDS_MeshFace self) -> SMDS_MeshFace

        Return the current object and step to the next one

        :rtype: VALUE

        """
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshFace_next(self, *args)


    def remove(self, *args):
        """
        remove(shared_ptr_SMDS_Iterator_SMDS_MeshFace self)

        Delete the current element and step to the next one


        """
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshFace_remove(self, *args)

shared_ptr_SMDS_Iterator_SMDS_MeshFace_swigregister = _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshFace_swigregister
shared_ptr_SMDS_Iterator_SMDS_MeshFace_swigregister(shared_ptr_SMDS_Iterator_SMDS_MeshFace)


try:
	SMDS_FaceIteratorPtr = shared_ptr_SMDS_Iterator_SMDS_MeshFace
except NameError:
	pass # does not exist, probably ignored

class SMDS_Iterator_SMDS_Mesh0DElement(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def more(self, *args):
        """
        more(SMDS_Iterator_SMDS_Mesh0DElement self) -> bool

        Return true if and only if there are other object in this iterator

        :rtype: bool

        """
        return _SMDS.SMDS_Iterator_SMDS_Mesh0DElement_more(self, *args)


    def next(self, *args):
        """
        next(SMDS_Iterator_SMDS_Mesh0DElement self) -> SMDS_Mesh0DElement

        Return the current object and step to the next one

        :rtype: VALUE

        """
        return _SMDS.SMDS_Iterator_SMDS_Mesh0DElement_next(self, *args)


    def remove(self, *args):
        """
        remove(SMDS_Iterator_SMDS_Mesh0DElement self)

        Delete the current element and step to the next one


        """
        return _SMDS.SMDS_Iterator_SMDS_Mesh0DElement_remove(self, *args)

    __swig_destroy__ = _SMDS.delete_SMDS_Iterator_SMDS_Mesh0DElement
SMDS_Iterator_SMDS_Mesh0DElement_swigregister = _SMDS.SMDS_Iterator_SMDS_Mesh0DElement_swigregister
SMDS_Iterator_SMDS_Mesh0DElement_swigregister(SMDS_Iterator_SMDS_Mesh0DElement)


try:
	SMDS_0DElementIterator = SMDS_Iterator_SMDS_Mesh0DElement
except NameError:
	pass # does not exist, probably ignored

class SMDS_PolygonalFaceOfNodes(SMDS_CellOfNodes):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SMDS_PolygonalFaceOfNodes self, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > const & nodes) -> SMDS_PolygonalFaceOfNodes

        :type nodes: OCC.wrapper.SMDS.vector_SMDS_MeshNode

        """
        this = _SMDS.new_SMDS_PolygonalFaceOfNodes(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetType(self, *args):
        """
        GetType(SMDS_PolygonalFaceOfNodes self) -> SMDSAbs_ElementType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

        """
        return _SMDS.SMDS_PolygonalFaceOfNodes_GetType(self, *args)


    def GetEntityType(self, *args):
        """
        GetEntityType(SMDS_PolygonalFaceOfNodes self) -> SMDSAbs_EntityType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType

        """
        return _SMDS.SMDS_PolygonalFaceOfNodes_GetEntityType(self, *args)


    def GetGeomType(self, *args):
        """
        GetGeomType(SMDS_PolygonalFaceOfNodes self) -> SMDSAbs_GeometryType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_GeometryType

        """
        return _SMDS.SMDS_PolygonalFaceOfNodes_GetGeomType(self, *args)


    def IsPoly(self, *args):
        """
        IsPoly(SMDS_PolygonalFaceOfNodes self) -> bool

        :rtype: bool

        """
        return _SMDS.SMDS_PolygonalFaceOfNodes_IsPoly(self, *args)


    def IsQuadratic(self, *args):
        """
        IsQuadratic(SMDS_PolygonalFaceOfNodes self) -> bool

        :rtype: bool

        """
        return _SMDS.SMDS_PolygonalFaceOfNodes_IsQuadratic(self, *args)


    def IsMediumNode(self, *args):
        """
        IsMediumNode(SMDS_PolygonalFaceOfNodes self, SMDS_MeshNode node) -> bool

        :type node: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: bool

        """
        return _SMDS.SMDS_PolygonalFaceOfNodes_IsMediumNode(self, *args)


    def NbCornerNodes(self, *args):
        """
        NbCornerNodes(SMDS_PolygonalFaceOfNodes self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_PolygonalFaceOfNodes_NbCornerNodes(self, *args)


    def NbNodes(self, *args):
        """
        NbNodes(SMDS_PolygonalFaceOfNodes self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_PolygonalFaceOfNodes_NbNodes(self, *args)


    def NbEdges(self, *args):
        """
        NbEdges(SMDS_PolygonalFaceOfNodes self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_PolygonalFaceOfNodes_NbEdges(self, *args)


    def NbFaces(self, *args):
        """
        NbFaces(SMDS_PolygonalFaceOfNodes self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_PolygonalFaceOfNodes_NbFaces(self, *args)


    def Print(self, *args):
        """
        Print(SMDS_PolygonalFaceOfNodes self, std::ostream & OS)

        :type OS: ostream

        """
        return _SMDS.SMDS_PolygonalFaceOfNodes_Print(self, *args)


    def GetNode(self, *args):
        """
        GetNode(SMDS_PolygonalFaceOfNodes self, int const ind) -> SMDS_MeshNode

        :type ind: const int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _SMDS.SMDS_PolygonalFaceOfNodes_GetNode(self, *args)


    def nodesIterator(self, *args):
        """
        nodesIterator(SMDS_PolygonalFaceOfNodes self) -> shared_ptr_SMDS_Iterator_SMDS_MeshElement

        :rtype: OCC.wrapper.SMDS.SMDS_ElemIteratorPtr

        """
        return _SMDS.SMDS_PolygonalFaceOfNodes_nodesIterator(self, *args)


    def nodeIterator(self, *args):
        """
        nodeIterator(SMDS_PolygonalFaceOfNodes self) -> shared_ptr_SMDS_Iterator_SMDS_MeshNode

        :rtype: OCC.wrapper.SMDS.SMDS_NodeIteratorPtr

        """
        return _SMDS.SMDS_PolygonalFaceOfNodes_nodeIterator(self, *args)

    __swig_destroy__ = _SMDS.delete_SMDS_PolygonalFaceOfNodes
SMDS_PolygonalFaceOfNodes_swigregister = _SMDS.SMDS_PolygonalFaceOfNodes_swigregister
SMDS_PolygonalFaceOfNodes_swigregister(SMDS_PolygonalFaceOfNodes)

class shared_ptr_SMDS_Iterator_SMDS_MeshEdge(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _SMDS.new_shared_ptr_SMDS_Iterator_SMDS_MeshEdge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshEdge___deref__(self)

    def __ref__(self):
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshEdge___ref__(self)
    __swig_destroy__ = _SMDS.delete_shared_ptr_SMDS_Iterator_SMDS_MeshEdge

    def more(self, *args):
        """
        more(shared_ptr_SMDS_Iterator_SMDS_MeshEdge self) -> bool

        Return true if and only if there are other object in this iterator

        :rtype: bool

        """
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshEdge_more(self, *args)


    def next(self, *args):
        """
        next(shared_ptr_SMDS_Iterator_SMDS_MeshEdge self) -> SMDS_MeshEdge

        Return the current object and step to the next one

        :rtype: VALUE

        """
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshEdge_next(self, *args)


    def remove(self, *args):
        """
        remove(shared_ptr_SMDS_Iterator_SMDS_MeshEdge self)

        Delete the current element and step to the next one


        """
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshEdge_remove(self, *args)

shared_ptr_SMDS_Iterator_SMDS_MeshEdge_swigregister = _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshEdge_swigregister
shared_ptr_SMDS_Iterator_SMDS_MeshEdge_swigregister(shared_ptr_SMDS_Iterator_SMDS_MeshEdge)


try:
	SMDS_EdgeIteratorPtr = shared_ptr_SMDS_Iterator_SMDS_MeshEdge
except NameError:
	pass # does not exist, probably ignored

class DownIdType(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(DownIdType self, int a, unsigned char b) -> DownIdType

        :type a: int
        :type b: unsigned char

        """
        this = _SMDS.new_DownIdType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SMDS.delete_DownIdType
DownIdType_swigregister = _SMDS.DownIdType_swigregister
DownIdType_swigregister(DownIdType)

class SMDS_DownQuadEdge(SMDS_Down1D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
SMDS_DownQuadEdge_swigregister = _SMDS.SMDS_DownQuadEdge_swigregister
SMDS_DownQuadEdge_swigregister(SMDS_DownQuadEdge)

class SMDS_DownQuadPyramid(SMDS_Down3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getOrderedNodesOfFace(self, *args):
        """
        getOrderedNodesOfFace(SMDS_DownQuadPyramid self, int cellId, std::vector< vtkIdType,std::allocator< vtkIdType > > & orderedNodes)

        :type cellId: int
        :type orderedNodes: OCC.wrapper.SMDS.vector_vtkIdType

        """
        return _SMDS.SMDS_DownQuadPyramid_getOrderedNodesOfFace(self, *args)

SMDS_DownQuadPyramid_swigregister = _SMDS.SMDS_DownQuadPyramid_swigregister
SMDS_DownQuadPyramid_swigregister(SMDS_DownQuadPyramid)

class SMDS_VolumeTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    UNKNOWN = _SMDS.SMDS_VolumeTool_UNKNOWN
    TETRA = _SMDS.SMDS_VolumeTool_TETRA
    PYRAM = _SMDS.SMDS_VolumeTool_PYRAM
    PENTA = _SMDS.SMDS_VolumeTool_PENTA
    HEXA = _SMDS.SMDS_VolumeTool_HEXA
    HEX_PRISM = _SMDS.SMDS_VolumeTool_HEX_PRISM
    QUAD_TETRA = _SMDS.SMDS_VolumeTool_QUAD_TETRA
    QUAD_PYRAM = _SMDS.SMDS_VolumeTool_QUAD_PYRAM
    QUAD_PENTA = _SMDS.SMDS_VolumeTool_QUAD_PENTA
    QUAD_HEXA = _SMDS.SMDS_VolumeTool_QUAD_HEXA
    POLYHEDA = _SMDS.SMDS_VolumeTool_POLYHEDA
    NB_VOLUME_TYPES = _SMDS.SMDS_VolumeTool_NB_VOLUME_TYPES

    def __init__(self, *args):
        """
        __init__(SMDS_VolumeTool self) -> SMDS_VolumeTool
        __init__(SMDS_VolumeTool self, SMDS_MeshElement theVolume, bool const ignoreCentralNodes=True) -> SMDS_VolumeTool

        :type theVolume: OCC.wrapper.SMDS.SMDS_MeshElement
        :type ignoreCentralNodes: const bool

        """
        this = _SMDS.new_SMDS_VolumeTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Set(self, *args):
        """
        Set(SMDS_VolumeTool self, SMDS_MeshElement theVolume, bool const ignoreCentralNodes=True, std::vector< SMDS_MeshNode const *,std::allocator< SMDS_MeshNode const * > > const * nodes=None) -> bool

        :type theVolume: OCC.wrapper.SMDS.SMDS_MeshElement
        :type ignoreCentralNodes: const bool
        :type nodes: OCC.wrapper.SMDS.vector_SMDS_MeshNode
        :rtype: bool

        """
        return _SMDS.SMDS_VolumeTool_Set(self, *args)


    def Element(self, *args):
        """
        Element(SMDS_VolumeTool self) -> SMDS_MeshVolume

        :rtype: OCC.wrapper.SMDS.SMDS_MeshVolume

        """
        return _SMDS.SMDS_VolumeTool_Element(self, *args)


    def ID(self, *args):
        """
        ID(SMDS_VolumeTool self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_VolumeTool_ID(self, *args)


    def IsPoly(self, *args):
        """
        IsPoly(SMDS_VolumeTool self) -> bool

        :rtype: bool

        """
        return _SMDS.SMDS_VolumeTool_IsPoly(self, *args)


    def GetVolumeType(self, *args):
        """
        GetVolumeType(SMDS_VolumeTool self) -> SMDS_VolumeTool::VolumeType

        :rtype: VolumeType

        """
        return _SMDS.SMDS_VolumeTool_GetVolumeType(self, *args)


    def IsForward(self, *args):
        """
        IsForward(SMDS_VolumeTool self) -> bool

        :rtype: bool

        """
        return _SMDS.SMDS_VolumeTool_IsForward(self, *args)


    def Inverse(self, *args):
        """Inverse(SMDS_VolumeTool self)"""
        return _SMDS.SMDS_VolumeTool_Inverse(self, *args)


    def GetNodes(self, *args):
        """
        GetNodes(SMDS_VolumeTool self) -> SMDS_MeshNode const **

        :rtype: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _SMDS.SMDS_VolumeTool_GetNodes(self, *args)


    def NbNodes(self, *args):
        """
        NbNodes(SMDS_VolumeTool self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_VolumeTool_NbNodes(self, *args)


    def GetSize(self, *args):
        """
        GetSize(SMDS_VolumeTool self) -> double

        :rtype: double

        """
        return _SMDS.SMDS_VolumeTool_GetSize(self, *args)


    def GetBaryCenter(self, *args):
        """
        GetBaryCenter(SMDS_VolumeTool self) -> bool

        :type X: double &
        :type Y: double &
        :type Z: double &
        :rtype: bool

        """
        return _SMDS.SMDS_VolumeTool_GetBaryCenter(self, *args)


    def IsOut(self, *args):
        """
        IsOut(SMDS_VolumeTool self, double X, double Y, double Z, double tol) -> bool

        :type X: double
        :type Y: double
        :type Z: double
        :type tol: double
        :rtype: bool

        """
        return _SMDS.SMDS_VolumeTool_IsOut(self, *args)


    def IsLinked(self, *args):
        """
        IsLinked(SMDS_VolumeTool self, SMDS_MeshNode theNode1, SMDS_MeshNode theNode2, bool const theIgnoreMediumNodes=False) -> bool
        IsLinked(SMDS_VolumeTool self, int const theNode1Index, int const theNode2Index, bool theIgnoreMediumNodes=False) -> bool

        :type theNode1Index: const int
        :type theNode2Index: const int
        :type theIgnoreMediumNodes: bool
        :rtype: bool

        """
        return _SMDS.SMDS_VolumeTool_IsLinked(self, *args)


    def GetNodeIndex(self, *args):
        """
        GetNodeIndex(SMDS_VolumeTool self, SMDS_MeshNode theNode) -> int

        :type theNode: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: int

        """
        return _SMDS.SMDS_VolumeTool_GetNodeIndex(self, *args)


    def GetAllExistingEdges(self, *args):
        """
        GetAllExistingEdges(SMDS_VolumeTool self, std::vector< SMDS_MeshElement const *,std::allocator< SMDS_MeshElement const * > > & edges) -> int

        :type edges: OCC.wrapper.SMDS.vector_SMDS_MeshElement
        :rtype: int

        """
        return _SMDS.SMDS_VolumeTool_GetAllExistingEdges(self, *args)


    def MinLinearSize2(self, *args):
        """
        MinLinearSize2(SMDS_VolumeTool self) -> double

        :rtype: double

        """
        return _SMDS.SMDS_VolumeTool_MinLinearSize2(self, *args)


    def MaxLinearSize2(self, *args):
        """
        MaxLinearSize2(SMDS_VolumeTool self) -> double

        :rtype: double

        """
        return _SMDS.SMDS_VolumeTool_MaxLinearSize2(self, *args)


    def SetExternalNormal(self, *args):
        """SetExternalNormal(SMDS_VolumeTool self)"""
        return _SMDS.SMDS_VolumeTool_SetExternalNormal(self, *args)


    def GetFaceNodes(self, *args):
        """
        GetFaceNodes(SMDS_VolumeTool self, int faceIndex) -> SMDS_MeshNode
        GetFaceNodes(SMDS_VolumeTool self, int faceIndex, std::set< SMDS_MeshNode const *,std::less< SMDS_MeshNode const * >,std::allocator< SMDS_MeshNode const * > > & theFaceNodes) -> bool

        :type faceIndex: int
        :type theFaceNodes: OCC.wrapper.SMDS.set_SMDS_MeshNode
        :rtype: bool

        """
        return _SMDS.SMDS_VolumeTool_GetFaceNodes(self, *args)


    def IsFaceExternal(self, *args):
        """
        IsFaceExternal(SMDS_VolumeTool self, int faceIndex) -> bool

        :type faceIndex: int
        :rtype: bool

        """
        return _SMDS.SMDS_VolumeTool_IsFaceExternal(self, *args)


    def IsFreeFace(self, *args):
        """
        IsFreeFace(SMDS_VolumeTool self, int faceIndex, SMDS_MeshElement const ** otherVol=None) -> bool

        :type faceIndex: int
        :type otherVol: OCC.wrapper.SMDS.SMDS_MeshElement
        :rtype: bool

        """
        return _SMDS.SMDS_VolumeTool_IsFreeFace(self, *args)


    def IsFreeFaceAdv(self, *args):
        """
        IsFreeFaceAdv(SMDS_VolumeTool self, int faceIndex, SMDS_MeshElement const ** otherVol=None) -> bool

        :type faceIndex: int
        :type otherVol: OCC.wrapper.SMDS.SMDS_MeshElement
        :rtype: bool

        """
        return _SMDS.SMDS_VolumeTool_IsFreeFaceAdv(self, *args)


    def GetFaceNormal(self, *args):
        """
        GetFaceNormal(SMDS_VolumeTool self, int faceIndex) -> bool

        :type faceIndex: int
        :type X: double &
        :type Y: double &
        :type Z: double &
        :rtype: bool

        """
        return _SMDS.SMDS_VolumeTool_GetFaceNormal(self, *args)


    def GetFaceBaryCenter(self, *args):
        """
        GetFaceBaryCenter(SMDS_VolumeTool self, int faceIndex) -> bool

        :type faceIndex: int
        :type X: double &
        :type Y: double &
        :type Z: double &
        :rtype: bool

        """
        return _SMDS.SMDS_VolumeTool_GetFaceBaryCenter(self, *args)


    def GetFaceArea(self, *args):
        """
        GetFaceArea(SMDS_VolumeTool self, int faceIndex) -> double

        :type faceIndex: int
        :rtype: double

        """
        return _SMDS.SMDS_VolumeTool_GetFaceArea(self, *args)


    def GetOppFaceIndex(self, *args):
        """
        GetOppFaceIndex(SMDS_VolumeTool self, int faceIndex) -> int

        :type faceIndex: int
        :rtype: int

        """
        return _SMDS.SMDS_VolumeTool_GetOppFaceIndex(self, *args)


    def GetCenterNodeIndex(self, *args):
        """
        GetCenterNodeIndex(SMDS_VolumeTool self, int faceIndex) -> int

        :type faceIndex: int
        :rtype: int

        """
        return _SMDS.SMDS_VolumeTool_GetCenterNodeIndex(self, *args)


    def GetFaceIndex(self, *args):
        """
        GetFaceIndex(SMDS_VolumeTool self, std::set< SMDS_MeshNode const *,std::less< SMDS_MeshNode const * >,std::allocator< SMDS_MeshNode const * > > const & theFaceNodes, int const theFaceIndexHint=-1) -> int

        :type theFaceNodes: OCC.wrapper.SMDS.set_SMDS_MeshNode
        :type theFaceIndexHint: const int
        :rtype: int

        """
        return _SMDS.SMDS_VolumeTool_GetFaceIndex(self, *args)


    def GetAllExistingFaces(self, *args):
        """
        GetAllExistingFaces(SMDS_VolumeTool self, std::vector< SMDS_MeshElement const *,std::allocator< SMDS_MeshElement const * > > & faces) -> int

        :type faces: OCC.wrapper.SMDS.vector_SMDS_MeshElement
        :rtype: int

        """
        return _SMDS.SMDS_VolumeTool_GetAllExistingFaces(self, *args)


    def GetType(*args):
        """
        GetType(int nbNodes) -> SMDS_VolumeTool::VolumeType

        :type nbNodes: int
        :rtype: VolumeType

        """
        return _SMDS.SMDS_VolumeTool_GetType(*args)

    GetType = staticmethod(GetType)

    def NbFaces(*args):
        """
        NbFaces() -> int
        NbFaces(SMDS_VolumeTool::VolumeType type) -> int

        :type type: VolumeType
        :rtype: int

        """
        return _SMDS.SMDS_VolumeTool_NbFaces(*args)

    NbFaces = staticmethod(NbFaces)

    def GetFaceNodesIndices(*args):
        """
        GetFaceNodesIndices(int faceIndex) -> int const
        GetFaceNodesIndices(SMDS_VolumeTool::VolumeType type, int faceIndex, bool external) -> int const *

        :type type: VolumeType
        :type faceIndex: int
        :type external: bool
        :rtype: const int *

        """
        return _SMDS.SMDS_VolumeTool_GetFaceNodesIndices(*args)

    GetFaceNodesIndices = staticmethod(GetFaceNodesIndices)

    def NbFaceNodes(*args):
        """
        NbFaceNodes(int faceIndex) -> int
        NbFaceNodes(SMDS_VolumeTool::VolumeType type, int faceIndex) -> int

        :type type: VolumeType
        :type faceIndex: int
        :rtype: int

        """
        return _SMDS.SMDS_VolumeTool_NbFaceNodes(*args)

    NbFaceNodes = staticmethod(NbFaceNodes)

    def NbCornerNodes(*args):
        """
        NbCornerNodes(SMDS_VolumeTool::VolumeType type) -> int

        :type type: VolumeType
        :rtype: int

        """
        return _SMDS.SMDS_VolumeTool_NbCornerNodes(*args)

    NbCornerNodes = staticmethod(NbCornerNodes)

    def GetOppFaceIndexOfHex(*args):
        """
        GetOppFaceIndexOfHex(int faceIndex) -> int

        :type faceIndex: int
        :rtype: int

        """
        return _SMDS.SMDS_VolumeTool_GetOppFaceIndexOfHex(*args)

    GetOppFaceIndexOfHex = staticmethod(GetOppFaceIndexOfHex)
    __swig_destroy__ = _SMDS.delete_SMDS_VolumeTool
SMDS_VolumeTool_swigregister = _SMDS.SMDS_VolumeTool_swigregister
SMDS_VolumeTool_swigregister(SMDS_VolumeTool)

def SMDS_VolumeTool_GetType(*args):
    """
    SMDS_VolumeTool_GetType(int nbNodes) -> SMDS_VolumeTool::VolumeType

    :type nbNodes: int
    :rtype: VolumeType

    """
    return _SMDS.SMDS_VolumeTool_GetType(*args)

def SMDS_VolumeTool_NbFaces(*args):
    """
    NbFaces() -> int
    SMDS_VolumeTool_NbFaces(SMDS_VolumeTool::VolumeType type) -> int

    :type type: VolumeType
    :rtype: int

    """
    return _SMDS.SMDS_VolumeTool_NbFaces(*args)

def SMDS_VolumeTool_GetFaceNodesIndices(*args):
    """
    GetFaceNodesIndices(int faceIndex) -> int const
    SMDS_VolumeTool_GetFaceNodesIndices(SMDS_VolumeTool::VolumeType type, int faceIndex, bool external) -> int const *

    :type type: VolumeType
    :type faceIndex: int
    :type external: bool
    :rtype: const int *

    """
    return _SMDS.SMDS_VolumeTool_GetFaceNodesIndices(*args)

def SMDS_VolumeTool_NbFaceNodes(*args):
    """
    NbFaceNodes(int faceIndex) -> int
    SMDS_VolumeTool_NbFaceNodes(SMDS_VolumeTool::VolumeType type, int faceIndex) -> int

    :type type: VolumeType
    :type faceIndex: int
    :rtype: int

    """
    return _SMDS.SMDS_VolumeTool_NbFaceNodes(*args)

def SMDS_VolumeTool_NbCornerNodes(*args):
    """
    SMDS_VolumeTool_NbCornerNodes(SMDS_VolumeTool::VolumeType type) -> int

    :type type: VolumeType
    :rtype: int

    """
    return _SMDS.SMDS_VolumeTool_NbCornerNodes(*args)

def SMDS_VolumeTool_GetOppFaceIndexOfHex(*args):
    """
    SMDS_VolumeTool_GetOppFaceIndexOfHex(int faceIndex) -> int

    :type faceIndex: int
    :rtype: int

    """
    return _SMDS.SMDS_VolumeTool_GetOppFaceIndexOfHex(*args)

class SMDS_CellLinks(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def ResizeForPoint(self, *args):
        """
        ResizeForPoint(SMDS_CellLinks self, vtkIdType vtkID)

        :type vtkID: vtkIdType

        """
        return _SMDS.SMDS_CellLinks_ResizeForPoint(self, *args)


    def BuildLinks(self, *args):
        """
        BuildLinks(SMDS_CellLinks self, vtkDataSet * data, vtkCellArray * Connectivity, vtkUnsignedCharArray * types)

        :type data: vtkDataSet
        :type Connectivity: vtkCellArray
        :type types: vtkUnsignedCharArray

        """
        return _SMDS.SMDS_CellLinks_BuildLinks(self, *args)


    def New(*args):
        """
        New() -> SMDS_CellLinks

        :rtype: OCC.wrapper.SMDS.SMDS_CellLinks

        """
        return _SMDS.SMDS_CellLinks_New(*args)

    New = staticmethod(New)
SMDS_CellLinks_swigregister = _SMDS.SMDS_CellLinks_swigregister
SMDS_CellLinks_swigregister(SMDS_CellLinks)

def SMDS_CellLinks_New(*args):
    """
    SMDS_CellLinks_New() -> SMDS_CellLinks

    :rtype: OCC.wrapper.SMDS.SMDS_CellLinks

    """
    return _SMDS.SMDS_CellLinks_New(*args)

class SMDS_DownQuadHexa(SMDS_Down3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getOrderedNodesOfFace(self, *args):
        """
        getOrderedNodesOfFace(SMDS_DownQuadHexa self, int cellId, std::vector< vtkIdType,std::allocator< vtkIdType > > & orderedNodes)

        :type cellId: int
        :type orderedNodes: OCC.wrapper.SMDS.vector_vtkIdType

        """
        return _SMDS.SMDS_DownQuadHexa_getOrderedNodesOfFace(self, *args)

SMDS_DownQuadHexa_swigregister = _SMDS.SMDS_DownQuadHexa_swigregister
SMDS_DownQuadHexa_swigregister(SMDS_DownQuadHexa)

class SMDS_UnstructuredGrid(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setSMDS_mesh(self, *args):
        """
        setSMDS_mesh(SMDS_UnstructuredGrid self, SMDS_Mesh mesh)

        :type mesh: OCC.wrapper.SMDS.SMDS_Mesh

        """
        return _SMDS.SMDS_UnstructuredGrid_setSMDS_mesh(self, *args)


    def compactGrid(self, *args):
        """
        compactGrid(SMDS_UnstructuredGrid self, std::vector< int,std::allocator< int > > & idNodesOldToNew, int newNodeSize, std::vector< int,std::allocator< int > > & idCellsOldToNew, int newCellSize)

        :type idNodesOldToNew: OCC.wrapper.SMDS.vector
        :type newNodeSize: int
        :type idCellsOldToNew: OCC.wrapper.SMDS.vector
        :type newCellSize: int

        """
        return _SMDS.SMDS_UnstructuredGrid_compactGrid(self, *args)


    def GetMTime(self, *args):
        """
        GetMTime(SMDS_UnstructuredGrid self) -> vtkMTimeType

        :rtype: vtkMTimeType

        """
        return _SMDS.SMDS_UnstructuredGrid_GetMTime(self, *args)


    def GetPoints(self, *args):
        """
        GetPoints(SMDS_UnstructuredGrid self) -> vtkPoints *

        :rtype: vtkPoints

        """
        return _SMDS.SMDS_UnstructuredGrid_GetPoints(self, *args)


    def InsertNextLinkedCell(self, *args):
        """
        InsertNextLinkedCell(SMDS_UnstructuredGrid self, int type, int npts, vtkIdType * pts) -> int

        :type type: int
        :type npts: int
        :type pts: vtkIdType
        :rtype: int

        """
        return _SMDS.SMDS_UnstructuredGrid_InsertNextLinkedCell(self, *args)


    def CellIdToDownId(self, *args):
        """
        CellIdToDownId(SMDS_UnstructuredGrid self, int vtkCellId) -> int

        :type vtkCellId: int
        :rtype: int

        """
        return _SMDS.SMDS_UnstructuredGrid_CellIdToDownId(self, *args)


    def setCellIdToDownId(self, *args):
        """
        setCellIdToDownId(SMDS_UnstructuredGrid self, int vtkCellId, int downId)

        :type vtkCellId: int
        :type downId: int

        """
        return _SMDS.SMDS_UnstructuredGrid_setCellIdToDownId(self, *args)


    def CleanDownwardConnectivity(self, *args):
        """CleanDownwardConnectivity(SMDS_UnstructuredGrid self)"""
        return _SMDS.SMDS_UnstructuredGrid_CleanDownwardConnectivity(self, *args)


    def BuildDownwardConnectivity(self, *args):
        """
        BuildDownwardConnectivity(SMDS_UnstructuredGrid self, bool withEdges)

        :type withEdges: bool

        """
        return _SMDS.SMDS_UnstructuredGrid_BuildDownwardConnectivity(self, *args)


    def GetNeighbors(self, *args):
        """
        GetNeighbors(SMDS_UnstructuredGrid self, int * neighborsVtkIds, int * downIds, unsigned char * downTypes, int vtkId, bool getSkin=False) -> int

        :type neighborsVtkIds: int *
        :type downIds: int *
        :type downTypes: unsigned char *
        :type vtkId: int
        :type getSkin: bool
        :rtype: int

        """
        return _SMDS.SMDS_UnstructuredGrid_GetNeighbors(self, *args)


    def GetParentVolumes(self, *args):
        """
        GetParentVolumes(SMDS_UnstructuredGrid self, int * volVtkIds, int vtkId) -> int
        GetParentVolumes(SMDS_UnstructuredGrid self, int * volVtkIds, int downId, unsigned char downType) -> int

        :type volVtkIds: int *
        :type downId: int
        :type downType: unsigned char
        :rtype: int

        """
        return _SMDS.SMDS_UnstructuredGrid_GetParentVolumes(self, *args)


    def GetNodeIds(self, *args):
        """
        GetNodeIds(SMDS_UnstructuredGrid self, std::set< int,std::less< int >,std::allocator< int > > & nodeSet, int downId, unsigned char downType)

        :type nodeSet: OCC.wrapper.SMDS.set
        :type downId: int
        :type downType: unsigned char

        """
        return _SMDS.SMDS_UnstructuredGrid_GetNodeIds(self, *args)


    def ModifyCellNodes(self, *args):
        """
        ModifyCellNodes(SMDS_UnstructuredGrid self, int vtkVolId, std::map< int,int,std::less< int >,std::allocator< std::pair< int const,int > > > localClonedNodeIds)

        :type vtkVolId: int
        :type localClonedNodeIds: OCC.wrapper.SMDS.map

        """
        return _SMDS.SMDS_UnstructuredGrid_ModifyCellNodes(self, *args)


    def getOrderedNodesOfFace(self, *args):
        """
        getOrderedNodesOfFace(SMDS_UnstructuredGrid self, int vtkVolId, std::vector< vtkIdType,std::allocator< vtkIdType > > & orderedNodes) -> int

        :type vtkVolId: int
        :type dim: int &
        :type orderedNodes: OCC.wrapper.SMDS.vector_vtkIdType
        :rtype: int

        """
        return _SMDS.SMDS_UnstructuredGrid_getOrderedNodesOfFace(self, *args)


    def extrudeVolumeFromFace(self, *args):
        """
        extrudeVolumeFromFace(SMDS_UnstructuredGrid self, int vtkVolId, int domain1, int domain2, std::set< int,std::less< int >,std::allocator< int > > & originalNodes, std::map< int,std::map< int,int,std::less< int >,std::allocator< std::pair< int const,int > > >,std::less< int >,std::allocator< std::pair< int const,std::map< int,int,std::less< int >,std::allocator< std::pair< int const,int > > > > > > & nodeDomains, std::map< int,std::map< long,int,std::less< long >,std::allocator< std::pair< long const,int > > >,std::less< int >,std::allocator< std::pair< int const,std::map< long,int,std::less< long >,std::allocator< std::pair< long const,int > > > > > > & nodeQuadDomains) -> SMDS_MeshCell

        :type vtkVolId: int
        :type domain1: int
        :type domain2: int
        :type originalNodes: OCC.wrapper.SMDS.set
        :type nodeDomains: OCC.wrapper.SMDS.map_map
        :type nodeQuadDomains: OCC.wrapper.SMDS.map_map
        :rtype: OCC.wrapper.SMDS.SMDS_MeshCell

        """
        return _SMDS.SMDS_UnstructuredGrid_extrudeVolumeFromFace(self, *args)


    def BuildLinks(self, *args):
        """BuildLinks(SMDS_UnstructuredGrid self)"""
        return _SMDS.SMDS_UnstructuredGrid_BuildLinks(self, *args)


    def DeleteLinks(self, *args):
        """DeleteLinks(SMDS_UnstructuredGrid self)"""
        return _SMDS.SMDS_UnstructuredGrid_DeleteLinks(self, *args)


    def GetLinks(self, *args):
        """
        GetLinks(SMDS_UnstructuredGrid self) -> SMDS_CellLinks

        :rtype: OCC.wrapper.SMDS.SMDS_CellLinks

        """
        return _SMDS.SMDS_UnstructuredGrid_GetLinks(self, *args)


    def HasLinks(self, *args):
        """
        HasLinks(SMDS_UnstructuredGrid self) -> bool

        :rtype: bool

        """
        return _SMDS.SMDS_UnstructuredGrid_HasLinks(self, *args)


    def getDownArray(self, *args):
        """
        getDownArray(SMDS_UnstructuredGrid self, unsigned char vtkType) -> SMDS_Downward

        :type vtkType: unsigned char
        :rtype: OCC.wrapper.SMDS.SMDS_Downward

        """
        return _SMDS.SMDS_UnstructuredGrid_getDownArray(self, *args)


    def AllocateDiameters(self, *args):
        """
        AllocateDiameters(SMDS_UnstructuredGrid self, vtkIdType maxVtkID)

        :type maxVtkID: vtkIdType

        """
        return _SMDS.SMDS_UnstructuredGrid_AllocateDiameters(self, *args)


    def SetBallDiameter(self, *args):
        """
        SetBallDiameter(SMDS_UnstructuredGrid self, vtkIdType vtkID, double diameter)

        :type vtkID: vtkIdType
        :type diameter: double

        """
        return _SMDS.SMDS_UnstructuredGrid_SetBallDiameter(self, *args)


    def GetBallDiameter(self, *args):
        """
        GetBallDiameter(SMDS_UnstructuredGrid self, vtkIdType vtkID) -> double

        :type vtkID: vtkIdType
        :rtype: double

        """
        return _SMDS.SMDS_UnstructuredGrid_GetBallDiameter(self, *args)


    def New(*args):
        """
        New() -> SMDS_UnstructuredGrid

        :rtype: OCC.wrapper.SMDS.SMDS_UnstructuredGrid

        """
        return _SMDS.SMDS_UnstructuredGrid_New(*args)

    New = staticmethod(New)
SMDS_UnstructuredGrid_swigregister = _SMDS.SMDS_UnstructuredGrid_swigregister
SMDS_UnstructuredGrid_swigregister(SMDS_UnstructuredGrid)

def SMDS_UnstructuredGrid_New(*args):
    """
    SMDS_UnstructuredGrid_New() -> SMDS_UnstructuredGrid

    :rtype: OCC.wrapper.SMDS.SMDS_UnstructuredGrid

    """
    return _SMDS.SMDS_UnstructuredGrid_New(*args)

class SMDS_Ptr_SMDS_Position(object):
    """
    rief Replace "typedef SMDS_Position* SMDS_PositionPtr" by a smart
    pointer allowing implicit casting to derived types; e.g.
    if ( SMDS_FacePositionPtr fPos = node->GetPosition() )
    fPos->SetUParameter(0);
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        rief Replace "typedef SMDS_Position* SMDS_PositionPtr" by a smart
        pointer allowing implicit casting to derived types; e.g.
        if ( SMDS_FacePositionPtr fPos = node->GetPosition() )
        fPos->SetUParameter(0);
        """
        this = _SMDS.new_SMDS_Ptr_SMDS_Position(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def assign(self, *args):
        """
        assign(SMDS_Ptr_SMDS_Position self, SMDS_Ptr_SMDS_Position arg2) -> SMDS_Ptr_SMDS_Position

        :type from: OCC.wrapper.SMDS.SMDS_Ptr
        :rtype: OCC.wrapper.SMDS.SMDS_Ptr

        """
        return _SMDS.SMDS_Ptr_SMDS_Position_assign(self, *args)


    def IsOwner(self, *args):
        """
        IsOwner(SMDS_Ptr_SMDS_Position self) -> bool

        :rtype: bool

        """
        return _SMDS.SMDS_Ptr_SMDS_Position_IsOwner(self, *args)

    __swig_destroy__ = _SMDS.delete_SMDS_Ptr_SMDS_Position
SMDS_Ptr_SMDS_Position_swigregister = _SMDS.SMDS_Ptr_SMDS_Position_swigregister
SMDS_Ptr_SMDS_Position_swigregister(SMDS_Ptr_SMDS_Position)


try:
	SMDS_PositionPtr = SMDS_Ptr_SMDS_Position
except NameError:
	pass # does not exist, probably ignored

class SMDS_DownPenta(SMDS_Down3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getOrderedNodesOfFace(self, *args):
        """
        getOrderedNodesOfFace(SMDS_DownPenta self, int cellId, std::vector< vtkIdType,std::allocator< vtkIdType > > & orderedNodes)

        :type cellId: int
        :type orderedNodes: OCC.wrapper.SMDS.vector_vtkIdType

        """
        return _SMDS.SMDS_DownPenta_getOrderedNodesOfFace(self, *args)

SMDS_DownPenta_swigregister = _SMDS.SMDS_DownPenta_swigregister
SMDS_DownPenta_swigregister(SMDS_DownPenta)

class SMDS_MeshGroup(SMDS_MeshObject):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SMDS_MeshGroup self, SMDS_Mesh theMesh, SMDSAbs_ElementType const theType=SMDSAbs_All) -> SMDS_MeshGroup

        :type theMesh: OCC.wrapper.SMDS.SMDS_Mesh
        :type theType: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

        """
        this = _SMDS.new_SMDS_MeshGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetType(self, *args):
        """
        SetType(SMDS_MeshGroup self, SMDSAbs_ElementType const theType)

        :type theType: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

        """
        return _SMDS.SMDS_MeshGroup_SetType(self, *args)


    def Clear(self, *args):
        """Clear(SMDS_MeshGroup self)"""
        return _SMDS.SMDS_MeshGroup_Clear(self, *args)


    def Reserve(self, *args):
        """
        Reserve(SMDS_MeshGroup self, size_t nbElems)

        :type nbElems: size_t

        """
        return _SMDS.SMDS_MeshGroup_Reserve(self, *args)


    def Add(self, *args):
        """
        Add(SMDS_MeshGroup self, SMDS_MeshElement theElem) -> bool

        :type theElem: OCC.wrapper.SMDS.SMDS_MeshElement
        :rtype: bool

        """
        return _SMDS.SMDS_MeshGroup_Add(self, *args)


    def Remove(self, *args):
        """
        Remove(SMDS_MeshGroup self, SMDS_MeshElement theElem) -> bool

        :type theElem: OCC.wrapper.SMDS.SMDS_MeshElement
        :rtype: bool

        """
        return _SMDS.SMDS_MeshGroup_Remove(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(SMDS_MeshGroup self) -> bool

        :rtype: bool

        """
        return _SMDS.SMDS_MeshGroup_IsEmpty(self, *args)


    def Extent(self, *args):
        """
        Extent(SMDS_MeshGroup self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshGroup_Extent(self, *args)


    def Tic(self, *args):
        """
        Tic(SMDS_MeshGroup self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_MeshGroup_Tic(self, *args)


    def Contains(self, *args):
        """
        Contains(SMDS_MeshGroup self, SMDS_MeshElement theElem) -> bool

        :type theElem: OCC.wrapper.SMDS.SMDS_MeshElement
        :rtype: bool

        """
        return _SMDS.SMDS_MeshGroup_Contains(self, *args)


    def GetMesh(self, *args):
        """
        GetMesh(SMDS_MeshGroup self) -> SMDS_Mesh

        :rtype: OCC.wrapper.SMDS.SMDS_Mesh

        """
        return _SMDS.SMDS_MeshGroup_GetMesh(self, *args)


    def GetType(self, *args):
        """
        GetType(SMDS_MeshGroup self) -> SMDSAbs_ElementType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

        """
        return _SMDS.SMDS_MeshGroup_GetType(self, *args)


    def GetElements(self, *args):
        """
        GetElements(SMDS_MeshGroup self) -> shared_ptr_SMDS_Iterator_SMDS_MeshElement

        :rtype: OCC.wrapper.SMDS.SMDS_ElemIteratorPtr

        """
        return _SMDS.SMDS_MeshGroup_GetElements(self, *args)


    def assign(self, *args):
        """
        assign(SMDS_MeshGroup self, SMDS_MeshGroup other)

        :type other: OCC.wrapper.SMDS.SMDS_MeshGroup &&

        """
        return _SMDS.SMDS_MeshGroup_assign(self, *args)

    __swig_destroy__ = _SMDS.delete_SMDS_MeshGroup
SMDS_MeshGroup_swigregister = _SMDS.SMDS_MeshGroup_swigregister
SMDS_MeshGroup_swigregister(SMDS_MeshGroup)

class SMDS_DownHexa(SMDS_Down3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getOrderedNodesOfFace(self, *args):
        """
        getOrderedNodesOfFace(SMDS_DownHexa self, int cellId, std::vector< vtkIdType,std::allocator< vtkIdType > > & orderedNodes)

        :type cellId: int
        :type orderedNodes: OCC.wrapper.SMDS.vector_vtkIdType

        """
        return _SMDS.SMDS_DownHexa_getOrderedNodesOfFace(self, *args)

SMDS_DownHexa_swigregister = _SMDS.SMDS_DownHexa_swigregister
SMDS_DownHexa_swigregister(SMDS_DownHexa)

class SMDS_DownEdge(SMDS_Down1D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
SMDS_DownEdge_swigregister = _SMDS.SMDS_DownEdge_swigregister
SMDS_DownEdge_swigregister(SMDS_DownEdge)

class SMDS_NodeFactory(SMDS_ElementFactory):
    """rief Allocate SMDS_MeshNode's"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def NewNode(self, *args):
        """
        NewNode(SMDS_NodeFactory self, int id) -> SMDS_MeshNode

        Return a SMDS_MeshNode by ID. NULL if the node with the given ID is already used

        :type id: int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _SMDS.SMDS_NodeFactory_NewNode(self, *args)


    def FindNode(self, *args):
        """
        FindNode(SMDS_NodeFactory self, int id) -> SMDS_MeshNode

        Return an used node by ID. NULL if the node with the given ID is not yet used

        :type id: int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _SMDS.SMDS_NodeFactory_FindNode(self, *args)

    __swig_destroy__ = _SMDS.delete_SMDS_NodeFactory
SMDS_NodeFactory_swigregister = _SMDS.SMDS_NodeFactory_swigregister
SMDS_NodeFactory_swigregister(SMDS_NodeFactory)

class SMDS_DownPyramid(SMDS_Down3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getOrderedNodesOfFace(self, *args):
        """
        getOrderedNodesOfFace(SMDS_DownPyramid self, int cellId, std::vector< vtkIdType,std::allocator< vtkIdType > > & orderedNodes)

        :type cellId: int
        :type orderedNodes: OCC.wrapper.SMDS.vector_vtkIdType

        """
        return _SMDS.SMDS_DownPyramid_getOrderedNodesOfFace(self, *args)

SMDS_DownPyramid_swigregister = _SMDS.SMDS_DownPyramid_swigregister
SMDS_DownPyramid_swigregister(SMDS_DownPyramid)

class SMDS_LinearEdge(SMDS_CellOfNodes):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SMDS_LinearEdge self, SMDS_MeshNode node1, SMDS_MeshNode node2) -> SMDS_LinearEdge

        :type node1: OCC.wrapper.SMDS.SMDS_MeshNode
        :type node2: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        this = _SMDS.new_SMDS_LinearEdge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetType(self, *args):
        """
        GetType(SMDS_LinearEdge self) -> SMDSAbs_ElementType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

        """
        return _SMDS.SMDS_LinearEdge_GetType(self, *args)


    def GetGeomType(self, *args):
        """
        GetGeomType(SMDS_LinearEdge self) -> SMDSAbs_GeometryType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_GeometryType

        """
        return _SMDS.SMDS_LinearEdge_GetGeomType(self, *args)


    def GetEntityType(self, *args):
        """
        GetEntityType(SMDS_LinearEdge self) -> SMDSAbs_EntityType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType

        """
        return _SMDS.SMDS_LinearEdge_GetEntityType(self, *args)


    def ChangeNodes(self, *args):
        """
        ChangeNodes(SMDS_LinearEdge self, SMDS_MeshNode const ** nodes, int const nbNodes) -> bool

        :type nodes: const SMDS_MeshNode *[]
        :type nbNodes: const int
        :rtype: bool

        """
        return _SMDS.SMDS_LinearEdge_ChangeNodes(self, *args)


    def NbNodes(self, *args):
        """
        NbNodes(SMDS_LinearEdge self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_LinearEdge_NbNodes(self, *args)


    def NbEdges(self, *args):
        """
        NbEdges(SMDS_LinearEdge self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_LinearEdge_NbEdges(self, *args)


    def NbFaces(self, *args):
        """
        NbFaces(SMDS_LinearEdge self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_LinearEdge_NbFaces(self, *args)


    def NbCornerNodes(self, *args):
        """
        NbCornerNodes(SMDS_LinearEdge self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_LinearEdge_NbCornerNodes(self, *args)


    def GetNodeIndex(self, *args):
        """
        GetNodeIndex(SMDS_LinearEdge self, SMDS_MeshNode node) -> int

        :type node: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: int

        """
        return _SMDS.SMDS_LinearEdge_GetNodeIndex(self, *args)


    def IsPoly(self, *args):
        """
        IsPoly(SMDS_LinearEdge self) -> bool

        :rtype: bool

        """
        return _SMDS.SMDS_LinearEdge_IsPoly(self, *args)


    def IsQuadratic(self, *args):
        """
        IsQuadratic(SMDS_LinearEdge self) -> bool

        :rtype: bool

        """
        return _SMDS.SMDS_LinearEdge_IsQuadratic(self, *args)


    def nodesIterator(self, *args):
        """
        nodesIterator(SMDS_LinearEdge self) -> shared_ptr_SMDS_Iterator_SMDS_MeshElement

        :rtype: OCC.wrapper.SMDS.SMDS_ElemIteratorPtr

        """
        return _SMDS.SMDS_LinearEdge_nodesIterator(self, *args)


    def nodeIterator(self, *args):
        """
        nodeIterator(SMDS_LinearEdge self) -> shared_ptr_SMDS_Iterator_SMDS_MeshNode

        :rtype: OCC.wrapper.SMDS.SMDS_NodeIteratorPtr

        """
        return _SMDS.SMDS_LinearEdge_nodeIterator(self, *args)


    def GetNode(self, *args):
        """
        GetNode(SMDS_LinearEdge self, int const ind) -> SMDS_MeshNode

        :type ind: const int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _SMDS.SMDS_LinearEdge_GetNode(self, *args)

    __swig_destroy__ = _SMDS.delete_SMDS_LinearEdge
SMDS_LinearEdge_swigregister = _SMDS.SMDS_LinearEdge_swigregister
SMDS_LinearEdge_swigregister(SMDS_LinearEdge)

class _RangeSet__UsedRange(object):
    """rief Sorted set of ranges"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """rief Sorted set of ranges"""
        this = _SMDS.new__RangeSet__UsedRange()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def GetIndices(self, *args):
        """
        GetIndices(_RangeSet__UsedRange self, _RangeSet< _UsedRange >::attr_t const theValue, TIndexRanges & theIndices, _RangeSet< _UsedRange >::attr_t const * theMinValue=None, _RangeSet< _UsedRange >::attr_t const * theMaxValue=None) -> bool

        rief Return ranges of indices (from,to) of elements having a given value

        :type theValue: attr_t
        :type theIndices: TIndexRanges
        :type theMinValue: attr_t
        :type theMaxValue: attr_t
        :rtype: bool

        """
        return _SMDS._RangeSet__UsedRange_GetIndices(self, *args)


    def GetValue(self, *args):
        """
        GetValue(_RangeSet__UsedRange self, int theIndex) -> _RangeSet< _UsedRange >::attr_t

        rief Return value of an element attribute
        \param [in] theIndex - element index
        @return attr_t - attribute value

        :type theIndex: int
        :rtype: attr_t

        """
        return _SMDS._RangeSet__UsedRange_GetValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(_RangeSet__UsedRange self, int theIndex, _RangeSet< _UsedRange >::attr_t theValue) -> _RangeSet< _UsedRange >::attr_t

        rief Change value of an element attribute
        \param [in] theIndex - element index
        \param [in] theValue - attribute value
        @return attr_t - previous value

        :type theIndex: int
        :type theValue: attr_t
        :rtype: attr_t

        """
        return _SMDS._RangeSet__UsedRange_SetValue(self, *args)

    __swig_destroy__ = _SMDS.delete__RangeSet__UsedRange
_RangeSet__UsedRange_swigregister = _SMDS._RangeSet__UsedRange_swigregister
_RangeSet__UsedRange_swigregister(_RangeSet__UsedRange)


try:
	TUsedRangeSet = _RangeSet__UsedRange
except NameError:
	pass # does not exist, probably ignored

class shared_ptr_SMDS_Iterator_SMDS_Mesh0DElement(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _SMDS.new_shared_ptr_SMDS_Iterator_SMDS_Mesh0DElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_Mesh0DElement___deref__(self)

    def __ref__(self):
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_Mesh0DElement___ref__(self)
    __swig_destroy__ = _SMDS.delete_shared_ptr_SMDS_Iterator_SMDS_Mesh0DElement

    def more(self, *args):
        """
        more(shared_ptr_SMDS_Iterator_SMDS_Mesh0DElement self) -> bool

        Return true if and only if there are other object in this iterator

        :rtype: bool

        """
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_Mesh0DElement_more(self, *args)


    def next(self, *args):
        """
        next(shared_ptr_SMDS_Iterator_SMDS_Mesh0DElement self) -> SMDS_Mesh0DElement

        Return the current object and step to the next one

        :rtype: VALUE

        """
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_Mesh0DElement_next(self, *args)


    def remove(self, *args):
        """
        remove(shared_ptr_SMDS_Iterator_SMDS_Mesh0DElement self)

        Delete the current element and step to the next one


        """
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_Mesh0DElement_remove(self, *args)

shared_ptr_SMDS_Iterator_SMDS_Mesh0DElement_swigregister = _SMDS.shared_ptr_SMDS_Iterator_SMDS_Mesh0DElement_swigregister
shared_ptr_SMDS_Iterator_SMDS_Mesh0DElement_swigregister(shared_ptr_SMDS_Iterator_SMDS_Mesh0DElement)


try:
	SMDS_0DElementIteratorPtr = shared_ptr_SMDS_Iterator_SMDS_Mesh0DElement
except NameError:
	pass # does not exist, probably ignored

class SMDS_DownQuadTriangle(SMDS_Down2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
SMDS_DownQuadTriangle_swigregister = _SMDS.SMDS_DownQuadTriangle_swigregister
SMDS_DownQuadTriangle_swigregister(SMDS_DownQuadTriangle)

class SMDS_DownQuadQuadrangle(SMDS_Down2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
SMDS_DownQuadQuadrangle_swigregister = _SMDS.SMDS_DownQuadQuadrangle_swigregister
SMDS_DownQuadQuadrangle_swigregister(SMDS_DownQuadQuadrangle)

class SMDS_DownTriangle(SMDS_Down2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
SMDS_DownTriangle_swigregister = _SMDS.SMDS_DownTriangle_swigregister
SMDS_DownTriangle_swigregister(SMDS_DownTriangle)

class SMDS_SpacePosition(SMDS_Position):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetTypeOfPosition(self, *args):
        """
        GetTypeOfPosition(SMDS_SpacePosition self) -> SMDS_TypeOfPosition

        :rtype: OCC.wrapper.SMDS.SMDS_TypeOfPosition

        """
        return _SMDS.SMDS_SpacePosition_GetTypeOfPosition(self, *args)


    def originSpacePosition(*args):
        """
        originSpacePosition() -> SMDS_Ptr_SMDS_Position

        :rtype: OCC.wrapper.SMDS.SMDS_PositionPtr

        """
        return _SMDS.SMDS_SpacePosition_originSpacePosition(*args)

    originSpacePosition = staticmethod(originSpacePosition)

    def GetParameters(self, *args):
        """
        GetParameters(SMDS_SpacePosition self) -> double const *

        :rtype: const double *

        """
        return _SMDS.SMDS_SpacePosition_GetParameters(self, *args)


    def __init__(self):
        this = _SMDS.new_SMDS_SpacePosition()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SMDS.delete_SMDS_SpacePosition
SMDS_SpacePosition_swigregister = _SMDS.SMDS_SpacePosition_swigregister
SMDS_SpacePosition_swigregister(SMDS_SpacePosition)

def SMDS_SpacePosition_originSpacePosition(*args):
    """
    SMDS_SpacePosition_originSpacePosition() -> SMDS_Ptr_SMDS_Position

    :rtype: OCC.wrapper.SMDS.SMDS_PositionPtr

    """
    return _SMDS.SMDS_SpacePosition_originSpacePosition(*args)

class SMDS_VolumeOfNodes(SMDS_CellOfNodes):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SMDS_VolumeOfNodes self, SMDS_MeshNode node1, SMDS_MeshNode node2, SMDS_MeshNode node3, SMDS_MeshNode node4) -> SMDS_VolumeOfNodes
        __init__(SMDS_VolumeOfNodes self, SMDS_MeshNode node1, SMDS_MeshNode node2, SMDS_MeshNode node3, SMDS_MeshNode node4, SMDS_MeshNode node5) -> SMDS_VolumeOfNodes
        __init__(SMDS_VolumeOfNodes self, SMDS_MeshNode node1, SMDS_MeshNode node2, SMDS_MeshNode node3, SMDS_MeshNode node4, SMDS_MeshNode node5, SMDS_MeshNode node6) -> SMDS_VolumeOfNodes
        __init__(SMDS_VolumeOfNodes self, SMDS_MeshNode node1, SMDS_MeshNode node2, SMDS_MeshNode node3, SMDS_MeshNode node4, SMDS_MeshNode node5, SMDS_MeshNode node6, SMDS_MeshNode node7, SMDS_MeshNode node8) -> SMDS_VolumeOfNodes

        :type node1: OCC.wrapper.SMDS.SMDS_MeshNode
        :type node2: OCC.wrapper.SMDS.SMDS_MeshNode
        :type node3: OCC.wrapper.SMDS.SMDS_MeshNode
        :type node4: OCC.wrapper.SMDS.SMDS_MeshNode
        :type node5: OCC.wrapper.SMDS.SMDS_MeshNode
        :type node6: OCC.wrapper.SMDS.SMDS_MeshNode
        :type node7: OCC.wrapper.SMDS.SMDS_MeshNode
        :type node8: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        this = _SMDS.new_SMDS_VolumeOfNodes(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeNodes(self, *args):
        """
        ChangeNodes(SMDS_VolumeOfNodes self, SMDS_MeshNode const ** nodes, int const nbNodes) -> bool

        :type nodes: const SMDS_MeshNode *[]
        :type nbNodes: const int
        :rtype: bool

        """
        return _SMDS.SMDS_VolumeOfNodes_ChangeNodes(self, *args)


    def Print(self, *args):
        """
        Print(SMDS_VolumeOfNodes self, std::ostream & OS)

        :type OS: ostream

        """
        return _SMDS.SMDS_VolumeOfNodes_Print(self, *args)


    def NbFaces(self, *args):
        """
        NbFaces(SMDS_VolumeOfNodes self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_VolumeOfNodes_NbFaces(self, *args)


    def NbNodes(self, *args):
        """
        NbNodes(SMDS_VolumeOfNodes self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_VolumeOfNodes_NbNodes(self, *args)


    def NbEdges(self, *args):
        """
        NbEdges(SMDS_VolumeOfNodes self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_VolumeOfNodes_NbEdges(self, *args)


    def GetType(self, *args):
        """
        GetType(SMDS_VolumeOfNodes self) -> SMDSAbs_ElementType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

        """
        return _SMDS.SMDS_VolumeOfNodes_GetType(self, *args)


    def GetEntityType(self, *args):
        """
        GetEntityType(SMDS_VolumeOfNodes self) -> SMDSAbs_EntityType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType

        """
        return _SMDS.SMDS_VolumeOfNodes_GetEntityType(self, *args)


    def GetGeomType(self, *args):
        """
        GetGeomType(SMDS_VolumeOfNodes self) -> SMDSAbs_GeometryType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_GeometryType

        """
        return _SMDS.SMDS_VolumeOfNodes_GetGeomType(self, *args)


    def IsPoly(self, *args):
        """
        IsPoly(SMDS_VolumeOfNodes self) -> bool

        :rtype: bool

        """
        return _SMDS.SMDS_VolumeOfNodes_IsPoly(self, *args)


    def IsQuadratic(self, *args):
        """
        IsQuadratic(SMDS_VolumeOfNodes self) -> bool

        :rtype: bool

        """
        return _SMDS.SMDS_VolumeOfNodes_IsQuadratic(self, *args)


    def GetNode(self, *args):
        """
        GetNode(SMDS_VolumeOfNodes self, int const ind) -> SMDS_MeshNode

        rief Return node by its index
        \param ind - node index
        etval const SMDS_MeshNode* - the node

        :type ind: const int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _SMDS.SMDS_VolumeOfNodes_GetNode(self, *args)


    def NbCornerNodes(self, *args):
        """
        NbCornerNodes(SMDS_VolumeOfNodes self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_VolumeOfNodes_NbCornerNodes(self, *args)


    def GetNodeIndex(self, *args):
        """
        GetNodeIndex(SMDS_VolumeOfNodes self, SMDS_MeshNode node) -> int

        :type node: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: int

        """
        return _SMDS.SMDS_VolumeOfNodes_GetNodeIndex(self, *args)


    def nodesIterator(self, *args):
        """
        nodesIterator(SMDS_VolumeOfNodes self) -> shared_ptr_SMDS_Iterator_SMDS_MeshElement

        :rtype: OCC.wrapper.SMDS.SMDS_ElemIteratorPtr

        """
        return _SMDS.SMDS_VolumeOfNodes_nodesIterator(self, *args)


    def nodeIterator(self, *args):
        """
        nodeIterator(SMDS_VolumeOfNodes self) -> shared_ptr_SMDS_Iterator_SMDS_MeshNode

        :rtype: OCC.wrapper.SMDS.SMDS_NodeIteratorPtr

        """
        return _SMDS.SMDS_VolumeOfNodes_nodeIterator(self, *args)

    __swig_destroy__ = _SMDS.delete_SMDS_VolumeOfNodes
SMDS_VolumeOfNodes_swigregister = _SMDS.SMDS_VolumeOfNodes_swigregister
SMDS_VolumeOfNodes_swigregister(SMDS_VolumeOfNodes)

class SMDS_FaceOfNodes(SMDS_CellOfNodes):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Print(self, *args):
        """
        Print(SMDS_FaceOfNodes self, std::ostream & OS)

        :type OS: ostream

        """
        return _SMDS.SMDS_FaceOfNodes_Print(self, *args)


    def __init__(self, *args):
        """
        __init__(SMDS_FaceOfNodes self, SMDS_MeshNode node1, SMDS_MeshNode node2, SMDS_MeshNode node3) -> SMDS_FaceOfNodes
        __init__(SMDS_FaceOfNodes self, SMDS_MeshNode node1, SMDS_MeshNode node2, SMDS_MeshNode node3, SMDS_MeshNode node4) -> SMDS_FaceOfNodes

        :type node1: OCC.wrapper.SMDS.SMDS_MeshNode
        :type node2: OCC.wrapper.SMDS.SMDS_MeshNode
        :type node3: OCC.wrapper.SMDS.SMDS_MeshNode
        :type node4: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        this = _SMDS.new_SMDS_FaceOfNodes(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeNodes(self, *args):
        """
        ChangeNodes(SMDS_FaceOfNodes self, SMDS_MeshNode const ** nodes, int const nbNodes) -> bool

        :type nodes: const SMDS_MeshNode *[]
        :type nbNodes: const int
        :rtype: bool

        """
        return _SMDS.SMDS_FaceOfNodes_ChangeNodes(self, *args)


    def NbEdges(self, *args):
        """
        NbEdges(SMDS_FaceOfNodes self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_FaceOfNodes_NbEdges(self, *args)


    def NbFaces(self, *args):
        """
        NbFaces(SMDS_FaceOfNodes self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_FaceOfNodes_NbFaces(self, *args)


    def NbNodes(self, *args):
        """
        NbNodes(SMDS_FaceOfNodes self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_FaceOfNodes_NbNodes(self, *args)


    def NbCornerNodes(self, *args):
        """
        NbCornerNodes(SMDS_FaceOfNodes self) -> int

        :rtype: int

        """
        return _SMDS.SMDS_FaceOfNodes_NbCornerNodes(self, *args)


    def GetNodeIndex(self, *args):
        """
        GetNodeIndex(SMDS_FaceOfNodes self, SMDS_MeshNode node) -> int

        :type node: OCC.wrapper.SMDS.SMDS_MeshNode
        :rtype: int

        """
        return _SMDS.SMDS_FaceOfNodes_GetNodeIndex(self, *args)


    def IsPoly(self, *args):
        """
        IsPoly(SMDS_FaceOfNodes self) -> bool

        :rtype: bool

        """
        return _SMDS.SMDS_FaceOfNodes_IsPoly(self, *args)


    def IsQuadratic(self, *args):
        """
        IsQuadratic(SMDS_FaceOfNodes self) -> bool

        :rtype: bool

        """
        return _SMDS.SMDS_FaceOfNodes_IsQuadratic(self, *args)


    def nodesIterator(self, *args):
        """
        nodesIterator(SMDS_FaceOfNodes self) -> shared_ptr_SMDS_Iterator_SMDS_MeshElement

        :rtype: OCC.wrapper.SMDS.SMDS_ElemIteratorPtr

        """
        return _SMDS.SMDS_FaceOfNodes_nodesIterator(self, *args)


    def nodeIterator(self, *args):
        """
        nodeIterator(SMDS_FaceOfNodes self) -> shared_ptr_SMDS_Iterator_SMDS_MeshNode

        :rtype: OCC.wrapper.SMDS.SMDS_NodeIteratorPtr

        """
        return _SMDS.SMDS_FaceOfNodes_nodeIterator(self, *args)


    def GetNode(self, *args):
        """
        GetNode(SMDS_FaceOfNodes self, int const ind) -> SMDS_MeshNode

        :type ind: const int
        :rtype: OCC.wrapper.SMDS.SMDS_MeshNode

        """
        return _SMDS.SMDS_FaceOfNodes_GetNode(self, *args)


    def GetType(self, *args):
        """
        GetType(SMDS_FaceOfNodes self) -> SMDSAbs_ElementType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_ElementType

        """
        return _SMDS.SMDS_FaceOfNodes_GetType(self, *args)


    def GetEntityType(self, *args):
        """
        GetEntityType(SMDS_FaceOfNodes self) -> SMDSAbs_EntityType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_EntityType

        """
        return _SMDS.SMDS_FaceOfNodes_GetEntityType(self, *args)


    def GetGeomType(self, *args):
        """
        GetGeomType(SMDS_FaceOfNodes self) -> SMDSAbs_GeometryType

        :rtype: OCC.wrapper.SMDSAbs.SMDSAbs_GeometryType

        """
        return _SMDS.SMDS_FaceOfNodes_GetGeomType(self, *args)

    __swig_destroy__ = _SMDS.delete_SMDS_FaceOfNodes
SMDS_FaceOfNodes_swigregister = _SMDS.SMDS_FaceOfNodes_swigregister
SMDS_FaceOfNodes_swigregister(SMDS_FaceOfNodes)

class SMDS_Ptr_SMDS_EdgePosition(object):
    """
    rief Replace "typedef SMDS_Position* SMDS_PositionPtr" by a smart
    pointer allowing implicit casting to derived types; e.g.
    if ( SMDS_FacePositionPtr fPos = node->GetPosition() )
    fPos->SetUParameter(0);
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        rief Replace "typedef SMDS_Position* SMDS_PositionPtr" by a smart
        pointer allowing implicit casting to derived types; e.g.
        if ( SMDS_FacePositionPtr fPos = node->GetPosition() )
        fPos->SetUParameter(0);
        """
        this = _SMDS.new_SMDS_Ptr_SMDS_EdgePosition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def assign(self, *args):
        """
        assign(SMDS_Ptr_SMDS_EdgePosition self, SMDS_Ptr_SMDS_EdgePosition arg2) -> SMDS_Ptr_SMDS_EdgePosition

        :type from: OCC.wrapper.SMDS.SMDS_Ptr
        :rtype: OCC.wrapper.SMDS.SMDS_Ptr

        """
        return _SMDS.SMDS_Ptr_SMDS_EdgePosition_assign(self, *args)


    def IsOwner(self, *args):
        """
        IsOwner(SMDS_Ptr_SMDS_EdgePosition self) -> bool

        :rtype: bool

        """
        return _SMDS.SMDS_Ptr_SMDS_EdgePosition_IsOwner(self, *args)

    __swig_destroy__ = _SMDS.delete_SMDS_Ptr_SMDS_EdgePosition
SMDS_Ptr_SMDS_EdgePosition_swigregister = _SMDS.SMDS_Ptr_SMDS_EdgePosition_swigregister
SMDS_Ptr_SMDS_EdgePosition_swigregister(SMDS_Ptr_SMDS_EdgePosition)


try:
	SMDS_EdgePositionPtr = SMDS_Ptr_SMDS_EdgePosition
except NameError:
	pass # does not exist, probably ignored

class shared_ptr_SMDS_Iterator_SMDS_MeshVolume(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _SMDS.new_shared_ptr_SMDS_Iterator_SMDS_MeshVolume(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshVolume___deref__(self)

    def __ref__(self):
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshVolume___ref__(self)
    __swig_destroy__ = _SMDS.delete_shared_ptr_SMDS_Iterator_SMDS_MeshVolume

    def more(self, *args):
        """
        more(shared_ptr_SMDS_Iterator_SMDS_MeshVolume self) -> bool

        Return true if and only if there are other object in this iterator

        :rtype: bool

        """
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshVolume_more(self, *args)


    def next(self, *args):
        """
        next(shared_ptr_SMDS_Iterator_SMDS_MeshVolume self) -> SMDS_MeshVolume

        Return the current object and step to the next one

        :rtype: VALUE

        """
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshVolume_next(self, *args)


    def remove(self, *args):
        """
        remove(shared_ptr_SMDS_Iterator_SMDS_MeshVolume self)

        Delete the current element and step to the next one


        """
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshVolume_remove(self, *args)

shared_ptr_SMDS_Iterator_SMDS_MeshVolume_swigregister = _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshVolume_swigregister
shared_ptr_SMDS_Iterator_SMDS_MeshVolume_swigregister(shared_ptr_SMDS_Iterator_SMDS_MeshVolume)


try:
	SMDS_VolumeIteratorPtr = shared_ptr_SMDS_Iterator_SMDS_MeshVolume
except NameError:
	pass # does not exist, probably ignored

class shared_ptr_SMDS_Iterator_SMDS_MeshNode(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _SMDS.new_shared_ptr_SMDS_Iterator_SMDS_MeshNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshNode___deref__(self)

    def __ref__(self):
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshNode___ref__(self)
    __swig_destroy__ = _SMDS.delete_shared_ptr_SMDS_Iterator_SMDS_MeshNode

    def more(self, *args):
        """
        more(shared_ptr_SMDS_Iterator_SMDS_MeshNode self) -> bool

        Return true if and only if there are other object in this iterator

        :rtype: bool

        """
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshNode_more(self, *args)


    def next(self, *args):
        """
        next(shared_ptr_SMDS_Iterator_SMDS_MeshNode self) -> SMDS_MeshNode

        Return the current object and step to the next one

        :rtype: VALUE

        """
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshNode_next(self, *args)


    def remove(self, *args):
        """
        remove(shared_ptr_SMDS_Iterator_SMDS_MeshNode self)

        Delete the current element and step to the next one


        """
        return _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshNode_remove(self, *args)

shared_ptr_SMDS_Iterator_SMDS_MeshNode_swigregister = _SMDS.shared_ptr_SMDS_Iterator_SMDS_MeshNode_swigregister
shared_ptr_SMDS_Iterator_SMDS_MeshNode_swigregister(shared_ptr_SMDS_Iterator_SMDS_MeshNode)


try:
	SMDS_NodeIteratorPtr = shared_ptr_SMDS_Iterator_SMDS_MeshNode
except NameError:
	pass # does not exist, probably ignored



