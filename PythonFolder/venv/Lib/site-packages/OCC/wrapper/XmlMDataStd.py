# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XmlMDataStd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XmlMDataStd')
    _XmlMDataStd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XmlMDataStd', [dirname(__file__)])
        except ImportError:
            import _XmlMDataStd
            return _XmlMDataStd
        try:
            _mod = imp.load_module('_XmlMDataStd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XmlMDataStd = swig_import_helper()
    del swig_import_helper
else:
    import _XmlMDataStd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XmlMDataStd.delete_SwigPyIterator

    def value(self):
        return _XmlMDataStd.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _XmlMDataStd.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _XmlMDataStd.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _XmlMDataStd.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _XmlMDataStd.SwigPyIterator_equal(self, x)

    def copy(self):
        return _XmlMDataStd.SwigPyIterator_copy(self)

    def next(self):
        return _XmlMDataStd.SwigPyIterator_next(self)

    def __next__(self):
        return _XmlMDataStd.SwigPyIterator___next__(self)

    def previous(self):
        return _XmlMDataStd.SwigPyIterator_previous(self)

    def advance(self, n):
        return _XmlMDataStd.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _XmlMDataStd.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _XmlMDataStd.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _XmlMDataStd.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _XmlMDataStd.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _XmlMDataStd.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _XmlMDataStd.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XmlMDataStd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XmlMDataStd.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_XmlMDataStd.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _XmlMDataStd.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XmlMDataStd.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlMDataStd.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _XmlMDataStd.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _XmlMDataStd.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _XmlMDataStd.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XmlMDataStd.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_XmlMDataStd.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _XmlMDataStd.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XmlMDataStd.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlMDataStd.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _XmlMDataStd.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _XmlMDataStd.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _XmlMDataStd.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _XmlMDataStd.ptr_to_number(item)
ptr_to_number = _XmlMDataStd.ptr_to_number

def HashCode(*args):
    return _XmlMDataStd.HashCode(*args)
HashCode = _XmlMDataStd.HashCode

def ptr_equal(a, b):
    return _XmlMDataStd.ptr_equal(a, b)
ptr_equal = _XmlMDataStd.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XmlObjMgt
else:
    import XmlObjMgt
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import LDOM
else:
    import LDOM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XmlMDF
else:
    import XmlMDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
class XmlMDataStd_ExpressionDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_ExpressionDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_ExpressionDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_ExpressionDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_ExpressionDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_ExpressionDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_ExpressionDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_ExpressionDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_ExpressionDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_ExpressionDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_ExpressionDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_ExpressionDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_ExpressionDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_ExpressionDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_ExpressionDriver
XmlMDataStd_ExpressionDriver_swigregister = _XmlMDataStd.XmlMDataStd_ExpressionDriver_swigregister
XmlMDataStd_ExpressionDriver_swigregister(XmlMDataStd_ExpressionDriver)

def XmlMDataStd_ExpressionDriver_get_type_name(*args):
    """
    XmlMDataStd_ExpressionDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_ExpressionDriver_get_type_name(*args)

def XmlMDataStd_ExpressionDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_ExpressionDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_ExpressionDriver_get_type_descriptor(*args)

class XmlMDataStd_NameDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_NameDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_NameDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_NameDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_NameDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_NameDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_NameDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_NameDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_NameDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_NameDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_NameDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_NameDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_NameDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_NameDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_NameDriver
XmlMDataStd_NameDriver_swigregister = _XmlMDataStd.XmlMDataStd_NameDriver_swigregister
XmlMDataStd_NameDriver_swigregister(XmlMDataStd_NameDriver)

def XmlMDataStd_NameDriver_get_type_name(*args):
    """
    XmlMDataStd_NameDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_NameDriver_get_type_name(*args)

def XmlMDataStd_NameDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_NameDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_NameDriver_get_type_descriptor(*args)

class XmlMDataStd_TickDriver(XmlMDF.XmlMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_TickDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_TickDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_TickDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_TickDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_TickDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_TickDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_TickDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_TickDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_TickDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_TickDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_TickDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_TickDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_TickDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_TickDriver
XmlMDataStd_TickDriver_swigregister = _XmlMDataStd.XmlMDataStd_TickDriver_swigregister
XmlMDataStd_TickDriver_swigregister(XmlMDataStd_TickDriver)

def XmlMDataStd_TickDriver_get_type_name(*args):
    """
    XmlMDataStd_TickDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_TickDriver_get_type_name(*args)

def XmlMDataStd_TickDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_TickDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_TickDriver_get_type_descriptor(*args)

class XmlMDataStd_BooleanArrayDriver(XmlMDF.XmlMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_BooleanArrayDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_BooleanArrayDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_BooleanArrayDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_BooleanArrayDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_BooleanArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_BooleanArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_BooleanArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_BooleanArrayDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_BooleanArrayDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_BooleanArrayDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_BooleanArrayDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_BooleanArrayDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_BooleanArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_BooleanArrayDriver
XmlMDataStd_BooleanArrayDriver_swigregister = _XmlMDataStd.XmlMDataStd_BooleanArrayDriver_swigregister
XmlMDataStd_BooleanArrayDriver_swigregister(XmlMDataStd_BooleanArrayDriver)

def XmlMDataStd_BooleanArrayDriver_get_type_name(*args):
    """
    XmlMDataStd_BooleanArrayDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_BooleanArrayDriver_get_type_name(*args)

def XmlMDataStd_BooleanArrayDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_BooleanArrayDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_BooleanArrayDriver_get_type_descriptor(*args)

class XmlMDataStd_IntegerDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_IntegerDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_IntegerDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_IntegerDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_IntegerDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_IntegerDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_IntegerDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_IntegerDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_IntegerDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_IntegerDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_IntegerDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_IntegerDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_IntegerDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_IntegerDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_IntegerDriver
XmlMDataStd_IntegerDriver_swigregister = _XmlMDataStd.XmlMDataStd_IntegerDriver_swigregister
XmlMDataStd_IntegerDriver_swigregister(XmlMDataStd_IntegerDriver)

def XmlMDataStd_IntegerDriver_get_type_name(*args):
    """
    XmlMDataStd_IntegerDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_IntegerDriver_get_type_name(*args)

def XmlMDataStd_IntegerDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_IntegerDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_IntegerDriver_get_type_descriptor(*args)

class XmlMDataStd_RelationDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_RelationDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_RelationDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_RelationDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_RelationDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_RelationDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_RelationDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_RelationDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_RelationDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_RelationDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_RelationDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_RelationDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_RelationDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_RelationDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_RelationDriver
XmlMDataStd_RelationDriver_swigregister = _XmlMDataStd.XmlMDataStd_RelationDriver_swigregister
XmlMDataStd_RelationDriver_swigregister(XmlMDataStd_RelationDriver)

def XmlMDataStd_RelationDriver_get_type_name(*args):
    """
    XmlMDataStd_RelationDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_RelationDriver_get_type_name(*args)

def XmlMDataStd_RelationDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_RelationDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_RelationDriver_get_type_descriptor(*args)

class XmlMDataStd_ReferenceArrayDriver(XmlMDF.XmlMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_ReferenceArrayDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_ReferenceArrayDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_ReferenceArrayDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_ReferenceArrayDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_ReferenceArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_ReferenceArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_ReferenceArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_ReferenceArrayDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_ReferenceArrayDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_ReferenceArrayDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_ReferenceArrayDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_ReferenceArrayDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_ReferenceArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_ReferenceArrayDriver
XmlMDataStd_ReferenceArrayDriver_swigregister = _XmlMDataStd.XmlMDataStd_ReferenceArrayDriver_swigregister
XmlMDataStd_ReferenceArrayDriver_swigregister(XmlMDataStd_ReferenceArrayDriver)

def XmlMDataStd_ReferenceArrayDriver_get_type_name(*args):
    """
    XmlMDataStd_ReferenceArrayDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_ReferenceArrayDriver_get_type_name(*args)

def XmlMDataStd_ReferenceArrayDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_ReferenceArrayDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_ReferenceArrayDriver_get_type_descriptor(*args)

class XmlMDataStd_RealDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_RealDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_RealDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_RealDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_RealDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_RealDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_RealDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_RealDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_RealDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_RealDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_RealDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_RealDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_RealDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_RealDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_RealDriver
XmlMDataStd_RealDriver_swigregister = _XmlMDataStd.XmlMDataStd_RealDriver_swigregister
XmlMDataStd_RealDriver_swigregister(XmlMDataStd_RealDriver)

def XmlMDataStd_RealDriver_get_type_name(*args):
    """
    XmlMDataStd_RealDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_RealDriver_get_type_name(*args)

def XmlMDataStd_RealDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_RealDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_RealDriver_get_type_descriptor(*args)

class XmlMDataStd_CommentDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_CommentDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_CommentDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_CommentDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_CommentDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_CommentDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_CommentDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_CommentDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_CommentDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_CommentDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_CommentDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_CommentDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_CommentDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_CommentDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_CommentDriver
XmlMDataStd_CommentDriver_swigregister = _XmlMDataStd.XmlMDataStd_CommentDriver_swigregister
XmlMDataStd_CommentDriver_swigregister(XmlMDataStd_CommentDriver)

def XmlMDataStd_CommentDriver_get_type_name(*args):
    """
    XmlMDataStd_CommentDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_CommentDriver_get_type_name(*args)

def XmlMDataStd_CommentDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_CommentDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_CommentDriver_get_type_descriptor(*args)

class XmlMDataStd_BooleanListDriver(XmlMDF.XmlMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_BooleanListDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_BooleanListDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_BooleanListDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_BooleanListDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_BooleanListDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_BooleanListDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_BooleanListDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_BooleanListDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_BooleanListDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_BooleanListDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_BooleanListDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_BooleanListDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_BooleanListDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_BooleanListDriver
XmlMDataStd_BooleanListDriver_swigregister = _XmlMDataStd.XmlMDataStd_BooleanListDriver_swigregister
XmlMDataStd_BooleanListDriver_swigregister(XmlMDataStd_BooleanListDriver)

def XmlMDataStd_BooleanListDriver_get_type_name(*args):
    """
    XmlMDataStd_BooleanListDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_BooleanListDriver_get_type_name(*args)

def XmlMDataStd_BooleanListDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_BooleanListDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_BooleanListDriver_get_type_descriptor(*args)

class XmlMDataStd_AsciiStringDriver(XmlMDF.XmlMDF_ADriver):
    """TDataStd_AsciiString attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_AsciiStringDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_AsciiStringDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_AsciiStringDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_AsciiStringDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_AsciiStringDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_AsciiStringDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_AsciiStringDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_AsciiStringDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_AsciiStringDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        transient -> persistent (store)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_AsciiStringDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_AsciiStringDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_AsciiStringDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_AsciiStringDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_AsciiStringDriver
XmlMDataStd_AsciiStringDriver_swigregister = _XmlMDataStd.XmlMDataStd_AsciiStringDriver_swigregister
XmlMDataStd_AsciiStringDriver_swigregister(XmlMDataStd_AsciiStringDriver)

def XmlMDataStd_AsciiStringDriver_get_type_name(*args):
    """
    XmlMDataStd_AsciiStringDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_AsciiStringDriver_get_type_name(*args)

def XmlMDataStd_AsciiStringDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_AsciiStringDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_AsciiStringDriver_get_type_descriptor(*args)

class XmlMDataStd_UAttributeDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_UAttributeDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_UAttributeDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_UAttributeDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_UAttributeDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_UAttributeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_UAttributeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_UAttributeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_UAttributeDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_UAttributeDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_UAttributeDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_UAttributeDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_UAttributeDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_UAttributeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_UAttributeDriver
XmlMDataStd_UAttributeDriver_swigregister = _XmlMDataStd.XmlMDataStd_UAttributeDriver_swigregister
XmlMDataStd_UAttributeDriver_swigregister(XmlMDataStd_UAttributeDriver)

def XmlMDataStd_UAttributeDriver_get_type_name(*args):
    """
    XmlMDataStd_UAttributeDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_UAttributeDriver_get_type_name(*args)

def XmlMDataStd_UAttributeDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_UAttributeDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_UAttributeDriver_get_type_descriptor(*args)

class Handle_XmlMDataStd_UAttributeDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_UAttributeDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_UAttributeDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_UAttributeDriver self, XmlMDataStd_UAttributeDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_UAttributeDriver self, Handle_XmlMDataStd_UAttributeDriver theHandle) -> Handle_XmlMDataStd_UAttributeDriver
        assign(Handle_XmlMDataStd_UAttributeDriver self, XmlMDataStd_UAttributeDriver thePtr) -> Handle_XmlMDataStd_UAttributeDriver
        assign(Handle_XmlMDataStd_UAttributeDriver self, Handle_XmlMDataStd_UAttributeDriver theHandle) -> Handle_XmlMDataStd_UAttributeDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_UAttributeDriver self) -> XmlMDataStd_UAttributeDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_UAttributeDriver self) -> XmlMDataStd_UAttributeDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_UAttributeDriver self) -> XmlMDataStd_UAttributeDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_UAttributeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_UAttributeDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_UAttributeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_UAttributeDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_UAttributeDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_UAttributeDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_UAttributeDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_UAttributeDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_UAttributeDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_UAttributeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_UAttributeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_UAttributeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_UAttributeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_UAttributeDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_UAttributeDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_UAttributeDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_UAttributeDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_UAttributeDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver_swigregister
Handle_XmlMDataStd_UAttributeDriver_swigregister(Handle_XmlMDataStd_UAttributeDriver)

def Handle_XmlMDataStd_UAttributeDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver_DownCast(thing)
Handle_XmlMDataStd_UAttributeDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_UAttributeDriver_DownCast

class XmlMDataStd_ByteArrayDriver(XmlMDF.XmlMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_ByteArrayDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_ByteArrayDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_ByteArrayDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_ByteArrayDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_ByteArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_ByteArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_ByteArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_ByteArrayDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_ByteArrayDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_ByteArrayDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_ByteArrayDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_ByteArrayDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_ByteArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_ByteArrayDriver
XmlMDataStd_ByteArrayDriver_swigregister = _XmlMDataStd.XmlMDataStd_ByteArrayDriver_swigregister
XmlMDataStd_ByteArrayDriver_swigregister(XmlMDataStd_ByteArrayDriver)

def XmlMDataStd_ByteArrayDriver_get_type_name(*args):
    """
    XmlMDataStd_ByteArrayDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_ByteArrayDriver_get_type_name(*args)

def XmlMDataStd_ByteArrayDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_ByteArrayDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_ByteArrayDriver_get_type_descriptor(*args)

class Handle_XmlMDataStd_ExpressionDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_ExpressionDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_ExpressionDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_ExpressionDriver self, XmlMDataStd_ExpressionDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_ExpressionDriver self, Handle_XmlMDataStd_ExpressionDriver theHandle) -> Handle_XmlMDataStd_ExpressionDriver
        assign(Handle_XmlMDataStd_ExpressionDriver self, XmlMDataStd_ExpressionDriver thePtr) -> Handle_XmlMDataStd_ExpressionDriver
        assign(Handle_XmlMDataStd_ExpressionDriver self, Handle_XmlMDataStd_ExpressionDriver theHandle) -> Handle_XmlMDataStd_ExpressionDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_ExpressionDriver self) -> XmlMDataStd_ExpressionDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_ExpressionDriver self) -> XmlMDataStd_ExpressionDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_ExpressionDriver self) -> XmlMDataStd_ExpressionDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_ExpressionDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_ExpressionDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_ExpressionDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_ExpressionDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_ExpressionDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_ExpressionDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_ExpressionDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_ExpressionDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_ExpressionDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_ExpressionDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_ExpressionDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_ExpressionDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_ExpressionDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_ExpressionDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_ExpressionDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_ExpressionDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_ExpressionDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_ExpressionDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver_swigregister
Handle_XmlMDataStd_ExpressionDriver_swigregister(Handle_XmlMDataStd_ExpressionDriver)

def Handle_XmlMDataStd_ExpressionDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver_DownCast(thing)
Handle_XmlMDataStd_ExpressionDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_ExpressionDriver_DownCast

class XmlMDataStd_IntegerArrayDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_IntegerArrayDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_IntegerArrayDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_IntegerArrayDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_IntegerArrayDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_IntegerArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_IntegerArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_IntegerArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_IntegerArrayDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_IntegerArrayDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_IntegerArrayDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_IntegerArrayDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_IntegerArrayDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_IntegerArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_IntegerArrayDriver
XmlMDataStd_IntegerArrayDriver_swigregister = _XmlMDataStd.XmlMDataStd_IntegerArrayDriver_swigregister
XmlMDataStd_IntegerArrayDriver_swigregister(XmlMDataStd_IntegerArrayDriver)

def XmlMDataStd_IntegerArrayDriver_get_type_name(*args):
    """
    XmlMDataStd_IntegerArrayDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_IntegerArrayDriver_get_type_name(*args)

def XmlMDataStd_IntegerArrayDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_IntegerArrayDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_IntegerArrayDriver_get_type_descriptor(*args)

class XmlMDataStd_RealListDriver(XmlMDF.XmlMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_RealListDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_RealListDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_RealListDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_RealListDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_RealListDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_RealListDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_RealListDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_RealListDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_RealListDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_RealListDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_RealListDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_RealListDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_RealListDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_RealListDriver
XmlMDataStd_RealListDriver_swigregister = _XmlMDataStd.XmlMDataStd_RealListDriver_swigregister
XmlMDataStd_RealListDriver_swigregister(XmlMDataStd_RealListDriver)

def XmlMDataStd_RealListDriver_get_type_name(*args):
    """
    XmlMDataStd_RealListDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_RealListDriver_get_type_name(*args)

def XmlMDataStd_RealListDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_RealListDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_RealListDriver_get_type_descriptor(*args)

class XmlMDataStd_RealArrayDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_RealArrayDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_RealArrayDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_RealArrayDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_RealArrayDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_RealArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_RealArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_RealArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_RealArrayDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_RealArrayDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_RealArrayDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_RealArrayDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_RealArrayDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_RealArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_RealArrayDriver
XmlMDataStd_RealArrayDriver_swigregister = _XmlMDataStd.XmlMDataStd_RealArrayDriver_swigregister
XmlMDataStd_RealArrayDriver_swigregister(XmlMDataStd_RealArrayDriver)

def XmlMDataStd_RealArrayDriver_get_type_name(*args):
    """
    XmlMDataStd_RealArrayDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_RealArrayDriver_get_type_name(*args)

def XmlMDataStd_RealArrayDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_RealArrayDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_RealArrayDriver_get_type_descriptor(*args)

class XmlMDataStd_NamedDataDriver(XmlMDF.XmlMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_NamedDataDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_NamedDataDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_NamedDataDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_NamedDataDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_NamedDataDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_NamedDataDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_NamedDataDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_NamedDataDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_NamedDataDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_NamedDataDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_NamedDataDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_NamedDataDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_NamedDataDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_NamedDataDriver
XmlMDataStd_NamedDataDriver_swigregister = _XmlMDataStd.XmlMDataStd_NamedDataDriver_swigregister
XmlMDataStd_NamedDataDriver_swigregister(XmlMDataStd_NamedDataDriver)

def XmlMDataStd_NamedDataDriver_get_type_name(*args):
    """
    XmlMDataStd_NamedDataDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_NamedDataDriver_get_type_name(*args)

def XmlMDataStd_NamedDataDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_NamedDataDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_NamedDataDriver_get_type_descriptor(*args)

class XmlMDataStd_NoteBookDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_NoteBookDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_NoteBookDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_NoteBookDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_NoteBookDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_NoteBookDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_NoteBookDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_NoteBookDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_NoteBookDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_NoteBookDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_NoteBookDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_NoteBookDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_NoteBookDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_NoteBookDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_NoteBookDriver
XmlMDataStd_NoteBookDriver_swigregister = _XmlMDataStd.XmlMDataStd_NoteBookDriver_swigregister
XmlMDataStd_NoteBookDriver_swigregister(XmlMDataStd_NoteBookDriver)

def XmlMDataStd_NoteBookDriver_get_type_name(*args):
    """
    XmlMDataStd_NoteBookDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_NoteBookDriver_get_type_name(*args)

def XmlMDataStd_NoteBookDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_NoteBookDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_NoteBookDriver_get_type_descriptor(*args)

class Handle_XmlMDataStd_RealArrayDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_RealArrayDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_RealArrayDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_RealArrayDriver self, XmlMDataStd_RealArrayDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_RealArrayDriver self, Handle_XmlMDataStd_RealArrayDriver theHandle) -> Handle_XmlMDataStd_RealArrayDriver
        assign(Handle_XmlMDataStd_RealArrayDriver self, XmlMDataStd_RealArrayDriver thePtr) -> Handle_XmlMDataStd_RealArrayDriver
        assign(Handle_XmlMDataStd_RealArrayDriver self, Handle_XmlMDataStd_RealArrayDriver theHandle) -> Handle_XmlMDataStd_RealArrayDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_RealArrayDriver self) -> XmlMDataStd_RealArrayDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_RealArrayDriver self) -> XmlMDataStd_RealArrayDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_RealArrayDriver self) -> XmlMDataStd_RealArrayDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_RealArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_RealArrayDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_RealArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_RealArrayDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_RealArrayDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_RealArrayDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_RealArrayDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_RealArrayDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_RealArrayDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_RealArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_RealArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_RealArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_RealArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_RealArrayDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_RealArrayDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_RealArrayDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_RealArrayDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_RealArrayDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver_swigregister
Handle_XmlMDataStd_RealArrayDriver_swigregister(Handle_XmlMDataStd_RealArrayDriver)

def Handle_XmlMDataStd_RealArrayDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver_DownCast(thing)
Handle_XmlMDataStd_RealArrayDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_RealArrayDriver_DownCast

class XmlMDataStd_ReferenceListDriver(XmlMDF.XmlMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_ReferenceListDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_ReferenceListDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_ReferenceListDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_ReferenceListDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_ReferenceListDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_ReferenceListDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_ReferenceListDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_ReferenceListDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_ReferenceListDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_ReferenceListDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_ReferenceListDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_ReferenceListDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_ReferenceListDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_ReferenceListDriver
XmlMDataStd_ReferenceListDriver_swigregister = _XmlMDataStd.XmlMDataStd_ReferenceListDriver_swigregister
XmlMDataStd_ReferenceListDriver_swigregister(XmlMDataStd_ReferenceListDriver)

def XmlMDataStd_ReferenceListDriver_get_type_name(*args):
    """
    XmlMDataStd_ReferenceListDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_ReferenceListDriver_get_type_name(*args)

def XmlMDataStd_ReferenceListDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_ReferenceListDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_ReferenceListDriver_get_type_descriptor(*args)

class Handle_XmlMDataStd_NameDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_NameDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_NameDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_NameDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NameDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_NameDriver self, XmlMDataStd_NameDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NameDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_NameDriver self, Handle_XmlMDataStd_NameDriver theHandle) -> Handle_XmlMDataStd_NameDriver
        assign(Handle_XmlMDataStd_NameDriver self, XmlMDataStd_NameDriver thePtr) -> Handle_XmlMDataStd_NameDriver
        assign(Handle_XmlMDataStd_NameDriver self, Handle_XmlMDataStd_NameDriver theHandle) -> Handle_XmlMDataStd_NameDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NameDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_NameDriver self) -> XmlMDataStd_NameDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NameDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_NameDriver self) -> XmlMDataStd_NameDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NameDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_NameDriver self) -> XmlMDataStd_NameDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NameDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_NameDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_NameDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_NameDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_NameDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_NameDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_NameDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NameDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_NameDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_NameDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NameDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_NameDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NameDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_NameDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_NameDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_NameDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NameDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_NameDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NameDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_NameDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_NameDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_NameDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_NameDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_NameDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NameDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_NameDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_NameDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NameDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_NameDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NameDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_NameDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NameDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_NameDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_NameDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_NameDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NameDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_NameDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_NameDriver_swigregister
Handle_XmlMDataStd_NameDriver_swigregister(Handle_XmlMDataStd_NameDriver)

def Handle_XmlMDataStd_NameDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_NameDriver_DownCast(thing)
Handle_XmlMDataStd_NameDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_NameDriver_DownCast

class Handle_XmlMDataStd_TickDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_TickDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_TickDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_TickDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TickDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_TickDriver self, XmlMDataStd_TickDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TickDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_TickDriver self, Handle_XmlMDataStd_TickDriver theHandle) -> Handle_XmlMDataStd_TickDriver
        assign(Handle_XmlMDataStd_TickDriver self, XmlMDataStd_TickDriver thePtr) -> Handle_XmlMDataStd_TickDriver
        assign(Handle_XmlMDataStd_TickDriver self, Handle_XmlMDataStd_TickDriver theHandle) -> Handle_XmlMDataStd_TickDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TickDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_TickDriver self) -> XmlMDataStd_TickDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TickDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_TickDriver self) -> XmlMDataStd_TickDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TickDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_TickDriver self) -> XmlMDataStd_TickDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TickDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_TickDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_TickDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_TickDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_TickDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_TickDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_TickDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TickDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_TickDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_TickDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TickDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_TickDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TickDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_TickDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_TickDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_TickDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TickDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_TickDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TickDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_TickDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_TickDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_TickDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_TickDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_TickDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TickDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_TickDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_TickDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TickDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_TickDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TickDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_TickDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TickDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_TickDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_TickDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_TickDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TickDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_TickDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_TickDriver_swigregister
Handle_XmlMDataStd_TickDriver_swigregister(Handle_XmlMDataStd_TickDriver)

def Handle_XmlMDataStd_TickDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_TickDriver_DownCast(thing)
Handle_XmlMDataStd_TickDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_TickDriver_DownCast

class Handle_XmlMDataStd_NamedDataDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_NamedDataDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_NamedDataDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_NamedDataDriver self, XmlMDataStd_NamedDataDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_NamedDataDriver self, Handle_XmlMDataStd_NamedDataDriver theHandle) -> Handle_XmlMDataStd_NamedDataDriver
        assign(Handle_XmlMDataStd_NamedDataDriver self, XmlMDataStd_NamedDataDriver thePtr) -> Handle_XmlMDataStd_NamedDataDriver
        assign(Handle_XmlMDataStd_NamedDataDriver self, Handle_XmlMDataStd_NamedDataDriver theHandle) -> Handle_XmlMDataStd_NamedDataDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_NamedDataDriver self) -> XmlMDataStd_NamedDataDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_NamedDataDriver self) -> XmlMDataStd_NamedDataDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_NamedDataDriver self) -> XmlMDataStd_NamedDataDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_NamedDataDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_NamedDataDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_NamedDataDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_NamedDataDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_NamedDataDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_NamedDataDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_NamedDataDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_NamedDataDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_NamedDataDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_NamedDataDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_NamedDataDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_NamedDataDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_NamedDataDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_NamedDataDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_NamedDataDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_NamedDataDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_NamedDataDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_NamedDataDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver_swigregister
Handle_XmlMDataStd_NamedDataDriver_swigregister(Handle_XmlMDataStd_NamedDataDriver)

def Handle_XmlMDataStd_NamedDataDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver_DownCast(thing)
Handle_XmlMDataStd_NamedDataDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_NamedDataDriver_DownCast

class Handle_XmlMDataStd_ReferenceListDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_ReferenceListDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_ReferenceListDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_ReferenceListDriver self, XmlMDataStd_ReferenceListDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_ReferenceListDriver self, Handle_XmlMDataStd_ReferenceListDriver theHandle) -> Handle_XmlMDataStd_ReferenceListDriver
        assign(Handle_XmlMDataStd_ReferenceListDriver self, XmlMDataStd_ReferenceListDriver thePtr) -> Handle_XmlMDataStd_ReferenceListDriver
        assign(Handle_XmlMDataStd_ReferenceListDriver self, Handle_XmlMDataStd_ReferenceListDriver theHandle) -> Handle_XmlMDataStd_ReferenceListDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_ReferenceListDriver self) -> XmlMDataStd_ReferenceListDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_ReferenceListDriver self) -> XmlMDataStd_ReferenceListDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_ReferenceListDriver self) -> XmlMDataStd_ReferenceListDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_ReferenceListDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_ReferenceListDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_ReferenceListDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_ReferenceListDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_ReferenceListDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_ReferenceListDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_ReferenceListDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_ReferenceListDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_ReferenceListDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_ReferenceListDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_ReferenceListDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_ReferenceListDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_ReferenceListDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_ReferenceListDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_ReferenceListDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_ReferenceListDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_ReferenceListDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_ReferenceListDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver_swigregister
Handle_XmlMDataStd_ReferenceListDriver_swigregister(Handle_XmlMDataStd_ReferenceListDriver)

def Handle_XmlMDataStd_ReferenceListDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver_DownCast(thing)
Handle_XmlMDataStd_ReferenceListDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_ReferenceListDriver_DownCast

class XmlMDataStd_TreeNodeDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_TreeNodeDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_TreeNodeDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_TreeNodeDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_TreeNodeDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_TreeNodeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_TreeNodeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_TreeNodeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_TreeNodeDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_TreeNodeDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_TreeNodeDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_TreeNodeDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_TreeNodeDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_TreeNodeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_TreeNodeDriver
XmlMDataStd_TreeNodeDriver_swigregister = _XmlMDataStd.XmlMDataStd_TreeNodeDriver_swigregister
XmlMDataStd_TreeNodeDriver_swigregister(XmlMDataStd_TreeNodeDriver)

def XmlMDataStd_TreeNodeDriver_get_type_name(*args):
    """
    XmlMDataStd_TreeNodeDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_TreeNodeDriver_get_type_name(*args)

def XmlMDataStd_TreeNodeDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_TreeNodeDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_TreeNodeDriver_get_type_descriptor(*args)

class Handle_XmlMDataStd_RealDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_RealDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_RealDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_RealDriver self, XmlMDataStd_RealDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_RealDriver self, Handle_XmlMDataStd_RealDriver theHandle) -> Handle_XmlMDataStd_RealDriver
        assign(Handle_XmlMDataStd_RealDriver self, XmlMDataStd_RealDriver thePtr) -> Handle_XmlMDataStd_RealDriver
        assign(Handle_XmlMDataStd_RealDriver self, Handle_XmlMDataStd_RealDriver theHandle) -> Handle_XmlMDataStd_RealDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_RealDriver self) -> XmlMDataStd_RealDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_RealDriver self) -> XmlMDataStd_RealDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_RealDriver self) -> XmlMDataStd_RealDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_RealDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_RealDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_RealDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_RealDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_RealDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_RealDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_RealDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_RealDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_RealDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_RealDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_RealDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_RealDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_RealDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_RealDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_RealDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_RealDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_RealDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_RealDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_RealDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_RealDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_RealDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_RealDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_RealDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_RealDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_RealDriver_swigregister
Handle_XmlMDataStd_RealDriver_swigregister(Handle_XmlMDataStd_RealDriver)

def Handle_XmlMDataStd_RealDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_RealDriver_DownCast(thing)
Handle_XmlMDataStd_RealDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_RealDriver_DownCast

class Handle_XmlMDataStd_IntegerDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_IntegerDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_IntegerDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_IntegerDriver self, XmlMDataStd_IntegerDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_IntegerDriver self, Handle_XmlMDataStd_IntegerDriver theHandle) -> Handle_XmlMDataStd_IntegerDriver
        assign(Handle_XmlMDataStd_IntegerDriver self, XmlMDataStd_IntegerDriver thePtr) -> Handle_XmlMDataStd_IntegerDriver
        assign(Handle_XmlMDataStd_IntegerDriver self, Handle_XmlMDataStd_IntegerDriver theHandle) -> Handle_XmlMDataStd_IntegerDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_IntegerDriver self) -> XmlMDataStd_IntegerDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_IntegerDriver self) -> XmlMDataStd_IntegerDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_IntegerDriver self) -> XmlMDataStd_IntegerDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_IntegerDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_IntegerDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_IntegerDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_IntegerDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_IntegerDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_IntegerDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_IntegerDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_IntegerDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_IntegerDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_IntegerDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_IntegerDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_IntegerDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_IntegerDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_IntegerDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_IntegerDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_IntegerDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_IntegerDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_IntegerDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_IntegerDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver_swigregister
Handle_XmlMDataStd_IntegerDriver_swigregister(Handle_XmlMDataStd_IntegerDriver)

def Handle_XmlMDataStd_IntegerDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver_DownCast(thing)
Handle_XmlMDataStd_IntegerDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_IntegerDriver_DownCast

class XmlMDataStd_(object):
    """
    Storage and Retrieval drivers for modelling attributes.
    Transient attributes are defined in package TDataStd.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddDrivers(*args):
        """
        AddDrivers(Handle_XmlMDF_ADriverTable aDriverTable, Handle_Message_Messenger anMsgDrv)

        Adds the attribute drivers to <aDriverTable>.

        :type aDriverTable: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable
        :type anMsgDrv: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _XmlMDataStd.XmlMDataStd__AddDrivers(*args)

    AddDrivers = staticmethod(AddDrivers)

    def SetDocumentVersion(*args):
        """
        SetDocumentVersion(Standard_Integer const DocVersion)

        :type DocVersion: int

        """
        return _XmlMDataStd.XmlMDataStd__SetDocumentVersion(*args)

    SetDocumentVersion = staticmethod(SetDocumentVersion)

    def DocumentVersion(*args):
        """
        DocumentVersion() -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.XmlMDataStd__DocumentVersion(*args)

    DocumentVersion = staticmethod(DocumentVersion)

    def __init__(self):
        """
        Storage and Retrieval drivers for modelling attributes.
        Transient attributes are defined in package TDataStd.
        """
        this = _XmlMDataStd.new_XmlMDataStd_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_
XmlMDataStd__swigregister = _XmlMDataStd.XmlMDataStd__swigregister
XmlMDataStd__swigregister(XmlMDataStd_)

def XmlMDataStd__AddDrivers(*args):
    """
    XmlMDataStd__AddDrivers(Handle_XmlMDF_ADriverTable aDriverTable, Handle_Message_Messenger anMsgDrv)

    Adds the attribute drivers to <aDriverTable>.

    :type aDriverTable: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable
    :type anMsgDrv: OCC.wrapper.Message.Handle_Message_Messenger

    """
    return _XmlMDataStd.XmlMDataStd__AddDrivers(*args)

def XmlMDataStd__SetDocumentVersion(*args):
    """
    XmlMDataStd__SetDocumentVersion(Standard_Integer const DocVersion)

    :type DocVersion: int

    """
    return _XmlMDataStd.XmlMDataStd__SetDocumentVersion(*args)

def XmlMDataStd__DocumentVersion(*args):
    """
    XmlMDataStd__DocumentVersion() -> Standard_Integer

    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _XmlMDataStd.XmlMDataStd__DocumentVersion(*args)

class Handle_XmlMDataStd_TreeNodeDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_TreeNodeDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_TreeNodeDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_TreeNodeDriver self, XmlMDataStd_TreeNodeDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_TreeNodeDriver self, Handle_XmlMDataStd_TreeNodeDriver theHandle) -> Handle_XmlMDataStd_TreeNodeDriver
        assign(Handle_XmlMDataStd_TreeNodeDriver self, XmlMDataStd_TreeNodeDriver thePtr) -> Handle_XmlMDataStd_TreeNodeDriver
        assign(Handle_XmlMDataStd_TreeNodeDriver self, Handle_XmlMDataStd_TreeNodeDriver theHandle) -> Handle_XmlMDataStd_TreeNodeDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_TreeNodeDriver self) -> XmlMDataStd_TreeNodeDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_TreeNodeDriver self) -> XmlMDataStd_TreeNodeDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_TreeNodeDriver self) -> XmlMDataStd_TreeNodeDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_TreeNodeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_TreeNodeDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_TreeNodeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_TreeNodeDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_TreeNodeDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_TreeNodeDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_TreeNodeDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_TreeNodeDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_TreeNodeDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_TreeNodeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_TreeNodeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_TreeNodeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_TreeNodeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_TreeNodeDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_TreeNodeDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_TreeNodeDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_TreeNodeDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_TreeNodeDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver_swigregister
Handle_XmlMDataStd_TreeNodeDriver_swigregister(Handle_XmlMDataStd_TreeNodeDriver)

def Handle_XmlMDataStd_TreeNodeDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver_DownCast(thing)
Handle_XmlMDataStd_TreeNodeDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_TreeNodeDriver_DownCast

class XmlMDataStd_IntegerListDriver(XmlMDF.XmlMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_IntegerListDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_IntegerListDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_IntegerListDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_IntegerListDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_IntegerListDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_IntegerListDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_IntegerListDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_IntegerListDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_IntegerListDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_IntegerListDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_IntegerListDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_IntegerListDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_IntegerListDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_IntegerListDriver
XmlMDataStd_IntegerListDriver_swigregister = _XmlMDataStd.XmlMDataStd_IntegerListDriver_swigregister
XmlMDataStd_IntegerListDriver_swigregister(XmlMDataStd_IntegerListDriver)

def XmlMDataStd_IntegerListDriver_get_type_name(*args):
    """
    XmlMDataStd_IntegerListDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_IntegerListDriver_get_type_name(*args)

def XmlMDataStd_IntegerListDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_IntegerListDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_IntegerListDriver_get_type_descriptor(*args)

class Handle_XmlMDataStd_CommentDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_CommentDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_CommentDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_CommentDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_CommentDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_CommentDriver self, XmlMDataStd_CommentDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_CommentDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_CommentDriver self, Handle_XmlMDataStd_CommentDriver theHandle) -> Handle_XmlMDataStd_CommentDriver
        assign(Handle_XmlMDataStd_CommentDriver self, XmlMDataStd_CommentDriver thePtr) -> Handle_XmlMDataStd_CommentDriver
        assign(Handle_XmlMDataStd_CommentDriver self, Handle_XmlMDataStd_CommentDriver theHandle) -> Handle_XmlMDataStd_CommentDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_CommentDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_CommentDriver self) -> XmlMDataStd_CommentDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_CommentDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_CommentDriver self) -> XmlMDataStd_CommentDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_CommentDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_CommentDriver self) -> XmlMDataStd_CommentDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_CommentDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_CommentDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_CommentDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_CommentDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_CommentDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_CommentDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_CommentDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_CommentDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_CommentDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_CommentDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_CommentDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_CommentDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_CommentDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_CommentDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_CommentDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_CommentDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_CommentDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_CommentDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_CommentDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_CommentDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_CommentDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_CommentDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_CommentDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_CommentDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_CommentDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_CommentDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_CommentDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_CommentDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_CommentDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_CommentDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_CommentDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_CommentDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_CommentDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_CommentDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_CommentDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_CommentDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_CommentDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_CommentDriver_swigregister
Handle_XmlMDataStd_CommentDriver_swigregister(Handle_XmlMDataStd_CommentDriver)

def Handle_XmlMDataStd_CommentDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_CommentDriver_DownCast(thing)
Handle_XmlMDataStd_CommentDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_CommentDriver_DownCast

class Handle_XmlMDataStd_AsciiStringDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_AsciiStringDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_AsciiStringDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_AsciiStringDriver self, XmlMDataStd_AsciiStringDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_AsciiStringDriver self, Handle_XmlMDataStd_AsciiStringDriver theHandle) -> Handle_XmlMDataStd_AsciiStringDriver
        assign(Handle_XmlMDataStd_AsciiStringDriver self, XmlMDataStd_AsciiStringDriver thePtr) -> Handle_XmlMDataStd_AsciiStringDriver
        assign(Handle_XmlMDataStd_AsciiStringDriver self, Handle_XmlMDataStd_AsciiStringDriver theHandle) -> Handle_XmlMDataStd_AsciiStringDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_AsciiStringDriver self) -> XmlMDataStd_AsciiStringDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_AsciiStringDriver self) -> XmlMDataStd_AsciiStringDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_AsciiStringDriver self) -> XmlMDataStd_AsciiStringDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_AsciiStringDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_AsciiStringDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_AsciiStringDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_AsciiStringDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_AsciiStringDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        transient -> persistent (store)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_AsciiStringDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_AsciiStringDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_AsciiStringDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_AsciiStringDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_AsciiStringDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_AsciiStringDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_AsciiStringDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_AsciiStringDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_AsciiStringDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_AsciiStringDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_AsciiStringDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_AsciiStringDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_AsciiStringDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver_swigregister
Handle_XmlMDataStd_AsciiStringDriver_swigregister(Handle_XmlMDataStd_AsciiStringDriver)

def Handle_XmlMDataStd_AsciiStringDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver_DownCast(thing)
Handle_XmlMDataStd_AsciiStringDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_AsciiStringDriver_DownCast

class Handle_XmlMDataStd_IntegerListDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_IntegerListDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_IntegerListDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_IntegerListDriver self, XmlMDataStd_IntegerListDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_IntegerListDriver self, Handle_XmlMDataStd_IntegerListDriver theHandle) -> Handle_XmlMDataStd_IntegerListDriver
        assign(Handle_XmlMDataStd_IntegerListDriver self, XmlMDataStd_IntegerListDriver thePtr) -> Handle_XmlMDataStd_IntegerListDriver
        assign(Handle_XmlMDataStd_IntegerListDriver self, Handle_XmlMDataStd_IntegerListDriver theHandle) -> Handle_XmlMDataStd_IntegerListDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_IntegerListDriver self) -> XmlMDataStd_IntegerListDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_IntegerListDriver self) -> XmlMDataStd_IntegerListDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_IntegerListDriver self) -> XmlMDataStd_IntegerListDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_IntegerListDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_IntegerListDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_IntegerListDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_IntegerListDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_IntegerListDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_IntegerListDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_IntegerListDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_IntegerListDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_IntegerListDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_IntegerListDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_IntegerListDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_IntegerListDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_IntegerListDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_IntegerListDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_IntegerListDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_IntegerListDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_IntegerListDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_IntegerListDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver_swigregister
Handle_XmlMDataStd_IntegerListDriver_swigregister(Handle_XmlMDataStd_IntegerListDriver)

def Handle_XmlMDataStd_IntegerListDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver_DownCast(thing)
Handle_XmlMDataStd_IntegerListDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_IntegerListDriver_DownCast

class Handle_XmlMDataStd_RelationDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_RelationDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_RelationDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_RelationDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RelationDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_RelationDriver self, XmlMDataStd_RelationDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RelationDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_RelationDriver self, Handle_XmlMDataStd_RelationDriver theHandle) -> Handle_XmlMDataStd_RelationDriver
        assign(Handle_XmlMDataStd_RelationDriver self, XmlMDataStd_RelationDriver thePtr) -> Handle_XmlMDataStd_RelationDriver
        assign(Handle_XmlMDataStd_RelationDriver self, Handle_XmlMDataStd_RelationDriver theHandle) -> Handle_XmlMDataStd_RelationDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RelationDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_RelationDriver self) -> XmlMDataStd_RelationDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RelationDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_RelationDriver self) -> XmlMDataStd_RelationDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RelationDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_RelationDriver self) -> XmlMDataStd_RelationDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RelationDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_RelationDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_RelationDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_RelationDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_RelationDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_RelationDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_RelationDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RelationDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_RelationDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_RelationDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RelationDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_RelationDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RelationDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_RelationDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_RelationDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_RelationDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RelationDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_RelationDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RelationDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_RelationDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_RelationDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_RelationDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_RelationDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_RelationDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RelationDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_RelationDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_RelationDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RelationDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_RelationDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RelationDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_RelationDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RelationDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_RelationDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_RelationDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_RelationDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RelationDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_RelationDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_RelationDriver_swigregister
Handle_XmlMDataStd_RelationDriver_swigregister(Handle_XmlMDataStd_RelationDriver)

def Handle_XmlMDataStd_RelationDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_RelationDriver_DownCast(thing)
Handle_XmlMDataStd_RelationDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_RelationDriver_DownCast

class Handle_XmlMDataStd_ReferenceArrayDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_ReferenceArrayDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_ReferenceArrayDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_ReferenceArrayDriver self, XmlMDataStd_ReferenceArrayDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_ReferenceArrayDriver self, Handle_XmlMDataStd_ReferenceArrayDriver theHandle) -> Handle_XmlMDataStd_ReferenceArrayDriver
        assign(Handle_XmlMDataStd_ReferenceArrayDriver self, XmlMDataStd_ReferenceArrayDriver thePtr) -> Handle_XmlMDataStd_ReferenceArrayDriver
        assign(Handle_XmlMDataStd_ReferenceArrayDriver self, Handle_XmlMDataStd_ReferenceArrayDriver theHandle) -> Handle_XmlMDataStd_ReferenceArrayDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_ReferenceArrayDriver self) -> XmlMDataStd_ReferenceArrayDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_ReferenceArrayDriver self) -> XmlMDataStd_ReferenceArrayDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_ReferenceArrayDriver self) -> XmlMDataStd_ReferenceArrayDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_ReferenceArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_ReferenceArrayDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_ReferenceArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_ReferenceArrayDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_ReferenceArrayDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_ReferenceArrayDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_ReferenceArrayDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_ReferenceArrayDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_ReferenceArrayDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_ReferenceArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_ReferenceArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_ReferenceArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_ReferenceArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_ReferenceArrayDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_ReferenceArrayDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_ReferenceArrayDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_ReferenceArrayDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_ReferenceArrayDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver_swigregister
Handle_XmlMDataStd_ReferenceArrayDriver_swigregister(Handle_XmlMDataStd_ReferenceArrayDriver)

def Handle_XmlMDataStd_ReferenceArrayDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver_DownCast(thing)
Handle_XmlMDataStd_ReferenceArrayDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_ReferenceArrayDriver_DownCast

class Handle_XmlMDataStd_IntegerArrayDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_IntegerArrayDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_IntegerArrayDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_IntegerArrayDriver self, XmlMDataStd_IntegerArrayDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_IntegerArrayDriver self, Handle_XmlMDataStd_IntegerArrayDriver theHandle) -> Handle_XmlMDataStd_IntegerArrayDriver
        assign(Handle_XmlMDataStd_IntegerArrayDriver self, XmlMDataStd_IntegerArrayDriver thePtr) -> Handle_XmlMDataStd_IntegerArrayDriver
        assign(Handle_XmlMDataStd_IntegerArrayDriver self, Handle_XmlMDataStd_IntegerArrayDriver theHandle) -> Handle_XmlMDataStd_IntegerArrayDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_IntegerArrayDriver self) -> XmlMDataStd_IntegerArrayDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_IntegerArrayDriver self) -> XmlMDataStd_IntegerArrayDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_IntegerArrayDriver self) -> XmlMDataStd_IntegerArrayDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_IntegerArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_IntegerArrayDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_IntegerArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_IntegerArrayDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_IntegerArrayDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_IntegerArrayDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_IntegerArrayDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_IntegerArrayDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_IntegerArrayDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_IntegerArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_IntegerArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_IntegerArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_IntegerArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_IntegerArrayDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_IntegerArrayDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_IntegerArrayDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_IntegerArrayDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_IntegerArrayDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver_swigregister
Handle_XmlMDataStd_IntegerArrayDriver_swigregister(Handle_XmlMDataStd_IntegerArrayDriver)

def Handle_XmlMDataStd_IntegerArrayDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver_DownCast(thing)
Handle_XmlMDataStd_IntegerArrayDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_IntegerArrayDriver_DownCast

class Handle_XmlMDataStd_BooleanArrayDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_BooleanArrayDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_BooleanArrayDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_BooleanArrayDriver self, XmlMDataStd_BooleanArrayDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_BooleanArrayDriver self, Handle_XmlMDataStd_BooleanArrayDriver theHandle) -> Handle_XmlMDataStd_BooleanArrayDriver
        assign(Handle_XmlMDataStd_BooleanArrayDriver self, XmlMDataStd_BooleanArrayDriver thePtr) -> Handle_XmlMDataStd_BooleanArrayDriver
        assign(Handle_XmlMDataStd_BooleanArrayDriver self, Handle_XmlMDataStd_BooleanArrayDriver theHandle) -> Handle_XmlMDataStd_BooleanArrayDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_BooleanArrayDriver self) -> XmlMDataStd_BooleanArrayDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_BooleanArrayDriver self) -> XmlMDataStd_BooleanArrayDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_BooleanArrayDriver self) -> XmlMDataStd_BooleanArrayDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_BooleanArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_BooleanArrayDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_BooleanArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_BooleanArrayDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_BooleanArrayDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_BooleanArrayDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_BooleanArrayDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_BooleanArrayDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_BooleanArrayDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_BooleanArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_BooleanArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_BooleanArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_BooleanArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_BooleanArrayDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_BooleanArrayDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_BooleanArrayDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_BooleanArrayDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_BooleanArrayDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver_swigregister
Handle_XmlMDataStd_BooleanArrayDriver_swigregister(Handle_XmlMDataStd_BooleanArrayDriver)

def Handle_XmlMDataStd_BooleanArrayDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver_DownCast(thing)
Handle_XmlMDataStd_BooleanArrayDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_BooleanArrayDriver_DownCast

class XmlMDataStd_DirectoryDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_DirectoryDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_DirectoryDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_DirectoryDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_DirectoryDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_DirectoryDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_DirectoryDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_DirectoryDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_DirectoryDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_DirectoryDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_DirectoryDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_DirectoryDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_DirectoryDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_DirectoryDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_DirectoryDriver
XmlMDataStd_DirectoryDriver_swigregister = _XmlMDataStd.XmlMDataStd_DirectoryDriver_swigregister
XmlMDataStd_DirectoryDriver_swigregister(XmlMDataStd_DirectoryDriver)

def XmlMDataStd_DirectoryDriver_get_type_name(*args):
    """
    XmlMDataStd_DirectoryDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_DirectoryDriver_get_type_name(*args)

def XmlMDataStd_DirectoryDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_DirectoryDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_DirectoryDriver_get_type_descriptor(*args)

class Handle_XmlMDataStd_DirectoryDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_DirectoryDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_DirectoryDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_DirectoryDriver self, XmlMDataStd_DirectoryDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_DirectoryDriver self, Handle_XmlMDataStd_DirectoryDriver theHandle) -> Handle_XmlMDataStd_DirectoryDriver
        assign(Handle_XmlMDataStd_DirectoryDriver self, XmlMDataStd_DirectoryDriver thePtr) -> Handle_XmlMDataStd_DirectoryDriver
        assign(Handle_XmlMDataStd_DirectoryDriver self, Handle_XmlMDataStd_DirectoryDriver theHandle) -> Handle_XmlMDataStd_DirectoryDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_DirectoryDriver self) -> XmlMDataStd_DirectoryDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_DirectoryDriver self) -> XmlMDataStd_DirectoryDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_DirectoryDriver self) -> XmlMDataStd_DirectoryDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_DirectoryDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_DirectoryDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_DirectoryDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_DirectoryDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_DirectoryDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_DirectoryDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_DirectoryDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_DirectoryDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_DirectoryDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_DirectoryDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_DirectoryDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_DirectoryDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_DirectoryDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_DirectoryDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_DirectoryDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_DirectoryDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_DirectoryDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_DirectoryDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver_swigregister
Handle_XmlMDataStd_DirectoryDriver_swigregister(Handle_XmlMDataStd_DirectoryDriver)

def Handle_XmlMDataStd_DirectoryDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver_DownCast(thing)
Handle_XmlMDataStd_DirectoryDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_DirectoryDriver_DownCast

class Handle_XmlMDataStd_BooleanListDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_BooleanListDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_BooleanListDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_BooleanListDriver self, XmlMDataStd_BooleanListDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_BooleanListDriver self, Handle_XmlMDataStd_BooleanListDriver theHandle) -> Handle_XmlMDataStd_BooleanListDriver
        assign(Handle_XmlMDataStd_BooleanListDriver self, XmlMDataStd_BooleanListDriver thePtr) -> Handle_XmlMDataStd_BooleanListDriver
        assign(Handle_XmlMDataStd_BooleanListDriver self, Handle_XmlMDataStd_BooleanListDriver theHandle) -> Handle_XmlMDataStd_BooleanListDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_BooleanListDriver self) -> XmlMDataStd_BooleanListDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_BooleanListDriver self) -> XmlMDataStd_BooleanListDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_BooleanListDriver self) -> XmlMDataStd_BooleanListDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_BooleanListDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_BooleanListDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_BooleanListDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_BooleanListDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_BooleanListDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_BooleanListDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_BooleanListDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_BooleanListDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_BooleanListDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_BooleanListDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_BooleanListDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_BooleanListDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_BooleanListDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_BooleanListDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_BooleanListDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_BooleanListDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_BooleanListDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_BooleanListDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver_swigregister
Handle_XmlMDataStd_BooleanListDriver_swigregister(Handle_XmlMDataStd_BooleanListDriver)

def Handle_XmlMDataStd_BooleanListDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver_DownCast(thing)
Handle_XmlMDataStd_BooleanListDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_BooleanListDriver_DownCast

class XmlMDataStd_VariableDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_VariableDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_VariableDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_VariableDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_VariableDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_VariableDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_VariableDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_VariableDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_VariableDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_VariableDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_VariableDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_VariableDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_VariableDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_VariableDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_VariableDriver
XmlMDataStd_VariableDriver_swigregister = _XmlMDataStd.XmlMDataStd_VariableDriver_swigregister
XmlMDataStd_VariableDriver_swigregister(XmlMDataStd_VariableDriver)

def XmlMDataStd_VariableDriver_get_type_name(*args):
    """
    XmlMDataStd_VariableDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_VariableDriver_get_type_name(*args)

def XmlMDataStd_VariableDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_VariableDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_VariableDriver_get_type_descriptor(*args)

class Handle_XmlMDataStd_RealListDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_RealListDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealListDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_RealListDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealListDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_RealListDriver self, XmlMDataStd_RealListDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealListDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_RealListDriver self, Handle_XmlMDataStd_RealListDriver theHandle) -> Handle_XmlMDataStd_RealListDriver
        assign(Handle_XmlMDataStd_RealListDriver self, XmlMDataStd_RealListDriver thePtr) -> Handle_XmlMDataStd_RealListDriver
        assign(Handle_XmlMDataStd_RealListDriver self, Handle_XmlMDataStd_RealListDriver theHandle) -> Handle_XmlMDataStd_RealListDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealListDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_RealListDriver self) -> XmlMDataStd_RealListDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealListDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_RealListDriver self) -> XmlMDataStd_RealListDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealListDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_RealListDriver self) -> XmlMDataStd_RealListDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealListDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_RealListDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_RealListDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_RealListDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_RealListDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_RealListDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_RealListDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealListDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_RealListDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_RealListDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealListDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_RealListDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealListDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_RealListDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_RealListDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_RealListDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealListDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_RealListDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealListDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_RealListDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_RealListDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealListDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_RealListDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_RealListDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealListDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_RealListDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_RealListDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealListDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_RealListDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealListDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_RealListDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealListDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_RealListDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealListDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_RealListDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_RealListDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_RealListDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_RealListDriver_swigregister
Handle_XmlMDataStd_RealListDriver_swigregister(Handle_XmlMDataStd_RealListDriver)

def Handle_XmlMDataStd_RealListDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_RealListDriver_DownCast(thing)
Handle_XmlMDataStd_RealListDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_RealListDriver_DownCast

class XmlMDataStd_IntPackedMapDriver(XmlMDF.XmlMDF_ADriver):
    """TDataStd_IntPackedMap attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_IntPackedMapDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_IntPackedMapDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_IntPackedMapDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_IntPackedMapDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_IntPackedMapDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_IntPackedMapDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_IntPackedMapDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_IntPackedMapDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_IntPackedMapDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        transient -> persistent (store)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_IntPackedMapDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_IntPackedMapDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_IntPackedMapDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_IntPackedMapDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_IntPackedMapDriver
XmlMDataStd_IntPackedMapDriver_swigregister = _XmlMDataStd.XmlMDataStd_IntPackedMapDriver_swigregister
XmlMDataStd_IntPackedMapDriver_swigregister(XmlMDataStd_IntPackedMapDriver)

def XmlMDataStd_IntPackedMapDriver_get_type_name(*args):
    """
    XmlMDataStd_IntPackedMapDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_IntPackedMapDriver_get_type_name(*args)

def XmlMDataStd_IntPackedMapDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_IntPackedMapDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_IntPackedMapDriver_get_type_descriptor(*args)

class XmlMDataStd_ExtStringArrayDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_ExtStringArrayDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_ExtStringArrayDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_ExtStringArrayDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_ExtStringArrayDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_ExtStringArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_ExtStringArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_ExtStringArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_ExtStringArrayDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_ExtStringArrayDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_ExtStringArrayDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_ExtStringArrayDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_ExtStringArrayDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_ExtStringArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_ExtStringArrayDriver
XmlMDataStd_ExtStringArrayDriver_swigregister = _XmlMDataStd.XmlMDataStd_ExtStringArrayDriver_swigregister
XmlMDataStd_ExtStringArrayDriver_swigregister(XmlMDataStd_ExtStringArrayDriver)

def XmlMDataStd_ExtStringArrayDriver_get_type_name(*args):
    """
    XmlMDataStd_ExtStringArrayDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_ExtStringArrayDriver_get_type_name(*args)

def XmlMDataStd_ExtStringArrayDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_ExtStringArrayDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_ExtStringArrayDriver_get_type_descriptor(*args)

class Handle_XmlMDataStd_ByteArrayDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_ByteArrayDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_ByteArrayDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_ByteArrayDriver self, XmlMDataStd_ByteArrayDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_ByteArrayDriver self, Handle_XmlMDataStd_ByteArrayDriver theHandle) -> Handle_XmlMDataStd_ByteArrayDriver
        assign(Handle_XmlMDataStd_ByteArrayDriver self, XmlMDataStd_ByteArrayDriver thePtr) -> Handle_XmlMDataStd_ByteArrayDriver
        assign(Handle_XmlMDataStd_ByteArrayDriver self, Handle_XmlMDataStd_ByteArrayDriver theHandle) -> Handle_XmlMDataStd_ByteArrayDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_ByteArrayDriver self) -> XmlMDataStd_ByteArrayDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_ByteArrayDriver self) -> XmlMDataStd_ByteArrayDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_ByteArrayDriver self) -> XmlMDataStd_ByteArrayDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_ByteArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_ByteArrayDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_ByteArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_ByteArrayDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_ByteArrayDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_ByteArrayDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_ByteArrayDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_ByteArrayDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_ByteArrayDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_ByteArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_ByteArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_ByteArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_ByteArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_ByteArrayDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_ByteArrayDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_ByteArrayDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_ByteArrayDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_ByteArrayDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver_swigregister
Handle_XmlMDataStd_ByteArrayDriver_swigregister(Handle_XmlMDataStd_ByteArrayDriver)

def Handle_XmlMDataStd_ByteArrayDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver_DownCast(thing)
Handle_XmlMDataStd_ByteArrayDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_ByteArrayDriver_DownCast

class XmlMDataStd_ExtStringListDriver(XmlMDF.XmlMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataStd_ExtStringListDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataStd_ExtStringListDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataStd_ExtStringListDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataStd_ExtStringListDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataStd.new_XmlMDataStd_ExtStringListDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataStd_ExtStringListDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.XmlMDataStd_ExtStringListDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataStd_ExtStringListDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataStd_ExtStringListDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.XmlMDataStd_ExtStringListDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.XmlMDataStd_ExtStringListDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.XmlMDataStd_ExtStringListDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.XmlMDataStd_ExtStringListDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataStd.delete_XmlMDataStd_ExtStringListDriver
XmlMDataStd_ExtStringListDriver_swigregister = _XmlMDataStd.XmlMDataStd_ExtStringListDriver_swigregister
XmlMDataStd_ExtStringListDriver_swigregister(XmlMDataStd_ExtStringListDriver)

def XmlMDataStd_ExtStringListDriver_get_type_name(*args):
    """
    XmlMDataStd_ExtStringListDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataStd.XmlMDataStd_ExtStringListDriver_get_type_name(*args)

def XmlMDataStd_ExtStringListDriver_get_type_descriptor(*args):
    """
    XmlMDataStd_ExtStringListDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataStd.XmlMDataStd_ExtStringListDriver_get_type_descriptor(*args)

class Handle_XmlMDataStd_VariableDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_VariableDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_VariableDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_VariableDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_VariableDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_VariableDriver self, XmlMDataStd_VariableDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_VariableDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_VariableDriver self, Handle_XmlMDataStd_VariableDriver theHandle) -> Handle_XmlMDataStd_VariableDriver
        assign(Handle_XmlMDataStd_VariableDriver self, XmlMDataStd_VariableDriver thePtr) -> Handle_XmlMDataStd_VariableDriver
        assign(Handle_XmlMDataStd_VariableDriver self, Handle_XmlMDataStd_VariableDriver theHandle) -> Handle_XmlMDataStd_VariableDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_VariableDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_VariableDriver self) -> XmlMDataStd_VariableDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_VariableDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_VariableDriver self) -> XmlMDataStd_VariableDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_VariableDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_VariableDriver self) -> XmlMDataStd_VariableDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_VariableDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_VariableDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_VariableDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_VariableDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_VariableDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_VariableDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_VariableDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_VariableDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_VariableDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_VariableDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_VariableDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_VariableDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_VariableDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_VariableDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_VariableDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_VariableDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_VariableDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_VariableDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_VariableDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_VariableDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_VariableDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_VariableDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_VariableDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_VariableDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_VariableDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_VariableDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_VariableDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_VariableDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_VariableDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_VariableDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_VariableDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_VariableDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_VariableDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_VariableDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_VariableDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_VariableDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_VariableDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_VariableDriver_swigregister
Handle_XmlMDataStd_VariableDriver_swigregister(Handle_XmlMDataStd_VariableDriver)

def Handle_XmlMDataStd_VariableDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_VariableDriver_DownCast(thing)
Handle_XmlMDataStd_VariableDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_VariableDriver_DownCast

class Handle_XmlMDataStd_NoteBookDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_NoteBookDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_NoteBookDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_NoteBookDriver self, XmlMDataStd_NoteBookDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_NoteBookDriver self, Handle_XmlMDataStd_NoteBookDriver theHandle) -> Handle_XmlMDataStd_NoteBookDriver
        assign(Handle_XmlMDataStd_NoteBookDriver self, XmlMDataStd_NoteBookDriver thePtr) -> Handle_XmlMDataStd_NoteBookDriver
        assign(Handle_XmlMDataStd_NoteBookDriver self, Handle_XmlMDataStd_NoteBookDriver theHandle) -> Handle_XmlMDataStd_NoteBookDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_NoteBookDriver self) -> XmlMDataStd_NoteBookDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_NoteBookDriver self) -> XmlMDataStd_NoteBookDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_NoteBookDriver self) -> XmlMDataStd_NoteBookDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_NoteBookDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_NoteBookDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_NoteBookDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_NoteBookDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_NoteBookDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_NoteBookDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_NoteBookDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_NoteBookDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_NoteBookDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_NoteBookDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_NoteBookDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_NoteBookDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_NoteBookDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_NoteBookDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_NoteBookDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_NoteBookDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_NoteBookDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_NoteBookDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver_swigregister
Handle_XmlMDataStd_NoteBookDriver_swigregister(Handle_XmlMDataStd_NoteBookDriver)

def Handle_XmlMDataStd_NoteBookDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver_DownCast(thing)
Handle_XmlMDataStd_NoteBookDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_NoteBookDriver_DownCast

class Handle_XmlMDataStd_ExtStringListDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_ExtStringListDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_ExtStringListDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_ExtStringListDriver self, XmlMDataStd_ExtStringListDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_ExtStringListDriver self, Handle_XmlMDataStd_ExtStringListDriver theHandle) -> Handle_XmlMDataStd_ExtStringListDriver
        assign(Handle_XmlMDataStd_ExtStringListDriver self, XmlMDataStd_ExtStringListDriver thePtr) -> Handle_XmlMDataStd_ExtStringListDriver
        assign(Handle_XmlMDataStd_ExtStringListDriver self, Handle_XmlMDataStd_ExtStringListDriver theHandle) -> Handle_XmlMDataStd_ExtStringListDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_ExtStringListDriver self) -> XmlMDataStd_ExtStringListDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_ExtStringListDriver self) -> XmlMDataStd_ExtStringListDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_ExtStringListDriver self) -> XmlMDataStd_ExtStringListDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_ExtStringListDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_ExtStringListDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_ExtStringListDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_ExtStringListDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_ExtStringListDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_ExtStringListDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_ExtStringListDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_ExtStringListDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_ExtStringListDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_ExtStringListDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_ExtStringListDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_ExtStringListDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_ExtStringListDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_ExtStringListDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_ExtStringListDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_ExtStringListDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_ExtStringListDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_ExtStringListDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver_swigregister
Handle_XmlMDataStd_ExtStringListDriver_swigregister(Handle_XmlMDataStd_ExtStringListDriver)

def Handle_XmlMDataStd_ExtStringListDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver_DownCast(thing)
Handle_XmlMDataStd_ExtStringListDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_ExtStringListDriver_DownCast

class Handle_XmlMDataStd_IntPackedMapDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_IntPackedMapDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_IntPackedMapDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_IntPackedMapDriver self, XmlMDataStd_IntPackedMapDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_IntPackedMapDriver self, Handle_XmlMDataStd_IntPackedMapDriver theHandle) -> Handle_XmlMDataStd_IntPackedMapDriver
        assign(Handle_XmlMDataStd_IntPackedMapDriver self, XmlMDataStd_IntPackedMapDriver thePtr) -> Handle_XmlMDataStd_IntPackedMapDriver
        assign(Handle_XmlMDataStd_IntPackedMapDriver self, Handle_XmlMDataStd_IntPackedMapDriver theHandle) -> Handle_XmlMDataStd_IntPackedMapDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_IntPackedMapDriver self) -> XmlMDataStd_IntPackedMapDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_IntPackedMapDriver self) -> XmlMDataStd_IntPackedMapDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_IntPackedMapDriver self) -> XmlMDataStd_IntPackedMapDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_IntPackedMapDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_IntPackedMapDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_IntPackedMapDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_IntPackedMapDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_IntPackedMapDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        transient -> persistent (store)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_IntPackedMapDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_IntPackedMapDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_IntPackedMapDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_IntPackedMapDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_IntPackedMapDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_IntPackedMapDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_IntPackedMapDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_IntPackedMapDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_IntPackedMapDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_IntPackedMapDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_IntPackedMapDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_IntPackedMapDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_IntPackedMapDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver_swigregister
Handle_XmlMDataStd_IntPackedMapDriver_swigregister(Handle_XmlMDataStd_IntPackedMapDriver)

def Handle_XmlMDataStd_IntPackedMapDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver_DownCast(thing)
Handle_XmlMDataStd_IntPackedMapDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_IntPackedMapDriver_DownCast

class Handle_XmlMDataStd_ExtStringArrayDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataStd_ExtStringArrayDriver self)

        Nullify the handle


        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataStd_ExtStringArrayDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataStd_ExtStringArrayDriver self, XmlMDataStd_ExtStringArrayDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataStd_ExtStringArrayDriver self, Handle_XmlMDataStd_ExtStringArrayDriver theHandle) -> Handle_XmlMDataStd_ExtStringArrayDriver
        assign(Handle_XmlMDataStd_ExtStringArrayDriver self, XmlMDataStd_ExtStringArrayDriver thePtr) -> Handle_XmlMDataStd_ExtStringArrayDriver
        assign(Handle_XmlMDataStd_ExtStringArrayDriver self, Handle_XmlMDataStd_ExtStringArrayDriver theHandle) -> Handle_XmlMDataStd_ExtStringArrayDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataStd_ExtStringArrayDriver self) -> XmlMDataStd_ExtStringArrayDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataStd_ExtStringArrayDriver self) -> XmlMDataStd_ExtStringArrayDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataStd_ExtStringArrayDriver self) -> XmlMDataStd_ExtStringArrayDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataStd.new_Handle_XmlMDataStd_ExtStringArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver_DownCast)
    __swig_destroy__ = _XmlMDataStd.delete_Handle_XmlMDataStd_ExtStringArrayDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataStd_ExtStringArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataStd_ExtStringArrayDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataStd_ExtStringArrayDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataStd_ExtStringArrayDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataStd_ExtStringArrayDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataStd_ExtStringArrayDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataStd_ExtStringArrayDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataStd_ExtStringArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataStd_ExtStringArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataStd_ExtStringArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataStd_ExtStringArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataStd_ExtStringArrayDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataStd_ExtStringArrayDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataStd_ExtStringArrayDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataStd_ExtStringArrayDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataStd_ExtStringArrayDriver_swigregister = _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver_swigregister
Handle_XmlMDataStd_ExtStringArrayDriver_swigregister(Handle_XmlMDataStd_ExtStringArrayDriver)

def Handle_XmlMDataStd_ExtStringArrayDriver_DownCast(thing):
    return _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver_DownCast(thing)
Handle_XmlMDataStd_ExtStringArrayDriver_DownCast = _XmlMDataStd.Handle_XmlMDataStd_ExtStringArrayDriver_DownCast



