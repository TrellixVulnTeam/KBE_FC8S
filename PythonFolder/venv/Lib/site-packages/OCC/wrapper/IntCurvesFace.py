# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IntCurvesFace')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IntCurvesFace')
    _IntCurvesFace = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IntCurvesFace', [dirname(__file__)])
        except ImportError:
            import _IntCurvesFace
            return _IntCurvesFace
        try:
            _mod = imp.load_module('_IntCurvesFace', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IntCurvesFace = swig_import_helper()
    del swig_import_helper
else:
    import _IntCurvesFace
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IntCurvesFace.delete_SwigPyIterator

    def value(self):
        return _IntCurvesFace.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IntCurvesFace.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IntCurvesFace.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IntCurvesFace.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IntCurvesFace.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IntCurvesFace.SwigPyIterator_copy(self)

    def next(self):
        return _IntCurvesFace.SwigPyIterator_next(self)

    def __next__(self):
        return _IntCurvesFace.SwigPyIterator___next__(self)

    def previous(self):
        return _IntCurvesFace.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IntCurvesFace.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IntCurvesFace.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IntCurvesFace.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IntCurvesFace.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IntCurvesFace.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IntCurvesFace.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IntCurvesFace.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _IntCurvesFace.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IntCurvesFace.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_IntCurvesFace.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _IntCurvesFace.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IntCurvesFace.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IntCurvesFace.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _IntCurvesFace.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _IntCurvesFace.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _IntCurvesFace.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IntCurvesFace.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_IntCurvesFace.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _IntCurvesFace.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IntCurvesFace.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IntCurvesFace.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _IntCurvesFace.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _IntCurvesFace.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _IntCurvesFace.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _IntCurvesFace.ptr_to_number(item)
ptr_to_number = _IntCurvesFace.ptr_to_number

def HashCode(*args):
    return _IntCurvesFace.HashCode(*args)
HashCode = _IntCurvesFace.HashCode

def ptr_equal(a, b):
    return _IntCurvesFace.ptr_equal(a, b)
ptr_equal = _IntCurvesFace.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntCurveSurface
else:
    import IntCurveSurface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Intf
else:
    import Intf
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntAna
else:
    import IntAna
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntSurf
else:
    import IntSurf
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
class IntCurvesFace_Intersector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IntCurvesFace_Intersector self, TopoDS_Face F, Standard_Real const aTol, Standard_Boolean const aRestr, Standard_Boolean const UseBToler) -> IntCurvesFace_Intersector

        Load a Face.

        The Tolerance <Tol> is used to determine if the
        first point of the segment is near the face. In
        that case, the parameter of the intersection point
        on the line can be a negative value (greater than -Tol).
        If aRestr = true UV bounding box of face is used to restrict 
        it's underlined surface,
        otherwise surface is not restricted.
        If UseBToler = false then the 2d-point of intersection is classified with null-tolerance
        (relative to face);
        otherwise it's using maximium between input tolerance(aTol) and tolerances of face bounds (edges).

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :type aTol: float
        :type aRestr: bool
        :type UseBToler: bool

        """
        this = _IntCurvesFace.new_IntCurvesFace_Intersector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Perform(self, *args):
        """
        Perform(IntCurvesFace_Intersector self, gp_Lin L, Standard_Real const PInf, Standard_Real const PSup)
        Perform(IntCurvesFace_Intersector self, Handle_Adaptor3d_HCurve HCu, Standard_Real const PInf, Standard_Real const PSup)

        same method for a HCurve from Adaptor3d.
        PInf an PSup can also be - and + INF.

        :type HCu: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve
        :type PInf: float
        :type PSup: float

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_Perform(self, *args)


    def SurfaceType(self, *args):
        """
        SurfaceType(IntCurvesFace_Intersector self) -> GeomAbs_SurfaceType

        Return the surface type

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_SurfaceType

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_SurfaceType(self, *args)


    def IsDone(self, *args):
        """
        IsDone(IntCurvesFace_Intersector self) -> Standard_Boolean

        True is returned when the intersection have been computed.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_IsDone(self, *args)


    def NbPnt(self, *args):
        """
        NbPnt(IntCurvesFace_Intersector self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_NbPnt(self, *args)


    def UParameter(self, *args):
        """
        UParameter(IntCurvesFace_Intersector self, Standard_Integer const I) -> Standard_Real

        Returns the U parameter of the ith intersection point
        on the surface.

        :type I: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_UParameter(self, *args)


    def VParameter(self, *args):
        """
        VParameter(IntCurvesFace_Intersector self, Standard_Integer const I) -> Standard_Real

        Returns the V parameter of the ith intersection point
        on the surface.

        :type I: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_VParameter(self, *args)


    def WParameter(self, *args):
        """
        WParameter(IntCurvesFace_Intersector self, Standard_Integer const I) -> Standard_Real

        Returns the parameter of the ith intersection point
        on the line.

        :type I: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_WParameter(self, *args)


    def Pnt(self, *args):
        """
        Returns the geometric point of the ith intersection
        between the line and the surface.

        :type I: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _IntCurvesFace.IntCurvesFace_Intersector_Pnt(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Transition(self, *args):
        """
        Transition(IntCurvesFace_Intersector self, Standard_Integer const I) -> IntCurveSurface_TransitionOnCurve

        Returns the ith transition of the line on the surface.

        :type I: int
        :rtype: OCC.wrapper.IntCurveSurface.IntCurveSurface_TransitionOnCurve

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_Transition(self, *args)


    def State(self, *args):
        """
        State(IntCurvesFace_Intersector self, Standard_Integer const I) -> TopAbs_State

        Returns the ith state of the point on the face.
        The values can be either TopAbs_IN
        ( the point is in the face)
        or TopAbs_ON
        ( the point is on a boudary of the face).

        :type I: int
        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_State(self, *args)


    def IsParallel(self, *args):
        """
        IsParallel(IntCurvesFace_Intersector self) -> Standard_Boolean

        Returns true if curve is parallel or belongs face surface
        This case is recognized only for some pairs 
        of analytical curves and surfaces (plane - line, ...)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_IsParallel(self, *args)


    def Face(self, *args):
        """
        Returns the significant face used to determine
        the intersection.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _IntCurvesFace.IntCurvesFace_Intersector_Face(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ClassifyUVPoint(self, *args):
        """
        ClassifyUVPoint(IntCurvesFace_Intersector self, gp_Pnt2d Puv) -> TopAbs_State

        :type Puv: OCC.wrapper.gp.gp_Pnt2d
        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_ClassifyUVPoint(self, *args)


    def Bounding(self, *args):
        """
        Bounding(IntCurvesFace_Intersector self) -> Bnd_Box

        :rtype: OCC.wrapper.Bnd.Bnd_Box

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_Bounding(self, *args)


    def SetUseBoundToler(self, *args):
        """
        SetUseBoundToler(IntCurvesFace_Intersector self, Standard_Boolean UseBToler)

        Sets the boundary tolerance flag

        :type UseBToler: bool

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_SetUseBoundToler(self, *args)


    def GetUseBoundToler(self, *args):
        """
        GetUseBoundToler(IntCurvesFace_Intersector self) -> Standard_Boolean

        Returns the boundary tolerance flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IntCurvesFace.IntCurvesFace_Intersector_GetUseBoundToler(self, *args)


    def Destroy(self, *args):
        """Destroy(IntCurvesFace_Intersector self)"""
        return _IntCurvesFace.IntCurvesFace_Intersector_Destroy(self, *args)

    __swig_destroy__ = _IntCurvesFace.delete_IntCurvesFace_Intersector
IntCurvesFace_Intersector_swigregister = _IntCurvesFace.IntCurvesFace_Intersector_swigregister
IntCurvesFace_Intersector_swigregister(IntCurvesFace_Intersector)

class IntCurvesFace_ShapeIntersector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """__init__(IntCurvesFace_ShapeIntersector self) -> IntCurvesFace_ShapeIntersector"""
        this = _IntCurvesFace.new_IntCurvesFace_ShapeIntersector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Load(self, *args):
        """
        Load(IntCurvesFace_ShapeIntersector self, TopoDS_Shape Sh, Standard_Real const Tol)

        :type Sh: OCC.wrapper.TopoDS.TopoDS_Shape
        :type Tol: float

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_Load(self, *args)


    def PerformNearest(self, *args):
        """
        PerformNearest(IntCurvesFace_ShapeIntersector self, gp_Lin L, Standard_Real const PInf, Standard_Real const PSup)

        Perform the intersection between the
        segment L and the loaded shape.

        PInf is the smallest parameter on the line
        PSup is the highest  parammter on the line

        For an infinite line PInf and PSup can be
        +/- RealLast.

        :type L: OCC.wrapper.gp.gp_Lin
        :type PInf: float
        :type PSup: float

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_PerformNearest(self, *args)


    def Perform(self, *args):
        """
        Perform(IntCurvesFace_ShapeIntersector self, gp_Lin L, Standard_Real const PInf, Standard_Real const PSup)
        Perform(IntCurvesFace_ShapeIntersector self, Handle_Adaptor3d_HCurve HCu, Standard_Real const PInf, Standard_Real const PSup)

        same method for a HCurve from Adaptor3d.
        PInf an PSup can also be - and + INF.

        :type HCu: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve
        :type PInf: float
        :type PSup: float

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_Perform(self, *args)


    def IsDone(self, *args):
        """
        IsDone(IntCurvesFace_ShapeIntersector self) -> Standard_Boolean

        True is returned when the intersection have been computed.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_IsDone(self, *args)


    def NbPnt(self, *args):
        """
        NbPnt(IntCurvesFace_ShapeIntersector self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_NbPnt(self, *args)


    def UParameter(self, *args):
        """
        UParameter(IntCurvesFace_ShapeIntersector self, Standard_Integer const I) -> Standard_Real

        Returns the U parameter of the ith intersection point
        on the surface.

        :type I: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_UParameter(self, *args)


    def VParameter(self, *args):
        """
        VParameter(IntCurvesFace_ShapeIntersector self, Standard_Integer const I) -> Standard_Real

        Returns the V parameter of the ith intersection point
        on the surface.

        :type I: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_VParameter(self, *args)


    def WParameter(self, *args):
        """
        WParameter(IntCurvesFace_ShapeIntersector self, Standard_Integer const I) -> Standard_Real

        Returns the parameter of the ith intersection point
        on the line.

        :type I: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_WParameter(self, *args)


    def Pnt(self, *args):
        """
        Returns the geometric point of the ith intersection
        between the line and the surface.

        :type I: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _IntCurvesFace.IntCurvesFace_ShapeIntersector_Pnt(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Transition(self, *args):
        """
        Transition(IntCurvesFace_ShapeIntersector self, Standard_Integer const I) -> IntCurveSurface_TransitionOnCurve

        Returns the ith transition of the line on the surface.

        :type I: int
        :rtype: OCC.wrapper.IntCurveSurface.IntCurveSurface_TransitionOnCurve

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_Transition(self, *args)


    def State(self, *args):
        """
        State(IntCurvesFace_ShapeIntersector self, Standard_Integer const I) -> TopAbs_State

        Returns the ith state of the point on the face.
        The values can be either TopAbs_IN
        ( the point is in the face)
        or TopAbs_ON
        ( the point is on a boudary of the face).

        :type I: int
        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_State(self, *args)


    def Face(self, *args):
        """
        Returns the significant face used to determine
        the intersection.

        :type I: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _IntCurvesFace.IntCurvesFace_ShapeIntersector_Face(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SortResult(self, *args):
        """
        SortResult(IntCurvesFace_ShapeIntersector self)

        Internal method. Sort the result on the Curve
        parameter.


        """
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_SortResult(self, *args)


    def Destroy(self, *args):
        """Destroy(IntCurvesFace_ShapeIntersector self)"""
        return _IntCurvesFace.IntCurvesFace_ShapeIntersector_Destroy(self, *args)

    __swig_destroy__ = _IntCurvesFace.delete_IntCurvesFace_ShapeIntersector
IntCurvesFace_ShapeIntersector_swigregister = _IntCurvesFace.IntCurvesFace_ShapeIntersector_swigregister
IntCurvesFace_ShapeIntersector_swigregister(IntCurvesFace_ShapeIntersector)



