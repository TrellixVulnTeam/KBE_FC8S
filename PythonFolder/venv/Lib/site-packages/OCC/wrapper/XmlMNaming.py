# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XmlMNaming')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XmlMNaming')
    _XmlMNaming = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XmlMNaming', [dirname(__file__)])
        except ImportError:
            import _XmlMNaming
            return _XmlMNaming
        try:
            _mod = imp.load_module('_XmlMNaming', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XmlMNaming = swig_import_helper()
    del swig_import_helper
else:
    import _XmlMNaming
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XmlMNaming.delete_SwigPyIterator

    def value(self):
        return _XmlMNaming.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _XmlMNaming.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _XmlMNaming.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _XmlMNaming.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _XmlMNaming.SwigPyIterator_equal(self, x)

    def copy(self):
        return _XmlMNaming.SwigPyIterator_copy(self)

    def next(self):
        return _XmlMNaming.SwigPyIterator_next(self)

    def __next__(self):
        return _XmlMNaming.SwigPyIterator___next__(self)

    def previous(self):
        return _XmlMNaming.SwigPyIterator_previous(self)

    def advance(self, n):
        return _XmlMNaming.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _XmlMNaming.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _XmlMNaming.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _XmlMNaming.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _XmlMNaming.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _XmlMNaming.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _XmlMNaming.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XmlMNaming.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XmlMNaming.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_XmlMNaming.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _XmlMNaming.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XmlMNaming.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlMNaming.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _XmlMNaming.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _XmlMNaming.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _XmlMNaming.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XmlMNaming.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_XmlMNaming.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _XmlMNaming.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XmlMNaming.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlMNaming.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _XmlMNaming.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _XmlMNaming.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _XmlMNaming.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _XmlMNaming.ptr_to_number(item)
ptr_to_number = _XmlMNaming.ptr_to_number

def HashCode(*args):
    return _XmlMNaming.HashCode(*args)
HashCode = _XmlMNaming.HashCode

def ptr_equal(a, b):
    return _XmlMNaming.ptr_equal(a, b)
ptr_equal = _XmlMNaming.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XmlObjMgt
else:
    import XmlObjMgt
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import LDOM
else:
    import LDOM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XmlMDF
else:
    import XmlMDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
class XmlMNaming_(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddDrivers(*args):
        """
        AddDrivers(Handle_XmlMDF_ADriverTable aDriverTable, Handle_Message_Messenger aMessageDriver)

        Adds the attribute drivers to <aDriverTable>.

        :type aDriverTable: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable
        :type aMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _XmlMNaming.XmlMNaming__AddDrivers(*args)

    AddDrivers = staticmethod(AddDrivers)

    def SetDocumentVersion(*args):
        """
        SetDocumentVersion(Standard_Integer const DocVersion)

        :type DocVersion: int

        """
        return _XmlMNaming.XmlMNaming__SetDocumentVersion(*args)

    SetDocumentVersion = staticmethod(SetDocumentVersion)

    def DocumentVersion(*args):
        """
        DocumentVersion() -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMNaming.XmlMNaming__DocumentVersion(*args)

    DocumentVersion = staticmethod(DocumentVersion)

    def __init__(self):
        this = _XmlMNaming.new_XmlMNaming_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlMNaming.delete_XmlMNaming_
XmlMNaming__swigregister = _XmlMNaming.XmlMNaming__swigregister
XmlMNaming__swigregister(XmlMNaming_)

def XmlMNaming__AddDrivers(*args):
    """
    XmlMNaming__AddDrivers(Handle_XmlMDF_ADriverTable aDriverTable, Handle_Message_Messenger aMessageDriver)

    Adds the attribute drivers to <aDriverTable>.

    :type aDriverTable: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable
    :type aMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

    """
    return _XmlMNaming.XmlMNaming__AddDrivers(*args)

def XmlMNaming__SetDocumentVersion(*args):
    """
    XmlMNaming__SetDocumentVersion(Standard_Integer const DocVersion)

    :type DocVersion: int

    """
    return _XmlMNaming.XmlMNaming__SetDocumentVersion(*args)

def XmlMNaming__DocumentVersion(*args):
    """
    XmlMNaming__DocumentVersion() -> Standard_Integer

    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _XmlMNaming.XmlMNaming__DocumentVersion(*args)

class XmlMNaming_NamingDriver(XmlMDF.XmlMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMNaming_NamingDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMNaming_NamingDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMNaming_NamingDriver self, Handle_Message_Messenger aMessageDriver) -> XmlMNaming_NamingDriver

        :type aMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMNaming.new_XmlMNaming_NamingDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMNaming_NamingDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMNaming.XmlMNaming_NamingDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMNaming_NamingDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(XmlMNaming_NamingDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMNaming.XmlMNaming_NamingDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMNaming.XmlMNaming_NamingDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMNaming.XmlMNaming_NamingDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMNaming.XmlMNaming_NamingDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMNaming.delete_XmlMNaming_NamingDriver
XmlMNaming_NamingDriver_swigregister = _XmlMNaming.XmlMNaming_NamingDriver_swigregister
XmlMNaming_NamingDriver_swigregister(XmlMNaming_NamingDriver)

def XmlMNaming_NamingDriver_get_type_name(*args):
    """
    XmlMNaming_NamingDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMNaming.XmlMNaming_NamingDriver_get_type_name(*args)

def XmlMNaming_NamingDriver_get_type_descriptor(*args):
    """
    XmlMNaming_NamingDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMNaming.XmlMNaming_NamingDriver_get_type_descriptor(*args)

class XmlMNaming_NamedShapeDriver(XmlMDF.XmlMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMNaming_NamedShapeDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMNaming_NamedShapeDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMNaming_NamedShapeDriver self, Handle_Message_Messenger aMessageDriver) -> XmlMNaming_NamedShapeDriver

        :type aMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMNaming.new_XmlMNaming_NamedShapeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMNaming_NamedShapeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMNaming.XmlMNaming_NamedShapeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMNaming_NamedShapeDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(XmlMNaming_NamedShapeDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMNaming.XmlMNaming_NamedShapeDriver_Paste(self, *args)


    def ReadShapeSection(self, *args):
        """
        ReadShapeSection(XmlMNaming_NamedShapeDriver self, LDOM_Element anElement)

        Input the shapes from DOM element

        :type anElement: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element

        """
        return _XmlMNaming.XmlMNaming_NamedShapeDriver_ReadShapeSection(self, *args)


    def WriteShapeSection(self, *args):
        """
        WriteShapeSection(XmlMNaming_NamedShapeDriver self, LDOM_Element anElement)

        Output the shapes into DOM element

        :type anElement: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element

        """
        return _XmlMNaming.XmlMNaming_NamedShapeDriver_WriteShapeSection(self, *args)


    def Clear(self, *args):
        """
        Clear(XmlMNaming_NamedShapeDriver self)

        Clear myShapeSet


        """
        return _XmlMNaming.XmlMNaming_NamedShapeDriver_Clear(self, *args)


    def GetShapesLocations(self, *args):
        """
        GetShapesLocations(XmlMNaming_NamedShapeDriver self) -> TopTools_LocationSet

        get the format of topology

        :rtype: OCC.wrapper.TopTools.TopTools_LocationSet

        """
        return _XmlMNaming.XmlMNaming_NamedShapeDriver_GetShapesLocations(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMNaming.XmlMNaming_NamedShapeDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMNaming.XmlMNaming_NamedShapeDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMNaming.XmlMNaming_NamedShapeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMNaming.delete_XmlMNaming_NamedShapeDriver
XmlMNaming_NamedShapeDriver_swigregister = _XmlMNaming.XmlMNaming_NamedShapeDriver_swigregister
XmlMNaming_NamedShapeDriver_swigregister(XmlMNaming_NamedShapeDriver)

def XmlMNaming_NamedShapeDriver_get_type_name(*args):
    """
    XmlMNaming_NamedShapeDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMNaming.XmlMNaming_NamedShapeDriver_get_type_name(*args)

def XmlMNaming_NamedShapeDriver_get_type_descriptor(*args):
    """
    XmlMNaming_NamedShapeDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMNaming.XmlMNaming_NamedShapeDriver_get_type_descriptor(*args)

class XmlMNaming_Shape1(object):
    """
    The XmlMNaming_Shape1 is the Persistent view of a TopoDS_Shape.

    a  Shape1 contains :
    - a reference to a TShape
    - a reference to Location
    - an Orientation.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(XmlMNaming_Shape1 self, LDOM_Document Doc) -> XmlMNaming_Shape1
        __init__(XmlMNaming_Shape1 self, LDOM_Element E) -> XmlMNaming_Shape1

        :type E: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element

        """
        this = _XmlMNaming.new_XmlMNaming_Shape1(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Element(self, *args):
        """
        return myElement

        :rtype: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element

        """
        res = _XmlMNaming.XmlMNaming_Shape1_Element(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TShapeId(self, *args):
        """
        TShapeId(XmlMNaming_Shape1 self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMNaming.XmlMNaming_Shape1_TShapeId(self, *args)


    def LocId(self, *args):
        """
        LocId(XmlMNaming_Shape1 self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMNaming.XmlMNaming_Shape1_LocId(self, *args)


    def Orientation(self, *args):
        """
        Orientation(XmlMNaming_Shape1 self) -> TopAbs_Orientation

        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _XmlMNaming.XmlMNaming_Shape1_Orientation(self, *args)


    def SetShape(self, *args):
        """
        SetShape(XmlMNaming_Shape1 self, Standard_Integer const ID, Standard_Integer const LocID, TopAbs_Orientation const Orient)

        :type ID: int
        :type LocID: int
        :type Orient: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _XmlMNaming.XmlMNaming_Shape1_SetShape(self, *args)


    def SetVertex(self, *args):
        """
        SetVertex(XmlMNaming_Shape1 self, TopoDS_Shape theVertex)

        :type theVertex: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _XmlMNaming.XmlMNaming_Shape1_SetVertex(self, *args)

    __swig_destroy__ = _XmlMNaming.delete_XmlMNaming_Shape1
XmlMNaming_Shape1_swigregister = _XmlMNaming.XmlMNaming_Shape1_swigregister
XmlMNaming_Shape1_swigregister(XmlMNaming_Shape1)

class Handle_XmlMNaming_NamedShapeDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMNaming_NamedShapeDriver self)

        Nullify the handle


        """
        return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMNaming_NamedShapeDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMNaming_NamedShapeDriver self, XmlMNaming_NamedShapeDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMNaming_NamedShapeDriver self, Handle_XmlMNaming_NamedShapeDriver theHandle) -> Handle_XmlMNaming_NamedShapeDriver
        assign(Handle_XmlMNaming_NamedShapeDriver self, XmlMNaming_NamedShapeDriver thePtr) -> Handle_XmlMNaming_NamedShapeDriver
        assign(Handle_XmlMNaming_NamedShapeDriver self, Handle_XmlMNaming_NamedShapeDriver theHandle) -> Handle_XmlMNaming_NamedShapeDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMNaming_NamedShapeDriver self) -> XmlMNaming_NamedShapeDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMNaming_NamedShapeDriver self) -> XmlMNaming_NamedShapeDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMNaming_NamedShapeDriver self) -> XmlMNaming_NamedShapeDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMNaming.new_Handle_XmlMNaming_NamedShapeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_DownCast)
    __swig_destroy__ = _XmlMNaming.delete_Handle_XmlMNaming_NamedShapeDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMNaming_NamedShapeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMNaming_NamedShapeDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(Handle_XmlMNaming_NamedShapeDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_Paste(self, *args)


    def ReadShapeSection(self, *args):
        """
        ReadShapeSection(Handle_XmlMNaming_NamedShapeDriver self, LDOM_Element anElement)

        Input the shapes from DOM element

        :type anElement: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element

        """
        return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_ReadShapeSection(self, *args)


    def WriteShapeSection(self, *args):
        """
        WriteShapeSection(Handle_XmlMNaming_NamedShapeDriver self, LDOM_Element anElement)

        Output the shapes into DOM element

        :type anElement: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element

        """
        return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_WriteShapeSection(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_XmlMNaming_NamedShapeDriver self)

        Clear myShapeSet


        """
        return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_Clear(self, *args)


    def GetShapesLocations(self, *args):
        """
        GetShapesLocations(Handle_XmlMNaming_NamedShapeDriver self) -> TopTools_LocationSet

        get the format of topology

        :rtype: OCC.wrapper.TopTools.TopTools_LocationSet

        """
        return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_GetShapesLocations(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMNaming_NamedShapeDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMNaming_NamedShapeDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMNaming_NamedShapeDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMNaming_NamedShapeDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMNaming_NamedShapeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMNaming_NamedShapeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMNaming_NamedShapeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMNaming_NamedShapeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMNaming_NamedShapeDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMNaming_NamedShapeDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMNaming_NamedShapeDriver self)

        Increments the reference counter of this object


        """
        return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMNaming_NamedShapeDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_DecrementRefCounter(self, *args)

Handle_XmlMNaming_NamedShapeDriver_swigregister = _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_swigregister
Handle_XmlMNaming_NamedShapeDriver_swigregister(Handle_XmlMNaming_NamedShapeDriver)

def Handle_XmlMNaming_NamedShapeDriver_DownCast(thing):
    return _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_DownCast(thing)
Handle_XmlMNaming_NamedShapeDriver_DownCast = _XmlMNaming.Handle_XmlMNaming_NamedShapeDriver_DownCast

class Handle_XmlMNaming_NamingDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMNaming_NamingDriver self)

        Nullify the handle


        """
        return _XmlMNaming.Handle_XmlMNaming_NamingDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMNaming_NamingDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMNaming.Handle_XmlMNaming_NamingDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMNaming_NamingDriver self, XmlMNaming_NamingDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMNaming.Handle_XmlMNaming_NamingDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMNaming_NamingDriver self, Handle_XmlMNaming_NamingDriver theHandle) -> Handle_XmlMNaming_NamingDriver
        assign(Handle_XmlMNaming_NamingDriver self, XmlMNaming_NamingDriver thePtr) -> Handle_XmlMNaming_NamingDriver
        assign(Handle_XmlMNaming_NamingDriver self, Handle_XmlMNaming_NamingDriver theHandle) -> Handle_XmlMNaming_NamingDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMNaming.Handle_XmlMNaming_NamingDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMNaming_NamingDriver self) -> XmlMNaming_NamingDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMNaming.Handle_XmlMNaming_NamingDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMNaming_NamingDriver self) -> XmlMNaming_NamingDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMNaming.Handle_XmlMNaming_NamingDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMNaming_NamingDriver self) -> XmlMNaming_NamingDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMNaming.Handle_XmlMNaming_NamingDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMNaming.Handle_XmlMNaming_NamingDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMNaming.Handle_XmlMNaming_NamingDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMNaming.new_Handle_XmlMNaming_NamingDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMNaming.Handle_XmlMNaming_NamingDriver_DownCast)
    __swig_destroy__ = _XmlMNaming.delete_Handle_XmlMNaming_NamingDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMNaming_NamingDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMNaming.Handle_XmlMNaming_NamingDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMNaming_NamingDriver self, XmlObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher theRelocTable) -> Standard_Boolean
        Paste(Handle_XmlMNaming_NamingDriver self, Handle_TDF_Attribute theSource, XmlObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMNaming.Handle_XmlMNaming_NamingDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMNaming_NamingDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMNaming.Handle_XmlMNaming_NamingDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMNaming.Handle_XmlMNaming_NamingDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMNaming.Handle_XmlMNaming_NamingDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMNaming_NamingDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMNaming.Handle_XmlMNaming_NamingDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMNaming_NamingDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMNaming.Handle_XmlMNaming_NamingDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMNaming.Handle_XmlMNaming_NamingDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMNaming_NamingDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMNaming.Handle_XmlMNaming_NamingDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMNaming_NamingDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMNaming_NamingDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMNaming.Handle_XmlMNaming_NamingDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMNaming_NamingDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMNaming_NamingDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMNaming.Handle_XmlMNaming_NamingDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMNaming_NamingDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMNaming.Handle_XmlMNaming_NamingDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMNaming_NamingDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMNaming.Handle_XmlMNaming_NamingDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMNaming_NamingDriver self)

        Increments the reference counter of this object


        """
        return _XmlMNaming.Handle_XmlMNaming_NamingDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMNaming_NamingDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMNaming.Handle_XmlMNaming_NamingDriver_DecrementRefCounter(self, *args)

Handle_XmlMNaming_NamingDriver_swigregister = _XmlMNaming.Handle_XmlMNaming_NamingDriver_swigregister
Handle_XmlMNaming_NamingDriver_swigregister(Handle_XmlMNaming_NamingDriver)

def Handle_XmlMNaming_NamingDriver_DownCast(thing):
    return _XmlMNaming.Handle_XmlMNaming_NamingDriver_DownCast(thing)
Handle_XmlMNaming_NamingDriver_DownCast = _XmlMNaming.Handle_XmlMNaming_NamingDriver_DownCast



