# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TColgp')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TColgp')
    _TColgp = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TColgp', [dirname(__file__)])
        except ImportError:
            import _TColgp
            return _TColgp
        try:
            _mod = imp.load_module('_TColgp', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TColgp = swig_import_helper()
    del swig_import_helper
else:
    import _TColgp
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TColgp.delete_SwigPyIterator

    def value(self):
        return _TColgp.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TColgp.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TColgp.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TColgp.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TColgp.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TColgp.SwigPyIterator_copy(self)

    def next(self):
        return _TColgp.SwigPyIterator_next(self)

    def __next__(self):
        return _TColgp.SwigPyIterator___next__(self)

    def previous(self):
        return _TColgp.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TColgp.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TColgp.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TColgp.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TColgp.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TColgp.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TColgp.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TColgp.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _TColgp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TColgp.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_TColgp.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _TColgp.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TColgp.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TColgp.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _TColgp.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _TColgp.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _TColgp.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TColgp.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_TColgp.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _TColgp.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TColgp.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TColgp.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _TColgp.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _TColgp.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _TColgp.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _TColgp.ptr_to_number(item)
ptr_to_number = _TColgp.ptr_to_number

def HashCode(*args):
    return _TColgp.HashCode(*args)
HashCode = _TColgp.HashCode

def ptr_equal(a, b):
    return _TColgp.ptr_equal(a, b)
ptr_equal = _TColgp.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
class TColgp_HArray1OfVec(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HArray1OfVec
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HArray1OfVec(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HArray1OfVec self, Standard_Integer const theLower, Standard_Integer const theUpper) -> TColgp_HArray1OfVec
        __init__(TColgp_HArray1OfVec self, Standard_Integer const theLower, Standard_Integer const theUpper, gp_Vec theValue) -> TColgp_HArray1OfVec
        __init__(TColgp_HArray1OfVec self, NCollection_Array1_gp_Vec theOther) -> TColgp_HArray1OfVec

        :type theOther: OCC.wrapper.TColgp.TColgp_Array1OfVec

        """
        this = _TColgp.new_TColgp_HArray1OfVec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfVec

        """
        res = _TColgp.TColgp_HArray1OfVec_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(TColgp_HArray1OfVec self) -> NCollection_Array1_gp_Vec

        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfVec

        """
        return _TColgp.TColgp_HArray1OfVec_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HArray1OfVec_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HArray1OfVec_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HArray1OfVec_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HArray1OfVec
TColgp_HArray1OfVec_swigregister = _TColgp.TColgp_HArray1OfVec_swigregister
TColgp_HArray1OfVec_swigregister(TColgp_HArray1OfVec)

def TColgp_HArray1OfVec_get_type_name(*args):
    """
    TColgp_HArray1OfVec_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HArray1OfVec_get_type_name(*args)

def TColgp_HArray1OfVec_get_type_descriptor(*args):
    """
    TColgp_HArray1OfVec_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HArray1OfVec_get_type_descriptor(*args)

class TColgp_HArray2OfDir2d(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HArray2OfDir2d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HArray2OfDir2d(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HArray2OfDir2d self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp) -> TColgp_HArray2OfDir2d
        __init__(TColgp_HArray2OfDir2d self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp, gp_Dir2d theValue) -> TColgp_HArray2OfDir2d
        __init__(TColgp_HArray2OfDir2d self, NCollection_Array2_gp_Dir2d theOther) -> TColgp_HArray2OfDir2d

        :type theOther: OCC.wrapper.TColgp.TColgp_Array2OfDir2d

        """
        this = _TColgp.new_TColgp_HArray2OfDir2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfDir2d

        """
        res = _TColgp.TColgp_HArray2OfDir2d_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(TColgp_HArray2OfDir2d self) -> NCollection_Array2_gp_Dir2d

        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfDir2d

        """
        return _TColgp.TColgp_HArray2OfDir2d_ChangeArray2(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HArray2OfDir2d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HArray2OfDir2d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HArray2OfDir2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HArray2OfDir2d
TColgp_HArray2OfDir2d_swigregister = _TColgp.TColgp_HArray2OfDir2d_swigregister
TColgp_HArray2OfDir2d_swigregister(TColgp_HArray2OfDir2d)

def TColgp_HArray2OfDir2d_get_type_name(*args):
    """
    TColgp_HArray2OfDir2d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HArray2OfDir2d_get_type_name(*args)

def TColgp_HArray2OfDir2d_get_type_descriptor(*args):
    """
    TColgp_HArray2OfDir2d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HArray2OfDir2d_get_type_descriptor(*args)

class TColgp_HArray1OfVec2d(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HArray1OfVec2d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HArray1OfVec2d(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HArray1OfVec2d self, Standard_Integer const theLower, Standard_Integer const theUpper) -> TColgp_HArray1OfVec2d
        __init__(TColgp_HArray1OfVec2d self, Standard_Integer const theLower, Standard_Integer const theUpper, gp_Vec2d theValue) -> TColgp_HArray1OfVec2d
        __init__(TColgp_HArray1OfVec2d self, NCollection_Array1_gp_Vec2d theOther) -> TColgp_HArray1OfVec2d

        :type theOther: OCC.wrapper.TColgp.TColgp_Array1OfVec2d

        """
        this = _TColgp.new_TColgp_HArray1OfVec2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfVec2d

        """
        res = _TColgp.TColgp_HArray1OfVec2d_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(TColgp_HArray1OfVec2d self) -> NCollection_Array1_gp_Vec2d

        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfVec2d

        """
        return _TColgp.TColgp_HArray1OfVec2d_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HArray1OfVec2d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HArray1OfVec2d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HArray1OfVec2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HArray1OfVec2d
TColgp_HArray1OfVec2d_swigregister = _TColgp.TColgp_HArray1OfVec2d_swigregister
TColgp_HArray1OfVec2d_swigregister(TColgp_HArray1OfVec2d)

def TColgp_HArray1OfVec2d_get_type_name(*args):
    """
    TColgp_HArray1OfVec2d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HArray1OfVec2d_get_type_name(*args)

def TColgp_HArray1OfVec2d_get_type_descriptor(*args):
    """
    TColgp_HArray1OfVec2d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HArray1OfVec2d_get_type_descriptor(*args)

class TColgp_HArray2OfXY(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HArray2OfXY
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HArray2OfXY(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HArray2OfXY self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp) -> TColgp_HArray2OfXY
        __init__(TColgp_HArray2OfXY self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp, gp_XY theValue) -> TColgp_HArray2OfXY
        __init__(TColgp_HArray2OfXY self, NCollection_Array2_gp_XY theOther) -> TColgp_HArray2OfXY

        :type theOther: OCC.wrapper.TColgp.TColgp_Array2OfXY

        """
        this = _TColgp.new_TColgp_HArray2OfXY(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfXY

        """
        res = _TColgp.TColgp_HArray2OfXY_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(TColgp_HArray2OfXY self) -> NCollection_Array2_gp_XY

        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfXY

        """
        return _TColgp.TColgp_HArray2OfXY_ChangeArray2(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HArray2OfXY_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HArray2OfXY_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HArray2OfXY_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HArray2OfXY
TColgp_HArray2OfXY_swigregister = _TColgp.TColgp_HArray2OfXY_swigregister
TColgp_HArray2OfXY_swigregister(TColgp_HArray2OfXY)

def TColgp_HArray2OfXY_get_type_name(*args):
    """
    TColgp_HArray2OfXY_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HArray2OfXY_get_type_name(*args)

def TColgp_HArray2OfXY_get_type_descriptor(*args):
    """
    TColgp_HArray2OfXY_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HArray2OfXY_get_type_descriptor(*args)

class TColgp_HSequenceOfDir(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HSequenceOfDir
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HSequenceOfDir(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HSequenceOfDir self) -> TColgp_HSequenceOfDir
        __init__(TColgp_HSequenceOfDir self, NCollection_Sequence_gp_Dir theOther) -> TColgp_HSequenceOfDir

        :type theOther: OCC.wrapper.TColgp.TColgp_SequenceOfDir

        """
        this = _TColgp.new_TColgp_HSequenceOfDir(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfDir

        """
        res = _TColgp.TColgp_HSequenceOfDir_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(TColgp_HSequenceOfDir self, gp_Dir theItem)
        Append(TColgp_HSequenceOfDir self, NCollection_Sequence_gp_Dir theSequence)

        :type theSequence: OCC.wrapper.TColgp.TColgp_SequenceOfDir

        """
        return _TColgp.TColgp_HSequenceOfDir_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(TColgp_HSequenceOfDir self) -> NCollection_Sequence_gp_Dir

        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfDir

        """
        return _TColgp.TColgp_HSequenceOfDir_ChangeSequence(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HSequenceOfDir_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HSequenceOfDir_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HSequenceOfDir_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HSequenceOfDir
TColgp_HSequenceOfDir_swigregister = _TColgp.TColgp_HSequenceOfDir_swigregister
TColgp_HSequenceOfDir_swigregister(TColgp_HSequenceOfDir)

def TColgp_HSequenceOfDir_get_type_name(*args):
    """
    TColgp_HSequenceOfDir_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HSequenceOfDir_get_type_name(*args)

def TColgp_HSequenceOfDir_get_type_descriptor(*args):
    """
    TColgp_HSequenceOfDir_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HSequenceOfDir_get_type_descriptor(*args)

class TColgp_HArray1OfPnt(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HArray1OfPnt
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HArray1OfPnt(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HArray1OfPnt self, Standard_Integer const theLower, Standard_Integer const theUpper) -> TColgp_HArray1OfPnt
        __init__(TColgp_HArray1OfPnt self, Standard_Integer const theLower, Standard_Integer const theUpper, gp_Pnt theValue) -> TColgp_HArray1OfPnt
        __init__(TColgp_HArray1OfPnt self, NCollection_Array1_gp_Pnt theOther) -> TColgp_HArray1OfPnt

        :type theOther: OCC.wrapper.TColgp.TColgp_Array1OfPnt

        """
        this = _TColgp.new_TColgp_HArray1OfPnt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfPnt

        """
        res = _TColgp.TColgp_HArray1OfPnt_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(TColgp_HArray1OfPnt self) -> NCollection_Array1_gp_Pnt

        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfPnt

        """
        return _TColgp.TColgp_HArray1OfPnt_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HArray1OfPnt_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HArray1OfPnt_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HArray1OfPnt_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HArray1OfPnt
TColgp_HArray1OfPnt_swigregister = _TColgp.TColgp_HArray1OfPnt_swigregister
TColgp_HArray1OfPnt_swigregister(TColgp_HArray1OfPnt)

def TColgp_HArray1OfPnt_get_type_name(*args):
    """
    TColgp_HArray1OfPnt_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HArray1OfPnt_get_type_name(*args)

def TColgp_HArray1OfPnt_get_type_descriptor(*args):
    """
    TColgp_HArray1OfPnt_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HArray1OfPnt_get_type_descriptor(*args)

class TColgp_HSequenceOfDir2d(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HSequenceOfDir2d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HSequenceOfDir2d(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HSequenceOfDir2d self) -> TColgp_HSequenceOfDir2d
        __init__(TColgp_HSequenceOfDir2d self, NCollection_Sequence_gp_Dir2d theOther) -> TColgp_HSequenceOfDir2d

        :type theOther: OCC.wrapper.TColgp.TColgp_SequenceOfDir2d

        """
        this = _TColgp.new_TColgp_HSequenceOfDir2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfDir2d

        """
        res = _TColgp.TColgp_HSequenceOfDir2d_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(TColgp_HSequenceOfDir2d self, gp_Dir2d theItem)
        Append(TColgp_HSequenceOfDir2d self, NCollection_Sequence_gp_Dir2d theSequence)

        :type theSequence: OCC.wrapper.TColgp.TColgp_SequenceOfDir2d

        """
        return _TColgp.TColgp_HSequenceOfDir2d_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(TColgp_HSequenceOfDir2d self) -> NCollection_Sequence_gp_Dir2d

        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfDir2d

        """
        return _TColgp.TColgp_HSequenceOfDir2d_ChangeSequence(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HSequenceOfDir2d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HSequenceOfDir2d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HSequenceOfDir2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HSequenceOfDir2d
TColgp_HSequenceOfDir2d_swigregister = _TColgp.TColgp_HSequenceOfDir2d_swigregister
TColgp_HSequenceOfDir2d_swigregister(TColgp_HSequenceOfDir2d)

def TColgp_HSequenceOfDir2d_get_type_name(*args):
    """
    TColgp_HSequenceOfDir2d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HSequenceOfDir2d_get_type_name(*args)

def TColgp_HSequenceOfDir2d_get_type_descriptor(*args):
    """
    TColgp_HSequenceOfDir2d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HSequenceOfDir2d_get_type_descriptor(*args)

class TColgp_HArray1OfDir(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HArray1OfDir
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HArray1OfDir(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HArray1OfDir self, Standard_Integer const theLower, Standard_Integer const theUpper) -> TColgp_HArray1OfDir
        __init__(TColgp_HArray1OfDir self, Standard_Integer const theLower, Standard_Integer const theUpper, gp_Dir theValue) -> TColgp_HArray1OfDir
        __init__(TColgp_HArray1OfDir self, NCollection_Array1_gp_Dir theOther) -> TColgp_HArray1OfDir

        :type theOther: OCC.wrapper.TColgp.TColgp_Array1OfDir

        """
        this = _TColgp.new_TColgp_HArray1OfDir(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfDir

        """
        res = _TColgp.TColgp_HArray1OfDir_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(TColgp_HArray1OfDir self) -> NCollection_Array1_gp_Dir

        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfDir

        """
        return _TColgp.TColgp_HArray1OfDir_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HArray1OfDir_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HArray1OfDir_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HArray1OfDir_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HArray1OfDir
TColgp_HArray1OfDir_swigregister = _TColgp.TColgp_HArray1OfDir_swigregister
TColgp_HArray1OfDir_swigregister(TColgp_HArray1OfDir)

def TColgp_HArray1OfDir_get_type_name(*args):
    """
    TColgp_HArray1OfDir_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HArray1OfDir_get_type_name(*args)

def TColgp_HArray1OfDir_get_type_descriptor(*args):
    """
    TColgp_HArray1OfDir_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HArray1OfDir_get_type_descriptor(*args)

class TColgp_HArray1OfPnt2d(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HArray1OfPnt2d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HArray1OfPnt2d(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HArray1OfPnt2d self, Standard_Integer const theLower, Standard_Integer const theUpper) -> TColgp_HArray1OfPnt2d
        __init__(TColgp_HArray1OfPnt2d self, Standard_Integer const theLower, Standard_Integer const theUpper, gp_Pnt2d theValue) -> TColgp_HArray1OfPnt2d
        __init__(TColgp_HArray1OfPnt2d self, NCollection_Array1_gp_Pnt2d theOther) -> TColgp_HArray1OfPnt2d

        :type theOther: OCC.wrapper.TColgp.TColgp_Array1OfPnt2d

        """
        this = _TColgp.new_TColgp_HArray1OfPnt2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfPnt2d

        """
        res = _TColgp.TColgp_HArray1OfPnt2d_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(TColgp_HArray1OfPnt2d self) -> NCollection_Array1_gp_Pnt2d

        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfPnt2d

        """
        return _TColgp.TColgp_HArray1OfPnt2d_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HArray1OfPnt2d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HArray1OfPnt2d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HArray1OfPnt2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HArray1OfPnt2d
TColgp_HArray1OfPnt2d_swigregister = _TColgp.TColgp_HArray1OfPnt2d_swigregister
TColgp_HArray1OfPnt2d_swigregister(TColgp_HArray1OfPnt2d)

def TColgp_HArray1OfPnt2d_get_type_name(*args):
    """
    TColgp_HArray1OfPnt2d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HArray1OfPnt2d_get_type_name(*args)

def TColgp_HArray1OfPnt2d_get_type_descriptor(*args):
    """
    TColgp_HArray1OfPnt2d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HArray1OfPnt2d_get_type_descriptor(*args)

class TColgp_HArray2OfPnt2d(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HArray2OfPnt2d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HArray2OfPnt2d(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HArray2OfPnt2d self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp) -> TColgp_HArray2OfPnt2d
        __init__(TColgp_HArray2OfPnt2d self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp, gp_Pnt2d theValue) -> TColgp_HArray2OfPnt2d
        __init__(TColgp_HArray2OfPnt2d self, NCollection_Array2_gp_Pnt2d theOther) -> TColgp_HArray2OfPnt2d

        :type theOther: OCC.wrapper.TColgp.TColgp_Array2OfPnt2d

        """
        this = _TColgp.new_TColgp_HArray2OfPnt2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfPnt2d

        """
        res = _TColgp.TColgp_HArray2OfPnt2d_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(TColgp_HArray2OfPnt2d self) -> NCollection_Array2_gp_Pnt2d

        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfPnt2d

        """
        return _TColgp.TColgp_HArray2OfPnt2d_ChangeArray2(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HArray2OfPnt2d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HArray2OfPnt2d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HArray2OfPnt2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HArray2OfPnt2d
TColgp_HArray2OfPnt2d_swigregister = _TColgp.TColgp_HArray2OfPnt2d_swigregister
TColgp_HArray2OfPnt2d_swigregister(TColgp_HArray2OfPnt2d)

def TColgp_HArray2OfPnt2d_get_type_name(*args):
    """
    TColgp_HArray2OfPnt2d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HArray2OfPnt2d_get_type_name(*args)

def TColgp_HArray2OfPnt2d_get_type_descriptor(*args):
    """
    TColgp_HArray2OfPnt2d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HArray2OfPnt2d_get_type_descriptor(*args)

class TColgp_HArray2OfPnt(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HArray2OfPnt
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HArray2OfPnt(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HArray2OfPnt self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp) -> TColgp_HArray2OfPnt
        __init__(TColgp_HArray2OfPnt self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp, gp_Pnt theValue) -> TColgp_HArray2OfPnt
        __init__(TColgp_HArray2OfPnt self, NCollection_Array2_gp_Pnt theOther) -> TColgp_HArray2OfPnt

        :type theOther: OCC.wrapper.TColgp.TColgp_Array2OfPnt

        """
        this = _TColgp.new_TColgp_HArray2OfPnt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfPnt

        """
        res = _TColgp.TColgp_HArray2OfPnt_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(TColgp_HArray2OfPnt self) -> NCollection_Array2_gp_Pnt

        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfPnt

        """
        return _TColgp.TColgp_HArray2OfPnt_ChangeArray2(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HArray2OfPnt_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HArray2OfPnt_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HArray2OfPnt_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HArray2OfPnt
TColgp_HArray2OfPnt_swigregister = _TColgp.TColgp_HArray2OfPnt_swigregister
TColgp_HArray2OfPnt_swigregister(TColgp_HArray2OfPnt)

def TColgp_HArray2OfPnt_get_type_name(*args):
    """
    TColgp_HArray2OfPnt_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HArray2OfPnt_get_type_name(*args)

def TColgp_HArray2OfPnt_get_type_descriptor(*args):
    """
    TColgp_HArray2OfPnt_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HArray2OfPnt_get_type_descriptor(*args)

class TColgp_HArray2OfLin2d(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HArray2OfLin2d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HArray2OfLin2d(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HArray2OfLin2d self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp) -> TColgp_HArray2OfLin2d
        __init__(TColgp_HArray2OfLin2d self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp, gp_Lin2d theValue) -> TColgp_HArray2OfLin2d
        __init__(TColgp_HArray2OfLin2d self, NCollection_Array2_gp_Lin2d theOther) -> TColgp_HArray2OfLin2d

        :type theOther: OCC.wrapper.TColgp.TColgp_Array2OfLin2d

        """
        this = _TColgp.new_TColgp_HArray2OfLin2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfLin2d

        """
        res = _TColgp.TColgp_HArray2OfLin2d_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(TColgp_HArray2OfLin2d self) -> NCollection_Array2_gp_Lin2d

        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfLin2d

        """
        return _TColgp.TColgp_HArray2OfLin2d_ChangeArray2(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HArray2OfLin2d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HArray2OfLin2d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HArray2OfLin2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HArray2OfLin2d
TColgp_HArray2OfLin2d_swigregister = _TColgp.TColgp_HArray2OfLin2d_swigregister
TColgp_HArray2OfLin2d_swigregister(TColgp_HArray2OfLin2d)

def TColgp_HArray2OfLin2d_get_type_name(*args):
    """
    TColgp_HArray2OfLin2d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HArray2OfLin2d_get_type_name(*args)

def TColgp_HArray2OfLin2d_get_type_descriptor(*args):
    """
    TColgp_HArray2OfLin2d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HArray2OfLin2d_get_type_descriptor(*args)

class TColgp_HArray1OfXY(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HArray1OfXY
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HArray1OfXY(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HArray1OfXY self, Standard_Integer const theLower, Standard_Integer const theUpper) -> TColgp_HArray1OfXY
        __init__(TColgp_HArray1OfXY self, Standard_Integer const theLower, Standard_Integer const theUpper, gp_XY theValue) -> TColgp_HArray1OfXY
        __init__(TColgp_HArray1OfXY self, NCollection_Array1_gp_XY theOther) -> TColgp_HArray1OfXY

        :type theOther: OCC.wrapper.TColgp.TColgp_Array1OfXY

        """
        this = _TColgp.new_TColgp_HArray1OfXY(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfXY

        """
        res = _TColgp.TColgp_HArray1OfXY_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(TColgp_HArray1OfXY self) -> NCollection_Array1_gp_XY

        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfXY

        """
        return _TColgp.TColgp_HArray1OfXY_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HArray1OfXY_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HArray1OfXY_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HArray1OfXY_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HArray1OfXY
TColgp_HArray1OfXY_swigregister = _TColgp.TColgp_HArray1OfXY_swigregister
TColgp_HArray1OfXY_swigregister(TColgp_HArray1OfXY)

def TColgp_HArray1OfXY_get_type_name(*args):
    """
    TColgp_HArray1OfXY_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HArray1OfXY_get_type_name(*args)

def TColgp_HArray1OfXY_get_type_descriptor(*args):
    """
    TColgp_HArray1OfXY_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HArray1OfXY_get_type_descriptor(*args)

class TColgp_HSequenceOfPnt(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HSequenceOfPnt
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HSequenceOfPnt(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HSequenceOfPnt self) -> TColgp_HSequenceOfPnt
        __init__(TColgp_HSequenceOfPnt self, NCollection_Sequence_gp_Pnt theOther) -> TColgp_HSequenceOfPnt

        :type theOther: OCC.wrapper.TColgp.TColgp_SequenceOfPnt

        """
        this = _TColgp.new_TColgp_HSequenceOfPnt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfPnt

        """
        res = _TColgp.TColgp_HSequenceOfPnt_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(TColgp_HSequenceOfPnt self, gp_Pnt theItem)
        Append(TColgp_HSequenceOfPnt self, NCollection_Sequence_gp_Pnt theSequence)

        :type theSequence: OCC.wrapper.TColgp.TColgp_SequenceOfPnt

        """
        return _TColgp.TColgp_HSequenceOfPnt_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(TColgp_HSequenceOfPnt self) -> NCollection_Sequence_gp_Pnt

        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfPnt

        """
        return _TColgp.TColgp_HSequenceOfPnt_ChangeSequence(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HSequenceOfPnt_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HSequenceOfPnt_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HSequenceOfPnt_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HSequenceOfPnt
TColgp_HSequenceOfPnt_swigregister = _TColgp.TColgp_HSequenceOfPnt_swigregister
TColgp_HSequenceOfPnt_swigregister(TColgp_HSequenceOfPnt)

def TColgp_HSequenceOfPnt_get_type_name(*args):
    """
    TColgp_HSequenceOfPnt_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HSequenceOfPnt_get_type_name(*args)

def TColgp_HSequenceOfPnt_get_type_descriptor(*args):
    """
    TColgp_HSequenceOfPnt_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HSequenceOfPnt_get_type_descriptor(*args)

class TColgp_HSequenceOfPnt2d(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HSequenceOfPnt2d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HSequenceOfPnt2d(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HSequenceOfPnt2d self) -> TColgp_HSequenceOfPnt2d
        __init__(TColgp_HSequenceOfPnt2d self, NCollection_Sequence_gp_Pnt2d theOther) -> TColgp_HSequenceOfPnt2d

        :type theOther: OCC.wrapper.TColgp.TColgp_SequenceOfPnt2d

        """
        this = _TColgp.new_TColgp_HSequenceOfPnt2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfPnt2d

        """
        res = _TColgp.TColgp_HSequenceOfPnt2d_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(TColgp_HSequenceOfPnt2d self, gp_Pnt2d theItem)
        Append(TColgp_HSequenceOfPnt2d self, NCollection_Sequence_gp_Pnt2d theSequence)

        :type theSequence: OCC.wrapper.TColgp.TColgp_SequenceOfPnt2d

        """
        return _TColgp.TColgp_HSequenceOfPnt2d_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(TColgp_HSequenceOfPnt2d self) -> NCollection_Sequence_gp_Pnt2d

        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfPnt2d

        """
        return _TColgp.TColgp_HSequenceOfPnt2d_ChangeSequence(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HSequenceOfPnt2d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HSequenceOfPnt2d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HSequenceOfPnt2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HSequenceOfPnt2d
TColgp_HSequenceOfPnt2d_swigregister = _TColgp.TColgp_HSequenceOfPnt2d_swigregister
TColgp_HSequenceOfPnt2d_swigregister(TColgp_HSequenceOfPnt2d)

def TColgp_HSequenceOfPnt2d_get_type_name(*args):
    """
    TColgp_HSequenceOfPnt2d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HSequenceOfPnt2d_get_type_name(*args)

def TColgp_HSequenceOfPnt2d_get_type_descriptor(*args):
    """
    TColgp_HSequenceOfPnt2d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HSequenceOfPnt2d_get_type_descriptor(*args)

class Handle_TColgp_HArray2OfLin2d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HArray2OfLin2d self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HArray2OfLin2d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HArray2OfLin2d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HArray2OfLin2d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HArray2OfLin2d self, TColgp_HArray2OfLin2d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfLin2d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HArray2OfLin2d self, Handle_TColgp_HArray2OfLin2d theHandle) -> Handle_TColgp_HArray2OfLin2d
        assign(Handle_TColgp_HArray2OfLin2d self, TColgp_HArray2OfLin2d thePtr) -> Handle_TColgp_HArray2OfLin2d
        assign(Handle_TColgp_HArray2OfLin2d self, Handle_TColgp_HArray2OfLin2d theHandle) -> Handle_TColgp_HArray2OfLin2d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HArray2OfLin2d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HArray2OfLin2d self) -> TColgp_HArray2OfLin2d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfLin2d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HArray2OfLin2d self) -> TColgp_HArray2OfLin2d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfLin2d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HArray2OfLin2d self) -> TColgp_HArray2OfLin2d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HArray2OfLin2d___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HArray2OfLin2d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HArray2OfLin2d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HArray2OfLin2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HArray2OfLin2d_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HArray2OfLin2d

    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfLin2d

        """
        res = _TColgp.Handle_TColgp_HArray2OfLin2d_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(Handle_TColgp_HArray2OfLin2d self) -> NCollection_Array2_gp_Lin2d

        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfLin2d

        """
        return _TColgp.Handle_TColgp_HArray2OfLin2d_ChangeArray2(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HArray2OfLin2d self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HArray2OfLin2d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray2OfLin2d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray2OfLin2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HArray2OfLin2d self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HArray2OfLin2d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HArray2OfLin2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HArray2OfLin2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray2OfLin2d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HArray2OfLin2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HArray2OfLin2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray2OfLin2d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HArray2OfLin2d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HArray2OfLin2d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HArray2OfLin2d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfLin2d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HArray2OfLin2d self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HArray2OfLin2d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HArray2OfLin2d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfLin2d_DecrementRefCounter(self, *args)

Handle_TColgp_HArray2OfLin2d_swigregister = _TColgp.Handle_TColgp_HArray2OfLin2d_swigregister
Handle_TColgp_HArray2OfLin2d_swigregister(Handle_TColgp_HArray2OfLin2d)

def Handle_TColgp_HArray2OfLin2d_DownCast(thing):
    return _TColgp.Handle_TColgp_HArray2OfLin2d_DownCast(thing)
Handle_TColgp_HArray2OfLin2d_DownCast = _TColgp.Handle_TColgp_HArray2OfLin2d_DownCast

class NCollection_Array2_gp_Dir(object):
    """
    Purpose:   The class Array2 represents bi-dimensional arrays 
    of fixed size known at run time. 
    The ranges of indices are user defined.

    Warning:   Programs clients of such class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.LowerRow(); i <= A.UpperRow(); i++)
    for (j = A.LowerCol(); j <= A.UpperCol(); j++)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Purpose:   The class Array2 represents bi-dimensional arrays 
        of fixed size known at run time. 
        The ranges of indices are user defined.

        Warning:   Programs clients of such class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.LowerRow(); i <= A.UpperRow(); i++)
        for (j = A.LowerCol(); j <= A.UpperCol(); j++)
        """
        this = _TColgp.new_NCollection_Array2_gp_Dir(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array2_gp_Dir self, gp_Dir theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_Dir_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array2_gp_Dir self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Dir_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array2_gp_Dir self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Dir_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(NCollection_Array2_gp_Dir self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Dir_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(NCollection_Array2_gp_Dir self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Dir_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(NCollection_Array2_gp_Dir self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Dir_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(NCollection_Array2_gp_Dir self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Dir_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(NCollection_Array2_gp_Dir self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Dir_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(NCollection_Array2_gp_Dir self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Dir_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array2_gp_Dir self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array2_gp_Dir_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array2_gp_Dir self, NCollection_Array2_gp_Dir theOther) -> NCollection_Array2_gp_Dir

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TColgp.NCollection_Array2_gp_Dir_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array2_gp_Dir self, NCollection_Array2_gp_Dir theOther) -> NCollection_Array2_gp_Dir

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TColgp.NCollection_Array2_gp_Dir_assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array2_gp_Dir_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array2_gp_Dir self, Standard_Integer const theRow, Standard_Integer const theCol) -> gp_Dir

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_Dir_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array2_gp_Dir___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array2_gp_Dir self, Standard_Integer const theRow, Standard_Integer const theCol, gp_Dir theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_Dir_SetValue(self, *args)

    __swig_destroy__ = _TColgp.delete_NCollection_Array2_gp_Dir
NCollection_Array2_gp_Dir_swigregister = _TColgp.NCollection_Array2_gp_Dir_swigregister
NCollection_Array2_gp_Dir_swigregister(NCollection_Array2_gp_Dir)


try:
	TColgp_Array2OfDir = NCollection_Array2_gp_Dir
except NameError:
	pass # does not exist, probably ignored

class Handle_TColgp_HSequenceOfDir2d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HSequenceOfDir2d self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HSequenceOfDir2d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HSequenceOfDir2d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir2d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HSequenceOfDir2d self, TColgp_HSequenceOfDir2d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir2d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HSequenceOfDir2d self, Handle_TColgp_HSequenceOfDir2d theHandle) -> Handle_TColgp_HSequenceOfDir2d
        assign(Handle_TColgp_HSequenceOfDir2d self, TColgp_HSequenceOfDir2d thePtr) -> Handle_TColgp_HSequenceOfDir2d
        assign(Handle_TColgp_HSequenceOfDir2d self, Handle_TColgp_HSequenceOfDir2d theHandle) -> Handle_TColgp_HSequenceOfDir2d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir2d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HSequenceOfDir2d self) -> TColgp_HSequenceOfDir2d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir2d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HSequenceOfDir2d self) -> TColgp_HSequenceOfDir2d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir2d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HSequenceOfDir2d self) -> TColgp_HSequenceOfDir2d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir2d___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HSequenceOfDir2d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HSequenceOfDir2d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HSequenceOfDir2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HSequenceOfDir2d_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HSequenceOfDir2d

    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfDir2d

        """
        res = _TColgp.Handle_TColgp_HSequenceOfDir2d_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(Handle_TColgp_HSequenceOfDir2d self, gp_Dir2d theItem)
        Append(Handle_TColgp_HSequenceOfDir2d self, NCollection_Sequence_gp_Dir2d theSequence)

        :type theSequence: OCC.wrapper.TColgp.TColgp_SequenceOfDir2d

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir2d_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(Handle_TColgp_HSequenceOfDir2d self) -> NCollection_Sequence_gp_Dir2d

        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfDir2d

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir2d_ChangeSequence(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HSequenceOfDir2d self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir2d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HSequenceOfDir2d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HSequenceOfDir2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HSequenceOfDir2d self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HSequenceOfDir2d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HSequenceOfDir2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HSequenceOfDir2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir2d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HSequenceOfDir2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HSequenceOfDir2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir2d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HSequenceOfDir2d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir2d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HSequenceOfDir2d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir2d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HSequenceOfDir2d self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HSequenceOfDir2d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HSequenceOfDir2d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir2d_DecrementRefCounter(self, *args)

Handle_TColgp_HSequenceOfDir2d_swigregister = _TColgp.Handle_TColgp_HSequenceOfDir2d_swigregister
Handle_TColgp_HSequenceOfDir2d_swigregister(Handle_TColgp_HSequenceOfDir2d)

def Handle_TColgp_HSequenceOfDir2d_DownCast(thing):
    return _TColgp.Handle_TColgp_HSequenceOfDir2d_DownCast(thing)
Handle_TColgp_HSequenceOfDir2d_DownCast = _TColgp.Handle_TColgp_HSequenceOfDir2d_DownCast

class NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self) -> NCollection_Sequence< opencascade::handle< TColgp_HArray1OfPnt2d > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self) -> NCollection_Sequence< opencascade::handle< TColgp_HArray1OfPnt2d > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self) -> NCollection_Sequence< opencascade::handle< TColgp_HArray1OfPnt2d > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self) -> NCollection_Sequence< opencascade::handle< TColgp_HArray1OfPnt2d > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _TColgp.new_NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self)

        Reverse sequence


        """
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self, NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d theOther) -> NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self, NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d theOther) -> NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self, NCollection_Sequence< opencascade::handle< TColgp_HArray1OfPnt2d > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self, Handle_TColgp_HArray1OfPnt2d theItem)
        Append(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self, NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self, Handle_TColgp_HArray1OfPnt2d theItem)
        Prepend(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self, NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self, Standard_Integer const theIndex, Handle_TColgp_HArray1OfPnt2d theItem)
        InsertBefore(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self, Standard_Integer const theIndex, NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self, NCollection_Sequence< opencascade::handle< TColgp_HArray1OfPnt2d > >::Iterator & thePosition, Handle_TColgp_HArray1OfPnt2d theItem)
        InsertAfter(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self, Standard_Integer const theIndex, NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d theSeq)
        InsertAfter(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self, Standard_Integer const theIndex, Handle_TColgp_HArray1OfPnt2d theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self, Standard_Integer const theIndex, NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self) -> Handle_TColgp_HArray1OfPnt2d

        First item access

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self) -> Handle_TColgp_HArray1OfPnt2d

        Last item access

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self, Standard_Integer const theIndex) -> Handle_TColgp_HArray1OfPnt2d

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d self, Standard_Integer const theIndex, Handle_TColgp_HArray1OfPnt2d theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_SetValue(self, *args)


    def __iter__(self):
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d___iter__(self)
    __swig_destroy__ = _TColgp.delete_NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d
NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_swigregister = _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_swigregister
NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_swigregister(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d)

def NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_delNode(*args):
    """
    NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_delNode(*args)

class NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _TColgp.new_NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TColgp.delete_NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_IteratorHelper

    def __next__(self):
        return _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_IteratorHelper___next__(self)
NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_IteratorHelper_swigregister = _TColgp.NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_IteratorHelper_swigregister
NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_IteratorHelper_swigregister(NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d_IteratorHelper)


try:
	TColgp_SequenceOfArray1OfPnt2d = NCollection_Sequence_Handle_TColgp_HArray1OfPnt2d
except NameError:
	pass # does not exist, probably ignored

class NCollection_Sequence_gp_Vec2d(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_gp_Vec2d self) -> NCollection_Sequence< gp_Vec2d >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _TColgp.NCollection_Sequence_gp_Vec2d_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_gp_Vec2d self) -> NCollection_Sequence< gp_Vec2d >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _TColgp.NCollection_Sequence_gp_Vec2d_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_gp_Vec2d self) -> NCollection_Sequence< gp_Vec2d >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Sequence_gp_Vec2d_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_gp_Vec2d self) -> NCollection_Sequence< gp_Vec2d >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Sequence_gp_Vec2d_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _TColgp.new_NCollection_Sequence_gp_Vec2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_gp_Vec2d self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Vec2d_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_gp_Vec2d self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Vec2d_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_gp_Vec2d self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Vec2d_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_gp_Vec2d self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Vec2d_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_gp_Vec2d self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Sequence_gp_Vec2d_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_gp_Vec2d self)

        Reverse sequence


        """
        return _TColgp.NCollection_Sequence_gp_Vec2d_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_gp_Vec2d self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _TColgp.NCollection_Sequence_gp_Vec2d_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColgp.NCollection_Sequence_gp_Vec2d_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_gp_Vec2d self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColgp.NCollection_Sequence_gp_Vec2d_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_gp_Vec2d self, NCollection_Sequence_gp_Vec2d theOther) -> NCollection_Sequence_gp_Vec2d

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Vec2d_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_gp_Vec2d self, NCollection_Sequence_gp_Vec2d theOther) -> NCollection_Sequence_gp_Vec2d

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Vec2d_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_gp_Vec2d self, NCollection_Sequence< gp_Vec2d >::Iterator & thePosition)
        Remove(NCollection_Sequence_gp_Vec2d self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_gp_Vec2d self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _TColgp.NCollection_Sequence_gp_Vec2d_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_gp_Vec2d self, gp_Vec2d theItem)
        Append(NCollection_Sequence_gp_Vec2d self, NCollection_Sequence_gp_Vec2d theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Vec2d_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_gp_Vec2d self, gp_Vec2d theItem)
        Prepend(NCollection_Sequence_gp_Vec2d self, NCollection_Sequence_gp_Vec2d theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Vec2d_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_gp_Vec2d self, Standard_Integer const theIndex, gp_Vec2d theItem)
        InsertBefore(NCollection_Sequence_gp_Vec2d self, Standard_Integer const theIndex, NCollection_Sequence_gp_Vec2d theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Vec2d_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_gp_Vec2d self, NCollection_Sequence< gp_Vec2d >::Iterator & thePosition, gp_Vec2d theItem)
        InsertAfter(NCollection_Sequence_gp_Vec2d self, Standard_Integer const theIndex, NCollection_Sequence_gp_Vec2d theSeq)
        InsertAfter(NCollection_Sequence_gp_Vec2d self, Standard_Integer const theIndex, gp_Vec2d theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Vec2d_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_gp_Vec2d self, Standard_Integer const theIndex, NCollection_Sequence_gp_Vec2d theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Vec2d_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Vec2d_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_gp_Vec2d self) -> gp_Vec2d

        First item access

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Vec2d_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Vec2d_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_gp_Vec2d self) -> gp_Vec2d

        Last item access

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Vec2d_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Vec2d_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_gp_Vec2d self, Standard_Integer const theIndex) -> gp_Vec2d

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Vec2d_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Vec2d___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_gp_Vec2d self, Standard_Integer const theIndex, gp_Vec2d theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Vec2d_SetValue(self, *args)


    def __iter__(self):
        return _TColgp.NCollection_Sequence_gp_Vec2d___iter__(self)
    __swig_destroy__ = _TColgp.delete_NCollection_Sequence_gp_Vec2d
NCollection_Sequence_gp_Vec2d_swigregister = _TColgp.NCollection_Sequence_gp_Vec2d_swigregister
NCollection_Sequence_gp_Vec2d_swigregister(NCollection_Sequence_gp_Vec2d)

def NCollection_Sequence_gp_Vec2d_delNode(*args):
    """
    NCollection_Sequence_gp_Vec2d_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _TColgp.NCollection_Sequence_gp_Vec2d_delNode(*args)

class NCollection_Sequence_gp_Vec2d_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _TColgp.new_NCollection_Sequence_gp_Vec2d_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TColgp.delete_NCollection_Sequence_gp_Vec2d_IteratorHelper

    def __next__(self):
        return _TColgp.NCollection_Sequence_gp_Vec2d_IteratorHelper___next__(self)
NCollection_Sequence_gp_Vec2d_IteratorHelper_swigregister = _TColgp.NCollection_Sequence_gp_Vec2d_IteratorHelper_swigregister
NCollection_Sequence_gp_Vec2d_IteratorHelper_swigregister(NCollection_Sequence_gp_Vec2d_IteratorHelper)


try:
	TColgp_SequenceOfVec2d = NCollection_Sequence_gp_Vec2d
except NameError:
	pass # does not exist, probably ignored

class NCollection_Sequence_gp_Pnt(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_gp_Pnt self) -> NCollection_Sequence< gp_Pnt >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _TColgp.NCollection_Sequence_gp_Pnt_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_gp_Pnt self) -> NCollection_Sequence< gp_Pnt >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _TColgp.NCollection_Sequence_gp_Pnt_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_gp_Pnt self) -> NCollection_Sequence< gp_Pnt >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Sequence_gp_Pnt_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_gp_Pnt self) -> NCollection_Sequence< gp_Pnt >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Sequence_gp_Pnt_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _TColgp.new_NCollection_Sequence_gp_Pnt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_gp_Pnt self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Pnt_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_gp_Pnt self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Pnt_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_gp_Pnt self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Pnt_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_gp_Pnt self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Pnt_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_gp_Pnt self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Sequence_gp_Pnt_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_gp_Pnt self)

        Reverse sequence


        """
        return _TColgp.NCollection_Sequence_gp_Pnt_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_gp_Pnt self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _TColgp.NCollection_Sequence_gp_Pnt_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColgp.NCollection_Sequence_gp_Pnt_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_gp_Pnt self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColgp.NCollection_Sequence_gp_Pnt_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_gp_Pnt self, NCollection_Sequence_gp_Pnt theOther) -> NCollection_Sequence_gp_Pnt

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Pnt_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_gp_Pnt self, NCollection_Sequence_gp_Pnt theOther) -> NCollection_Sequence_gp_Pnt

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Pnt_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_gp_Pnt self, NCollection_Sequence< gp_Pnt >::Iterator & thePosition)
        Remove(NCollection_Sequence_gp_Pnt self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_gp_Pnt self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _TColgp.NCollection_Sequence_gp_Pnt_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_gp_Pnt self, gp_Pnt theItem)
        Append(NCollection_Sequence_gp_Pnt self, NCollection_Sequence_gp_Pnt theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Pnt_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_gp_Pnt self, gp_Pnt theItem)
        Prepend(NCollection_Sequence_gp_Pnt self, NCollection_Sequence_gp_Pnt theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Pnt_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_gp_Pnt self, Standard_Integer const theIndex, gp_Pnt theItem)
        InsertBefore(NCollection_Sequence_gp_Pnt self, Standard_Integer const theIndex, NCollection_Sequence_gp_Pnt theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Pnt_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_gp_Pnt self, NCollection_Sequence< gp_Pnt >::Iterator & thePosition, gp_Pnt theItem)
        InsertAfter(NCollection_Sequence_gp_Pnt self, Standard_Integer const theIndex, NCollection_Sequence_gp_Pnt theSeq)
        InsertAfter(NCollection_Sequence_gp_Pnt self, Standard_Integer const theIndex, gp_Pnt theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Pnt_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_gp_Pnt self, Standard_Integer const theIndex, NCollection_Sequence_gp_Pnt theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Pnt_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Pnt_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_gp_Pnt self) -> gp_Pnt

        First item access

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Pnt_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Pnt_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_gp_Pnt self) -> gp_Pnt

        Last item access

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Pnt_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Pnt_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_gp_Pnt self, Standard_Integer const theIndex) -> gp_Pnt

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Pnt_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Pnt___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_gp_Pnt self, Standard_Integer const theIndex, gp_Pnt theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Pnt_SetValue(self, *args)


    def __iter__(self):
        return _TColgp.NCollection_Sequence_gp_Pnt___iter__(self)
    __swig_destroy__ = _TColgp.delete_NCollection_Sequence_gp_Pnt
NCollection_Sequence_gp_Pnt_swigregister = _TColgp.NCollection_Sequence_gp_Pnt_swigregister
NCollection_Sequence_gp_Pnt_swigregister(NCollection_Sequence_gp_Pnt)

def NCollection_Sequence_gp_Pnt_delNode(*args):
    """
    NCollection_Sequence_gp_Pnt_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _TColgp.NCollection_Sequence_gp_Pnt_delNode(*args)

class NCollection_Sequence_gp_Pnt_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _TColgp.new_NCollection_Sequence_gp_Pnt_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TColgp.delete_NCollection_Sequence_gp_Pnt_IteratorHelper

    def __next__(self):
        return _TColgp.NCollection_Sequence_gp_Pnt_IteratorHelper___next__(self)
NCollection_Sequence_gp_Pnt_IteratorHelper_swigregister = _TColgp.NCollection_Sequence_gp_Pnt_IteratorHelper_swigregister
NCollection_Sequence_gp_Pnt_IteratorHelper_swigregister(NCollection_Sequence_gp_Pnt_IteratorHelper)


try:
	TColgp_SequenceOfPnt = NCollection_Sequence_gp_Pnt
except NameError:
	pass # does not exist, probably ignored

class Handle_TColgp_HArray1OfVec(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HArray1OfVec self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HArray1OfVec_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HArray1OfVec self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HArray1OfVec_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HArray1OfVec self, TColgp_HArray1OfVec thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfVec_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HArray1OfVec self, Handle_TColgp_HArray1OfVec theHandle) -> Handle_TColgp_HArray1OfVec
        assign(Handle_TColgp_HArray1OfVec self, TColgp_HArray1OfVec thePtr) -> Handle_TColgp_HArray1OfVec
        assign(Handle_TColgp_HArray1OfVec self, Handle_TColgp_HArray1OfVec theHandle) -> Handle_TColgp_HArray1OfVec

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HArray1OfVec_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HArray1OfVec self) -> TColgp_HArray1OfVec

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfVec_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HArray1OfVec self) -> TColgp_HArray1OfVec

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfVec___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HArray1OfVec self) -> TColgp_HArray1OfVec

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HArray1OfVec___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HArray1OfVec___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HArray1OfVec___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HArray1OfVec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HArray1OfVec_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HArray1OfVec

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfVec

        """
        res = _TColgp.Handle_TColgp_HArray1OfVec_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_TColgp_HArray1OfVec self) -> NCollection_Array1_gp_Vec

        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfVec

        """
        return _TColgp.Handle_TColgp_HArray1OfVec_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HArray1OfVec self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HArray1OfVec_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray1OfVec_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray1OfVec_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HArray1OfVec self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HArray1OfVec_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HArray1OfVec self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HArray1OfVec self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray1OfVec_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HArray1OfVec self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HArray1OfVec self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray1OfVec_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HArray1OfVec self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HArray1OfVec_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HArray1OfVec self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray1OfVec_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HArray1OfVec self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HArray1OfVec_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HArray1OfVec self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray1OfVec_DecrementRefCounter(self, *args)

Handle_TColgp_HArray1OfVec_swigregister = _TColgp.Handle_TColgp_HArray1OfVec_swigregister
Handle_TColgp_HArray1OfVec_swigregister(Handle_TColgp_HArray1OfVec)

def Handle_TColgp_HArray1OfVec_DownCast(thing):
    return _TColgp.Handle_TColgp_HArray1OfVec_DownCast(thing)
Handle_TColgp_HArray1OfVec_DownCast = _TColgp.Handle_TColgp_HArray1OfVec_DownCast

class TColgp_HArray1OfLin2d(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HArray1OfLin2d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HArray1OfLin2d(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HArray1OfLin2d self, Standard_Integer const theLower, Standard_Integer const theUpper) -> TColgp_HArray1OfLin2d
        __init__(TColgp_HArray1OfLin2d self, Standard_Integer const theLower, Standard_Integer const theUpper, gp_Lin2d theValue) -> TColgp_HArray1OfLin2d
        __init__(TColgp_HArray1OfLin2d self, NCollection_Array1_gp_Lin2d theOther) -> TColgp_HArray1OfLin2d

        :type theOther: OCC.wrapper.TColgp.TColgp_Array1OfLin2d

        """
        this = _TColgp.new_TColgp_HArray1OfLin2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfLin2d

        """
        res = _TColgp.TColgp_HArray1OfLin2d_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(TColgp_HArray1OfLin2d self) -> NCollection_Array1_gp_Lin2d

        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfLin2d

        """
        return _TColgp.TColgp_HArray1OfLin2d_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HArray1OfLin2d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HArray1OfLin2d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HArray1OfLin2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HArray1OfLin2d
TColgp_HArray1OfLin2d_swigregister = _TColgp.TColgp_HArray1OfLin2d_swigregister
TColgp_HArray1OfLin2d_swigregister(TColgp_HArray1OfLin2d)

def TColgp_HArray1OfLin2d_get_type_name(*args):
    """
    TColgp_HArray1OfLin2d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HArray1OfLin2d_get_type_name(*args)

def TColgp_HArray1OfLin2d_get_type_descriptor(*args):
    """
    TColgp_HArray1OfLin2d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HArray1OfLin2d_get_type_descriptor(*args)

class TColgp_HArray2OfVec2d(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HArray2OfVec2d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HArray2OfVec2d(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HArray2OfVec2d self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp) -> TColgp_HArray2OfVec2d
        __init__(TColgp_HArray2OfVec2d self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp, gp_Vec2d theValue) -> TColgp_HArray2OfVec2d
        __init__(TColgp_HArray2OfVec2d self, NCollection_Array2_gp_Vec2d theOther) -> TColgp_HArray2OfVec2d

        :type theOther: OCC.wrapper.TColgp.TColgp_Array2OfVec2d

        """
        this = _TColgp.new_TColgp_HArray2OfVec2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfVec2d

        """
        res = _TColgp.TColgp_HArray2OfVec2d_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(TColgp_HArray2OfVec2d self) -> NCollection_Array2_gp_Vec2d

        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfVec2d

        """
        return _TColgp.TColgp_HArray2OfVec2d_ChangeArray2(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HArray2OfVec2d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HArray2OfVec2d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HArray2OfVec2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HArray2OfVec2d
TColgp_HArray2OfVec2d_swigregister = _TColgp.TColgp_HArray2OfVec2d_swigregister
TColgp_HArray2OfVec2d_swigregister(TColgp_HArray2OfVec2d)

def TColgp_HArray2OfVec2d_get_type_name(*args):
    """
    TColgp_HArray2OfVec2d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HArray2OfVec2d_get_type_name(*args)

def TColgp_HArray2OfVec2d_get_type_descriptor(*args):
    """
    TColgp_HArray2OfVec2d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HArray2OfVec2d_get_type_descriptor(*args)

class Handle_TColgp_HArray1OfLin2d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HArray1OfLin2d self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HArray1OfLin2d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HArray1OfLin2d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HArray1OfLin2d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HArray1OfLin2d self, TColgp_HArray1OfLin2d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfLin2d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HArray1OfLin2d self, Handle_TColgp_HArray1OfLin2d theHandle) -> Handle_TColgp_HArray1OfLin2d
        assign(Handle_TColgp_HArray1OfLin2d self, TColgp_HArray1OfLin2d thePtr) -> Handle_TColgp_HArray1OfLin2d
        assign(Handle_TColgp_HArray1OfLin2d self, Handle_TColgp_HArray1OfLin2d theHandle) -> Handle_TColgp_HArray1OfLin2d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HArray1OfLin2d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HArray1OfLin2d self) -> TColgp_HArray1OfLin2d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfLin2d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HArray1OfLin2d self) -> TColgp_HArray1OfLin2d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfLin2d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HArray1OfLin2d self) -> TColgp_HArray1OfLin2d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HArray1OfLin2d___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HArray1OfLin2d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HArray1OfLin2d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HArray1OfLin2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HArray1OfLin2d_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HArray1OfLin2d

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfLin2d

        """
        res = _TColgp.Handle_TColgp_HArray1OfLin2d_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_TColgp_HArray1OfLin2d self) -> NCollection_Array1_gp_Lin2d

        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfLin2d

        """
        return _TColgp.Handle_TColgp_HArray1OfLin2d_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HArray1OfLin2d self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HArray1OfLin2d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray1OfLin2d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray1OfLin2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HArray1OfLin2d self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HArray1OfLin2d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HArray1OfLin2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HArray1OfLin2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray1OfLin2d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HArray1OfLin2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HArray1OfLin2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray1OfLin2d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HArray1OfLin2d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HArray1OfLin2d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HArray1OfLin2d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray1OfLin2d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HArray1OfLin2d self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HArray1OfLin2d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HArray1OfLin2d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray1OfLin2d_DecrementRefCounter(self, *args)

Handle_TColgp_HArray1OfLin2d_swigregister = _TColgp.Handle_TColgp_HArray1OfLin2d_swigregister
Handle_TColgp_HArray1OfLin2d_swigregister(Handle_TColgp_HArray1OfLin2d)

def Handle_TColgp_HArray1OfLin2d_DownCast(thing):
    return _TColgp.Handle_TColgp_HArray1OfLin2d_DownCast(thing)
Handle_TColgp_HArray1OfLin2d_DownCast = _TColgp.Handle_TColgp_HArray1OfLin2d_DownCast

class TColgp_HSequenceOfVec(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HSequenceOfVec
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HSequenceOfVec(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HSequenceOfVec self) -> TColgp_HSequenceOfVec
        __init__(TColgp_HSequenceOfVec self, NCollection_Sequence_gp_Vec theOther) -> TColgp_HSequenceOfVec

        :type theOther: OCC.wrapper.TColgp.TColgp_SequenceOfVec

        """
        this = _TColgp.new_TColgp_HSequenceOfVec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfVec

        """
        res = _TColgp.TColgp_HSequenceOfVec_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(TColgp_HSequenceOfVec self, gp_Vec theItem)
        Append(TColgp_HSequenceOfVec self, NCollection_Sequence_gp_Vec theSequence)

        :type theSequence: OCC.wrapper.TColgp.TColgp_SequenceOfVec

        """
        return _TColgp.TColgp_HSequenceOfVec_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(TColgp_HSequenceOfVec self) -> NCollection_Sequence_gp_Vec

        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfVec

        """
        return _TColgp.TColgp_HSequenceOfVec_ChangeSequence(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HSequenceOfVec_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HSequenceOfVec_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HSequenceOfVec_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HSequenceOfVec
TColgp_HSequenceOfVec_swigregister = _TColgp.TColgp_HSequenceOfVec_swigregister
TColgp_HSequenceOfVec_swigregister(TColgp_HSequenceOfVec)

def TColgp_HSequenceOfVec_get_type_name(*args):
    """
    TColgp_HSequenceOfVec_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HSequenceOfVec_get_type_name(*args)

def TColgp_HSequenceOfVec_get_type_descriptor(*args):
    """
    TColgp_HSequenceOfVec_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HSequenceOfVec_get_type_descriptor(*args)

class TColgp_HArray2OfCirc2d(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HArray2OfCirc2d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HArray2OfCirc2d(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HArray2OfCirc2d self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp) -> TColgp_HArray2OfCirc2d
        __init__(TColgp_HArray2OfCirc2d self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp, gp_Circ2d theValue) -> TColgp_HArray2OfCirc2d
        __init__(TColgp_HArray2OfCirc2d self, NCollection_Array2_gp_Circ2d theOther) -> TColgp_HArray2OfCirc2d

        :type theOther: OCC.wrapper.TColgp.TColgp_Array2OfCirc2d

        """
        this = _TColgp.new_TColgp_HArray2OfCirc2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfCirc2d

        """
        res = _TColgp.TColgp_HArray2OfCirc2d_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(TColgp_HArray2OfCirc2d self) -> NCollection_Array2_gp_Circ2d

        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfCirc2d

        """
        return _TColgp.TColgp_HArray2OfCirc2d_ChangeArray2(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HArray2OfCirc2d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HArray2OfCirc2d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HArray2OfCirc2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HArray2OfCirc2d
TColgp_HArray2OfCirc2d_swigregister = _TColgp.TColgp_HArray2OfCirc2d_swigregister
TColgp_HArray2OfCirc2d_swigregister(TColgp_HArray2OfCirc2d)

def TColgp_HArray2OfCirc2d_get_type_name(*args):
    """
    TColgp_HArray2OfCirc2d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HArray2OfCirc2d_get_type_name(*args)

def TColgp_HArray2OfCirc2d_get_type_descriptor(*args):
    """
    TColgp_HArray2OfCirc2d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HArray2OfCirc2d_get_type_descriptor(*args)

class Handle_TColgp_HSequenceOfDir(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HSequenceOfDir self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HSequenceOfDir_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HSequenceOfDir self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HSequenceOfDir self, TColgp_HSequenceOfDir thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HSequenceOfDir self, Handle_TColgp_HSequenceOfDir theHandle) -> Handle_TColgp_HSequenceOfDir
        assign(Handle_TColgp_HSequenceOfDir self, TColgp_HSequenceOfDir thePtr) -> Handle_TColgp_HSequenceOfDir
        assign(Handle_TColgp_HSequenceOfDir self, Handle_TColgp_HSequenceOfDir theHandle) -> Handle_TColgp_HSequenceOfDir

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HSequenceOfDir self) -> TColgp_HSequenceOfDir

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HSequenceOfDir self) -> TColgp_HSequenceOfDir

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HSequenceOfDir self) -> TColgp_HSequenceOfDir

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HSequenceOfDir___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HSequenceOfDir___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HSequenceOfDir(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HSequenceOfDir_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HSequenceOfDir

    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfDir

        """
        res = _TColgp.Handle_TColgp_HSequenceOfDir_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(Handle_TColgp_HSequenceOfDir self, gp_Dir theItem)
        Append(Handle_TColgp_HSequenceOfDir self, NCollection_Sequence_gp_Dir theSequence)

        :type theSequence: OCC.wrapper.TColgp.TColgp_SequenceOfDir

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(Handle_TColgp_HSequenceOfDir self) -> NCollection_Sequence_gp_Dir

        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfDir

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir_ChangeSequence(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HSequenceOfDir self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HSequenceOfDir_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HSequenceOfDir_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HSequenceOfDir self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HSequenceOfDir_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HSequenceOfDir self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HSequenceOfDir self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HSequenceOfDir self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HSequenceOfDir self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HSequenceOfDir self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HSequenceOfDir self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HSequenceOfDir self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HSequenceOfDir_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HSequenceOfDir self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HSequenceOfDir_DecrementRefCounter(self, *args)

Handle_TColgp_HSequenceOfDir_swigregister = _TColgp.Handle_TColgp_HSequenceOfDir_swigregister
Handle_TColgp_HSequenceOfDir_swigregister(Handle_TColgp_HSequenceOfDir)

def Handle_TColgp_HSequenceOfDir_DownCast(thing):
    return _TColgp.Handle_TColgp_HSequenceOfDir_DownCast(thing)
Handle_TColgp_HSequenceOfDir_DownCast = _TColgp.Handle_TColgp_HSequenceOfDir_DownCast

class Handle_TColgp_HArray2OfPnt(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HArray2OfPnt self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HArray2OfPnt_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HArray2OfPnt self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HArray2OfPnt self, TColgp_HArray2OfPnt thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HArray2OfPnt self, Handle_TColgp_HArray2OfPnt theHandle) -> Handle_TColgp_HArray2OfPnt
        assign(Handle_TColgp_HArray2OfPnt self, TColgp_HArray2OfPnt thePtr) -> Handle_TColgp_HArray2OfPnt
        assign(Handle_TColgp_HArray2OfPnt self, Handle_TColgp_HArray2OfPnt theHandle) -> Handle_TColgp_HArray2OfPnt

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HArray2OfPnt self) -> TColgp_HArray2OfPnt

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HArray2OfPnt self) -> TColgp_HArray2OfPnt

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HArray2OfPnt self) -> TColgp_HArray2OfPnt

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HArray2OfPnt___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HArray2OfPnt___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HArray2OfPnt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HArray2OfPnt_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HArray2OfPnt

    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfPnt

        """
        res = _TColgp.Handle_TColgp_HArray2OfPnt_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(Handle_TColgp_HArray2OfPnt self) -> NCollection_Array2_gp_Pnt

        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfPnt

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt_ChangeArray2(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HArray2OfPnt self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray2OfPnt_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray2OfPnt_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HArray2OfPnt self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HArray2OfPnt_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HArray2OfPnt self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HArray2OfPnt self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HArray2OfPnt self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HArray2OfPnt self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HArray2OfPnt self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HArray2OfPnt self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HArray2OfPnt self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HArray2OfPnt_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HArray2OfPnt self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt_DecrementRefCounter(self, *args)

Handle_TColgp_HArray2OfPnt_swigregister = _TColgp.Handle_TColgp_HArray2OfPnt_swigregister
Handle_TColgp_HArray2OfPnt_swigregister(Handle_TColgp_HArray2OfPnt)

def Handle_TColgp_HArray2OfPnt_DownCast(thing):
    return _TColgp.Handle_TColgp_HArray2OfPnt_DownCast(thing)
Handle_TColgp_HArray2OfPnt_DownCast = _TColgp.Handle_TColgp_HArray2OfPnt_DownCast

class Handle_TColgp_HArray1OfVec2d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HArray1OfVec2d self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HArray1OfVec2d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HArray1OfVec2d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HArray1OfVec2d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HArray1OfVec2d self, TColgp_HArray1OfVec2d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfVec2d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HArray1OfVec2d self, Handle_TColgp_HArray1OfVec2d theHandle) -> Handle_TColgp_HArray1OfVec2d
        assign(Handle_TColgp_HArray1OfVec2d self, TColgp_HArray1OfVec2d thePtr) -> Handle_TColgp_HArray1OfVec2d
        assign(Handle_TColgp_HArray1OfVec2d self, Handle_TColgp_HArray1OfVec2d theHandle) -> Handle_TColgp_HArray1OfVec2d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HArray1OfVec2d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HArray1OfVec2d self) -> TColgp_HArray1OfVec2d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfVec2d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HArray1OfVec2d self) -> TColgp_HArray1OfVec2d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfVec2d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HArray1OfVec2d self) -> TColgp_HArray1OfVec2d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HArray1OfVec2d___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HArray1OfVec2d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HArray1OfVec2d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HArray1OfVec2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HArray1OfVec2d_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HArray1OfVec2d

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfVec2d

        """
        res = _TColgp.Handle_TColgp_HArray1OfVec2d_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_TColgp_HArray1OfVec2d self) -> NCollection_Array1_gp_Vec2d

        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfVec2d

        """
        return _TColgp.Handle_TColgp_HArray1OfVec2d_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HArray1OfVec2d self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HArray1OfVec2d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray1OfVec2d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray1OfVec2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HArray1OfVec2d self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HArray1OfVec2d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HArray1OfVec2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HArray1OfVec2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray1OfVec2d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HArray1OfVec2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HArray1OfVec2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray1OfVec2d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HArray1OfVec2d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HArray1OfVec2d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HArray1OfVec2d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray1OfVec2d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HArray1OfVec2d self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HArray1OfVec2d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HArray1OfVec2d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray1OfVec2d_DecrementRefCounter(self, *args)

Handle_TColgp_HArray1OfVec2d_swigregister = _TColgp.Handle_TColgp_HArray1OfVec2d_swigregister
Handle_TColgp_HArray1OfVec2d_swigregister(Handle_TColgp_HArray1OfVec2d)

def Handle_TColgp_HArray1OfVec2d_DownCast(thing):
    return _TColgp.Handle_TColgp_HArray1OfVec2d_DownCast(thing)
Handle_TColgp_HArray1OfVec2d_DownCast = _TColgp.Handle_TColgp_HArray1OfVec2d_DownCast

class NCollection_Array1_gp_Pnt(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_gp_Pnt self) -> NCollection_Array1< gp_Pnt >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _TColgp.NCollection_Array1_gp_Pnt_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_gp_Pnt self) -> NCollection_Array1< gp_Pnt >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _TColgp.NCollection_Array1_gp_Pnt_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_gp_Pnt self) -> NCollection_Array1< gp_Pnt >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Array1_gp_Pnt_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_gp_Pnt self) -> NCollection_Array1< gp_Pnt >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Array1_gp_Pnt_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _TColgp.new_NCollection_Array1_gp_Pnt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_gp_Pnt self, gp_Pnt theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Pnt_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_gp_Pnt self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Pnt_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_gp_Pnt self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Pnt_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_gp_Pnt self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_Pnt_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_gp_Pnt self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Pnt_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_gp_Pnt self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Pnt_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_gp_Pnt self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_Pnt_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_gp_Pnt self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_Pnt_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_gp_Pnt self, NCollection_Array1_gp_Pnt theOther) -> NCollection_Array1_gp_Pnt

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_Pnt_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_gp_Pnt self, NCollection_Array1_gp_Pnt theOther) -> NCollection_Array1_gp_Pnt

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_Pnt_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_gp_Pnt self, NCollection_Array1_gp_Pnt theOther) -> NCollection_Array1_gp_Pnt
        assign(NCollection_Array1_gp_Pnt self, NCollection_Array1_gp_Pnt theOther) -> NCollection_Array1_gp_Pnt

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_Pnt_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Pnt_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_gp_Pnt self) -> gp_Pnt

        @return first element

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Pnt_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Pnt_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_gp_Pnt self) -> gp_Pnt

        @return last element

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Pnt_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Pnt_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_gp_Pnt self, Standard_Integer const theIndex) -> gp_Pnt

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Pnt_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Pnt___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Pnt_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_gp_Pnt self, Standard_Integer const theIndex, gp_Pnt theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Pnt_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_gp_Pnt self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _TColgp.NCollection_Array1_gp_Pnt_Resize(self, *args)

    __swig_destroy__ = _TColgp.delete_NCollection_Array1_gp_Pnt
NCollection_Array1_gp_Pnt_swigregister = _TColgp.NCollection_Array1_gp_Pnt_swigregister
NCollection_Array1_gp_Pnt_swigregister(NCollection_Array1_gp_Pnt)


try:
	TColgp_Array1OfPnt = NCollection_Array1_gp_Pnt
except NameError:
	pass # does not exist, probably ignored

class TColgp_HArray1OfDir2d(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HArray1OfDir2d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HArray1OfDir2d(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HArray1OfDir2d self, Standard_Integer const theLower, Standard_Integer const theUpper) -> TColgp_HArray1OfDir2d
        __init__(TColgp_HArray1OfDir2d self, Standard_Integer const theLower, Standard_Integer const theUpper, gp_Dir2d theValue) -> TColgp_HArray1OfDir2d
        __init__(TColgp_HArray1OfDir2d self, NCollection_Array1_gp_Dir2d theOther) -> TColgp_HArray1OfDir2d

        :type theOther: OCC.wrapper.TColgp.TColgp_Array1OfDir2d

        """
        this = _TColgp.new_TColgp_HArray1OfDir2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfDir2d

        """
        res = _TColgp.TColgp_HArray1OfDir2d_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(TColgp_HArray1OfDir2d self) -> NCollection_Array1_gp_Dir2d

        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfDir2d

        """
        return _TColgp.TColgp_HArray1OfDir2d_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HArray1OfDir2d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HArray1OfDir2d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HArray1OfDir2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HArray1OfDir2d
TColgp_HArray1OfDir2d_swigregister = _TColgp.TColgp_HArray1OfDir2d_swigregister
TColgp_HArray1OfDir2d_swigregister(TColgp_HArray1OfDir2d)

def TColgp_HArray1OfDir2d_get_type_name(*args):
    """
    TColgp_HArray1OfDir2d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HArray1OfDir2d_get_type_name(*args)

def TColgp_HArray1OfDir2d_get_type_descriptor(*args):
    """
    TColgp_HArray1OfDir2d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HArray1OfDir2d_get_type_descriptor(*args)

class TColgp_HArray2OfVec(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HArray2OfVec
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HArray2OfVec(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HArray2OfVec self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp) -> TColgp_HArray2OfVec
        __init__(TColgp_HArray2OfVec self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp, gp_Vec theValue) -> TColgp_HArray2OfVec
        __init__(TColgp_HArray2OfVec self, NCollection_Array2_gp_Vec theOther) -> TColgp_HArray2OfVec

        :type theOther: OCC.wrapper.TColgp.TColgp_Array2OfVec

        """
        this = _TColgp.new_TColgp_HArray2OfVec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfVec

        """
        res = _TColgp.TColgp_HArray2OfVec_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(TColgp_HArray2OfVec self) -> NCollection_Array2_gp_Vec

        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfVec

        """
        return _TColgp.TColgp_HArray2OfVec_ChangeArray2(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HArray2OfVec_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HArray2OfVec_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HArray2OfVec_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HArray2OfVec
TColgp_HArray2OfVec_swigregister = _TColgp.TColgp_HArray2OfVec_swigregister
TColgp_HArray2OfVec_swigregister(TColgp_HArray2OfVec)

def TColgp_HArray2OfVec_get_type_name(*args):
    """
    TColgp_HArray2OfVec_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HArray2OfVec_get_type_name(*args)

def TColgp_HArray2OfVec_get_type_descriptor(*args):
    """
    TColgp_HArray2OfVec_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HArray2OfVec_get_type_descriptor(*args)

class NCollection_Array2_gp_XYZ(object):
    """
    Purpose:   The class Array2 represents bi-dimensional arrays 
    of fixed size known at run time. 
    The ranges of indices are user defined.

    Warning:   Programs clients of such class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.LowerRow(); i <= A.UpperRow(); i++)
    for (j = A.LowerCol(); j <= A.UpperCol(); j++)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Purpose:   The class Array2 represents bi-dimensional arrays 
        of fixed size known at run time. 
        The ranges of indices are user defined.

        Warning:   Programs clients of such class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.LowerRow(); i <= A.UpperRow(); i++)
        for (j = A.LowerCol(); j <= A.UpperCol(); j++)
        """
        this = _TColgp.new_NCollection_Array2_gp_XYZ(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array2_gp_XYZ self, gp_XYZ theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_XYZ_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array2_gp_XYZ self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_XYZ_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array2_gp_XYZ self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_XYZ_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(NCollection_Array2_gp_XYZ self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_XYZ_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(NCollection_Array2_gp_XYZ self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_XYZ_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(NCollection_Array2_gp_XYZ self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_XYZ_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(NCollection_Array2_gp_XYZ self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_XYZ_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(NCollection_Array2_gp_XYZ self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_XYZ_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(NCollection_Array2_gp_XYZ self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_XYZ_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array2_gp_XYZ self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array2_gp_XYZ_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array2_gp_XYZ self, NCollection_Array2_gp_XYZ theOther) -> NCollection_Array2_gp_XYZ

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TColgp.NCollection_Array2_gp_XYZ_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array2_gp_XYZ self, NCollection_Array2_gp_XYZ theOther) -> NCollection_Array2_gp_XYZ

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TColgp.NCollection_Array2_gp_XYZ_assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array2_gp_XYZ_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array2_gp_XYZ self, Standard_Integer const theRow, Standard_Integer const theCol) -> gp_XYZ

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_XYZ_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array2_gp_XYZ___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array2_gp_XYZ self, Standard_Integer const theRow, Standard_Integer const theCol, gp_XYZ theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_XYZ_SetValue(self, *args)

    __swig_destroy__ = _TColgp.delete_NCollection_Array2_gp_XYZ
NCollection_Array2_gp_XYZ_swigregister = _TColgp.NCollection_Array2_gp_XYZ_swigregister
NCollection_Array2_gp_XYZ_swigregister(NCollection_Array2_gp_XYZ)


try:
	TColgp_Array2OfXYZ = NCollection_Array2_gp_XYZ
except NameError:
	pass # does not exist, probably ignored

class Handle_TColgp_HArray2OfVec(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HArray2OfVec self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HArray2OfVec_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HArray2OfVec self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HArray2OfVec_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HArray2OfVec self, TColgp_HArray2OfVec thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfVec_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HArray2OfVec self, Handle_TColgp_HArray2OfVec theHandle) -> Handle_TColgp_HArray2OfVec
        assign(Handle_TColgp_HArray2OfVec self, TColgp_HArray2OfVec thePtr) -> Handle_TColgp_HArray2OfVec
        assign(Handle_TColgp_HArray2OfVec self, Handle_TColgp_HArray2OfVec theHandle) -> Handle_TColgp_HArray2OfVec

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HArray2OfVec_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HArray2OfVec self) -> TColgp_HArray2OfVec

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfVec_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HArray2OfVec self) -> TColgp_HArray2OfVec

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfVec___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HArray2OfVec self) -> TColgp_HArray2OfVec

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HArray2OfVec___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HArray2OfVec___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HArray2OfVec___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HArray2OfVec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HArray2OfVec_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HArray2OfVec

    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfVec

        """
        res = _TColgp.Handle_TColgp_HArray2OfVec_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(Handle_TColgp_HArray2OfVec self) -> NCollection_Array2_gp_Vec

        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfVec

        """
        return _TColgp.Handle_TColgp_HArray2OfVec_ChangeArray2(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HArray2OfVec self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HArray2OfVec_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray2OfVec_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray2OfVec_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HArray2OfVec self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HArray2OfVec_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HArray2OfVec self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HArray2OfVec self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray2OfVec_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HArray2OfVec self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HArray2OfVec self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray2OfVec_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HArray2OfVec self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HArray2OfVec_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HArray2OfVec self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfVec_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HArray2OfVec self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HArray2OfVec_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HArray2OfVec self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfVec_DecrementRefCounter(self, *args)

Handle_TColgp_HArray2OfVec_swigregister = _TColgp.Handle_TColgp_HArray2OfVec_swigregister
Handle_TColgp_HArray2OfVec_swigregister(Handle_TColgp_HArray2OfVec)

def Handle_TColgp_HArray2OfVec_DownCast(thing):
    return _TColgp.Handle_TColgp_HArray2OfVec_DownCast(thing)
Handle_TColgp_HArray2OfVec_DownCast = _TColgp.Handle_TColgp_HArray2OfVec_DownCast

class TColgp_HArray2OfXYZ(NCollection_Array2_gp_XYZ, Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HArray2OfXYZ
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HArray2OfXYZ(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HArray2OfXYZ self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp) -> TColgp_HArray2OfXYZ
        __init__(TColgp_HArray2OfXYZ self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp, gp_XYZ theValue) -> TColgp_HArray2OfXYZ
        __init__(TColgp_HArray2OfXYZ self, NCollection_Array2_gp_XYZ theOther) -> TColgp_HArray2OfXYZ

        :type theOther: OCC.wrapper.TColgp.TColgp_Array2OfXYZ

        """
        this = _TColgp.new_TColgp_HArray2OfXYZ(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfXYZ

        """
        res = _TColgp.TColgp_HArray2OfXYZ_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(TColgp_HArray2OfXYZ self) -> NCollection_Array2_gp_XYZ

        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfXYZ

        """
        return _TColgp.TColgp_HArray2OfXYZ_ChangeArray2(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HArray2OfXYZ_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HArray2OfXYZ_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HArray2OfXYZ_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HArray2OfXYZ
TColgp_HArray2OfXYZ_swigregister = _TColgp.TColgp_HArray2OfXYZ_swigregister
TColgp_HArray2OfXYZ_swigregister(TColgp_HArray2OfXYZ)

def TColgp_HArray2OfXYZ_get_type_name(*args):
    """
    TColgp_HArray2OfXYZ_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HArray2OfXYZ_get_type_name(*args)

def TColgp_HArray2OfXYZ_get_type_descriptor(*args):
    """
    TColgp_HArray2OfXYZ_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HArray2OfXYZ_get_type_descriptor(*args)

class Handle_TColgp_HArray2OfDir2d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HArray2OfDir2d self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HArray2OfDir2d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HArray2OfDir2d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HArray2OfDir2d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HArray2OfDir2d self, TColgp_HArray2OfDir2d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfDir2d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HArray2OfDir2d self, Handle_TColgp_HArray2OfDir2d theHandle) -> Handle_TColgp_HArray2OfDir2d
        assign(Handle_TColgp_HArray2OfDir2d self, TColgp_HArray2OfDir2d thePtr) -> Handle_TColgp_HArray2OfDir2d
        assign(Handle_TColgp_HArray2OfDir2d self, Handle_TColgp_HArray2OfDir2d theHandle) -> Handle_TColgp_HArray2OfDir2d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HArray2OfDir2d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HArray2OfDir2d self) -> TColgp_HArray2OfDir2d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfDir2d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HArray2OfDir2d self) -> TColgp_HArray2OfDir2d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfDir2d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HArray2OfDir2d self) -> TColgp_HArray2OfDir2d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HArray2OfDir2d___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HArray2OfDir2d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HArray2OfDir2d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HArray2OfDir2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HArray2OfDir2d_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HArray2OfDir2d

    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfDir2d

        """
        res = _TColgp.Handle_TColgp_HArray2OfDir2d_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(Handle_TColgp_HArray2OfDir2d self) -> NCollection_Array2_gp_Dir2d

        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfDir2d

        """
        return _TColgp.Handle_TColgp_HArray2OfDir2d_ChangeArray2(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HArray2OfDir2d self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HArray2OfDir2d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray2OfDir2d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray2OfDir2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HArray2OfDir2d self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HArray2OfDir2d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HArray2OfDir2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HArray2OfDir2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray2OfDir2d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HArray2OfDir2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HArray2OfDir2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray2OfDir2d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HArray2OfDir2d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HArray2OfDir2d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HArray2OfDir2d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfDir2d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HArray2OfDir2d self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HArray2OfDir2d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HArray2OfDir2d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfDir2d_DecrementRefCounter(self, *args)

Handle_TColgp_HArray2OfDir2d_swigregister = _TColgp.Handle_TColgp_HArray2OfDir2d_swigregister
Handle_TColgp_HArray2OfDir2d_swigregister(Handle_TColgp_HArray2OfDir2d)

def Handle_TColgp_HArray2OfDir2d_DownCast(thing):
    return _TColgp.Handle_TColgp_HArray2OfDir2d_DownCast(thing)
Handle_TColgp_HArray2OfDir2d_DownCast = _TColgp.Handle_TColgp_HArray2OfDir2d_DownCast

class TColgp_HSequenceOfXY(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HSequenceOfXY
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HSequenceOfXY(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HSequenceOfXY self) -> TColgp_HSequenceOfXY
        __init__(TColgp_HSequenceOfXY self, NCollection_Sequence_gp_XY theOther) -> TColgp_HSequenceOfXY

        :type theOther: OCC.wrapper.TColgp.TColgp_SequenceOfXY

        """
        this = _TColgp.new_TColgp_HSequenceOfXY(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfXY

        """
        res = _TColgp.TColgp_HSequenceOfXY_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(TColgp_HSequenceOfXY self, gp_XY theItem)
        Append(TColgp_HSequenceOfXY self, NCollection_Sequence_gp_XY theSequence)

        :type theSequence: OCC.wrapper.TColgp.TColgp_SequenceOfXY

        """
        return _TColgp.TColgp_HSequenceOfXY_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(TColgp_HSequenceOfXY self) -> NCollection_Sequence_gp_XY

        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfXY

        """
        return _TColgp.TColgp_HSequenceOfXY_ChangeSequence(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HSequenceOfXY_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HSequenceOfXY_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HSequenceOfXY_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HSequenceOfXY
TColgp_HSequenceOfXY_swigregister = _TColgp.TColgp_HSequenceOfXY_swigregister
TColgp_HSequenceOfXY_swigregister(TColgp_HSequenceOfXY)

def TColgp_HSequenceOfXY_get_type_name(*args):
    """
    TColgp_HSequenceOfXY_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HSequenceOfXY_get_type_name(*args)

def TColgp_HSequenceOfXY_get_type_descriptor(*args):
    """
    TColgp_HSequenceOfXY_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HSequenceOfXY_get_type_descriptor(*args)

class TColgp_HSequenceOfXYZ(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HSequenceOfXYZ
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HSequenceOfXYZ(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HSequenceOfXYZ self) -> TColgp_HSequenceOfXYZ
        __init__(TColgp_HSequenceOfXYZ self, NCollection_Sequence_gp_XYZ theOther) -> TColgp_HSequenceOfXYZ

        :type theOther: OCC.wrapper.TColgp.TColgp_SequenceOfXYZ

        """
        this = _TColgp.new_TColgp_HSequenceOfXYZ(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfXYZ

        """
        res = _TColgp.TColgp_HSequenceOfXYZ_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(TColgp_HSequenceOfXYZ self, gp_XYZ theItem)
        Append(TColgp_HSequenceOfXYZ self, NCollection_Sequence_gp_XYZ theSequence)

        :type theSequence: OCC.wrapper.TColgp.TColgp_SequenceOfXYZ

        """
        return _TColgp.TColgp_HSequenceOfXYZ_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(TColgp_HSequenceOfXYZ self) -> NCollection_Sequence_gp_XYZ

        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfXYZ

        """
        return _TColgp.TColgp_HSequenceOfXYZ_ChangeSequence(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HSequenceOfXYZ_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HSequenceOfXYZ_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HSequenceOfXYZ_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HSequenceOfXYZ
TColgp_HSequenceOfXYZ_swigregister = _TColgp.TColgp_HSequenceOfXYZ_swigregister
TColgp_HSequenceOfXYZ_swigregister(TColgp_HSequenceOfXYZ)

def TColgp_HSequenceOfXYZ_get_type_name(*args):
    """
    TColgp_HSequenceOfXYZ_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HSequenceOfXYZ_get_type_name(*args)

def TColgp_HSequenceOfXYZ_get_type_descriptor(*args):
    """
    TColgp_HSequenceOfXYZ_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HSequenceOfXYZ_get_type_descriptor(*args)

class Handle_TColgp_HArray1OfPnt2d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HArray1OfPnt2d self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HArray1OfPnt2d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HArray1OfPnt2d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt2d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HArray1OfPnt2d self, TColgp_HArray1OfPnt2d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt2d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HArray1OfPnt2d self, Handle_TColgp_HArray1OfPnt2d theHandle) -> Handle_TColgp_HArray1OfPnt2d
        assign(Handle_TColgp_HArray1OfPnt2d self, TColgp_HArray1OfPnt2d thePtr) -> Handle_TColgp_HArray1OfPnt2d
        assign(Handle_TColgp_HArray1OfPnt2d self, Handle_TColgp_HArray1OfPnt2d theHandle) -> Handle_TColgp_HArray1OfPnt2d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt2d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HArray1OfPnt2d self) -> TColgp_HArray1OfPnt2d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt2d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HArray1OfPnt2d self) -> TColgp_HArray1OfPnt2d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt2d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HArray1OfPnt2d self) -> TColgp_HArray1OfPnt2d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt2d___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HArray1OfPnt2d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HArray1OfPnt2d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HArray1OfPnt2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HArray1OfPnt2d_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HArray1OfPnt2d

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfPnt2d

        """
        res = _TColgp.Handle_TColgp_HArray1OfPnt2d_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_TColgp_HArray1OfPnt2d self) -> NCollection_Array1_gp_Pnt2d

        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfPnt2d

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt2d_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HArray1OfPnt2d self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt2d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray1OfPnt2d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray1OfPnt2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HArray1OfPnt2d self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HArray1OfPnt2d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HArray1OfPnt2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HArray1OfPnt2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt2d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HArray1OfPnt2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HArray1OfPnt2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt2d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HArray1OfPnt2d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt2d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HArray1OfPnt2d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt2d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HArray1OfPnt2d self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HArray1OfPnt2d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HArray1OfPnt2d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt2d_DecrementRefCounter(self, *args)

Handle_TColgp_HArray1OfPnt2d_swigregister = _TColgp.Handle_TColgp_HArray1OfPnt2d_swigregister
Handle_TColgp_HArray1OfPnt2d_swigregister(Handle_TColgp_HArray1OfPnt2d)

def Handle_TColgp_HArray1OfPnt2d_DownCast(thing):
    return _TColgp.Handle_TColgp_HArray1OfPnt2d_DownCast(thing)
Handle_TColgp_HArray1OfPnt2d_DownCast = _TColgp.Handle_TColgp_HArray1OfPnt2d_DownCast

class Handle_TColgp_HArray2OfXY(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HArray2OfXY self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HArray2OfXY_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HArray2OfXY self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HArray2OfXY_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HArray2OfXY self, TColgp_HArray2OfXY thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfXY_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HArray2OfXY self, Handle_TColgp_HArray2OfXY theHandle) -> Handle_TColgp_HArray2OfXY
        assign(Handle_TColgp_HArray2OfXY self, TColgp_HArray2OfXY thePtr) -> Handle_TColgp_HArray2OfXY
        assign(Handle_TColgp_HArray2OfXY self, Handle_TColgp_HArray2OfXY theHandle) -> Handle_TColgp_HArray2OfXY

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HArray2OfXY_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HArray2OfXY self) -> TColgp_HArray2OfXY

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfXY_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HArray2OfXY self) -> TColgp_HArray2OfXY

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfXY___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HArray2OfXY self) -> TColgp_HArray2OfXY

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HArray2OfXY___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HArray2OfXY___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HArray2OfXY___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HArray2OfXY(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HArray2OfXY_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HArray2OfXY

    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfXY

        """
        res = _TColgp.Handle_TColgp_HArray2OfXY_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(Handle_TColgp_HArray2OfXY self) -> NCollection_Array2_gp_XY

        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfXY

        """
        return _TColgp.Handle_TColgp_HArray2OfXY_ChangeArray2(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HArray2OfXY self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HArray2OfXY_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray2OfXY_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray2OfXY_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HArray2OfXY self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HArray2OfXY_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HArray2OfXY self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HArray2OfXY self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray2OfXY_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HArray2OfXY self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HArray2OfXY self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray2OfXY_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HArray2OfXY self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HArray2OfXY_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HArray2OfXY self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfXY_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HArray2OfXY self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HArray2OfXY_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HArray2OfXY self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfXY_DecrementRefCounter(self, *args)

Handle_TColgp_HArray2OfXY_swigregister = _TColgp.Handle_TColgp_HArray2OfXY_swigregister
Handle_TColgp_HArray2OfXY_swigregister(Handle_TColgp_HArray2OfXY)

def Handle_TColgp_HArray2OfXY_DownCast(thing):
    return _TColgp.Handle_TColgp_HArray2OfXY_DownCast(thing)
Handle_TColgp_HArray2OfXY_DownCast = _TColgp.Handle_TColgp_HArray2OfXY_DownCast

class NCollection_Array1_gp_XY(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_gp_XY self) -> NCollection_Array1< gp_XY >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _TColgp.NCollection_Array1_gp_XY_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_gp_XY self) -> NCollection_Array1< gp_XY >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _TColgp.NCollection_Array1_gp_XY_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_gp_XY self) -> NCollection_Array1< gp_XY >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Array1_gp_XY_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_gp_XY self) -> NCollection_Array1< gp_XY >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Array1_gp_XY_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _TColgp.new_NCollection_Array1_gp_XY(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_gp_XY self, gp_XY theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_XY_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_gp_XY self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_XY_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_gp_XY self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_XY_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_gp_XY self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_XY_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_gp_XY self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_XY_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_gp_XY self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_XY_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_gp_XY self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_XY_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_gp_XY self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_XY_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_gp_XY self, NCollection_Array1_gp_XY theOther) -> NCollection_Array1_gp_XY

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_XY_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_gp_XY self, NCollection_Array1_gp_XY theOther) -> NCollection_Array1_gp_XY

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_XY_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_gp_XY self, NCollection_Array1_gp_XY theOther) -> NCollection_Array1_gp_XY
        assign(NCollection_Array1_gp_XY self, NCollection_Array1_gp_XY theOther) -> NCollection_Array1_gp_XY

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_XY_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_XY_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_gp_XY self) -> gp_XY

        @return first element

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_XY_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_XY_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_gp_XY self) -> gp_XY

        @return last element

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_XY_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_XY_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_gp_XY self, Standard_Integer const theIndex) -> gp_XY

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_XY_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_XY___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_XY_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_gp_XY self, Standard_Integer const theIndex, gp_XY theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_XY_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_gp_XY self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _TColgp.NCollection_Array1_gp_XY_Resize(self, *args)

    __swig_destroy__ = _TColgp.delete_NCollection_Array1_gp_XY
NCollection_Array1_gp_XY_swigregister = _TColgp.NCollection_Array1_gp_XY_swigregister
NCollection_Array1_gp_XY_swigregister(NCollection_Array1_gp_XY)


try:
	TColgp_Array1OfXY = NCollection_Array1_gp_XY
except NameError:
	pass # does not exist, probably ignored

class NCollection_Sequence_gp_Dir2d(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_gp_Dir2d self) -> NCollection_Sequence< gp_Dir2d >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _TColgp.NCollection_Sequence_gp_Dir2d_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_gp_Dir2d self) -> NCollection_Sequence< gp_Dir2d >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _TColgp.NCollection_Sequence_gp_Dir2d_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_gp_Dir2d self) -> NCollection_Sequence< gp_Dir2d >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Sequence_gp_Dir2d_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_gp_Dir2d self) -> NCollection_Sequence< gp_Dir2d >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Sequence_gp_Dir2d_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _TColgp.new_NCollection_Sequence_gp_Dir2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_gp_Dir2d self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Dir2d_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_gp_Dir2d self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Dir2d_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_gp_Dir2d self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Dir2d_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_gp_Dir2d self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Dir2d_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_gp_Dir2d self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Sequence_gp_Dir2d_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_gp_Dir2d self)

        Reverse sequence


        """
        return _TColgp.NCollection_Sequence_gp_Dir2d_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_gp_Dir2d self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _TColgp.NCollection_Sequence_gp_Dir2d_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColgp.NCollection_Sequence_gp_Dir2d_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_gp_Dir2d self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColgp.NCollection_Sequence_gp_Dir2d_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_gp_Dir2d self, NCollection_Sequence_gp_Dir2d theOther) -> NCollection_Sequence_gp_Dir2d

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Dir2d_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_gp_Dir2d self, NCollection_Sequence_gp_Dir2d theOther) -> NCollection_Sequence_gp_Dir2d

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Dir2d_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_gp_Dir2d self, NCollection_Sequence< gp_Dir2d >::Iterator & thePosition)
        Remove(NCollection_Sequence_gp_Dir2d self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_gp_Dir2d self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _TColgp.NCollection_Sequence_gp_Dir2d_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_gp_Dir2d self, gp_Dir2d theItem)
        Append(NCollection_Sequence_gp_Dir2d self, NCollection_Sequence_gp_Dir2d theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Dir2d_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_gp_Dir2d self, gp_Dir2d theItem)
        Prepend(NCollection_Sequence_gp_Dir2d self, NCollection_Sequence_gp_Dir2d theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Dir2d_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_gp_Dir2d self, Standard_Integer const theIndex, gp_Dir2d theItem)
        InsertBefore(NCollection_Sequence_gp_Dir2d self, Standard_Integer const theIndex, NCollection_Sequence_gp_Dir2d theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Dir2d_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_gp_Dir2d self, NCollection_Sequence< gp_Dir2d >::Iterator & thePosition, gp_Dir2d theItem)
        InsertAfter(NCollection_Sequence_gp_Dir2d self, Standard_Integer const theIndex, NCollection_Sequence_gp_Dir2d theSeq)
        InsertAfter(NCollection_Sequence_gp_Dir2d self, Standard_Integer const theIndex, gp_Dir2d theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Dir2d_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_gp_Dir2d self, Standard_Integer const theIndex, NCollection_Sequence_gp_Dir2d theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Dir2d_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Dir2d_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_gp_Dir2d self) -> gp_Dir2d

        First item access

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Dir2d_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Dir2d_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_gp_Dir2d self) -> gp_Dir2d

        Last item access

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Dir2d_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Dir2d_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_gp_Dir2d self, Standard_Integer const theIndex) -> gp_Dir2d

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Dir2d_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Dir2d___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_gp_Dir2d self, Standard_Integer const theIndex, gp_Dir2d theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Dir2d_SetValue(self, *args)


    def __iter__(self):
        return _TColgp.NCollection_Sequence_gp_Dir2d___iter__(self)
    __swig_destroy__ = _TColgp.delete_NCollection_Sequence_gp_Dir2d
NCollection_Sequence_gp_Dir2d_swigregister = _TColgp.NCollection_Sequence_gp_Dir2d_swigregister
NCollection_Sequence_gp_Dir2d_swigregister(NCollection_Sequence_gp_Dir2d)

def NCollection_Sequence_gp_Dir2d_delNode(*args):
    """
    NCollection_Sequence_gp_Dir2d_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _TColgp.NCollection_Sequence_gp_Dir2d_delNode(*args)

class NCollection_Sequence_gp_Dir2d_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _TColgp.new_NCollection_Sequence_gp_Dir2d_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TColgp.delete_NCollection_Sequence_gp_Dir2d_IteratorHelper

    def __next__(self):
        return _TColgp.NCollection_Sequence_gp_Dir2d_IteratorHelper___next__(self)
NCollection_Sequence_gp_Dir2d_IteratorHelper_swigregister = _TColgp.NCollection_Sequence_gp_Dir2d_IteratorHelper_swigregister
NCollection_Sequence_gp_Dir2d_IteratorHelper_swigregister(NCollection_Sequence_gp_Dir2d_IteratorHelper)


try:
	TColgp_SequenceOfDir2d = NCollection_Sequence_gp_Dir2d
except NameError:
	pass # does not exist, probably ignored

class Handle_TColgp_HArray1OfXY(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HArray1OfXY self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HArray1OfXY_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HArray1OfXY self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HArray1OfXY_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HArray1OfXY self, TColgp_HArray1OfXY thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfXY_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HArray1OfXY self, Handle_TColgp_HArray1OfXY theHandle) -> Handle_TColgp_HArray1OfXY
        assign(Handle_TColgp_HArray1OfXY self, TColgp_HArray1OfXY thePtr) -> Handle_TColgp_HArray1OfXY
        assign(Handle_TColgp_HArray1OfXY self, Handle_TColgp_HArray1OfXY theHandle) -> Handle_TColgp_HArray1OfXY

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HArray1OfXY_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HArray1OfXY self) -> TColgp_HArray1OfXY

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfXY_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HArray1OfXY self) -> TColgp_HArray1OfXY

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfXY___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HArray1OfXY self) -> TColgp_HArray1OfXY

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HArray1OfXY___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HArray1OfXY___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HArray1OfXY___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HArray1OfXY(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HArray1OfXY_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HArray1OfXY

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfXY

        """
        res = _TColgp.Handle_TColgp_HArray1OfXY_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_TColgp_HArray1OfXY self) -> NCollection_Array1_gp_XY

        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfXY

        """
        return _TColgp.Handle_TColgp_HArray1OfXY_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HArray1OfXY self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HArray1OfXY_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray1OfXY_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray1OfXY_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HArray1OfXY self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HArray1OfXY_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HArray1OfXY self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HArray1OfXY self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray1OfXY_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HArray1OfXY self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HArray1OfXY self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray1OfXY_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HArray1OfXY self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HArray1OfXY_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HArray1OfXY self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray1OfXY_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HArray1OfXY self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HArray1OfXY_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HArray1OfXY self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray1OfXY_DecrementRefCounter(self, *args)

Handle_TColgp_HArray1OfXY_swigregister = _TColgp.Handle_TColgp_HArray1OfXY_swigregister
Handle_TColgp_HArray1OfXY_swigregister(Handle_TColgp_HArray1OfXY)

def Handle_TColgp_HArray1OfXY_DownCast(thing):
    return _TColgp.Handle_TColgp_HArray1OfXY_DownCast(thing)
Handle_TColgp_HArray1OfXY_DownCast = _TColgp.Handle_TColgp_HArray1OfXY_DownCast

class NCollection_Array1_gp_Vec(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_gp_Vec self) -> NCollection_Array1< gp_Vec >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _TColgp.NCollection_Array1_gp_Vec_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_gp_Vec self) -> NCollection_Array1< gp_Vec >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _TColgp.NCollection_Array1_gp_Vec_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_gp_Vec self) -> NCollection_Array1< gp_Vec >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Array1_gp_Vec_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_gp_Vec self) -> NCollection_Array1< gp_Vec >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Array1_gp_Vec_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _TColgp.new_NCollection_Array1_gp_Vec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_gp_Vec self, gp_Vec theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Vec_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_gp_Vec self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Vec_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_gp_Vec self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Vec_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_gp_Vec self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_Vec_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_gp_Vec self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Vec_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_gp_Vec self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Vec_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_gp_Vec self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_Vec_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_gp_Vec self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_Vec_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_gp_Vec self, NCollection_Array1_gp_Vec theOther) -> NCollection_Array1_gp_Vec

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_Vec_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_gp_Vec self, NCollection_Array1_gp_Vec theOther) -> NCollection_Array1_gp_Vec

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_Vec_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_gp_Vec self, NCollection_Array1_gp_Vec theOther) -> NCollection_Array1_gp_Vec
        assign(NCollection_Array1_gp_Vec self, NCollection_Array1_gp_Vec theOther) -> NCollection_Array1_gp_Vec

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_Vec_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Vec_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_gp_Vec self) -> gp_Vec

        @return first element

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Vec_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Vec_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_gp_Vec self) -> gp_Vec

        @return last element

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Vec_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Vec_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_gp_Vec self, Standard_Integer const theIndex) -> gp_Vec

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Vec_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Vec___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Vec_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_gp_Vec self, Standard_Integer const theIndex, gp_Vec theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Vec_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_gp_Vec self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _TColgp.NCollection_Array1_gp_Vec_Resize(self, *args)

    __swig_destroy__ = _TColgp.delete_NCollection_Array1_gp_Vec
NCollection_Array1_gp_Vec_swigregister = _TColgp.NCollection_Array1_gp_Vec_swigregister
NCollection_Array1_gp_Vec_swigregister(NCollection_Array1_gp_Vec)


try:
	TColgp_Array1OfVec = NCollection_Array1_gp_Vec
except NameError:
	pass # does not exist, probably ignored

class TColgp_HArray1OfXYZ(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HArray1OfXYZ
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HArray1OfXYZ(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HArray1OfXYZ self, Standard_Integer const theLower, Standard_Integer const theUpper) -> TColgp_HArray1OfXYZ
        __init__(TColgp_HArray1OfXYZ self, Standard_Integer const theLower, Standard_Integer const theUpper, gp_XYZ theValue) -> TColgp_HArray1OfXYZ
        __init__(TColgp_HArray1OfXYZ self, NCollection_Array1_gp_XYZ theOther) -> TColgp_HArray1OfXYZ

        :type theOther: OCC.wrapper.TColgp.TColgp_Array1OfXYZ

        """
        this = _TColgp.new_TColgp_HArray1OfXYZ(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfXYZ

        """
        res = _TColgp.TColgp_HArray1OfXYZ_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(TColgp_HArray1OfXYZ self) -> NCollection_Array1_gp_XYZ

        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfXYZ

        """
        return _TColgp.TColgp_HArray1OfXYZ_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HArray1OfXYZ_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HArray1OfXYZ_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HArray1OfXYZ_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HArray1OfXYZ
TColgp_HArray1OfXYZ_swigregister = _TColgp.TColgp_HArray1OfXYZ_swigregister
TColgp_HArray1OfXYZ_swigregister(TColgp_HArray1OfXYZ)

def TColgp_HArray1OfXYZ_get_type_name(*args):
    """
    TColgp_HArray1OfXYZ_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HArray1OfXYZ_get_type_name(*args)

def TColgp_HArray1OfXYZ_get_type_descriptor(*args):
    """
    TColgp_HArray1OfXYZ_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HArray1OfXYZ_get_type_descriptor(*args)

class Handle_TColgp_HArray2OfVec2d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HArray2OfVec2d self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HArray2OfVec2d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HArray2OfVec2d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HArray2OfVec2d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HArray2OfVec2d self, TColgp_HArray2OfVec2d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfVec2d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HArray2OfVec2d self, Handle_TColgp_HArray2OfVec2d theHandle) -> Handle_TColgp_HArray2OfVec2d
        assign(Handle_TColgp_HArray2OfVec2d self, TColgp_HArray2OfVec2d thePtr) -> Handle_TColgp_HArray2OfVec2d
        assign(Handle_TColgp_HArray2OfVec2d self, Handle_TColgp_HArray2OfVec2d theHandle) -> Handle_TColgp_HArray2OfVec2d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HArray2OfVec2d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HArray2OfVec2d self) -> TColgp_HArray2OfVec2d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfVec2d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HArray2OfVec2d self) -> TColgp_HArray2OfVec2d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfVec2d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HArray2OfVec2d self) -> TColgp_HArray2OfVec2d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HArray2OfVec2d___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HArray2OfVec2d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HArray2OfVec2d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HArray2OfVec2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HArray2OfVec2d_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HArray2OfVec2d

    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfVec2d

        """
        res = _TColgp.Handle_TColgp_HArray2OfVec2d_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(Handle_TColgp_HArray2OfVec2d self) -> NCollection_Array2_gp_Vec2d

        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfVec2d

        """
        return _TColgp.Handle_TColgp_HArray2OfVec2d_ChangeArray2(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HArray2OfVec2d self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HArray2OfVec2d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray2OfVec2d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray2OfVec2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HArray2OfVec2d self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HArray2OfVec2d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HArray2OfVec2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HArray2OfVec2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray2OfVec2d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HArray2OfVec2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HArray2OfVec2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray2OfVec2d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HArray2OfVec2d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HArray2OfVec2d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HArray2OfVec2d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfVec2d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HArray2OfVec2d self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HArray2OfVec2d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HArray2OfVec2d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfVec2d_DecrementRefCounter(self, *args)

Handle_TColgp_HArray2OfVec2d_swigregister = _TColgp.Handle_TColgp_HArray2OfVec2d_swigregister
Handle_TColgp_HArray2OfVec2d_swigregister(Handle_TColgp_HArray2OfVec2d)

def Handle_TColgp_HArray2OfVec2d_DownCast(thing):
    return _TColgp.Handle_TColgp_HArray2OfVec2d_DownCast(thing)
Handle_TColgp_HArray2OfVec2d_DownCast = _TColgp.Handle_TColgp_HArray2OfVec2d_DownCast

class NCollection_Array1_gp_XYZ(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_gp_XYZ self) -> NCollection_Array1< gp_XYZ >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _TColgp.NCollection_Array1_gp_XYZ_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_gp_XYZ self) -> NCollection_Array1< gp_XYZ >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _TColgp.NCollection_Array1_gp_XYZ_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_gp_XYZ self) -> NCollection_Array1< gp_XYZ >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Array1_gp_XYZ_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_gp_XYZ self) -> NCollection_Array1< gp_XYZ >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Array1_gp_XYZ_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _TColgp.new_NCollection_Array1_gp_XYZ(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_gp_XYZ self, gp_XYZ theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_XYZ_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_gp_XYZ self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_XYZ_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_gp_XYZ self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_XYZ_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_gp_XYZ self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_XYZ_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_gp_XYZ self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_XYZ_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_gp_XYZ self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_XYZ_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_gp_XYZ self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_XYZ_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_gp_XYZ self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_XYZ_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_gp_XYZ self, NCollection_Array1_gp_XYZ theOther) -> NCollection_Array1_gp_XYZ

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_XYZ_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_gp_XYZ self, NCollection_Array1_gp_XYZ theOther) -> NCollection_Array1_gp_XYZ

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_XYZ_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_gp_XYZ self, NCollection_Array1_gp_XYZ theOther) -> NCollection_Array1_gp_XYZ
        assign(NCollection_Array1_gp_XYZ self, NCollection_Array1_gp_XYZ theOther) -> NCollection_Array1_gp_XYZ

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_XYZ_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_XYZ_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_gp_XYZ self) -> gp_XYZ

        @return first element

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_XYZ_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_XYZ_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_gp_XYZ self) -> gp_XYZ

        @return last element

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_XYZ_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_XYZ_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_gp_XYZ self, Standard_Integer const theIndex) -> gp_XYZ

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_XYZ_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_XYZ___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_XYZ_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_gp_XYZ self, Standard_Integer const theIndex, gp_XYZ theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_XYZ_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_gp_XYZ self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _TColgp.NCollection_Array1_gp_XYZ_Resize(self, *args)

    __swig_destroy__ = _TColgp.delete_NCollection_Array1_gp_XYZ
NCollection_Array1_gp_XYZ_swigregister = _TColgp.NCollection_Array1_gp_XYZ_swigregister
NCollection_Array1_gp_XYZ_swigregister(NCollection_Array1_gp_XYZ)


try:
	TColgp_Array1OfXYZ = NCollection_Array1_gp_XYZ
except NameError:
	pass # does not exist, probably ignored

class NCollection_Array2_gp_Pnt2d(object):
    """
    Purpose:   The class Array2 represents bi-dimensional arrays 
    of fixed size known at run time. 
    The ranges of indices are user defined.

    Warning:   Programs clients of such class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.LowerRow(); i <= A.UpperRow(); i++)
    for (j = A.LowerCol(); j <= A.UpperCol(); j++)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Purpose:   The class Array2 represents bi-dimensional arrays 
        of fixed size known at run time. 
        The ranges of indices are user defined.

        Warning:   Programs clients of such class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.LowerRow(); i <= A.UpperRow(); i++)
        for (j = A.LowerCol(); j <= A.UpperCol(); j++)
        """
        this = _TColgp.new_NCollection_Array2_gp_Pnt2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array2_gp_Pnt2d self, gp_Pnt2d theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_Pnt2d_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array2_gp_Pnt2d self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Pnt2d_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array2_gp_Pnt2d self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Pnt2d_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(NCollection_Array2_gp_Pnt2d self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Pnt2d_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(NCollection_Array2_gp_Pnt2d self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Pnt2d_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(NCollection_Array2_gp_Pnt2d self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Pnt2d_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(NCollection_Array2_gp_Pnt2d self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Pnt2d_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(NCollection_Array2_gp_Pnt2d self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Pnt2d_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(NCollection_Array2_gp_Pnt2d self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Pnt2d_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array2_gp_Pnt2d self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array2_gp_Pnt2d_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array2_gp_Pnt2d self, NCollection_Array2_gp_Pnt2d theOther) -> NCollection_Array2_gp_Pnt2d

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TColgp.NCollection_Array2_gp_Pnt2d_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array2_gp_Pnt2d self, NCollection_Array2_gp_Pnt2d theOther) -> NCollection_Array2_gp_Pnt2d

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TColgp.NCollection_Array2_gp_Pnt2d_assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array2_gp_Pnt2d_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array2_gp_Pnt2d self, Standard_Integer const theRow, Standard_Integer const theCol) -> gp_Pnt2d

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_Pnt2d_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array2_gp_Pnt2d___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array2_gp_Pnt2d self, Standard_Integer const theRow, Standard_Integer const theCol, gp_Pnt2d theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_Pnt2d_SetValue(self, *args)

    __swig_destroy__ = _TColgp.delete_NCollection_Array2_gp_Pnt2d
NCollection_Array2_gp_Pnt2d_swigregister = _TColgp.NCollection_Array2_gp_Pnt2d_swigregister
NCollection_Array2_gp_Pnt2d_swigregister(NCollection_Array2_gp_Pnt2d)


try:
	TColgp_Array2OfPnt2d = NCollection_Array2_gp_Pnt2d
except NameError:
	pass # does not exist, probably ignored

class TColgp_HArray2OfDir(NCollection_Array2_gp_Dir, Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HArray2OfDir
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HArray2OfDir(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HArray2OfDir self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp) -> TColgp_HArray2OfDir
        __init__(TColgp_HArray2OfDir self, Standard_Integer const theRowLow, Standard_Integer const theRowUpp, Standard_Integer const theColLow, Standard_Integer const theColUpp, gp_Dir theValue) -> TColgp_HArray2OfDir
        __init__(TColgp_HArray2OfDir self, NCollection_Array2_gp_Dir theOther) -> TColgp_HArray2OfDir

        :type theOther: OCC.wrapper.TColgp.TColgp_Array2OfDir

        """
        this = _TColgp.new_TColgp_HArray2OfDir(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfDir

        """
        res = _TColgp.TColgp_HArray2OfDir_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(TColgp_HArray2OfDir self) -> NCollection_Array2_gp_Dir

        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfDir

        """
        return _TColgp.TColgp_HArray2OfDir_ChangeArray2(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HArray2OfDir_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HArray2OfDir_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HArray2OfDir_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HArray2OfDir
TColgp_HArray2OfDir_swigregister = _TColgp.TColgp_HArray2OfDir_swigregister
TColgp_HArray2OfDir_swigregister(TColgp_HArray2OfDir)

def TColgp_HArray2OfDir_get_type_name(*args):
    """
    TColgp_HArray2OfDir_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HArray2OfDir_get_type_name(*args)

def TColgp_HArray2OfDir_get_type_descriptor(*args):
    """
    TColgp_HArray2OfDir_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HArray2OfDir_get_type_descriptor(*args)

class NCollection_Array2_gp_Circ2d(object):
    """
    Purpose:   The class Array2 represents bi-dimensional arrays 
    of fixed size known at run time. 
    The ranges of indices are user defined.

    Warning:   Programs clients of such class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.LowerRow(); i <= A.UpperRow(); i++)
    for (j = A.LowerCol(); j <= A.UpperCol(); j++)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Purpose:   The class Array2 represents bi-dimensional arrays 
        of fixed size known at run time. 
        The ranges of indices are user defined.

        Warning:   Programs clients of such class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.LowerRow(); i <= A.UpperRow(); i++)
        for (j = A.LowerCol(); j <= A.UpperCol(); j++)
        """
        this = _TColgp.new_NCollection_Array2_gp_Circ2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array2_gp_Circ2d self, gp_Circ2d theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_Circ2d_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array2_gp_Circ2d self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Circ2d_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array2_gp_Circ2d self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Circ2d_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(NCollection_Array2_gp_Circ2d self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Circ2d_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(NCollection_Array2_gp_Circ2d self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Circ2d_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(NCollection_Array2_gp_Circ2d self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Circ2d_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(NCollection_Array2_gp_Circ2d self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Circ2d_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(NCollection_Array2_gp_Circ2d self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Circ2d_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(NCollection_Array2_gp_Circ2d self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Circ2d_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array2_gp_Circ2d self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array2_gp_Circ2d_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array2_gp_Circ2d self, NCollection_Array2_gp_Circ2d theOther) -> NCollection_Array2_gp_Circ2d

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TColgp.NCollection_Array2_gp_Circ2d_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array2_gp_Circ2d self, NCollection_Array2_gp_Circ2d theOther) -> NCollection_Array2_gp_Circ2d

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TColgp.NCollection_Array2_gp_Circ2d_assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array2_gp_Circ2d_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array2_gp_Circ2d self, Standard_Integer const theRow, Standard_Integer const theCol) -> gp_Circ2d

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_Circ2d_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array2_gp_Circ2d___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array2_gp_Circ2d self, Standard_Integer const theRow, Standard_Integer const theCol, gp_Circ2d theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_Circ2d_SetValue(self, *args)

    __swig_destroy__ = _TColgp.delete_NCollection_Array2_gp_Circ2d
NCollection_Array2_gp_Circ2d_swigregister = _TColgp.NCollection_Array2_gp_Circ2d_swigregister
NCollection_Array2_gp_Circ2d_swigregister(NCollection_Array2_gp_Circ2d)


try:
	TColgp_Array2OfCirc2d = NCollection_Array2_gp_Circ2d
except NameError:
	pass # does not exist, probably ignored

class NCollection_Array2_gp_Dir2d(object):
    """
    Purpose:   The class Array2 represents bi-dimensional arrays 
    of fixed size known at run time. 
    The ranges of indices are user defined.

    Warning:   Programs clients of such class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.LowerRow(); i <= A.UpperRow(); i++)
    for (j = A.LowerCol(); j <= A.UpperCol(); j++)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Purpose:   The class Array2 represents bi-dimensional arrays 
        of fixed size known at run time. 
        The ranges of indices are user defined.

        Warning:   Programs clients of such class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.LowerRow(); i <= A.UpperRow(); i++)
        for (j = A.LowerCol(); j <= A.UpperCol(); j++)
        """
        this = _TColgp.new_NCollection_Array2_gp_Dir2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array2_gp_Dir2d self, gp_Dir2d theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_Dir2d_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array2_gp_Dir2d self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Dir2d_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array2_gp_Dir2d self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Dir2d_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(NCollection_Array2_gp_Dir2d self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Dir2d_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(NCollection_Array2_gp_Dir2d self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Dir2d_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(NCollection_Array2_gp_Dir2d self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Dir2d_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(NCollection_Array2_gp_Dir2d self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Dir2d_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(NCollection_Array2_gp_Dir2d self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Dir2d_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(NCollection_Array2_gp_Dir2d self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Dir2d_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array2_gp_Dir2d self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array2_gp_Dir2d_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array2_gp_Dir2d self, NCollection_Array2_gp_Dir2d theOther) -> NCollection_Array2_gp_Dir2d

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TColgp.NCollection_Array2_gp_Dir2d_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array2_gp_Dir2d self, NCollection_Array2_gp_Dir2d theOther) -> NCollection_Array2_gp_Dir2d

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TColgp.NCollection_Array2_gp_Dir2d_assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array2_gp_Dir2d_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array2_gp_Dir2d self, Standard_Integer const theRow, Standard_Integer const theCol) -> gp_Dir2d

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_Dir2d_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array2_gp_Dir2d___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array2_gp_Dir2d self, Standard_Integer const theRow, Standard_Integer const theCol, gp_Dir2d theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_Dir2d_SetValue(self, *args)

    __swig_destroy__ = _TColgp.delete_NCollection_Array2_gp_Dir2d
NCollection_Array2_gp_Dir2d_swigregister = _TColgp.NCollection_Array2_gp_Dir2d_swigregister
NCollection_Array2_gp_Dir2d_swigregister(NCollection_Array2_gp_Dir2d)


try:
	TColgp_Array2OfDir2d = NCollection_Array2_gp_Dir2d
except NameError:
	pass # does not exist, probably ignored

class NCollection_Array2_gp_Vec2d(object):
    """
    Purpose:   The class Array2 represents bi-dimensional arrays 
    of fixed size known at run time. 
    The ranges of indices are user defined.

    Warning:   Programs clients of such class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.LowerRow(); i <= A.UpperRow(); i++)
    for (j = A.LowerCol(); j <= A.UpperCol(); j++)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Purpose:   The class Array2 represents bi-dimensional arrays 
        of fixed size known at run time. 
        The ranges of indices are user defined.

        Warning:   Programs clients of such class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.LowerRow(); i <= A.UpperRow(); i++)
        for (j = A.LowerCol(); j <= A.UpperCol(); j++)
        """
        this = _TColgp.new_NCollection_Array2_gp_Vec2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array2_gp_Vec2d self, gp_Vec2d theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_Vec2d_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array2_gp_Vec2d self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Vec2d_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array2_gp_Vec2d self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Vec2d_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(NCollection_Array2_gp_Vec2d self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Vec2d_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(NCollection_Array2_gp_Vec2d self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Vec2d_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(NCollection_Array2_gp_Vec2d self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Vec2d_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(NCollection_Array2_gp_Vec2d self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Vec2d_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(NCollection_Array2_gp_Vec2d self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Vec2d_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(NCollection_Array2_gp_Vec2d self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Vec2d_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array2_gp_Vec2d self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array2_gp_Vec2d_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array2_gp_Vec2d self, NCollection_Array2_gp_Vec2d theOther) -> NCollection_Array2_gp_Vec2d

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TColgp.NCollection_Array2_gp_Vec2d_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array2_gp_Vec2d self, NCollection_Array2_gp_Vec2d theOther) -> NCollection_Array2_gp_Vec2d

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TColgp.NCollection_Array2_gp_Vec2d_assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array2_gp_Vec2d_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array2_gp_Vec2d self, Standard_Integer const theRow, Standard_Integer const theCol) -> gp_Vec2d

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_Vec2d_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array2_gp_Vec2d___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array2_gp_Vec2d self, Standard_Integer const theRow, Standard_Integer const theCol, gp_Vec2d theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_Vec2d_SetValue(self, *args)

    __swig_destroy__ = _TColgp.delete_NCollection_Array2_gp_Vec2d
NCollection_Array2_gp_Vec2d_swigregister = _TColgp.NCollection_Array2_gp_Vec2d_swigregister
NCollection_Array2_gp_Vec2d_swigregister(NCollection_Array2_gp_Vec2d)


try:
	TColgp_Array2OfVec2d = NCollection_Array2_gp_Vec2d
except NameError:
	pass # does not exist, probably ignored

class Handle_TColgp_HArray1OfPnt(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HArray1OfPnt self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HArray1OfPnt_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HArray1OfPnt self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HArray1OfPnt self, TColgp_HArray1OfPnt thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HArray1OfPnt self, Handle_TColgp_HArray1OfPnt theHandle) -> Handle_TColgp_HArray1OfPnt
        assign(Handle_TColgp_HArray1OfPnt self, TColgp_HArray1OfPnt thePtr) -> Handle_TColgp_HArray1OfPnt
        assign(Handle_TColgp_HArray1OfPnt self, Handle_TColgp_HArray1OfPnt theHandle) -> Handle_TColgp_HArray1OfPnt

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HArray1OfPnt self) -> TColgp_HArray1OfPnt

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HArray1OfPnt self) -> TColgp_HArray1OfPnt

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HArray1OfPnt self) -> TColgp_HArray1OfPnt

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HArray1OfPnt___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HArray1OfPnt___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HArray1OfPnt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HArray1OfPnt_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HArray1OfPnt

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfPnt

        """
        res = _TColgp.Handle_TColgp_HArray1OfPnt_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_TColgp_HArray1OfPnt self) -> NCollection_Array1_gp_Pnt

        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfPnt

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HArray1OfPnt self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray1OfPnt_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray1OfPnt_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HArray1OfPnt self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HArray1OfPnt_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HArray1OfPnt self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HArray1OfPnt self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HArray1OfPnt self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HArray1OfPnt self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HArray1OfPnt self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HArray1OfPnt self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HArray1OfPnt self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HArray1OfPnt_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HArray1OfPnt self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray1OfPnt_DecrementRefCounter(self, *args)

Handle_TColgp_HArray1OfPnt_swigregister = _TColgp.Handle_TColgp_HArray1OfPnt_swigregister
Handle_TColgp_HArray1OfPnt_swigregister(Handle_TColgp_HArray1OfPnt)

def Handle_TColgp_HArray1OfPnt_DownCast(thing):
    return _TColgp.Handle_TColgp_HArray1OfPnt_DownCast(thing)
Handle_TColgp_HArray1OfPnt_DownCast = _TColgp.Handle_TColgp_HArray1OfPnt_DownCast

class NCollection_Array1_gp_Pnt2d(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_gp_Pnt2d self) -> NCollection_Array1< gp_Pnt2d >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _TColgp.NCollection_Array1_gp_Pnt2d_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_gp_Pnt2d self) -> NCollection_Array1< gp_Pnt2d >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _TColgp.NCollection_Array1_gp_Pnt2d_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_gp_Pnt2d self) -> NCollection_Array1< gp_Pnt2d >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Array1_gp_Pnt2d_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_gp_Pnt2d self) -> NCollection_Array1< gp_Pnt2d >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Array1_gp_Pnt2d_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _TColgp.new_NCollection_Array1_gp_Pnt2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_gp_Pnt2d self, gp_Pnt2d theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Pnt2d_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_gp_Pnt2d self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Pnt2d_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_gp_Pnt2d self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Pnt2d_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_gp_Pnt2d self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_Pnt2d_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_gp_Pnt2d self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Pnt2d_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_gp_Pnt2d self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Pnt2d_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_gp_Pnt2d self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_Pnt2d_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_gp_Pnt2d self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_Pnt2d_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_gp_Pnt2d self, NCollection_Array1_gp_Pnt2d theOther) -> NCollection_Array1_gp_Pnt2d

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_Pnt2d_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_gp_Pnt2d self, NCollection_Array1_gp_Pnt2d theOther) -> NCollection_Array1_gp_Pnt2d

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_Pnt2d_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_gp_Pnt2d self, NCollection_Array1_gp_Pnt2d theOther) -> NCollection_Array1_gp_Pnt2d
        assign(NCollection_Array1_gp_Pnt2d self, NCollection_Array1_gp_Pnt2d theOther) -> NCollection_Array1_gp_Pnt2d

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_Pnt2d_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Pnt2d_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_gp_Pnt2d self) -> gp_Pnt2d

        @return first element

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Pnt2d_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Pnt2d_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_gp_Pnt2d self) -> gp_Pnt2d

        @return last element

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Pnt2d_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Pnt2d_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_gp_Pnt2d self, Standard_Integer const theIndex) -> gp_Pnt2d

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Pnt2d_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Pnt2d___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Pnt2d_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_gp_Pnt2d self, Standard_Integer const theIndex, gp_Pnt2d theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Pnt2d_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_gp_Pnt2d self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _TColgp.NCollection_Array1_gp_Pnt2d_Resize(self, *args)

    __swig_destroy__ = _TColgp.delete_NCollection_Array1_gp_Pnt2d
NCollection_Array1_gp_Pnt2d_swigregister = _TColgp.NCollection_Array1_gp_Pnt2d_swigregister
NCollection_Array1_gp_Pnt2d_swigregister(NCollection_Array1_gp_Pnt2d)


try:
	TColgp_Array1OfPnt2d = NCollection_Array1_gp_Pnt2d
except NameError:
	pass # does not exist, probably ignored

class NCollection_Array1_gp_Dir(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_gp_Dir self) -> NCollection_Array1< gp_Dir >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _TColgp.NCollection_Array1_gp_Dir_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_gp_Dir self) -> NCollection_Array1< gp_Dir >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _TColgp.NCollection_Array1_gp_Dir_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_gp_Dir self) -> NCollection_Array1< gp_Dir >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Array1_gp_Dir_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_gp_Dir self) -> NCollection_Array1< gp_Dir >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Array1_gp_Dir_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _TColgp.new_NCollection_Array1_gp_Dir(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_gp_Dir self, gp_Dir theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Dir_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_gp_Dir self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Dir_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_gp_Dir self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Dir_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_gp_Dir self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_Dir_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_gp_Dir self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Dir_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_gp_Dir self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Dir_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_gp_Dir self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_Dir_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_gp_Dir self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_Dir_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_gp_Dir self, NCollection_Array1_gp_Dir theOther) -> NCollection_Array1_gp_Dir

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_Dir_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_gp_Dir self, NCollection_Array1_gp_Dir theOther) -> NCollection_Array1_gp_Dir

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_Dir_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_gp_Dir self, NCollection_Array1_gp_Dir theOther) -> NCollection_Array1_gp_Dir
        assign(NCollection_Array1_gp_Dir self, NCollection_Array1_gp_Dir theOther) -> NCollection_Array1_gp_Dir

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_Dir_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Dir_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_gp_Dir self) -> gp_Dir

        @return first element

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Dir_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Dir_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_gp_Dir self) -> gp_Dir

        @return last element

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Dir_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Dir_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_gp_Dir self, Standard_Integer const theIndex) -> gp_Dir

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Dir_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Dir___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Dir_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_gp_Dir self, Standard_Integer const theIndex, gp_Dir theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Dir_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_gp_Dir self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _TColgp.NCollection_Array1_gp_Dir_Resize(self, *args)

    __swig_destroy__ = _TColgp.delete_NCollection_Array1_gp_Dir
NCollection_Array1_gp_Dir_swigregister = _TColgp.NCollection_Array1_gp_Dir_swigregister
NCollection_Array1_gp_Dir_swigregister(NCollection_Array1_gp_Dir)


try:
	TColgp_Array1OfDir = NCollection_Array1_gp_Dir
except NameError:
	pass # does not exist, probably ignored

class Handle_TColgp_HSequenceOfXY(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HSequenceOfXY self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HSequenceOfXY_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HSequenceOfXY self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HSequenceOfXY_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HSequenceOfXY self, TColgp_HSequenceOfXY thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HSequenceOfXY_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HSequenceOfXY self, Handle_TColgp_HSequenceOfXY theHandle) -> Handle_TColgp_HSequenceOfXY
        assign(Handle_TColgp_HSequenceOfXY self, TColgp_HSequenceOfXY thePtr) -> Handle_TColgp_HSequenceOfXY
        assign(Handle_TColgp_HSequenceOfXY self, Handle_TColgp_HSequenceOfXY theHandle) -> Handle_TColgp_HSequenceOfXY

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HSequenceOfXY_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HSequenceOfXY self) -> TColgp_HSequenceOfXY

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HSequenceOfXY_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HSequenceOfXY self) -> TColgp_HSequenceOfXY

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HSequenceOfXY___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HSequenceOfXY self) -> TColgp_HSequenceOfXY

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HSequenceOfXY___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HSequenceOfXY___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HSequenceOfXY___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HSequenceOfXY(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HSequenceOfXY_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HSequenceOfXY

    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfXY

        """
        res = _TColgp.Handle_TColgp_HSequenceOfXY_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(Handle_TColgp_HSequenceOfXY self, gp_XY theItem)
        Append(Handle_TColgp_HSequenceOfXY self, NCollection_Sequence_gp_XY theSequence)

        :type theSequence: OCC.wrapper.TColgp.TColgp_SequenceOfXY

        """
        return _TColgp.Handle_TColgp_HSequenceOfXY_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(Handle_TColgp_HSequenceOfXY self) -> NCollection_Sequence_gp_XY

        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfXY

        """
        return _TColgp.Handle_TColgp_HSequenceOfXY_ChangeSequence(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HSequenceOfXY self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HSequenceOfXY_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HSequenceOfXY_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HSequenceOfXY_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HSequenceOfXY self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HSequenceOfXY_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HSequenceOfXY self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HSequenceOfXY self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HSequenceOfXY_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HSequenceOfXY self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HSequenceOfXY self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HSequenceOfXY_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HSequenceOfXY self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HSequenceOfXY_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HSequenceOfXY self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HSequenceOfXY_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HSequenceOfXY self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HSequenceOfXY_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HSequenceOfXY self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HSequenceOfXY_DecrementRefCounter(self, *args)

Handle_TColgp_HSequenceOfXY_swigregister = _TColgp.Handle_TColgp_HSequenceOfXY_swigregister
Handle_TColgp_HSequenceOfXY_swigregister(Handle_TColgp_HSequenceOfXY)

def Handle_TColgp_HSequenceOfXY_DownCast(thing):
    return _TColgp.Handle_TColgp_HSequenceOfXY_DownCast(thing)
Handle_TColgp_HSequenceOfXY_DownCast = _TColgp.Handle_TColgp_HSequenceOfXY_DownCast

class Handle_TColgp_HArray1OfDir(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HArray1OfDir self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HArray1OfDir_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HArray1OfDir self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HArray1OfDir_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HArray1OfDir self, TColgp_HArray1OfDir thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfDir_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HArray1OfDir self, Handle_TColgp_HArray1OfDir theHandle) -> Handle_TColgp_HArray1OfDir
        assign(Handle_TColgp_HArray1OfDir self, TColgp_HArray1OfDir thePtr) -> Handle_TColgp_HArray1OfDir
        assign(Handle_TColgp_HArray1OfDir self, Handle_TColgp_HArray1OfDir theHandle) -> Handle_TColgp_HArray1OfDir

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HArray1OfDir_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HArray1OfDir self) -> TColgp_HArray1OfDir

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfDir_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HArray1OfDir self) -> TColgp_HArray1OfDir

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfDir___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HArray1OfDir self) -> TColgp_HArray1OfDir

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HArray1OfDir___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HArray1OfDir___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HArray1OfDir___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HArray1OfDir(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HArray1OfDir_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HArray1OfDir

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfDir

        """
        res = _TColgp.Handle_TColgp_HArray1OfDir_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_TColgp_HArray1OfDir self) -> NCollection_Array1_gp_Dir

        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfDir

        """
        return _TColgp.Handle_TColgp_HArray1OfDir_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HArray1OfDir self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HArray1OfDir_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray1OfDir_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray1OfDir_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HArray1OfDir self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HArray1OfDir_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HArray1OfDir self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HArray1OfDir self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray1OfDir_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HArray1OfDir self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HArray1OfDir self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray1OfDir_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HArray1OfDir self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HArray1OfDir_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HArray1OfDir self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray1OfDir_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HArray1OfDir self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HArray1OfDir_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HArray1OfDir self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray1OfDir_DecrementRefCounter(self, *args)

Handle_TColgp_HArray1OfDir_swigregister = _TColgp.Handle_TColgp_HArray1OfDir_swigregister
Handle_TColgp_HArray1OfDir_swigregister(Handle_TColgp_HArray1OfDir)

def Handle_TColgp_HArray1OfDir_DownCast(thing):
    return _TColgp.Handle_TColgp_HArray1OfDir_DownCast(thing)
Handle_TColgp_HArray1OfDir_DownCast = _TColgp.Handle_TColgp_HArray1OfDir_DownCast

class TColgp_HSequenceOfVec2d(NCollection_Sequence_gp_Vec2d, Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HSequenceOfVec2d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HSequenceOfVec2d(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HSequenceOfVec2d self) -> TColgp_HSequenceOfVec2d
        __init__(TColgp_HSequenceOfVec2d self, NCollection_Sequence_gp_Vec2d theOther) -> TColgp_HSequenceOfVec2d

        :type theOther: OCC.wrapper.TColgp.TColgp_SequenceOfVec2d

        """
        this = _TColgp.new_TColgp_HSequenceOfVec2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfVec2d

        """
        res = _TColgp.TColgp_HSequenceOfVec2d_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(TColgp_HSequenceOfVec2d self, gp_Vec2d theItem)
        Append(TColgp_HSequenceOfVec2d self, NCollection_Sequence_gp_Vec2d theSequence)

        :type theSequence: OCC.wrapper.TColgp.TColgp_SequenceOfVec2d

        """
        return _TColgp.TColgp_HSequenceOfVec2d_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(TColgp_HSequenceOfVec2d self) -> NCollection_Sequence_gp_Vec2d

        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfVec2d

        """
        return _TColgp.TColgp_HSequenceOfVec2d_ChangeSequence(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HSequenceOfVec2d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HSequenceOfVec2d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HSequenceOfVec2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HSequenceOfVec2d
TColgp_HSequenceOfVec2d_swigregister = _TColgp.TColgp_HSequenceOfVec2d_swigregister
TColgp_HSequenceOfVec2d_swigregister(TColgp_HSequenceOfVec2d)

def TColgp_HSequenceOfVec2d_get_type_name(*args):
    """
    TColgp_HSequenceOfVec2d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HSequenceOfVec2d_get_type_name(*args)

def TColgp_HSequenceOfVec2d_get_type_descriptor(*args):
    """
    TColgp_HSequenceOfVec2d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HSequenceOfVec2d_get_type_descriptor(*args)

class Handle_TColgp_HArray2OfXYZ(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HArray2OfXYZ self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HArray2OfXYZ self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HArray2OfXYZ self, TColgp_HArray2OfXYZ thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HArray2OfXYZ self, Handle_TColgp_HArray2OfXYZ theHandle) -> Handle_TColgp_HArray2OfXYZ
        assign(Handle_TColgp_HArray2OfXYZ self, TColgp_HArray2OfXYZ thePtr) -> Handle_TColgp_HArray2OfXYZ
        assign(Handle_TColgp_HArray2OfXYZ self, Handle_TColgp_HArray2OfXYZ theHandle) -> Handle_TColgp_HArray2OfXYZ

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HArray2OfXYZ self) -> TColgp_HArray2OfXYZ

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HArray2OfXYZ self) -> TColgp_HArray2OfXYZ

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HArray2OfXYZ self) -> TColgp_HArray2OfXYZ

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HArray2OfXYZ___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HArray2OfXYZ___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HArray2OfXYZ(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HArray2OfXYZ_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HArray2OfXYZ

    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfXYZ

        """
        res = _TColgp.Handle_TColgp_HArray2OfXYZ_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(Handle_TColgp_HArray2OfXYZ self) -> NCollection_Array2_gp_XYZ

        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfXYZ

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_ChangeArray2(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HArray2OfXYZ self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray2OfXYZ_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray2OfXYZ_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_TColgp_HArray2OfXYZ self, gp_XYZ theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_Init(self, *args)


    def Size(self, *args):
        """
        Size(Handle_TColgp_HArray2OfXYZ self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_Size(self, *args)


    def Length(self, *args):
        """
        Length(Handle_TColgp_HArray2OfXYZ self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(Handle_TColgp_HArray2OfXYZ self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(Handle_TColgp_HArray2OfXYZ self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(Handle_TColgp_HArray2OfXYZ self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(Handle_TColgp_HArray2OfXYZ self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(Handle_TColgp_HArray2OfXYZ self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(Handle_TColgp_HArray2OfXYZ self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(Handle_TColgp_HArray2OfXYZ self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(Handle_TColgp_HArray2OfXYZ self, NCollection_Array2_gp_XYZ theOther) -> NCollection_Array2_gp_XYZ

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_Assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColgp.Handle_TColgp_HArray2OfXYZ_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColgp.Handle_TColgp_HArray2OfXYZ___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(Handle_TColgp_HArray2OfXYZ self, Standard_Integer const theRow, Standard_Integer const theCol) -> gp_XYZ

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_ChangeValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_TColgp_HArray2OfXYZ self, Standard_Integer const theRow, Standard_Integer const theCol, gp_XYZ theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_SetValue(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HArray2OfXYZ self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HArray2OfXYZ self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HArray2OfXYZ self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HArray2OfXYZ self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HArray2OfXYZ self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HArray2OfXYZ self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HArray2OfXYZ self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HArray2OfXYZ self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HArray2OfXYZ self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfXYZ_DecrementRefCounter(self, *args)

Handle_TColgp_HArray2OfXYZ_swigregister = _TColgp.Handle_TColgp_HArray2OfXYZ_swigregister
Handle_TColgp_HArray2OfXYZ_swigregister(Handle_TColgp_HArray2OfXYZ)

def Handle_TColgp_HArray2OfXYZ_DownCast(thing):
    return _TColgp.Handle_TColgp_HArray2OfXYZ_DownCast(thing)
Handle_TColgp_HArray2OfXYZ_DownCast = _TColgp.Handle_TColgp_HArray2OfXYZ_DownCast

class Handle_TColgp_HSequenceOfPnt(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HSequenceOfPnt self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HSequenceOfPnt self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HSequenceOfPnt self, TColgp_HSequenceOfPnt thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HSequenceOfPnt self, Handle_TColgp_HSequenceOfPnt theHandle) -> Handle_TColgp_HSequenceOfPnt
        assign(Handle_TColgp_HSequenceOfPnt self, TColgp_HSequenceOfPnt thePtr) -> Handle_TColgp_HSequenceOfPnt
        assign(Handle_TColgp_HSequenceOfPnt self, Handle_TColgp_HSequenceOfPnt theHandle) -> Handle_TColgp_HSequenceOfPnt

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HSequenceOfPnt self) -> TColgp_HSequenceOfPnt

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HSequenceOfPnt self) -> TColgp_HSequenceOfPnt

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HSequenceOfPnt self) -> TColgp_HSequenceOfPnt

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HSequenceOfPnt___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HSequenceOfPnt___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HSequenceOfPnt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HSequenceOfPnt_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HSequenceOfPnt

    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfPnt

        """
        res = _TColgp.Handle_TColgp_HSequenceOfPnt_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(Handle_TColgp_HSequenceOfPnt self, gp_Pnt theItem)
        Append(Handle_TColgp_HSequenceOfPnt self, NCollection_Sequence_gp_Pnt theSequence)

        :type theSequence: OCC.wrapper.TColgp.TColgp_SequenceOfPnt

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(Handle_TColgp_HSequenceOfPnt self) -> NCollection_Sequence_gp_Pnt

        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfPnt

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt_ChangeSequence(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HSequenceOfPnt self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HSequenceOfPnt_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HSequenceOfPnt_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HSequenceOfPnt self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HSequenceOfPnt self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HSequenceOfPnt self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HSequenceOfPnt self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HSequenceOfPnt self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HSequenceOfPnt self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HSequenceOfPnt self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HSequenceOfPnt self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HSequenceOfPnt self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt_DecrementRefCounter(self, *args)

Handle_TColgp_HSequenceOfPnt_swigregister = _TColgp.Handle_TColgp_HSequenceOfPnt_swigregister
Handle_TColgp_HSequenceOfPnt_swigregister(Handle_TColgp_HSequenceOfPnt)

def Handle_TColgp_HSequenceOfPnt_DownCast(thing):
    return _TColgp.Handle_TColgp_HSequenceOfPnt_DownCast(thing)
Handle_TColgp_HSequenceOfPnt_DownCast = _TColgp.Handle_TColgp_HSequenceOfPnt_DownCast

class NCollection_Sequence_gp_Dir(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_gp_Dir self) -> NCollection_Sequence< gp_Dir >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _TColgp.NCollection_Sequence_gp_Dir_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_gp_Dir self) -> NCollection_Sequence< gp_Dir >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _TColgp.NCollection_Sequence_gp_Dir_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_gp_Dir self) -> NCollection_Sequence< gp_Dir >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Sequence_gp_Dir_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_gp_Dir self) -> NCollection_Sequence< gp_Dir >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Sequence_gp_Dir_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _TColgp.new_NCollection_Sequence_gp_Dir(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_gp_Dir self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Dir_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_gp_Dir self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Dir_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_gp_Dir self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Dir_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_gp_Dir self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Dir_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_gp_Dir self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Sequence_gp_Dir_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_gp_Dir self)

        Reverse sequence


        """
        return _TColgp.NCollection_Sequence_gp_Dir_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_gp_Dir self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _TColgp.NCollection_Sequence_gp_Dir_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColgp.NCollection_Sequence_gp_Dir_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_gp_Dir self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColgp.NCollection_Sequence_gp_Dir_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_gp_Dir self, NCollection_Sequence_gp_Dir theOther) -> NCollection_Sequence_gp_Dir

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Dir_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_gp_Dir self, NCollection_Sequence_gp_Dir theOther) -> NCollection_Sequence_gp_Dir

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Dir_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_gp_Dir self, NCollection_Sequence< gp_Dir >::Iterator & thePosition)
        Remove(NCollection_Sequence_gp_Dir self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_gp_Dir self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _TColgp.NCollection_Sequence_gp_Dir_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_gp_Dir self, gp_Dir theItem)
        Append(NCollection_Sequence_gp_Dir self, NCollection_Sequence_gp_Dir theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Dir_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_gp_Dir self, gp_Dir theItem)
        Prepend(NCollection_Sequence_gp_Dir self, NCollection_Sequence_gp_Dir theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Dir_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_gp_Dir self, Standard_Integer const theIndex, gp_Dir theItem)
        InsertBefore(NCollection_Sequence_gp_Dir self, Standard_Integer const theIndex, NCollection_Sequence_gp_Dir theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Dir_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_gp_Dir self, NCollection_Sequence< gp_Dir >::Iterator & thePosition, gp_Dir theItem)
        InsertAfter(NCollection_Sequence_gp_Dir self, Standard_Integer const theIndex, NCollection_Sequence_gp_Dir theSeq)
        InsertAfter(NCollection_Sequence_gp_Dir self, Standard_Integer const theIndex, gp_Dir theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Dir_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_gp_Dir self, Standard_Integer const theIndex, NCollection_Sequence_gp_Dir theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Dir_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Dir_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_gp_Dir self) -> gp_Dir

        First item access

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Dir_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Dir_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_gp_Dir self) -> gp_Dir

        Last item access

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Dir_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Dir_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_gp_Dir self, Standard_Integer const theIndex) -> gp_Dir

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Dir_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Dir___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_gp_Dir self, Standard_Integer const theIndex, gp_Dir theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Dir_SetValue(self, *args)


    def __iter__(self):
        return _TColgp.NCollection_Sequence_gp_Dir___iter__(self)
    __swig_destroy__ = _TColgp.delete_NCollection_Sequence_gp_Dir
NCollection_Sequence_gp_Dir_swigregister = _TColgp.NCollection_Sequence_gp_Dir_swigregister
NCollection_Sequence_gp_Dir_swigregister(NCollection_Sequence_gp_Dir)

def NCollection_Sequence_gp_Dir_delNode(*args):
    """
    NCollection_Sequence_gp_Dir_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _TColgp.NCollection_Sequence_gp_Dir_delNode(*args)

class NCollection_Sequence_gp_Dir_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _TColgp.new_NCollection_Sequence_gp_Dir_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TColgp.delete_NCollection_Sequence_gp_Dir_IteratorHelper

    def __next__(self):
        return _TColgp.NCollection_Sequence_gp_Dir_IteratorHelper___next__(self)
NCollection_Sequence_gp_Dir_IteratorHelper_swigregister = _TColgp.NCollection_Sequence_gp_Dir_IteratorHelper_swigregister
NCollection_Sequence_gp_Dir_IteratorHelper_swigregister(NCollection_Sequence_gp_Dir_IteratorHelper)


try:
	TColgp_SequenceOfDir = NCollection_Sequence_gp_Dir
except NameError:
	pass # does not exist, probably ignored

class Handle_TColgp_HSequenceOfPnt2d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HSequenceOfPnt2d self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt2d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HSequenceOfPnt2d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt2d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HSequenceOfPnt2d self, TColgp_HSequenceOfPnt2d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt2d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HSequenceOfPnt2d self, Handle_TColgp_HSequenceOfPnt2d theHandle) -> Handle_TColgp_HSequenceOfPnt2d
        assign(Handle_TColgp_HSequenceOfPnt2d self, TColgp_HSequenceOfPnt2d thePtr) -> Handle_TColgp_HSequenceOfPnt2d
        assign(Handle_TColgp_HSequenceOfPnt2d self, Handle_TColgp_HSequenceOfPnt2d theHandle) -> Handle_TColgp_HSequenceOfPnt2d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt2d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HSequenceOfPnt2d self) -> TColgp_HSequenceOfPnt2d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt2d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HSequenceOfPnt2d self) -> TColgp_HSequenceOfPnt2d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt2d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HSequenceOfPnt2d self) -> TColgp_HSequenceOfPnt2d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt2d___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HSequenceOfPnt2d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HSequenceOfPnt2d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HSequenceOfPnt2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HSequenceOfPnt2d_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HSequenceOfPnt2d

    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfPnt2d

        """
        res = _TColgp.Handle_TColgp_HSequenceOfPnt2d_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(Handle_TColgp_HSequenceOfPnt2d self, gp_Pnt2d theItem)
        Append(Handle_TColgp_HSequenceOfPnt2d self, NCollection_Sequence_gp_Pnt2d theSequence)

        :type theSequence: OCC.wrapper.TColgp.TColgp_SequenceOfPnt2d

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt2d_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(Handle_TColgp_HSequenceOfPnt2d self) -> NCollection_Sequence_gp_Pnt2d

        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfPnt2d

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt2d_ChangeSequence(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HSequenceOfPnt2d self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt2d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HSequenceOfPnt2d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HSequenceOfPnt2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HSequenceOfPnt2d self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt2d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HSequenceOfPnt2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HSequenceOfPnt2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt2d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HSequenceOfPnt2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HSequenceOfPnt2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt2d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HSequenceOfPnt2d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt2d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HSequenceOfPnt2d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt2d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HSequenceOfPnt2d self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt2d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HSequenceOfPnt2d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HSequenceOfPnt2d_DecrementRefCounter(self, *args)

Handle_TColgp_HSequenceOfPnt2d_swigregister = _TColgp.Handle_TColgp_HSequenceOfPnt2d_swigregister
Handle_TColgp_HSequenceOfPnt2d_swigregister(Handle_TColgp_HSequenceOfPnt2d)

def Handle_TColgp_HSequenceOfPnt2d_DownCast(thing):
    return _TColgp.Handle_TColgp_HSequenceOfPnt2d_DownCast(thing)
Handle_TColgp_HSequenceOfPnt2d_DownCast = _TColgp.Handle_TColgp_HSequenceOfPnt2d_DownCast

class TColgp_HArray1OfCirc2d(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TColgp_HArray1OfCirc2d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TColgp_HArray1OfCirc2d(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TColgp_HArray1OfCirc2d self, Standard_Integer const theLower, Standard_Integer const theUpper) -> TColgp_HArray1OfCirc2d
        __init__(TColgp_HArray1OfCirc2d self, Standard_Integer const theLower, Standard_Integer const theUpper, gp_Circ2d theValue) -> TColgp_HArray1OfCirc2d
        __init__(TColgp_HArray1OfCirc2d self, NCollection_Array1_gp_Circ2d theOther) -> TColgp_HArray1OfCirc2d

        :type theOther: OCC.wrapper.TColgp.TColgp_Array1OfCirc2d

        """
        this = _TColgp.new_TColgp_HArray1OfCirc2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfCirc2d

        """
        res = _TColgp.TColgp_HArray1OfCirc2d_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(TColgp_HArray1OfCirc2d self) -> NCollection_Array1_gp_Circ2d

        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfCirc2d

        """
        return _TColgp.TColgp_HArray1OfCirc2d_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TColgp.TColgp_HArray1OfCirc2d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TColgp.TColgp_HArray1OfCirc2d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.TColgp_HArray1OfCirc2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TColgp.delete_TColgp_HArray1OfCirc2d
TColgp_HArray1OfCirc2d_swigregister = _TColgp.TColgp_HArray1OfCirc2d_swigregister
TColgp_HArray1OfCirc2d_swigregister(TColgp_HArray1OfCirc2d)

def TColgp_HArray1OfCirc2d_get_type_name(*args):
    """
    TColgp_HArray1OfCirc2d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TColgp.TColgp_HArray1OfCirc2d_get_type_name(*args)

def TColgp_HArray1OfCirc2d_get_type_descriptor(*args):
    """
    TColgp_HArray1OfCirc2d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TColgp.TColgp_HArray1OfCirc2d_get_type_descriptor(*args)

class NCollection_Array1_gp_Lin2d(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_gp_Lin2d self) -> NCollection_Array1< gp_Lin2d >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _TColgp.NCollection_Array1_gp_Lin2d_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_gp_Lin2d self) -> NCollection_Array1< gp_Lin2d >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _TColgp.NCollection_Array1_gp_Lin2d_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_gp_Lin2d self) -> NCollection_Array1< gp_Lin2d >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Array1_gp_Lin2d_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_gp_Lin2d self) -> NCollection_Array1< gp_Lin2d >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Array1_gp_Lin2d_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _TColgp.new_NCollection_Array1_gp_Lin2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_gp_Lin2d self, gp_Lin2d theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Lin2d_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_gp_Lin2d self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Lin2d_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_gp_Lin2d self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Lin2d_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_gp_Lin2d self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_Lin2d_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_gp_Lin2d self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Lin2d_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_gp_Lin2d self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Lin2d_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_gp_Lin2d self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_Lin2d_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_gp_Lin2d self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_Lin2d_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_gp_Lin2d self, NCollection_Array1_gp_Lin2d theOther) -> NCollection_Array1_gp_Lin2d

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_Lin2d_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_gp_Lin2d self, NCollection_Array1_gp_Lin2d theOther) -> NCollection_Array1_gp_Lin2d

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_Lin2d_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_gp_Lin2d self, NCollection_Array1_gp_Lin2d theOther) -> NCollection_Array1_gp_Lin2d
        assign(NCollection_Array1_gp_Lin2d self, NCollection_Array1_gp_Lin2d theOther) -> NCollection_Array1_gp_Lin2d

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_Lin2d_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Lin2d_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_gp_Lin2d self) -> gp_Lin2d

        @return first element

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Lin2d_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Lin2d_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_gp_Lin2d self) -> gp_Lin2d

        @return last element

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Lin2d_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Lin2d_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_gp_Lin2d self, Standard_Integer const theIndex) -> gp_Lin2d

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Lin2d_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Lin2d___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Lin2d_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_gp_Lin2d self, Standard_Integer const theIndex, gp_Lin2d theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Lin2d_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_gp_Lin2d self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _TColgp.NCollection_Array1_gp_Lin2d_Resize(self, *args)

    __swig_destroy__ = _TColgp.delete_NCollection_Array1_gp_Lin2d
NCollection_Array1_gp_Lin2d_swigregister = _TColgp.NCollection_Array1_gp_Lin2d_swigregister
NCollection_Array1_gp_Lin2d_swigregister(NCollection_Array1_gp_Lin2d)


try:
	TColgp_Array1OfLin2d = NCollection_Array1_gp_Lin2d
except NameError:
	pass # does not exist, probably ignored

class Handle_TColgp_HArray1OfDir2d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HArray1OfDir2d self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HArray1OfDir2d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HArray1OfDir2d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HArray1OfDir2d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HArray1OfDir2d self, TColgp_HArray1OfDir2d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfDir2d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HArray1OfDir2d self, Handle_TColgp_HArray1OfDir2d theHandle) -> Handle_TColgp_HArray1OfDir2d
        assign(Handle_TColgp_HArray1OfDir2d self, TColgp_HArray1OfDir2d thePtr) -> Handle_TColgp_HArray1OfDir2d
        assign(Handle_TColgp_HArray1OfDir2d self, Handle_TColgp_HArray1OfDir2d theHandle) -> Handle_TColgp_HArray1OfDir2d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HArray1OfDir2d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HArray1OfDir2d self) -> TColgp_HArray1OfDir2d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfDir2d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HArray1OfDir2d self) -> TColgp_HArray1OfDir2d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfDir2d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HArray1OfDir2d self) -> TColgp_HArray1OfDir2d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HArray1OfDir2d___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HArray1OfDir2d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HArray1OfDir2d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HArray1OfDir2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HArray1OfDir2d_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HArray1OfDir2d

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfDir2d

        """
        res = _TColgp.Handle_TColgp_HArray1OfDir2d_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_TColgp_HArray1OfDir2d self) -> NCollection_Array1_gp_Dir2d

        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfDir2d

        """
        return _TColgp.Handle_TColgp_HArray1OfDir2d_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HArray1OfDir2d self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HArray1OfDir2d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray1OfDir2d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray1OfDir2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HArray1OfDir2d self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HArray1OfDir2d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HArray1OfDir2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HArray1OfDir2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray1OfDir2d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HArray1OfDir2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HArray1OfDir2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray1OfDir2d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HArray1OfDir2d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HArray1OfDir2d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HArray1OfDir2d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray1OfDir2d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HArray1OfDir2d self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HArray1OfDir2d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HArray1OfDir2d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray1OfDir2d_DecrementRefCounter(self, *args)

Handle_TColgp_HArray1OfDir2d_swigregister = _TColgp.Handle_TColgp_HArray1OfDir2d_swigregister
Handle_TColgp_HArray1OfDir2d_swigregister(Handle_TColgp_HArray1OfDir2d)

def Handle_TColgp_HArray1OfDir2d_DownCast(thing):
    return _TColgp.Handle_TColgp_HArray1OfDir2d_DownCast(thing)
Handle_TColgp_HArray1OfDir2d_DownCast = _TColgp.Handle_TColgp_HArray1OfDir2d_DownCast

class NCollection_Sequence_gp_Ax1(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_gp_Ax1 self) -> NCollection_Sequence< gp_Ax1 >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _TColgp.NCollection_Sequence_gp_Ax1_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_gp_Ax1 self) -> NCollection_Sequence< gp_Ax1 >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _TColgp.NCollection_Sequence_gp_Ax1_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_gp_Ax1 self) -> NCollection_Sequence< gp_Ax1 >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Sequence_gp_Ax1_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_gp_Ax1 self) -> NCollection_Sequence< gp_Ax1 >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Sequence_gp_Ax1_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _TColgp.new_NCollection_Sequence_gp_Ax1(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_gp_Ax1 self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Ax1_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_gp_Ax1 self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Ax1_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_gp_Ax1 self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Ax1_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_gp_Ax1 self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Ax1_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_gp_Ax1 self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Sequence_gp_Ax1_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_gp_Ax1 self)

        Reverse sequence


        """
        return _TColgp.NCollection_Sequence_gp_Ax1_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_gp_Ax1 self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _TColgp.NCollection_Sequence_gp_Ax1_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColgp.NCollection_Sequence_gp_Ax1_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_gp_Ax1 self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColgp.NCollection_Sequence_gp_Ax1_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_gp_Ax1 self, NCollection_Sequence_gp_Ax1 theOther) -> NCollection_Sequence_gp_Ax1

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Ax1_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_gp_Ax1 self, NCollection_Sequence_gp_Ax1 theOther) -> NCollection_Sequence_gp_Ax1

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Ax1_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_gp_Ax1 self, NCollection_Sequence< gp_Ax1 >::Iterator & thePosition)
        Remove(NCollection_Sequence_gp_Ax1 self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_gp_Ax1 self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _TColgp.NCollection_Sequence_gp_Ax1_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_gp_Ax1 self, gp_Ax1 theItem)
        Append(NCollection_Sequence_gp_Ax1 self, NCollection_Sequence_gp_Ax1 theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Ax1_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_gp_Ax1 self, gp_Ax1 theItem)
        Prepend(NCollection_Sequence_gp_Ax1 self, NCollection_Sequence_gp_Ax1 theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Ax1_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_gp_Ax1 self, Standard_Integer const theIndex, gp_Ax1 theItem)
        InsertBefore(NCollection_Sequence_gp_Ax1 self, Standard_Integer const theIndex, NCollection_Sequence_gp_Ax1 theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Ax1_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_gp_Ax1 self, NCollection_Sequence< gp_Ax1 >::Iterator & thePosition, gp_Ax1 theItem)
        InsertAfter(NCollection_Sequence_gp_Ax1 self, Standard_Integer const theIndex, NCollection_Sequence_gp_Ax1 theSeq)
        InsertAfter(NCollection_Sequence_gp_Ax1 self, Standard_Integer const theIndex, gp_Ax1 theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Ax1_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_gp_Ax1 self, Standard_Integer const theIndex, NCollection_Sequence_gp_Ax1 theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Ax1_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Ax1_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_gp_Ax1 self) -> gp_Ax1

        First item access

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Ax1_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Ax1_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_gp_Ax1 self) -> gp_Ax1

        Last item access

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Ax1_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Ax1_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_gp_Ax1 self, Standard_Integer const theIndex) -> gp_Ax1

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Ax1_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Ax1___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_gp_Ax1 self, Standard_Integer const theIndex, gp_Ax1 theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Ax1_SetValue(self, *args)


    def __iter__(self):
        return _TColgp.NCollection_Sequence_gp_Ax1___iter__(self)
    __swig_destroy__ = _TColgp.delete_NCollection_Sequence_gp_Ax1
NCollection_Sequence_gp_Ax1_swigregister = _TColgp.NCollection_Sequence_gp_Ax1_swigregister
NCollection_Sequence_gp_Ax1_swigregister(NCollection_Sequence_gp_Ax1)

def NCollection_Sequence_gp_Ax1_delNode(*args):
    """
    NCollection_Sequence_gp_Ax1_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _TColgp.NCollection_Sequence_gp_Ax1_delNode(*args)

class NCollection_Sequence_gp_Ax1_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _TColgp.new_NCollection_Sequence_gp_Ax1_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TColgp.delete_NCollection_Sequence_gp_Ax1_IteratorHelper

    def __next__(self):
        return _TColgp.NCollection_Sequence_gp_Ax1_IteratorHelper___next__(self)
NCollection_Sequence_gp_Ax1_IteratorHelper_swigregister = _TColgp.NCollection_Sequence_gp_Ax1_IteratorHelper_swigregister
NCollection_Sequence_gp_Ax1_IteratorHelper_swigregister(NCollection_Sequence_gp_Ax1_IteratorHelper)


try:
	TColgp_SequenceOfAx1 = NCollection_Sequence_gp_Ax1
except NameError:
	pass # does not exist, probably ignored

class Handle_TColgp_HSequenceOfVec(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HSequenceOfVec self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HSequenceOfVec_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HSequenceOfVec self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HSequenceOfVec self, TColgp_HSequenceOfVec thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HSequenceOfVec self, Handle_TColgp_HSequenceOfVec theHandle) -> Handle_TColgp_HSequenceOfVec
        assign(Handle_TColgp_HSequenceOfVec self, TColgp_HSequenceOfVec thePtr) -> Handle_TColgp_HSequenceOfVec
        assign(Handle_TColgp_HSequenceOfVec self, Handle_TColgp_HSequenceOfVec theHandle) -> Handle_TColgp_HSequenceOfVec

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HSequenceOfVec self) -> TColgp_HSequenceOfVec

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HSequenceOfVec self) -> TColgp_HSequenceOfVec

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HSequenceOfVec self) -> TColgp_HSequenceOfVec

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HSequenceOfVec___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HSequenceOfVec___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HSequenceOfVec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HSequenceOfVec_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HSequenceOfVec

    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfVec

        """
        res = _TColgp.Handle_TColgp_HSequenceOfVec_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(Handle_TColgp_HSequenceOfVec self, gp_Vec theItem)
        Append(Handle_TColgp_HSequenceOfVec self, NCollection_Sequence_gp_Vec theSequence)

        :type theSequence: OCC.wrapper.TColgp.TColgp_SequenceOfVec

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(Handle_TColgp_HSequenceOfVec self) -> NCollection_Sequence_gp_Vec

        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfVec

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec_ChangeSequence(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HSequenceOfVec self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HSequenceOfVec_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HSequenceOfVec_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HSequenceOfVec self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HSequenceOfVec_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HSequenceOfVec self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HSequenceOfVec self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HSequenceOfVec self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HSequenceOfVec self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HSequenceOfVec self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HSequenceOfVec self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HSequenceOfVec self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HSequenceOfVec_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HSequenceOfVec self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec_DecrementRefCounter(self, *args)

Handle_TColgp_HSequenceOfVec_swigregister = _TColgp.Handle_TColgp_HSequenceOfVec_swigregister
Handle_TColgp_HSequenceOfVec_swigregister(Handle_TColgp_HSequenceOfVec)

def Handle_TColgp_HSequenceOfVec_DownCast(thing):
    return _TColgp.Handle_TColgp_HSequenceOfVec_DownCast(thing)
Handle_TColgp_HSequenceOfVec_DownCast = _TColgp.Handle_TColgp_HSequenceOfVec_DownCast

class NCollection_Array1_gp_Vec2d(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_gp_Vec2d self) -> NCollection_Array1< gp_Vec2d >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _TColgp.NCollection_Array1_gp_Vec2d_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_gp_Vec2d self) -> NCollection_Array1< gp_Vec2d >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _TColgp.NCollection_Array1_gp_Vec2d_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_gp_Vec2d self) -> NCollection_Array1< gp_Vec2d >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Array1_gp_Vec2d_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_gp_Vec2d self) -> NCollection_Array1< gp_Vec2d >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Array1_gp_Vec2d_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _TColgp.new_NCollection_Array1_gp_Vec2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_gp_Vec2d self, gp_Vec2d theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Vec2d_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_gp_Vec2d self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Vec2d_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_gp_Vec2d self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Vec2d_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_gp_Vec2d self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_Vec2d_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_gp_Vec2d self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Vec2d_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_gp_Vec2d self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Vec2d_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_gp_Vec2d self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_Vec2d_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_gp_Vec2d self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_Vec2d_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_gp_Vec2d self, NCollection_Array1_gp_Vec2d theOther) -> NCollection_Array1_gp_Vec2d

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_Vec2d_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_gp_Vec2d self, NCollection_Array1_gp_Vec2d theOther) -> NCollection_Array1_gp_Vec2d

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_Vec2d_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_gp_Vec2d self, NCollection_Array1_gp_Vec2d theOther) -> NCollection_Array1_gp_Vec2d
        assign(NCollection_Array1_gp_Vec2d self, NCollection_Array1_gp_Vec2d theOther) -> NCollection_Array1_gp_Vec2d

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_Vec2d_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Vec2d_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_gp_Vec2d self) -> gp_Vec2d

        @return first element

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Vec2d_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Vec2d_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_gp_Vec2d self) -> gp_Vec2d

        @return last element

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Vec2d_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Vec2d_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_gp_Vec2d self, Standard_Integer const theIndex) -> gp_Vec2d

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Vec2d_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Vec2d___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Vec2d_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_gp_Vec2d self, Standard_Integer const theIndex, gp_Vec2d theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Vec2d_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_gp_Vec2d self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _TColgp.NCollection_Array1_gp_Vec2d_Resize(self, *args)

    __swig_destroy__ = _TColgp.delete_NCollection_Array1_gp_Vec2d
NCollection_Array1_gp_Vec2d_swigregister = _TColgp.NCollection_Array1_gp_Vec2d_swigregister
NCollection_Array1_gp_Vec2d_swigregister(NCollection_Array1_gp_Vec2d)


try:
	TColgp_Array1OfVec2d = NCollection_Array1_gp_Vec2d
except NameError:
	pass # does not exist, probably ignored

class Handle_TColgp_HArray2OfPnt2d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HArray2OfPnt2d self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HArray2OfPnt2d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HArray2OfPnt2d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt2d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HArray2OfPnt2d self, TColgp_HArray2OfPnt2d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt2d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HArray2OfPnt2d self, Handle_TColgp_HArray2OfPnt2d theHandle) -> Handle_TColgp_HArray2OfPnt2d
        assign(Handle_TColgp_HArray2OfPnt2d self, TColgp_HArray2OfPnt2d thePtr) -> Handle_TColgp_HArray2OfPnt2d
        assign(Handle_TColgp_HArray2OfPnt2d self, Handle_TColgp_HArray2OfPnt2d theHandle) -> Handle_TColgp_HArray2OfPnt2d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt2d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HArray2OfPnt2d self) -> TColgp_HArray2OfPnt2d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt2d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HArray2OfPnt2d self) -> TColgp_HArray2OfPnt2d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt2d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HArray2OfPnt2d self) -> TColgp_HArray2OfPnt2d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt2d___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HArray2OfPnt2d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HArray2OfPnt2d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HArray2OfPnt2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HArray2OfPnt2d_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HArray2OfPnt2d

    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfPnt2d

        """
        res = _TColgp.Handle_TColgp_HArray2OfPnt2d_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(Handle_TColgp_HArray2OfPnt2d self) -> NCollection_Array2_gp_Pnt2d

        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfPnt2d

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt2d_ChangeArray2(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HArray2OfPnt2d self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt2d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray2OfPnt2d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray2OfPnt2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HArray2OfPnt2d self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HArray2OfPnt2d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HArray2OfPnt2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HArray2OfPnt2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt2d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HArray2OfPnt2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HArray2OfPnt2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt2d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HArray2OfPnt2d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt2d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HArray2OfPnt2d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt2d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HArray2OfPnt2d self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HArray2OfPnt2d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HArray2OfPnt2d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfPnt2d_DecrementRefCounter(self, *args)

Handle_TColgp_HArray2OfPnt2d_swigregister = _TColgp.Handle_TColgp_HArray2OfPnt2d_swigregister
Handle_TColgp_HArray2OfPnt2d_swigregister(Handle_TColgp_HArray2OfPnt2d)

def Handle_TColgp_HArray2OfPnt2d_DownCast(thing):
    return _TColgp.Handle_TColgp_HArray2OfPnt2d_DownCast(thing)
Handle_TColgp_HArray2OfPnt2d_DownCast = _TColgp.Handle_TColgp_HArray2OfPnt2d_DownCast

class Handle_TColgp_HArray1OfCirc2d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HArray1OfCirc2d self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HArray1OfCirc2d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HArray1OfCirc2d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HArray1OfCirc2d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HArray1OfCirc2d self, TColgp_HArray1OfCirc2d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfCirc2d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HArray1OfCirc2d self, Handle_TColgp_HArray1OfCirc2d theHandle) -> Handle_TColgp_HArray1OfCirc2d
        assign(Handle_TColgp_HArray1OfCirc2d self, TColgp_HArray1OfCirc2d thePtr) -> Handle_TColgp_HArray1OfCirc2d
        assign(Handle_TColgp_HArray1OfCirc2d self, Handle_TColgp_HArray1OfCirc2d theHandle) -> Handle_TColgp_HArray1OfCirc2d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HArray1OfCirc2d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HArray1OfCirc2d self) -> TColgp_HArray1OfCirc2d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfCirc2d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HArray1OfCirc2d self) -> TColgp_HArray1OfCirc2d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfCirc2d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HArray1OfCirc2d self) -> TColgp_HArray1OfCirc2d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HArray1OfCirc2d___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HArray1OfCirc2d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HArray1OfCirc2d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HArray1OfCirc2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HArray1OfCirc2d_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HArray1OfCirc2d

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfCirc2d

        """
        res = _TColgp.Handle_TColgp_HArray1OfCirc2d_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_TColgp_HArray1OfCirc2d self) -> NCollection_Array1_gp_Circ2d

        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfCirc2d

        """
        return _TColgp.Handle_TColgp_HArray1OfCirc2d_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HArray1OfCirc2d self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HArray1OfCirc2d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray1OfCirc2d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray1OfCirc2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HArray1OfCirc2d self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HArray1OfCirc2d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HArray1OfCirc2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HArray1OfCirc2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray1OfCirc2d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HArray1OfCirc2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HArray1OfCirc2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray1OfCirc2d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HArray1OfCirc2d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HArray1OfCirc2d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HArray1OfCirc2d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray1OfCirc2d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HArray1OfCirc2d self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HArray1OfCirc2d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HArray1OfCirc2d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray1OfCirc2d_DecrementRefCounter(self, *args)

Handle_TColgp_HArray1OfCirc2d_swigregister = _TColgp.Handle_TColgp_HArray1OfCirc2d_swigregister
Handle_TColgp_HArray1OfCirc2d_swigregister(Handle_TColgp_HArray1OfCirc2d)

def Handle_TColgp_HArray1OfCirc2d_DownCast(thing):
    return _TColgp.Handle_TColgp_HArray1OfCirc2d_DownCast(thing)
Handle_TColgp_HArray1OfCirc2d_DownCast = _TColgp.Handle_TColgp_HArray1OfCirc2d_DownCast

class NCollection_Array1_gp_Dir2d(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_gp_Dir2d self) -> NCollection_Array1< gp_Dir2d >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _TColgp.NCollection_Array1_gp_Dir2d_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_gp_Dir2d self) -> NCollection_Array1< gp_Dir2d >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _TColgp.NCollection_Array1_gp_Dir2d_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_gp_Dir2d self) -> NCollection_Array1< gp_Dir2d >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Array1_gp_Dir2d_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_gp_Dir2d self) -> NCollection_Array1< gp_Dir2d >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Array1_gp_Dir2d_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _TColgp.new_NCollection_Array1_gp_Dir2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_gp_Dir2d self, gp_Dir2d theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Dir2d_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_gp_Dir2d self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Dir2d_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_gp_Dir2d self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Dir2d_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_gp_Dir2d self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_Dir2d_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_gp_Dir2d self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Dir2d_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_gp_Dir2d self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Dir2d_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_gp_Dir2d self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_Dir2d_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_gp_Dir2d self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_Dir2d_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_gp_Dir2d self, NCollection_Array1_gp_Dir2d theOther) -> NCollection_Array1_gp_Dir2d

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_Dir2d_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_gp_Dir2d self, NCollection_Array1_gp_Dir2d theOther) -> NCollection_Array1_gp_Dir2d

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_Dir2d_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_gp_Dir2d self, NCollection_Array1_gp_Dir2d theOther) -> NCollection_Array1_gp_Dir2d
        assign(NCollection_Array1_gp_Dir2d self, NCollection_Array1_gp_Dir2d theOther) -> NCollection_Array1_gp_Dir2d

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_Dir2d_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Dir2d_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_gp_Dir2d self) -> gp_Dir2d

        @return first element

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Dir2d_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Dir2d_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_gp_Dir2d self) -> gp_Dir2d

        @return last element

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Dir2d_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Dir2d_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_gp_Dir2d self, Standard_Integer const theIndex) -> gp_Dir2d

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Dir2d_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Dir2d___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Dir2d_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_gp_Dir2d self, Standard_Integer const theIndex, gp_Dir2d theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Dir2d_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_gp_Dir2d self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _TColgp.NCollection_Array1_gp_Dir2d_Resize(self, *args)

    __swig_destroy__ = _TColgp.delete_NCollection_Array1_gp_Dir2d
NCollection_Array1_gp_Dir2d_swigregister = _TColgp.NCollection_Array1_gp_Dir2d_swigregister
NCollection_Array1_gp_Dir2d_swigregister(NCollection_Array1_gp_Dir2d)


try:
	TColgp_Array1OfDir2d = NCollection_Array1_gp_Dir2d
except NameError:
	pass # does not exist, probably ignored

class NCollection_Array2_gp_Lin2d(object):
    """
    Purpose:   The class Array2 represents bi-dimensional arrays 
    of fixed size known at run time. 
    The ranges of indices are user defined.

    Warning:   Programs clients of such class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.LowerRow(); i <= A.UpperRow(); i++)
    for (j = A.LowerCol(); j <= A.UpperCol(); j++)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Purpose:   The class Array2 represents bi-dimensional arrays 
        of fixed size known at run time. 
        The ranges of indices are user defined.

        Warning:   Programs clients of such class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.LowerRow(); i <= A.UpperRow(); i++)
        for (j = A.LowerCol(); j <= A.UpperCol(); j++)
        """
        this = _TColgp.new_NCollection_Array2_gp_Lin2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array2_gp_Lin2d self, gp_Lin2d theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_Lin2d_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array2_gp_Lin2d self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Lin2d_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array2_gp_Lin2d self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Lin2d_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(NCollection_Array2_gp_Lin2d self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Lin2d_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(NCollection_Array2_gp_Lin2d self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Lin2d_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(NCollection_Array2_gp_Lin2d self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Lin2d_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(NCollection_Array2_gp_Lin2d self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Lin2d_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(NCollection_Array2_gp_Lin2d self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Lin2d_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(NCollection_Array2_gp_Lin2d self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Lin2d_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array2_gp_Lin2d self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array2_gp_Lin2d_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array2_gp_Lin2d self, NCollection_Array2_gp_Lin2d theOther) -> NCollection_Array2_gp_Lin2d

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TColgp.NCollection_Array2_gp_Lin2d_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array2_gp_Lin2d self, NCollection_Array2_gp_Lin2d theOther) -> NCollection_Array2_gp_Lin2d

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TColgp.NCollection_Array2_gp_Lin2d_assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array2_gp_Lin2d_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array2_gp_Lin2d self, Standard_Integer const theRow, Standard_Integer const theCol) -> gp_Lin2d

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_Lin2d_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array2_gp_Lin2d___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array2_gp_Lin2d self, Standard_Integer const theRow, Standard_Integer const theCol, gp_Lin2d theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_Lin2d_SetValue(self, *args)

    __swig_destroy__ = _TColgp.delete_NCollection_Array2_gp_Lin2d
NCollection_Array2_gp_Lin2d_swigregister = _TColgp.NCollection_Array2_gp_Lin2d_swigregister
NCollection_Array2_gp_Lin2d_swigregister(NCollection_Array2_gp_Lin2d)


try:
	TColgp_Array2OfLin2d = NCollection_Array2_gp_Lin2d
except NameError:
	pass # does not exist, probably ignored

class Handle_TColgp_HSequenceOfXYZ(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HSequenceOfXYZ self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HSequenceOfXYZ_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HSequenceOfXYZ self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HSequenceOfXYZ_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HSequenceOfXYZ self, TColgp_HSequenceOfXYZ thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HSequenceOfXYZ_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HSequenceOfXYZ self, Handle_TColgp_HSequenceOfXYZ theHandle) -> Handle_TColgp_HSequenceOfXYZ
        assign(Handle_TColgp_HSequenceOfXYZ self, TColgp_HSequenceOfXYZ thePtr) -> Handle_TColgp_HSequenceOfXYZ
        assign(Handle_TColgp_HSequenceOfXYZ self, Handle_TColgp_HSequenceOfXYZ theHandle) -> Handle_TColgp_HSequenceOfXYZ

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HSequenceOfXYZ_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HSequenceOfXYZ self) -> TColgp_HSequenceOfXYZ

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HSequenceOfXYZ_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HSequenceOfXYZ self) -> TColgp_HSequenceOfXYZ

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HSequenceOfXYZ___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HSequenceOfXYZ self) -> TColgp_HSequenceOfXYZ

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HSequenceOfXYZ___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HSequenceOfXYZ___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HSequenceOfXYZ___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HSequenceOfXYZ(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HSequenceOfXYZ_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HSequenceOfXYZ

    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfXYZ

        """
        res = _TColgp.Handle_TColgp_HSequenceOfXYZ_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(Handle_TColgp_HSequenceOfXYZ self, gp_XYZ theItem)
        Append(Handle_TColgp_HSequenceOfXYZ self, NCollection_Sequence_gp_XYZ theSequence)

        :type theSequence: OCC.wrapper.TColgp.TColgp_SequenceOfXYZ

        """
        return _TColgp.Handle_TColgp_HSequenceOfXYZ_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(Handle_TColgp_HSequenceOfXYZ self) -> NCollection_Sequence_gp_XYZ

        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfXYZ

        """
        return _TColgp.Handle_TColgp_HSequenceOfXYZ_ChangeSequence(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HSequenceOfXYZ self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HSequenceOfXYZ_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HSequenceOfXYZ_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HSequenceOfXYZ_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HSequenceOfXYZ self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HSequenceOfXYZ_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HSequenceOfXYZ self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HSequenceOfXYZ self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HSequenceOfXYZ_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HSequenceOfXYZ self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HSequenceOfXYZ self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HSequenceOfXYZ_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HSequenceOfXYZ self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HSequenceOfXYZ_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HSequenceOfXYZ self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HSequenceOfXYZ_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HSequenceOfXYZ self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HSequenceOfXYZ_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HSequenceOfXYZ self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HSequenceOfXYZ_DecrementRefCounter(self, *args)

Handle_TColgp_HSequenceOfXYZ_swigregister = _TColgp.Handle_TColgp_HSequenceOfXYZ_swigregister
Handle_TColgp_HSequenceOfXYZ_swigregister(Handle_TColgp_HSequenceOfXYZ)

def Handle_TColgp_HSequenceOfXYZ_DownCast(thing):
    return _TColgp.Handle_TColgp_HSequenceOfXYZ_DownCast(thing)
Handle_TColgp_HSequenceOfXYZ_DownCast = _TColgp.Handle_TColgp_HSequenceOfXYZ_DownCast

class NCollection_Sequence_gp_XY(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_gp_XY self) -> NCollection_Sequence< gp_XY >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _TColgp.NCollection_Sequence_gp_XY_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_gp_XY self) -> NCollection_Sequence< gp_XY >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _TColgp.NCollection_Sequence_gp_XY_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_gp_XY self) -> NCollection_Sequence< gp_XY >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Sequence_gp_XY_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_gp_XY self) -> NCollection_Sequence< gp_XY >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Sequence_gp_XY_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _TColgp.new_NCollection_Sequence_gp_XY(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_gp_XY self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_XY_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_gp_XY self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_XY_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_gp_XY self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_XY_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_gp_XY self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_XY_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_gp_XY self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Sequence_gp_XY_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_gp_XY self)

        Reverse sequence


        """
        return _TColgp.NCollection_Sequence_gp_XY_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_gp_XY self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _TColgp.NCollection_Sequence_gp_XY_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColgp.NCollection_Sequence_gp_XY_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_gp_XY self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColgp.NCollection_Sequence_gp_XY_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_gp_XY self, NCollection_Sequence_gp_XY theOther) -> NCollection_Sequence_gp_XY

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_XY_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_gp_XY self, NCollection_Sequence_gp_XY theOther) -> NCollection_Sequence_gp_XY

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_XY_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_gp_XY self, NCollection_Sequence< gp_XY >::Iterator & thePosition)
        Remove(NCollection_Sequence_gp_XY self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_gp_XY self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _TColgp.NCollection_Sequence_gp_XY_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_gp_XY self, gp_XY theItem)
        Append(NCollection_Sequence_gp_XY self, NCollection_Sequence_gp_XY theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_XY_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_gp_XY self, gp_XY theItem)
        Prepend(NCollection_Sequence_gp_XY self, NCollection_Sequence_gp_XY theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_XY_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_gp_XY self, Standard_Integer const theIndex, gp_XY theItem)
        InsertBefore(NCollection_Sequence_gp_XY self, Standard_Integer const theIndex, NCollection_Sequence_gp_XY theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_XY_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_gp_XY self, NCollection_Sequence< gp_XY >::Iterator & thePosition, gp_XY theItem)
        InsertAfter(NCollection_Sequence_gp_XY self, Standard_Integer const theIndex, NCollection_Sequence_gp_XY theSeq)
        InsertAfter(NCollection_Sequence_gp_XY self, Standard_Integer const theIndex, gp_XY theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_XY_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_gp_XY self, Standard_Integer const theIndex, NCollection_Sequence_gp_XY theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_XY_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_XY_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_gp_XY self) -> gp_XY

        First item access

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_XY_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_XY_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_gp_XY self) -> gp_XY

        Last item access

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_XY_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_XY_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_gp_XY self, Standard_Integer const theIndex) -> gp_XY

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_XY_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_XY___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_gp_XY self, Standard_Integer const theIndex, gp_XY theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_XY_SetValue(self, *args)


    def __iter__(self):
        return _TColgp.NCollection_Sequence_gp_XY___iter__(self)
    __swig_destroy__ = _TColgp.delete_NCollection_Sequence_gp_XY
NCollection_Sequence_gp_XY_swigregister = _TColgp.NCollection_Sequence_gp_XY_swigregister
NCollection_Sequence_gp_XY_swigregister(NCollection_Sequence_gp_XY)

def NCollection_Sequence_gp_XY_delNode(*args):
    """
    NCollection_Sequence_gp_XY_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _TColgp.NCollection_Sequence_gp_XY_delNode(*args)

class NCollection_Sequence_gp_XY_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _TColgp.new_NCollection_Sequence_gp_XY_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TColgp.delete_NCollection_Sequence_gp_XY_IteratorHelper

    def __next__(self):
        return _TColgp.NCollection_Sequence_gp_XY_IteratorHelper___next__(self)
NCollection_Sequence_gp_XY_IteratorHelper_swigregister = _TColgp.NCollection_Sequence_gp_XY_IteratorHelper_swigregister
NCollection_Sequence_gp_XY_IteratorHelper_swigregister(NCollection_Sequence_gp_XY_IteratorHelper)


try:
	TColgp_SequenceOfXY = NCollection_Sequence_gp_XY
except NameError:
	pass # does not exist, probably ignored

class NCollection_Array2_gp_Vec(object):
    """
    Purpose:   The class Array2 represents bi-dimensional arrays 
    of fixed size known at run time. 
    The ranges of indices are user defined.

    Warning:   Programs clients of such class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.LowerRow(); i <= A.UpperRow(); i++)
    for (j = A.LowerCol(); j <= A.UpperCol(); j++)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Purpose:   The class Array2 represents bi-dimensional arrays 
        of fixed size known at run time. 
        The ranges of indices are user defined.

        Warning:   Programs clients of such class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.LowerRow(); i <= A.UpperRow(); i++)
        for (j = A.LowerCol(); j <= A.UpperCol(); j++)
        """
        this = _TColgp.new_NCollection_Array2_gp_Vec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array2_gp_Vec self, gp_Vec theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_Vec_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array2_gp_Vec self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Vec_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array2_gp_Vec self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Vec_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(NCollection_Array2_gp_Vec self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Vec_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(NCollection_Array2_gp_Vec self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Vec_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(NCollection_Array2_gp_Vec self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Vec_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(NCollection_Array2_gp_Vec self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Vec_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(NCollection_Array2_gp_Vec self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Vec_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(NCollection_Array2_gp_Vec self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Vec_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array2_gp_Vec self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array2_gp_Vec_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array2_gp_Vec self, NCollection_Array2_gp_Vec theOther) -> NCollection_Array2_gp_Vec

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TColgp.NCollection_Array2_gp_Vec_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array2_gp_Vec self, NCollection_Array2_gp_Vec theOther) -> NCollection_Array2_gp_Vec

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TColgp.NCollection_Array2_gp_Vec_assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array2_gp_Vec_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array2_gp_Vec self, Standard_Integer const theRow, Standard_Integer const theCol) -> gp_Vec

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_Vec_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array2_gp_Vec___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array2_gp_Vec self, Standard_Integer const theRow, Standard_Integer const theCol, gp_Vec theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_Vec_SetValue(self, *args)

    __swig_destroy__ = _TColgp.delete_NCollection_Array2_gp_Vec
NCollection_Array2_gp_Vec_swigregister = _TColgp.NCollection_Array2_gp_Vec_swigregister
NCollection_Array2_gp_Vec_swigregister(NCollection_Array2_gp_Vec)


try:
	TColgp_Array2OfVec = NCollection_Array2_gp_Vec
except NameError:
	pass # does not exist, probably ignored

class NCollection_Sequence_gp_XYZ(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_gp_XYZ self) -> NCollection_Sequence< gp_XYZ >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _TColgp.NCollection_Sequence_gp_XYZ_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_gp_XYZ self) -> NCollection_Sequence< gp_XYZ >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _TColgp.NCollection_Sequence_gp_XYZ_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_gp_XYZ self) -> NCollection_Sequence< gp_XYZ >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Sequence_gp_XYZ_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_gp_XYZ self) -> NCollection_Sequence< gp_XYZ >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Sequence_gp_XYZ_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _TColgp.new_NCollection_Sequence_gp_XYZ(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_gp_XYZ self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_XYZ_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_gp_XYZ self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_XYZ_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_gp_XYZ self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_XYZ_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_gp_XYZ self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_XYZ_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_gp_XYZ self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Sequence_gp_XYZ_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_gp_XYZ self)

        Reverse sequence


        """
        return _TColgp.NCollection_Sequence_gp_XYZ_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_gp_XYZ self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _TColgp.NCollection_Sequence_gp_XYZ_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColgp.NCollection_Sequence_gp_XYZ_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_gp_XYZ self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColgp.NCollection_Sequence_gp_XYZ_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_gp_XYZ self, NCollection_Sequence_gp_XYZ theOther) -> NCollection_Sequence_gp_XYZ

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_XYZ_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_gp_XYZ self, NCollection_Sequence_gp_XYZ theOther) -> NCollection_Sequence_gp_XYZ

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_XYZ_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_gp_XYZ self, NCollection_Sequence< gp_XYZ >::Iterator & thePosition)
        Remove(NCollection_Sequence_gp_XYZ self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_gp_XYZ self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _TColgp.NCollection_Sequence_gp_XYZ_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_gp_XYZ self, gp_XYZ theItem)
        Append(NCollection_Sequence_gp_XYZ self, NCollection_Sequence_gp_XYZ theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_XYZ_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_gp_XYZ self, gp_XYZ theItem)
        Prepend(NCollection_Sequence_gp_XYZ self, NCollection_Sequence_gp_XYZ theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_XYZ_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_gp_XYZ self, Standard_Integer const theIndex, gp_XYZ theItem)
        InsertBefore(NCollection_Sequence_gp_XYZ self, Standard_Integer const theIndex, NCollection_Sequence_gp_XYZ theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_XYZ_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_gp_XYZ self, NCollection_Sequence< gp_XYZ >::Iterator & thePosition, gp_XYZ theItem)
        InsertAfter(NCollection_Sequence_gp_XYZ self, Standard_Integer const theIndex, NCollection_Sequence_gp_XYZ theSeq)
        InsertAfter(NCollection_Sequence_gp_XYZ self, Standard_Integer const theIndex, gp_XYZ theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_XYZ_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_gp_XYZ self, Standard_Integer const theIndex, NCollection_Sequence_gp_XYZ theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_XYZ_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_XYZ_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_gp_XYZ self) -> gp_XYZ

        First item access

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_XYZ_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_XYZ_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_gp_XYZ self) -> gp_XYZ

        Last item access

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_XYZ_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_XYZ_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_gp_XYZ self, Standard_Integer const theIndex) -> gp_XYZ

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_XYZ_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_XYZ___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_gp_XYZ self, Standard_Integer const theIndex, gp_XYZ theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_XYZ_SetValue(self, *args)


    def __iter__(self):
        return _TColgp.NCollection_Sequence_gp_XYZ___iter__(self)
    __swig_destroy__ = _TColgp.delete_NCollection_Sequence_gp_XYZ
NCollection_Sequence_gp_XYZ_swigregister = _TColgp.NCollection_Sequence_gp_XYZ_swigregister
NCollection_Sequence_gp_XYZ_swigregister(NCollection_Sequence_gp_XYZ)

def NCollection_Sequence_gp_XYZ_delNode(*args):
    """
    NCollection_Sequence_gp_XYZ_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _TColgp.NCollection_Sequence_gp_XYZ_delNode(*args)

class NCollection_Sequence_gp_XYZ_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _TColgp.new_NCollection_Sequence_gp_XYZ_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TColgp.delete_NCollection_Sequence_gp_XYZ_IteratorHelper

    def __next__(self):
        return _TColgp.NCollection_Sequence_gp_XYZ_IteratorHelper___next__(self)
NCollection_Sequence_gp_XYZ_IteratorHelper_swigregister = _TColgp.NCollection_Sequence_gp_XYZ_IteratorHelper_swigregister
NCollection_Sequence_gp_XYZ_IteratorHelper_swigregister(NCollection_Sequence_gp_XYZ_IteratorHelper)


try:
	TColgp_SequenceOfXYZ = NCollection_Sequence_gp_XYZ
except NameError:
	pass # does not exist, probably ignored

class NCollection_Array1_gp_Circ2d(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_gp_Circ2d self) -> NCollection_Array1< gp_Circ2d >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _TColgp.NCollection_Array1_gp_Circ2d_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_gp_Circ2d self) -> NCollection_Array1< gp_Circ2d >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _TColgp.NCollection_Array1_gp_Circ2d_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_gp_Circ2d self) -> NCollection_Array1< gp_Circ2d >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Array1_gp_Circ2d_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_gp_Circ2d self) -> NCollection_Array1< gp_Circ2d >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Array1_gp_Circ2d_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _TColgp.new_NCollection_Array1_gp_Circ2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_gp_Circ2d self, gp_Circ2d theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Circ2d_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_gp_Circ2d self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Circ2d_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_gp_Circ2d self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Circ2d_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_gp_Circ2d self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_Circ2d_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_gp_Circ2d self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Circ2d_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_gp_Circ2d self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array1_gp_Circ2d_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_gp_Circ2d self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_Circ2d_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_gp_Circ2d self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array1_gp_Circ2d_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_gp_Circ2d self, NCollection_Array1_gp_Circ2d theOther) -> NCollection_Array1_gp_Circ2d

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_Circ2d_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_gp_Circ2d self, NCollection_Array1_gp_Circ2d theOther) -> NCollection_Array1_gp_Circ2d

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_Circ2d_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_gp_Circ2d self, NCollection_Array1_gp_Circ2d theOther) -> NCollection_Array1_gp_Circ2d
        assign(NCollection_Array1_gp_Circ2d self, NCollection_Array1_gp_Circ2d theOther) -> NCollection_Array1_gp_Circ2d

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TColgp.NCollection_Array1_gp_Circ2d_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Circ2d_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_gp_Circ2d self) -> gp_Circ2d

        @return first element

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Circ2d_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Circ2d_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_gp_Circ2d self) -> gp_Circ2d

        @return last element

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Circ2d_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Circ2d_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_gp_Circ2d self, Standard_Integer const theIndex) -> gp_Circ2d

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Circ2d_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Circ2d___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array1_gp_Circ2d_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_gp_Circ2d self, Standard_Integer const theIndex, gp_Circ2d theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Array1_gp_Circ2d_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_gp_Circ2d self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _TColgp.NCollection_Array1_gp_Circ2d_Resize(self, *args)

    __swig_destroy__ = _TColgp.delete_NCollection_Array1_gp_Circ2d
NCollection_Array1_gp_Circ2d_swigregister = _TColgp.NCollection_Array1_gp_Circ2d_swigregister
NCollection_Array1_gp_Circ2d_swigregister(NCollection_Array1_gp_Circ2d)


try:
	TColgp_Array1OfCirc2d = NCollection_Array1_gp_Circ2d
except NameError:
	pass # does not exist, probably ignored

class NCollection_Sequence_gp_Pnt2d(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_gp_Pnt2d self) -> NCollection_Sequence< gp_Pnt2d >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _TColgp.NCollection_Sequence_gp_Pnt2d_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_gp_Pnt2d self) -> NCollection_Sequence< gp_Pnt2d >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _TColgp.NCollection_Sequence_gp_Pnt2d_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_gp_Pnt2d self) -> NCollection_Sequence< gp_Pnt2d >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Sequence_gp_Pnt2d_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_gp_Pnt2d self) -> NCollection_Sequence< gp_Pnt2d >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Sequence_gp_Pnt2d_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _TColgp.new_NCollection_Sequence_gp_Pnt2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_gp_Pnt2d self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Pnt2d_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_gp_Pnt2d self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Pnt2d_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_gp_Pnt2d self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Pnt2d_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_gp_Pnt2d self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Pnt2d_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_gp_Pnt2d self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Sequence_gp_Pnt2d_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_gp_Pnt2d self)

        Reverse sequence


        """
        return _TColgp.NCollection_Sequence_gp_Pnt2d_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_gp_Pnt2d self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _TColgp.NCollection_Sequence_gp_Pnt2d_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColgp.NCollection_Sequence_gp_Pnt2d_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_gp_Pnt2d self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColgp.NCollection_Sequence_gp_Pnt2d_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_gp_Pnt2d self, NCollection_Sequence_gp_Pnt2d theOther) -> NCollection_Sequence_gp_Pnt2d

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Pnt2d_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_gp_Pnt2d self, NCollection_Sequence_gp_Pnt2d theOther) -> NCollection_Sequence_gp_Pnt2d

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Pnt2d_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_gp_Pnt2d self, NCollection_Sequence< gp_Pnt2d >::Iterator & thePosition)
        Remove(NCollection_Sequence_gp_Pnt2d self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_gp_Pnt2d self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _TColgp.NCollection_Sequence_gp_Pnt2d_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_gp_Pnt2d self, gp_Pnt2d theItem)
        Append(NCollection_Sequence_gp_Pnt2d self, NCollection_Sequence_gp_Pnt2d theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Pnt2d_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_gp_Pnt2d self, gp_Pnt2d theItem)
        Prepend(NCollection_Sequence_gp_Pnt2d self, NCollection_Sequence_gp_Pnt2d theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Pnt2d_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_gp_Pnt2d self, Standard_Integer const theIndex, gp_Pnt2d theItem)
        InsertBefore(NCollection_Sequence_gp_Pnt2d self, Standard_Integer const theIndex, NCollection_Sequence_gp_Pnt2d theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Pnt2d_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_gp_Pnt2d self, NCollection_Sequence< gp_Pnt2d >::Iterator & thePosition, gp_Pnt2d theItem)
        InsertAfter(NCollection_Sequence_gp_Pnt2d self, Standard_Integer const theIndex, NCollection_Sequence_gp_Pnt2d theSeq)
        InsertAfter(NCollection_Sequence_gp_Pnt2d self, Standard_Integer const theIndex, gp_Pnt2d theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Pnt2d_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_gp_Pnt2d self, Standard_Integer const theIndex, NCollection_Sequence_gp_Pnt2d theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Pnt2d_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Pnt2d_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_gp_Pnt2d self) -> gp_Pnt2d

        First item access

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Pnt2d_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Pnt2d_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_gp_Pnt2d self) -> gp_Pnt2d

        Last item access

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Pnt2d_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Pnt2d_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_gp_Pnt2d self, Standard_Integer const theIndex) -> gp_Pnt2d

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Pnt2d_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Pnt2d___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_gp_Pnt2d self, Standard_Integer const theIndex, gp_Pnt2d theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Pnt2d_SetValue(self, *args)


    def __iter__(self):
        return _TColgp.NCollection_Sequence_gp_Pnt2d___iter__(self)
    __swig_destroy__ = _TColgp.delete_NCollection_Sequence_gp_Pnt2d
NCollection_Sequence_gp_Pnt2d_swigregister = _TColgp.NCollection_Sequence_gp_Pnt2d_swigregister
NCollection_Sequence_gp_Pnt2d_swigregister(NCollection_Sequence_gp_Pnt2d)

def NCollection_Sequence_gp_Pnt2d_delNode(*args):
    """
    NCollection_Sequence_gp_Pnt2d_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _TColgp.NCollection_Sequence_gp_Pnt2d_delNode(*args)

class NCollection_Sequence_gp_Pnt2d_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _TColgp.new_NCollection_Sequence_gp_Pnt2d_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TColgp.delete_NCollection_Sequence_gp_Pnt2d_IteratorHelper

    def __next__(self):
        return _TColgp.NCollection_Sequence_gp_Pnt2d_IteratorHelper___next__(self)
NCollection_Sequence_gp_Pnt2d_IteratorHelper_swigregister = _TColgp.NCollection_Sequence_gp_Pnt2d_IteratorHelper_swigregister
NCollection_Sequence_gp_Pnt2d_IteratorHelper_swigregister(NCollection_Sequence_gp_Pnt2d_IteratorHelper)


try:
	TColgp_SequenceOfPnt2d = NCollection_Sequence_gp_Pnt2d
except NameError:
	pass # does not exist, probably ignored

class NCollection_Sequence_gp_Vec(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_gp_Vec self) -> NCollection_Sequence< gp_Vec >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _TColgp.NCollection_Sequence_gp_Vec_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_gp_Vec self) -> NCollection_Sequence< gp_Vec >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _TColgp.NCollection_Sequence_gp_Vec_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_gp_Vec self) -> NCollection_Sequence< gp_Vec >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Sequence_gp_Vec_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_gp_Vec self) -> NCollection_Sequence< gp_Vec >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _TColgp.NCollection_Sequence_gp_Vec_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _TColgp.new_NCollection_Sequence_gp_Vec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_gp_Vec self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Vec_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_gp_Vec self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Vec_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_gp_Vec self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Vec_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_gp_Vec self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Sequence_gp_Vec_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_gp_Vec self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Sequence_gp_Vec_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_gp_Vec self)

        Reverse sequence


        """
        return _TColgp.NCollection_Sequence_gp_Vec_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_gp_Vec self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _TColgp.NCollection_Sequence_gp_Vec_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColgp.NCollection_Sequence_gp_Vec_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_gp_Vec self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColgp.NCollection_Sequence_gp_Vec_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_gp_Vec self, NCollection_Sequence_gp_Vec theOther) -> NCollection_Sequence_gp_Vec

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Vec_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_gp_Vec self, NCollection_Sequence_gp_Vec theOther) -> NCollection_Sequence_gp_Vec

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Vec_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_gp_Vec self, NCollection_Sequence< gp_Vec >::Iterator & thePosition)
        Remove(NCollection_Sequence_gp_Vec self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_gp_Vec self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _TColgp.NCollection_Sequence_gp_Vec_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_gp_Vec self, gp_Vec theItem)
        Append(NCollection_Sequence_gp_Vec self, NCollection_Sequence_gp_Vec theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Vec_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_gp_Vec self, gp_Vec theItem)
        Prepend(NCollection_Sequence_gp_Vec self, NCollection_Sequence_gp_Vec theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Vec_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_gp_Vec self, Standard_Integer const theIndex, gp_Vec theItem)
        InsertBefore(NCollection_Sequence_gp_Vec self, Standard_Integer const theIndex, NCollection_Sequence_gp_Vec theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Vec_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_gp_Vec self, NCollection_Sequence< gp_Vec >::Iterator & thePosition, gp_Vec theItem)
        InsertAfter(NCollection_Sequence_gp_Vec self, Standard_Integer const theIndex, NCollection_Sequence_gp_Vec theSeq)
        InsertAfter(NCollection_Sequence_gp_Vec self, Standard_Integer const theIndex, gp_Vec theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Vec_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_gp_Vec self, Standard_Integer const theIndex, NCollection_Sequence_gp_Vec theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.NCollection_Sequence_gp_Vec_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Vec_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_gp_Vec self) -> gp_Vec

        First item access

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Vec_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Vec_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_gp_Vec self) -> gp_Vec

        Last item access

        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Vec_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Vec_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_gp_Vec self, Standard_Integer const theIndex) -> gp_Vec

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Vec_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Sequence_gp_Vec___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_gp_Vec self, Standard_Integer const theIndex, gp_Vec theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Sequence_gp_Vec_SetValue(self, *args)


    def __iter__(self):
        return _TColgp.NCollection_Sequence_gp_Vec___iter__(self)
    __swig_destroy__ = _TColgp.delete_NCollection_Sequence_gp_Vec
NCollection_Sequence_gp_Vec_swigregister = _TColgp.NCollection_Sequence_gp_Vec_swigregister
NCollection_Sequence_gp_Vec_swigregister(NCollection_Sequence_gp_Vec)

def NCollection_Sequence_gp_Vec_delNode(*args):
    """
    NCollection_Sequence_gp_Vec_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _TColgp.NCollection_Sequence_gp_Vec_delNode(*args)

class NCollection_Sequence_gp_Vec_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _TColgp.new_NCollection_Sequence_gp_Vec_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TColgp.delete_NCollection_Sequence_gp_Vec_IteratorHelper

    def __next__(self):
        return _TColgp.NCollection_Sequence_gp_Vec_IteratorHelper___next__(self)
NCollection_Sequence_gp_Vec_IteratorHelper_swigregister = _TColgp.NCollection_Sequence_gp_Vec_IteratorHelper_swigregister
NCollection_Sequence_gp_Vec_IteratorHelper_swigregister(NCollection_Sequence_gp_Vec_IteratorHelper)


try:
	TColgp_SequenceOfVec = NCollection_Sequence_gp_Vec
except NameError:
	pass # does not exist, probably ignored

class Handle_TColgp_HArray2OfCirc2d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HArray2OfCirc2d self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HArray2OfCirc2d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HArray2OfCirc2d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HArray2OfCirc2d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HArray2OfCirc2d self, TColgp_HArray2OfCirc2d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfCirc2d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HArray2OfCirc2d self, Handle_TColgp_HArray2OfCirc2d theHandle) -> Handle_TColgp_HArray2OfCirc2d
        assign(Handle_TColgp_HArray2OfCirc2d self, TColgp_HArray2OfCirc2d thePtr) -> Handle_TColgp_HArray2OfCirc2d
        assign(Handle_TColgp_HArray2OfCirc2d self, Handle_TColgp_HArray2OfCirc2d theHandle) -> Handle_TColgp_HArray2OfCirc2d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HArray2OfCirc2d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HArray2OfCirc2d self) -> TColgp_HArray2OfCirc2d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfCirc2d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HArray2OfCirc2d self) -> TColgp_HArray2OfCirc2d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfCirc2d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HArray2OfCirc2d self) -> TColgp_HArray2OfCirc2d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HArray2OfCirc2d___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HArray2OfCirc2d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HArray2OfCirc2d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HArray2OfCirc2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HArray2OfCirc2d_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HArray2OfCirc2d

    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfCirc2d

        """
        res = _TColgp.Handle_TColgp_HArray2OfCirc2d_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(Handle_TColgp_HArray2OfCirc2d self) -> NCollection_Array2_gp_Circ2d

        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfCirc2d

        """
        return _TColgp.Handle_TColgp_HArray2OfCirc2d_ChangeArray2(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HArray2OfCirc2d self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HArray2OfCirc2d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray2OfCirc2d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray2OfCirc2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HArray2OfCirc2d self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HArray2OfCirc2d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HArray2OfCirc2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HArray2OfCirc2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray2OfCirc2d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HArray2OfCirc2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HArray2OfCirc2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray2OfCirc2d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HArray2OfCirc2d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HArray2OfCirc2d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HArray2OfCirc2d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfCirc2d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HArray2OfCirc2d self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HArray2OfCirc2d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HArray2OfCirc2d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfCirc2d_DecrementRefCounter(self, *args)

Handle_TColgp_HArray2OfCirc2d_swigregister = _TColgp.Handle_TColgp_HArray2OfCirc2d_swigregister
Handle_TColgp_HArray2OfCirc2d_swigregister(Handle_TColgp_HArray2OfCirc2d)

def Handle_TColgp_HArray2OfCirc2d_DownCast(thing):
    return _TColgp.Handle_TColgp_HArray2OfCirc2d_DownCast(thing)
Handle_TColgp_HArray2OfCirc2d_DownCast = _TColgp.Handle_TColgp_HArray2OfCirc2d_DownCast

class Handle_TColgp_HSequenceOfVec2d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HSequenceOfVec2d self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HSequenceOfVec2d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HSequenceOfVec2d self, TColgp_HSequenceOfVec2d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HSequenceOfVec2d self, Handle_TColgp_HSequenceOfVec2d theHandle) -> Handle_TColgp_HSequenceOfVec2d
        assign(Handle_TColgp_HSequenceOfVec2d self, TColgp_HSequenceOfVec2d thePtr) -> Handle_TColgp_HSequenceOfVec2d
        assign(Handle_TColgp_HSequenceOfVec2d self, Handle_TColgp_HSequenceOfVec2d theHandle) -> Handle_TColgp_HSequenceOfVec2d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HSequenceOfVec2d self) -> TColgp_HSequenceOfVec2d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HSequenceOfVec2d self) -> TColgp_HSequenceOfVec2d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HSequenceOfVec2d self) -> TColgp_HSequenceOfVec2d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HSequenceOfVec2d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HSequenceOfVec2d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HSequenceOfVec2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HSequenceOfVec2d_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HSequenceOfVec2d

    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfVec2d

        """
        res = _TColgp.Handle_TColgp_HSequenceOfVec2d_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(Handle_TColgp_HSequenceOfVec2d self, gp_Vec2d theItem)
        Append(Handle_TColgp_HSequenceOfVec2d self, NCollection_Sequence_gp_Vec2d theSequence)

        :type theSequence: OCC.wrapper.TColgp.TColgp_SequenceOfVec2d

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(Handle_TColgp_HSequenceOfVec2d self) -> NCollection_Sequence_gp_Vec2d

        :rtype: OCC.wrapper.TColgp.TColgp_SequenceOfVec2d

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_ChangeSequence(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HSequenceOfVec2d self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HSequenceOfVec2d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HSequenceOfVec2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def begin(self, *args):
        """
        begin(Handle_TColgp_HSequenceOfVec2d self) -> NCollection_Sequence< gp_Vec2d >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_begin(self, *args)


    def end(self, *args):
        """
        end(Handle_TColgp_HSequenceOfVec2d self) -> NCollection_Sequence< gp_Vec2d >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(Handle_TColgp_HSequenceOfVec2d self) -> NCollection_Sequence< gp_Vec2d >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(Handle_TColgp_HSequenceOfVec2d self) -> NCollection_Sequence< gp_Vec2d >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_cend(self, *args)


    def Size(self, *args):
        """
        Size(Handle_TColgp_HSequenceOfVec2d self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_Size(self, *args)


    def Length(self, *args):
        """
        Length(Handle_TColgp_HSequenceOfVec2d self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(Handle_TColgp_HSequenceOfVec2d self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(Handle_TColgp_HSequenceOfVec2d self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_TColgp_HSequenceOfVec2d self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(Handle_TColgp_HSequenceOfVec2d self)

        Reverse sequence


        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(Handle_TColgp_HSequenceOfVec2d self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_Exchange(self, *args)


    def delNode(self, *args):
        """
        delNode(Handle_TColgp_HSequenceOfVec2d self, NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_delNode(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_TColgp_HSequenceOfVec2d self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(Handle_TColgp_HSequenceOfVec2d self, NCollection_Sequence_gp_Vec2d theOther) -> NCollection_Sequence_gp_Vec2d

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_Assign(self, *args)


    def Remove(self, *args):
        """
        Remove(Handle_TColgp_HSequenceOfVec2d self, NCollection_Sequence< gp_Vec2d >::Iterator & thePosition)
        Remove(Handle_TColgp_HSequenceOfVec2d self, Standard_Integer const theIndex)
        Remove(Handle_TColgp_HSequenceOfVec2d self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_Remove(self, *args)


    def Prepend(self, *args):
        """
        Prepend(Handle_TColgp_HSequenceOfVec2d self, gp_Vec2d theItem)
        Prepend(Handle_TColgp_HSequenceOfVec2d self, NCollection_Sequence_gp_Vec2d theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(Handle_TColgp_HSequenceOfVec2d self, Standard_Integer const theIndex, gp_Vec2d theItem)
        InsertBefore(Handle_TColgp_HSequenceOfVec2d self, Standard_Integer const theIndex, NCollection_Sequence_gp_Vec2d theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(Handle_TColgp_HSequenceOfVec2d self, NCollection_Sequence< gp_Vec2d >::Iterator & thePosition, gp_Vec2d theItem)
        InsertAfter(Handle_TColgp_HSequenceOfVec2d self, Standard_Integer const theIndex, NCollection_Sequence_gp_Vec2d theSeq)
        InsertAfter(Handle_TColgp_HSequenceOfVec2d self, Standard_Integer const theIndex, gp_Vec2d theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(Handle_TColgp_HSequenceOfVec2d self, Standard_Integer const theIndex, NCollection_Sequence_gp_Vec2d theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _TColgp.Handle_TColgp_HSequenceOfVec2d_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(Handle_TColgp_HSequenceOfVec2d self) -> gp_Vec2d

        First item access

        :rtype: TheItemType &

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _TColgp.Handle_TColgp_HSequenceOfVec2d_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(Handle_TColgp_HSequenceOfVec2d self) -> gp_Vec2d

        Last item access

        :rtype: TheItemType &

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.Handle_TColgp_HSequenceOfVec2d_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TColgp.Handle_TColgp_HSequenceOfVec2d___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(Handle_TColgp_HSequenceOfVec2d self, Standard_Integer const theIndex) -> gp_Vec2d

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_ChangeValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_TColgp_HSequenceOfVec2d self, Standard_Integer const theIndex, gp_Vec2d theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_SetValue(self, *args)


    def __iter__(self):
        return _TColgp.Handle_TColgp_HSequenceOfVec2d___iter__(self)

    def Allocator(self, *args):
        """
        Returns attached allocator

        :rtype: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        res = _TColgp.Handle_TColgp_HSequenceOfVec2d_Allocator(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HSequenceOfVec2d self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HSequenceOfVec2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HSequenceOfVec2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HSequenceOfVec2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HSequenceOfVec2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HSequenceOfVec2d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HSequenceOfVec2d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HSequenceOfVec2d self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HSequenceOfVec2d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HSequenceOfVec2d_DecrementRefCounter(self, *args)

Handle_TColgp_HSequenceOfVec2d_swigregister = _TColgp.Handle_TColgp_HSequenceOfVec2d_swigregister
Handle_TColgp_HSequenceOfVec2d_swigregister(Handle_TColgp_HSequenceOfVec2d)

def Handle_TColgp_HSequenceOfVec2d_DownCast(thing):
    return _TColgp.Handle_TColgp_HSequenceOfVec2d_DownCast(thing)
Handle_TColgp_HSequenceOfVec2d_DownCast = _TColgp.Handle_TColgp_HSequenceOfVec2d_DownCast

class NCollection_Array2_gp_XY(object):
    """
    Purpose:   The class Array2 represents bi-dimensional arrays 
    of fixed size known at run time. 
    The ranges of indices are user defined.

    Warning:   Programs clients of such class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.LowerRow(); i <= A.UpperRow(); i++)
    for (j = A.LowerCol(); j <= A.UpperCol(); j++)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Purpose:   The class Array2 represents bi-dimensional arrays 
        of fixed size known at run time. 
        The ranges of indices are user defined.

        Warning:   Programs clients of such class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.LowerRow(); i <= A.UpperRow(); i++)
        for (j = A.LowerCol(); j <= A.UpperCol(); j++)
        """
        this = _TColgp.new_NCollection_Array2_gp_XY(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array2_gp_XY self, gp_XY theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_XY_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array2_gp_XY self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_XY_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array2_gp_XY self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_XY_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(NCollection_Array2_gp_XY self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_XY_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(NCollection_Array2_gp_XY self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_XY_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(NCollection_Array2_gp_XY self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_XY_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(NCollection_Array2_gp_XY self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_XY_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(NCollection_Array2_gp_XY self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_XY_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(NCollection_Array2_gp_XY self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_XY_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array2_gp_XY self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array2_gp_XY_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array2_gp_XY self, NCollection_Array2_gp_XY theOther) -> NCollection_Array2_gp_XY

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TColgp.NCollection_Array2_gp_XY_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array2_gp_XY self, NCollection_Array2_gp_XY theOther) -> NCollection_Array2_gp_XY

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TColgp.NCollection_Array2_gp_XY_assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array2_gp_XY_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array2_gp_XY self, Standard_Integer const theRow, Standard_Integer const theCol) -> gp_XY

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_XY_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array2_gp_XY___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array2_gp_XY self, Standard_Integer const theRow, Standard_Integer const theCol, gp_XY theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_XY_SetValue(self, *args)

    __swig_destroy__ = _TColgp.delete_NCollection_Array2_gp_XY
NCollection_Array2_gp_XY_swigregister = _TColgp.NCollection_Array2_gp_XY_swigregister
NCollection_Array2_gp_XY_swigregister(NCollection_Array2_gp_XY)


try:
	TColgp_Array2OfXY = NCollection_Array2_gp_XY
except NameError:
	pass # does not exist, probably ignored

class Handle_TColgp_HArray1OfXYZ(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HArray1OfXYZ self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HArray1OfXYZ_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HArray1OfXYZ self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HArray1OfXYZ_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HArray1OfXYZ self, TColgp_HArray1OfXYZ thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfXYZ_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HArray1OfXYZ self, Handle_TColgp_HArray1OfXYZ theHandle) -> Handle_TColgp_HArray1OfXYZ
        assign(Handle_TColgp_HArray1OfXYZ self, TColgp_HArray1OfXYZ thePtr) -> Handle_TColgp_HArray1OfXYZ
        assign(Handle_TColgp_HArray1OfXYZ self, Handle_TColgp_HArray1OfXYZ theHandle) -> Handle_TColgp_HArray1OfXYZ

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HArray1OfXYZ_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HArray1OfXYZ self) -> TColgp_HArray1OfXYZ

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfXYZ_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HArray1OfXYZ self) -> TColgp_HArray1OfXYZ

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray1OfXYZ___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HArray1OfXYZ self) -> TColgp_HArray1OfXYZ

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HArray1OfXYZ___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HArray1OfXYZ___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HArray1OfXYZ___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HArray1OfXYZ(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HArray1OfXYZ_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HArray1OfXYZ

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfXYZ

        """
        res = _TColgp.Handle_TColgp_HArray1OfXYZ_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_TColgp_HArray1OfXYZ self) -> NCollection_Array1_gp_XYZ

        :rtype: OCC.wrapper.TColgp.TColgp_Array1OfXYZ

        """
        return _TColgp.Handle_TColgp_HArray1OfXYZ_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HArray1OfXYZ self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HArray1OfXYZ_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray1OfXYZ_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray1OfXYZ_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HArray1OfXYZ self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HArray1OfXYZ_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HArray1OfXYZ self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HArray1OfXYZ self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray1OfXYZ_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HArray1OfXYZ self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HArray1OfXYZ self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray1OfXYZ_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HArray1OfXYZ self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HArray1OfXYZ_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HArray1OfXYZ self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray1OfXYZ_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HArray1OfXYZ self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HArray1OfXYZ_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HArray1OfXYZ self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray1OfXYZ_DecrementRefCounter(self, *args)

Handle_TColgp_HArray1OfXYZ_swigregister = _TColgp.Handle_TColgp_HArray1OfXYZ_swigregister
Handle_TColgp_HArray1OfXYZ_swigregister(Handle_TColgp_HArray1OfXYZ)

def Handle_TColgp_HArray1OfXYZ_DownCast(thing):
    return _TColgp.Handle_TColgp_HArray1OfXYZ_DownCast(thing)
Handle_TColgp_HArray1OfXYZ_DownCast = _TColgp.Handle_TColgp_HArray1OfXYZ_DownCast

class Handle_TColgp_HArray2OfDir(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TColgp_HArray2OfDir self)

        Nullify the handle


        """
        return _TColgp.Handle_TColgp_HArray2OfDir_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TColgp_HArray2OfDir self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TColgp.Handle_TColgp_HArray2OfDir_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TColgp_HArray2OfDir self, TColgp_HArray2OfDir thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfDir_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TColgp_HArray2OfDir self, Handle_TColgp_HArray2OfDir theHandle) -> Handle_TColgp_HArray2OfDir
        assign(Handle_TColgp_HArray2OfDir self, TColgp_HArray2OfDir thePtr) -> Handle_TColgp_HArray2OfDir
        assign(Handle_TColgp_HArray2OfDir self, Handle_TColgp_HArray2OfDir theHandle) -> Handle_TColgp_HArray2OfDir

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TColgp.Handle_TColgp_HArray2OfDir_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TColgp_HArray2OfDir self) -> TColgp_HArray2OfDir

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfDir_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TColgp_HArray2OfDir self) -> TColgp_HArray2OfDir

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TColgp.Handle_TColgp_HArray2OfDir___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TColgp_HArray2OfDir self) -> TColgp_HArray2OfDir

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TColgp.Handle_TColgp_HArray2OfDir___ref__(self, *args)


    def __hash__(self):
        return _TColgp.Handle_TColgp_HArray2OfDir___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TColgp.Handle_TColgp_HArray2OfDir___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TColgp.new_Handle_TColgp_HArray2OfDir(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TColgp.Handle_TColgp_HArray2OfDir_DownCast)
    __swig_destroy__ = _TColgp.delete_Handle_TColgp_HArray2OfDir

    def Array2(self, *args):
        """
        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfDir

        """
        res = _TColgp.Handle_TColgp_HArray2OfDir_Array2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray2(self, *args):
        """
        ChangeArray2(Handle_TColgp_HArray2OfDir self) -> NCollection_Array2_gp_Dir

        :rtype: OCC.wrapper.TColgp.TColgp_Array2OfDir

        """
        return _TColgp.Handle_TColgp_HArray2OfDir_ChangeArray2(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TColgp_HArray2OfDir self) -> char const *

        :rtype: const char *

        """
        return _TColgp.Handle_TColgp_HArray2OfDir_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray2OfDir_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TColgp.Handle_TColgp_HArray2OfDir_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_TColgp_HArray2OfDir self, gp_Dir theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _TColgp.Handle_TColgp_HArray2OfDir_Init(self, *args)


    def Size(self, *args):
        """
        Size(Handle_TColgp_HArray2OfDir self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfDir_Size(self, *args)


    def Length(self, *args):
        """
        Length(Handle_TColgp_HArray2OfDir self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfDir_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(Handle_TColgp_HArray2OfDir self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfDir_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(Handle_TColgp_HArray2OfDir self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfDir_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(Handle_TColgp_HArray2OfDir self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfDir_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(Handle_TColgp_HArray2OfDir self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfDir_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(Handle_TColgp_HArray2OfDir self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfDir_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(Handle_TColgp_HArray2OfDir self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfDir_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(Handle_TColgp_HArray2OfDir self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray2OfDir_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(Handle_TColgp_HArray2OfDir self, NCollection_Array2_gp_Dir theOther) -> NCollection_Array2_gp_Dir

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TColgp.Handle_TColgp_HArray2OfDir_Assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColgp.Handle_TColgp_HArray2OfDir_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColgp.Handle_TColgp_HArray2OfDir___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(Handle_TColgp_HArray2OfDir self, Standard_Integer const theRow, Standard_Integer const theCol) -> gp_Dir

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _TColgp.Handle_TColgp_HArray2OfDir_ChangeValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_TColgp_HArray2OfDir self, Standard_Integer const theRow, Standard_Integer const theCol, gp_Dir theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _TColgp.Handle_TColgp_HArray2OfDir_SetValue(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_TColgp_HArray2OfDir self)

        Memory deallocator for transient classes


        """
        return _TColgp.Handle_TColgp_HArray2OfDir_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TColgp_HArray2OfDir self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TColgp_HArray2OfDir self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray2OfDir_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TColgp_HArray2OfDir self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TColgp_HArray2OfDir self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.Handle_TColgp_HArray2OfDir_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TColgp_HArray2OfDir self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TColgp.Handle_TColgp_HArray2OfDir_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TColgp_HArray2OfDir self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfDir_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TColgp_HArray2OfDir self)

        Increments the reference counter of this object


        """
        return _TColgp.Handle_TColgp_HArray2OfDir_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TColgp_HArray2OfDir self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.Handle_TColgp_HArray2OfDir_DecrementRefCounter(self, *args)

Handle_TColgp_HArray2OfDir_swigregister = _TColgp.Handle_TColgp_HArray2OfDir_swigregister
Handle_TColgp_HArray2OfDir_swigregister(Handle_TColgp_HArray2OfDir)

def Handle_TColgp_HArray2OfDir_DownCast(thing):
    return _TColgp.Handle_TColgp_HArray2OfDir_DownCast(thing)
Handle_TColgp_HArray2OfDir_DownCast = _TColgp.Handle_TColgp_HArray2OfDir_DownCast

class NCollection_Array2_gp_Pnt(object):
    """
    Purpose:   The class Array2 represents bi-dimensional arrays 
    of fixed size known at run time. 
    The ranges of indices are user defined.

    Warning:   Programs clients of such class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.LowerRow(); i <= A.UpperRow(); i++)
    for (j = A.LowerCol(); j <= A.UpperCol(); j++)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Purpose:   The class Array2 represents bi-dimensional arrays 
        of fixed size known at run time. 
        The ranges of indices are user defined.

        Warning:   Programs clients of such class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.LowerRow(); i <= A.UpperRow(); i++)
        for (j = A.LowerCol(); j <= A.UpperCol(); j++)
        """
        this = _TColgp.new_NCollection_Array2_gp_Pnt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array2_gp_Pnt self, gp_Pnt theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_Pnt_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array2_gp_Pnt self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Pnt_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array2_gp_Pnt self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Pnt_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(NCollection_Array2_gp_Pnt self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Pnt_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(NCollection_Array2_gp_Pnt self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Pnt_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(NCollection_Array2_gp_Pnt self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Pnt_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(NCollection_Array2_gp_Pnt self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Pnt_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(NCollection_Array2_gp_Pnt self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Pnt_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(NCollection_Array2_gp_Pnt self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TColgp.NCollection_Array2_gp_Pnt_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array2_gp_Pnt self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TColgp.NCollection_Array2_gp_Pnt_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array2_gp_Pnt self, NCollection_Array2_gp_Pnt theOther) -> NCollection_Array2_gp_Pnt

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TColgp.NCollection_Array2_gp_Pnt_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array2_gp_Pnt self, NCollection_Array2_gp_Pnt theOther) -> NCollection_Array2_gp_Pnt

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _TColgp.NCollection_Array2_gp_Pnt_assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array2_gp_Pnt_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array2_gp_Pnt self, Standard_Integer const theRow, Standard_Integer const theCol) -> gp_Pnt

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_Pnt_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _TColgp.NCollection_Array2_gp_Pnt___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array2_gp_Pnt self, Standard_Integer const theRow, Standard_Integer const theCol, gp_Pnt theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _TColgp.NCollection_Array2_gp_Pnt_SetValue(self, *args)

    __swig_destroy__ = _TColgp.delete_NCollection_Array2_gp_Pnt
NCollection_Array2_gp_Pnt_swigregister = _TColgp.NCollection_Array2_gp_Pnt_swigregister
NCollection_Array2_gp_Pnt_swigregister(NCollection_Array2_gp_Pnt)


try:
	TColgp_Array2OfPnt = NCollection_Array2_gp_Pnt
except NameError:
	pass # does not exist, probably ignored



