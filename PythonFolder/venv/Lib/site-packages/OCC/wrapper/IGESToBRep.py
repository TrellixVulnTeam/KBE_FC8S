# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_IGESToBRep')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_IGESToBRep')
    _IGESToBRep = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_IGESToBRep', [dirname(__file__)])
        except ImportError:
            import _IGESToBRep
            return _IGESToBRep
        try:
            _mod = imp.load_module('_IGESToBRep', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _IGESToBRep = swig_import_helper()
    del swig_import_helper
else:
    import _IGESToBRep
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IGESToBRep.delete_SwigPyIterator

    def value(self):
        return _IGESToBRep.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _IGESToBRep.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _IGESToBRep.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _IGESToBRep.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _IGESToBRep.SwigPyIterator_equal(self, x)

    def copy(self):
        return _IGESToBRep.SwigPyIterator_copy(self)

    def next(self):
        return _IGESToBRep.SwigPyIterator_next(self)

    def __next__(self):
        return _IGESToBRep.SwigPyIterator___next__(self)

    def previous(self):
        return _IGESToBRep.SwigPyIterator_previous(self)

    def advance(self, n):
        return _IGESToBRep.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _IGESToBRep.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _IGESToBRep.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _IGESToBRep.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _IGESToBRep.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _IGESToBRep.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _IGESToBRep.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _IGESToBRep.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESToBRep.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_IGESToBRep.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESToBRep.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESToBRep.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESToBRep.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _IGESToBRep.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _IGESToBRep.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _IGESToBRep.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _IGESToBRep.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_IGESToBRep.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _IGESToBRep.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _IGESToBRep.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESToBRep.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _IGESToBRep.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _IGESToBRep.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _IGESToBRep.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _IGESToBRep.ptr_to_number(item)
ptr_to_number = _IGESToBRep.ptr_to_number

def HashCode(*args):
    return _IGESToBRep.HashCode(*args)
HashCode = _IGESToBRep.HashCode

def ptr_equal(a, b):
    return _IGESToBRep.ptr_equal(a, b)
ptr_equal = _IGESToBRep.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESSolid
else:
    import IGESSolid
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESData
else:
    import IGESData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESGeom
else:
    import IGESGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IGESBasic
else:
    import IGESBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Transfer
else:
    import Transfer
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ShapeExtend
else:
    import ShapeExtend
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColGeom
else:
    import TColGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
class IGESToBRep_CurveAndSurface(object):
    """Provides methods to transfer CurveAndSurface from IGES to CASCADE."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESToBRep_CurveAndSurface self) -> IGESToBRep_CurveAndSurface
        __init__(IGESToBRep_CurveAndSurface self, IGESToBRep_CurveAndSurface CS) -> IGESToBRep_CurveAndSurface
        __init__(IGESToBRep_CurveAndSurface self, Standard_Real const eps, Standard_Real const epsGeom, Standard_Real const epsCoeff, Standard_Boolean const mode, Standard_Boolean const modeapprox, Standard_Boolean const optimized) -> IGESToBRep_CurveAndSurface

        Creates a tool CurveAndSurface ready to run.

        :type eps: float
        :type epsGeom: float
        :type epsCoeff: float
        :type mode: bool
        :type modeapprox: bool
        :type optimized: bool

        """
        this = _IGESToBRep.new_IGESToBRep_CurveAndSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(IGESToBRep_CurveAndSurface self)

        Initializes the field of the tool CurveAndSurface with
        default creating values.


        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_Init(self, *args)


    def SetEpsilon(self, *args):
        """
        SetEpsilon(IGESToBRep_CurveAndSurface self, Standard_Real const eps)

        Changes the value of "myEps"

        :type eps: float

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetEpsilon(self, *args)


    def GetEpsilon(self, *args):
        """
        GetEpsilon(IGESToBRep_CurveAndSurface self) -> Standard_Real

        Returns the value of "myEps"

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetEpsilon(self, *args)


    def SetEpsCoeff(self, *args):
        """
        SetEpsCoeff(IGESToBRep_CurveAndSurface self, Standard_Real const eps)

        Changes the value of "myEpsCoeff"

        :type eps: float

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetEpsCoeff(self, *args)


    def GetEpsCoeff(self, *args):
        """
        GetEpsCoeff(IGESToBRep_CurveAndSurface self) -> Standard_Real

        Returns the value of "myEpsCoeff"

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetEpsCoeff(self, *args)


    def SetEpsGeom(self, *args):
        """
        SetEpsGeom(IGESToBRep_CurveAndSurface self, Standard_Real const eps)

        Changes the value of "myEpsGeom"

        :type eps: float

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetEpsGeom(self, *args)


    def GetEpsGeom(self, *args):
        """
        GetEpsGeom(IGESToBRep_CurveAndSurface self) -> Standard_Real

        Returns the value of "myEpsGeom"

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetEpsGeom(self, *args)


    def SetMinTol(self, *args):
        """
        SetMinTol(IGESToBRep_CurveAndSurface self, Standard_Real const mintol)

        Changes the value of "myMinTol"

        :type mintol: float

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetMinTol(self, *args)


    def SetMaxTol(self, *args):
        """
        SetMaxTol(IGESToBRep_CurveAndSurface self, Standard_Real const maxtol)

        Changes the value of "myMaxTol"

        :type maxtol: float

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetMaxTol(self, *args)


    def UpdateMinMaxTol(self, *args):
        """
        UpdateMinMaxTol(IGESToBRep_CurveAndSurface self)

        Sets values of "myMinTol" and "myMaxTol" as follows
        myMaxTol = Max ("read.maxprecision.val", myEpsGeom * myUnitFactor)
        myMinTol = Precision::Confusion()
        Remark:   This method is automatically invoked each time the values
        of "myEpsGeom" or "myUnitFactor" are changed


        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_UpdateMinMaxTol(self, *args)


    def GetMinTol(self, *args):
        """
        GetMinTol(IGESToBRep_CurveAndSurface self) -> Standard_Real

        Returns the value of "myMinTol"

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetMinTol(self, *args)


    def GetMaxTol(self, *args):
        """
        GetMaxTol(IGESToBRep_CurveAndSurface self) -> Standard_Real

        Returns the value of "myMaxTol"

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetMaxTol(self, *args)


    def SetModeApprox(self, *args):
        """
        SetModeApprox(IGESToBRep_CurveAndSurface self, Standard_Boolean const mode)

        Changes the value of "myModeApprox"

        :type mode: bool

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetModeApprox(self, *args)


    def GetModeApprox(self, *args):
        """
        GetModeApprox(IGESToBRep_CurveAndSurface self) -> Standard_Boolean

        Returns the value of "myModeApprox"

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetModeApprox(self, *args)


    def SetModeTransfer(self, *args):
        """
        SetModeTransfer(IGESToBRep_CurveAndSurface self, Standard_Boolean const mode)

        Changes the value of "myModeIsTopo"

        :type mode: bool

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetModeTransfer(self, *args)


    def GetModeTransfer(self, *args):
        """
        GetModeTransfer(IGESToBRep_CurveAndSurface self) -> Standard_Boolean

        Returns the value of "myModeIsTopo"

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetModeTransfer(self, *args)


    def SetOptimized(self, *args):
        """
        SetOptimized(IGESToBRep_CurveAndSurface self, Standard_Boolean const optimized)

        Changes the value of "myContIsOpti"

        :type optimized: bool

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetOptimized(self, *args)


    def GetOptimized(self, *args):
        """
        GetOptimized(IGESToBRep_CurveAndSurface self) -> Standard_Boolean

        Returns the value of "myContIsOpti"

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetOptimized(self, *args)


    def GetUnitFactor(self, *args):
        """
        GetUnitFactor(IGESToBRep_CurveAndSurface self) -> Standard_Real

        Returns the value of " myUnitFactor"

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetUnitFactor(self, *args)


    def SetSurfaceCurve(self, *args):
        """
        SetSurfaceCurve(IGESToBRep_CurveAndSurface self, Standard_Integer const ival)

        Changes the value of "mySurfaceCurve"

        :type ival: int

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetSurfaceCurve(self, *args)


    def GetSurfaceCurve(self, *args):
        """
        GetSurfaceCurve(IGESToBRep_CurveAndSurface self) -> Standard_Integer

        Returns the value of  " mySurfaceCurve" 0 = value in
        file , 2  = kepp 2d   and compute 3d   3 = keep 3d and
        compute 2d

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetSurfaceCurve(self, *args)


    def SetModel(self, *args):
        """
        SetModel(IGESToBRep_CurveAndSurface self, Handle_IGESData_IGESModel model)

        Set the value of "myModel"

        :type model: OCC.wrapper.IGESData.Handle_IGESData_IGESModel

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetModel(self, *args)


    def GetModel(self, *args):
        """
        GetModel(IGESToBRep_CurveAndSurface self) -> Handle_IGESData_IGESModel

        Returns the value of "myModel"

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESModel

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetModel(self, *args)


    def SetContinuity(self, *args):
        """
        SetContinuity(IGESToBRep_CurveAndSurface self, Standard_Integer const continuity)

        Changes the value of "myContinuity"
        if continuity = 0 do nothing else
        if continuity = 1 try C1
        if continuity = 2 try C2

        :type continuity: int

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetContinuity(self, *args)


    def GetContinuity(self, *args):
        """
        GetContinuity(IGESToBRep_CurveAndSurface self) -> Standard_Integer

        Returns the value of "myContinuity"

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetContinuity(self, *args)


    def SetTransferProcess(self, *args):
        """
        SetTransferProcess(IGESToBRep_CurveAndSurface self, Handle_Transfer_TransientProcess TP)

        Set the value of "myMsgReg"

        :type TP: OCC.wrapper.Transfer.Handle_Transfer_TransientProcess

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetTransferProcess(self, *args)


    def GetTransferProcess(self, *args):
        """
        GetTransferProcess(IGESToBRep_CurveAndSurface self) -> Handle_Transfer_TransientProcess

        Returns the value of "myMsgReg"

        :rtype: OCC.wrapper.Transfer.Handle_Transfer_TransientProcess

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetTransferProcess(self, *args)


    def TransferCurveAndSurface(self, *args):
        """
        TransferCurveAndSurface(IGESToBRep_CurveAndSurface self, Handle_IGESData_IGESEntity start) -> TopoDS_Shape

        Returns the result of the transfert of any IGES Curve
        or Surface Entity.  If  the transfer has  failed,  this
        member return a NullEntity.

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_TransferCurveAndSurface(self, *args)


    def TransferGeometry(self, *args):
        """
        TransferGeometry(IGESToBRep_CurveAndSurface self, Handle_IGESData_IGESEntity start) -> TopoDS_Shape

        Returns the result of the transfert the geometry of
        any IGESEntity.  If  the transfer has  failed,  this
        member return a NullEntity.

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_TransferGeometry(self, *args)


    def SendFail(self, *args):
        """
        SendFail(IGESToBRep_CurveAndSurface self, Handle_IGESData_IGESEntity start, Message_Msg amsg)

        Records a new Fail message

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type amsg: OCC.wrapper.Message.Message_Msg

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SendFail(self, *args)


    def SendWarning(self, *args):
        """
        SendWarning(IGESToBRep_CurveAndSurface self, Handle_IGESData_IGESEntity start, Message_Msg amsg)

        Records a new Warning message

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type amsg: OCC.wrapper.Message.Message_Msg

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SendWarning(self, *args)


    def SendMsg(self, *args):
        """
        SendMsg(IGESToBRep_CurveAndSurface self, Handle_IGESData_IGESEntity start, Message_Msg amsg)

        Records a new Information message from the definition
        of a Msg (Original+Value)

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type amsg: OCC.wrapper.Message.Message_Msg

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SendMsg(self, *args)


    def HasShapeResult(self, *args):
        """
        HasShapeResult(IGESToBRep_CurveAndSurface self, Handle_IGESData_IGESEntity start) -> Standard_Boolean

        Returns True if start was already treated and has a result in "myMap"
        else returns False.

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_HasShapeResult(self, *args)


    def SetShapeResult(self, *args):
        """
        SetShapeResult(IGESToBRep_CurveAndSurface self, Handle_IGESData_IGESEntity start, TopoDS_Shape result)

        set in "myMap" the result of the transfer of the IGESEntity "start".

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type result: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetShapeResult(self, *args)


    def NbShapeResult(self, *args):
        """
        NbShapeResult(IGESToBRep_CurveAndSurface self, Handle_IGESData_IGESEntity start) -> Standard_Integer

        Returns the number of shapes results contained in "myMap" for the
        IGESEntity start ( type VertexList or EdgeList).

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_NbShapeResult(self, *args)


    def GetShapeResult(self, *args):
        """
        GetShapeResult(IGESToBRep_CurveAndSurface self, Handle_IGESData_IGESEntity start) -> TopoDS_Shape
        GetShapeResult(IGESToBRep_CurveAndSurface self, Handle_IGESData_IGESEntity start, Standard_Integer const num) -> TopoDS_Shape

        Returns the numth result of the IGESEntity start (type VertexList or
        EdgeList) in "myMap". (if NbShapeResult is not null).

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type num: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetShapeResult(self, *args)


    def AddShapeResult(self, *args):
        """
        AddShapeResult(IGESToBRep_CurveAndSurface self, Handle_IGESData_IGESEntity start, TopoDS_Shape result)

        set in "myMap" the result of the transfer of the entity of the
        IGESEntity start ( type VertexList or EdgeList).

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type result: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_AddShapeResult(self, *args)


    def SetSurface(self, *args):
        """
        SetSurface(IGESToBRep_CurveAndSurface self, Handle_Geom_Surface theSurface)

        :type theSurface: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_SetSurface(self, *args)


    def Surface(self, *args):
        """
        Surface(IGESToBRep_CurveAndSurface self) -> Handle_Geom_Surface

        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_Surface(self, *args)


    def GetUVResolution(self, *args):
        """
        GetUVResolution(IGESToBRep_CurveAndSurface self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESToBRep.IGESToBRep_CurveAndSurface_GetUVResolution(self, *args)

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_CurveAndSurface
IGESToBRep_CurveAndSurface_swigregister = _IGESToBRep.IGESToBRep_CurveAndSurface_swigregister
IGESToBRep_CurveAndSurface_swigregister(IGESToBRep_CurveAndSurface)

class IGESToBRep_IGESBoundary(Standard.Standard_Transient):
    """
    This class is intended to translate IGES boundary entity
    (142-CurveOnSurface, 141-Boundary or 508-Loop) into the wire.
    Methods Transfer are virtual and are redefined in Advanced
    Data Exchange to optimize the translation and take into
    account advanced parameters.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESToBRep_IGESBoundary
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESToBRep_IGESBoundary(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESToBRep_IGESBoundary self) -> IGESToBRep_IGESBoundary
        __init__(IGESToBRep_IGESBoundary self, IGESToBRep_CurveAndSurface CS) -> IGESToBRep_IGESBoundary

        Empty constructor

        :type CS: OCC.wrapper.IGESToBRep.IGESToBRep_CurveAndSurface

        """
        this = _IGESToBRep.new_IGESToBRep_IGESBoundary(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(IGESToBRep_IGESBoundary self, IGESToBRep_CurveAndSurface CS, Handle_IGESData_IGESEntity entity, TopoDS_Face face, gp_Trsf2d trans, Standard_Real const uFact, Standard_Integer const filepreference)

        Inits the object with parameters common for all
        types of IGES boundaries.
        <CS>: object to be used for retrieving translation parameters
        and sending messages,
        <entity>: boundary entity to be processed,
        <face>, <trans>, <uFact>: as for IGESToBRep_TopoCurve
        <filepreference>: preferred representation (2 or 3) given
        in the IGES file

        :type CS: OCC.wrapper.IGESToBRep.IGESToBRep_CurveAndSurface
        :type entity: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type face: OCC.wrapper.TopoDS.TopoDS_Face
        :type trans: OCC.wrapper.gp.gp_Trsf2d
        :type uFact: float
        :type filepreference: int

        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_Init(self, *args)


    def WireData(self, *args):
        """
        WireData(IGESToBRep_IGESBoundary self) -> Handle_ShapeExtend_WireData

        Returns the resulting wire

        :rtype: OCC.wrapper.ShapeExtend.Handle_ShapeExtend_WireData

        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_WireData(self, *args)


    def WireData3d(self, *args):
        """
        WireData3d(IGESToBRep_IGESBoundary self) -> Handle_ShapeExtend_WireData

        Returns the wire from 3D curves (edges contain 3D curves
        and may contain pcurves)

        :rtype: OCC.wrapper.ShapeExtend.Handle_ShapeExtend_WireData

        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_WireData3d(self, *args)


    def WireData2d(self, *args):
        """
        WireData2d(IGESToBRep_IGESBoundary self) -> Handle_ShapeExtend_WireData

        Returns the the wire from 2D curves (edges contain pcurves
        only)

        :rtype: OCC.wrapper.ShapeExtend.Handle_ShapeExtend_WireData

        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_WireData2d(self, *args)


    def Transfer(self, *args):
        """
        Transfer(IGESToBRep_IGESBoundary self, Handle_IGESData_IGESEntity curve3d, Standard_Boolean const toreverse3d, Handle_IGESData_HArray1OfIGESEntity curves2d, Standard_Integer const number) -> Standard_Boolean
        Transfer(IGESToBRep_IGESBoundary self, Handle_ShapeExtend_WireData curve3d, Handle_IGESData_HArray1OfIGESEntity curves2d, Standard_Boolean const toreverse2d, Standard_Integer const number, Handle_ShapeExtend_WireData lsewd) -> Standard_Boolean

        Translates 508 entity.
        Returns True if the curve has been successfully translated,
        otherwise returns False.
        Input object IGESBoundary must be created and initialized
        before.
        <okCurve..>: flags that indicate whether corresponding
        representation has been successfully translated
        (must be set to True before first call),
        <curve3d>: result of translation of current edge,
        <curves2d>: list of parameter space curves for edge,
        <toreverse2d>: orientation flag of current edge in respect
        to its model space curve,
        <number>: rank number of edge,
        <lsewd>: returns the result of translation of current edge.

        :type okCurve: bool
        :type okCurve3d: bool
        :type okCurve2d: bool
        :type curve3d: OCC.wrapper.ShapeExtend.Handle_ShapeExtend_WireData
        :type curves2d: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type toreverse2d: bool
        :type number: int
        :type lsewd: OCC.wrapper.ShapeExtend.Handle_ShapeExtend_WireData
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_Transfer(self, *args)


    def Check(self, *args):
        """
        Check(IGESToBRep_IGESBoundary self, Standard_Boolean const result, Standard_Boolean const checkclosure, Standard_Boolean const okCurve3d, Standard_Boolean const okCurve2d)

        Checks result of translation of IGES boundary entities
        (types 141, 142 or 508).
        Checks consistency of 2D and 3D representations and keeps
        only one if they are inconsistent.
        <result>: result of translation (returned by Transfer),
        <checkclosure>: False for 142 without parent 144 entity,
        otherwise True,
        <okCurve3d>, <okCurve2d>: those returned by Transfer.

        :type result: bool
        :type checkclosure: bool
        :type okCurve3d: bool
        :type okCurve2d: bool

        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_Check(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESToBRep.IGESToBRep_IGESBoundary_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESToBRep.IGESToBRep_IGESBoundary_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_IGESBoundary
IGESToBRep_IGESBoundary_swigregister = _IGESToBRep.IGESToBRep_IGESBoundary_swigregister
IGESToBRep_IGESBoundary_swigregister(IGESToBRep_IGESBoundary)

def IGESToBRep_IGESBoundary_get_type_name(*args):
    """
    IGESToBRep_IGESBoundary_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESToBRep.IGESToBRep_IGESBoundary_get_type_name(*args)

def IGESToBRep_IGESBoundary_get_type_descriptor(*args):
    """
    IGESToBRep_IGESBoundary_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESToBRep.IGESToBRep_IGESBoundary_get_type_descriptor(*args)

class IGESToBRep_BasicCurve(IGESToBRep_CurveAndSurface):
    """
    Provides methods to transfer basic geometric curves entities
    from IGES to CASCADE.
    These can be :
    * Circular arc
    * Conic arc
    * Spline curve
    * BSpline curve
    * Line
    * Copious data
    * Point
    * Transformation matrix
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESToBRep_BasicCurve self) -> IGESToBRep_BasicCurve
        __init__(IGESToBRep_BasicCurve self, IGESToBRep_CurveAndSurface CS) -> IGESToBRep_BasicCurve
        __init__(IGESToBRep_BasicCurve self, Standard_Real const eps, Standard_Real const epsGeom, Standard_Real const epsCoeff, Standard_Boolean const mode, Standard_Boolean const modeapprox, Standard_Boolean const optimized) -> IGESToBRep_BasicCurve

        Creates a tool BasicCurve ready to run.

        :type eps: float
        :type epsGeom: float
        :type epsCoeff: float
        :type mode: bool
        :type modeapprox: bool
        :type optimized: bool

        """
        this = _IGESToBRep.new_IGESToBRep_BasicCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def TransferBasicCurve(self, *args):
        """
        TransferBasicCurve(IGESToBRep_BasicCurve self, Handle_IGESData_IGESEntity start) -> Handle_Geom_Curve

        Transfert  a  IGESEntity which  answer True  to  the
        member : IGESToBRep::IsBasicCurve(IGESEntity).  If this
        Entity could not be converted, this member returns a NullEntity.

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferBasicCurve(self, *args)


    def Transfer2dBasicCurve(self, *args):
        """
        Transfer2dBasicCurve(IGESToBRep_BasicCurve self, Handle_IGESData_IGESEntity start) -> Handle_Geom2d_Curve

        Transfert  a  IGESEntity which  answer True  to  the
        member : IGESToBRep::IsBasicCurve(IGESEntity).
        The IGESEntity must be a curve UV and its associed TRSF must
        be planar .If this Entity could not be converted, this member
        returns a NullEntity.

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dBasicCurve(self, *args)


    def TransferBSplineCurve(self, *args):
        """
        TransferBSplineCurve(IGESToBRep_BasicCurve self, Handle_IGESGeom_BSplineCurve start) -> Handle_Geom_Curve

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_BSplineCurve
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferBSplineCurve(self, *args)


    def Transfer2dBSplineCurve(self, *args):
        """
        Transfer2dBSplineCurve(IGESToBRep_BasicCurve self, Handle_IGESGeom_BSplineCurve start) -> Handle_Geom2d_Curve

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_BSplineCurve
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dBSplineCurve(self, *args)


    def TransferCircularArc(self, *args):
        """
        TransferCircularArc(IGESToBRep_BasicCurve self, Handle_IGESGeom_CircularArc start) -> Handle_Geom_Curve

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_CircularArc
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferCircularArc(self, *args)


    def Transfer2dCircularArc(self, *args):
        """
        Transfer2dCircularArc(IGESToBRep_BasicCurve self, Handle_IGESGeom_CircularArc start) -> Handle_Geom2d_Curve

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_CircularArc
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dCircularArc(self, *args)


    def TransferConicArc(self, *args):
        """
        TransferConicArc(IGESToBRep_BasicCurve self, Handle_IGESGeom_ConicArc start) -> Handle_Geom_Curve

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_ConicArc
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferConicArc(self, *args)


    def Transfer2dConicArc(self, *args):
        """
        Transfer2dConicArc(IGESToBRep_BasicCurve self, Handle_IGESGeom_ConicArc start) -> Handle_Geom2d_Curve

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_ConicArc
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dConicArc(self, *args)


    def TransferCopiousData(self, *args):
        """
        TransferCopiousData(IGESToBRep_BasicCurve self, Handle_IGESGeom_CopiousData start) -> Handle_Geom_BSplineCurve

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_CopiousData
        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferCopiousData(self, *args)


    def Transfer2dCopiousData(self, *args):
        """
        Transfer2dCopiousData(IGESToBRep_BasicCurve self, Handle_IGESGeom_CopiousData start) -> Handle_Geom2d_BSplineCurve

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_CopiousData
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dCopiousData(self, *args)


    def TransferLine(self, *args):
        """
        TransferLine(IGESToBRep_BasicCurve self, Handle_IGESGeom_Line start) -> Handle_Geom_Curve

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_Line
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferLine(self, *args)


    def Transfer2dLine(self, *args):
        """
        Transfer2dLine(IGESToBRep_BasicCurve self, Handle_IGESGeom_Line start) -> Handle_Geom2d_Curve

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_Line
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dLine(self, *args)


    def TransferSplineCurve(self, *args):
        """
        TransferSplineCurve(IGESToBRep_BasicCurve self, Handle_IGESGeom_SplineCurve start) -> Handle_Geom_BSplineCurve

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_SplineCurve
        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferSplineCurve(self, *args)


    def Transfer2dSplineCurve(self, *args):
        """
        Transfer2dSplineCurve(IGESToBRep_BasicCurve self, Handle_IGESGeom_SplineCurve start) -> Handle_Geom2d_BSplineCurve

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_SplineCurve
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_Transfer2dSplineCurve(self, *args)


    def TransferTransformation(self, *args):
        """
        TransferTransformation(IGESToBRep_BasicCurve self, Handle_IGESGeom_TransformationMatrix start) -> Handle_Geom_Transformation

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_TransformationMatrix
        :rtype: OCC.wrapper.Geom.Handle_Geom_Transformation

        """
        return _IGESToBRep.IGESToBRep_BasicCurve_TransferTransformation(self, *args)

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_BasicCurve
IGESToBRep_BasicCurve_swigregister = _IGESToBRep.IGESToBRep_BasicCurve_swigregister
IGESToBRep_BasicCurve_swigregister(IGESToBRep_BasicCurve)

class IGESToBRep_Actor(Transfer.Transfer_ActorOfTransientProcess):
    """
    This class performs the transfer of an Entity from
    IGESToBRep

    I.E. for each type of Entity, it invokes the appropriate Tool
    then returns the Binder which contains the Result
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESToBRep_Actor
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESToBRep_Actor(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESToBRep_Actor self) -> IGESToBRep_Actor

        This class performs the transfer of an Entity from
        IGESToBRep

        I.E. for each type of Entity, it invokes the appropriate Tool
        then returns the Binder which contains the Result
        """
        this = _IGESToBRep.new_IGESToBRep_Actor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetModel(self, *args):
        """
        SetModel(IGESToBRep_Actor self, Handle_Interface_InterfaceModel model)

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESToBRep.IGESToBRep_Actor_SetModel(self, *args)


    def SetContinuity(self, *args):
        """
        SetContinuity(IGESToBRep_Actor self, Standard_Integer const continuity=0)

        ---Purpose   By default continuity = 0
        if continuity = 1 : try C1
        if continuity = 2 : try C2

        :type continuity: int

        """
        return _IGESToBRep.IGESToBRep_Actor_SetContinuity(self, *args)


    def GetContinuity(self, *args):
        """
        GetContinuity(IGESToBRep_Actor self) -> Standard_Integer

        Return "thecontinuity"

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESToBRep.IGESToBRep_Actor_GetContinuity(self, *args)


    def Recognize(self, *args):
        """
        Recognize(IGESToBRep_Actor self, Handle_Standard_Transient start) -> Standard_Boolean

        :type start: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.IGESToBRep_Actor_Recognize(self, *args)


    def Transfer(self, *args):
        """
        Transfer(IGESToBRep_Actor self, Handle_Standard_Transient start, Handle_Transfer_TransientProcess TP)

        :type start: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TP: OCC.wrapper.Transfer.Handle_Transfer_TransientProcess
        :rtype: OCC.wrapper.Transfer.Handle_Transfer_Binder

        """
        return _IGESToBRep.IGESToBRep_Actor_Transfer(self, *args)


    def UsedTolerance(self, *args):
        """
        UsedTolerance(IGESToBRep_Actor self) -> Standard_Real

        Returns the tolerance which was actually used, either from
        the file or from statics

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESToBRep.IGESToBRep_Actor_UsedTolerance(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESToBRep.IGESToBRep_Actor_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESToBRep.IGESToBRep_Actor_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESToBRep.IGESToBRep_Actor_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_Actor
IGESToBRep_Actor_swigregister = _IGESToBRep.IGESToBRep_Actor_swigregister
IGESToBRep_Actor_swigregister(IGESToBRep_Actor)

def IGESToBRep_Actor_get_type_name(*args):
    """
    IGESToBRep_Actor_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESToBRep.IGESToBRep_Actor_get_type_name(*args)

def IGESToBRep_Actor_get_type_descriptor(*args):
    """
    IGESToBRep_Actor_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESToBRep.IGESToBRep_Actor_get_type_descriptor(*args)

class IGESToBRep_AlgoContainer(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESToBRep_AlgoContainer
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESToBRep_AlgoContainer(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESToBRep_AlgoContainer self) -> IGESToBRep_AlgoContainer

        Empty constructor


        """
        this = _IGESToBRep.new_IGESToBRep_AlgoContainer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetToolContainer(self, *args):
        """
        SetToolContainer(IGESToBRep_AlgoContainer self, Handle_IGESToBRep_ToolContainer TC)

        Sets ToolContainer

        :type TC: OCC.wrapper.IGESToBRep.Handle_IGESToBRep_ToolContainer

        """
        return _IGESToBRep.IGESToBRep_AlgoContainer_SetToolContainer(self, *args)


    def ToolContainer(self, *args):
        """
        ToolContainer(IGESToBRep_AlgoContainer self) -> Handle_IGESToBRep_ToolContainer

        Returns ToolContainer

        :rtype: OCC.wrapper.IGESToBRep.Handle_IGESToBRep_ToolContainer

        """
        return _IGESToBRep.IGESToBRep_AlgoContainer_ToolContainer(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESToBRep.IGESToBRep_AlgoContainer_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESToBRep.IGESToBRep_AlgoContainer_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESToBRep.IGESToBRep_AlgoContainer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_AlgoContainer
IGESToBRep_AlgoContainer_swigregister = _IGESToBRep.IGESToBRep_AlgoContainer_swigregister
IGESToBRep_AlgoContainer_swigregister(IGESToBRep_AlgoContainer)

def IGESToBRep_AlgoContainer_get_type_name(*args):
    """
    IGESToBRep_AlgoContainer_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESToBRep.IGESToBRep_AlgoContainer_get_type_name(*args)

def IGESToBRep_AlgoContainer_get_type_descriptor(*args):
    """
    IGESToBRep_AlgoContainer_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESToBRep.IGESToBRep_AlgoContainer_get_type_descriptor(*args)

class IGESToBRep_ToolContainer(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_IGESToBRep_ToolContainer
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_IGESToBRep_ToolContainer(self) 
            return h


    def __init__(self, *args):
        """
        __init__(IGESToBRep_ToolContainer self) -> IGESToBRep_ToolContainer

        Empty constructor


        """
        this = _IGESToBRep.new_IGESToBRep_ToolContainer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def IGESBoundary(self, *args):
        """
        IGESBoundary(IGESToBRep_ToolContainer self) -> Handle_IGESToBRep_IGESBoundary

        Returns IGESToBRep_IGESBoundary

        :rtype: OCC.wrapper.IGESToBRep.Handle_IGESToBRep_IGESBoundary

        """
        return _IGESToBRep.IGESToBRep_ToolContainer_IGESBoundary(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _IGESToBRep.IGESToBRep_ToolContainer_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _IGESToBRep.IGESToBRep_ToolContainer_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESToBRep.IGESToBRep_ToolContainer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_ToolContainer
IGESToBRep_ToolContainer_swigregister = _IGESToBRep.IGESToBRep_ToolContainer_swigregister
IGESToBRep_ToolContainer_swigregister(IGESToBRep_ToolContainer)

def IGESToBRep_ToolContainer_get_type_name(*args):
    """
    IGESToBRep_ToolContainer_get_type_name() -> char const *

    :rtype: const char *

    """
    return _IGESToBRep.IGESToBRep_ToolContainer_get_type_name(*args)

def IGESToBRep_ToolContainer_get_type_descriptor(*args):
    """
    IGESToBRep_ToolContainer_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _IGESToBRep.IGESToBRep_ToolContainer_get_type_descriptor(*args)

class IGESToBRep_(object):
    """
    Provides tools in order to transfer IGES entities
    to CAS.CADE.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Init(*args):
        """
        Init()

        Creates and initializes default AlgoContainer.


        """
        return _IGESToBRep.IGESToBRep__Init(*args)

    Init = staticmethod(Init)

    def SetAlgoContainer(*args):
        """
        SetAlgoContainer(Handle_IGESToBRep_AlgoContainer aContainer)

        Sets default AlgoContainer

        :type aContainer: OCC.wrapper.IGESToBRep.Handle_IGESToBRep_AlgoContainer

        """
        return _IGESToBRep.IGESToBRep__SetAlgoContainer(*args)

    SetAlgoContainer = staticmethod(SetAlgoContainer)

    def AlgoContainer(*args):
        """
        AlgoContainer() -> Handle_IGESToBRep_AlgoContainer

        Returns default AlgoContainer

        :rtype: OCC.wrapper.IGESToBRep.Handle_IGESToBRep_AlgoContainer

        """
        return _IGESToBRep.IGESToBRep__AlgoContainer(*args)

    AlgoContainer = staticmethod(AlgoContainer)

    def IsCurveAndSurface(*args):
        """
        IsCurveAndSurface(Handle_IGESData_IGESEntity start) -> Standard_Boolean

        Return True if the IGESEntity can be transfered by
        TransferCurveAndSurface.
        ex: All IGESEntity from IGESGeom

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.IGESToBRep__IsCurveAndSurface(*args)

    IsCurveAndSurface = staticmethod(IsCurveAndSurface)

    def IsBasicCurve(*args):
        """
        IsBasicCurve(Handle_IGESData_IGESEntity start) -> Standard_Boolean

        Return True if the IGESEntity can be transfered by
        TransferBasicCurve.
        ex: CircularArc, ConicArc, Line, CopiousData,
        BSplineCurve, SplineCurve... from IGESGeom :
        104,110,112,126

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.IGESToBRep__IsBasicCurve(*args)

    IsBasicCurve = staticmethod(IsBasicCurve)

    def IsBasicSurface(*args):
        """
        IsBasicSurface(Handle_IGESData_IGESEntity start) -> Standard_Boolean

        Return True if the IGESEntity can be transfered by
        TransferBasicSurface.
        ex: BSplineSurface, SplineSurface... from IGESGeom :
        114,128

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.IGESToBRep__IsBasicSurface(*args)

    IsBasicSurface = staticmethod(IsBasicSurface)

    def IsTopoCurve(*args):
        """
        IsTopoCurve(Handle_IGESData_IGESEntity start) -> Standard_Boolean

        Return True if the IGESEntity can be transfered by
        TransferTopoCurve.
        ex: all Curves from IGESGeom :
        all basic curves,102,130,142,144

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.IGESToBRep__IsTopoCurve(*args)

    IsTopoCurve = staticmethod(IsTopoCurve)

    def IsTopoSurface(*args):
        """
        IsTopoSurface(Handle_IGESData_IGESEntity start) -> Standard_Boolean

        Return True if the IGESEntity can be transfered by
        TransferTopoSurface.
        ex: All Surfaces from IGESGeom :
        all basic surfaces,108,118,120,122,141,143

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.IGESToBRep__IsTopoSurface(*args)

    IsTopoSurface = staticmethod(IsTopoSurface)

    def IsBRepEntity(*args):
        """
        IsBRepEntity(Handle_IGESData_IGESEntity start) -> Standard_Boolean

        Return True if the IGESEntity can be transfered by
        TransferBRepEntity.
        ex: VertexList, EdgeList, Loop, Face, Shell,
        Manifold Solid BRep Object from IGESSolid :
        502, 504, 508, 510, 514, 186.

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.IGESToBRep__IsBRepEntity(*args)

    IsBRepEntity = staticmethod(IsBRepEntity)

    def IGESCurveToSequenceOfIGESCurve(*args):
        """
        IGESCurveToSequenceOfIGESCurve(Handle_IGESData_IGESEntity curve, Handle_TColStd_HSequenceOfTransient sequence) -> Standard_Integer

        :type curve: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type sequence: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfTransient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESToBRep.IGESToBRep__IGESCurveToSequenceOfIGESCurve(*args)

    IGESCurveToSequenceOfIGESCurve = staticmethod(IGESCurveToSequenceOfIGESCurve)

    def TransferPCurve(*args):
        """
        TransferPCurve(TopoDS_Edge fromedge, TopoDS_Edge toedge, TopoDS_Face face) -> Standard_Boolean

        :type fromedge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type toedge: OCC.wrapper.TopoDS.TopoDS_Edge
        :type face: OCC.wrapper.TopoDS.TopoDS_Face
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.IGESToBRep__TransferPCurve(*args)

    TransferPCurve = staticmethod(TransferPCurve)

    def __init__(self):
        """
        Provides tools in order to transfer IGES entities
        to CAS.CADE.
        """
        this = _IGESToBRep.new_IGESToBRep_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_
IGESToBRep__swigregister = _IGESToBRep.IGESToBRep__swigregister
IGESToBRep__swigregister(IGESToBRep_)

def IGESToBRep__Init(*args):
    """
    IGESToBRep__Init()

    Creates and initializes default AlgoContainer.


    """
    return _IGESToBRep.IGESToBRep__Init(*args)

def IGESToBRep__SetAlgoContainer(*args):
    """
    IGESToBRep__SetAlgoContainer(Handle_IGESToBRep_AlgoContainer aContainer)

    Sets default AlgoContainer

    :type aContainer: OCC.wrapper.IGESToBRep.Handle_IGESToBRep_AlgoContainer

    """
    return _IGESToBRep.IGESToBRep__SetAlgoContainer(*args)

def IGESToBRep__AlgoContainer(*args):
    """
    IGESToBRep__AlgoContainer() -> Handle_IGESToBRep_AlgoContainer

    Returns default AlgoContainer

    :rtype: OCC.wrapper.IGESToBRep.Handle_IGESToBRep_AlgoContainer

    """
    return _IGESToBRep.IGESToBRep__AlgoContainer(*args)

def IGESToBRep__IsCurveAndSurface(*args):
    """
    IGESToBRep__IsCurveAndSurface(Handle_IGESData_IGESEntity start) -> Standard_Boolean

    Return True if the IGESEntity can be transfered by
    TransferCurveAndSurface.
    ex: All IGESEntity from IGESGeom

    :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _IGESToBRep.IGESToBRep__IsCurveAndSurface(*args)

def IGESToBRep__IsBasicCurve(*args):
    """
    IGESToBRep__IsBasicCurve(Handle_IGESData_IGESEntity start) -> Standard_Boolean

    Return True if the IGESEntity can be transfered by
    TransferBasicCurve.
    ex: CircularArc, ConicArc, Line, CopiousData,
    BSplineCurve, SplineCurve... from IGESGeom :
    104,110,112,126

    :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _IGESToBRep.IGESToBRep__IsBasicCurve(*args)

def IGESToBRep__IsBasicSurface(*args):
    """
    IGESToBRep__IsBasicSurface(Handle_IGESData_IGESEntity start) -> Standard_Boolean

    Return True if the IGESEntity can be transfered by
    TransferBasicSurface.
    ex: BSplineSurface, SplineSurface... from IGESGeom :
    114,128

    :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _IGESToBRep.IGESToBRep__IsBasicSurface(*args)

def IGESToBRep__IsTopoCurve(*args):
    """
    IGESToBRep__IsTopoCurve(Handle_IGESData_IGESEntity start) -> Standard_Boolean

    Return True if the IGESEntity can be transfered by
    TransferTopoCurve.
    ex: all Curves from IGESGeom :
    all basic curves,102,130,142,144

    :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _IGESToBRep.IGESToBRep__IsTopoCurve(*args)

def IGESToBRep__IsTopoSurface(*args):
    """
    IGESToBRep__IsTopoSurface(Handle_IGESData_IGESEntity start) -> Standard_Boolean

    Return True if the IGESEntity can be transfered by
    TransferTopoSurface.
    ex: All Surfaces from IGESGeom :
    all basic surfaces,108,118,120,122,141,143

    :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _IGESToBRep.IGESToBRep__IsTopoSurface(*args)

def IGESToBRep__IsBRepEntity(*args):
    """
    IGESToBRep__IsBRepEntity(Handle_IGESData_IGESEntity start) -> Standard_Boolean

    Return True if the IGESEntity can be transfered by
    TransferBRepEntity.
    ex: VertexList, EdgeList, Loop, Face, Shell,
    Manifold Solid BRep Object from IGESSolid :
    502, 504, 508, 510, 514, 186.

    :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _IGESToBRep.IGESToBRep__IsBRepEntity(*args)

def IGESToBRep__IGESCurveToSequenceOfIGESCurve(*args):
    """
    IGESToBRep__IGESCurveToSequenceOfIGESCurve(Handle_IGESData_IGESEntity curve, Handle_TColStd_HSequenceOfTransient sequence) -> Standard_Integer

    :type curve: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
    :type sequence: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfTransient
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _IGESToBRep.IGESToBRep__IGESCurveToSequenceOfIGESCurve(*args)

def IGESToBRep__TransferPCurve(*args):
    """
    IGESToBRep__TransferPCurve(TopoDS_Edge fromedge, TopoDS_Edge toedge, TopoDS_Face face) -> Standard_Boolean

    :type fromedge: OCC.wrapper.TopoDS.TopoDS_Edge
    :type toedge: OCC.wrapper.TopoDS.TopoDS_Edge
    :type face: OCC.wrapper.TopoDS.TopoDS_Face
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _IGESToBRep.IGESToBRep__TransferPCurve(*args)

class IGESToBRep_TopoSurface(IGESToBRep_CurveAndSurface):
    """
    Provides methods to transfer topologic surfaces entities
    from IGES to CASCADE.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESToBRep_TopoSurface self) -> IGESToBRep_TopoSurface
        __init__(IGESToBRep_TopoSurface self, IGESToBRep_CurveAndSurface CS) -> IGESToBRep_TopoSurface
        __init__(IGESToBRep_TopoSurface self, Standard_Real const eps, Standard_Real const epsGeom, Standard_Real const epsCoeff, Standard_Boolean const mode, Standard_Boolean const modeapprox, Standard_Boolean const optimized) -> IGESToBRep_TopoSurface

        Creates a tool TopoSurface ready to run.

        :type eps: float
        :type epsGeom: float
        :type epsCoeff: float
        :type mode: bool
        :type modeapprox: bool
        :type optimized: bool

        """
        this = _IGESToBRep.new_IGESToBRep_TopoSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def TransferTopoSurface(self, *args):
        """
        TransferTopoSurface(IGESToBRep_TopoSurface self, Handle_IGESData_IGESEntity start) -> TopoDS_Shape

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferTopoSurface(self, *args)


    def TransferTopoBasicSurface(self, *args):
        """
        TransferTopoBasicSurface(IGESToBRep_TopoSurface self, Handle_IGESData_IGESEntity start) -> TopoDS_Shape

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferTopoBasicSurface(self, *args)


    def TransferRuledSurface(self, *args):
        """
        TransferRuledSurface(IGESToBRep_TopoSurface self, Handle_IGESGeom_RuledSurface start) -> TopoDS_Shape

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_RuledSurface
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferRuledSurface(self, *args)


    def TransferSurfaceOfRevolution(self, *args):
        """
        TransferSurfaceOfRevolution(IGESToBRep_TopoSurface self, Handle_IGESGeom_SurfaceOfRevolution start) -> TopoDS_Shape

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_SurfaceOfRevolution
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferSurfaceOfRevolution(self, *args)


    def TransferTabulatedCylinder(self, *args):
        """
        TransferTabulatedCylinder(IGESToBRep_TopoSurface self, Handle_IGESGeom_TabulatedCylinder start) -> TopoDS_Shape

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_TabulatedCylinder
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferTabulatedCylinder(self, *args)


    def TransferOffsetSurface(self, *args):
        """
        TransferOffsetSurface(IGESToBRep_TopoSurface self, Handle_IGESGeom_OffsetSurface start) -> TopoDS_Shape

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_OffsetSurface
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferOffsetSurface(self, *args)


    def TransferTrimmedSurface(self, *args):
        """
        TransferTrimmedSurface(IGESToBRep_TopoSurface self, Handle_IGESGeom_TrimmedSurface start) -> TopoDS_Shape

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_TrimmedSurface
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferTrimmedSurface(self, *args)


    def TransferBoundedSurface(self, *args):
        """
        TransferBoundedSurface(IGESToBRep_TopoSurface self, Handle_IGESGeom_BoundedSurface start) -> TopoDS_Shape

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_BoundedSurface
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferBoundedSurface(self, *args)


    def TransferPlane(self, *args):
        """
        TransferPlane(IGESToBRep_TopoSurface self, Handle_IGESGeom_Plane start) -> TopoDS_Shape

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_Plane
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferPlane(self, *args)


    def TransferPerforate(self, *args):
        """
        TransferPerforate(IGESToBRep_TopoSurface self, Handle_IGESBasic_SingleParent start) -> TopoDS_Shape

        :type start: OCC.wrapper.IGESBasic.Handle_IGESBasic_SingleParent
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_TransferPerforate(self, *args)


    def ParamSurface(self, *args):
        """
        ParamSurface(IGESToBRep_TopoSurface self, Handle_IGESData_IGESEntity start, gp_Trsf2d trans) -> TopoDS_Shape

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type trans: OCC.wrapper.gp.gp_Trsf2d
        :type uFact: float
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoSurface_ParamSurface(self, *args)

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_TopoSurface
IGESToBRep_TopoSurface_swigregister = _IGESToBRep.IGESToBRep_TopoSurface_swigregister
IGESToBRep_TopoSurface_swigregister(IGESToBRep_TopoSurface)

class Handle_IGESToBRep_ToolContainer(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESToBRep_ToolContainer self)

        Nullify the handle


        """
        return _IGESToBRep.Handle_IGESToBRep_ToolContainer_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESToBRep_ToolContainer self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESToBRep.Handle_IGESToBRep_ToolContainer_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESToBRep_ToolContainer self, IGESToBRep_ToolContainer thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESToBRep.Handle_IGESToBRep_ToolContainer_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESToBRep_ToolContainer self, Handle_IGESToBRep_ToolContainer theHandle) -> Handle_IGESToBRep_ToolContainer
        assign(Handle_IGESToBRep_ToolContainer self, IGESToBRep_ToolContainer thePtr) -> Handle_IGESToBRep_ToolContainer
        assign(Handle_IGESToBRep_ToolContainer self, Handle_IGESToBRep_ToolContainer theHandle) -> Handle_IGESToBRep_ToolContainer

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESToBRep.Handle_IGESToBRep_ToolContainer_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESToBRep_ToolContainer self) -> IGESToBRep_ToolContainer

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESToBRep.Handle_IGESToBRep_ToolContainer_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESToBRep_ToolContainer self) -> IGESToBRep_ToolContainer

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESToBRep.Handle_IGESToBRep_ToolContainer___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESToBRep_ToolContainer self) -> IGESToBRep_ToolContainer

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESToBRep.Handle_IGESToBRep_ToolContainer___ref__(self, *args)


    def __hash__(self):
        return _IGESToBRep.Handle_IGESToBRep_ToolContainer___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESToBRep.Handle_IGESToBRep_ToolContainer___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESToBRep.new_Handle_IGESToBRep_ToolContainer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESToBRep.Handle_IGESToBRep_ToolContainer_DownCast)
    __swig_destroy__ = _IGESToBRep.delete_Handle_IGESToBRep_ToolContainer

    def IGESBoundary(self, *args):
        """
        IGESBoundary(Handle_IGESToBRep_ToolContainer self) -> Handle_IGESToBRep_IGESBoundary

        Returns IGESToBRep_IGESBoundary

        :rtype: OCC.wrapper.IGESToBRep.Handle_IGESToBRep_IGESBoundary

        """
        return _IGESToBRep.Handle_IGESToBRep_ToolContainer_IGESBoundary(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESToBRep_ToolContainer self) -> char const *

        :rtype: const char *

        """
        return _IGESToBRep.Handle_IGESToBRep_ToolContainer_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESToBRep.Handle_IGESToBRep_ToolContainer_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESToBRep.Handle_IGESToBRep_ToolContainer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESToBRep_ToolContainer self)

        Memory deallocator for transient classes


        """
        return _IGESToBRep.Handle_IGESToBRep_ToolContainer_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESToBRep_ToolContainer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESToBRep_ToolContainer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.Handle_IGESToBRep_ToolContainer_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESToBRep_ToolContainer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESToBRep_ToolContainer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.Handle_IGESToBRep_ToolContainer_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESToBRep_ToolContainer self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESToBRep.Handle_IGESToBRep_ToolContainer_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESToBRep_ToolContainer self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESToBRep.Handle_IGESToBRep_ToolContainer_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESToBRep_ToolContainer self)

        Increments the reference counter of this object


        """
        return _IGESToBRep.Handle_IGESToBRep_ToolContainer_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESToBRep_ToolContainer self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESToBRep.Handle_IGESToBRep_ToolContainer_DecrementRefCounter(self, *args)

Handle_IGESToBRep_ToolContainer_swigregister = _IGESToBRep.Handle_IGESToBRep_ToolContainer_swigregister
Handle_IGESToBRep_ToolContainer_swigregister(Handle_IGESToBRep_ToolContainer)

def Handle_IGESToBRep_ToolContainer_DownCast(thing):
    return _IGESToBRep.Handle_IGESToBRep_ToolContainer_DownCast(thing)
Handle_IGESToBRep_ToolContainer_DownCast = _IGESToBRep.Handle_IGESToBRep_ToolContainer_DownCast

class IGESToBRep_TopoCurve(IGESToBRep_CurveAndSurface):
    """
    Provides methods to transfer topologic curves entities
    from IGES to CASCADE.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESToBRep_TopoCurve self) -> IGESToBRep_TopoCurve
        __init__(IGESToBRep_TopoCurve self, IGESToBRep_CurveAndSurface CS) -> IGESToBRep_TopoCurve
        __init__(IGESToBRep_TopoCurve self, IGESToBRep_TopoCurve CS) -> IGESToBRep_TopoCurve
        __init__(IGESToBRep_TopoCurve self, Standard_Real const eps, Standard_Real const epsGeom, Standard_Real const epsCoeff, Standard_Boolean const mode, Standard_Boolean const modeapprox, Standard_Boolean const optimized) -> IGESToBRep_TopoCurve

        Creates a tool TopoCurve ready to run.

        :type eps: float
        :type epsGeom: float
        :type epsCoeff: float
        :type mode: bool
        :type modeapprox: bool
        :type optimized: bool

        """
        this = _IGESToBRep.new_IGESToBRep_TopoCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def TransferTopoCurve(self, *args):
        """
        TransferTopoCurve(IGESToBRep_TopoCurve self, Handle_IGESData_IGESEntity start) -> TopoDS_Shape

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferTopoCurve(self, *args)


    def Transfer2dTopoCurve(self, *args):
        """
        Transfer2dTopoCurve(IGESToBRep_TopoCurve self, Handle_IGESData_IGESEntity start, TopoDS_Face face, gp_Trsf2d trans, Standard_Real const uFact) -> TopoDS_Shape

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type face: OCC.wrapper.TopoDS.TopoDS_Face
        :type trans: OCC.wrapper.gp.gp_Trsf2d
        :type uFact: float
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Transfer2dTopoCurve(self, *args)


    def TransferTopoBasicCurve(self, *args):
        """
        TransferTopoBasicCurve(IGESToBRep_TopoCurve self, Handle_IGESData_IGESEntity start) -> TopoDS_Shape

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferTopoBasicCurve(self, *args)


    def Transfer2dTopoBasicCurve(self, *args):
        """
        Transfer2dTopoBasicCurve(IGESToBRep_TopoCurve self, Handle_IGESData_IGESEntity start, TopoDS_Face face, gp_Trsf2d trans, Standard_Real const uFact) -> TopoDS_Shape

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type face: OCC.wrapper.TopoDS.TopoDS_Face
        :type trans: OCC.wrapper.gp.gp_Trsf2d
        :type uFact: float
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Transfer2dTopoBasicCurve(self, *args)


    def TransferPoint(self, *args):
        """
        TransferPoint(IGESToBRep_TopoCurve self, Handle_IGESGeom_Point start) -> TopoDS_Vertex

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferPoint(self, *args)


    def Transfer2dPoint(self, *args):
        """
        Transfer2dPoint(IGESToBRep_TopoCurve self, Handle_IGESGeom_Point start) -> TopoDS_Vertex

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_Point
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Transfer2dPoint(self, *args)


    def TransferCompositeCurve(self, *args):
        """
        TransferCompositeCurve(IGESToBRep_TopoCurve self, Handle_IGESGeom_CompositeCurve start) -> TopoDS_Shape

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_CompositeCurve
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferCompositeCurve(self, *args)


    def Transfer2dCompositeCurve(self, *args):
        """
        Transfer2dCompositeCurve(IGESToBRep_TopoCurve self, Handle_IGESGeom_CompositeCurve start, TopoDS_Face face, gp_Trsf2d trans, Standard_Real const uFact) -> TopoDS_Shape

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_CompositeCurve
        :type face: OCC.wrapper.TopoDS.TopoDS_Face
        :type trans: OCC.wrapper.gp.gp_Trsf2d
        :type uFact: float
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Transfer2dCompositeCurve(self, *args)


    def TransferOffsetCurve(self, *args):
        """
        TransferOffsetCurve(IGESToBRep_TopoCurve self, Handle_IGESGeom_OffsetCurve start) -> TopoDS_Shape

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_OffsetCurve
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferOffsetCurve(self, *args)


    def Transfer2dOffsetCurve(self, *args):
        """
        Transfer2dOffsetCurve(IGESToBRep_TopoCurve self, Handle_IGESGeom_OffsetCurve start, TopoDS_Face face, gp_Trsf2d trans, Standard_Real const uFact) -> TopoDS_Shape

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_OffsetCurve
        :type face: OCC.wrapper.TopoDS.TopoDS_Face
        :type trans: OCC.wrapper.gp.gp_Trsf2d
        :type uFact: float
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Transfer2dOffsetCurve(self, *args)


    def TransferCurveOnSurface(self, *args):
        """
        TransferCurveOnSurface(IGESToBRep_TopoCurve self, Handle_IGESGeom_CurveOnSurface start) -> TopoDS_Shape

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_CurveOnSurface
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferCurveOnSurface(self, *args)


    def TransferCurveOnFace(self, *args):
        """
        TransferCurveOnFace(IGESToBRep_TopoCurve self, TopoDS_Face face, Handle_IGESGeom_CurveOnSurface start, gp_Trsf2d trans, Standard_Real const uFact, Standard_Boolean const IsCurv) -> TopoDS_Shape

        Transfers a CurveOnSurface directly on a face to trim it.
        The CurveOnSurface have to be defined Outer or Inner.

        :type face: OCC.wrapper.TopoDS.TopoDS_Face
        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_CurveOnSurface
        :type trans: OCC.wrapper.gp.gp_Trsf2d
        :type uFact: float
        :type IsCurv: bool
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferCurveOnFace(self, *args)


    def TransferBoundary(self, *args):
        """
        TransferBoundary(IGESToBRep_TopoCurve self, Handle_IGESGeom_Boundary start) -> TopoDS_Shape

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_Boundary
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferBoundary(self, *args)


    def TransferBoundaryOnFace(self, *args):
        """
        TransferBoundaryOnFace(IGESToBRep_TopoCurve self, TopoDS_Face face, Handle_IGESGeom_Boundary start, gp_Trsf2d trans, Standard_Real const uFact) -> TopoDS_Shape

        Transfers a Boundary directly on a face to trim it.

        :type face: OCC.wrapper.TopoDS.TopoDS_Face
        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_Boundary
        :type trans: OCC.wrapper.gp.gp_Trsf2d
        :type uFact: float
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_TransferBoundaryOnFace(self, *args)


    def ApproxBSplineCurve(self, *args):
        """
        ApproxBSplineCurve(IGESToBRep_TopoCurve self, Handle_Geom_BSplineCurve start)

        :type start: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_ApproxBSplineCurve(self, *args)


    def NbCurves(self, *args):
        """
        NbCurves(IGESToBRep_TopoCurve self) -> Standard_Integer

        Returns the count of Curves in "TheCurves"

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_NbCurves(self, *args)


    def Curve(self, *args):
        """
        Curve(IGESToBRep_TopoCurve self, Standard_Integer const num=1) -> Handle_Geom_Curve

        Returns a Curve given its rank, by default the first one
        (null Curvee if out of range) in "TheCurves"

        :type num: int
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Curve(self, *args)


    def Approx2dBSplineCurve(self, *args):
        """
        Approx2dBSplineCurve(IGESToBRep_TopoCurve self, Handle_Geom2d_BSplineCurve start)

        :type start: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Approx2dBSplineCurve(self, *args)


    def NbCurves2d(self, *args):
        """
        NbCurves2d(IGESToBRep_TopoCurve self) -> Standard_Integer

        Returns the count of Curves in "TheCurves2d"

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_NbCurves2d(self, *args)


    def Curve2d(self, *args):
        """
        Curve2d(IGESToBRep_TopoCurve self, Standard_Integer const num=1) -> Handle_Geom2d_Curve

        Returns a Curve given its rank, by default the first one
        (null Curvee if out of range) in "TheCurves2d"

        :type num: int
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_Curve2d(self, *args)


    def SetBadCase(self, *args):
        """
        SetBadCase(IGESToBRep_TopoCurve self, Standard_Boolean const value)

        Sets TheBadCase flag

        :type value: bool

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_SetBadCase(self, *args)


    def BadCase(self, *args):
        """
        BadCase(IGESToBRep_TopoCurve self) -> Standard_Boolean

        Returns TheBadCase flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.IGESToBRep_TopoCurve_BadCase(self, *args)

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_TopoCurve
IGESToBRep_TopoCurve_swigregister = _IGESToBRep.IGESToBRep_TopoCurve_swigregister
IGESToBRep_TopoCurve_swigregister(IGESToBRep_TopoCurve)

class IGESToBRep_Reader(object):
    """
    A simple way to read geometric IGES data.
    Encapsulates reading file and calling transfer tools
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESToBRep_Reader self) -> IGESToBRep_Reader

        Creates a Reader


        """
        this = _IGESToBRep.new_IGESToBRep_Reader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def LoadFile(self, *args):
        """
        LoadFile(IGESToBRep_Reader self, Standard_CString const filename) -> Standard_Integer

        Loads a Model from a file.Returns 0 if success.
        returns 1 if the file could not be opened,
        returns -1 if an error occurred while the file was being loaded.

        :type filename: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESToBRep.IGESToBRep_Reader_LoadFile(self, *args)


    def SetModel(self, *args):
        """
        SetModel(IGESToBRep_Reader self, Handle_IGESData_IGESModel model)

        Specifies a Model to work on
        Also clears the result and Done status, sets TransientProcess

        :type model: OCC.wrapper.IGESData.Handle_IGESData_IGESModel

        """
        return _IGESToBRep.IGESToBRep_Reader_SetModel(self, *args)


    def Model(self, *args):
        """
        Model(IGESToBRep_Reader self) -> Handle_IGESData_IGESModel

        Returns the Model to be worked on.

        :rtype: OCC.wrapper.IGESData.Handle_IGESData_IGESModel

        """
        return _IGESToBRep.IGESToBRep_Reader_Model(self, *args)


    def SetTransientProcess(self, *args):
        """
        SetTransientProcess(IGESToBRep_Reader self, Handle_Transfer_TransientProcess TP)

        Allows to set an already defined TransientProcess
        (to be called after LoadFile or SetModel)

        :type TP: OCC.wrapper.Transfer.Handle_Transfer_TransientProcess

        """
        return _IGESToBRep.IGESToBRep_Reader_SetTransientProcess(self, *args)


    def TransientProcess(self, *args):
        """
        TransientProcess(IGESToBRep_Reader self) -> Handle_Transfer_TransientProcess

        Returns the TransientProcess

        :rtype: OCC.wrapper.Transfer.Handle_Transfer_TransientProcess

        """
        return _IGESToBRep.IGESToBRep_Reader_TransientProcess(self, *args)


    def Actor(self, *args):
        """
        Actor(IGESToBRep_Reader self) -> Handle_IGESToBRep_Actor

        Returns "theActor"

        :rtype: OCC.wrapper.IGESToBRep.Handle_IGESToBRep_Actor

        """
        return _IGESToBRep.IGESToBRep_Reader_Actor(self, *args)


    def Clear(self, *args):
        """
        Clear(IGESToBRep_Reader self)

        Clears the results between two translation operations.


        """
        return _IGESToBRep.IGESToBRep_Reader_Clear(self, *args)


    def Check(self, *args):
        """
        Check(IGESToBRep_Reader self, Standard_Boolean const withprint) -> Standard_Boolean

        Checks the IGES file that was
        loaded into memory. Displays error messages in the default
        message file if withprint is true. Returns True if no fail
        message was found and False if there was at least one fail message.

        :type withprint: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.IGESToBRep_Reader_Check(self, *args)


    def TransferRoots(self, *args):
        """
        TransferRoots(IGESToBRep_Reader self, Standard_Boolean const onlyvisible)

        Translates root entities in an
        IGES file. Standard_True is the default value and means that only
        visible root entities are translated. Standard_False
        translates all of the roots (visible and invisible).

        :type onlyvisible: bool

        """
        return _IGESToBRep.IGESToBRep_Reader_TransferRoots(self, *args)


    def Transfer(self, *args):
        """
        Transfer(IGESToBRep_Reader self, Standard_Integer const num) -> Standard_Boolean

        Transfers an Entity given its rank in the Model (Root or not)
        Returns True if it is recognized as Geom-Topol.
        (But it can have failed : see IsDone)

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.IGESToBRep_Reader_Transfer(self, *args)


    def IsDone(self, *args):
        """
        IsDone(IGESToBRep_Reader self) -> Standard_Boolean

        Returns True if the LAST Transfer/TransferRoots was a success

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.IGESToBRep_Reader_IsDone(self, *args)


    def UsedTolerance(self, *args):
        """
        UsedTolerance(IGESToBRep_Reader self) -> Standard_Real

        Returns the Tolerance which has been actually used, converted
        in millimeters
        (either that from File or that from Session, according the mode)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESToBRep.IGESToBRep_Reader_UsedTolerance(self, *args)


    def NbShapes(self, *args):
        """
        NbShapes(IGESToBRep_Reader self) -> Standard_Integer

        Returns the number of shapes produced by the translation.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESToBRep.IGESToBRep_Reader_NbShapes(self, *args)


    def Shape(self, *args):
        """
        Shape(IGESToBRep_Reader self, Standard_Integer const num=1) -> TopoDS_Shape

        Returns the num the resulting shape in a translation operation.

        :type num: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_Reader_Shape(self, *args)


    def OneShape(self, *args):
        """
        OneShape(IGESToBRep_Reader self) -> TopoDS_Shape

        Returns all of the results in a
        single shape which is:
        - a null shape if there are no results,
        - a shape if there is one result,
        - a compound containing the resulting shapes if there are several.

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_Reader_OneShape(self, *args)

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_Reader
IGESToBRep_Reader_swigregister = _IGESToBRep.IGESToBRep_Reader_swigregister
IGESToBRep_Reader_swigregister(IGESToBRep_Reader)

class Handle_IGESToBRep_IGESBoundary(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESToBRep_IGESBoundary self)

        Nullify the handle


        """
        return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESToBRep_IGESBoundary self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESToBRep_IGESBoundary self, IGESToBRep_IGESBoundary thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESToBRep_IGESBoundary self, Handle_IGESToBRep_IGESBoundary theHandle) -> Handle_IGESToBRep_IGESBoundary
        assign(Handle_IGESToBRep_IGESBoundary self, IGESToBRep_IGESBoundary thePtr) -> Handle_IGESToBRep_IGESBoundary
        assign(Handle_IGESToBRep_IGESBoundary self, Handle_IGESToBRep_IGESBoundary theHandle) -> Handle_IGESToBRep_IGESBoundary

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESToBRep_IGESBoundary self) -> IGESToBRep_IGESBoundary

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESToBRep_IGESBoundary self) -> IGESToBRep_IGESBoundary

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESToBRep.Handle_IGESToBRep_IGESBoundary___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESToBRep_IGESBoundary self) -> IGESToBRep_IGESBoundary

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESToBRep.Handle_IGESToBRep_IGESBoundary___ref__(self, *args)


    def __hash__(self):
        return _IGESToBRep.Handle_IGESToBRep_IGESBoundary___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESToBRep.Handle_IGESToBRep_IGESBoundary___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESToBRep.new_Handle_IGESToBRep_IGESBoundary(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESToBRep.Handle_IGESToBRep_IGESBoundary_DownCast)
    __swig_destroy__ = _IGESToBRep.delete_Handle_IGESToBRep_IGESBoundary

    def Init(self, *args):
        """
        Init(Handle_IGESToBRep_IGESBoundary self, IGESToBRep_CurveAndSurface CS, Handle_IGESData_IGESEntity entity, TopoDS_Face face, gp_Trsf2d trans, Standard_Real const uFact, Standard_Integer const filepreference)

        Inits the object with parameters common for all
        types of IGES boundaries.
        <CS>: object to be used for retrieving translation parameters
        and sending messages,
        <entity>: boundary entity to be processed,
        <face>, <trans>, <uFact>: as for IGESToBRep_TopoCurve
        <filepreference>: preferred representation (2 or 3) given
        in the IGES file

        :type CS: OCC.wrapper.IGESToBRep.IGESToBRep_CurveAndSurface
        :type entity: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :type face: OCC.wrapper.TopoDS.TopoDS_Face
        :type trans: OCC.wrapper.gp.gp_Trsf2d
        :type uFact: float
        :type filepreference: int

        """
        return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_Init(self, *args)


    def WireData(self, *args):
        """
        WireData(Handle_IGESToBRep_IGESBoundary self) -> Handle_ShapeExtend_WireData

        Returns the resulting wire

        :rtype: OCC.wrapper.ShapeExtend.Handle_ShapeExtend_WireData

        """
        return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_WireData(self, *args)


    def WireData3d(self, *args):
        """
        WireData3d(Handle_IGESToBRep_IGESBoundary self) -> Handle_ShapeExtend_WireData

        Returns the wire from 3D curves (edges contain 3D curves
        and may contain pcurves)

        :rtype: OCC.wrapper.ShapeExtend.Handle_ShapeExtend_WireData

        """
        return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_WireData3d(self, *args)


    def WireData2d(self, *args):
        """
        WireData2d(Handle_IGESToBRep_IGESBoundary self) -> Handle_ShapeExtend_WireData

        Returns the the wire from 2D curves (edges contain pcurves
        only)

        :rtype: OCC.wrapper.ShapeExtend.Handle_ShapeExtend_WireData

        """
        return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_WireData2d(self, *args)


    def Transfer(self, *args):
        """
        Transfer(Handle_IGESToBRep_IGESBoundary self, Handle_IGESData_IGESEntity curve3d, Standard_Boolean const toreverse3d, Handle_IGESData_HArray1OfIGESEntity curves2d, Standard_Integer const number) -> Standard_Boolean
        Transfer(Handle_IGESToBRep_IGESBoundary self, Handle_ShapeExtend_WireData curve3d, Handle_IGESData_HArray1OfIGESEntity curves2d, Standard_Boolean const toreverse2d, Standard_Integer const number, Handle_ShapeExtend_WireData lsewd) -> Standard_Boolean

        Translates 508 entity.
        Returns True if the curve has been successfully translated,
        otherwise returns False.
        Input object IGESBoundary must be created and initialized
        before.
        <okCurve..>: flags that indicate whether corresponding
        representation has been successfully translated
        (must be set to True before first call),
        <curve3d>: result of translation of current edge,
        <curves2d>: list of parameter space curves for edge,
        <toreverse2d>: orientation flag of current edge in respect
        to its model space curve,
        <number>: rank number of edge,
        <lsewd>: returns the result of translation of current edge.

        :type okCurve: bool
        :type okCurve3d: bool
        :type okCurve2d: bool
        :type curve3d: OCC.wrapper.ShapeExtend.Handle_ShapeExtend_WireData
        :type curves2d: OCC.wrapper.IGESData.Handle_IGESData_HArray1OfIGESEntity
        :type toreverse2d: bool
        :type number: int
        :type lsewd: OCC.wrapper.ShapeExtend.Handle_ShapeExtend_WireData
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_Transfer(self, *args)


    def Check(self, *args):
        """
        Check(Handle_IGESToBRep_IGESBoundary self, Standard_Boolean const result, Standard_Boolean const checkclosure, Standard_Boolean const okCurve3d, Standard_Boolean const okCurve2d)

        Checks result of translation of IGES boundary entities
        (types 141, 142 or 508).
        Checks consistency of 2D and 3D representations and keeps
        only one if they are inconsistent.
        <result>: result of translation (returned by Transfer),
        <checkclosure>: False for 142 without parent 144 entity,
        otherwise True,
        <okCurve3d>, <okCurve2d>: those returned by Transfer.

        :type result: bool
        :type checkclosure: bool
        :type okCurve3d: bool
        :type okCurve2d: bool

        """
        return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_Check(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESToBRep_IGESBoundary self) -> char const *

        :rtype: const char *

        """
        return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESToBRep.Handle_IGESToBRep_IGESBoundary_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESToBRep.Handle_IGESToBRep_IGESBoundary_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESToBRep_IGESBoundary self)

        Memory deallocator for transient classes


        """
        return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESToBRep_IGESBoundary self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESToBRep_IGESBoundary self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESToBRep_IGESBoundary self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESToBRep_IGESBoundary self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESToBRep_IGESBoundary self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESToBRep_IGESBoundary self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESToBRep_IGESBoundary self)

        Increments the reference counter of this object


        """
        return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESToBRep_IGESBoundary self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_DecrementRefCounter(self, *args)

Handle_IGESToBRep_IGESBoundary_swigregister = _IGESToBRep.Handle_IGESToBRep_IGESBoundary_swigregister
Handle_IGESToBRep_IGESBoundary_swigregister(Handle_IGESToBRep_IGESBoundary)

def Handle_IGESToBRep_IGESBoundary_DownCast(thing):
    return _IGESToBRep.Handle_IGESToBRep_IGESBoundary_DownCast(thing)
Handle_IGESToBRep_IGESBoundary_DownCast = _IGESToBRep.Handle_IGESToBRep_IGESBoundary_DownCast

class IGESToBRep_BasicSurface(IGESToBRep_CurveAndSurface):
    """
    Provides methods to transfer basic geometric surface entities
    from IGES to CASCADE.
    These can be :
    * Spline surface
    * BSpline surface
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESToBRep_BasicSurface self) -> IGESToBRep_BasicSurface
        __init__(IGESToBRep_BasicSurface self, IGESToBRep_CurveAndSurface CS) -> IGESToBRep_BasicSurface
        __init__(IGESToBRep_BasicSurface self, Standard_Real const eps, Standard_Real const epsGeom, Standard_Real const epsCoeff, Standard_Boolean const mode, Standard_Boolean const modeapprox, Standard_Boolean const optimized) -> IGESToBRep_BasicSurface

        Creates a tool BasicSurface ready to run.

        :type eps: float
        :type epsGeom: float
        :type epsCoeff: float
        :type mode: bool
        :type modeapprox: bool
        :type optimized: bool

        """
        this = _IGESToBRep.new_IGESToBRep_BasicSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def TransferBasicSurface(self, *args):
        """
        TransferBasicSurface(IGESToBRep_BasicSurface self, Handle_IGESData_IGESEntity start) -> Handle_Geom_Surface

        Returns Surface  from Geom if the last transfer has
        succeded.

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferBasicSurface(self, *args)


    def TransferPlaneSurface(self, *args):
        """
        TransferPlaneSurface(IGESToBRep_BasicSurface self, Handle_IGESSolid_PlaneSurface start) -> Handle_Geom_Plane

        Returns Plane from Geom if the transfer has
        succeded.

        :type start: OCC.wrapper.IGESSolid.Handle_IGESSolid_PlaneSurface
        :rtype: OCC.wrapper.Geom.Handle_Geom_Plane

        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferPlaneSurface(self, *args)


    def TransferRigthCylindricalSurface(self, *args):
        """
        TransferRigthCylindricalSurface(IGESToBRep_BasicSurface self, Handle_IGESSolid_CylindricalSurface start) -> Handle_Geom_CylindricalSurface

        Returns CylindricalSurface from Geom if the transfer has
        succeded.

        :type start: OCC.wrapper.IGESSolid.Handle_IGESSolid_CylindricalSurface
        :rtype: OCC.wrapper.Geom.Handle_Geom_CylindricalSurface

        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferRigthCylindricalSurface(self, *args)


    def TransferRigthConicalSurface(self, *args):
        """
        TransferRigthConicalSurface(IGESToBRep_BasicSurface self, Handle_IGESSolid_ConicalSurface start) -> Handle_Geom_ConicalSurface

        Returns ConicalSurface from Geom if the transfer has
        succeded.

        :type start: OCC.wrapper.IGESSolid.Handle_IGESSolid_ConicalSurface
        :rtype: OCC.wrapper.Geom.Handle_Geom_ConicalSurface

        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferRigthConicalSurface(self, *args)


    def TransferSphericalSurface(self, *args):
        """
        TransferSphericalSurface(IGESToBRep_BasicSurface self, Handle_IGESSolid_SphericalSurface start) -> Handle_Geom_SphericalSurface

        Returns SphericalSurface from Geom if the transfer has
        succeded.

        :type start: OCC.wrapper.IGESSolid.Handle_IGESSolid_SphericalSurface
        :rtype: OCC.wrapper.Geom.Handle_Geom_SphericalSurface

        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferSphericalSurface(self, *args)


    def TransferToroidalSurface(self, *args):
        """
        TransferToroidalSurface(IGESToBRep_BasicSurface self, Handle_IGESSolid_ToroidalSurface start) -> Handle_Geom_ToroidalSurface

        Returns SphericalSurface from Geom if the transfer has
        succeded.

        :type start: OCC.wrapper.IGESSolid.Handle_IGESSolid_ToroidalSurface
        :rtype: OCC.wrapper.Geom.Handle_Geom_ToroidalSurface

        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferToroidalSurface(self, *args)


    def TransferSplineSurface(self, *args):
        """
        TransferSplineSurface(IGESToBRep_BasicSurface self, Handle_IGESGeom_SplineSurface start) -> Handle_Geom_BSplineSurface

        Returns BSplineSurface  from Geom if the transfer has
        succeded.

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_SplineSurface
        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferSplineSurface(self, *args)


    def TransferBSplineSurface(self, *args):
        """
        TransferBSplineSurface(IGESToBRep_BasicSurface self, Handle_IGESGeom_BSplineSurface start) -> Handle_Geom_BSplineSurface

        Returns BSplineSurface  from Geom if the transfer has
        succeded.

        :type start: OCC.wrapper.IGESGeom.Handle_IGESGeom_BSplineSurface
        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineSurface

        """
        return _IGESToBRep.IGESToBRep_BasicSurface_TransferBSplineSurface(self, *args)

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_BasicSurface
IGESToBRep_BasicSurface_swigregister = _IGESToBRep.IGESToBRep_BasicSurface_swigregister
IGESToBRep_BasicSurface_swigregister(IGESToBRep_BasicSurface)

class Handle_IGESToBRep_AlgoContainer(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESToBRep_AlgoContainer self)

        Nullify the handle


        """
        return _IGESToBRep.Handle_IGESToBRep_AlgoContainer_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESToBRep_AlgoContainer self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESToBRep.Handle_IGESToBRep_AlgoContainer_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESToBRep_AlgoContainer self, IGESToBRep_AlgoContainer thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESToBRep.Handle_IGESToBRep_AlgoContainer_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESToBRep_AlgoContainer self, Handle_IGESToBRep_AlgoContainer theHandle) -> Handle_IGESToBRep_AlgoContainer
        assign(Handle_IGESToBRep_AlgoContainer self, IGESToBRep_AlgoContainer thePtr) -> Handle_IGESToBRep_AlgoContainer
        assign(Handle_IGESToBRep_AlgoContainer self, Handle_IGESToBRep_AlgoContainer theHandle) -> Handle_IGESToBRep_AlgoContainer

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESToBRep.Handle_IGESToBRep_AlgoContainer_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESToBRep_AlgoContainer self) -> IGESToBRep_AlgoContainer

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESToBRep.Handle_IGESToBRep_AlgoContainer_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESToBRep_AlgoContainer self) -> IGESToBRep_AlgoContainer

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESToBRep.Handle_IGESToBRep_AlgoContainer___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESToBRep_AlgoContainer self) -> IGESToBRep_AlgoContainer

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESToBRep.Handle_IGESToBRep_AlgoContainer___ref__(self, *args)


    def __hash__(self):
        return _IGESToBRep.Handle_IGESToBRep_AlgoContainer___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESToBRep.Handle_IGESToBRep_AlgoContainer___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESToBRep.new_Handle_IGESToBRep_AlgoContainer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESToBRep.Handle_IGESToBRep_AlgoContainer_DownCast)
    __swig_destroy__ = _IGESToBRep.delete_Handle_IGESToBRep_AlgoContainer

    def SetToolContainer(self, *args):
        """
        SetToolContainer(Handle_IGESToBRep_AlgoContainer self, Handle_IGESToBRep_ToolContainer TC)

        Sets ToolContainer

        :type TC: OCC.wrapper.IGESToBRep.Handle_IGESToBRep_ToolContainer

        """
        return _IGESToBRep.Handle_IGESToBRep_AlgoContainer_SetToolContainer(self, *args)


    def ToolContainer(self, *args):
        """
        ToolContainer(Handle_IGESToBRep_AlgoContainer self) -> Handle_IGESToBRep_ToolContainer

        Returns ToolContainer

        :rtype: OCC.wrapper.IGESToBRep.Handle_IGESToBRep_ToolContainer

        """
        return _IGESToBRep.Handle_IGESToBRep_AlgoContainer_ToolContainer(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESToBRep_AlgoContainer self) -> char const *

        :rtype: const char *

        """
        return _IGESToBRep.Handle_IGESToBRep_AlgoContainer_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESToBRep.Handle_IGESToBRep_AlgoContainer_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESToBRep.Handle_IGESToBRep_AlgoContainer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_IGESToBRep_AlgoContainer self)

        Memory deallocator for transient classes


        """
        return _IGESToBRep.Handle_IGESToBRep_AlgoContainer_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESToBRep_AlgoContainer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESToBRep_AlgoContainer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.Handle_IGESToBRep_AlgoContainer_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESToBRep_AlgoContainer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESToBRep_AlgoContainer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.Handle_IGESToBRep_AlgoContainer_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESToBRep_AlgoContainer self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESToBRep.Handle_IGESToBRep_AlgoContainer_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESToBRep_AlgoContainer self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESToBRep.Handle_IGESToBRep_AlgoContainer_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESToBRep_AlgoContainer self)

        Increments the reference counter of this object


        """
        return _IGESToBRep.Handle_IGESToBRep_AlgoContainer_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESToBRep_AlgoContainer self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESToBRep.Handle_IGESToBRep_AlgoContainer_DecrementRefCounter(self, *args)

Handle_IGESToBRep_AlgoContainer_swigregister = _IGESToBRep.Handle_IGESToBRep_AlgoContainer_swigregister
Handle_IGESToBRep_AlgoContainer_swigregister(Handle_IGESToBRep_AlgoContainer)

def Handle_IGESToBRep_AlgoContainer_DownCast(thing):
    return _IGESToBRep.Handle_IGESToBRep_AlgoContainer_DownCast(thing)
Handle_IGESToBRep_AlgoContainer_DownCast = _IGESToBRep.Handle_IGESToBRep_AlgoContainer_DownCast

class Handle_IGESToBRep_Actor(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_IGESToBRep_Actor self)

        Nullify the handle


        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_IGESToBRep_Actor self) -> bool

        Check for being null

        :rtype: bool

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_IGESToBRep_Actor self, IGESToBRep_Actor thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_IGESToBRep_Actor self, Handle_IGESToBRep_Actor theHandle) -> Handle_IGESToBRep_Actor
        assign(Handle_IGESToBRep_Actor self, IGESToBRep_Actor thePtr) -> Handle_IGESToBRep_Actor
        assign(Handle_IGESToBRep_Actor self, Handle_IGESToBRep_Actor theHandle) -> Handle_IGESToBRep_Actor

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_IGESToBRep_Actor self) -> IGESToBRep_Actor

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_IGESToBRep_Actor self) -> IGESToBRep_Actor

        Member access operator (note non-const)

        :rtype: T *

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_IGESToBRep_Actor self) -> IGESToBRep_Actor

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor___ref__(self, *args)


    def __hash__(self):
        return _IGESToBRep.Handle_IGESToBRep_Actor___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _IGESToBRep.Handle_IGESToBRep_Actor___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _IGESToBRep.new_Handle_IGESToBRep_Actor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_IGESToBRep.Handle_IGESToBRep_Actor_DownCast)
    __swig_destroy__ = _IGESToBRep.delete_Handle_IGESToBRep_Actor

    def SetModel(self, *args):
        """
        SetModel(Handle_IGESToBRep_Actor self, Handle_Interface_InterfaceModel model)

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_SetModel(self, *args)


    def SetContinuity(self, *args):
        """
        SetContinuity(Handle_IGESToBRep_Actor self, Standard_Integer const continuity=0)

        ---Purpose   By default continuity = 0
        if continuity = 1 : try C1
        if continuity = 2 : try C2

        :type continuity: int

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_SetContinuity(self, *args)


    def GetContinuity(self, *args):
        """
        GetContinuity(Handle_IGESToBRep_Actor self) -> Standard_Integer

        Return "thecontinuity"

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_GetContinuity(self, *args)


    def Recognize(self, *args):
        """
        Recognize(Handle_IGESToBRep_Actor self, Handle_Standard_Transient start) -> Standard_Boolean

        :type start: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_Recognize(self, *args)


    def Transfer(self, *args):
        """
        Transfer(Handle_IGESToBRep_Actor self, Handle_Standard_Transient start, Handle_Transfer_TransientProcess TP)

        :type start: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TP: OCC.wrapper.Transfer.Handle_Transfer_TransientProcess
        :rtype: OCC.wrapper.Transfer.Handle_Transfer_Binder

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_Transfer(self, *args)


    def UsedTolerance(self, *args):
        """
        UsedTolerance(Handle_IGESToBRep_Actor self) -> Standard_Real

        Returns the tolerance which was actually used, either from
        the file or from statics

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_UsedTolerance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_IGESToBRep_Actor self) -> char const *

        :rtype: const char *

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESToBRep.Handle_IGESToBRep_Actor_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _IGESToBRep.Handle_IGESToBRep_Actor_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Transferring(self, *args):
        """
        Transferring(Handle_IGESToBRep_Actor self, Handle_Standard_Transient start, Handle_Transfer_ProcessForTransient TP)

        :type start: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TP: OCC.wrapper.Transfer.Handle_Transfer_ProcessForTransient
        :rtype: OCC.wrapper.Transfer.Handle_Transfer_Binder

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_Transferring(self, *args)


    def TransferTransient(self, *args):
        """
        TransferTransient(Handle_IGESToBRep_Actor self, Handle_Standard_Transient start, Handle_Transfer_TransientProcess TP) -> Handle_Standard_Transient

        :type start: OCC.wrapper.Standard.Handle_Standard_Transient
        :type TP: OCC.wrapper.Transfer.Handle_Transfer_TransientProcess
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_TransferTransient(self, *args)


    def TransientResult(self, *args):
        """
        TransientResult(Handle_IGESToBRep_Actor self, Handle_Standard_Transient res) -> Handle_Transfer_SimpleBinderOfTransient

        Prepares and Returns a Binder for a Transient Result
        Returns a Null Handle if <res> is itself Null

        :type res: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Transfer.Handle_Transfer_SimpleBinderOfTransient

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_TransientResult(self, *args)


    def NullResult(self, *args):
        """
        NullResult(Handle_IGESToBRep_Actor self)

        Returns a Binder for No Result, i.e. a Null Handle

        :rtype: OCC.wrapper.Transfer.Handle_Transfer_Binder

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_NullResult(self, *args)


    def SetLast(self, *args):
        """
        SetLast(Handle_IGESToBRep_Actor self, Standard_Boolean const mode)

        If <mode> is True, commands an Actor to be set at the
        end of the list of Actors (see SetNext)
        If it is False (creation default), each add Actor is
        set at the beginning of the list
        This allows to define default Actors (which are Last)

        :type mode: bool

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_SetLast(self, *args)


    def IsLast(self, *args):
        """
        IsLast(Handle_IGESToBRep_Actor self) -> Standard_Boolean

        Returns the Last status (see SetLast).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_IsLast(self, *args)


    def SetNext(self, *args):
        """
        SetNext(Handle_IGESToBRep_Actor self, Handle_Transfer_ActorOfProcessForTransient next)

        Defines a Next Actor : it can then be asked to work if
        <me> produces no result for a given type of Object.
        If Next is already set and is not "Last", calls
        SetNext on it. If Next defined and "Last", the new
        actor is added before it in the list

        :type next: OCC.wrapper.Transfer.Handle_Transfer_ActorOfProcessForTransient

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_SetNext(self, *args)


    def Next(self, *args):
        """
        Next(Handle_IGESToBRep_Actor self) -> Handle_Transfer_ActorOfProcessForTransient

        Returns the Actor defined as Next, or a Null Handle

        :rtype: OCC.wrapper.Transfer.Handle_Transfer_ActorOfProcessForTransient

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_Next(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_IGESToBRep_Actor self)

        Memory deallocator for transient classes


        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_IGESToBRep_Actor self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_IGESToBRep_Actor self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_IGESToBRep_Actor self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_IGESToBRep_Actor self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_IGESToBRep_Actor self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_IGESToBRep_Actor self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_IGESToBRep_Actor self)

        Increments the reference counter of this object


        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_IGESToBRep_Actor self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _IGESToBRep.Handle_IGESToBRep_Actor_DecrementRefCounter(self, *args)

Handle_IGESToBRep_Actor_swigregister = _IGESToBRep.Handle_IGESToBRep_Actor_swigregister
Handle_IGESToBRep_Actor_swigregister(Handle_IGESToBRep_Actor)

def Handle_IGESToBRep_Actor_DownCast(thing):
    return _IGESToBRep.Handle_IGESToBRep_Actor_DownCast(thing)
Handle_IGESToBRep_Actor_DownCast = _IGESToBRep.Handle_IGESToBRep_Actor_DownCast

class IGESToBRep_BRepEntity(IGESToBRep_CurveAndSurface):
    """
    Provides methods to transfer BRep entities
    ( VertexList 502, EdgeList 504, Loop 508,
    Face 510, Shell 514, ManifoldSolid 186)
    from IGES to CASCADE.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(IGESToBRep_BRepEntity self) -> IGESToBRep_BRepEntity
        __init__(IGESToBRep_BRepEntity self, IGESToBRep_CurveAndSurface CS) -> IGESToBRep_BRepEntity
        __init__(IGESToBRep_BRepEntity self, Standard_Real const eps, Standard_Real const epsGeom, Standard_Real const epsCoeff, Standard_Boolean const mode, Standard_Boolean const modeapprox, Standard_Boolean const optimized) -> IGESToBRep_BRepEntity

        Creates a tool BRepEntity ready to run.

        :type eps: float
        :type epsGeom: float
        :type epsCoeff: float
        :type mode: bool
        :type modeapprox: bool
        :type optimized: bool

        """
        this = _IGESToBRep.new_IGESToBRep_BRepEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def TransferBRepEntity(self, *args):
        """
        TransferBRepEntity(IGESToBRep_BRepEntity self, Handle_IGESData_IGESEntity start) -> TopoDS_Shape

        Transfer the BRepEntity" : Face, Shell or ManifoldSolid.

        :type start: OCC.wrapper.IGESData.Handle_IGESData_IGESEntity
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferBRepEntity(self, *args)


    def TransferVertex(self, *args):
        """
        TransferVertex(IGESToBRep_BRepEntity self, Handle_IGESSolid_VertexList start, Standard_Integer const index) -> TopoDS_Vertex

        Transfer the entity number "index" of the VertexList "start"

        :type start: OCC.wrapper.IGESSolid.Handle_IGESSolid_VertexList
        :type index: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferVertex(self, *args)


    def TransferEdge(self, *args):
        """
        TransferEdge(IGESToBRep_BRepEntity self, Handle_IGESSolid_EdgeList start, Standard_Integer const index) -> TopoDS_Shape

        Transfer the entity number "index" of the EdgeList "start".

        :type start: OCC.wrapper.IGESSolid.Handle_IGESSolid_EdgeList
        :type index: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferEdge(self, *args)


    def TransferLoop(self, *args):
        """
        TransferLoop(IGESToBRep_BRepEntity self, Handle_IGESSolid_Loop start, TopoDS_Face Face, gp_Trsf2d trans, Standard_Real const uFact) -> TopoDS_Shape

        Transfer the Loop Entity

        :type start: OCC.wrapper.IGESSolid.Handle_IGESSolid_Loop
        :type Face: OCC.wrapper.TopoDS.TopoDS_Face
        :type trans: OCC.wrapper.gp.gp_Trsf2d
        :type uFact: float
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferLoop(self, *args)


    def TransferFace(self, *args):
        """
        TransferFace(IGESToBRep_BRepEntity self, Handle_IGESSolid_Face start) -> TopoDS_Shape

        Transfer the Face Entity

        :type start: OCC.wrapper.IGESSolid.Handle_IGESSolid_Face
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferFace(self, *args)


    def TransferShell(self, *args):
        """
        TransferShell(IGESToBRep_BRepEntity self, Handle_IGESSolid_Shell start) -> TopoDS_Shape

        Transfer the Shell Entity

        :type start: OCC.wrapper.IGESSolid.Handle_IGESSolid_Shell
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferShell(self, *args)


    def TransferManifoldSolid(self, *args):
        """
        TransferManifoldSolid(IGESToBRep_BRepEntity self, Handle_IGESSolid_ManifoldSolid start) -> TopoDS_Shape

        Transfer the ManifoldSolid Entity

        :type start: OCC.wrapper.IGESSolid.Handle_IGESSolid_ManifoldSolid
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _IGESToBRep.IGESToBRep_BRepEntity_TransferManifoldSolid(self, *args)

    __swig_destroy__ = _IGESToBRep.delete_IGESToBRep_BRepEntity
IGESToBRep_BRepEntity_swigregister = _IGESToBRep.IGESToBRep_BRepEntity_swigregister
IGESToBRep_BRepEntity_swigregister(IGESToBRep_BRepEntity)



