# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BinMNaming')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BinMNaming')
    _BinMNaming = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BinMNaming', [dirname(__file__)])
        except ImportError:
            import _BinMNaming
            return _BinMNaming
        try:
            _mod = imp.load_module('_BinMNaming', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BinMNaming = swig_import_helper()
    del swig_import_helper
else:
    import _BinMNaming
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BinMNaming.delete_SwigPyIterator

    def value(self):
        return _BinMNaming.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BinMNaming.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BinMNaming.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BinMNaming.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BinMNaming.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BinMNaming.SwigPyIterator_copy(self)

    def next(self):
        return _BinMNaming.SwigPyIterator_next(self)

    def __next__(self):
        return _BinMNaming.SwigPyIterator___next__(self)

    def previous(self):
        return _BinMNaming.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BinMNaming.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BinMNaming.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BinMNaming.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BinMNaming.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BinMNaming.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BinMNaming.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BinMNaming.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BinMNaming.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BinMNaming.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_BinMNaming.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _BinMNaming.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BinMNaming.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinMNaming.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _BinMNaming.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _BinMNaming.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _BinMNaming.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BinMNaming.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_BinMNaming.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _BinMNaming.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BinMNaming.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinMNaming.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _BinMNaming.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _BinMNaming.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _BinMNaming.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _BinMNaming.ptr_to_number(item)
ptr_to_number = _BinMNaming.ptr_to_number

def HashCode(*args):
    return _BinMNaming.HashCode(*args)
HashCode = _BinMNaming.HashCode

def ptr_equal(a, b):
    return _BinMNaming.ptr_equal(a, b)
ptr_equal = _BinMNaming.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BinTools
else:
    import BinTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BinObjMgt
else:
    import BinObjMgt
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Storage
else:
    import Storage
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BinMDF
else:
    import BinMDF
del _swig_python_version_info
class BinMNaming_NamingDriver(BinMDF.BinMDF_ADriver):
    """Naming  Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMNaming_NamingDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMNaming_NamingDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMNaming_NamingDriver self, Handle_Message_Messenger theMessageDriver) -> BinMNaming_NamingDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMNaming.new_BinMNaming_NamingDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMNaming_NamingDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMNaming.BinMNaming_NamingDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMNaming_NamingDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMNaming_NamingDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMNaming.BinMNaming_NamingDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMNaming.BinMNaming_NamingDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMNaming.BinMNaming_NamingDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMNaming.BinMNaming_NamingDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMNaming.delete_BinMNaming_NamingDriver
BinMNaming_NamingDriver_swigregister = _BinMNaming.BinMNaming_NamingDriver_swigregister
BinMNaming_NamingDriver_swigregister(BinMNaming_NamingDriver)

def BinMNaming_NamingDriver_get_type_name(*args):
    """
    BinMNaming_NamingDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMNaming.BinMNaming_NamingDriver_get_type_name(*args)

def BinMNaming_NamingDriver_get_type_descriptor(*args):
    """
    BinMNaming_NamingDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMNaming.BinMNaming_NamingDriver_get_type_descriptor(*args)

class Handle_BinMNaming_NamingDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMNaming_NamingDriver self)

        Nullify the handle


        """
        return _BinMNaming.Handle_BinMNaming_NamingDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMNaming_NamingDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMNaming.Handle_BinMNaming_NamingDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMNaming_NamingDriver self, BinMNaming_NamingDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMNaming.Handle_BinMNaming_NamingDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMNaming_NamingDriver self, Handle_BinMNaming_NamingDriver theHandle) -> Handle_BinMNaming_NamingDriver
        assign(Handle_BinMNaming_NamingDriver self, BinMNaming_NamingDriver thePtr) -> Handle_BinMNaming_NamingDriver
        assign(Handle_BinMNaming_NamingDriver self, Handle_BinMNaming_NamingDriver theHandle) -> Handle_BinMNaming_NamingDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMNaming.Handle_BinMNaming_NamingDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMNaming_NamingDriver self) -> BinMNaming_NamingDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMNaming.Handle_BinMNaming_NamingDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMNaming_NamingDriver self) -> BinMNaming_NamingDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMNaming.Handle_BinMNaming_NamingDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMNaming_NamingDriver self) -> BinMNaming_NamingDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMNaming.Handle_BinMNaming_NamingDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMNaming.Handle_BinMNaming_NamingDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMNaming.Handle_BinMNaming_NamingDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMNaming.new_Handle_BinMNaming_NamingDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMNaming.Handle_BinMNaming_NamingDriver_DownCast)
    __swig_destroy__ = _BinMNaming.delete_Handle_BinMNaming_NamingDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMNaming_NamingDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMNaming.Handle_BinMNaming_NamingDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMNaming_NamingDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMNaming_NamingDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMNaming.Handle_BinMNaming_NamingDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMNaming_NamingDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMNaming.Handle_BinMNaming_NamingDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMNaming.Handle_BinMNaming_NamingDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMNaming.Handle_BinMNaming_NamingDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMNaming.Handle_BinMNaming_NamingDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMNaming.Handle_BinMNaming_NamingDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMNaming_NamingDriver self)

        Memory deallocator for transient classes


        """
        return _BinMNaming.Handle_BinMNaming_NamingDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMNaming_NamingDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMNaming_NamingDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMNaming.Handle_BinMNaming_NamingDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMNaming_NamingDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMNaming_NamingDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMNaming.Handle_BinMNaming_NamingDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMNaming_NamingDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMNaming.Handle_BinMNaming_NamingDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMNaming_NamingDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMNaming.Handle_BinMNaming_NamingDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMNaming_NamingDriver self)

        Increments the reference counter of this object


        """
        return _BinMNaming.Handle_BinMNaming_NamingDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMNaming_NamingDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMNaming.Handle_BinMNaming_NamingDriver_DecrementRefCounter(self, *args)

Handle_BinMNaming_NamingDriver_swigregister = _BinMNaming.Handle_BinMNaming_NamingDriver_swigregister
Handle_BinMNaming_NamingDriver_swigregister(Handle_BinMNaming_NamingDriver)

def Handle_BinMNaming_NamingDriver_DownCast(thing):
    return _BinMNaming.Handle_BinMNaming_NamingDriver_DownCast(thing)
Handle_BinMNaming_NamingDriver_DownCast = _BinMNaming.Handle_BinMNaming_NamingDriver_DownCast

class BinMNaming_NamedShapeDriver(BinMDF.BinMDF_ADriver):
    """NamedShape  Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMNaming_NamedShapeDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMNaming_NamedShapeDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMNaming_NamedShapeDriver self, Handle_Message_Messenger theMessageDriver) -> BinMNaming_NamedShapeDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMNaming.new_BinMNaming_NamedShapeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMNaming_NamedShapeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMNaming_NamedShapeDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMNaming_NamedShapeDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_Paste(self, *args)


    def ReadShapeSection(self, *args):
        """
        ReadShapeSection(BinMNaming_NamedShapeDriver self, Standard_IStream & theIS)

        Input the shapes from Bin Document file

        :type theIS: OCC.wrapper.Standard.Standard_IStream

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_ReadShapeSection(self, *args)


    def WriteShapeSection(self, *args):
        """
        WriteShapeSection(BinMNaming_NamedShapeDriver self, Standard_OStream & theOS)

        Output the shapes into Bin Document file

        :type theOS: OCC.wrapper.Standard.Standard_OStream

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_WriteShapeSection(self, *args)


    def Clear(self, *args):
        """
        Clear(BinMNaming_NamedShapeDriver self)

        Clear myShapeSet


        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_Clear(self, *args)


    def IsWithTriangles(self, *args):
        """
        IsWithTriangles(BinMNaming_NamedShapeDriver self) -> Standard_Boolean

        Return true if shape should be stored with triangles.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_IsWithTriangles(self, *args)


    def SetWithTriangles(self, *args):
        """
        SetWithTriangles(BinMNaming_NamedShapeDriver self, Standard_Boolean const isWithTriangles)

        set whether to store triangulation

        :type isWithTriangles: bool

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_SetWithTriangles(self, *args)


    def SetFormatNb(self, *args):
        """
        SetFormatNb(BinMNaming_NamedShapeDriver self, Standard_Integer const theFormat)

        set the format of topology
        First : does not write CurveOnSurface UV Points into the file
        on reading calls Check() method.
        Second: stores CurveOnSurface UV Points.

        :type theFormat: int

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_SetFormatNb(self, *args)


    def GetFormatNb(self, *args):
        """
        GetFormatNb(BinMNaming_NamedShapeDriver self) -> Standard_Integer

        get the format of topology

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_GetFormatNb(self, *args)


    def GetShapesLocations(self, *args):
        """
        GetShapesLocations(BinMNaming_NamedShapeDriver self) -> BinTools_LocationSet

        get the format of topology

        :rtype: OCC.wrapper.BinTools.BinTools_LocationSet

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_GetShapesLocations(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMNaming.BinMNaming_NamedShapeDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMNaming.BinMNaming_NamedShapeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMNaming.delete_BinMNaming_NamedShapeDriver
BinMNaming_NamedShapeDriver_swigregister = _BinMNaming.BinMNaming_NamedShapeDriver_swigregister
BinMNaming_NamedShapeDriver_swigregister(BinMNaming_NamedShapeDriver)

def BinMNaming_NamedShapeDriver_get_type_name(*args):
    """
    BinMNaming_NamedShapeDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMNaming.BinMNaming_NamedShapeDriver_get_type_name(*args)

def BinMNaming_NamedShapeDriver_get_type_descriptor(*args):
    """
    BinMNaming_NamedShapeDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMNaming.BinMNaming_NamedShapeDriver_get_type_descriptor(*args)

class Handle_BinMNaming_NamedShapeDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMNaming_NamedShapeDriver self)

        Nullify the handle


        """
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMNaming_NamedShapeDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMNaming_NamedShapeDriver self, BinMNaming_NamedShapeDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMNaming_NamedShapeDriver self, Handle_BinMNaming_NamedShapeDriver theHandle) -> Handle_BinMNaming_NamedShapeDriver
        assign(Handle_BinMNaming_NamedShapeDriver self, BinMNaming_NamedShapeDriver thePtr) -> Handle_BinMNaming_NamedShapeDriver
        assign(Handle_BinMNaming_NamedShapeDriver self, Handle_BinMNaming_NamedShapeDriver theHandle) -> Handle_BinMNaming_NamedShapeDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMNaming_NamedShapeDriver self) -> BinMNaming_NamedShapeDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMNaming_NamedShapeDriver self) -> BinMNaming_NamedShapeDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMNaming_NamedShapeDriver self) -> BinMNaming_NamedShapeDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMNaming.Handle_BinMNaming_NamedShapeDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMNaming.new_Handle_BinMNaming_NamedShapeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMNaming.Handle_BinMNaming_NamedShapeDriver_DownCast)
    __swig_destroy__ = _BinMNaming.delete_Handle_BinMNaming_NamedShapeDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMNaming_NamedShapeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMNaming_NamedShapeDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMNaming_NamedShapeDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_Paste(self, *args)


    def ReadShapeSection(self, *args):
        """
        ReadShapeSection(Handle_BinMNaming_NamedShapeDriver self, Standard_IStream & theIS)

        Input the shapes from Bin Document file

        :type theIS: OCC.wrapper.Standard.Standard_IStream

        """
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_ReadShapeSection(self, *args)


    def WriteShapeSection(self, *args):
        """
        WriteShapeSection(Handle_BinMNaming_NamedShapeDriver self, Standard_OStream & theOS)

        Output the shapes into Bin Document file

        :type theOS: OCC.wrapper.Standard.Standard_OStream

        """
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_WriteShapeSection(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_BinMNaming_NamedShapeDriver self)

        Clear myShapeSet


        """
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_Clear(self, *args)


    def IsWithTriangles(self, *args):
        """
        IsWithTriangles(Handle_BinMNaming_NamedShapeDriver self) -> Standard_Boolean

        Return true if shape should be stored with triangles.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_IsWithTriangles(self, *args)


    def SetWithTriangles(self, *args):
        """
        SetWithTriangles(Handle_BinMNaming_NamedShapeDriver self, Standard_Boolean const isWithTriangles)

        set whether to store triangulation

        :type isWithTriangles: bool

        """
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_SetWithTriangles(self, *args)


    def SetFormatNb(self, *args):
        """
        SetFormatNb(Handle_BinMNaming_NamedShapeDriver self, Standard_Integer const theFormat)

        set the format of topology
        First : does not write CurveOnSurface UV Points into the file
        on reading calls Check() method.
        Second: stores CurveOnSurface UV Points.

        :type theFormat: int

        """
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_SetFormatNb(self, *args)


    def GetFormatNb(self, *args):
        """
        GetFormatNb(Handle_BinMNaming_NamedShapeDriver self) -> Standard_Integer

        get the format of topology

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_GetFormatNb(self, *args)


    def GetShapesLocations(self, *args):
        """
        GetShapesLocations(Handle_BinMNaming_NamedShapeDriver self) -> BinTools_LocationSet

        get the format of topology

        :rtype: OCC.wrapper.BinTools.BinTools_LocationSet

        """
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_GetShapesLocations(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMNaming_NamedShapeDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMNaming.Handle_BinMNaming_NamedShapeDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMNaming.Handle_BinMNaming_NamedShapeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMNaming.Handle_BinMNaming_NamedShapeDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMNaming.Handle_BinMNaming_NamedShapeDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMNaming_NamedShapeDriver self)

        Memory deallocator for transient classes


        """
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMNaming_NamedShapeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMNaming_NamedShapeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMNaming_NamedShapeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMNaming_NamedShapeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMNaming_NamedShapeDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMNaming_NamedShapeDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMNaming_NamedShapeDriver self)

        Increments the reference counter of this object


        """
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMNaming_NamedShapeDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_DecrementRefCounter(self, *args)

Handle_BinMNaming_NamedShapeDriver_swigregister = _BinMNaming.Handle_BinMNaming_NamedShapeDriver_swigregister
Handle_BinMNaming_NamedShapeDriver_swigregister(Handle_BinMNaming_NamedShapeDriver)

def Handle_BinMNaming_NamedShapeDriver_DownCast(thing):
    return _BinMNaming.Handle_BinMNaming_NamedShapeDriver_DownCast(thing)
Handle_BinMNaming_NamedShapeDriver_DownCast = _BinMNaming.Handle_BinMNaming_NamedShapeDriver_DownCast

class BinMNaming_(object):
    """Storage/Retrieval drivers for TNaming attributes"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddDrivers(*args):
        """
        AddDrivers(Handle_BinMDF_ADriverTable theDriverTable, Handle_Message_Messenger aMsgDrv)

        Adds the attribute drivers to <theDriverTable>.

        :type theDriverTable: OCC.wrapper.BinMDF.Handle_BinMDF_ADriverTable
        :type aMsgDrv: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _BinMNaming.BinMNaming__AddDrivers(*args)

    AddDrivers = staticmethod(AddDrivers)

    def SetDocumentVersion(*args):
        """
        SetDocumentVersion(Standard_Integer const DocVersion)

        :type DocVersion: int

        """
        return _BinMNaming.BinMNaming__SetDocumentVersion(*args)

    SetDocumentVersion = staticmethod(SetDocumentVersion)

    def DocumentVersion(*args):
        """
        DocumentVersion() -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMNaming.BinMNaming__DocumentVersion(*args)

    DocumentVersion = staticmethod(DocumentVersion)

    def __init__(self):
        """Storage/Retrieval drivers for TNaming attributes"""
        this = _BinMNaming.new_BinMNaming_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinMNaming.delete_BinMNaming_
BinMNaming__swigregister = _BinMNaming.BinMNaming__swigregister
BinMNaming__swigregister(BinMNaming_)

def BinMNaming__AddDrivers(*args):
    """
    BinMNaming__AddDrivers(Handle_BinMDF_ADriverTable theDriverTable, Handle_Message_Messenger aMsgDrv)

    Adds the attribute drivers to <theDriverTable>.

    :type theDriverTable: OCC.wrapper.BinMDF.Handle_BinMDF_ADriverTable
    :type aMsgDrv: OCC.wrapper.Message.Handle_Message_Messenger

    """
    return _BinMNaming.BinMNaming__AddDrivers(*args)

def BinMNaming__SetDocumentVersion(*args):
    """
    BinMNaming__SetDocumentVersion(Standard_Integer const DocVersion)

    :type DocVersion: int

    """
    return _BinMNaming.BinMNaming__SetDocumentVersion(*args)

def BinMNaming__DocumentVersion(*args):
    """
    BinMNaming__DocumentVersion() -> Standard_Integer

    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _BinMNaming.BinMNaming__DocumentVersion(*args)



