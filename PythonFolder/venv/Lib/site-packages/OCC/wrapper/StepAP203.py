# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StepAP203')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StepAP203')
    _StepAP203 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepAP203', [dirname(__file__)])
        except ImportError:
            import _StepAP203
            return _StepAP203
        try:
            _mod = imp.load_module('_StepAP203', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StepAP203 = swig_import_helper()
    del swig_import_helper
else:
    import _StepAP203
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepAP203.delete_SwigPyIterator

    def value(self):
        return _StepAP203.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _StepAP203.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _StepAP203.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _StepAP203.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _StepAP203.SwigPyIterator_equal(self, x)

    def copy(self):
        return _StepAP203.SwigPyIterator_copy(self)

    def next(self):
        return _StepAP203.SwigPyIterator_next(self)

    def __next__(self):
        return _StepAP203.SwigPyIterator___next__(self)

    def previous(self):
        return _StepAP203.SwigPyIterator_previous(self)

    def advance(self, n):
        return _StepAP203.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _StepAP203.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _StepAP203.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _StepAP203.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _StepAP203.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _StepAP203.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _StepAP203.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StepAP203.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StepAP203.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_StepAP203.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _StepAP203.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StepAP203.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepAP203.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _StepAP203.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _StepAP203.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _StepAP203.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StepAP203.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_StepAP203.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _StepAP203.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StepAP203.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepAP203.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _StepAP203.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _StepAP203.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _StepAP203.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _StepAP203.ptr_to_number(item)
ptr_to_number = _StepAP203.ptr_to_number

def HashCode(*args):
    return _StepAP203.HashCode(*args)
HashCode = _StepAP203.HashCode

def ptr_equal(a, b):
    return _StepAP203.ptr_equal(a, b)
ptr_equal = _StepAP203.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepBasic
else:
    import StepBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepData
else:
    import StepData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepRepr
else:
    import StepRepr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepShape
else:
    import StepShape
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepGeom
else:
    import StepGeom
del _swig_python_version_info
class StepAP203_CcDesignPersonAndOrganizationAssignment(StepBasic.StepBasic_PersonAndOrganizationAssignment):
    """Representation of STEP entity CcDesignPersonAndOrganizationAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP203_CcDesignPersonAndOrganizationAssignment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP203_CcDesignPersonAndOrganizationAssignment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP203_CcDesignPersonAndOrganizationAssignment self) -> StepAP203_CcDesignPersonAndOrganizationAssignment

        Empty constructor


        """
        this = _StepAP203.new_StepAP203_CcDesignPersonAndOrganizationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP203_CcDesignPersonAndOrganizationAssignment self, Handle_StepBasic_PersonAndOrganization aPersonAndOrganizationAssignment_AssignedPersonAndOrganization, Handle_StepBasic_PersonAndOrganizationRole aPersonAndOrganizationAssignment_Role, Handle_StepAP203_HArray1OfPersonOrganizationItem aItems)

        Initialize all fields (own and inherited)

        :type aPersonAndOrganizationAssignment_AssignedPersonAndOrganization: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganization
        :type aPersonAndOrganizationAssignment_Role: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganizationRole
        :type aItems: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem

        """
        return _StepAP203.StepAP203_CcDesignPersonAndOrganizationAssignment_Init(self, *args)


    def Items(self, *args):
        """
        Items(StepAP203_CcDesignPersonAndOrganizationAssignment self) -> Handle_StepAP203_HArray1OfPersonOrganizationItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem

        """
        return _StepAP203.StepAP203_CcDesignPersonAndOrganizationAssignment_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP203_CcDesignPersonAndOrganizationAssignment self, Handle_StepAP203_HArray1OfPersonOrganizationItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem

        """
        return _StepAP203.StepAP203_CcDesignPersonAndOrganizationAssignment_SetItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP203.StepAP203_CcDesignPersonAndOrganizationAssignment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP203.StepAP203_CcDesignPersonAndOrganizationAssignment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.StepAP203_CcDesignPersonAndOrganizationAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP203.delete_StepAP203_CcDesignPersonAndOrganizationAssignment
StepAP203_CcDesignPersonAndOrganizationAssignment_swigregister = _StepAP203.StepAP203_CcDesignPersonAndOrganizationAssignment_swigregister
StepAP203_CcDesignPersonAndOrganizationAssignment_swigregister(StepAP203_CcDesignPersonAndOrganizationAssignment)

def StepAP203_CcDesignPersonAndOrganizationAssignment_get_type_name(*args):
    """
    StepAP203_CcDesignPersonAndOrganizationAssignment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP203.StepAP203_CcDesignPersonAndOrganizationAssignment_get_type_name(*args)

def StepAP203_CcDesignPersonAndOrganizationAssignment_get_type_descriptor(*args):
    """
    StepAP203_CcDesignPersonAndOrganizationAssignment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP203.StepAP203_CcDesignPersonAndOrganizationAssignment_get_type_descriptor(*args)

class StepAP203_StartWork(StepBasic.StepBasic_ActionAssignment):
    """Representation of STEP entity StartWork"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP203_StartWork
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP203_StartWork(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP203_StartWork self) -> StepAP203_StartWork

        Empty constructor


        """
        this = _StepAP203.new_StepAP203_StartWork(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP203_StartWork self, Handle_StepBasic_Action aActionAssignment_AssignedAction, Handle_StepAP203_HArray1OfWorkItem aItems)

        Initialize all fields (own and inherited)

        :type aActionAssignment_AssignedAction: OCC.wrapper.StepBasic.Handle_StepBasic_Action
        :type aItems: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfWorkItem

        """
        return _StepAP203.StepAP203_StartWork_Init(self, *args)


    def Items(self, *args):
        """
        Items(StepAP203_StartWork self) -> Handle_StepAP203_HArray1OfWorkItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfWorkItem

        """
        return _StepAP203.StepAP203_StartWork_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP203_StartWork self, Handle_StepAP203_HArray1OfWorkItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfWorkItem

        """
        return _StepAP203.StepAP203_StartWork_SetItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP203.StepAP203_StartWork_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP203.StepAP203_StartWork_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.StepAP203_StartWork_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP203.delete_StepAP203_StartWork
StepAP203_StartWork_swigregister = _StepAP203.StepAP203_StartWork_swigregister
StepAP203_StartWork_swigregister(StepAP203_StartWork)

def StepAP203_StartWork_get_type_name(*args):
    """
    StepAP203_StartWork_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP203.StepAP203_StartWork_get_type_name(*args)

def StepAP203_StartWork_get_type_descriptor(*args):
    """
    StepAP203_StartWork_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP203.StepAP203_StartWork_get_type_descriptor(*args)

class StepAP203_ChangeRequest(StepBasic.StepBasic_ActionRequestAssignment):
    """Representation of STEP entity ChangeRequest"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP203_ChangeRequest
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP203_ChangeRequest(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP203_ChangeRequest self) -> StepAP203_ChangeRequest

        Empty constructor


        """
        this = _StepAP203.new_StepAP203_ChangeRequest(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP203_ChangeRequest self, Handle_StepBasic_VersionedActionRequest aActionRequestAssignment_AssignedActionRequest, Handle_StepAP203_HArray1OfChangeRequestItem aItems)

        Initialize all fields (own and inherited)

        :type aActionRequestAssignment_AssignedActionRequest: OCC.wrapper.StepBasic.Handle_StepBasic_VersionedActionRequest
        :type aItems: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem

        """
        return _StepAP203.StepAP203_ChangeRequest_Init(self, *args)


    def Items(self, *args):
        """
        Items(StepAP203_ChangeRequest self) -> Handle_StepAP203_HArray1OfChangeRequestItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem

        """
        return _StepAP203.StepAP203_ChangeRequest_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP203_ChangeRequest self, Handle_StepAP203_HArray1OfChangeRequestItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem

        """
        return _StepAP203.StepAP203_ChangeRequest_SetItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP203.StepAP203_ChangeRequest_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP203.StepAP203_ChangeRequest_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.StepAP203_ChangeRequest_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP203.delete_StepAP203_ChangeRequest
StepAP203_ChangeRequest_swigregister = _StepAP203.StepAP203_ChangeRequest_swigregister
StepAP203_ChangeRequest_swigregister(StepAP203_ChangeRequest)

def StepAP203_ChangeRequest_get_type_name(*args):
    """
    StepAP203_ChangeRequest_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP203.StepAP203_ChangeRequest_get_type_name(*args)

def StepAP203_ChangeRequest_get_type_descriptor(*args):
    """
    StepAP203_ChangeRequest_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP203.StepAP203_ChangeRequest_get_type_descriptor(*args)

class StepAP203_HArray1OfDateTimeItem(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP203_HArray1OfDateTimeItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP203_HArray1OfDateTimeItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP203_HArray1OfDateTimeItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP203_HArray1OfDateTimeItem
        __init__(StepAP203_HArray1OfDateTimeItem self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP203_DateTimeItem theValue) -> StepAP203_HArray1OfDateTimeItem
        __init__(StepAP203_HArray1OfDateTimeItem self, NCollection_Array1_StepAP203_DateTimeItem theOther) -> StepAP203_HArray1OfDateTimeItem

        :type theOther: OCC.wrapper.StepAP203.StepAP203_Array1OfDateTimeItem

        """
        this = _StepAP203.new_StepAP203_HArray1OfDateTimeItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfDateTimeItem

        """
        res = _StepAP203.StepAP203_HArray1OfDateTimeItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP203_HArray1OfDateTimeItem self) -> NCollection_Array1_StepAP203_DateTimeItem

        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfDateTimeItem

        """
        return _StepAP203.StepAP203_HArray1OfDateTimeItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP203.StepAP203_HArray1OfDateTimeItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP203.StepAP203_HArray1OfDateTimeItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.StepAP203_HArray1OfDateTimeItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP203.delete_StepAP203_HArray1OfDateTimeItem
StepAP203_HArray1OfDateTimeItem_swigregister = _StepAP203.StepAP203_HArray1OfDateTimeItem_swigregister
StepAP203_HArray1OfDateTimeItem_swigregister(StepAP203_HArray1OfDateTimeItem)

def StepAP203_HArray1OfDateTimeItem_get_type_name(*args):
    """
    StepAP203_HArray1OfDateTimeItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP203.StepAP203_HArray1OfDateTimeItem_get_type_name(*args)

def StepAP203_HArray1OfDateTimeItem_get_type_descriptor(*args):
    """
    StepAP203_HArray1OfDateTimeItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP203.StepAP203_HArray1OfDateTimeItem_get_type_descriptor(*args)

class StepAP203_HArray1OfStartRequestItem(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP203_HArray1OfStartRequestItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP203_HArray1OfStartRequestItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP203_HArray1OfStartRequestItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP203_HArray1OfStartRequestItem
        __init__(StepAP203_HArray1OfStartRequestItem self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP203_StartRequestItem theValue) -> StepAP203_HArray1OfStartRequestItem
        __init__(StepAP203_HArray1OfStartRequestItem self, NCollection_Array1_StepAP203_StartRequestItem theOther) -> StepAP203_HArray1OfStartRequestItem

        :type theOther: OCC.wrapper.StepAP203.StepAP203_Array1OfStartRequestItem

        """
        this = _StepAP203.new_StepAP203_HArray1OfStartRequestItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfStartRequestItem

        """
        res = _StepAP203.StepAP203_HArray1OfStartRequestItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP203_HArray1OfStartRequestItem self) -> NCollection_Array1_StepAP203_StartRequestItem

        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfStartRequestItem

        """
        return _StepAP203.StepAP203_HArray1OfStartRequestItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP203.StepAP203_HArray1OfStartRequestItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP203.StepAP203_HArray1OfStartRequestItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.StepAP203_HArray1OfStartRequestItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP203.delete_StepAP203_HArray1OfStartRequestItem
StepAP203_HArray1OfStartRequestItem_swigregister = _StepAP203.StepAP203_HArray1OfStartRequestItem_swigregister
StepAP203_HArray1OfStartRequestItem_swigregister(StepAP203_HArray1OfStartRequestItem)

def StepAP203_HArray1OfStartRequestItem_get_type_name(*args):
    """
    StepAP203_HArray1OfStartRequestItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP203.StepAP203_HArray1OfStartRequestItem_get_type_name(*args)

def StepAP203_HArray1OfStartRequestItem_get_type_descriptor(*args):
    """
    StepAP203_HArray1OfStartRequestItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP203.StepAP203_HArray1OfStartRequestItem_get_type_descriptor(*args)

class StepAP203_CcDesignSpecificationReference(StepBasic.StepBasic_DocumentReference):
    """Representation of STEP entity CcDesignSpecificationReference"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP203_CcDesignSpecificationReference
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP203_CcDesignSpecificationReference(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP203_CcDesignSpecificationReference self) -> StepAP203_CcDesignSpecificationReference

        Empty constructor


        """
        this = _StepAP203.new_StepAP203_CcDesignSpecificationReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP203_CcDesignSpecificationReference self, Handle_StepBasic_Document aDocumentReference_AssignedDocument, Handle_TCollection_HAsciiString aDocumentReference_Source, Handle_StepAP203_HArray1OfSpecifiedItem aItems)

        Initialize all fields (own and inherited)

        :type aDocumentReference_AssignedDocument: OCC.wrapper.StepBasic.Handle_StepBasic_Document
        :type aDocumentReference_Source: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aItems: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem

        """
        return _StepAP203.StepAP203_CcDesignSpecificationReference_Init(self, *args)


    def Items(self, *args):
        """
        Items(StepAP203_CcDesignSpecificationReference self) -> Handle_StepAP203_HArray1OfSpecifiedItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem

        """
        return _StepAP203.StepAP203_CcDesignSpecificationReference_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP203_CcDesignSpecificationReference self, Handle_StepAP203_HArray1OfSpecifiedItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem

        """
        return _StepAP203.StepAP203_CcDesignSpecificationReference_SetItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP203.StepAP203_CcDesignSpecificationReference_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP203.StepAP203_CcDesignSpecificationReference_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.StepAP203_CcDesignSpecificationReference_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP203.delete_StepAP203_CcDesignSpecificationReference
StepAP203_CcDesignSpecificationReference_swigregister = _StepAP203.StepAP203_CcDesignSpecificationReference_swigregister
StepAP203_CcDesignSpecificationReference_swigregister(StepAP203_CcDesignSpecificationReference)

def StepAP203_CcDesignSpecificationReference_get_type_name(*args):
    """
    StepAP203_CcDesignSpecificationReference_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP203.StepAP203_CcDesignSpecificationReference_get_type_name(*args)

def StepAP203_CcDesignSpecificationReference_get_type_descriptor(*args):
    """
    StepAP203_CcDesignSpecificationReference_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP203.StepAP203_CcDesignSpecificationReference_get_type_descriptor(*args)

class StepAP203_WorkItem(StepData.StepData_SelectType):
    """Representation of STEP SELECT type WorkItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP203_WorkItem self) -> StepAP203_WorkItem

        Empty constructor


        """
        this = _StepAP203.new_StepAP203_WorkItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP203_WorkItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a kind of WorkItem select type
        1 -> ProductDefinitionFormation from StepBasic
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.StepAP203_WorkItem_CaseNum(self, *args)


    def ProductDefinitionFormation(self, *args):
        """
        ProductDefinitionFormation(StepAP203_WorkItem self) -> Handle_StepBasic_ProductDefinitionFormation

        Returns Value as ProductDefinitionFormation (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionFormation

        """
        return _StepAP203.StepAP203_WorkItem_ProductDefinitionFormation(self, *args)

    __swig_destroy__ = _StepAP203.delete_StepAP203_WorkItem
StepAP203_WorkItem_swigregister = _StepAP203.StepAP203_WorkItem_swigregister
StepAP203_WorkItem_swigregister(StepAP203_WorkItem)

class StepAP203_CcDesignCertification(StepBasic.StepBasic_CertificationAssignment):
    """Representation of STEP entity CcDesignCertification"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP203_CcDesignCertification
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP203_CcDesignCertification(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP203_CcDesignCertification self) -> StepAP203_CcDesignCertification

        Empty constructor


        """
        this = _StepAP203.new_StepAP203_CcDesignCertification(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP203_CcDesignCertification self, Handle_StepBasic_Certification aCertificationAssignment_AssignedCertification, Handle_StepAP203_HArray1OfCertifiedItem aItems)

        Initialize all fields (own and inherited)

        :type aCertificationAssignment_AssignedCertification: OCC.wrapper.StepBasic.Handle_StepBasic_Certification
        :type aItems: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfCertifiedItem

        """
        return _StepAP203.StepAP203_CcDesignCertification_Init(self, *args)


    def Items(self, *args):
        """
        Items(StepAP203_CcDesignCertification self) -> Handle_StepAP203_HArray1OfCertifiedItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfCertifiedItem

        """
        return _StepAP203.StepAP203_CcDesignCertification_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP203_CcDesignCertification self, Handle_StepAP203_HArray1OfCertifiedItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfCertifiedItem

        """
        return _StepAP203.StepAP203_CcDesignCertification_SetItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP203.StepAP203_CcDesignCertification_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP203.StepAP203_CcDesignCertification_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.StepAP203_CcDesignCertification_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP203.delete_StepAP203_CcDesignCertification
StepAP203_CcDesignCertification_swigregister = _StepAP203.StepAP203_CcDesignCertification_swigregister
StepAP203_CcDesignCertification_swigregister(StepAP203_CcDesignCertification)

def StepAP203_CcDesignCertification_get_type_name(*args):
    """
    StepAP203_CcDesignCertification_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP203.StepAP203_CcDesignCertification_get_type_name(*args)

def StepAP203_CcDesignCertification_get_type_descriptor(*args):
    """
    StepAP203_CcDesignCertification_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP203.StepAP203_CcDesignCertification_get_type_descriptor(*args)

class StepAP203_ApprovedItem(StepData.StepData_SelectType):
    """Representation of STEP SELECT type ApprovedItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP203_ApprovedItem self) -> StepAP203_ApprovedItem

        Empty constructor


        """
        this = _StepAP203.new_StepAP203_ApprovedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP203_ApprovedItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a kind of ApprovedItem select type
        1 -> ProductDefinitionFormation from StepBasic
        2 -> ProductDefinition from StepBasic
        3 -> ConfigurationEffectivity from StepRepr
        4 -> ConfigurationItem from StepRepr
        5 -> SecurityClassification from StepBasic
        6 -> ChangeRequest from StepAP203
        7 -> Change from StepAP203
        8 -> StartRequest from StepAP203
        9 -> StartWork from StepAP203
        10 -> Certification from StepBasic
        11 -> Contract from StepBasic
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.StepAP203_ApprovedItem_CaseNum(self, *args)


    def ProductDefinitionFormation(self, *args):
        """
        ProductDefinitionFormation(StepAP203_ApprovedItem self) -> Handle_StepBasic_ProductDefinitionFormation

        Returns Value as ProductDefinitionFormation (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionFormation

        """
        return _StepAP203.StepAP203_ApprovedItem_ProductDefinitionFormation(self, *args)


    def ProductDefinition(self, *args):
        """
        ProductDefinition(StepAP203_ApprovedItem self) -> Handle_StepBasic_ProductDefinition

        Returns Value as ProductDefinition (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepAP203.StepAP203_ApprovedItem_ProductDefinition(self, *args)


    def ConfigurationEffectivity(self, *args):
        """
        ConfigurationEffectivity(StepAP203_ApprovedItem self) -> Handle_StepRepr_ConfigurationEffectivity

        Returns Value as ConfigurationEffectivity (or Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationEffectivity

        """
        return _StepAP203.StepAP203_ApprovedItem_ConfigurationEffectivity(self, *args)


    def ConfigurationItem(self, *args):
        """
        ConfigurationItem(StepAP203_ApprovedItem self) -> Handle_StepRepr_ConfigurationItem

        Returns Value as ConfigurationItem (or Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationItem

        """
        return _StepAP203.StepAP203_ApprovedItem_ConfigurationItem(self, *args)


    def SecurityClassification(self, *args):
        """
        SecurityClassification(StepAP203_ApprovedItem self) -> Handle_StepBasic_SecurityClassification

        Returns Value as SecurityClassification (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_SecurityClassification

        """
        return _StepAP203.StepAP203_ApprovedItem_SecurityClassification(self, *args)


    def ChangeRequest(self, *args):
        """
        ChangeRequest(StepAP203_ApprovedItem self) -> Handle_StepAP203_ChangeRequest

        Returns Value as ChangeRequest (or Null if another type)

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_ChangeRequest

        """
        return _StepAP203.StepAP203_ApprovedItem_ChangeRequest(self, *args)


    def Change(self, *args):
        """
        Change(StepAP203_ApprovedItem self) -> Handle_StepAP203_Change

        Returns Value as Change (or Null if another type)

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_Change

        """
        return _StepAP203.StepAP203_ApprovedItem_Change(self, *args)


    def StartRequest(self, *args):
        """
        StartRequest(StepAP203_ApprovedItem self) -> Handle_StepAP203_StartRequest

        Returns Value as StartRequest (or Null if another type)

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_StartRequest

        """
        return _StepAP203.StepAP203_ApprovedItem_StartRequest(self, *args)


    def StartWork(self, *args):
        """
        StartWork(StepAP203_ApprovedItem self) -> Handle_StepAP203_StartWork

        Returns Value as StartWork (or Null if another type)

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_StartWork

        """
        return _StepAP203.StepAP203_ApprovedItem_StartWork(self, *args)


    def Certification(self, *args):
        """
        Certification(StepAP203_ApprovedItem self) -> Handle_StepBasic_Certification

        Returns Value as Certification (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Certification

        """
        return _StepAP203.StepAP203_ApprovedItem_Certification(self, *args)


    def Contract(self, *args):
        """
        Contract(StepAP203_ApprovedItem self) -> Handle_StepBasic_Contract

        Returns Value as Contract (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Contract

        """
        return _StepAP203.StepAP203_ApprovedItem_Contract(self, *args)

    __swig_destroy__ = _StepAP203.delete_StepAP203_ApprovedItem
StepAP203_ApprovedItem_swigregister = _StepAP203.StepAP203_ApprovedItem_swigregister
StepAP203_ApprovedItem_swigregister(StepAP203_ApprovedItem)

class StepAP203_CcDesignContract(StepBasic.StepBasic_ContractAssignment):
    """Representation of STEP entity CcDesignContract"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP203_CcDesignContract
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP203_CcDesignContract(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP203_CcDesignContract self) -> StepAP203_CcDesignContract

        Empty constructor


        """
        this = _StepAP203.new_StepAP203_CcDesignContract(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP203_CcDesignContract self, Handle_StepBasic_Contract aContractAssignment_AssignedContract, Handle_StepAP203_HArray1OfContractedItem aItems)

        Initialize all fields (own and inherited)

        :type aContractAssignment_AssignedContract: OCC.wrapper.StepBasic.Handle_StepBasic_Contract
        :type aItems: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfContractedItem

        """
        return _StepAP203.StepAP203_CcDesignContract_Init(self, *args)


    def Items(self, *args):
        """
        Items(StepAP203_CcDesignContract self) -> Handle_StepAP203_HArray1OfContractedItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfContractedItem

        """
        return _StepAP203.StepAP203_CcDesignContract_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP203_CcDesignContract self, Handle_StepAP203_HArray1OfContractedItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfContractedItem

        """
        return _StepAP203.StepAP203_CcDesignContract_SetItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP203.StepAP203_CcDesignContract_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP203.StepAP203_CcDesignContract_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.StepAP203_CcDesignContract_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP203.delete_StepAP203_CcDesignContract
StepAP203_CcDesignContract_swigregister = _StepAP203.StepAP203_CcDesignContract_swigregister
StepAP203_CcDesignContract_swigregister(StepAP203_CcDesignContract)

def StepAP203_CcDesignContract_get_type_name(*args):
    """
    StepAP203_CcDesignContract_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP203.StepAP203_CcDesignContract_get_type_name(*args)

def StepAP203_CcDesignContract_get_type_descriptor(*args):
    """
    StepAP203_CcDesignContract_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP203.StepAP203_CcDesignContract_get_type_descriptor(*args)

class StepAP203_StartRequest(StepBasic.StepBasic_ActionRequestAssignment):
    """Representation of STEP entity StartRequest"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP203_StartRequest
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP203_StartRequest(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP203_StartRequest self) -> StepAP203_StartRequest

        Empty constructor


        """
        this = _StepAP203.new_StepAP203_StartRequest(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP203_StartRequest self, Handle_StepBasic_VersionedActionRequest aActionRequestAssignment_AssignedActionRequest, Handle_StepAP203_HArray1OfStartRequestItem aItems)

        Initialize all fields (own and inherited)

        :type aActionRequestAssignment_AssignedActionRequest: OCC.wrapper.StepBasic.Handle_StepBasic_VersionedActionRequest
        :type aItems: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfStartRequestItem

        """
        return _StepAP203.StepAP203_StartRequest_Init(self, *args)


    def Items(self, *args):
        """
        Items(StepAP203_StartRequest self) -> Handle_StepAP203_HArray1OfStartRequestItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfStartRequestItem

        """
        return _StepAP203.StepAP203_StartRequest_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP203_StartRequest self, Handle_StepAP203_HArray1OfStartRequestItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfStartRequestItem

        """
        return _StepAP203.StepAP203_StartRequest_SetItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP203.StepAP203_StartRequest_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP203.StepAP203_StartRequest_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.StepAP203_StartRequest_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP203.delete_StepAP203_StartRequest
StepAP203_StartRequest_swigregister = _StepAP203.StepAP203_StartRequest_swigregister
StepAP203_StartRequest_swigregister(StepAP203_StartRequest)

def StepAP203_StartRequest_get_type_name(*args):
    """
    StepAP203_StartRequest_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP203.StepAP203_StartRequest_get_type_name(*args)

def StepAP203_StartRequest_get_type_descriptor(*args):
    """
    StepAP203_StartRequest_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP203.StepAP203_StartRequest_get_type_descriptor(*args)

class StepAP203_HArray1OfContractedItem(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP203_HArray1OfContractedItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP203_HArray1OfContractedItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP203_HArray1OfContractedItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP203_HArray1OfContractedItem
        __init__(StepAP203_HArray1OfContractedItem self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP203_ContractedItem theValue) -> StepAP203_HArray1OfContractedItem
        __init__(StepAP203_HArray1OfContractedItem self, NCollection_Array1_StepAP203_ContractedItem theOther) -> StepAP203_HArray1OfContractedItem

        :type theOther: OCC.wrapper.StepAP203.StepAP203_Array1OfContractedItem

        """
        this = _StepAP203.new_StepAP203_HArray1OfContractedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfContractedItem

        """
        res = _StepAP203.StepAP203_HArray1OfContractedItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP203_HArray1OfContractedItem self) -> NCollection_Array1_StepAP203_ContractedItem

        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfContractedItem

        """
        return _StepAP203.StepAP203_HArray1OfContractedItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP203.StepAP203_HArray1OfContractedItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP203.StepAP203_HArray1OfContractedItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.StepAP203_HArray1OfContractedItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP203.delete_StepAP203_HArray1OfContractedItem
StepAP203_HArray1OfContractedItem_swigregister = _StepAP203.StepAP203_HArray1OfContractedItem_swigregister
StepAP203_HArray1OfContractedItem_swigregister(StepAP203_HArray1OfContractedItem)

def StepAP203_HArray1OfContractedItem_get_type_name(*args):
    """
    StepAP203_HArray1OfContractedItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP203.StepAP203_HArray1OfContractedItem_get_type_name(*args)

def StepAP203_HArray1OfContractedItem_get_type_descriptor(*args):
    """
    StepAP203_HArray1OfContractedItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP203.StepAP203_HArray1OfContractedItem_get_type_descriptor(*args)

class StepAP203_HArray1OfPersonOrganizationItem(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP203_HArray1OfPersonOrganizationItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP203_HArray1OfPersonOrganizationItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP203_HArray1OfPersonOrganizationItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP203_HArray1OfPersonOrganizationItem
        __init__(StepAP203_HArray1OfPersonOrganizationItem self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP203_PersonOrganizationItem theValue) -> StepAP203_HArray1OfPersonOrganizationItem
        __init__(StepAP203_HArray1OfPersonOrganizationItem self, NCollection_Array1_StepAP203_PersonOrganizationItem theOther) -> StepAP203_HArray1OfPersonOrganizationItem

        :type theOther: OCC.wrapper.StepAP203.StepAP203_Array1OfPersonOrganizationItem

        """
        this = _StepAP203.new_StepAP203_HArray1OfPersonOrganizationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfPersonOrganizationItem

        """
        res = _StepAP203.StepAP203_HArray1OfPersonOrganizationItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP203_HArray1OfPersonOrganizationItem self) -> NCollection_Array1_StepAP203_PersonOrganizationItem

        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfPersonOrganizationItem

        """
        return _StepAP203.StepAP203_HArray1OfPersonOrganizationItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP203.StepAP203_HArray1OfPersonOrganizationItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP203.StepAP203_HArray1OfPersonOrganizationItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.StepAP203_HArray1OfPersonOrganizationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP203.delete_StepAP203_HArray1OfPersonOrganizationItem
StepAP203_HArray1OfPersonOrganizationItem_swigregister = _StepAP203.StepAP203_HArray1OfPersonOrganizationItem_swigregister
StepAP203_HArray1OfPersonOrganizationItem_swigregister(StepAP203_HArray1OfPersonOrganizationItem)

def StepAP203_HArray1OfPersonOrganizationItem_get_type_name(*args):
    """
    StepAP203_HArray1OfPersonOrganizationItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP203.StepAP203_HArray1OfPersonOrganizationItem_get_type_name(*args)

def StepAP203_HArray1OfPersonOrganizationItem_get_type_descriptor(*args):
    """
    StepAP203_HArray1OfPersonOrganizationItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP203.StepAP203_HArray1OfPersonOrganizationItem_get_type_descriptor(*args)

class StepAP203_DateTimeItem(StepData.StepData_SelectType):
    """Representation of STEP SELECT type DateTimeItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP203_DateTimeItem self) -> StepAP203_DateTimeItem

        Empty constructor


        """
        this = _StepAP203.new_StepAP203_DateTimeItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP203_DateTimeItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a kind of DateTimeItem select type
        1 -> ProductDefinition from StepBasic
        2 -> ChangeRequest from StepAP203
        3 -> StartRequest from StepAP203
        4 -> Change from StepAP203
        5 -> StartWork from StepAP203
        6 -> ApprovalPersonOrganization from StepBasic
        7 -> Contract from StepBasic
        8 -> SecurityClassification from StepBasic
        9 -> Certification from StepBasic
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.StepAP203_DateTimeItem_CaseNum(self, *args)


    def ProductDefinition(self, *args):
        """
        ProductDefinition(StepAP203_DateTimeItem self) -> Handle_StepBasic_ProductDefinition

        Returns Value as ProductDefinition (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepAP203.StepAP203_DateTimeItem_ProductDefinition(self, *args)


    def ChangeRequest(self, *args):
        """
        ChangeRequest(StepAP203_DateTimeItem self) -> Handle_StepAP203_ChangeRequest

        Returns Value as ChangeRequest (or Null if another type)

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_ChangeRequest

        """
        return _StepAP203.StepAP203_DateTimeItem_ChangeRequest(self, *args)


    def StartRequest(self, *args):
        """
        StartRequest(StepAP203_DateTimeItem self) -> Handle_StepAP203_StartRequest

        Returns Value as StartRequest (or Null if another type)

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_StartRequest

        """
        return _StepAP203.StepAP203_DateTimeItem_StartRequest(self, *args)


    def Change(self, *args):
        """
        Change(StepAP203_DateTimeItem self) -> Handle_StepAP203_Change

        Returns Value as Change (or Null if another type)

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_Change

        """
        return _StepAP203.StepAP203_DateTimeItem_Change(self, *args)


    def StartWork(self, *args):
        """
        StartWork(StepAP203_DateTimeItem self) -> Handle_StepAP203_StartWork

        Returns Value as StartWork (or Null if another type)

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_StartWork

        """
        return _StepAP203.StepAP203_DateTimeItem_StartWork(self, *args)


    def ApprovalPersonOrganization(self, *args):
        """
        ApprovalPersonOrganization(StepAP203_DateTimeItem self) -> Handle_StepBasic_ApprovalPersonOrganization

        Returns Value as ApprovalPersonOrganization (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ApprovalPersonOrganization

        """
        return _StepAP203.StepAP203_DateTimeItem_ApprovalPersonOrganization(self, *args)


    def Contract(self, *args):
        """
        Contract(StepAP203_DateTimeItem self) -> Handle_StepBasic_Contract

        Returns Value as Contract (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Contract

        """
        return _StepAP203.StepAP203_DateTimeItem_Contract(self, *args)


    def SecurityClassification(self, *args):
        """
        SecurityClassification(StepAP203_DateTimeItem self) -> Handle_StepBasic_SecurityClassification

        Returns Value as SecurityClassification (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_SecurityClassification

        """
        return _StepAP203.StepAP203_DateTimeItem_SecurityClassification(self, *args)


    def Certification(self, *args):
        """
        Certification(StepAP203_DateTimeItem self) -> Handle_StepBasic_Certification

        Returns Value as Certification (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Certification

        """
        return _StepAP203.StepAP203_DateTimeItem_Certification(self, *args)

    __swig_destroy__ = _StepAP203.delete_StepAP203_DateTimeItem
StepAP203_DateTimeItem_swigregister = _StepAP203.StepAP203_DateTimeItem_swigregister
StepAP203_DateTimeItem_swigregister(StepAP203_DateTimeItem)

class StepAP203_CcDesignSecurityClassification(StepBasic.StepBasic_SecurityClassificationAssignment):
    """Representation of STEP entity CcDesignSecurityClassification"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP203_CcDesignSecurityClassification
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP203_CcDesignSecurityClassification(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP203_CcDesignSecurityClassification self) -> StepAP203_CcDesignSecurityClassification

        Empty constructor


        """
        this = _StepAP203.new_StepAP203_CcDesignSecurityClassification(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP203_CcDesignSecurityClassification self, Handle_StepBasic_SecurityClassification aSecurityClassificationAssignment_AssignedSecurityClassification, Handle_StepAP203_HArray1OfClassifiedItem aItems)

        Initialize all fields (own and inherited)

        :type aSecurityClassificationAssignment_AssignedSecurityClassification: OCC.wrapper.StepBasic.Handle_StepBasic_SecurityClassification
        :type aItems: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfClassifiedItem

        """
        return _StepAP203.StepAP203_CcDesignSecurityClassification_Init(self, *args)


    def Items(self, *args):
        """
        Items(StepAP203_CcDesignSecurityClassification self) -> Handle_StepAP203_HArray1OfClassifiedItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfClassifiedItem

        """
        return _StepAP203.StepAP203_CcDesignSecurityClassification_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP203_CcDesignSecurityClassification self, Handle_StepAP203_HArray1OfClassifiedItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfClassifiedItem

        """
        return _StepAP203.StepAP203_CcDesignSecurityClassification_SetItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP203.StepAP203_CcDesignSecurityClassification_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP203.StepAP203_CcDesignSecurityClassification_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.StepAP203_CcDesignSecurityClassification_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP203.delete_StepAP203_CcDesignSecurityClassification
StepAP203_CcDesignSecurityClassification_swigregister = _StepAP203.StepAP203_CcDesignSecurityClassification_swigregister
StepAP203_CcDesignSecurityClassification_swigregister(StepAP203_CcDesignSecurityClassification)

def StepAP203_CcDesignSecurityClassification_get_type_name(*args):
    """
    StepAP203_CcDesignSecurityClassification_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP203.StepAP203_CcDesignSecurityClassification_get_type_name(*args)

def StepAP203_CcDesignSecurityClassification_get_type_descriptor(*args):
    """
    StepAP203_CcDesignSecurityClassification_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP203.StepAP203_CcDesignSecurityClassification_get_type_descriptor(*args)

class StepAP203_StartRequestItem(StepData.StepData_SelectType):
    """Representation of STEP SELECT type StartRequestItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP203_StartRequestItem self) -> StepAP203_StartRequestItem

        Empty constructor


        """
        this = _StepAP203.new_StepAP203_StartRequestItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP203_StartRequestItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a kind of StartRequestItem select type
        1 -> ProductDefinitionFormation from StepBasic
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.StepAP203_StartRequestItem_CaseNum(self, *args)


    def ProductDefinitionFormation(self, *args):
        """
        ProductDefinitionFormation(StepAP203_StartRequestItem self) -> Handle_StepBasic_ProductDefinitionFormation

        Returns Value as ProductDefinitionFormation (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionFormation

        """
        return _StepAP203.StepAP203_StartRequestItem_ProductDefinitionFormation(self, *args)

    __swig_destroy__ = _StepAP203.delete_StepAP203_StartRequestItem
StepAP203_StartRequestItem_swigregister = _StepAP203.StepAP203_StartRequestItem_swigregister
StepAP203_StartRequestItem_swigregister(StepAP203_StartRequestItem)

class StepAP203_ClassifiedItem(StepData.StepData_SelectType):
    """Representation of STEP SELECT type ClassifiedItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP203_ClassifiedItem self) -> StepAP203_ClassifiedItem

        Empty constructor


        """
        this = _StepAP203.new_StepAP203_ClassifiedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP203_ClassifiedItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a kind of ClassifiedItem select type
        1 -> ProductDefinitionFormation from StepBasic
        2 -> AssemblyComponentUsage from StepRepr
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.StepAP203_ClassifiedItem_CaseNum(self, *args)


    def ProductDefinitionFormation(self, *args):
        """
        ProductDefinitionFormation(StepAP203_ClassifiedItem self) -> Handle_StepBasic_ProductDefinitionFormation

        Returns Value as ProductDefinitionFormation (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionFormation

        """
        return _StepAP203.StepAP203_ClassifiedItem_ProductDefinitionFormation(self, *args)


    def AssemblyComponentUsage(self, *args):
        """
        AssemblyComponentUsage(StepAP203_ClassifiedItem self) -> Handle_StepRepr_AssemblyComponentUsage

        Returns Value as AssemblyComponentUsage (or Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsage

        """
        return _StepAP203.StepAP203_ClassifiedItem_AssemblyComponentUsage(self, *args)

    __swig_destroy__ = _StepAP203.delete_StepAP203_ClassifiedItem
StepAP203_ClassifiedItem_swigregister = _StepAP203.StepAP203_ClassifiedItem_swigregister
StepAP203_ClassifiedItem_swigregister(StepAP203_ClassifiedItem)

class StepAP203_HArray1OfSpecifiedItem(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP203_HArray1OfSpecifiedItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP203_HArray1OfSpecifiedItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP203_HArray1OfSpecifiedItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP203_HArray1OfSpecifiedItem
        __init__(StepAP203_HArray1OfSpecifiedItem self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP203_SpecifiedItem theValue) -> StepAP203_HArray1OfSpecifiedItem
        __init__(StepAP203_HArray1OfSpecifiedItem self, NCollection_Array1_StepAP203_SpecifiedItem theOther) -> StepAP203_HArray1OfSpecifiedItem

        :type theOther: OCC.wrapper.StepAP203.StepAP203_Array1OfSpecifiedItem

        """
        this = _StepAP203.new_StepAP203_HArray1OfSpecifiedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfSpecifiedItem

        """
        res = _StepAP203.StepAP203_HArray1OfSpecifiedItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP203_HArray1OfSpecifiedItem self) -> NCollection_Array1_StepAP203_SpecifiedItem

        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfSpecifiedItem

        """
        return _StepAP203.StepAP203_HArray1OfSpecifiedItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP203.StepAP203_HArray1OfSpecifiedItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP203.StepAP203_HArray1OfSpecifiedItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.StepAP203_HArray1OfSpecifiedItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP203.delete_StepAP203_HArray1OfSpecifiedItem
StepAP203_HArray1OfSpecifiedItem_swigregister = _StepAP203.StepAP203_HArray1OfSpecifiedItem_swigregister
StepAP203_HArray1OfSpecifiedItem_swigregister(StepAP203_HArray1OfSpecifiedItem)

def StepAP203_HArray1OfSpecifiedItem_get_type_name(*args):
    """
    StepAP203_HArray1OfSpecifiedItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP203.StepAP203_HArray1OfSpecifiedItem_get_type_name(*args)

def StepAP203_HArray1OfSpecifiedItem_get_type_descriptor(*args):
    """
    StepAP203_HArray1OfSpecifiedItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP203.StepAP203_HArray1OfSpecifiedItem_get_type_descriptor(*args)

class StepAP203_HArray1OfClassifiedItem(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP203_HArray1OfClassifiedItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP203_HArray1OfClassifiedItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP203_HArray1OfClassifiedItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP203_HArray1OfClassifiedItem
        __init__(StepAP203_HArray1OfClassifiedItem self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP203_ClassifiedItem theValue) -> StepAP203_HArray1OfClassifiedItem
        __init__(StepAP203_HArray1OfClassifiedItem self, NCollection_Array1_StepAP203_ClassifiedItem theOther) -> StepAP203_HArray1OfClassifiedItem

        :type theOther: OCC.wrapper.StepAP203.StepAP203_Array1OfClassifiedItem

        """
        this = _StepAP203.new_StepAP203_HArray1OfClassifiedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfClassifiedItem

        """
        res = _StepAP203.StepAP203_HArray1OfClassifiedItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP203_HArray1OfClassifiedItem self) -> NCollection_Array1_StepAP203_ClassifiedItem

        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfClassifiedItem

        """
        return _StepAP203.StepAP203_HArray1OfClassifiedItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP203.StepAP203_HArray1OfClassifiedItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP203.StepAP203_HArray1OfClassifiedItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.StepAP203_HArray1OfClassifiedItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP203.delete_StepAP203_HArray1OfClassifiedItem
StepAP203_HArray1OfClassifiedItem_swigregister = _StepAP203.StepAP203_HArray1OfClassifiedItem_swigregister
StepAP203_HArray1OfClassifiedItem_swigregister(StepAP203_HArray1OfClassifiedItem)

def StepAP203_HArray1OfClassifiedItem_get_type_name(*args):
    """
    StepAP203_HArray1OfClassifiedItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP203.StepAP203_HArray1OfClassifiedItem_get_type_name(*args)

def StepAP203_HArray1OfClassifiedItem_get_type_descriptor(*args):
    """
    StepAP203_HArray1OfClassifiedItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP203.StepAP203_HArray1OfClassifiedItem_get_type_descriptor(*args)

class NCollection_Array1_StepAP203_StartRequestItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP203_StartRequestItem self) -> NCollection_Array1< StepAP203_StartRequestItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_StartRequestItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP203_StartRequestItem self) -> NCollection_Array1< StepAP203_StartRequestItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_StartRequestItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP203_StartRequestItem self) -> NCollection_Array1< StepAP203_StartRequestItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_StartRequestItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP203_StartRequestItem self) -> NCollection_Array1< StepAP203_StartRequestItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_StartRequestItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP203.new_NCollection_Array1_StepAP203_StartRequestItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP203_StartRequestItem self, StepAP203_StartRequestItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_StartRequestItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP203_StartRequestItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_StartRequestItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP203_StartRequestItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_StartRequestItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP203_StartRequestItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_StartRequestItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP203_StartRequestItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_StartRequestItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP203_StartRequestItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_StartRequestItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP203_StartRequestItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_StartRequestItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP203_StartRequestItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_StartRequestItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP203_StartRequestItem self, NCollection_Array1_StepAP203_StartRequestItem theOther) -> NCollection_Array1_StepAP203_StartRequestItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_StartRequestItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP203_StartRequestItem self, NCollection_Array1_StepAP203_StartRequestItem theOther) -> NCollection_Array1_StepAP203_StartRequestItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_StartRequestItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP203_StartRequestItem self, NCollection_Array1_StepAP203_StartRequestItem theOther) -> NCollection_Array1_StepAP203_StartRequestItem
        assign(NCollection_Array1_StepAP203_StartRequestItem self, NCollection_Array1_StepAP203_StartRequestItem theOther) -> NCollection_Array1_StepAP203_StartRequestItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_StartRequestItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_StartRequestItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP203_StartRequestItem self) -> StepAP203_StartRequestItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_StartRequestItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_StartRequestItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP203_StartRequestItem self) -> StepAP203_StartRequestItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_StartRequestItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_StartRequestItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP203_StartRequestItem self, Standard_Integer const theIndex) -> StepAP203_StartRequestItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_StartRequestItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_StartRequestItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_StartRequestItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP203_StartRequestItem self, Standard_Integer const theIndex, StepAP203_StartRequestItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_StartRequestItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP203_StartRequestItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP203.NCollection_Array1_StepAP203_StartRequestItem_Resize(self, *args)

    __swig_destroy__ = _StepAP203.delete_NCollection_Array1_StepAP203_StartRequestItem
NCollection_Array1_StepAP203_StartRequestItem_swigregister = _StepAP203.NCollection_Array1_StepAP203_StartRequestItem_swigregister
NCollection_Array1_StepAP203_StartRequestItem_swigregister(NCollection_Array1_StepAP203_StartRequestItem)


try:
	StepAP203_Array1OfStartRequestItem = NCollection_Array1_StepAP203_StartRequestItem
except NameError:
	pass # does not exist, probably ignored

class Handle_StepAP203_CcDesignSecurityClassification(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP203_CcDesignSecurityClassification self)

        Nullify the handle


        """
        return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP203_CcDesignSecurityClassification self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP203_CcDesignSecurityClassification self, StepAP203_CcDesignSecurityClassification thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP203_CcDesignSecurityClassification self, Handle_StepAP203_CcDesignSecurityClassification theHandle) -> Handle_StepAP203_CcDesignSecurityClassification
        assign(Handle_StepAP203_CcDesignSecurityClassification self, StepAP203_CcDesignSecurityClassification thePtr) -> Handle_StepAP203_CcDesignSecurityClassification
        assign(Handle_StepAP203_CcDesignSecurityClassification self, Handle_StepAP203_CcDesignSecurityClassification theHandle) -> Handle_StepAP203_CcDesignSecurityClassification

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP203_CcDesignSecurityClassification self) -> StepAP203_CcDesignSecurityClassification

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP203_CcDesignSecurityClassification self) -> StepAP203_CcDesignSecurityClassification

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP203_CcDesignSecurityClassification self) -> StepAP203_CcDesignSecurityClassification

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification___ref__(self, *args)


    def __hash__(self):
        return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP203.new_Handle_StepAP203_CcDesignSecurityClassification(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP203.Handle_StepAP203_CcDesignSecurityClassification_DownCast)
    __swig_destroy__ = _StepAP203.delete_Handle_StepAP203_CcDesignSecurityClassification

    def Init(self, *args):
        """
        Init(Handle_StepAP203_CcDesignSecurityClassification self, Handle_StepBasic_SecurityClassification aSecurityClassificationAssignment_AssignedSecurityClassification, Handle_StepAP203_HArray1OfClassifiedItem aItems)

        Initialize all fields (own and inherited)

        :type aSecurityClassificationAssignment_AssignedSecurityClassification: OCC.wrapper.StepBasic.Handle_StepBasic_SecurityClassification
        :type aItems: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfClassifiedItem

        """
        return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_Init(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP203_CcDesignSecurityClassification self) -> Handle_StepAP203_HArray1OfClassifiedItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfClassifiedItem

        """
        return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP203_CcDesignSecurityClassification self, Handle_StepAP203_HArray1OfClassifiedItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfClassifiedItem

        """
        return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_SetItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP203_CcDesignSecurityClassification self) -> char const *

        :rtype: const char *

        """
        return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAssignedSecurityClassification(self, *args):
        """
        SetAssignedSecurityClassification(Handle_StepAP203_CcDesignSecurityClassification self, Handle_StepBasic_SecurityClassification aAssignedSecurityClassification)

        :type aAssignedSecurityClassification: OCC.wrapper.StepBasic.Handle_StepBasic_SecurityClassification

        """
        return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_SetAssignedSecurityClassification(self, *args)


    def AssignedSecurityClassification(self, *args):
        """
        AssignedSecurityClassification(Handle_StepAP203_CcDesignSecurityClassification self) -> Handle_StepBasic_SecurityClassification

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_SecurityClassification

        """
        return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_AssignedSecurityClassification(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP203_CcDesignSecurityClassification self)

        Memory deallocator for transient classes


        """
        return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP203_CcDesignSecurityClassification self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP203_CcDesignSecurityClassification self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP203_CcDesignSecurityClassification self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP203_CcDesignSecurityClassification self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP203_CcDesignSecurityClassification self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP203_CcDesignSecurityClassification self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP203_CcDesignSecurityClassification self)

        Increments the reference counter of this object


        """
        return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP203_CcDesignSecurityClassification self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_DecrementRefCounter(self, *args)

Handle_StepAP203_CcDesignSecurityClassification_swigregister = _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_swigregister
Handle_StepAP203_CcDesignSecurityClassification_swigregister(Handle_StepAP203_CcDesignSecurityClassification)

def Handle_StepAP203_CcDesignSecurityClassification_DownCast(thing):
    return _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_DownCast(thing)
Handle_StepAP203_CcDesignSecurityClassification_DownCast = _StepAP203.Handle_StepAP203_CcDesignSecurityClassification_DownCast

class StepAP203_HArray1OfCertifiedItem(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP203_HArray1OfCertifiedItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP203_HArray1OfCertifiedItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP203_HArray1OfCertifiedItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP203_HArray1OfCertifiedItem
        __init__(StepAP203_HArray1OfCertifiedItem self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP203_CertifiedItem theValue) -> StepAP203_HArray1OfCertifiedItem
        __init__(StepAP203_HArray1OfCertifiedItem self, NCollection_Array1_StepAP203_CertifiedItem theOther) -> StepAP203_HArray1OfCertifiedItem

        :type theOther: OCC.wrapper.StepAP203.StepAP203_Array1OfCertifiedItem

        """
        this = _StepAP203.new_StepAP203_HArray1OfCertifiedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfCertifiedItem

        """
        res = _StepAP203.StepAP203_HArray1OfCertifiedItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP203_HArray1OfCertifiedItem self) -> NCollection_Array1_StepAP203_CertifiedItem

        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfCertifiedItem

        """
        return _StepAP203.StepAP203_HArray1OfCertifiedItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP203.StepAP203_HArray1OfCertifiedItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP203.StepAP203_HArray1OfCertifiedItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.StepAP203_HArray1OfCertifiedItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP203.delete_StepAP203_HArray1OfCertifiedItem
StepAP203_HArray1OfCertifiedItem_swigregister = _StepAP203.StepAP203_HArray1OfCertifiedItem_swigregister
StepAP203_HArray1OfCertifiedItem_swigregister(StepAP203_HArray1OfCertifiedItem)

def StepAP203_HArray1OfCertifiedItem_get_type_name(*args):
    """
    StepAP203_HArray1OfCertifiedItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP203.StepAP203_HArray1OfCertifiedItem_get_type_name(*args)

def StepAP203_HArray1OfCertifiedItem_get_type_descriptor(*args):
    """
    StepAP203_HArray1OfCertifiedItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP203.StepAP203_HArray1OfCertifiedItem_get_type_descriptor(*args)

class Handle_StepAP203_HArray1OfCertifiedItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP203_HArray1OfCertifiedItem self)

        Nullify the handle


        """
        return _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP203_HArray1OfCertifiedItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP203_HArray1OfCertifiedItem self, StepAP203_HArray1OfCertifiedItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP203_HArray1OfCertifiedItem self, Handle_StepAP203_HArray1OfCertifiedItem theHandle) -> Handle_StepAP203_HArray1OfCertifiedItem
        assign(Handle_StepAP203_HArray1OfCertifiedItem self, StepAP203_HArray1OfCertifiedItem thePtr) -> Handle_StepAP203_HArray1OfCertifiedItem
        assign(Handle_StepAP203_HArray1OfCertifiedItem self, Handle_StepAP203_HArray1OfCertifiedItem theHandle) -> Handle_StepAP203_HArray1OfCertifiedItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP203_HArray1OfCertifiedItem self) -> StepAP203_HArray1OfCertifiedItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP203_HArray1OfCertifiedItem self) -> StepAP203_HArray1OfCertifiedItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP203_HArray1OfCertifiedItem self) -> StepAP203_HArray1OfCertifiedItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP203.new_Handle_StepAP203_HArray1OfCertifiedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_DownCast)
    __swig_destroy__ = _StepAP203.delete_Handle_StepAP203_HArray1OfCertifiedItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfCertifiedItem

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP203_HArray1OfCertifiedItem self) -> NCollection_Array1_StepAP203_CertifiedItem

        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfCertifiedItem

        """
        return _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP203_HArray1OfCertifiedItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepAP203_HArray1OfCertifiedItem self)

        Memory deallocator for transient classes


        """
        return _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP203_HArray1OfCertifiedItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP203_HArray1OfCertifiedItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP203_HArray1OfCertifiedItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP203_HArray1OfCertifiedItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP203_HArray1OfCertifiedItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP203_HArray1OfCertifiedItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP203_HArray1OfCertifiedItem self)

        Increments the reference counter of this object


        """
        return _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP203_HArray1OfCertifiedItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_DecrementRefCounter(self, *args)

Handle_StepAP203_HArray1OfCertifiedItem_swigregister = _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_swigregister
Handle_StepAP203_HArray1OfCertifiedItem_swigregister(Handle_StepAP203_HArray1OfCertifiedItem)

def Handle_StepAP203_HArray1OfCertifiedItem_DownCast(thing):
    return _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_DownCast(thing)
Handle_StepAP203_HArray1OfCertifiedItem_DownCast = _StepAP203.Handle_StepAP203_HArray1OfCertifiedItem_DownCast

class StepAP203_Change(StepBasic.StepBasic_ActionAssignment):
    """Representation of STEP entity Change"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP203_Change
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP203_Change(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP203_Change self) -> StepAP203_Change

        Empty constructor


        """
        this = _StepAP203.new_StepAP203_Change(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP203_Change self, Handle_StepBasic_Action aActionAssignment_AssignedAction, Handle_StepAP203_HArray1OfWorkItem aItems)

        Initialize all fields (own and inherited)

        :type aActionAssignment_AssignedAction: OCC.wrapper.StepBasic.Handle_StepBasic_Action
        :type aItems: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfWorkItem

        """
        return _StepAP203.StepAP203_Change_Init(self, *args)


    def Items(self, *args):
        """
        Items(StepAP203_Change self) -> Handle_StepAP203_HArray1OfWorkItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfWorkItem

        """
        return _StepAP203.StepAP203_Change_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP203_Change self, Handle_StepAP203_HArray1OfWorkItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfWorkItem

        """
        return _StepAP203.StepAP203_Change_SetItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP203.StepAP203_Change_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP203.StepAP203_Change_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.StepAP203_Change_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP203.delete_StepAP203_Change
StepAP203_Change_swigregister = _StepAP203.StepAP203_Change_swigregister
StepAP203_Change_swigregister(StepAP203_Change)

def StepAP203_Change_get_type_name(*args):
    """
    StepAP203_Change_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP203.StepAP203_Change_get_type_name(*args)

def StepAP203_Change_get_type_descriptor(*args):
    """
    StepAP203_Change_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP203.StepAP203_Change_get_type_descriptor(*args)

class Handle_StepAP203_StartWork(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP203_StartWork self)

        Nullify the handle


        """
        return _StepAP203.Handle_StepAP203_StartWork_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP203_StartWork self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP203.Handle_StepAP203_StartWork_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP203_StartWork self, StepAP203_StartWork thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP203.Handle_StepAP203_StartWork_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP203_StartWork self, Handle_StepAP203_StartWork theHandle) -> Handle_StepAP203_StartWork
        assign(Handle_StepAP203_StartWork self, StepAP203_StartWork thePtr) -> Handle_StepAP203_StartWork
        assign(Handle_StepAP203_StartWork self, Handle_StepAP203_StartWork theHandle) -> Handle_StepAP203_StartWork

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP203.Handle_StepAP203_StartWork_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP203_StartWork self) -> StepAP203_StartWork

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_StartWork_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP203_StartWork self) -> StepAP203_StartWork

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_StartWork___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP203_StartWork self) -> StepAP203_StartWork

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP203.Handle_StepAP203_StartWork___ref__(self, *args)


    def __hash__(self):
        return _StepAP203.Handle_StepAP203_StartWork___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP203.Handle_StepAP203_StartWork___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP203.new_Handle_StepAP203_StartWork(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP203.Handle_StepAP203_StartWork_DownCast)
    __swig_destroy__ = _StepAP203.delete_Handle_StepAP203_StartWork

    def Init(self, *args):
        """
        Init(Handle_StepAP203_StartWork self, Handle_StepBasic_Action aActionAssignment_AssignedAction, Handle_StepAP203_HArray1OfWorkItem aItems)

        Initialize all fields (own and inherited)

        :type aActionAssignment_AssignedAction: OCC.wrapper.StepBasic.Handle_StepBasic_Action
        :type aItems: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfWorkItem

        """
        return _StepAP203.Handle_StepAP203_StartWork_Init(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP203_StartWork self) -> Handle_StepAP203_HArray1OfWorkItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfWorkItem

        """
        return _StepAP203.Handle_StepAP203_StartWork_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP203_StartWork self, Handle_StepAP203_HArray1OfWorkItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfWorkItem

        """
        return _StepAP203.Handle_StepAP203_StartWork_SetItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP203_StartWork self) -> char const *

        :rtype: const char *

        """
        return _StepAP203.Handle_StepAP203_StartWork_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_StartWork_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_StartWork_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def AssignedAction(self, *args):
        """
        AssignedAction(Handle_StepAP203_StartWork self) -> Handle_StepBasic_Action

        Returns field AssignedAction

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Action

        """
        return _StepAP203.Handle_StepAP203_StartWork_AssignedAction(self, *args)


    def SetAssignedAction(self, *args):
        """
        SetAssignedAction(Handle_StepAP203_StartWork self, Handle_StepBasic_Action AssignedAction)

        Set field AssignedAction

        :type AssignedAction: OCC.wrapper.StepBasic.Handle_StepBasic_Action

        """
        return _StepAP203.Handle_StepAP203_StartWork_SetAssignedAction(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP203_StartWork self)

        Memory deallocator for transient classes


        """
        return _StepAP203.Handle_StepAP203_StartWork_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP203_StartWork self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP203_StartWork self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_StartWork_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP203_StartWork self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP203_StartWork self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_StartWork_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP203_StartWork self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP203.Handle_StepAP203_StartWork_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP203_StartWork self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_StartWork_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP203_StartWork self)

        Increments the reference counter of this object


        """
        return _StepAP203.Handle_StepAP203_StartWork_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP203_StartWork self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_StartWork_DecrementRefCounter(self, *args)

Handle_StepAP203_StartWork_swigregister = _StepAP203.Handle_StepAP203_StartWork_swigregister
Handle_StepAP203_StartWork_swigregister(Handle_StepAP203_StartWork)

def Handle_StepAP203_StartWork_DownCast(thing):
    return _StepAP203.Handle_StepAP203_StartWork_DownCast(thing)
Handle_StepAP203_StartWork_DownCast = _StepAP203.Handle_StepAP203_StartWork_DownCast

class Handle_StepAP203_CcDesignCertification(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP203_CcDesignCertification self)

        Nullify the handle


        """
        return _StepAP203.Handle_StepAP203_CcDesignCertification_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP203_CcDesignCertification self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP203.Handle_StepAP203_CcDesignCertification_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP203_CcDesignCertification self, StepAP203_CcDesignCertification thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP203.Handle_StepAP203_CcDesignCertification_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP203_CcDesignCertification self, Handle_StepAP203_CcDesignCertification theHandle) -> Handle_StepAP203_CcDesignCertification
        assign(Handle_StepAP203_CcDesignCertification self, StepAP203_CcDesignCertification thePtr) -> Handle_StepAP203_CcDesignCertification
        assign(Handle_StepAP203_CcDesignCertification self, Handle_StepAP203_CcDesignCertification theHandle) -> Handle_StepAP203_CcDesignCertification

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP203.Handle_StepAP203_CcDesignCertification_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP203_CcDesignCertification self) -> StepAP203_CcDesignCertification

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_CcDesignCertification_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP203_CcDesignCertification self) -> StepAP203_CcDesignCertification

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_CcDesignCertification___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP203_CcDesignCertification self) -> StepAP203_CcDesignCertification

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP203.Handle_StepAP203_CcDesignCertification___ref__(self, *args)


    def __hash__(self):
        return _StepAP203.Handle_StepAP203_CcDesignCertification___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP203.Handle_StepAP203_CcDesignCertification___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP203.new_Handle_StepAP203_CcDesignCertification(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP203.Handle_StepAP203_CcDesignCertification_DownCast)
    __swig_destroy__ = _StepAP203.delete_Handle_StepAP203_CcDesignCertification

    def Init(self, *args):
        """
        Init(Handle_StepAP203_CcDesignCertification self, Handle_StepBasic_Certification aCertificationAssignment_AssignedCertification, Handle_StepAP203_HArray1OfCertifiedItem aItems)

        Initialize all fields (own and inherited)

        :type aCertificationAssignment_AssignedCertification: OCC.wrapper.StepBasic.Handle_StepBasic_Certification
        :type aItems: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfCertifiedItem

        """
        return _StepAP203.Handle_StepAP203_CcDesignCertification_Init(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP203_CcDesignCertification self) -> Handle_StepAP203_HArray1OfCertifiedItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfCertifiedItem

        """
        return _StepAP203.Handle_StepAP203_CcDesignCertification_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP203_CcDesignCertification self, Handle_StepAP203_HArray1OfCertifiedItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfCertifiedItem

        """
        return _StepAP203.Handle_StepAP203_CcDesignCertification_SetItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP203_CcDesignCertification self) -> char const *

        :rtype: const char *

        """
        return _StepAP203.Handle_StepAP203_CcDesignCertification_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_CcDesignCertification_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_CcDesignCertification_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def AssignedCertification(self, *args):
        """
        AssignedCertification(Handle_StepAP203_CcDesignCertification self) -> Handle_StepBasic_Certification

        Returns field AssignedCertification

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Certification

        """
        return _StepAP203.Handle_StepAP203_CcDesignCertification_AssignedCertification(self, *args)


    def SetAssignedCertification(self, *args):
        """
        SetAssignedCertification(Handle_StepAP203_CcDesignCertification self, Handle_StepBasic_Certification AssignedCertification)

        Set field AssignedCertification

        :type AssignedCertification: OCC.wrapper.StepBasic.Handle_StepBasic_Certification

        """
        return _StepAP203.Handle_StepAP203_CcDesignCertification_SetAssignedCertification(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP203_CcDesignCertification self)

        Memory deallocator for transient classes


        """
        return _StepAP203.Handle_StepAP203_CcDesignCertification_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP203_CcDesignCertification self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP203_CcDesignCertification self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_CcDesignCertification_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP203_CcDesignCertification self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP203_CcDesignCertification self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_CcDesignCertification_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP203_CcDesignCertification self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP203.Handle_StepAP203_CcDesignCertification_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP203_CcDesignCertification self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_CcDesignCertification_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP203_CcDesignCertification self)

        Increments the reference counter of this object


        """
        return _StepAP203.Handle_StepAP203_CcDesignCertification_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP203_CcDesignCertification self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_CcDesignCertification_DecrementRefCounter(self, *args)

Handle_StepAP203_CcDesignCertification_swigregister = _StepAP203.Handle_StepAP203_CcDesignCertification_swigregister
Handle_StepAP203_CcDesignCertification_swigregister(Handle_StepAP203_CcDesignCertification)

def Handle_StepAP203_CcDesignCertification_DownCast(thing):
    return _StepAP203.Handle_StepAP203_CcDesignCertification_DownCast(thing)
Handle_StepAP203_CcDesignCertification_DownCast = _StepAP203.Handle_StepAP203_CcDesignCertification_DownCast

class StepAP203_HArray1OfApprovedItem(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP203_HArray1OfApprovedItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP203_HArray1OfApprovedItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP203_HArray1OfApprovedItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP203_HArray1OfApprovedItem
        __init__(StepAP203_HArray1OfApprovedItem self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP203_ApprovedItem theValue) -> StepAP203_HArray1OfApprovedItem
        __init__(StepAP203_HArray1OfApprovedItem self, NCollection_Array1_StepAP203_ApprovedItem theOther) -> StepAP203_HArray1OfApprovedItem

        :type theOther: OCC.wrapper.StepAP203.StepAP203_Array1OfApprovedItem

        """
        this = _StepAP203.new_StepAP203_HArray1OfApprovedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfApprovedItem

        """
        res = _StepAP203.StepAP203_HArray1OfApprovedItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP203_HArray1OfApprovedItem self) -> NCollection_Array1_StepAP203_ApprovedItem

        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfApprovedItem

        """
        return _StepAP203.StepAP203_HArray1OfApprovedItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP203.StepAP203_HArray1OfApprovedItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP203.StepAP203_HArray1OfApprovedItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.StepAP203_HArray1OfApprovedItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP203.delete_StepAP203_HArray1OfApprovedItem
StepAP203_HArray1OfApprovedItem_swigregister = _StepAP203.StepAP203_HArray1OfApprovedItem_swigregister
StepAP203_HArray1OfApprovedItem_swigregister(StepAP203_HArray1OfApprovedItem)

def StepAP203_HArray1OfApprovedItem_get_type_name(*args):
    """
    StepAP203_HArray1OfApprovedItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP203.StepAP203_HArray1OfApprovedItem_get_type_name(*args)

def StepAP203_HArray1OfApprovedItem_get_type_descriptor(*args):
    """
    StepAP203_HArray1OfApprovedItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP203.StepAP203_HArray1OfApprovedItem_get_type_descriptor(*args)

class StepAP203_ContractedItem(StepData.StepData_SelectType):
    """Representation of STEP SELECT type ContractedItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP203_ContractedItem self) -> StepAP203_ContractedItem

        Empty constructor


        """
        this = _StepAP203.new_StepAP203_ContractedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP203_ContractedItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a kind of ContractedItem select type
        1 -> ProductDefinitionFormation from StepBasic
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.StepAP203_ContractedItem_CaseNum(self, *args)


    def ProductDefinitionFormation(self, *args):
        """
        ProductDefinitionFormation(StepAP203_ContractedItem self) -> Handle_StepBasic_ProductDefinitionFormation

        Returns Value as ProductDefinitionFormation (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionFormation

        """
        return _StepAP203.StepAP203_ContractedItem_ProductDefinitionFormation(self, *args)

    __swig_destroy__ = _StepAP203.delete_StepAP203_ContractedItem
StepAP203_ContractedItem_swigregister = _StepAP203.StepAP203_ContractedItem_swigregister
StepAP203_ContractedItem_swigregister(StepAP203_ContractedItem)

class Handle_StepAP203_CcDesignPersonAndOrganizationAssignment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self)

        Nullify the handle


        """
        return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self, StepAP203_CcDesignPersonAndOrganizationAssignment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self, Handle_StepAP203_CcDesignPersonAndOrganizationAssignment theHandle) -> Handle_StepAP203_CcDesignPersonAndOrganizationAssignment
        assign(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self, StepAP203_CcDesignPersonAndOrganizationAssignment thePtr) -> Handle_StepAP203_CcDesignPersonAndOrganizationAssignment
        assign(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self, Handle_StepAP203_CcDesignPersonAndOrganizationAssignment theHandle) -> Handle_StepAP203_CcDesignPersonAndOrganizationAssignment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self) -> StepAP203_CcDesignPersonAndOrganizationAssignment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self) -> StepAP203_CcDesignPersonAndOrganizationAssignment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self) -> StepAP203_CcDesignPersonAndOrganizationAssignment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment___ref__(self, *args)


    def __hash__(self):
        return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP203.new_Handle_StepAP203_CcDesignPersonAndOrganizationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_DownCast)
    __swig_destroy__ = _StepAP203.delete_Handle_StepAP203_CcDesignPersonAndOrganizationAssignment

    def Init(self, *args):
        """
        Init(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self, Handle_StepBasic_PersonAndOrganization aPersonAndOrganizationAssignment_AssignedPersonAndOrganization, Handle_StepBasic_PersonAndOrganizationRole aPersonAndOrganizationAssignment_Role, Handle_StepAP203_HArray1OfPersonOrganizationItem aItems)

        Initialize all fields (own and inherited)

        :type aPersonAndOrganizationAssignment_AssignedPersonAndOrganization: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganization
        :type aPersonAndOrganizationAssignment_Role: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganizationRole
        :type aItems: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem

        """
        return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_Init(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self) -> Handle_StepAP203_HArray1OfPersonOrganizationItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem

        """
        return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self, Handle_StepAP203_HArray1OfPersonOrganizationItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem

        """
        return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_SetItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self) -> char const *

        :rtype: const char *

        """
        return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAssignedPersonAndOrganization(self, *args):
        """
        SetAssignedPersonAndOrganization(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self, Handle_StepBasic_PersonAndOrganization aAssignedPersonAndOrganization)

        :type aAssignedPersonAndOrganization: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganization

        """
        return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_SetAssignedPersonAndOrganization(self, *args)


    def AssignedPersonAndOrganization(self, *args):
        """
        AssignedPersonAndOrganization(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self) -> Handle_StepBasic_PersonAndOrganization

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganization

        """
        return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_AssignedPersonAndOrganization(self, *args)


    def SetRole(self, *args):
        """
        SetRole(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self, Handle_StepBasic_PersonAndOrganizationRole aRole)

        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganizationRole

        """
        return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_SetRole(self, *args)


    def Role(self, *args):
        """
        Role(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self) -> Handle_StepBasic_PersonAndOrganizationRole

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganizationRole

        """
        return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_Role(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self)

        Memory deallocator for transient classes


        """
        return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self)

        Increments the reference counter of this object


        """
        return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_DecrementRefCounter(self, *args)

Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_swigregister = _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_swigregister
Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_swigregister(Handle_StepAP203_CcDesignPersonAndOrganizationAssignment)

def Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_DownCast(thing):
    return _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_DownCast(thing)
Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_DownCast = _StepAP203.Handle_StepAP203_CcDesignPersonAndOrganizationAssignment_DownCast

class Handle_StepAP203_HArray1OfContractedItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP203_HArray1OfContractedItem self)

        Nullify the handle


        """
        return _StepAP203.Handle_StepAP203_HArray1OfContractedItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP203_HArray1OfContractedItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP203.Handle_StepAP203_HArray1OfContractedItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP203_HArray1OfContractedItem self, StepAP203_HArray1OfContractedItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfContractedItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP203_HArray1OfContractedItem self, Handle_StepAP203_HArray1OfContractedItem theHandle) -> Handle_StepAP203_HArray1OfContractedItem
        assign(Handle_StepAP203_HArray1OfContractedItem self, StepAP203_HArray1OfContractedItem thePtr) -> Handle_StepAP203_HArray1OfContractedItem
        assign(Handle_StepAP203_HArray1OfContractedItem self, Handle_StepAP203_HArray1OfContractedItem theHandle) -> Handle_StepAP203_HArray1OfContractedItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP203.Handle_StepAP203_HArray1OfContractedItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP203_HArray1OfContractedItem self) -> StepAP203_HArray1OfContractedItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfContractedItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP203_HArray1OfContractedItem self) -> StepAP203_HArray1OfContractedItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfContractedItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP203_HArray1OfContractedItem self) -> StepAP203_HArray1OfContractedItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP203.Handle_StepAP203_HArray1OfContractedItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP203.Handle_StepAP203_HArray1OfContractedItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP203.Handle_StepAP203_HArray1OfContractedItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP203.new_Handle_StepAP203_HArray1OfContractedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP203.Handle_StepAP203_HArray1OfContractedItem_DownCast)
    __swig_destroy__ = _StepAP203.delete_Handle_StepAP203_HArray1OfContractedItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfContractedItem

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfContractedItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP203_HArray1OfContractedItem self) -> NCollection_Array1_StepAP203_ContractedItem

        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfContractedItem

        """
        return _StepAP203.Handle_StepAP203_HArray1OfContractedItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP203_HArray1OfContractedItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfContractedItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfContractedItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfContractedItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepAP203_HArray1OfContractedItem self)

        Memory deallocator for transient classes


        """
        return _StepAP203.Handle_StepAP203_HArray1OfContractedItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP203_HArray1OfContractedItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP203_HArray1OfContractedItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfContractedItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP203_HArray1OfContractedItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP203_HArray1OfContractedItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfContractedItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP203_HArray1OfContractedItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP203.Handle_StepAP203_HArray1OfContractedItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP203_HArray1OfContractedItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfContractedItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP203_HArray1OfContractedItem self)

        Increments the reference counter of this object


        """
        return _StepAP203.Handle_StepAP203_HArray1OfContractedItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP203_HArray1OfContractedItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfContractedItem_DecrementRefCounter(self, *args)

Handle_StepAP203_HArray1OfContractedItem_swigregister = _StepAP203.Handle_StepAP203_HArray1OfContractedItem_swigregister
Handle_StepAP203_HArray1OfContractedItem_swigregister(Handle_StepAP203_HArray1OfContractedItem)

def Handle_StepAP203_HArray1OfContractedItem_DownCast(thing):
    return _StepAP203.Handle_StepAP203_HArray1OfContractedItem_DownCast(thing)
Handle_StepAP203_HArray1OfContractedItem_DownCast = _StepAP203.Handle_StepAP203_HArray1OfContractedItem_DownCast

class StepAP203_CertifiedItem(StepData.StepData_SelectType):
    """Representation of STEP SELECT type CertifiedItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP203_CertifiedItem self) -> StepAP203_CertifiedItem

        Empty constructor


        """
        this = _StepAP203.new_StepAP203_CertifiedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP203_CertifiedItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a kind of CertifiedItem select type
        1 -> SuppliedPartRelationship from StepRepr
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.StepAP203_CertifiedItem_CaseNum(self, *args)


    def SuppliedPartRelationship(self, *args):
        """
        SuppliedPartRelationship(StepAP203_CertifiedItem self) -> Handle_StepRepr_SuppliedPartRelationship

        Returns Value as SuppliedPartRelationship (or Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_SuppliedPartRelationship

        """
        return _StepAP203.StepAP203_CertifiedItem_SuppliedPartRelationship(self, *args)

    __swig_destroy__ = _StepAP203.delete_StepAP203_CertifiedItem
StepAP203_CertifiedItem_swigregister = _StepAP203.StepAP203_CertifiedItem_swigregister
StepAP203_CertifiedItem_swigregister(StepAP203_CertifiedItem)

class StepAP203_PersonOrganizationItem(StepData.StepData_SelectType):
    """Representation of STEP SELECT type PersonOrganizationItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP203_PersonOrganizationItem self) -> StepAP203_PersonOrganizationItem

        Empty constructor


        """
        this = _StepAP203.new_StepAP203_PersonOrganizationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP203_PersonOrganizationItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a kind of PersonOrganizationItem select type
        1 -> Change from StepAP203
        2 -> StartWork from StepAP203
        3 -> ChangeRequest from StepAP203
        4 -> StartRequest from StepAP203
        5 -> ConfigurationItem from StepRepr
        6 -> Product from StepBasic
        7 -> ProductDefinitionFormation from StepBasic
        8 -> ProductDefinition from StepBasic
        9 -> Contract from StepBasic
        10 -> SecurityClassification from StepBasic
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.StepAP203_PersonOrganizationItem_CaseNum(self, *args)


    def Change(self, *args):
        """
        Change(StepAP203_PersonOrganizationItem self) -> Handle_StepAP203_Change

        Returns Value as Change (or Null if another type)

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_Change

        """
        return _StepAP203.StepAP203_PersonOrganizationItem_Change(self, *args)


    def StartWork(self, *args):
        """
        StartWork(StepAP203_PersonOrganizationItem self) -> Handle_StepAP203_StartWork

        Returns Value as StartWork (or Null if another type)

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_StartWork

        """
        return _StepAP203.StepAP203_PersonOrganizationItem_StartWork(self, *args)


    def ChangeRequest(self, *args):
        """
        ChangeRequest(StepAP203_PersonOrganizationItem self) -> Handle_StepAP203_ChangeRequest

        Returns Value as ChangeRequest (or Null if another type)

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_ChangeRequest

        """
        return _StepAP203.StepAP203_PersonOrganizationItem_ChangeRequest(self, *args)


    def StartRequest(self, *args):
        """
        StartRequest(StepAP203_PersonOrganizationItem self) -> Handle_StepAP203_StartRequest

        Returns Value as StartRequest (or Null if another type)

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_StartRequest

        """
        return _StepAP203.StepAP203_PersonOrganizationItem_StartRequest(self, *args)


    def ConfigurationItem(self, *args):
        """
        ConfigurationItem(StepAP203_PersonOrganizationItem self) -> Handle_StepRepr_ConfigurationItem

        Returns Value as ConfigurationItem (or Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationItem

        """
        return _StepAP203.StepAP203_PersonOrganizationItem_ConfigurationItem(self, *args)


    def Product(self, *args):
        """
        Product(StepAP203_PersonOrganizationItem self) -> Handle_StepBasic_Product

        Returns Value as Product (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Product

        """
        return _StepAP203.StepAP203_PersonOrganizationItem_Product(self, *args)


    def ProductDefinitionFormation(self, *args):
        """
        ProductDefinitionFormation(StepAP203_PersonOrganizationItem self) -> Handle_StepBasic_ProductDefinitionFormation

        Returns Value as ProductDefinitionFormation (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionFormation

        """
        return _StepAP203.StepAP203_PersonOrganizationItem_ProductDefinitionFormation(self, *args)


    def ProductDefinition(self, *args):
        """
        ProductDefinition(StepAP203_PersonOrganizationItem self) -> Handle_StepBasic_ProductDefinition

        Returns Value as ProductDefinition (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepAP203.StepAP203_PersonOrganizationItem_ProductDefinition(self, *args)


    def Contract(self, *args):
        """
        Contract(StepAP203_PersonOrganizationItem self) -> Handle_StepBasic_Contract

        Returns Value as Contract (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Contract

        """
        return _StepAP203.StepAP203_PersonOrganizationItem_Contract(self, *args)


    def SecurityClassification(self, *args):
        """
        SecurityClassification(StepAP203_PersonOrganizationItem self) -> Handle_StepBasic_SecurityClassification

        Returns Value as SecurityClassification (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_SecurityClassification

        """
        return _StepAP203.StepAP203_PersonOrganizationItem_SecurityClassification(self, *args)

    __swig_destroy__ = _StepAP203.delete_StepAP203_PersonOrganizationItem
StepAP203_PersonOrganizationItem_swigregister = _StepAP203.StepAP203_PersonOrganizationItem_swigregister
StepAP203_PersonOrganizationItem_swigregister(StepAP203_PersonOrganizationItem)

class StepAP203_CcDesignDateAndTimeAssignment(StepBasic.StepBasic_DateAndTimeAssignment):
    """Representation of STEP entity CcDesignDateAndTimeAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP203_CcDesignDateAndTimeAssignment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP203_CcDesignDateAndTimeAssignment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP203_CcDesignDateAndTimeAssignment self) -> StepAP203_CcDesignDateAndTimeAssignment

        Empty constructor


        """
        this = _StepAP203.new_StepAP203_CcDesignDateAndTimeAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP203_CcDesignDateAndTimeAssignment self, Handle_StepBasic_DateAndTime aDateAndTimeAssignment_AssignedDateAndTime, Handle_StepBasic_DateTimeRole aDateAndTimeAssignment_Role, Handle_StepAP203_HArray1OfDateTimeItem aItems)

        Initialize all fields (own and inherited)

        :type aDateAndTimeAssignment_AssignedDateAndTime: OCC.wrapper.StepBasic.Handle_StepBasic_DateAndTime
        :type aDateAndTimeAssignment_Role: OCC.wrapper.StepBasic.Handle_StepBasic_DateTimeRole
        :type aItems: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfDateTimeItem

        """
        return _StepAP203.StepAP203_CcDesignDateAndTimeAssignment_Init(self, *args)


    def Items(self, *args):
        """
        Items(StepAP203_CcDesignDateAndTimeAssignment self) -> Handle_StepAP203_HArray1OfDateTimeItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfDateTimeItem

        """
        return _StepAP203.StepAP203_CcDesignDateAndTimeAssignment_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP203_CcDesignDateAndTimeAssignment self, Handle_StepAP203_HArray1OfDateTimeItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfDateTimeItem

        """
        return _StepAP203.StepAP203_CcDesignDateAndTimeAssignment_SetItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP203.StepAP203_CcDesignDateAndTimeAssignment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP203.StepAP203_CcDesignDateAndTimeAssignment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.StepAP203_CcDesignDateAndTimeAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP203.delete_StepAP203_CcDesignDateAndTimeAssignment
StepAP203_CcDesignDateAndTimeAssignment_swigregister = _StepAP203.StepAP203_CcDesignDateAndTimeAssignment_swigregister
StepAP203_CcDesignDateAndTimeAssignment_swigregister(StepAP203_CcDesignDateAndTimeAssignment)

def StepAP203_CcDesignDateAndTimeAssignment_get_type_name(*args):
    """
    StepAP203_CcDesignDateAndTimeAssignment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP203.StepAP203_CcDesignDateAndTimeAssignment_get_type_name(*args)

def StepAP203_CcDesignDateAndTimeAssignment_get_type_descriptor(*args):
    """
    StepAP203_CcDesignDateAndTimeAssignment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP203.StepAP203_CcDesignDateAndTimeAssignment_get_type_descriptor(*args)

class NCollection_Array1_StepAP203_ApprovedItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP203_ApprovedItem self) -> NCollection_Array1< StepAP203_ApprovedItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_ApprovedItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP203_ApprovedItem self) -> NCollection_Array1< StepAP203_ApprovedItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_ApprovedItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP203_ApprovedItem self) -> NCollection_Array1< StepAP203_ApprovedItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_ApprovedItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP203_ApprovedItem self) -> NCollection_Array1< StepAP203_ApprovedItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_ApprovedItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP203.new_NCollection_Array1_StepAP203_ApprovedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP203_ApprovedItem self, StepAP203_ApprovedItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_ApprovedItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP203_ApprovedItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_ApprovedItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP203_ApprovedItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_ApprovedItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP203_ApprovedItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_ApprovedItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP203_ApprovedItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_ApprovedItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP203_ApprovedItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_ApprovedItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP203_ApprovedItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_ApprovedItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP203_ApprovedItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_ApprovedItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP203_ApprovedItem self, NCollection_Array1_StepAP203_ApprovedItem theOther) -> NCollection_Array1_StepAP203_ApprovedItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_ApprovedItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP203_ApprovedItem self, NCollection_Array1_StepAP203_ApprovedItem theOther) -> NCollection_Array1_StepAP203_ApprovedItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_ApprovedItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP203_ApprovedItem self, NCollection_Array1_StepAP203_ApprovedItem theOther) -> NCollection_Array1_StepAP203_ApprovedItem
        assign(NCollection_Array1_StepAP203_ApprovedItem self, NCollection_Array1_StepAP203_ApprovedItem theOther) -> NCollection_Array1_StepAP203_ApprovedItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_ApprovedItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_ApprovedItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP203_ApprovedItem self) -> StepAP203_ApprovedItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_ApprovedItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_ApprovedItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP203_ApprovedItem self) -> StepAP203_ApprovedItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_ApprovedItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_ApprovedItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP203_ApprovedItem self, Standard_Integer const theIndex) -> StepAP203_ApprovedItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_ApprovedItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_ApprovedItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_ApprovedItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP203_ApprovedItem self, Standard_Integer const theIndex, StepAP203_ApprovedItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_ApprovedItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP203_ApprovedItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP203.NCollection_Array1_StepAP203_ApprovedItem_Resize(self, *args)

    __swig_destroy__ = _StepAP203.delete_NCollection_Array1_StepAP203_ApprovedItem
NCollection_Array1_StepAP203_ApprovedItem_swigregister = _StepAP203.NCollection_Array1_StepAP203_ApprovedItem_swigregister
NCollection_Array1_StepAP203_ApprovedItem_swigregister(NCollection_Array1_StepAP203_ApprovedItem)


try:
	StepAP203_Array1OfApprovedItem = NCollection_Array1_StepAP203_ApprovedItem
except NameError:
	pass # does not exist, probably ignored

class Handle_StepAP203_HArray1OfStartRequestItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP203_HArray1OfStartRequestItem self)

        Nullify the handle


        """
        return _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP203_HArray1OfStartRequestItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP203_HArray1OfStartRequestItem self, StepAP203_HArray1OfStartRequestItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP203_HArray1OfStartRequestItem self, Handle_StepAP203_HArray1OfStartRequestItem theHandle) -> Handle_StepAP203_HArray1OfStartRequestItem
        assign(Handle_StepAP203_HArray1OfStartRequestItem self, StepAP203_HArray1OfStartRequestItem thePtr) -> Handle_StepAP203_HArray1OfStartRequestItem
        assign(Handle_StepAP203_HArray1OfStartRequestItem self, Handle_StepAP203_HArray1OfStartRequestItem theHandle) -> Handle_StepAP203_HArray1OfStartRequestItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP203_HArray1OfStartRequestItem self) -> StepAP203_HArray1OfStartRequestItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP203_HArray1OfStartRequestItem self) -> StepAP203_HArray1OfStartRequestItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP203_HArray1OfStartRequestItem self) -> StepAP203_HArray1OfStartRequestItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP203.new_Handle_StepAP203_HArray1OfStartRequestItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_DownCast)
    __swig_destroy__ = _StepAP203.delete_Handle_StepAP203_HArray1OfStartRequestItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfStartRequestItem

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP203_HArray1OfStartRequestItem self) -> NCollection_Array1_StepAP203_StartRequestItem

        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfStartRequestItem

        """
        return _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP203_HArray1OfStartRequestItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepAP203_HArray1OfStartRequestItem self)

        Memory deallocator for transient classes


        """
        return _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP203_HArray1OfStartRequestItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP203_HArray1OfStartRequestItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP203_HArray1OfStartRequestItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP203_HArray1OfStartRequestItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP203_HArray1OfStartRequestItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP203_HArray1OfStartRequestItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP203_HArray1OfStartRequestItem self)

        Increments the reference counter of this object


        """
        return _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP203_HArray1OfStartRequestItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_DecrementRefCounter(self, *args)

Handle_StepAP203_HArray1OfStartRequestItem_swigregister = _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_swigregister
Handle_StepAP203_HArray1OfStartRequestItem_swigregister(Handle_StepAP203_HArray1OfStartRequestItem)

def Handle_StepAP203_HArray1OfStartRequestItem_DownCast(thing):
    return _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_DownCast(thing)
Handle_StepAP203_HArray1OfStartRequestItem_DownCast = _StepAP203.Handle_StepAP203_HArray1OfStartRequestItem_DownCast

class Handle_StepAP203_CcDesignDateAndTimeAssignment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP203_CcDesignDateAndTimeAssignment self)

        Nullify the handle


        """
        return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP203_CcDesignDateAndTimeAssignment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP203_CcDesignDateAndTimeAssignment self, StepAP203_CcDesignDateAndTimeAssignment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP203_CcDesignDateAndTimeAssignment self, Handle_StepAP203_CcDesignDateAndTimeAssignment theHandle) -> Handle_StepAP203_CcDesignDateAndTimeAssignment
        assign(Handle_StepAP203_CcDesignDateAndTimeAssignment self, StepAP203_CcDesignDateAndTimeAssignment thePtr) -> Handle_StepAP203_CcDesignDateAndTimeAssignment
        assign(Handle_StepAP203_CcDesignDateAndTimeAssignment self, Handle_StepAP203_CcDesignDateAndTimeAssignment theHandle) -> Handle_StepAP203_CcDesignDateAndTimeAssignment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP203_CcDesignDateAndTimeAssignment self) -> StepAP203_CcDesignDateAndTimeAssignment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP203_CcDesignDateAndTimeAssignment self) -> StepAP203_CcDesignDateAndTimeAssignment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP203_CcDesignDateAndTimeAssignment self) -> StepAP203_CcDesignDateAndTimeAssignment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment___ref__(self, *args)


    def __hash__(self):
        return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP203.new_Handle_StepAP203_CcDesignDateAndTimeAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_DownCast)
    __swig_destroy__ = _StepAP203.delete_Handle_StepAP203_CcDesignDateAndTimeAssignment

    def Init(self, *args):
        """
        Init(Handle_StepAP203_CcDesignDateAndTimeAssignment self, Handle_StepBasic_DateAndTime aDateAndTimeAssignment_AssignedDateAndTime, Handle_StepBasic_DateTimeRole aDateAndTimeAssignment_Role, Handle_StepAP203_HArray1OfDateTimeItem aItems)

        Initialize all fields (own and inherited)

        :type aDateAndTimeAssignment_AssignedDateAndTime: OCC.wrapper.StepBasic.Handle_StepBasic_DateAndTime
        :type aDateAndTimeAssignment_Role: OCC.wrapper.StepBasic.Handle_StepBasic_DateTimeRole
        :type aItems: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfDateTimeItem

        """
        return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_Init(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP203_CcDesignDateAndTimeAssignment self) -> Handle_StepAP203_HArray1OfDateTimeItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfDateTimeItem

        """
        return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP203_CcDesignDateAndTimeAssignment self, Handle_StepAP203_HArray1OfDateTimeItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfDateTimeItem

        """
        return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_SetItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP203_CcDesignDateAndTimeAssignment self) -> char const *

        :rtype: const char *

        """
        return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAssignedDateAndTime(self, *args):
        """
        SetAssignedDateAndTime(Handle_StepAP203_CcDesignDateAndTimeAssignment self, Handle_StepBasic_DateAndTime aAssignedDateAndTime)

        :type aAssignedDateAndTime: OCC.wrapper.StepBasic.Handle_StepBasic_DateAndTime

        """
        return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_SetAssignedDateAndTime(self, *args)


    def AssignedDateAndTime(self, *args):
        """
        AssignedDateAndTime(Handle_StepAP203_CcDesignDateAndTimeAssignment self) -> Handle_StepBasic_DateAndTime

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_DateAndTime

        """
        return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_AssignedDateAndTime(self, *args)


    def SetRole(self, *args):
        """
        SetRole(Handle_StepAP203_CcDesignDateAndTimeAssignment self, Handle_StepBasic_DateTimeRole aRole)

        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_DateTimeRole

        """
        return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_SetRole(self, *args)


    def Role(self, *args):
        """
        Role(Handle_StepAP203_CcDesignDateAndTimeAssignment self) -> Handle_StepBasic_DateTimeRole

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_DateTimeRole

        """
        return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_Role(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP203_CcDesignDateAndTimeAssignment self)

        Memory deallocator for transient classes


        """
        return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP203_CcDesignDateAndTimeAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP203_CcDesignDateAndTimeAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP203_CcDesignDateAndTimeAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP203_CcDesignDateAndTimeAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP203_CcDesignDateAndTimeAssignment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP203_CcDesignDateAndTimeAssignment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP203_CcDesignDateAndTimeAssignment self)

        Increments the reference counter of this object


        """
        return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP203_CcDesignDateAndTimeAssignment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_DecrementRefCounter(self, *args)

Handle_StepAP203_CcDesignDateAndTimeAssignment_swigregister = _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_swigregister
Handle_StepAP203_CcDesignDateAndTimeAssignment_swigregister(Handle_StepAP203_CcDesignDateAndTimeAssignment)

def Handle_StepAP203_CcDesignDateAndTimeAssignment_DownCast(thing):
    return _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_DownCast(thing)
Handle_StepAP203_CcDesignDateAndTimeAssignment_DownCast = _StepAP203.Handle_StepAP203_CcDesignDateAndTimeAssignment_DownCast

class Handle_StepAP203_CcDesignSpecificationReference(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP203_CcDesignSpecificationReference self)

        Nullify the handle


        """
        return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP203_CcDesignSpecificationReference self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP203_CcDesignSpecificationReference self, StepAP203_CcDesignSpecificationReference thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP203_CcDesignSpecificationReference self, Handle_StepAP203_CcDesignSpecificationReference theHandle) -> Handle_StepAP203_CcDesignSpecificationReference
        assign(Handle_StepAP203_CcDesignSpecificationReference self, StepAP203_CcDesignSpecificationReference thePtr) -> Handle_StepAP203_CcDesignSpecificationReference
        assign(Handle_StepAP203_CcDesignSpecificationReference self, Handle_StepAP203_CcDesignSpecificationReference theHandle) -> Handle_StepAP203_CcDesignSpecificationReference

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP203_CcDesignSpecificationReference self) -> StepAP203_CcDesignSpecificationReference

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP203_CcDesignSpecificationReference self) -> StepAP203_CcDesignSpecificationReference

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP203_CcDesignSpecificationReference self) -> StepAP203_CcDesignSpecificationReference

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference___ref__(self, *args)


    def __hash__(self):
        return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP203.new_Handle_StepAP203_CcDesignSpecificationReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP203.Handle_StepAP203_CcDesignSpecificationReference_DownCast)
    __swig_destroy__ = _StepAP203.delete_Handle_StepAP203_CcDesignSpecificationReference

    def Init(self, *args):
        """
        Init(Handle_StepAP203_CcDesignSpecificationReference self, Handle_StepBasic_Document aDocumentReference_AssignedDocument, Handle_TCollection_HAsciiString aDocumentReference_Source, Handle_StepAP203_HArray1OfSpecifiedItem aItems)

        Initialize all fields (own and inherited)

        :type aDocumentReference_AssignedDocument: OCC.wrapper.StepBasic.Handle_StepBasic_Document
        :type aDocumentReference_Source: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aItems: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem

        """
        return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_Init(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP203_CcDesignSpecificationReference self) -> Handle_StepAP203_HArray1OfSpecifiedItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem

        """
        return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP203_CcDesignSpecificationReference self, Handle_StepAP203_HArray1OfSpecifiedItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem

        """
        return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_SetItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP203_CcDesignSpecificationReference self) -> char const *

        :rtype: const char *

        """
        return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init0(self, *args):
        """
        Init0(Handle_StepAP203_CcDesignSpecificationReference self, Handle_StepBasic_Document aAssignedDocument, Handle_TCollection_HAsciiString aSource)

        :type aAssignedDocument: OCC.wrapper.StepBasic.Handle_StepBasic_Document
        :type aSource: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_Init0(self, *args)


    def AssignedDocument(self, *args):
        """
        AssignedDocument(Handle_StepAP203_CcDesignSpecificationReference self) -> Handle_StepBasic_Document

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Document

        """
        return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_AssignedDocument(self, *args)


    def SetAssignedDocument(self, *args):
        """
        SetAssignedDocument(Handle_StepAP203_CcDesignSpecificationReference self, Handle_StepBasic_Document aAssignedDocument)

        :type aAssignedDocument: OCC.wrapper.StepBasic.Handle_StepBasic_Document

        """
        return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_SetAssignedDocument(self, *args)


    def Source(self, *args):
        """
        Source(Handle_StepAP203_CcDesignSpecificationReference self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_Source(self, *args)


    def SetSource(self, *args):
        """
        SetSource(Handle_StepAP203_CcDesignSpecificationReference self, Handle_TCollection_HAsciiString aSource)

        :type aSource: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_SetSource(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP203_CcDesignSpecificationReference self)

        Memory deallocator for transient classes


        """
        return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP203_CcDesignSpecificationReference self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP203_CcDesignSpecificationReference self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP203_CcDesignSpecificationReference self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP203_CcDesignSpecificationReference self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP203_CcDesignSpecificationReference self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP203_CcDesignSpecificationReference self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP203_CcDesignSpecificationReference self)

        Increments the reference counter of this object


        """
        return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP203_CcDesignSpecificationReference self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_DecrementRefCounter(self, *args)

Handle_StepAP203_CcDesignSpecificationReference_swigregister = _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_swigregister
Handle_StepAP203_CcDesignSpecificationReference_swigregister(Handle_StepAP203_CcDesignSpecificationReference)

def Handle_StepAP203_CcDesignSpecificationReference_DownCast(thing):
    return _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_DownCast(thing)
Handle_StepAP203_CcDesignSpecificationReference_DownCast = _StepAP203.Handle_StepAP203_CcDesignSpecificationReference_DownCast

class StepAP203_ChangeRequestItem(StepData.StepData_SelectType):
    """Representation of STEP SELECT type ChangeRequestItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP203_ChangeRequestItem self) -> StepAP203_ChangeRequestItem

        Empty constructor


        """
        this = _StepAP203.new_StepAP203_ChangeRequestItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP203_ChangeRequestItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a kind of ChangeRequestItem select type
        1 -> ProductDefinitionFormation from StepBasic
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.StepAP203_ChangeRequestItem_CaseNum(self, *args)


    def ProductDefinitionFormation(self, *args):
        """
        ProductDefinitionFormation(StepAP203_ChangeRequestItem self) -> Handle_StepBasic_ProductDefinitionFormation

        Returns Value as ProductDefinitionFormation (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionFormation

        """
        return _StepAP203.StepAP203_ChangeRequestItem_ProductDefinitionFormation(self, *args)

    __swig_destroy__ = _StepAP203.delete_StepAP203_ChangeRequestItem
StepAP203_ChangeRequestItem_swigregister = _StepAP203.StepAP203_ChangeRequestItem_swigregister
StepAP203_ChangeRequestItem_swigregister(StepAP203_ChangeRequestItem)

class NCollection_Array1_StepAP203_ChangeRequestItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP203_ChangeRequestItem self) -> NCollection_Array1< StepAP203_ChangeRequestItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP203_ChangeRequestItem self) -> NCollection_Array1< StepAP203_ChangeRequestItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP203_ChangeRequestItem self) -> NCollection_Array1< StepAP203_ChangeRequestItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP203_ChangeRequestItem self) -> NCollection_Array1< StepAP203_ChangeRequestItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP203.new_NCollection_Array1_StepAP203_ChangeRequestItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP203_ChangeRequestItem self, StepAP203_ChangeRequestItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP203_ChangeRequestItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP203_ChangeRequestItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP203_ChangeRequestItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP203_ChangeRequestItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP203_ChangeRequestItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP203_ChangeRequestItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP203_ChangeRequestItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP203_ChangeRequestItem self, NCollection_Array1_StepAP203_ChangeRequestItem theOther) -> NCollection_Array1_StepAP203_ChangeRequestItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP203_ChangeRequestItem self, NCollection_Array1_StepAP203_ChangeRequestItem theOther) -> NCollection_Array1_StepAP203_ChangeRequestItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP203_ChangeRequestItem self, NCollection_Array1_StepAP203_ChangeRequestItem theOther) -> NCollection_Array1_StepAP203_ChangeRequestItem
        assign(NCollection_Array1_StepAP203_ChangeRequestItem self, NCollection_Array1_StepAP203_ChangeRequestItem theOther) -> NCollection_Array1_StepAP203_ChangeRequestItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP203_ChangeRequestItem self) -> StepAP203_ChangeRequestItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP203_ChangeRequestItem self) -> StepAP203_ChangeRequestItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP203_ChangeRequestItem self, Standard_Integer const theIndex) -> StepAP203_ChangeRequestItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP203_ChangeRequestItem self, Standard_Integer const theIndex, StepAP203_ChangeRequestItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP203_ChangeRequestItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem_Resize(self, *args)

    __swig_destroy__ = _StepAP203.delete_NCollection_Array1_StepAP203_ChangeRequestItem
NCollection_Array1_StepAP203_ChangeRequestItem_swigregister = _StepAP203.NCollection_Array1_StepAP203_ChangeRequestItem_swigregister
NCollection_Array1_StepAP203_ChangeRequestItem_swigregister(NCollection_Array1_StepAP203_ChangeRequestItem)


try:
	StepAP203_Array1OfChangeRequestItem = NCollection_Array1_StepAP203_ChangeRequestItem
except NameError:
	pass # does not exist, probably ignored

class Handle_StepAP203_HArray1OfSpecifiedItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP203_HArray1OfSpecifiedItem self)

        Nullify the handle


        """
        return _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP203_HArray1OfSpecifiedItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP203_HArray1OfSpecifiedItem self, StepAP203_HArray1OfSpecifiedItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP203_HArray1OfSpecifiedItem self, Handle_StepAP203_HArray1OfSpecifiedItem theHandle) -> Handle_StepAP203_HArray1OfSpecifiedItem
        assign(Handle_StepAP203_HArray1OfSpecifiedItem self, StepAP203_HArray1OfSpecifiedItem thePtr) -> Handle_StepAP203_HArray1OfSpecifiedItem
        assign(Handle_StepAP203_HArray1OfSpecifiedItem self, Handle_StepAP203_HArray1OfSpecifiedItem theHandle) -> Handle_StepAP203_HArray1OfSpecifiedItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP203_HArray1OfSpecifiedItem self) -> StepAP203_HArray1OfSpecifiedItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP203_HArray1OfSpecifiedItem self) -> StepAP203_HArray1OfSpecifiedItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP203_HArray1OfSpecifiedItem self) -> StepAP203_HArray1OfSpecifiedItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP203.new_Handle_StepAP203_HArray1OfSpecifiedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_DownCast)
    __swig_destroy__ = _StepAP203.delete_Handle_StepAP203_HArray1OfSpecifiedItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfSpecifiedItem

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP203_HArray1OfSpecifiedItem self) -> NCollection_Array1_StepAP203_SpecifiedItem

        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfSpecifiedItem

        """
        return _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP203_HArray1OfSpecifiedItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepAP203_HArray1OfSpecifiedItem self)

        Memory deallocator for transient classes


        """
        return _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP203_HArray1OfSpecifiedItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP203_HArray1OfSpecifiedItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP203_HArray1OfSpecifiedItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP203_HArray1OfSpecifiedItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP203_HArray1OfSpecifiedItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP203_HArray1OfSpecifiedItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP203_HArray1OfSpecifiedItem self)

        Increments the reference counter of this object


        """
        return _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP203_HArray1OfSpecifiedItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_DecrementRefCounter(self, *args)

Handle_StepAP203_HArray1OfSpecifiedItem_swigregister = _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_swigregister
Handle_StepAP203_HArray1OfSpecifiedItem_swigregister(Handle_StepAP203_HArray1OfSpecifiedItem)

def Handle_StepAP203_HArray1OfSpecifiedItem_DownCast(thing):
    return _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_DownCast(thing)
Handle_StepAP203_HArray1OfSpecifiedItem_DownCast = _StepAP203.Handle_StepAP203_HArray1OfSpecifiedItem_DownCast

class Handle_StepAP203_HArray1OfDateTimeItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP203_HArray1OfDateTimeItem self)

        Nullify the handle


        """
        return _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP203_HArray1OfDateTimeItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP203_HArray1OfDateTimeItem self, StepAP203_HArray1OfDateTimeItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP203_HArray1OfDateTimeItem self, Handle_StepAP203_HArray1OfDateTimeItem theHandle) -> Handle_StepAP203_HArray1OfDateTimeItem
        assign(Handle_StepAP203_HArray1OfDateTimeItem self, StepAP203_HArray1OfDateTimeItem thePtr) -> Handle_StepAP203_HArray1OfDateTimeItem
        assign(Handle_StepAP203_HArray1OfDateTimeItem self, Handle_StepAP203_HArray1OfDateTimeItem theHandle) -> Handle_StepAP203_HArray1OfDateTimeItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP203_HArray1OfDateTimeItem self) -> StepAP203_HArray1OfDateTimeItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP203_HArray1OfDateTimeItem self) -> StepAP203_HArray1OfDateTimeItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP203_HArray1OfDateTimeItem self) -> StepAP203_HArray1OfDateTimeItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP203.new_Handle_StepAP203_HArray1OfDateTimeItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_DownCast)
    __swig_destroy__ = _StepAP203.delete_Handle_StepAP203_HArray1OfDateTimeItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfDateTimeItem

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP203_HArray1OfDateTimeItem self) -> NCollection_Array1_StepAP203_DateTimeItem

        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfDateTimeItem

        """
        return _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP203_HArray1OfDateTimeItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepAP203_HArray1OfDateTimeItem self)

        Memory deallocator for transient classes


        """
        return _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP203_HArray1OfDateTimeItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP203_HArray1OfDateTimeItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP203_HArray1OfDateTimeItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP203_HArray1OfDateTimeItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP203_HArray1OfDateTimeItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP203_HArray1OfDateTimeItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP203_HArray1OfDateTimeItem self)

        Increments the reference counter of this object


        """
        return _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP203_HArray1OfDateTimeItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_DecrementRefCounter(self, *args)

Handle_StepAP203_HArray1OfDateTimeItem_swigregister = _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_swigregister
Handle_StepAP203_HArray1OfDateTimeItem_swigregister(Handle_StepAP203_HArray1OfDateTimeItem)

def Handle_StepAP203_HArray1OfDateTimeItem_DownCast(thing):
    return _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_DownCast(thing)
Handle_StepAP203_HArray1OfDateTimeItem_DownCast = _StepAP203.Handle_StepAP203_HArray1OfDateTimeItem_DownCast

class Handle_StepAP203_ChangeRequest(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP203_ChangeRequest self)

        Nullify the handle


        """
        return _StepAP203.Handle_StepAP203_ChangeRequest_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP203_ChangeRequest self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP203.Handle_StepAP203_ChangeRequest_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP203_ChangeRequest self, StepAP203_ChangeRequest thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP203.Handle_StepAP203_ChangeRequest_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP203_ChangeRequest self, Handle_StepAP203_ChangeRequest theHandle) -> Handle_StepAP203_ChangeRequest
        assign(Handle_StepAP203_ChangeRequest self, StepAP203_ChangeRequest thePtr) -> Handle_StepAP203_ChangeRequest
        assign(Handle_StepAP203_ChangeRequest self, Handle_StepAP203_ChangeRequest theHandle) -> Handle_StepAP203_ChangeRequest

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP203.Handle_StepAP203_ChangeRequest_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP203_ChangeRequest self) -> StepAP203_ChangeRequest

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_ChangeRequest_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP203_ChangeRequest self) -> StepAP203_ChangeRequest

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_ChangeRequest___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP203_ChangeRequest self) -> StepAP203_ChangeRequest

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP203.Handle_StepAP203_ChangeRequest___ref__(self, *args)


    def __hash__(self):
        return _StepAP203.Handle_StepAP203_ChangeRequest___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP203.Handle_StepAP203_ChangeRequest___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP203.new_Handle_StepAP203_ChangeRequest(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP203.Handle_StepAP203_ChangeRequest_DownCast)
    __swig_destroy__ = _StepAP203.delete_Handle_StepAP203_ChangeRequest

    def Init(self, *args):
        """
        Init(Handle_StepAP203_ChangeRequest self, Handle_StepBasic_VersionedActionRequest aActionRequestAssignment_AssignedActionRequest, Handle_StepAP203_HArray1OfChangeRequestItem aItems)

        Initialize all fields (own and inherited)

        :type aActionRequestAssignment_AssignedActionRequest: OCC.wrapper.StepBasic.Handle_StepBasic_VersionedActionRequest
        :type aItems: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem

        """
        return _StepAP203.Handle_StepAP203_ChangeRequest_Init(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP203_ChangeRequest self) -> Handle_StepAP203_HArray1OfChangeRequestItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem

        """
        return _StepAP203.Handle_StepAP203_ChangeRequest_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP203_ChangeRequest self, Handle_StepAP203_HArray1OfChangeRequestItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem

        """
        return _StepAP203.Handle_StepAP203_ChangeRequest_SetItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP203_ChangeRequest self) -> char const *

        :rtype: const char *

        """
        return _StepAP203.Handle_StepAP203_ChangeRequest_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_ChangeRequest_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_ChangeRequest_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def AssignedActionRequest(self, *args):
        """
        AssignedActionRequest(Handle_StepAP203_ChangeRequest self) -> Handle_StepBasic_VersionedActionRequest

        Returns field AssignedActionRequest

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_VersionedActionRequest

        """
        return _StepAP203.Handle_StepAP203_ChangeRequest_AssignedActionRequest(self, *args)


    def SetAssignedActionRequest(self, *args):
        """
        SetAssignedActionRequest(Handle_StepAP203_ChangeRequest self, Handle_StepBasic_VersionedActionRequest AssignedActionRequest)

        Set field AssignedActionRequest

        :type AssignedActionRequest: OCC.wrapper.StepBasic.Handle_StepBasic_VersionedActionRequest

        """
        return _StepAP203.Handle_StepAP203_ChangeRequest_SetAssignedActionRequest(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP203_ChangeRequest self)

        Memory deallocator for transient classes


        """
        return _StepAP203.Handle_StepAP203_ChangeRequest_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP203_ChangeRequest self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP203_ChangeRequest self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_ChangeRequest_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP203_ChangeRequest self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP203_ChangeRequest self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_ChangeRequest_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP203_ChangeRequest self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP203.Handle_StepAP203_ChangeRequest_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP203_ChangeRequest self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_ChangeRequest_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP203_ChangeRequest self)

        Increments the reference counter of this object


        """
        return _StepAP203.Handle_StepAP203_ChangeRequest_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP203_ChangeRequest self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_ChangeRequest_DecrementRefCounter(self, *args)

Handle_StepAP203_ChangeRequest_swigregister = _StepAP203.Handle_StepAP203_ChangeRequest_swigregister
Handle_StepAP203_ChangeRequest_swigregister(Handle_StepAP203_ChangeRequest)

def Handle_StepAP203_ChangeRequest_DownCast(thing):
    return _StepAP203.Handle_StepAP203_ChangeRequest_DownCast(thing)
Handle_StepAP203_ChangeRequest_DownCast = _StepAP203.Handle_StepAP203_ChangeRequest_DownCast

class NCollection_Array1_StepAP203_CertifiedItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP203_CertifiedItem self) -> NCollection_Array1< StepAP203_CertifiedItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_CertifiedItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP203_CertifiedItem self) -> NCollection_Array1< StepAP203_CertifiedItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_CertifiedItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP203_CertifiedItem self) -> NCollection_Array1< StepAP203_CertifiedItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_CertifiedItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP203_CertifiedItem self) -> NCollection_Array1< StepAP203_CertifiedItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_CertifiedItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP203.new_NCollection_Array1_StepAP203_CertifiedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP203_CertifiedItem self, StepAP203_CertifiedItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_CertifiedItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP203_CertifiedItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_CertifiedItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP203_CertifiedItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_CertifiedItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP203_CertifiedItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_CertifiedItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP203_CertifiedItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_CertifiedItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP203_CertifiedItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_CertifiedItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP203_CertifiedItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_CertifiedItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP203_CertifiedItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_CertifiedItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP203_CertifiedItem self, NCollection_Array1_StepAP203_CertifiedItem theOther) -> NCollection_Array1_StepAP203_CertifiedItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_CertifiedItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP203_CertifiedItem self, NCollection_Array1_StepAP203_CertifiedItem theOther) -> NCollection_Array1_StepAP203_CertifiedItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_CertifiedItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP203_CertifiedItem self, NCollection_Array1_StepAP203_CertifiedItem theOther) -> NCollection_Array1_StepAP203_CertifiedItem
        assign(NCollection_Array1_StepAP203_CertifiedItem self, NCollection_Array1_StepAP203_CertifiedItem theOther) -> NCollection_Array1_StepAP203_CertifiedItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_CertifiedItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_CertifiedItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP203_CertifiedItem self) -> StepAP203_CertifiedItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_CertifiedItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_CertifiedItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP203_CertifiedItem self) -> StepAP203_CertifiedItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_CertifiedItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_CertifiedItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP203_CertifiedItem self, Standard_Integer const theIndex) -> StepAP203_CertifiedItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_CertifiedItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_CertifiedItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_CertifiedItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP203_CertifiedItem self, Standard_Integer const theIndex, StepAP203_CertifiedItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_CertifiedItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP203_CertifiedItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP203.NCollection_Array1_StepAP203_CertifiedItem_Resize(self, *args)

    __swig_destroy__ = _StepAP203.delete_NCollection_Array1_StepAP203_CertifiedItem
NCollection_Array1_StepAP203_CertifiedItem_swigregister = _StepAP203.NCollection_Array1_StepAP203_CertifiedItem_swigregister
NCollection_Array1_StepAP203_CertifiedItem_swigregister(NCollection_Array1_StepAP203_CertifiedItem)


try:
	StepAP203_Array1OfCertifiedItem = NCollection_Array1_StepAP203_CertifiedItem
except NameError:
	pass # does not exist, probably ignored

class NCollection_Array1_StepAP203_ContractedItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP203_ContractedItem self) -> NCollection_Array1< StepAP203_ContractedItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_ContractedItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP203_ContractedItem self) -> NCollection_Array1< StepAP203_ContractedItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_ContractedItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP203_ContractedItem self) -> NCollection_Array1< StepAP203_ContractedItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_ContractedItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP203_ContractedItem self) -> NCollection_Array1< StepAP203_ContractedItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_ContractedItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP203.new_NCollection_Array1_StepAP203_ContractedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP203_ContractedItem self, StepAP203_ContractedItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_ContractedItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP203_ContractedItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_ContractedItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP203_ContractedItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_ContractedItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP203_ContractedItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_ContractedItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP203_ContractedItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_ContractedItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP203_ContractedItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_ContractedItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP203_ContractedItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_ContractedItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP203_ContractedItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_ContractedItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP203_ContractedItem self, NCollection_Array1_StepAP203_ContractedItem theOther) -> NCollection_Array1_StepAP203_ContractedItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_ContractedItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP203_ContractedItem self, NCollection_Array1_StepAP203_ContractedItem theOther) -> NCollection_Array1_StepAP203_ContractedItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_ContractedItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP203_ContractedItem self, NCollection_Array1_StepAP203_ContractedItem theOther) -> NCollection_Array1_StepAP203_ContractedItem
        assign(NCollection_Array1_StepAP203_ContractedItem self, NCollection_Array1_StepAP203_ContractedItem theOther) -> NCollection_Array1_StepAP203_ContractedItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_ContractedItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_ContractedItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP203_ContractedItem self) -> StepAP203_ContractedItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_ContractedItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_ContractedItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP203_ContractedItem self) -> StepAP203_ContractedItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_ContractedItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_ContractedItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP203_ContractedItem self, Standard_Integer const theIndex) -> StepAP203_ContractedItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_ContractedItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_ContractedItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_ContractedItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP203_ContractedItem self, Standard_Integer const theIndex, StepAP203_ContractedItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_ContractedItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP203_ContractedItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP203.NCollection_Array1_StepAP203_ContractedItem_Resize(self, *args)

    __swig_destroy__ = _StepAP203.delete_NCollection_Array1_StepAP203_ContractedItem
NCollection_Array1_StepAP203_ContractedItem_swigregister = _StepAP203.NCollection_Array1_StepAP203_ContractedItem_swigregister
NCollection_Array1_StepAP203_ContractedItem_swigregister(NCollection_Array1_StepAP203_ContractedItem)


try:
	StepAP203_Array1OfContractedItem = NCollection_Array1_StepAP203_ContractedItem
except NameError:
	pass # does not exist, probably ignored

class Handle_StepAP203_CcDesignContract(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP203_CcDesignContract self)

        Nullify the handle


        """
        return _StepAP203.Handle_StepAP203_CcDesignContract_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP203_CcDesignContract self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP203.Handle_StepAP203_CcDesignContract_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP203_CcDesignContract self, StepAP203_CcDesignContract thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP203.Handle_StepAP203_CcDesignContract_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP203_CcDesignContract self, Handle_StepAP203_CcDesignContract theHandle) -> Handle_StepAP203_CcDesignContract
        assign(Handle_StepAP203_CcDesignContract self, StepAP203_CcDesignContract thePtr) -> Handle_StepAP203_CcDesignContract
        assign(Handle_StepAP203_CcDesignContract self, Handle_StepAP203_CcDesignContract theHandle) -> Handle_StepAP203_CcDesignContract

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP203.Handle_StepAP203_CcDesignContract_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP203_CcDesignContract self) -> StepAP203_CcDesignContract

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_CcDesignContract_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP203_CcDesignContract self) -> StepAP203_CcDesignContract

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_CcDesignContract___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP203_CcDesignContract self) -> StepAP203_CcDesignContract

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP203.Handle_StepAP203_CcDesignContract___ref__(self, *args)


    def __hash__(self):
        return _StepAP203.Handle_StepAP203_CcDesignContract___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP203.Handle_StepAP203_CcDesignContract___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP203.new_Handle_StepAP203_CcDesignContract(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP203.Handle_StepAP203_CcDesignContract_DownCast)
    __swig_destroy__ = _StepAP203.delete_Handle_StepAP203_CcDesignContract

    def Init(self, *args):
        """
        Init(Handle_StepAP203_CcDesignContract self, Handle_StepBasic_Contract aContractAssignment_AssignedContract, Handle_StepAP203_HArray1OfContractedItem aItems)

        Initialize all fields (own and inherited)

        :type aContractAssignment_AssignedContract: OCC.wrapper.StepBasic.Handle_StepBasic_Contract
        :type aItems: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfContractedItem

        """
        return _StepAP203.Handle_StepAP203_CcDesignContract_Init(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP203_CcDesignContract self) -> Handle_StepAP203_HArray1OfContractedItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfContractedItem

        """
        return _StepAP203.Handle_StepAP203_CcDesignContract_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP203_CcDesignContract self, Handle_StepAP203_HArray1OfContractedItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfContractedItem

        """
        return _StepAP203.Handle_StepAP203_CcDesignContract_SetItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP203_CcDesignContract self) -> char const *

        :rtype: const char *

        """
        return _StepAP203.Handle_StepAP203_CcDesignContract_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_CcDesignContract_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_CcDesignContract_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def AssignedContract(self, *args):
        """
        AssignedContract(Handle_StepAP203_CcDesignContract self) -> Handle_StepBasic_Contract

        Returns field AssignedContract

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Contract

        """
        return _StepAP203.Handle_StepAP203_CcDesignContract_AssignedContract(self, *args)


    def SetAssignedContract(self, *args):
        """
        SetAssignedContract(Handle_StepAP203_CcDesignContract self, Handle_StepBasic_Contract AssignedContract)

        Set field AssignedContract

        :type AssignedContract: OCC.wrapper.StepBasic.Handle_StepBasic_Contract

        """
        return _StepAP203.Handle_StepAP203_CcDesignContract_SetAssignedContract(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP203_CcDesignContract self)

        Memory deallocator for transient classes


        """
        return _StepAP203.Handle_StepAP203_CcDesignContract_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP203_CcDesignContract self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP203_CcDesignContract self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_CcDesignContract_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP203_CcDesignContract self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP203_CcDesignContract self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_CcDesignContract_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP203_CcDesignContract self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP203.Handle_StepAP203_CcDesignContract_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP203_CcDesignContract self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_CcDesignContract_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP203_CcDesignContract self)

        Increments the reference counter of this object


        """
        return _StepAP203.Handle_StepAP203_CcDesignContract_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP203_CcDesignContract self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_CcDesignContract_DecrementRefCounter(self, *args)

Handle_StepAP203_CcDesignContract_swigregister = _StepAP203.Handle_StepAP203_CcDesignContract_swigregister
Handle_StepAP203_CcDesignContract_swigregister(Handle_StepAP203_CcDesignContract)

def Handle_StepAP203_CcDesignContract_DownCast(thing):
    return _StepAP203.Handle_StepAP203_CcDesignContract_DownCast(thing)
Handle_StepAP203_CcDesignContract_DownCast = _StepAP203.Handle_StepAP203_CcDesignContract_DownCast

class StepAP203_HArray1OfChangeRequestItem(NCollection_Array1_StepAP203_ChangeRequestItem, Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP203_HArray1OfChangeRequestItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP203_HArray1OfChangeRequestItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP203_HArray1OfChangeRequestItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP203_HArray1OfChangeRequestItem
        __init__(StepAP203_HArray1OfChangeRequestItem self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP203_ChangeRequestItem theValue) -> StepAP203_HArray1OfChangeRequestItem
        __init__(StepAP203_HArray1OfChangeRequestItem self, NCollection_Array1_StepAP203_ChangeRequestItem theOther) -> StepAP203_HArray1OfChangeRequestItem

        :type theOther: OCC.wrapper.StepAP203.StepAP203_Array1OfChangeRequestItem

        """
        this = _StepAP203.new_StepAP203_HArray1OfChangeRequestItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfChangeRequestItem

        """
        res = _StepAP203.StepAP203_HArray1OfChangeRequestItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP203_HArray1OfChangeRequestItem self) -> NCollection_Array1_StepAP203_ChangeRequestItem

        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfChangeRequestItem

        """
        return _StepAP203.StepAP203_HArray1OfChangeRequestItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP203.StepAP203_HArray1OfChangeRequestItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP203.StepAP203_HArray1OfChangeRequestItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.StepAP203_HArray1OfChangeRequestItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP203.delete_StepAP203_HArray1OfChangeRequestItem
StepAP203_HArray1OfChangeRequestItem_swigregister = _StepAP203.StepAP203_HArray1OfChangeRequestItem_swigregister
StepAP203_HArray1OfChangeRequestItem_swigregister(StepAP203_HArray1OfChangeRequestItem)

def StepAP203_HArray1OfChangeRequestItem_get_type_name(*args):
    """
    StepAP203_HArray1OfChangeRequestItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP203.StepAP203_HArray1OfChangeRequestItem_get_type_name(*args)

def StepAP203_HArray1OfChangeRequestItem_get_type_descriptor(*args):
    """
    StepAP203_HArray1OfChangeRequestItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP203.StepAP203_HArray1OfChangeRequestItem_get_type_descriptor(*args)

class StepAP203_CcDesignApproval(StepBasic.StepBasic_ApprovalAssignment):
    """Representation of STEP entity CcDesignApproval"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP203_CcDesignApproval
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP203_CcDesignApproval(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP203_CcDesignApproval self) -> StepAP203_CcDesignApproval

        Empty constructor


        """
        this = _StepAP203.new_StepAP203_CcDesignApproval(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP203_CcDesignApproval self, Handle_StepBasic_Approval aApprovalAssignment_AssignedApproval, Handle_StepAP203_HArray1OfApprovedItem aItems)

        Initialize all fields (own and inherited)

        :type aApprovalAssignment_AssignedApproval: OCC.wrapper.StepBasic.Handle_StepBasic_Approval
        :type aItems: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfApprovedItem

        """
        return _StepAP203.StepAP203_CcDesignApproval_Init(self, *args)


    def Items(self, *args):
        """
        Items(StepAP203_CcDesignApproval self) -> Handle_StepAP203_HArray1OfApprovedItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfApprovedItem

        """
        return _StepAP203.StepAP203_CcDesignApproval_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP203_CcDesignApproval self, Handle_StepAP203_HArray1OfApprovedItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfApprovedItem

        """
        return _StepAP203.StepAP203_CcDesignApproval_SetItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP203.StepAP203_CcDesignApproval_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP203.StepAP203_CcDesignApproval_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.StepAP203_CcDesignApproval_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP203.delete_StepAP203_CcDesignApproval
StepAP203_CcDesignApproval_swigregister = _StepAP203.StepAP203_CcDesignApproval_swigregister
StepAP203_CcDesignApproval_swigregister(StepAP203_CcDesignApproval)

def StepAP203_CcDesignApproval_get_type_name(*args):
    """
    StepAP203_CcDesignApproval_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP203.StepAP203_CcDesignApproval_get_type_name(*args)

def StepAP203_CcDesignApproval_get_type_descriptor(*args):
    """
    StepAP203_CcDesignApproval_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP203.StepAP203_CcDesignApproval_get_type_descriptor(*args)

class Handle_StepAP203_StartRequest(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP203_StartRequest self)

        Nullify the handle


        """
        return _StepAP203.Handle_StepAP203_StartRequest_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP203_StartRequest self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP203.Handle_StepAP203_StartRequest_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP203_StartRequest self, StepAP203_StartRequest thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP203.Handle_StepAP203_StartRequest_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP203_StartRequest self, Handle_StepAP203_StartRequest theHandle) -> Handle_StepAP203_StartRequest
        assign(Handle_StepAP203_StartRequest self, StepAP203_StartRequest thePtr) -> Handle_StepAP203_StartRequest
        assign(Handle_StepAP203_StartRequest self, Handle_StepAP203_StartRequest theHandle) -> Handle_StepAP203_StartRequest

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP203.Handle_StepAP203_StartRequest_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP203_StartRequest self) -> StepAP203_StartRequest

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_StartRequest_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP203_StartRequest self) -> StepAP203_StartRequest

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_StartRequest___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP203_StartRequest self) -> StepAP203_StartRequest

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP203.Handle_StepAP203_StartRequest___ref__(self, *args)


    def __hash__(self):
        return _StepAP203.Handle_StepAP203_StartRequest___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP203.Handle_StepAP203_StartRequest___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP203.new_Handle_StepAP203_StartRequest(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP203.Handle_StepAP203_StartRequest_DownCast)
    __swig_destroy__ = _StepAP203.delete_Handle_StepAP203_StartRequest

    def Init(self, *args):
        """
        Init(Handle_StepAP203_StartRequest self, Handle_StepBasic_VersionedActionRequest aActionRequestAssignment_AssignedActionRequest, Handle_StepAP203_HArray1OfStartRequestItem aItems)

        Initialize all fields (own and inherited)

        :type aActionRequestAssignment_AssignedActionRequest: OCC.wrapper.StepBasic.Handle_StepBasic_VersionedActionRequest
        :type aItems: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfStartRequestItem

        """
        return _StepAP203.Handle_StepAP203_StartRequest_Init(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP203_StartRequest self) -> Handle_StepAP203_HArray1OfStartRequestItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfStartRequestItem

        """
        return _StepAP203.Handle_StepAP203_StartRequest_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP203_StartRequest self, Handle_StepAP203_HArray1OfStartRequestItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfStartRequestItem

        """
        return _StepAP203.Handle_StepAP203_StartRequest_SetItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP203_StartRequest self) -> char const *

        :rtype: const char *

        """
        return _StepAP203.Handle_StepAP203_StartRequest_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_StartRequest_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_StartRequest_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def AssignedActionRequest(self, *args):
        """
        AssignedActionRequest(Handle_StepAP203_StartRequest self) -> Handle_StepBasic_VersionedActionRequest

        Returns field AssignedActionRequest

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_VersionedActionRequest

        """
        return _StepAP203.Handle_StepAP203_StartRequest_AssignedActionRequest(self, *args)


    def SetAssignedActionRequest(self, *args):
        """
        SetAssignedActionRequest(Handle_StepAP203_StartRequest self, Handle_StepBasic_VersionedActionRequest AssignedActionRequest)

        Set field AssignedActionRequest

        :type AssignedActionRequest: OCC.wrapper.StepBasic.Handle_StepBasic_VersionedActionRequest

        """
        return _StepAP203.Handle_StepAP203_StartRequest_SetAssignedActionRequest(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP203_StartRequest self)

        Memory deallocator for transient classes


        """
        return _StepAP203.Handle_StepAP203_StartRequest_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP203_StartRequest self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP203_StartRequest self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_StartRequest_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP203_StartRequest self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP203_StartRequest self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_StartRequest_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP203_StartRequest self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP203.Handle_StepAP203_StartRequest_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP203_StartRequest self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_StartRequest_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP203_StartRequest self)

        Increments the reference counter of this object


        """
        return _StepAP203.Handle_StepAP203_StartRequest_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP203_StartRequest self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_StartRequest_DecrementRefCounter(self, *args)

Handle_StepAP203_StartRequest_swigregister = _StepAP203.Handle_StepAP203_StartRequest_swigregister
Handle_StepAP203_StartRequest_swigregister(Handle_StepAP203_StartRequest)

def Handle_StepAP203_StartRequest_DownCast(thing):
    return _StepAP203.Handle_StepAP203_StartRequest_DownCast(thing)
Handle_StepAP203_StartRequest_DownCast = _StepAP203.Handle_StepAP203_StartRequest_DownCast

class Handle_StepAP203_HArray1OfPersonOrganizationItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP203_HArray1OfPersonOrganizationItem self)

        Nullify the handle


        """
        return _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP203_HArray1OfPersonOrganizationItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP203_HArray1OfPersonOrganizationItem self, StepAP203_HArray1OfPersonOrganizationItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP203_HArray1OfPersonOrganizationItem self, Handle_StepAP203_HArray1OfPersonOrganizationItem theHandle) -> Handle_StepAP203_HArray1OfPersonOrganizationItem
        assign(Handle_StepAP203_HArray1OfPersonOrganizationItem self, StepAP203_HArray1OfPersonOrganizationItem thePtr) -> Handle_StepAP203_HArray1OfPersonOrganizationItem
        assign(Handle_StepAP203_HArray1OfPersonOrganizationItem self, Handle_StepAP203_HArray1OfPersonOrganizationItem theHandle) -> Handle_StepAP203_HArray1OfPersonOrganizationItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP203_HArray1OfPersonOrganizationItem self) -> StepAP203_HArray1OfPersonOrganizationItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP203_HArray1OfPersonOrganizationItem self) -> StepAP203_HArray1OfPersonOrganizationItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP203_HArray1OfPersonOrganizationItem self) -> StepAP203_HArray1OfPersonOrganizationItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP203.new_Handle_StepAP203_HArray1OfPersonOrganizationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_DownCast)
    __swig_destroy__ = _StepAP203.delete_Handle_StepAP203_HArray1OfPersonOrganizationItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfPersonOrganizationItem

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP203_HArray1OfPersonOrganizationItem self) -> NCollection_Array1_StepAP203_PersonOrganizationItem

        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfPersonOrganizationItem

        """
        return _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP203_HArray1OfPersonOrganizationItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepAP203_HArray1OfPersonOrganizationItem self)

        Memory deallocator for transient classes


        """
        return _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP203_HArray1OfPersonOrganizationItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP203_HArray1OfPersonOrganizationItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP203_HArray1OfPersonOrganizationItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP203_HArray1OfPersonOrganizationItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP203_HArray1OfPersonOrganizationItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP203_HArray1OfPersonOrganizationItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP203_HArray1OfPersonOrganizationItem self)

        Increments the reference counter of this object


        """
        return _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP203_HArray1OfPersonOrganizationItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_DecrementRefCounter(self, *args)

Handle_StepAP203_HArray1OfPersonOrganizationItem_swigregister = _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_swigregister
Handle_StepAP203_HArray1OfPersonOrganizationItem_swigregister(Handle_StepAP203_HArray1OfPersonOrganizationItem)

def Handle_StepAP203_HArray1OfPersonOrganizationItem_DownCast(thing):
    return _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_DownCast(thing)
Handle_StepAP203_HArray1OfPersonOrganizationItem_DownCast = _StepAP203.Handle_StepAP203_HArray1OfPersonOrganizationItem_DownCast

class Handle_StepAP203_HArray1OfClassifiedItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP203_HArray1OfClassifiedItem self)

        Nullify the handle


        """
        return _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP203_HArray1OfClassifiedItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP203_HArray1OfClassifiedItem self, StepAP203_HArray1OfClassifiedItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP203_HArray1OfClassifiedItem self, Handle_StepAP203_HArray1OfClassifiedItem theHandle) -> Handle_StepAP203_HArray1OfClassifiedItem
        assign(Handle_StepAP203_HArray1OfClassifiedItem self, StepAP203_HArray1OfClassifiedItem thePtr) -> Handle_StepAP203_HArray1OfClassifiedItem
        assign(Handle_StepAP203_HArray1OfClassifiedItem self, Handle_StepAP203_HArray1OfClassifiedItem theHandle) -> Handle_StepAP203_HArray1OfClassifiedItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP203_HArray1OfClassifiedItem self) -> StepAP203_HArray1OfClassifiedItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP203_HArray1OfClassifiedItem self) -> StepAP203_HArray1OfClassifiedItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP203_HArray1OfClassifiedItem self) -> StepAP203_HArray1OfClassifiedItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP203.new_Handle_StepAP203_HArray1OfClassifiedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_DownCast)
    __swig_destroy__ = _StepAP203.delete_Handle_StepAP203_HArray1OfClassifiedItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfClassifiedItem

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP203_HArray1OfClassifiedItem self) -> NCollection_Array1_StepAP203_ClassifiedItem

        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfClassifiedItem

        """
        return _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP203_HArray1OfClassifiedItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepAP203_HArray1OfClassifiedItem self)

        Memory deallocator for transient classes


        """
        return _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP203_HArray1OfClassifiedItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP203_HArray1OfClassifiedItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP203_HArray1OfClassifiedItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP203_HArray1OfClassifiedItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP203_HArray1OfClassifiedItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP203_HArray1OfClassifiedItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP203_HArray1OfClassifiedItem self)

        Increments the reference counter of this object


        """
        return _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP203_HArray1OfClassifiedItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_DecrementRefCounter(self, *args)

Handle_StepAP203_HArray1OfClassifiedItem_swigregister = _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_swigregister
Handle_StepAP203_HArray1OfClassifiedItem_swigregister(Handle_StepAP203_HArray1OfClassifiedItem)

def Handle_StepAP203_HArray1OfClassifiedItem_DownCast(thing):
    return _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_DownCast(thing)
Handle_StepAP203_HArray1OfClassifiedItem_DownCast = _StepAP203.Handle_StepAP203_HArray1OfClassifiedItem_DownCast

class NCollection_Array1_StepAP203_PersonOrganizationItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP203_PersonOrganizationItem self) -> NCollection_Array1< StepAP203_PersonOrganizationItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP203_PersonOrganizationItem self) -> NCollection_Array1< StepAP203_PersonOrganizationItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP203_PersonOrganizationItem self) -> NCollection_Array1< StepAP203_PersonOrganizationItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP203_PersonOrganizationItem self) -> NCollection_Array1< StepAP203_PersonOrganizationItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP203.new_NCollection_Array1_StepAP203_PersonOrganizationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP203_PersonOrganizationItem self, StepAP203_PersonOrganizationItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP203_PersonOrganizationItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP203_PersonOrganizationItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP203_PersonOrganizationItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP203_PersonOrganizationItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP203_PersonOrganizationItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP203_PersonOrganizationItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP203_PersonOrganizationItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP203_PersonOrganizationItem self, NCollection_Array1_StepAP203_PersonOrganizationItem theOther) -> NCollection_Array1_StepAP203_PersonOrganizationItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP203_PersonOrganizationItem self, NCollection_Array1_StepAP203_PersonOrganizationItem theOther) -> NCollection_Array1_StepAP203_PersonOrganizationItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP203_PersonOrganizationItem self, NCollection_Array1_StepAP203_PersonOrganizationItem theOther) -> NCollection_Array1_StepAP203_PersonOrganizationItem
        assign(NCollection_Array1_StepAP203_PersonOrganizationItem self, NCollection_Array1_StepAP203_PersonOrganizationItem theOther) -> NCollection_Array1_StepAP203_PersonOrganizationItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP203_PersonOrganizationItem self) -> StepAP203_PersonOrganizationItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP203_PersonOrganizationItem self) -> StepAP203_PersonOrganizationItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP203_PersonOrganizationItem self, Standard_Integer const theIndex) -> StepAP203_PersonOrganizationItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP203_PersonOrganizationItem self, Standard_Integer const theIndex, StepAP203_PersonOrganizationItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP203_PersonOrganizationItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem_Resize(self, *args)

    __swig_destroy__ = _StepAP203.delete_NCollection_Array1_StepAP203_PersonOrganizationItem
NCollection_Array1_StepAP203_PersonOrganizationItem_swigregister = _StepAP203.NCollection_Array1_StepAP203_PersonOrganizationItem_swigregister
NCollection_Array1_StepAP203_PersonOrganizationItem_swigregister(NCollection_Array1_StepAP203_PersonOrganizationItem)


try:
	StepAP203_Array1OfPersonOrganizationItem = NCollection_Array1_StepAP203_PersonOrganizationItem
except NameError:
	pass # does not exist, probably ignored

class NCollection_Array1_StepAP203_WorkItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP203_WorkItem self) -> NCollection_Array1< StepAP203_WorkItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_WorkItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP203_WorkItem self) -> NCollection_Array1< StepAP203_WorkItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_WorkItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP203_WorkItem self) -> NCollection_Array1< StepAP203_WorkItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_WorkItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP203_WorkItem self) -> NCollection_Array1< StepAP203_WorkItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_WorkItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP203.new_NCollection_Array1_StepAP203_WorkItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP203_WorkItem self, StepAP203_WorkItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_WorkItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP203_WorkItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_WorkItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP203_WorkItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_WorkItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP203_WorkItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_WorkItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP203_WorkItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_WorkItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP203_WorkItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_WorkItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP203_WorkItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_WorkItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP203_WorkItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_WorkItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP203_WorkItem self, NCollection_Array1_StepAP203_WorkItem theOther) -> NCollection_Array1_StepAP203_WorkItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_WorkItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP203_WorkItem self, NCollection_Array1_StepAP203_WorkItem theOther) -> NCollection_Array1_StepAP203_WorkItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_WorkItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP203_WorkItem self, NCollection_Array1_StepAP203_WorkItem theOther) -> NCollection_Array1_StepAP203_WorkItem
        assign(NCollection_Array1_StepAP203_WorkItem self, NCollection_Array1_StepAP203_WorkItem theOther) -> NCollection_Array1_StepAP203_WorkItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_WorkItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_WorkItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP203_WorkItem self) -> StepAP203_WorkItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_WorkItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_WorkItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP203_WorkItem self) -> StepAP203_WorkItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_WorkItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_WorkItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP203_WorkItem self, Standard_Integer const theIndex) -> StepAP203_WorkItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_WorkItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_WorkItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_WorkItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP203_WorkItem self, Standard_Integer const theIndex, StepAP203_WorkItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_WorkItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP203_WorkItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP203.NCollection_Array1_StepAP203_WorkItem_Resize(self, *args)

    __swig_destroy__ = _StepAP203.delete_NCollection_Array1_StepAP203_WorkItem
NCollection_Array1_StepAP203_WorkItem_swigregister = _StepAP203.NCollection_Array1_StepAP203_WorkItem_swigregister
NCollection_Array1_StepAP203_WorkItem_swigregister(NCollection_Array1_StepAP203_WorkItem)


try:
	StepAP203_Array1OfWorkItem = NCollection_Array1_StepAP203_WorkItem
except NameError:
	pass # does not exist, probably ignored

class StepAP203_HArray1OfWorkItem(NCollection_Array1_StepAP203_WorkItem, Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP203_HArray1OfWorkItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP203_HArray1OfWorkItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP203_HArray1OfWorkItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP203_HArray1OfWorkItem
        __init__(StepAP203_HArray1OfWorkItem self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP203_WorkItem theValue) -> StepAP203_HArray1OfWorkItem
        __init__(StepAP203_HArray1OfWorkItem self, NCollection_Array1_StepAP203_WorkItem theOther) -> StepAP203_HArray1OfWorkItem

        :type theOther: OCC.wrapper.StepAP203.StepAP203_Array1OfWorkItem

        """
        this = _StepAP203.new_StepAP203_HArray1OfWorkItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfWorkItem

        """
        res = _StepAP203.StepAP203_HArray1OfWorkItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP203_HArray1OfWorkItem self) -> NCollection_Array1_StepAP203_WorkItem

        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfWorkItem

        """
        return _StepAP203.StepAP203_HArray1OfWorkItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP203.StepAP203_HArray1OfWorkItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP203.StepAP203_HArray1OfWorkItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.StepAP203_HArray1OfWorkItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP203.delete_StepAP203_HArray1OfWorkItem
StepAP203_HArray1OfWorkItem_swigregister = _StepAP203.StepAP203_HArray1OfWorkItem_swigregister
StepAP203_HArray1OfWorkItem_swigregister(StepAP203_HArray1OfWorkItem)

def StepAP203_HArray1OfWorkItem_get_type_name(*args):
    """
    StepAP203_HArray1OfWorkItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP203.StepAP203_HArray1OfWorkItem_get_type_name(*args)

def StepAP203_HArray1OfWorkItem_get_type_descriptor(*args):
    """
    StepAP203_HArray1OfWorkItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP203.StepAP203_HArray1OfWorkItem_get_type_descriptor(*args)

class NCollection_Array1_StepAP203_ClassifiedItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP203_ClassifiedItem self) -> NCollection_Array1< StepAP203_ClassifiedItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP203_ClassifiedItem self) -> NCollection_Array1< StepAP203_ClassifiedItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP203_ClassifiedItem self) -> NCollection_Array1< StepAP203_ClassifiedItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP203_ClassifiedItem self) -> NCollection_Array1< StepAP203_ClassifiedItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP203.new_NCollection_Array1_StepAP203_ClassifiedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP203_ClassifiedItem self, StepAP203_ClassifiedItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP203_ClassifiedItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP203_ClassifiedItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP203_ClassifiedItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP203_ClassifiedItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP203_ClassifiedItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP203_ClassifiedItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP203_ClassifiedItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP203_ClassifiedItem self, NCollection_Array1_StepAP203_ClassifiedItem theOther) -> NCollection_Array1_StepAP203_ClassifiedItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP203_ClassifiedItem self, NCollection_Array1_StepAP203_ClassifiedItem theOther) -> NCollection_Array1_StepAP203_ClassifiedItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP203_ClassifiedItem self, NCollection_Array1_StepAP203_ClassifiedItem theOther) -> NCollection_Array1_StepAP203_ClassifiedItem
        assign(NCollection_Array1_StepAP203_ClassifiedItem self, NCollection_Array1_StepAP203_ClassifiedItem theOther) -> NCollection_Array1_StepAP203_ClassifiedItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP203_ClassifiedItem self) -> StepAP203_ClassifiedItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP203_ClassifiedItem self) -> StepAP203_ClassifiedItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP203_ClassifiedItem self, Standard_Integer const theIndex) -> StepAP203_ClassifiedItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP203_ClassifiedItem self, Standard_Integer const theIndex, StepAP203_ClassifiedItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP203_ClassifiedItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem_Resize(self, *args)

    __swig_destroy__ = _StepAP203.delete_NCollection_Array1_StepAP203_ClassifiedItem
NCollection_Array1_StepAP203_ClassifiedItem_swigregister = _StepAP203.NCollection_Array1_StepAP203_ClassifiedItem_swigregister
NCollection_Array1_StepAP203_ClassifiedItem_swigregister(NCollection_Array1_StepAP203_ClassifiedItem)


try:
	StepAP203_Array1OfClassifiedItem = NCollection_Array1_StepAP203_ClassifiedItem
except NameError:
	pass # does not exist, probably ignored

class Handle_StepAP203_Change(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP203_Change self)

        Nullify the handle


        """
        return _StepAP203.Handle_StepAP203_Change_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP203_Change self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP203.Handle_StepAP203_Change_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP203_Change self, StepAP203_Change thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP203.Handle_StepAP203_Change_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP203_Change self, Handle_StepAP203_Change theHandle) -> Handle_StepAP203_Change
        assign(Handle_StepAP203_Change self, StepAP203_Change thePtr) -> Handle_StepAP203_Change
        assign(Handle_StepAP203_Change self, Handle_StepAP203_Change theHandle) -> Handle_StepAP203_Change

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP203.Handle_StepAP203_Change_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP203_Change self) -> StepAP203_Change

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_Change_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP203_Change self) -> StepAP203_Change

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_Change___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP203_Change self) -> StepAP203_Change

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP203.Handle_StepAP203_Change___ref__(self, *args)


    def __hash__(self):
        return _StepAP203.Handle_StepAP203_Change___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP203.Handle_StepAP203_Change___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP203.new_Handle_StepAP203_Change(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP203.Handle_StepAP203_Change_DownCast)
    __swig_destroy__ = _StepAP203.delete_Handle_StepAP203_Change

    def Init(self, *args):
        """
        Init(Handle_StepAP203_Change self, Handle_StepBasic_Action aActionAssignment_AssignedAction, Handle_StepAP203_HArray1OfWorkItem aItems)

        Initialize all fields (own and inherited)

        :type aActionAssignment_AssignedAction: OCC.wrapper.StepBasic.Handle_StepBasic_Action
        :type aItems: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfWorkItem

        """
        return _StepAP203.Handle_StepAP203_Change_Init(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP203_Change self) -> Handle_StepAP203_HArray1OfWorkItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfWorkItem

        """
        return _StepAP203.Handle_StepAP203_Change_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP203_Change self, Handle_StepAP203_HArray1OfWorkItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfWorkItem

        """
        return _StepAP203.Handle_StepAP203_Change_SetItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP203_Change self) -> char const *

        :rtype: const char *

        """
        return _StepAP203.Handle_StepAP203_Change_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_Change_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_Change_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def AssignedAction(self, *args):
        """
        AssignedAction(Handle_StepAP203_Change self) -> Handle_StepBasic_Action

        Returns field AssignedAction

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Action

        """
        return _StepAP203.Handle_StepAP203_Change_AssignedAction(self, *args)


    def SetAssignedAction(self, *args):
        """
        SetAssignedAction(Handle_StepAP203_Change self, Handle_StepBasic_Action AssignedAction)

        Set field AssignedAction

        :type AssignedAction: OCC.wrapper.StepBasic.Handle_StepBasic_Action

        """
        return _StepAP203.Handle_StepAP203_Change_SetAssignedAction(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP203_Change self)

        Memory deallocator for transient classes


        """
        return _StepAP203.Handle_StepAP203_Change_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP203_Change self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP203_Change self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_Change_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP203_Change self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP203_Change self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_Change_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP203_Change self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP203.Handle_StepAP203_Change_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP203_Change self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_Change_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP203_Change self)

        Increments the reference counter of this object


        """
        return _StepAP203.Handle_StepAP203_Change_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP203_Change self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_Change_DecrementRefCounter(self, *args)

Handle_StepAP203_Change_swigregister = _StepAP203.Handle_StepAP203_Change_swigregister
Handle_StepAP203_Change_swigregister(Handle_StepAP203_Change)

def Handle_StepAP203_Change_DownCast(thing):
    return _StepAP203.Handle_StepAP203_Change_DownCast(thing)
Handle_StepAP203_Change_DownCast = _StepAP203.Handle_StepAP203_Change_DownCast

class NCollection_Array1_StepAP203_DateTimeItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP203_DateTimeItem self) -> NCollection_Array1< StepAP203_DateTimeItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_DateTimeItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP203_DateTimeItem self) -> NCollection_Array1< StepAP203_DateTimeItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_DateTimeItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP203_DateTimeItem self) -> NCollection_Array1< StepAP203_DateTimeItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_DateTimeItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP203_DateTimeItem self) -> NCollection_Array1< StepAP203_DateTimeItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_DateTimeItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP203.new_NCollection_Array1_StepAP203_DateTimeItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP203_DateTimeItem self, StepAP203_DateTimeItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_DateTimeItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP203_DateTimeItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_DateTimeItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP203_DateTimeItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_DateTimeItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP203_DateTimeItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_DateTimeItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP203_DateTimeItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_DateTimeItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP203_DateTimeItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_DateTimeItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP203_DateTimeItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_DateTimeItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP203_DateTimeItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_DateTimeItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP203_DateTimeItem self, NCollection_Array1_StepAP203_DateTimeItem theOther) -> NCollection_Array1_StepAP203_DateTimeItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_DateTimeItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP203_DateTimeItem self, NCollection_Array1_StepAP203_DateTimeItem theOther) -> NCollection_Array1_StepAP203_DateTimeItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_DateTimeItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP203_DateTimeItem self, NCollection_Array1_StepAP203_DateTimeItem theOther) -> NCollection_Array1_StepAP203_DateTimeItem
        assign(NCollection_Array1_StepAP203_DateTimeItem self, NCollection_Array1_StepAP203_DateTimeItem theOther) -> NCollection_Array1_StepAP203_DateTimeItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_DateTimeItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_DateTimeItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP203_DateTimeItem self) -> StepAP203_DateTimeItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_DateTimeItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_DateTimeItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP203_DateTimeItem self) -> StepAP203_DateTimeItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_DateTimeItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_DateTimeItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP203_DateTimeItem self, Standard_Integer const theIndex) -> StepAP203_DateTimeItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_DateTimeItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_DateTimeItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_DateTimeItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP203_DateTimeItem self, Standard_Integer const theIndex, StepAP203_DateTimeItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_DateTimeItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP203_DateTimeItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP203.NCollection_Array1_StepAP203_DateTimeItem_Resize(self, *args)

    __swig_destroy__ = _StepAP203.delete_NCollection_Array1_StepAP203_DateTimeItem
NCollection_Array1_StepAP203_DateTimeItem_swigregister = _StepAP203.NCollection_Array1_StepAP203_DateTimeItem_swigregister
NCollection_Array1_StepAP203_DateTimeItem_swigregister(NCollection_Array1_StepAP203_DateTimeItem)


try:
	StepAP203_Array1OfDateTimeItem = NCollection_Array1_StepAP203_DateTimeItem
except NameError:
	pass # does not exist, probably ignored

class Handle_StepAP203_HArray1OfWorkItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP203_HArray1OfWorkItem self)

        Nullify the handle


        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP203_HArray1OfWorkItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP203_HArray1OfWorkItem self, StepAP203_HArray1OfWorkItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP203_HArray1OfWorkItem self, Handle_StepAP203_HArray1OfWorkItem theHandle) -> Handle_StepAP203_HArray1OfWorkItem
        assign(Handle_StepAP203_HArray1OfWorkItem self, StepAP203_HArray1OfWorkItem thePtr) -> Handle_StepAP203_HArray1OfWorkItem
        assign(Handle_StepAP203_HArray1OfWorkItem self, Handle_StepAP203_HArray1OfWorkItem theHandle) -> Handle_StepAP203_HArray1OfWorkItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP203_HArray1OfWorkItem self) -> StepAP203_HArray1OfWorkItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP203_HArray1OfWorkItem self) -> StepAP203_HArray1OfWorkItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP203_HArray1OfWorkItem self) -> StepAP203_HArray1OfWorkItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP203.Handle_StepAP203_HArray1OfWorkItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP203.new_Handle_StepAP203_HArray1OfWorkItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP203.Handle_StepAP203_HArray1OfWorkItem_DownCast)
    __swig_destroy__ = _StepAP203.delete_Handle_StepAP203_HArray1OfWorkItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfWorkItem

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfWorkItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP203_HArray1OfWorkItem self) -> NCollection_Array1_StepAP203_WorkItem

        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfWorkItem

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP203_HArray1OfWorkItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfWorkItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfWorkItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def begin(self, *args):
        """
        begin(Handle_StepAP203_HArray1OfWorkItem self) -> NCollection_Array1< StepAP203_WorkItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_begin(self, *args)


    def end(self, *args):
        """
        end(Handle_StepAP203_HArray1OfWorkItem self) -> NCollection_Array1< StepAP203_WorkItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(Handle_StepAP203_HArray1OfWorkItem self) -> NCollection_Array1< StepAP203_WorkItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(Handle_StepAP203_HArray1OfWorkItem self) -> NCollection_Array1< StepAP203_WorkItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_cend(self, *args)


    def Init(self, *args):
        """
        Init(Handle_StepAP203_HArray1OfWorkItem self, StepAP203_WorkItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(Handle_StepAP203_HArray1OfWorkItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(Handle_StepAP203_HArray1OfWorkItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_StepAP203_HArray1OfWorkItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(Handle_StepAP203_HArray1OfWorkItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(Handle_StepAP203_HArray1OfWorkItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(Handle_StepAP203_HArray1OfWorkItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(Handle_StepAP203_HArray1OfWorkItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(Handle_StepAP203_HArray1OfWorkItem self, NCollection_Array1_StepAP203_WorkItem theOther) -> NCollection_Array1_StepAP203_WorkItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(Handle_StepAP203_HArray1OfWorkItem self, NCollection_Array1_StepAP203_WorkItem theOther) -> NCollection_Array1_StepAP203_WorkItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_Move(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfWorkItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(Handle_StepAP203_HArray1OfWorkItem self) -> StepAP203_WorkItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfWorkItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(Handle_StepAP203_HArray1OfWorkItem self) -> StepAP203_WorkItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfWorkItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfWorkItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfWorkItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(Handle_StepAP203_HArray1OfWorkItem self, Standard_Integer const theIndex) -> StepAP203_WorkItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_ChangeValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_StepAP203_HArray1OfWorkItem self, Standard_Integer const theIndex, StepAP203_WorkItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(Handle_StepAP203_HArray1OfWorkItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_Resize(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP203_HArray1OfWorkItem self)

        Memory deallocator for transient classes


        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP203_HArray1OfWorkItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP203_HArray1OfWorkItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP203_HArray1OfWorkItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP203_HArray1OfWorkItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP203_HArray1OfWorkItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP203_HArray1OfWorkItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP203_HArray1OfWorkItem self)

        Increments the reference counter of this object


        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP203_HArray1OfWorkItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_DecrementRefCounter(self, *args)

Handle_StepAP203_HArray1OfWorkItem_swigregister = _StepAP203.Handle_StepAP203_HArray1OfWorkItem_swigregister
Handle_StepAP203_HArray1OfWorkItem_swigregister(Handle_StepAP203_HArray1OfWorkItem)

def Handle_StepAP203_HArray1OfWorkItem_DownCast(thing):
    return _StepAP203.Handle_StepAP203_HArray1OfWorkItem_DownCast(thing)
Handle_StepAP203_HArray1OfWorkItem_DownCast = _StepAP203.Handle_StepAP203_HArray1OfWorkItem_DownCast

class StepAP203_SpecifiedItem(StepData.StepData_SelectType):
    """Representation of STEP SELECT type SpecifiedItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP203_SpecifiedItem self) -> StepAP203_SpecifiedItem

        Empty constructor


        """
        this = _StepAP203.new_StepAP203_SpecifiedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP203_SpecifiedItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a kind of SpecifiedItem select type
        1 -> ProductDefinition from StepBasic
        2 -> ShapeAspect from StepRepr
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.StepAP203_SpecifiedItem_CaseNum(self, *args)


    def ProductDefinition(self, *args):
        """
        ProductDefinition(StepAP203_SpecifiedItem self) -> Handle_StepBasic_ProductDefinition

        Returns Value as ProductDefinition (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepAP203.StepAP203_SpecifiedItem_ProductDefinition(self, *args)


    def ShapeAspect(self, *args):
        """
        ShapeAspect(StepAP203_SpecifiedItem self) -> Handle_StepRepr_ShapeAspect

        Returns Value as ShapeAspect (or Null if another type)

        :rtype: OCC.wrapper.StepAP203.Handle_StepRepr_ShapeAspect

        """
        return _StepAP203.StepAP203_SpecifiedItem_ShapeAspect(self, *args)

    __swig_destroy__ = _StepAP203.delete_StepAP203_SpecifiedItem
StepAP203_SpecifiedItem_swigregister = _StepAP203.StepAP203_SpecifiedItem_swigregister
StepAP203_SpecifiedItem_swigregister(StepAP203_SpecifiedItem)

class Handle_StepAP203_HArray1OfApprovedItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP203_HArray1OfApprovedItem self)

        Nullify the handle


        """
        return _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP203_HArray1OfApprovedItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP203_HArray1OfApprovedItem self, StepAP203_HArray1OfApprovedItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP203_HArray1OfApprovedItem self, Handle_StepAP203_HArray1OfApprovedItem theHandle) -> Handle_StepAP203_HArray1OfApprovedItem
        assign(Handle_StepAP203_HArray1OfApprovedItem self, StepAP203_HArray1OfApprovedItem thePtr) -> Handle_StepAP203_HArray1OfApprovedItem
        assign(Handle_StepAP203_HArray1OfApprovedItem self, Handle_StepAP203_HArray1OfApprovedItem theHandle) -> Handle_StepAP203_HArray1OfApprovedItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP203_HArray1OfApprovedItem self) -> StepAP203_HArray1OfApprovedItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP203_HArray1OfApprovedItem self) -> StepAP203_HArray1OfApprovedItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfApprovedItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP203_HArray1OfApprovedItem self) -> StepAP203_HArray1OfApprovedItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP203.Handle_StepAP203_HArray1OfApprovedItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP203.Handle_StepAP203_HArray1OfApprovedItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP203.Handle_StepAP203_HArray1OfApprovedItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP203.new_Handle_StepAP203_HArray1OfApprovedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP203.Handle_StepAP203_HArray1OfApprovedItem_DownCast)
    __swig_destroy__ = _StepAP203.delete_Handle_StepAP203_HArray1OfApprovedItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfApprovedItem

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP203_HArray1OfApprovedItem self) -> NCollection_Array1_StepAP203_ApprovedItem

        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfApprovedItem

        """
        return _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP203_HArray1OfApprovedItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepAP203_HArray1OfApprovedItem self)

        Memory deallocator for transient classes


        """
        return _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP203_HArray1OfApprovedItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP203_HArray1OfApprovedItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP203_HArray1OfApprovedItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP203_HArray1OfApprovedItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP203_HArray1OfApprovedItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP203_HArray1OfApprovedItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP203_HArray1OfApprovedItem self)

        Increments the reference counter of this object


        """
        return _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP203_HArray1OfApprovedItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_DecrementRefCounter(self, *args)

Handle_StepAP203_HArray1OfApprovedItem_swigregister = _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_swigregister
Handle_StepAP203_HArray1OfApprovedItem_swigregister(Handle_StepAP203_HArray1OfApprovedItem)

def Handle_StepAP203_HArray1OfApprovedItem_DownCast(thing):
    return _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_DownCast(thing)
Handle_StepAP203_HArray1OfApprovedItem_DownCast = _StepAP203.Handle_StepAP203_HArray1OfApprovedItem_DownCast

class Handle_StepAP203_CcDesignApproval(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP203_CcDesignApproval self)

        Nullify the handle


        """
        return _StepAP203.Handle_StepAP203_CcDesignApproval_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP203_CcDesignApproval self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP203.Handle_StepAP203_CcDesignApproval_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP203_CcDesignApproval self, StepAP203_CcDesignApproval thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP203.Handle_StepAP203_CcDesignApproval_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP203_CcDesignApproval self, Handle_StepAP203_CcDesignApproval theHandle) -> Handle_StepAP203_CcDesignApproval
        assign(Handle_StepAP203_CcDesignApproval self, StepAP203_CcDesignApproval thePtr) -> Handle_StepAP203_CcDesignApproval
        assign(Handle_StepAP203_CcDesignApproval self, Handle_StepAP203_CcDesignApproval theHandle) -> Handle_StepAP203_CcDesignApproval

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP203.Handle_StepAP203_CcDesignApproval_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP203_CcDesignApproval self) -> StepAP203_CcDesignApproval

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_CcDesignApproval_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP203_CcDesignApproval self) -> StepAP203_CcDesignApproval

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_CcDesignApproval___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP203_CcDesignApproval self) -> StepAP203_CcDesignApproval

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP203.Handle_StepAP203_CcDesignApproval___ref__(self, *args)


    def __hash__(self):
        return _StepAP203.Handle_StepAP203_CcDesignApproval___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP203.Handle_StepAP203_CcDesignApproval___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP203.new_Handle_StepAP203_CcDesignApproval(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP203.Handle_StepAP203_CcDesignApproval_DownCast)
    __swig_destroy__ = _StepAP203.delete_Handle_StepAP203_CcDesignApproval

    def Init(self, *args):
        """
        Init(Handle_StepAP203_CcDesignApproval self, Handle_StepBasic_Approval aApprovalAssignment_AssignedApproval, Handle_StepAP203_HArray1OfApprovedItem aItems)

        Initialize all fields (own and inherited)

        :type aApprovalAssignment_AssignedApproval: OCC.wrapper.StepBasic.Handle_StepBasic_Approval
        :type aItems: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfApprovedItem

        """
        return _StepAP203.Handle_StepAP203_CcDesignApproval_Init(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP203_CcDesignApproval self) -> Handle_StepAP203_HArray1OfApprovedItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfApprovedItem

        """
        return _StepAP203.Handle_StepAP203_CcDesignApproval_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP203_CcDesignApproval self, Handle_StepAP203_HArray1OfApprovedItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP203.Handle_StepAP203_HArray1OfApprovedItem

        """
        return _StepAP203.Handle_StepAP203_CcDesignApproval_SetItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP203_CcDesignApproval self) -> char const *

        :rtype: const char *

        """
        return _StepAP203.Handle_StepAP203_CcDesignApproval_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_CcDesignApproval_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_CcDesignApproval_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAssignedApproval(self, *args):
        """
        SetAssignedApproval(Handle_StepAP203_CcDesignApproval self, Handle_StepBasic_Approval aAssignedApproval)

        :type aAssignedApproval: OCC.wrapper.StepBasic.Handle_StepBasic_Approval

        """
        return _StepAP203.Handle_StepAP203_CcDesignApproval_SetAssignedApproval(self, *args)


    def AssignedApproval(self, *args):
        """
        AssignedApproval(Handle_StepAP203_CcDesignApproval self) -> Handle_StepBasic_Approval

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Approval

        """
        return _StepAP203.Handle_StepAP203_CcDesignApproval_AssignedApproval(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP203_CcDesignApproval self)

        Memory deallocator for transient classes


        """
        return _StepAP203.Handle_StepAP203_CcDesignApproval_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP203_CcDesignApproval self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP203_CcDesignApproval self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_CcDesignApproval_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP203_CcDesignApproval self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP203_CcDesignApproval self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_CcDesignApproval_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP203_CcDesignApproval self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP203.Handle_StepAP203_CcDesignApproval_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP203_CcDesignApproval self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_CcDesignApproval_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP203_CcDesignApproval self)

        Increments the reference counter of this object


        """
        return _StepAP203.Handle_StepAP203_CcDesignApproval_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP203_CcDesignApproval self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_CcDesignApproval_DecrementRefCounter(self, *args)

Handle_StepAP203_CcDesignApproval_swigregister = _StepAP203.Handle_StepAP203_CcDesignApproval_swigregister
Handle_StepAP203_CcDesignApproval_swigregister(Handle_StepAP203_CcDesignApproval)

def Handle_StepAP203_CcDesignApproval_DownCast(thing):
    return _StepAP203.Handle_StepAP203_CcDesignApproval_DownCast(thing)
Handle_StepAP203_CcDesignApproval_DownCast = _StepAP203.Handle_StepAP203_CcDesignApproval_DownCast

class NCollection_Array1_StepAP203_SpecifiedItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP203_SpecifiedItem self) -> NCollection_Array1< StepAP203_SpecifiedItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP203_SpecifiedItem self) -> NCollection_Array1< StepAP203_SpecifiedItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP203_SpecifiedItem self) -> NCollection_Array1< StepAP203_SpecifiedItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP203_SpecifiedItem self) -> NCollection_Array1< StepAP203_SpecifiedItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP203.new_NCollection_Array1_StepAP203_SpecifiedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP203_SpecifiedItem self, StepAP203_SpecifiedItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP203_SpecifiedItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP203_SpecifiedItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP203_SpecifiedItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP203_SpecifiedItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP203_SpecifiedItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP203_SpecifiedItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP203_SpecifiedItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP203_SpecifiedItem self, NCollection_Array1_StepAP203_SpecifiedItem theOther) -> NCollection_Array1_StepAP203_SpecifiedItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP203_SpecifiedItem self, NCollection_Array1_StepAP203_SpecifiedItem theOther) -> NCollection_Array1_StepAP203_SpecifiedItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP203_SpecifiedItem self, NCollection_Array1_StepAP203_SpecifiedItem theOther) -> NCollection_Array1_StepAP203_SpecifiedItem
        assign(NCollection_Array1_StepAP203_SpecifiedItem self, NCollection_Array1_StepAP203_SpecifiedItem theOther) -> NCollection_Array1_StepAP203_SpecifiedItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP203_SpecifiedItem self) -> StepAP203_SpecifiedItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP203_SpecifiedItem self) -> StepAP203_SpecifiedItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP203_SpecifiedItem self, Standard_Integer const theIndex) -> StepAP203_SpecifiedItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP203_SpecifiedItem self, Standard_Integer const theIndex, StepAP203_SpecifiedItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP203_SpecifiedItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem_Resize(self, *args)

    __swig_destroy__ = _StepAP203.delete_NCollection_Array1_StepAP203_SpecifiedItem
NCollection_Array1_StepAP203_SpecifiedItem_swigregister = _StepAP203.NCollection_Array1_StepAP203_SpecifiedItem_swigregister
NCollection_Array1_StepAP203_SpecifiedItem_swigregister(NCollection_Array1_StepAP203_SpecifiedItem)


try:
	StepAP203_Array1OfSpecifiedItem = NCollection_Array1_StepAP203_SpecifiedItem
except NameError:
	pass # does not exist, probably ignored

class Handle_StepAP203_HArray1OfChangeRequestItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP203_HArray1OfChangeRequestItem self)

        Nullify the handle


        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP203_HArray1OfChangeRequestItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP203_HArray1OfChangeRequestItem self, StepAP203_HArray1OfChangeRequestItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP203_HArray1OfChangeRequestItem self, Handle_StepAP203_HArray1OfChangeRequestItem theHandle) -> Handle_StepAP203_HArray1OfChangeRequestItem
        assign(Handle_StepAP203_HArray1OfChangeRequestItem self, StepAP203_HArray1OfChangeRequestItem thePtr) -> Handle_StepAP203_HArray1OfChangeRequestItem
        assign(Handle_StepAP203_HArray1OfChangeRequestItem self, Handle_StepAP203_HArray1OfChangeRequestItem theHandle) -> Handle_StepAP203_HArray1OfChangeRequestItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP203_HArray1OfChangeRequestItem self) -> StepAP203_HArray1OfChangeRequestItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP203_HArray1OfChangeRequestItem self) -> StepAP203_HArray1OfChangeRequestItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP203_HArray1OfChangeRequestItem self) -> StepAP203_HArray1OfChangeRequestItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP203.new_Handle_StepAP203_HArray1OfChangeRequestItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_DownCast)
    __swig_destroy__ = _StepAP203.delete_Handle_StepAP203_HArray1OfChangeRequestItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfChangeRequestItem

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP203_HArray1OfChangeRequestItem self) -> NCollection_Array1_StepAP203_ChangeRequestItem

        :rtype: OCC.wrapper.StepAP203.StepAP203_Array1OfChangeRequestItem

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP203_HArray1OfChangeRequestItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def begin(self, *args):
        """
        begin(Handle_StepAP203_HArray1OfChangeRequestItem self) -> NCollection_Array1< StepAP203_ChangeRequestItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_begin(self, *args)


    def end(self, *args):
        """
        end(Handle_StepAP203_HArray1OfChangeRequestItem self) -> NCollection_Array1< StepAP203_ChangeRequestItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(Handle_StepAP203_HArray1OfChangeRequestItem self) -> NCollection_Array1< StepAP203_ChangeRequestItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(Handle_StepAP203_HArray1OfChangeRequestItem self) -> NCollection_Array1< StepAP203_ChangeRequestItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_cend(self, *args)


    def Init(self, *args):
        """
        Init(Handle_StepAP203_HArray1OfChangeRequestItem self, StepAP203_ChangeRequestItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(Handle_StepAP203_HArray1OfChangeRequestItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(Handle_StepAP203_HArray1OfChangeRequestItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_StepAP203_HArray1OfChangeRequestItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(Handle_StepAP203_HArray1OfChangeRequestItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(Handle_StepAP203_HArray1OfChangeRequestItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(Handle_StepAP203_HArray1OfChangeRequestItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(Handle_StepAP203_HArray1OfChangeRequestItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(Handle_StepAP203_HArray1OfChangeRequestItem self, NCollection_Array1_StepAP203_ChangeRequestItem theOther) -> NCollection_Array1_StepAP203_ChangeRequestItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(Handle_StepAP203_HArray1OfChangeRequestItem self, NCollection_Array1_StepAP203_ChangeRequestItem theOther) -> NCollection_Array1_StepAP203_ChangeRequestItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_Move(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(Handle_StepAP203_HArray1OfChangeRequestItem self) -> StepAP203_ChangeRequestItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(Handle_StepAP203_HArray1OfChangeRequestItem self) -> StepAP203_ChangeRequestItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(Handle_StepAP203_HArray1OfChangeRequestItem self, Standard_Integer const theIndex) -> StepAP203_ChangeRequestItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_ChangeValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_StepAP203_HArray1OfChangeRequestItem self, Standard_Integer const theIndex, StepAP203_ChangeRequestItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(Handle_StepAP203_HArray1OfChangeRequestItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_Resize(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP203_HArray1OfChangeRequestItem self)

        Memory deallocator for transient classes


        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP203_HArray1OfChangeRequestItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP203_HArray1OfChangeRequestItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP203_HArray1OfChangeRequestItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP203_HArray1OfChangeRequestItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP203_HArray1OfChangeRequestItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP203_HArray1OfChangeRequestItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP203_HArray1OfChangeRequestItem self)

        Increments the reference counter of this object


        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP203_HArray1OfChangeRequestItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_DecrementRefCounter(self, *args)

Handle_StepAP203_HArray1OfChangeRequestItem_swigregister = _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_swigregister
Handle_StepAP203_HArray1OfChangeRequestItem_swigregister(Handle_StepAP203_HArray1OfChangeRequestItem)

def Handle_StepAP203_HArray1OfChangeRequestItem_DownCast(thing):
    return _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_DownCast(thing)
Handle_StepAP203_HArray1OfChangeRequestItem_DownCast = _StepAP203.Handle_StepAP203_HArray1OfChangeRequestItem_DownCast



