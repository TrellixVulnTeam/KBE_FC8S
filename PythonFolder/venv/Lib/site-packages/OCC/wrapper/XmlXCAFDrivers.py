# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XmlXCAFDrivers')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XmlXCAFDrivers')
    _XmlXCAFDrivers = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XmlXCAFDrivers', [dirname(__file__)])
        except ImportError:
            import _XmlXCAFDrivers
            return _XmlXCAFDrivers
        try:
            _mod = imp.load_module('_XmlXCAFDrivers', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XmlXCAFDrivers = swig_import_helper()
    del swig_import_helper
else:
    import _XmlXCAFDrivers
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XmlXCAFDrivers.delete_SwigPyIterator

    def value(self):
        return _XmlXCAFDrivers.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _XmlXCAFDrivers.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _XmlXCAFDrivers.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _XmlXCAFDrivers.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _XmlXCAFDrivers.SwigPyIterator_equal(self, x)

    def copy(self):
        return _XmlXCAFDrivers.SwigPyIterator_copy(self)

    def next(self):
        return _XmlXCAFDrivers.SwigPyIterator_next(self)

    def __next__(self):
        return _XmlXCAFDrivers.SwigPyIterator___next__(self)

    def previous(self):
        return _XmlXCAFDrivers.SwigPyIterator_previous(self)

    def advance(self, n):
        return _XmlXCAFDrivers.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _XmlXCAFDrivers.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _XmlXCAFDrivers.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _XmlXCAFDrivers.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _XmlXCAFDrivers.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _XmlXCAFDrivers.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _XmlXCAFDrivers.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XmlXCAFDrivers.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XmlXCAFDrivers.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_XmlXCAFDrivers.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _XmlXCAFDrivers.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XmlXCAFDrivers.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlXCAFDrivers.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _XmlXCAFDrivers.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _XmlXCAFDrivers.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _XmlXCAFDrivers.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XmlXCAFDrivers.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_XmlXCAFDrivers.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _XmlXCAFDrivers.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XmlXCAFDrivers.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlXCAFDrivers.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _XmlXCAFDrivers.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _XmlXCAFDrivers.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _XmlXCAFDrivers.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _XmlXCAFDrivers.ptr_to_number(item)
ptr_to_number = _XmlXCAFDrivers.ptr_to_number

def HashCode(*args):
    return _XmlXCAFDrivers.HashCode(*args)
HashCode = _XmlXCAFDrivers.HashCode

def ptr_equal(a, b):
    return _XmlXCAFDrivers.ptr_equal(a, b)
ptr_equal = _XmlXCAFDrivers.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XmlDrivers
else:
    import XmlDrivers
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDocStd
else:
    import TDocStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDF
else:
    import CDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDM
else:
    import CDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Resource
else:
    import Resource
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PCDM
else:
    import PCDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import LDOM
else:
    import LDOM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Storage
else:
    import Storage
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XmlObjMgt
else:
    import XmlObjMgt
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XmlMDF
else:
    import XmlMDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XmlLDrivers
else:
    import XmlLDrivers
del _swig_python_version_info
class XmlXCAFDrivers_DocumentRetrievalDriver(XmlDrivers.XmlDrivers_DocumentRetrievalDriver):
    """retrieval driver of a XS document"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlXCAFDrivers_DocumentRetrievalDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlXCAFDrivers_DocumentRetrievalDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlXCAFDrivers_DocumentRetrievalDriver self) -> XmlXCAFDrivers_DocumentRetrievalDriver

        retrieval driver of a XS document
        """
        this = _XmlXCAFDrivers.new_XmlXCAFDrivers_DocumentRetrievalDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def AttributeDrivers(self, *args):
        """
        AttributeDrivers(XmlXCAFDrivers_DocumentRetrievalDriver self, Handle_Message_Messenger theMsgDriver) -> Handle_XmlMDF_ADriverTable

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable

        """
        return _XmlXCAFDrivers.XmlXCAFDrivers_DocumentRetrievalDriver_AttributeDrivers(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlXCAFDrivers.XmlXCAFDrivers_DocumentRetrievalDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlXCAFDrivers.XmlXCAFDrivers_DocumentRetrievalDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlXCAFDrivers.XmlXCAFDrivers_DocumentRetrievalDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlXCAFDrivers.delete_XmlXCAFDrivers_DocumentRetrievalDriver
XmlXCAFDrivers_DocumentRetrievalDriver_swigregister = _XmlXCAFDrivers.XmlXCAFDrivers_DocumentRetrievalDriver_swigregister
XmlXCAFDrivers_DocumentRetrievalDriver_swigregister(XmlXCAFDrivers_DocumentRetrievalDriver)

def XmlXCAFDrivers_DocumentRetrievalDriver_get_type_name(*args):
    """
    XmlXCAFDrivers_DocumentRetrievalDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlXCAFDrivers.XmlXCAFDrivers_DocumentRetrievalDriver_get_type_name(*args)

def XmlXCAFDrivers_DocumentRetrievalDriver_get_type_descriptor(*args):
    """
    XmlXCAFDrivers_DocumentRetrievalDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlXCAFDrivers.XmlXCAFDrivers_DocumentRetrievalDriver_get_type_descriptor(*args)

class Handle_XmlXCAFDrivers_DocumentRetrievalDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self)

        Nullify the handle


        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self, XmlXCAFDrivers_DocumentRetrievalDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self, Handle_XmlXCAFDrivers_DocumentRetrievalDriver theHandle) -> Handle_XmlXCAFDrivers_DocumentRetrievalDriver
        assign(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self, XmlXCAFDrivers_DocumentRetrievalDriver thePtr) -> Handle_XmlXCAFDrivers_DocumentRetrievalDriver
        assign(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self, Handle_XmlXCAFDrivers_DocumentRetrievalDriver theHandle) -> Handle_XmlXCAFDrivers_DocumentRetrievalDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self) -> XmlXCAFDrivers_DocumentRetrievalDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self) -> XmlXCAFDrivers_DocumentRetrievalDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self) -> XmlXCAFDrivers_DocumentRetrievalDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlXCAFDrivers.new_Handle_XmlXCAFDrivers_DocumentRetrievalDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_DownCast)
    __swig_destroy__ = _XmlXCAFDrivers.delete_Handle_XmlXCAFDrivers_DocumentRetrievalDriver

    def AttributeDrivers(self, *args):
        """
        AttributeDrivers(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self, Handle_Message_Messenger theMsgDriver) -> Handle_XmlMDF_ADriverTable

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_AttributeDrivers(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ReadShapeSection(self, *args):
        """
        ReadShapeSection(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self, LDOM_Element thePDoc, Handle_Message_Messenger theMsgDriver) -> Handle_XmlMDF_ADriver

        :type thePDoc: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriver

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_ReadShapeSection(self, *args)


    def ShapeSetCleaning(self, *args):
        """
        ShapeSetCleaning(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self, Handle_XmlMDF_ADriver theDriver)

        :type theDriver: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriver

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_ShapeSetCleaning(self, *args)


    def PropagateDocumentVersion(self, *args):
        """
        PropagateDocumentVersion(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self, Standard_Integer const theDocVersion)

        :type theDocVersion: int

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_PropagateDocumentVersion(self, *args)


    def CreateDocument(self, *args):
        """
        CreateDocument(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self) -> Handle_CDM_Document

        :rtype: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_CreateDocument(self, *args)


    def Read(self, *args):
        """
        Read(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self, TCollection_ExtendedString theFileName, Handle_CDM_Document theNewDocument, Handle_CDM_Application theApplication)
        Read(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self, Standard_IStream & theIStream, Handle_Storage_Data theStorageData, Handle_CDM_Document theDoc, Handle_CDM_Application theApplication)

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type theStorageData: OCC.wrapper.Storage.Handle_Storage_Data
        :type theDoc: OCC.wrapper.CDM.Handle_CDM_Document
        :type theApplication: OCC.wrapper.CDM.Handle_CDM_Application

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_Read(self, *args)


    def DocumentVersion(self, *args):
        """
        DocumentVersion(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self, TCollection_ExtendedString theFileName, Handle_Message_Messenger theMsgDriver) -> Standard_Integer

        :type theFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_DocumentVersion(self, *args)


    def ReferenceCounter(self, *args):
        """
        ReferenceCounter(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self, TCollection_ExtendedString theFileName, Handle_Message_Messenger theMsgDriver) -> Standard_Integer

        :type theFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_ReferenceCounter(self, *args)


    def SetFormat(self, *args):
        """
        SetFormat(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self, TCollection_ExtendedString aformat)

        :type aformat: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_SetFormat(self, *args)


    def GetFormat(self, *args):
        """
        GetFormat(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self) -> TCollection_ExtendedString

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_GetFormat(self, *args)


    def GetStatus(self, *args):
        """
        GetStatus(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self) -> PCDM_ReaderStatus

        :rtype: OCC.wrapper.PCDM.PCDM_ReaderStatus

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_GetStatus(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self)

        Memory deallocator for transient classes


        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self)

        Increments the reference counter of this object


        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlXCAFDrivers_DocumentRetrievalDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_DecrementRefCounter(self, *args)

Handle_XmlXCAFDrivers_DocumentRetrievalDriver_swigregister = _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_swigregister
Handle_XmlXCAFDrivers_DocumentRetrievalDriver_swigregister(Handle_XmlXCAFDrivers_DocumentRetrievalDriver)

def Handle_XmlXCAFDrivers_DocumentRetrievalDriver_DownCast(thing):
    return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_DownCast(thing)
Handle_XmlXCAFDrivers_DocumentRetrievalDriver_DownCast = _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentRetrievalDriver_DownCast

class XmlXCAFDrivers_DocumentStorageDriver(XmlDrivers.XmlDrivers_DocumentStorageDriver):
    """storage driver of a  XS document"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlXCAFDrivers_DocumentStorageDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlXCAFDrivers_DocumentStorageDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlXCAFDrivers_DocumentStorageDriver self, TCollection_ExtendedString theCopyright) -> XmlXCAFDrivers_DocumentStorageDriver

        :type theCopyright: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        this = _XmlXCAFDrivers.new_XmlXCAFDrivers_DocumentStorageDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def AttributeDrivers(self, *args):
        """
        AttributeDrivers(XmlXCAFDrivers_DocumentStorageDriver self, Handle_Message_Messenger theMsgDriver) -> Handle_XmlMDF_ADriverTable

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable

        """
        return _XmlXCAFDrivers.XmlXCAFDrivers_DocumentStorageDriver_AttributeDrivers(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlXCAFDrivers.XmlXCAFDrivers_DocumentStorageDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlXCAFDrivers.XmlXCAFDrivers_DocumentStorageDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlXCAFDrivers.XmlXCAFDrivers_DocumentStorageDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlXCAFDrivers.delete_XmlXCAFDrivers_DocumentStorageDriver
XmlXCAFDrivers_DocumentStorageDriver_swigregister = _XmlXCAFDrivers.XmlXCAFDrivers_DocumentStorageDriver_swigregister
XmlXCAFDrivers_DocumentStorageDriver_swigregister(XmlXCAFDrivers_DocumentStorageDriver)

def XmlXCAFDrivers_DocumentStorageDriver_get_type_name(*args):
    """
    XmlXCAFDrivers_DocumentStorageDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlXCAFDrivers.XmlXCAFDrivers_DocumentStorageDriver_get_type_name(*args)

def XmlXCAFDrivers_DocumentStorageDriver_get_type_descriptor(*args):
    """
    XmlXCAFDrivers_DocumentStorageDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlXCAFDrivers.XmlXCAFDrivers_DocumentStorageDriver_get_type_descriptor(*args)

class XmlXCAFDrivers_(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Factory(*args):
        """
        Factory(Standard_GUID aGUID) -> Handle_Standard_Transient

        Depending from the  ID, returns a list of  storage
        or retrieval attribute drivers. Used for plugin.

        Standard data model drivers
        ===========================
        47b0b826-d931-11d1-b5da-00a0c9064368 Transient-Persistent
        47b0b827-d931-11d1-b5da-00a0c9064368 Persistent-Transient

        XCAF data model drivers
        =================================
        ed8793f8-3142-11d4-b9b5-0060b0ee281b Transient-Persistent
        ed8793f9-3142-11d4-b9b5-0060b0ee281b Persistent-Transient
        ed8793fa-3142-11d4-b9b5-0060b0ee281b XCAFSchema

        :type aGUID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _XmlXCAFDrivers.XmlXCAFDrivers__Factory(*args)

    Factory = staticmethod(Factory)

    def DefineFormat(*args):
        """
        DefineFormat(Handle_TDocStd_Application theApp)

        Defines format "XmlXCAF" and registers its read and write drivers
        in the specified application

        :type theApp: OCC.wrapper.TDocStd.Handle_TDocStd_Application

        """
        return _XmlXCAFDrivers.XmlXCAFDrivers__DefineFormat(*args)

    DefineFormat = staticmethod(DefineFormat)

    def __init__(self):
        this = _XmlXCAFDrivers.new_XmlXCAFDrivers_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlXCAFDrivers.delete_XmlXCAFDrivers_
XmlXCAFDrivers__swigregister = _XmlXCAFDrivers.XmlXCAFDrivers__swigregister
XmlXCAFDrivers__swigregister(XmlXCAFDrivers_)

def XmlXCAFDrivers__Factory(*args):
    """
    XmlXCAFDrivers__Factory(Standard_GUID aGUID) -> Handle_Standard_Transient

    Depending from the  ID, returns a list of  storage
    or retrieval attribute drivers. Used for plugin.

    Standard data model drivers
    ===========================
    47b0b826-d931-11d1-b5da-00a0c9064368 Transient-Persistent
    47b0b827-d931-11d1-b5da-00a0c9064368 Persistent-Transient

    XCAF data model drivers
    =================================
    ed8793f8-3142-11d4-b9b5-0060b0ee281b Transient-Persistent
    ed8793f9-3142-11d4-b9b5-0060b0ee281b Persistent-Transient
    ed8793fa-3142-11d4-b9b5-0060b0ee281b XCAFSchema

    :type aGUID: OCC.wrapper.Standard.Standard_GUID
    :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

    """
    return _XmlXCAFDrivers.XmlXCAFDrivers__Factory(*args)

def XmlXCAFDrivers__DefineFormat(*args):
    """
    XmlXCAFDrivers__DefineFormat(Handle_TDocStd_Application theApp)

    Defines format "XmlXCAF" and registers its read and write drivers
    in the specified application

    :type theApp: OCC.wrapper.TDocStd.Handle_TDocStd_Application

    """
    return _XmlXCAFDrivers.XmlXCAFDrivers__DefineFormat(*args)

class Handle_XmlXCAFDrivers_DocumentStorageDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlXCAFDrivers_DocumentStorageDriver self)

        Nullify the handle


        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlXCAFDrivers_DocumentStorageDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlXCAFDrivers_DocumentStorageDriver self, XmlXCAFDrivers_DocumentStorageDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlXCAFDrivers_DocumentStorageDriver self, Handle_XmlXCAFDrivers_DocumentStorageDriver theHandle) -> Handle_XmlXCAFDrivers_DocumentStorageDriver
        assign(Handle_XmlXCAFDrivers_DocumentStorageDriver self, XmlXCAFDrivers_DocumentStorageDriver thePtr) -> Handle_XmlXCAFDrivers_DocumentStorageDriver
        assign(Handle_XmlXCAFDrivers_DocumentStorageDriver self, Handle_XmlXCAFDrivers_DocumentStorageDriver theHandle) -> Handle_XmlXCAFDrivers_DocumentStorageDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlXCAFDrivers_DocumentStorageDriver self) -> XmlXCAFDrivers_DocumentStorageDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlXCAFDrivers_DocumentStorageDriver self) -> XmlXCAFDrivers_DocumentStorageDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlXCAFDrivers_DocumentStorageDriver self) -> XmlXCAFDrivers_DocumentStorageDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlXCAFDrivers.new_Handle_XmlXCAFDrivers_DocumentStorageDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_DownCast)
    __swig_destroy__ = _XmlXCAFDrivers.delete_Handle_XmlXCAFDrivers_DocumentStorageDriver

    def AttributeDrivers(self, *args):
        """
        AttributeDrivers(Handle_XmlXCAFDrivers_DocumentStorageDriver self, Handle_Message_Messenger theMsgDriver) -> Handle_XmlMDF_ADriverTable

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_AttributeDrivers(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlXCAFDrivers_DocumentStorageDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def WriteShapeSection(self, *args):
        """
        WriteShapeSection(Handle_XmlXCAFDrivers_DocumentStorageDriver self, LDOM_Element thePDoc) -> Standard_Boolean

        :type thePDoc: OCC.wrapper.XmlObjMgt.XmlObjMgt_Element
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_WriteShapeSection(self, *args)


    def Write(self, *args):
        """
        Write(Handle_XmlXCAFDrivers_DocumentStorageDriver self, Handle_CDM_Document theDocument, TCollection_ExtendedString theFileName)
        Write(Handle_XmlXCAFDrivers_DocumentStorageDriver self, Handle_CDM_Document theDocument, Standard_OStream & theOStream)

        :type theDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :type theOStream: OCC.wrapper.Standard.Standard_OStream

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_Write(self, *args)


    def Make(self, *args):
        """
        Make(Handle_XmlXCAFDrivers_DocumentStorageDriver self, Handle_CDM_Document aDocument) -> Handle_PCDM_Document
        Make(Handle_XmlXCAFDrivers_DocumentStorageDriver self, Handle_CDM_Document aDocument, NCollection_Sequence_Handle_PCDM_Document Documents)

        By default, puts  in the Sequence the  document returns
        by the previous Make method.

        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :type Documents: OCC.wrapper.PCDM.PCDM_SequenceOfDocument

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_Make(self, *args)


    def SetFormat(self, *args):
        """
        SetFormat(Handle_XmlXCAFDrivers_DocumentStorageDriver self, TCollection_ExtendedString aformat)

        :type aformat: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_SetFormat(self, *args)


    def GetFormat(self, *args):
        """
        GetFormat(Handle_XmlXCAFDrivers_DocumentStorageDriver self) -> TCollection_ExtendedString

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_GetFormat(self, *args)


    def IsError(self, *args):
        """
        IsError(Handle_XmlXCAFDrivers_DocumentStorageDriver self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_IsError(self, *args)


    def SetIsError(self, *args):
        """
        SetIsError(Handle_XmlXCAFDrivers_DocumentStorageDriver self, Standard_Boolean const theIsError)

        :type theIsError: bool

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_SetIsError(self, *args)


    def GetStoreStatus(self, *args):
        """
        GetStoreStatus(Handle_XmlXCAFDrivers_DocumentStorageDriver self) -> PCDM_StoreStatus

        :rtype: OCC.wrapper.PCDM.PCDM_StoreStatus

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_GetStoreStatus(self, *args)


    def SetStoreStatus(self, *args):
        """
        SetStoreStatus(Handle_XmlXCAFDrivers_DocumentStorageDriver self, PCDM_StoreStatus const theStoreStatus)

        :type theStoreStatus: OCC.wrapper.PCDM.PCDM_StoreStatus

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_SetStoreStatus(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_XmlXCAFDrivers_DocumentStorageDriver self)

        Memory deallocator for transient classes


        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlXCAFDrivers_DocumentStorageDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlXCAFDrivers_DocumentStorageDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlXCAFDrivers_DocumentStorageDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlXCAFDrivers_DocumentStorageDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlXCAFDrivers_DocumentStorageDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlXCAFDrivers_DocumentStorageDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlXCAFDrivers_DocumentStorageDriver self)

        Increments the reference counter of this object


        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlXCAFDrivers_DocumentStorageDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_DecrementRefCounter(self, *args)

Handle_XmlXCAFDrivers_DocumentStorageDriver_swigregister = _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_swigregister
Handle_XmlXCAFDrivers_DocumentStorageDriver_swigregister(Handle_XmlXCAFDrivers_DocumentStorageDriver)

def Handle_XmlXCAFDrivers_DocumentStorageDriver_DownCast(thing):
    return _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_DownCast(thing)
Handle_XmlXCAFDrivers_DocumentStorageDriver_DownCast = _XmlXCAFDrivers.Handle_XmlXCAFDrivers_DocumentStorageDriver_DownCast



