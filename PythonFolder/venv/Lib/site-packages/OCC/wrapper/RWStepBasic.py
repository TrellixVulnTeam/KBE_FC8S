# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_RWStepBasic')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_RWStepBasic')
    _RWStepBasic = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RWStepBasic', [dirname(__file__)])
        except ImportError:
            import _RWStepBasic
            return _RWStepBasic
        try:
            _mod = imp.load_module('_RWStepBasic', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _RWStepBasic = swig_import_helper()
    del swig_import_helper
else:
    import _RWStepBasic
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWStepBasic.delete_SwigPyIterator

    def value(self):
        return _RWStepBasic.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _RWStepBasic.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _RWStepBasic.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _RWStepBasic.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _RWStepBasic.SwigPyIterator_equal(self, x)

    def copy(self):
        return _RWStepBasic.SwigPyIterator_copy(self)

    def next(self):
        return _RWStepBasic.SwigPyIterator_next(self)

    def __next__(self):
        return _RWStepBasic.SwigPyIterator___next__(self)

    def previous(self):
        return _RWStepBasic.SwigPyIterator_previous(self)

    def advance(self, n):
        return _RWStepBasic.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _RWStepBasic.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _RWStepBasic.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _RWStepBasic.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _RWStepBasic.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _RWStepBasic.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _RWStepBasic.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _RWStepBasic.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _RWStepBasic.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_RWStepBasic.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _RWStepBasic.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _RWStepBasic.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RWStepBasic.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _RWStepBasic.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _RWStepBasic.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _RWStepBasic.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _RWStepBasic.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_RWStepBasic.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _RWStepBasic.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _RWStepBasic.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RWStepBasic.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _RWStepBasic.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _RWStepBasic.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _RWStepBasic.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _RWStepBasic.ptr_to_number(item)
ptr_to_number = _RWStepBasic.ptr_to_number

def HashCode(*args):
    return _RWStepBasic.HashCode(*args)
HashCode = _RWStepBasic.HashCode

def ptr_equal(a, b):
    return _RWStepBasic.ptr_equal(a, b)
ptr_equal = _RWStepBasic.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepBasic
else:
    import StepBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepData
else:
    import StepData
del _swig_python_version_info
class RWStepBasic_RWOrdinalDate(object):
    """Read & Write Module for OrdinalDate"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWOrdinalDate self) -> RWStepBasic_RWOrdinalDate

        Read & Write Module for OrdinalDate
        """
        this = _RWStepBasic.new_RWStepBasic_RWOrdinalDate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWOrdinalDate self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_OrdinalDate ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_OrdinalDate

        """
        return _RWStepBasic.RWStepBasic_RWOrdinalDate_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWOrdinalDate self, StepData_StepWriter SW, Handle_StepBasic_OrdinalDate ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_OrdinalDate

        """
        return _RWStepBasic.RWStepBasic_RWOrdinalDate_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWOrdinalDate
RWStepBasic_RWOrdinalDate_swigregister = _RWStepBasic.RWStepBasic_RWOrdinalDate_swigregister
RWStepBasic_RWOrdinalDate_swigregister(RWStepBasic_RWOrdinalDate)

class RWStepBasic_RWSiUnitAndLengthUnit(object):
    """Read & Write Module for SiUnitAndLengthUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWSiUnitAndLengthUnit self) -> RWStepBasic_RWSiUnitAndLengthUnit

        Read & Write Module for SiUnitAndLengthUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWSiUnitAndLengthUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWSiUnitAndLengthUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_SiUnitAndLengthUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SiUnitAndLengthUnit

        """
        return _RWStepBasic.RWStepBasic_RWSiUnitAndLengthUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWSiUnitAndLengthUnit self, StepData_StepWriter SW, Handle_StepBasic_SiUnitAndLengthUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SiUnitAndLengthUnit

        """
        return _RWStepBasic.RWStepBasic_RWSiUnitAndLengthUnit_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWSiUnitAndLengthUnit
RWStepBasic_RWSiUnitAndLengthUnit_swigregister = _RWStepBasic.RWStepBasic_RWSiUnitAndLengthUnit_swigregister
RWStepBasic_RWSiUnitAndLengthUnit_swigregister(RWStepBasic_RWSiUnitAndLengthUnit)

class RWStepBasic_RWNameAssignment(object):
    """Read & Write tool for NameAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWNameAssignment self) -> RWStepBasic_RWNameAssignment

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWNameAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWNameAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_NameAssignment ent)

        Reads NameAssignment

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_NameAssignment

        """
        return _RWStepBasic.RWStepBasic_RWNameAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWNameAssignment self, StepData_StepWriter SW, Handle_StepBasic_NameAssignment ent)

        Writes NameAssignment

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_NameAssignment

        """
        return _RWStepBasic.RWStepBasic_RWNameAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWNameAssignment self, Handle_StepBasic_NameAssignment ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_NameAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWNameAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWNameAssignment
RWStepBasic_RWNameAssignment_swigregister = _RWStepBasic.RWStepBasic_RWNameAssignment_swigregister
RWStepBasic_RWNameAssignment_swigregister(RWStepBasic_RWNameAssignment)

class RWStepBasic_RWProductDefinitionReference(object):
    """Read & Write Module for ProductDefinitionReference"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWProductDefinitionReference self) -> RWStepBasic_RWProductDefinitionReference

        Read & Write Module for ProductDefinitionReference
        """
        this = _RWStepBasic.new_RWStepBasic_RWProductDefinitionReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWProductDefinitionReference self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ProductDefinitionReference ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionReference

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionReference_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWProductDefinitionReference self, StepData_StepWriter SW, Handle_StepBasic_ProductDefinitionReference ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionReference

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionReference_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWProductDefinitionReference self, Handle_StepBasic_ProductDefinitionReference ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionReference
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionReference_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWProductDefinitionReference
RWStepBasic_RWProductDefinitionReference_swigregister = _RWStepBasic.RWStepBasic_RWProductDefinitionReference_swigregister
RWStepBasic_RWProductDefinitionReference_swigregister(RWStepBasic_RWProductDefinitionReference)

class RWStepBasic_RWSiUnitAndSolidAngleUnit(object):
    """Read & Write Module for SiUnitAndSolidAngleUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWSiUnitAndSolidAngleUnit self) -> RWStepBasic_RWSiUnitAndSolidAngleUnit

        Read & Write Module for SiUnitAndSolidAngleUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWSiUnitAndSolidAngleUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWSiUnitAndSolidAngleUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_SiUnitAndSolidAngleUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SiUnitAndSolidAngleUnit

        """
        return _RWStepBasic.RWStepBasic_RWSiUnitAndSolidAngleUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWSiUnitAndSolidAngleUnit self, StepData_StepWriter SW, Handle_StepBasic_SiUnitAndSolidAngleUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SiUnitAndSolidAngleUnit

        """
        return _RWStepBasic.RWStepBasic_RWSiUnitAndSolidAngleUnit_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWSiUnitAndSolidAngleUnit
RWStepBasic_RWSiUnitAndSolidAngleUnit_swigregister = _RWStepBasic.RWStepBasic_RWSiUnitAndSolidAngleUnit_swigregister
RWStepBasic_RWSiUnitAndSolidAngleUnit_swigregister(RWStepBasic_RWSiUnitAndSolidAngleUnit)

class RWStepBasic_RWEffectivity(object):
    """Read & Write Module for Effectivity"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWEffectivity self) -> RWStepBasic_RWEffectivity

        Read & Write Module for Effectivity
        """
        this = _RWStepBasic.new_RWStepBasic_RWEffectivity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWEffectivity self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_Effectivity ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Effectivity

        """
        return _RWStepBasic.RWStepBasic_RWEffectivity_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWEffectivity self, StepData_StepWriter SW, Handle_StepBasic_Effectivity ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Effectivity

        """
        return _RWStepBasic.RWStepBasic_RWEffectivity_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWEffectivity self, Handle_StepBasic_Effectivity ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Effectivity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWEffectivity_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWEffectivity
RWStepBasic_RWEffectivity_swigregister = _RWStepBasic.RWStepBasic_RWEffectivity_swigregister
RWStepBasic_RWEffectivity_swigregister(RWStepBasic_RWEffectivity)

class RWStepBasic_RWMechanicalContext(object):
    """Read & Write Module for MechanicalContext"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWMechanicalContext self) -> RWStepBasic_RWMechanicalContext

        Read & Write Module for MechanicalContext
        """
        this = _RWStepBasic.new_RWStepBasic_RWMechanicalContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWMechanicalContext self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_MechanicalContext ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_MechanicalContext

        """
        return _RWStepBasic.RWStepBasic_RWMechanicalContext_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWMechanicalContext self, StepData_StepWriter SW, Handle_StepBasic_MechanicalContext ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_MechanicalContext

        """
        return _RWStepBasic.RWStepBasic_RWMechanicalContext_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWMechanicalContext self, Handle_StepBasic_MechanicalContext ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_MechanicalContext
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWMechanicalContext_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWMechanicalContext
RWStepBasic_RWMechanicalContext_swigregister = _RWStepBasic.RWStepBasic_RWMechanicalContext_swigregister
RWStepBasic_RWMechanicalContext_swigregister(RWStepBasic_RWMechanicalContext)

class RWStepBasic_RWIdentificationRole(object):
    """Read & Write tool for IdentificationRole"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWIdentificationRole self) -> RWStepBasic_RWIdentificationRole

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWIdentificationRole(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWIdentificationRole self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_IdentificationRole ent)

        Reads IdentificationRole

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_IdentificationRole

        """
        return _RWStepBasic.RWStepBasic_RWIdentificationRole_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWIdentificationRole self, StepData_StepWriter SW, Handle_StepBasic_IdentificationRole ent)

        Writes IdentificationRole

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_IdentificationRole

        """
        return _RWStepBasic.RWStepBasic_RWIdentificationRole_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWIdentificationRole self, Handle_StepBasic_IdentificationRole ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_IdentificationRole
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWIdentificationRole_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWIdentificationRole
RWStepBasic_RWIdentificationRole_swigregister = _RWStepBasic.RWStepBasic_RWIdentificationRole_swigregister
RWStepBasic_RWIdentificationRole_swigregister(RWStepBasic_RWIdentificationRole)

class RWStepBasic_RWConversionBasedUnitAndTimeUnit(object):
    """Read & Write Module for ConversionBasedUnitAndTimeUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWConversionBasedUnitAndTimeUnit self) -> RWStepBasic_RWConversionBasedUnitAndTimeUnit

        Read & Write Module for ConversionBasedUnitAndTimeUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWConversionBasedUnitAndTimeUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWConversionBasedUnitAndTimeUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ConversionBasedUnitAndTimeUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnitAndTimeUnit

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndTimeUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWConversionBasedUnitAndTimeUnit self, StepData_StepWriter SW, Handle_StepBasic_ConversionBasedUnitAndTimeUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnitAndTimeUnit

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndTimeUnit_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWConversionBasedUnitAndTimeUnit self, Handle_StepBasic_ConversionBasedUnitAndTimeUnit ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnitAndTimeUnit
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndTimeUnit_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWConversionBasedUnitAndTimeUnit
RWStepBasic_RWConversionBasedUnitAndTimeUnit_swigregister = _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndTimeUnit_swigregister
RWStepBasic_RWConversionBasedUnitAndTimeUnit_swigregister(RWStepBasic_RWConversionBasedUnitAndTimeUnit)

class RWStepBasic_RWSiUnitAndVolumeUnit(object):
    """Read & Write Module for SiUnitAndVolumeUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWSiUnitAndVolumeUnit self) -> RWStepBasic_RWSiUnitAndVolumeUnit

        Read & Write Module for SiUnitAndVolumeUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWSiUnitAndVolumeUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWSiUnitAndVolumeUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_SiUnitAndVolumeUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SiUnitAndVolumeUnit

        """
        return _RWStepBasic.RWStepBasic_RWSiUnitAndVolumeUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWSiUnitAndVolumeUnit self, StepData_StepWriter SW, Handle_StepBasic_SiUnitAndVolumeUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SiUnitAndVolumeUnit

        """
        return _RWStepBasic.RWStepBasic_RWSiUnitAndVolumeUnit_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWSiUnitAndVolumeUnit
RWStepBasic_RWSiUnitAndVolumeUnit_swigregister = _RWStepBasic.RWStepBasic_RWSiUnitAndVolumeUnit_swigregister
RWStepBasic_RWSiUnitAndVolumeUnit_swigregister(RWStepBasic_RWSiUnitAndVolumeUnit)

class RWStepBasic_RWDateAndTime(object):
    """Read & Write Module for DateAndTime"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWDateAndTime self) -> RWStepBasic_RWDateAndTime

        Read & Write Module for DateAndTime
        """
        this = _RWStepBasic.new_RWStepBasic_RWDateAndTime(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWDateAndTime self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_DateAndTime ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DateAndTime

        """
        return _RWStepBasic.RWStepBasic_RWDateAndTime_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWDateAndTime self, StepData_StepWriter SW, Handle_StepBasic_DateAndTime ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DateAndTime

        """
        return _RWStepBasic.RWStepBasic_RWDateAndTime_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWDateAndTime self, Handle_StepBasic_DateAndTime ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DateAndTime
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWDateAndTime_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWDateAndTime
RWStepBasic_RWDateAndTime_swigregister = _RWStepBasic.RWStepBasic_RWDateAndTime_swigregister
RWStepBasic_RWDateAndTime_swigregister(RWStepBasic_RWDateAndTime)

class RWStepBasic_RWMeasureWithUnit(object):
    """Read & Write Module for MeasureWithUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWMeasureWithUnit self) -> RWStepBasic_RWMeasureWithUnit

        Read & Write Module for MeasureWithUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWMeasureWithUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWMeasureWithUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_MeasureWithUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _RWStepBasic.RWStepBasic_RWMeasureWithUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWMeasureWithUnit self, StepData_StepWriter SW, Handle_StepBasic_MeasureWithUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit

        """
        return _RWStepBasic.RWStepBasic_RWMeasureWithUnit_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWMeasureWithUnit self, Handle_StepBasic_MeasureWithUnit ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_MeasureWithUnit
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWMeasureWithUnit_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWMeasureWithUnit
RWStepBasic_RWMeasureWithUnit_swigregister = _RWStepBasic.RWStepBasic_RWMeasureWithUnit_swigregister
RWStepBasic_RWMeasureWithUnit_swigregister(RWStepBasic_RWMeasureWithUnit)

class RWStepBasic_RWMassMeasureWithUnit(object):
    """Read & Write Module for MassMeasureWithUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWMassMeasureWithUnit self) -> RWStepBasic_RWMassMeasureWithUnit

        Read & Write Module for MassMeasureWithUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWMassMeasureWithUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWMassMeasureWithUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_MassMeasureWithUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_MassMeasureWithUnit

        """
        return _RWStepBasic.RWStepBasic_RWMassMeasureWithUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWMassMeasureWithUnit self, StepData_StepWriter SW, Handle_StepBasic_MassMeasureWithUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_MassMeasureWithUnit

        """
        return _RWStepBasic.RWStepBasic_RWMassMeasureWithUnit_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWMassMeasureWithUnit self, Handle_StepBasic_MassMeasureWithUnit ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_MassMeasureWithUnit
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWMassMeasureWithUnit_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWMassMeasureWithUnit
RWStepBasic_RWMassMeasureWithUnit_swigregister = _RWStepBasic.RWStepBasic_RWMassMeasureWithUnit_swigregister
RWStepBasic_RWMassMeasureWithUnit_swigregister(RWStepBasic_RWMassMeasureWithUnit)

class RWStepBasic_RWProductDefinitionEffectivity(object):
    """Read & Write Module for ProductDefinitionEffectivity"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWProductDefinitionEffectivity self) -> RWStepBasic_RWProductDefinitionEffectivity

        Read & Write Module for ProductDefinitionEffectivity
        """
        this = _RWStepBasic.new_RWStepBasic_RWProductDefinitionEffectivity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWProductDefinitionEffectivity self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ProductDefinitionEffectivity ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionEffectivity

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionEffectivity_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWProductDefinitionEffectivity self, StepData_StepWriter SW, Handle_StepBasic_ProductDefinitionEffectivity ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionEffectivity

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionEffectivity_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWProductDefinitionEffectivity self, Handle_StepBasic_ProductDefinitionEffectivity ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionEffectivity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionEffectivity_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWProductDefinitionEffectivity
RWStepBasic_RWProductDefinitionEffectivity_swigregister = _RWStepBasic.RWStepBasic_RWProductDefinitionEffectivity_swigregister
RWStepBasic_RWProductDefinitionEffectivity_swigregister(RWStepBasic_RWProductDefinitionEffectivity)

class RWStepBasic_RWProductCategory(object):
    """Read & Write Module for ProductCategory"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWProductCategory self) -> RWStepBasic_RWProductCategory

        Read & Write Module for ProductCategory
        """
        this = _RWStepBasic.new_RWStepBasic_RWProductCategory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWProductCategory self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ProductCategory ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductCategory

        """
        return _RWStepBasic.RWStepBasic_RWProductCategory_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWProductCategory self, StepData_StepWriter SW, Handle_StepBasic_ProductCategory ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductCategory

        """
        return _RWStepBasic.RWStepBasic_RWProductCategory_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWProductCategory
RWStepBasic_RWProductCategory_swigregister = _RWStepBasic.RWStepBasic_RWProductCategory_swigregister
RWStepBasic_RWProductCategory_swigregister(RWStepBasic_RWProductCategory)

class RWStepBasic_RWConversionBasedUnitAndMassUnit(object):
    """Read & Write Module for ConversionBasedUnitAndMassUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWConversionBasedUnitAndMassUnit self) -> RWStepBasic_RWConversionBasedUnitAndMassUnit

        Read & Write Module for ConversionBasedUnitAndMassUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWConversionBasedUnitAndMassUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWConversionBasedUnitAndMassUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ConversionBasedUnitAndMassUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnitAndMassUnit

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndMassUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWConversionBasedUnitAndMassUnit self, StepData_StepWriter SW, Handle_StepBasic_ConversionBasedUnitAndMassUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnitAndMassUnit

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndMassUnit_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWConversionBasedUnitAndMassUnit self, Handle_StepBasic_ConversionBasedUnitAndMassUnit ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnitAndMassUnit
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndMassUnit_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWConversionBasedUnitAndMassUnit
RWStepBasic_RWConversionBasedUnitAndMassUnit_swigregister = _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndMassUnit_swigregister
RWStepBasic_RWConversionBasedUnitAndMassUnit_swigregister(RWStepBasic_RWConversionBasedUnitAndMassUnit)

class RWStepBasic_RWApprovalRole(object):
    """Read & Write Module for ApprovalRole"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWApprovalRole self) -> RWStepBasic_RWApprovalRole

        Read & Write Module for ApprovalRole
        """
        this = _RWStepBasic.new_RWStepBasic_RWApprovalRole(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWApprovalRole self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ApprovalRole ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ApprovalRole

        """
        return _RWStepBasic.RWStepBasic_RWApprovalRole_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWApprovalRole self, StepData_StepWriter SW, Handle_StepBasic_ApprovalRole ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ApprovalRole

        """
        return _RWStepBasic.RWStepBasic_RWApprovalRole_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWApprovalRole
RWStepBasic_RWApprovalRole_swigregister = _RWStepBasic.RWStepBasic_RWApprovalRole_swigregister
RWStepBasic_RWApprovalRole_swigregister(RWStepBasic_RWApprovalRole)

class RWStepBasic_RWApplicationProtocolDefinition(object):
    """Read & Write Module for ApplicationProtocolDefinition"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWApplicationProtocolDefinition self) -> RWStepBasic_RWApplicationProtocolDefinition

        Read & Write Module for ApplicationProtocolDefinition
        """
        this = _RWStepBasic.new_RWStepBasic_RWApplicationProtocolDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWApplicationProtocolDefinition self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ApplicationProtocolDefinition ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ApplicationProtocolDefinition

        """
        return _RWStepBasic.RWStepBasic_RWApplicationProtocolDefinition_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWApplicationProtocolDefinition self, StepData_StepWriter SW, Handle_StepBasic_ApplicationProtocolDefinition ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ApplicationProtocolDefinition

        """
        return _RWStepBasic.RWStepBasic_RWApplicationProtocolDefinition_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWApplicationProtocolDefinition self, Handle_StepBasic_ApplicationProtocolDefinition ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ApplicationProtocolDefinition
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWApplicationProtocolDefinition_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWApplicationProtocolDefinition
RWStepBasic_RWApplicationProtocolDefinition_swigregister = _RWStepBasic.RWStepBasic_RWApplicationProtocolDefinition_swigregister
RWStepBasic_RWApplicationProtocolDefinition_swigregister(RWStepBasic_RWApplicationProtocolDefinition)

class RWStepBasic_RWSolidAngleMeasureWithUnit(object):
    """Read & Write Module for SolidAngleMeasureWithUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWSolidAngleMeasureWithUnit self) -> RWStepBasic_RWSolidAngleMeasureWithUnit

        Read & Write Module for SolidAngleMeasureWithUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWSolidAngleMeasureWithUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWSolidAngleMeasureWithUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_SolidAngleMeasureWithUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SolidAngleMeasureWithUnit

        """
        return _RWStepBasic.RWStepBasic_RWSolidAngleMeasureWithUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWSolidAngleMeasureWithUnit self, StepData_StepWriter SW, Handle_StepBasic_SolidAngleMeasureWithUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SolidAngleMeasureWithUnit

        """
        return _RWStepBasic.RWStepBasic_RWSolidAngleMeasureWithUnit_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWSolidAngleMeasureWithUnit self, Handle_StepBasic_SolidAngleMeasureWithUnit ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SolidAngleMeasureWithUnit
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWSolidAngleMeasureWithUnit_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWSolidAngleMeasureWithUnit
RWStepBasic_RWSolidAngleMeasureWithUnit_swigregister = _RWStepBasic.RWStepBasic_RWSolidAngleMeasureWithUnit_swigregister
RWStepBasic_RWSolidAngleMeasureWithUnit_swigregister(RWStepBasic_RWSolidAngleMeasureWithUnit)

class RWStepBasic_RWContract(object):
    """Read & Write tool for Contract"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWContract self) -> RWStepBasic_RWContract

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWContract(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWContract self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_Contract ent)

        Reads Contract

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Contract

        """
        return _RWStepBasic.RWStepBasic_RWContract_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWContract self, StepData_StepWriter SW, Handle_StepBasic_Contract ent)

        Writes Contract

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Contract

        """
        return _RWStepBasic.RWStepBasic_RWContract_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWContract self, Handle_StepBasic_Contract ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Contract
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWContract_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWContract
RWStepBasic_RWContract_swigregister = _RWStepBasic.RWStepBasic_RWContract_swigregister
RWStepBasic_RWContract_swigregister(RWStepBasic_RWContract)

class RWStepBasic_RWSiUnit(object):
    """Read & Write Module for SiUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWSiUnit self) -> RWStepBasic_RWSiUnit

        Read & Write Module for SiUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWSiUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWSiUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_SiUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SiUnit

        """
        return _RWStepBasic.RWStepBasic_RWSiUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWSiUnit self, StepData_StepWriter SW, Handle_StepBasic_SiUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SiUnit

        """
        return _RWStepBasic.RWStepBasic_RWSiUnit_WriteStep(self, *args)


    def DecodePrefix(self, *args):
        """
        DecodePrefix(RWStepBasic_RWSiUnit self, Standard_CString const text) -> Standard_Boolean

        :type aPrefix: OCC.wrapper.StepBasic.StepBasic_SiPrefix
        :type text: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _RWStepBasic.RWStepBasic_RWSiUnit_DecodePrefix(self, *args)


    def DecodeName(self, *args):
        """
        DecodeName(RWStepBasic_RWSiUnit self, Standard_CString const text) -> Standard_Boolean

        :type aName: OCC.wrapper.StepBasic.StepBasic_SiUnitName
        :type text: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _RWStepBasic.RWStepBasic_RWSiUnit_DecodeName(self, *args)


    def EncodePrefix(self, *args):
        """
        EncodePrefix(RWStepBasic_RWSiUnit self, StepBasic_SiPrefix const aPrefix) -> TCollection_AsciiString

        :type aPrefix: OCC.wrapper.StepBasic.StepBasic_SiPrefix
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _RWStepBasic.RWStepBasic_RWSiUnit_EncodePrefix(self, *args)


    def EncodeName(self, *args):
        """
        EncodeName(RWStepBasic_RWSiUnit self, StepBasic_SiUnitName const aName) -> TCollection_AsciiString

        :type aName: OCC.wrapper.StepBasic.StepBasic_SiUnitName
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _RWStepBasic.RWStepBasic_RWSiUnit_EncodeName(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWSiUnit
RWStepBasic_RWSiUnit_swigregister = _RWStepBasic.RWStepBasic_RWSiUnit_swigregister
RWStepBasic_RWSiUnit_swigregister(RWStepBasic_RWSiUnit)

class RWStepBasic_RWSiUnitAndThermodynamicTemperatureUnit(object):
    """Read & Write Module for SiUnitAndThermodynamicTemperatureUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWSiUnitAndThermodynamicTemperatureUnit self) -> RWStepBasic_RWSiUnitAndThermodynamicTemperatureUnit

        Read & Write Module for SiUnitAndThermodynamicTemperatureUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWSiUnitAndThermodynamicTemperatureUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWSiUnitAndThermodynamicTemperatureUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit

        """
        return _RWStepBasic.RWStepBasic_RWSiUnitAndThermodynamicTemperatureUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWSiUnitAndThermodynamicTemperatureUnit self, StepData_StepWriter SW, Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SiUnitAndThermodynamicTemperatureUnit

        """
        return _RWStepBasic.RWStepBasic_RWSiUnitAndThermodynamicTemperatureUnit_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWSiUnitAndThermodynamicTemperatureUnit
RWStepBasic_RWSiUnitAndThermodynamicTemperatureUnit_swigregister = _RWStepBasic.RWStepBasic_RWSiUnitAndThermodynamicTemperatureUnit_swigregister
RWStepBasic_RWSiUnitAndThermodynamicTemperatureUnit_swigregister(RWStepBasic_RWSiUnitAndThermodynamicTemperatureUnit)

class RWStepBasic_RWDocumentUsageConstraint(object):
    """Read & Write Module for DocumentUsageConstraint"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWDocumentUsageConstraint self) -> RWStepBasic_RWDocumentUsageConstraint

        Read & Write Module for DocumentUsageConstraint
        """
        this = _RWStepBasic.new_RWStepBasic_RWDocumentUsageConstraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWDocumentUsageConstraint self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_DocumentUsageConstraint ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentUsageConstraint

        """
        return _RWStepBasic.RWStepBasic_RWDocumentUsageConstraint_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWDocumentUsageConstraint self, StepData_StepWriter SW, Handle_StepBasic_DocumentUsageConstraint ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentUsageConstraint

        """
        return _RWStepBasic.RWStepBasic_RWDocumentUsageConstraint_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWDocumentUsageConstraint self, Handle_StepBasic_DocumentUsageConstraint ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentUsageConstraint
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWDocumentUsageConstraint_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWDocumentUsageConstraint
RWStepBasic_RWDocumentUsageConstraint_swigregister = _RWStepBasic.RWStepBasic_RWDocumentUsageConstraint_swigregister
RWStepBasic_RWDocumentUsageConstraint_swigregister(RWStepBasic_RWDocumentUsageConstraint)

class RWStepBasic_RWActionMethod(object):
    """Read & Write tool for ActionMethod"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWActionMethod self) -> RWStepBasic_RWActionMethod

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWActionMethod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWActionMethod self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ActionMethod ent)

        Reads ActionMethod

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ActionMethod

        """
        return _RWStepBasic.RWStepBasic_RWActionMethod_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWActionMethod self, StepData_StepWriter SW, Handle_StepBasic_ActionMethod ent)

        Writes ActionMethod

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ActionMethod

        """
        return _RWStepBasic.RWStepBasic_RWActionMethod_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWActionMethod self, Handle_StepBasic_ActionMethod ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ActionMethod
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWActionMethod_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWActionMethod
RWStepBasic_RWActionMethod_swigregister = _RWStepBasic.RWStepBasic_RWActionMethod_swigregister
RWStepBasic_RWActionMethod_swigregister(RWStepBasic_RWActionMethod)

class RWStepBasic_RWThermodynamicTemperatureUnit(object):
    """Read & Write tool for ThermodynamicTemperatureUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWThermodynamicTemperatureUnit self) -> RWStepBasic_RWThermodynamicTemperatureUnit

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWThermodynamicTemperatureUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWThermodynamicTemperatureUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ThermodynamicTemperatureUnit ent)

        Reads ThermodynamicTemperatureUnit

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ThermodynamicTemperatureUnit

        """
        return _RWStepBasic.RWStepBasic_RWThermodynamicTemperatureUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWThermodynamicTemperatureUnit self, StepData_StepWriter SW, Handle_StepBasic_ThermodynamicTemperatureUnit ent)

        Writes ThermodynamicTemperatureUnit

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ThermodynamicTemperatureUnit

        """
        return _RWStepBasic.RWStepBasic_RWThermodynamicTemperatureUnit_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWThermodynamicTemperatureUnit self, Handle_StepBasic_ThermodynamicTemperatureUnit ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ThermodynamicTemperatureUnit
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWThermodynamicTemperatureUnit_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWThermodynamicTemperatureUnit
RWStepBasic_RWThermodynamicTemperatureUnit_swigregister = _RWStepBasic.RWStepBasic_RWThermodynamicTemperatureUnit_swigregister
RWStepBasic_RWThermodynamicTemperatureUnit_swigregister(RWStepBasic_RWThermodynamicTemperatureUnit)

class RWStepBasic_RWSiUnitAndMassUnit(object):
    """Read & Write Module for SiUnitAndMassUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWSiUnitAndMassUnit self) -> RWStepBasic_RWSiUnitAndMassUnit

        Read & Write Module for SiUnitAndMassUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWSiUnitAndMassUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWSiUnitAndMassUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_SiUnitAndMassUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SiUnitAndMassUnit

        """
        return _RWStepBasic.RWStepBasic_RWSiUnitAndMassUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWSiUnitAndMassUnit self, StepData_StepWriter SW, Handle_StepBasic_SiUnitAndMassUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SiUnitAndMassUnit

        """
        return _RWStepBasic.RWStepBasic_RWSiUnitAndMassUnit_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWSiUnitAndMassUnit
RWStepBasic_RWSiUnitAndMassUnit_swigregister = _RWStepBasic.RWStepBasic_RWSiUnitAndMassUnit_swigregister
RWStepBasic_RWSiUnitAndMassUnit_swigregister(RWStepBasic_RWSiUnitAndMassUnit)

class RWStepBasic_RWPlaneAngleUnit(object):
    """Read & Write Module for PlaneAngleUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWPlaneAngleUnit self) -> RWStepBasic_RWPlaneAngleUnit

        Read & Write Module for PlaneAngleUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWPlaneAngleUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWPlaneAngleUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_PlaneAngleUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_PlaneAngleUnit

        """
        return _RWStepBasic.RWStepBasic_RWPlaneAngleUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWPlaneAngleUnit self, StepData_StepWriter SW, Handle_StepBasic_PlaneAngleUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_PlaneAngleUnit

        """
        return _RWStepBasic.RWStepBasic_RWPlaneAngleUnit_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWPlaneAngleUnit self, Handle_StepBasic_PlaneAngleUnit ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_PlaneAngleUnit
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWPlaneAngleUnit_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWPlaneAngleUnit
RWStepBasic_RWPlaneAngleUnit_swigregister = _RWStepBasic.RWStepBasic_RWPlaneAngleUnit_swigregister
RWStepBasic_RWPlaneAngleUnit_swigregister(RWStepBasic_RWPlaneAngleUnit)

class RWStepBasic_RWActionRequestSolution(object):
    """Read & Write tool for ActionRequestSolution"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWActionRequestSolution self) -> RWStepBasic_RWActionRequestSolution

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWActionRequestSolution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWActionRequestSolution self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ActionRequestSolution ent)

        Reads ActionRequestSolution

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ActionRequestSolution

        """
        return _RWStepBasic.RWStepBasic_RWActionRequestSolution_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWActionRequestSolution self, StepData_StepWriter SW, Handle_StepBasic_ActionRequestSolution ent)

        Writes ActionRequestSolution

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ActionRequestSolution

        """
        return _RWStepBasic.RWStepBasic_RWActionRequestSolution_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWActionRequestSolution self, Handle_StepBasic_ActionRequestSolution ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ActionRequestSolution
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWActionRequestSolution_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWActionRequestSolution
RWStepBasic_RWActionRequestSolution_swigregister = _RWStepBasic.RWStepBasic_RWActionRequestSolution_swigregister
RWStepBasic_RWActionRequestSolution_swigregister(RWStepBasic_RWActionRequestSolution)

class RWStepBasic_RWObjectRole(object):
    """Read & Write tool for ObjectRole"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWObjectRole self) -> RWStepBasic_RWObjectRole

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWObjectRole(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWObjectRole self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ObjectRole ent)

        Reads ObjectRole

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ObjectRole

        """
        return _RWStepBasic.RWStepBasic_RWObjectRole_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWObjectRole self, StepData_StepWriter SW, Handle_StepBasic_ObjectRole ent)

        Writes ObjectRole

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ObjectRole

        """
        return _RWStepBasic.RWStepBasic_RWObjectRole_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWObjectRole self, Handle_StepBasic_ObjectRole ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ObjectRole
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWObjectRole_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWObjectRole
RWStepBasic_RWObjectRole_swigregister = _RWStepBasic.RWStepBasic_RWObjectRole_swigregister
RWStepBasic_RWObjectRole_swigregister(RWStepBasic_RWObjectRole)

class RWStepBasic_RWVersionedActionRequest(object):
    """Read & Write tool for VersionedActionRequest"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWVersionedActionRequest self) -> RWStepBasic_RWVersionedActionRequest

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWVersionedActionRequest(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWVersionedActionRequest self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_VersionedActionRequest ent)

        Reads VersionedActionRequest

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_VersionedActionRequest

        """
        return _RWStepBasic.RWStepBasic_RWVersionedActionRequest_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWVersionedActionRequest self, StepData_StepWriter SW, Handle_StepBasic_VersionedActionRequest ent)

        Writes VersionedActionRequest

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_VersionedActionRequest

        """
        return _RWStepBasic.RWStepBasic_RWVersionedActionRequest_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWVersionedActionRequest self, Handle_StepBasic_VersionedActionRequest ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_VersionedActionRequest
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWVersionedActionRequest_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWVersionedActionRequest
RWStepBasic_RWVersionedActionRequest_swigregister = _RWStepBasic.RWStepBasic_RWVersionedActionRequest_swigregister
RWStepBasic_RWVersionedActionRequest_swigregister(RWStepBasic_RWVersionedActionRequest)

class RWStepBasic_RWDocument(object):
    """Read & Write tool for Document"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWDocument self) -> RWStepBasic_RWDocument

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWDocument(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWDocument self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_Document ent)

        Reads Document

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Document

        """
        return _RWStepBasic.RWStepBasic_RWDocument_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWDocument self, StepData_StepWriter SW, Handle_StepBasic_Document ent)

        Writes Document

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Document

        """
        return _RWStepBasic.RWStepBasic_RWDocument_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWDocument self, Handle_StepBasic_Document ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Document
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWDocument_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWDocument
RWStepBasic_RWDocument_swigregister = _RWStepBasic.RWStepBasic_RWDocument_swigregister
RWStepBasic_RWDocument_swigregister(RWStepBasic_RWDocument)

class RWStepBasic_RWSecurityClassificationLevel(object):
    """Read & Write Module for SecurityClassificationLevel"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWSecurityClassificationLevel self) -> RWStepBasic_RWSecurityClassificationLevel

        Read & Write Module for SecurityClassificationLevel
        """
        this = _RWStepBasic.new_RWStepBasic_RWSecurityClassificationLevel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWSecurityClassificationLevel self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_SecurityClassificationLevel ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SecurityClassificationLevel

        """
        return _RWStepBasic.RWStepBasic_RWSecurityClassificationLevel_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWSecurityClassificationLevel self, StepData_StepWriter SW, Handle_StepBasic_SecurityClassificationLevel ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SecurityClassificationLevel

        """
        return _RWStepBasic.RWStepBasic_RWSecurityClassificationLevel_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWSecurityClassificationLevel
RWStepBasic_RWSecurityClassificationLevel_swigregister = _RWStepBasic.RWStepBasic_RWSecurityClassificationLevel_swigregister
RWStepBasic_RWSecurityClassificationLevel_swigregister(RWStepBasic_RWSecurityClassificationLevel)

class RWStepBasic_RWProductDefinition(object):
    """Read & Write Module for ProductDefinition"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWProductDefinition self) -> RWStepBasic_RWProductDefinition

        Read & Write Module for ProductDefinition
        """
        this = _RWStepBasic.new_RWStepBasic_RWProductDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWProductDefinition self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ProductDefinition ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinition_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWProductDefinition self, StepData_StepWriter SW, Handle_StepBasic_ProductDefinition ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinition_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWProductDefinition self, Handle_StepBasic_ProductDefinition ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinition_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWProductDefinition
RWStepBasic_RWProductDefinition_swigregister = _RWStepBasic.RWStepBasic_RWProductDefinition_swigregister
RWStepBasic_RWProductDefinition_swigregister(RWStepBasic_RWProductDefinition)

class RWStepBasic_RWProductDefinitionFormation(object):
    """Read & Write Module for ProductDefinitionFormation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWProductDefinitionFormation self) -> RWStepBasic_RWProductDefinitionFormation

        Read & Write Module for ProductDefinitionFormation
        """
        this = _RWStepBasic.new_RWStepBasic_RWProductDefinitionFormation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWProductDefinitionFormation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ProductDefinitionFormation ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionFormation

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionFormation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWProductDefinitionFormation self, StepData_StepWriter SW, Handle_StepBasic_ProductDefinitionFormation ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionFormation

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionFormation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWProductDefinitionFormation self, Handle_StepBasic_ProductDefinitionFormation ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionFormation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionFormation_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWProductDefinitionFormation
RWStepBasic_RWProductDefinitionFormation_swigregister = _RWStepBasic.RWStepBasic_RWProductDefinitionFormation_swigregister
RWStepBasic_RWProductDefinitionFormation_swigregister(RWStepBasic_RWProductDefinitionFormation)

class RWStepBasic_RWPersonalAddress(object):
    """Read & Write Module for PersonalAddress"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWPersonalAddress self) -> RWStepBasic_RWPersonalAddress

        Read & Write Module for PersonalAddress
        """
        this = _RWStepBasic.new_RWStepBasic_RWPersonalAddress(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWPersonalAddress self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_PersonalAddress ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_PersonalAddress

        """
        return _RWStepBasic.RWStepBasic_RWPersonalAddress_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWPersonalAddress self, StepData_StepWriter SW, Handle_StepBasic_PersonalAddress ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_PersonalAddress

        """
        return _RWStepBasic.RWStepBasic_RWPersonalAddress_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWPersonalAddress self, Handle_StepBasic_PersonalAddress ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_PersonalAddress
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWPersonalAddress_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWPersonalAddress
RWStepBasic_RWPersonalAddress_swigregister = _RWStepBasic.RWStepBasic_RWPersonalAddress_swigregister
RWStepBasic_RWPersonalAddress_swigregister(RWStepBasic_RWPersonalAddress)

class RWStepBasic_RWExternalSource(object):
    """Read & Write tool for ExternalSource"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWExternalSource self) -> RWStepBasic_RWExternalSource

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWExternalSource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWExternalSource self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ExternalSource ent)

        Reads ExternalSource

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ExternalSource

        """
        return _RWStepBasic.RWStepBasic_RWExternalSource_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWExternalSource self, StepData_StepWriter SW, Handle_StepBasic_ExternalSource ent)

        Writes ExternalSource

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ExternalSource

        """
        return _RWStepBasic.RWStepBasic_RWExternalSource_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWExternalSource self, Handle_StepBasic_ExternalSource ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ExternalSource
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWExternalSource_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWExternalSource
RWStepBasic_RWExternalSource_swigregister = _RWStepBasic.RWStepBasic_RWExternalSource_swigregister
RWStepBasic_RWExternalSource_swigregister(RWStepBasic_RWExternalSource)

class RWStepBasic_RWContractAssignment(object):
    """Read & Write tool for ContractAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWContractAssignment self) -> RWStepBasic_RWContractAssignment

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWContractAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWContractAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ContractAssignment ent)

        Reads ContractAssignment

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ContractAssignment

        """
        return _RWStepBasic.RWStepBasic_RWContractAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWContractAssignment self, StepData_StepWriter SW, Handle_StepBasic_ContractAssignment ent)

        Writes ContractAssignment

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ContractAssignment

        """
        return _RWStepBasic.RWStepBasic_RWContractAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWContractAssignment self, Handle_StepBasic_ContractAssignment ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ContractAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWContractAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWContractAssignment
RWStepBasic_RWContractAssignment_swigregister = _RWStepBasic.RWStepBasic_RWContractAssignment_swigregister
RWStepBasic_RWContractAssignment_swigregister(RWStepBasic_RWContractAssignment)

class RWStepBasic_RWDate(object):
    """Read & Write Module for Date"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWDate self) -> RWStepBasic_RWDate

        Read & Write Module for Date
        """
        this = _RWStepBasic.new_RWStepBasic_RWDate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWDate self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_Date ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Date

        """
        return _RWStepBasic.RWStepBasic_RWDate_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWDate self, StepData_StepWriter SW, Handle_StepBasic_Date ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Date

        """
        return _RWStepBasic.RWStepBasic_RWDate_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWDate
RWStepBasic_RWDate_swigregister = _RWStepBasic.RWStepBasic_RWDate_swigregister
RWStepBasic_RWDate_swigregister(RWStepBasic_RWDate)

class RWStepBasic_RWApproval(object):
    """Read & Write Module for Approval"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWApproval self) -> RWStepBasic_RWApproval

        Read & Write Module for Approval
        """
        this = _RWStepBasic.new_RWStepBasic_RWApproval(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWApproval self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_Approval ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Approval

        """
        return _RWStepBasic.RWStepBasic_RWApproval_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWApproval self, StepData_StepWriter SW, Handle_StepBasic_Approval ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Approval

        """
        return _RWStepBasic.RWStepBasic_RWApproval_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWApproval self, Handle_StepBasic_Approval ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Approval
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWApproval_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWApproval
RWStepBasic_RWApproval_swigregister = _RWStepBasic.RWStepBasic_RWApproval_swigregister
RWStepBasic_RWApproval_swigregister(RWStepBasic_RWApproval)

class RWStepBasic_RWApprovalRelationship(object):
    """Read & Write Module for ApprovalRelationship"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWApprovalRelationship self) -> RWStepBasic_RWApprovalRelationship

        Read & Write Module for ApprovalRelationship
        """
        this = _RWStepBasic.new_RWStepBasic_RWApprovalRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWApprovalRelationship self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ApprovalRelationship ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ApprovalRelationship

        """
        return _RWStepBasic.RWStepBasic_RWApprovalRelationship_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWApprovalRelationship self, StepData_StepWriter SW, Handle_StepBasic_ApprovalRelationship ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ApprovalRelationship

        """
        return _RWStepBasic.RWStepBasic_RWApprovalRelationship_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWApprovalRelationship self, Handle_StepBasic_ApprovalRelationship ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ApprovalRelationship
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWApprovalRelationship_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWApprovalRelationship
RWStepBasic_RWApprovalRelationship_swigregister = _RWStepBasic.RWStepBasic_RWApprovalRelationship_swigregister
RWStepBasic_RWApprovalRelationship_swigregister(RWStepBasic_RWApprovalRelationship)

class RWStepBasic_RWOrganization(object):
    """Read & Write Module for Organization"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWOrganization self) -> RWStepBasic_RWOrganization

        Read & Write Module for Organization
        """
        this = _RWStepBasic.new_RWStepBasic_RWOrganization(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWOrganization self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_Organization ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Organization

        """
        return _RWStepBasic.RWStepBasic_RWOrganization_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWOrganization self, StepData_StepWriter SW, Handle_StepBasic_Organization ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Organization

        """
        return _RWStepBasic.RWStepBasic_RWOrganization_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWOrganization
RWStepBasic_RWOrganization_swigregister = _RWStepBasic.RWStepBasic_RWOrganization_swigregister
RWStepBasic_RWOrganization_swigregister(RWStepBasic_RWOrganization)

class RWStepBasic_RWDerivedUnit(object):
    """Read & Write Module for DerivedUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWDerivedUnit self) -> RWStepBasic_RWDerivedUnit

        Read & Write Module for DerivedUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWDerivedUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWDerivedUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_DerivedUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DerivedUnit

        """
        return _RWStepBasic.RWStepBasic_RWDerivedUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWDerivedUnit self, StepData_StepWriter SW, Handle_StepBasic_DerivedUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DerivedUnit

        """
        return _RWStepBasic.RWStepBasic_RWDerivedUnit_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWDerivedUnit self, Handle_StepBasic_DerivedUnit ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DerivedUnit
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWDerivedUnit_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWDerivedUnit
RWStepBasic_RWDerivedUnit_swigregister = _RWStepBasic.RWStepBasic_RWDerivedUnit_swigregister
RWStepBasic_RWDerivedUnit_swigregister(RWStepBasic_RWDerivedUnit)

class RWStepBasic_RWGeneralProperty(object):
    """Read & Write tool for GeneralProperty"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWGeneralProperty self) -> RWStepBasic_RWGeneralProperty

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWGeneralProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWGeneralProperty self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_GeneralProperty ent)

        Reads GeneralProperty

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_GeneralProperty

        """
        return _RWStepBasic.RWStepBasic_RWGeneralProperty_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWGeneralProperty self, StepData_StepWriter SW, Handle_StepBasic_GeneralProperty ent)

        Writes GeneralProperty

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_GeneralProperty

        """
        return _RWStepBasic.RWStepBasic_RWGeneralProperty_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWGeneralProperty self, Handle_StepBasic_GeneralProperty ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_GeneralProperty
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWGeneralProperty_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWGeneralProperty
RWStepBasic_RWGeneralProperty_swigregister = _RWStepBasic.RWStepBasic_RWGeneralProperty_swigregister
RWStepBasic_RWGeneralProperty_swigregister(RWStepBasic_RWGeneralProperty)

class RWStepBasic_RWProductDefinitionFormationRelationship(object):
    """Read & Write tool for ProductDefinitionFormationRelationship"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWProductDefinitionFormationRelationship self) -> RWStepBasic_RWProductDefinitionFormationRelationship

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWProductDefinitionFormationRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWProductDefinitionFormationRelationship self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ProductDefinitionFormationRelationship ent)

        Reads ProductDefinitionFormationRelationship

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionFormationRelationship

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionFormationRelationship_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWProductDefinitionFormationRelationship self, StepData_StepWriter SW, Handle_StepBasic_ProductDefinitionFormationRelationship ent)

        Writes ProductDefinitionFormationRelationship

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionFormationRelationship

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionFormationRelationship_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWProductDefinitionFormationRelationship self, Handle_StepBasic_ProductDefinitionFormationRelationship ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionFormationRelationship
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionFormationRelationship_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWProductDefinitionFormationRelationship
RWStepBasic_RWProductDefinitionFormationRelationship_swigregister = _RWStepBasic.RWStepBasic_RWProductDefinitionFormationRelationship_swigregister
RWStepBasic_RWProductDefinitionFormationRelationship_swigregister(RWStepBasic_RWProductDefinitionFormationRelationship)

class RWStepBasic_RWCoordinatedUniversalTimeOffset(object):
    """Read & Write Module for CoordinatedUniversalTimeOffset"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWCoordinatedUniversalTimeOffset self) -> RWStepBasic_RWCoordinatedUniversalTimeOffset

        Read & Write Module for CoordinatedUniversalTimeOffset
        """
        this = _RWStepBasic.new_RWStepBasic_RWCoordinatedUniversalTimeOffset(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWCoordinatedUniversalTimeOffset self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_CoordinatedUniversalTimeOffset ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_CoordinatedUniversalTimeOffset

        """
        return _RWStepBasic.RWStepBasic_RWCoordinatedUniversalTimeOffset_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWCoordinatedUniversalTimeOffset self, StepData_StepWriter SW, Handle_StepBasic_CoordinatedUniversalTimeOffset ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_CoordinatedUniversalTimeOffset

        """
        return _RWStepBasic.RWStepBasic_RWCoordinatedUniversalTimeOffset_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWCoordinatedUniversalTimeOffset
RWStepBasic_RWCoordinatedUniversalTimeOffset_swigregister = _RWStepBasic.RWStepBasic_RWCoordinatedUniversalTimeOffset_swigregister
RWStepBasic_RWCoordinatedUniversalTimeOffset_swigregister(RWStepBasic_RWCoordinatedUniversalTimeOffset)

class RWStepBasic_RWGroupRelationship(object):
    """Read & Write tool for GroupRelationship"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWGroupRelationship self) -> RWStepBasic_RWGroupRelationship

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWGroupRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWGroupRelationship self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_GroupRelationship ent)

        Reads GroupRelationship

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_GroupRelationship

        """
        return _RWStepBasic.RWStepBasic_RWGroupRelationship_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWGroupRelationship self, StepData_StepWriter SW, Handle_StepBasic_GroupRelationship ent)

        Writes GroupRelationship

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_GroupRelationship

        """
        return _RWStepBasic.RWStepBasic_RWGroupRelationship_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWGroupRelationship self, Handle_StepBasic_GroupRelationship ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_GroupRelationship
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWGroupRelationship_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWGroupRelationship
RWStepBasic_RWGroupRelationship_swigregister = _RWStepBasic.RWStepBasic_RWGroupRelationship_swigregister
RWStepBasic_RWGroupRelationship_swigregister(RWStepBasic_RWGroupRelationship)

class RWStepBasic_RWLocalTime(object):
    """Read & Write Module for LocalTime"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWLocalTime self) -> RWStepBasic_RWLocalTime

        Read & Write Module for LocalTime
        """
        this = _RWStepBasic.new_RWStepBasic_RWLocalTime(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWLocalTime self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_LocalTime ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_LocalTime

        """
        return _RWStepBasic.RWStepBasic_RWLocalTime_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWLocalTime self, StepData_StepWriter SW, Handle_StepBasic_LocalTime ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_LocalTime

        """
        return _RWStepBasic.RWStepBasic_RWLocalTime_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWLocalTime self, Handle_StepBasic_LocalTime ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_LocalTime
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWLocalTime_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWLocalTime
RWStepBasic_RWLocalTime_swigregister = _RWStepBasic.RWStepBasic_RWLocalTime_swigregister
RWStepBasic_RWLocalTime_swigregister(RWStepBasic_RWLocalTime)

class RWStepBasic_RWSiUnitAndRatioUnit(object):
    """Read & Write Module for SiUnitAndRatioUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWSiUnitAndRatioUnit self) -> RWStepBasic_RWSiUnitAndRatioUnit

        Read & Write Module for SiUnitAndRatioUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWSiUnitAndRatioUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWSiUnitAndRatioUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_SiUnitAndRatioUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SiUnitAndRatioUnit

        """
        return _RWStepBasic.RWStepBasic_RWSiUnitAndRatioUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWSiUnitAndRatioUnit self, StepData_StepWriter SW, Handle_StepBasic_SiUnitAndRatioUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SiUnitAndRatioUnit

        """
        return _RWStepBasic.RWStepBasic_RWSiUnitAndRatioUnit_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWSiUnitAndRatioUnit
RWStepBasic_RWSiUnitAndRatioUnit_swigregister = _RWStepBasic.RWStepBasic_RWSiUnitAndRatioUnit_swigregister
RWStepBasic_RWSiUnitAndRatioUnit_swigregister(RWStepBasic_RWSiUnitAndRatioUnit)

class RWStepBasic_RWProductDefinitionContext(object):
    """Read & Write Module for ProductDefinitionContext"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWProductDefinitionContext self) -> RWStepBasic_RWProductDefinitionContext

        Read & Write Module for ProductDefinitionContext
        """
        this = _RWStepBasic.new_RWStepBasic_RWProductDefinitionContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWProductDefinitionContext self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ProductDefinitionContext ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionContext

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionContext_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWProductDefinitionContext self, StepData_StepWriter SW, Handle_StepBasic_ProductDefinitionContext ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionContext

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionContext_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWProductDefinitionContext self, Handle_StepBasic_ProductDefinitionContext ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionContext
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionContext_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWProductDefinitionContext
RWStepBasic_RWProductDefinitionContext_swigregister = _RWStepBasic.RWStepBasic_RWProductDefinitionContext_swigregister
RWStepBasic_RWProductDefinitionContext_swigregister(RWStepBasic_RWProductDefinitionContext)

class RWStepBasic_RWAction(object):
    """Read & Write tool for Action"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWAction self) -> RWStepBasic_RWAction

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWAction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWAction self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_Action ent)

        Reads Action

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Action

        """
        return _RWStepBasic.RWStepBasic_RWAction_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWAction self, StepData_StepWriter SW, Handle_StepBasic_Action ent)

        Writes Action

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Action

        """
        return _RWStepBasic.RWStepBasic_RWAction_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWAction self, Handle_StepBasic_Action ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Action
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWAction_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWAction
RWStepBasic_RWAction_swigregister = _RWStepBasic.RWStepBasic_RWAction_swigregister
RWStepBasic_RWAction_swigregister(RWStepBasic_RWAction)

class RWStepBasic_RWAddress(object):
    """Read & Write Module for Address"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWAddress self) -> RWStepBasic_RWAddress

        Read & Write Module for Address
        """
        this = _RWStepBasic.new_RWStepBasic_RWAddress(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWAddress self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_Address ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Address

        """
        return _RWStepBasic.RWStepBasic_RWAddress_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWAddress self, StepData_StepWriter SW, Handle_StepBasic_Address ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Address

        """
        return _RWStepBasic.RWStepBasic_RWAddress_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWAddress
RWStepBasic_RWAddress_swigregister = _RWStepBasic.RWStepBasic_RWAddress_swigregister
RWStepBasic_RWAddress_swigregister(RWStepBasic_RWAddress)

class RWStepBasic_RWApplicationContextElement(object):
    """Read & Write Module for ApplicationContextElement"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWApplicationContextElement self) -> RWStepBasic_RWApplicationContextElement

        Read & Write Module for ApplicationContextElement
        """
        this = _RWStepBasic.new_RWStepBasic_RWApplicationContextElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWApplicationContextElement self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ApplicationContextElement ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ApplicationContextElement

        """
        return _RWStepBasic.RWStepBasic_RWApplicationContextElement_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWApplicationContextElement self, StepData_StepWriter SW, Handle_StepBasic_ApplicationContextElement ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ApplicationContextElement

        """
        return _RWStepBasic.RWStepBasic_RWApplicationContextElement_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWApplicationContextElement self, Handle_StepBasic_ApplicationContextElement ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ApplicationContextElement
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWApplicationContextElement_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWApplicationContextElement
RWStepBasic_RWApplicationContextElement_swigregister = _RWStepBasic.RWStepBasic_RWApplicationContextElement_swigregister
RWStepBasic_RWApplicationContextElement_swigregister(RWStepBasic_RWApplicationContextElement)

class RWStepBasic_RWEulerAngles(object):
    """Read & Write tool for EulerAngles"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWEulerAngles self) -> RWStepBasic_RWEulerAngles

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWEulerAngles(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWEulerAngles self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_EulerAngles ent)

        Reads EulerAngles

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_EulerAngles

        """
        return _RWStepBasic.RWStepBasic_RWEulerAngles_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWEulerAngles self, StepData_StepWriter SW, Handle_StepBasic_EulerAngles ent)

        Writes EulerAngles

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_EulerAngles

        """
        return _RWStepBasic.RWStepBasic_RWEulerAngles_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWEulerAngles self, Handle_StepBasic_EulerAngles ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_EulerAngles
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWEulerAngles_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWEulerAngles
RWStepBasic_RWEulerAngles_swigregister = _RWStepBasic.RWStepBasic_RWEulerAngles_swigregister
RWStepBasic_RWEulerAngles_swigregister(RWStepBasic_RWEulerAngles)

class RWStepBasic_RWCertificationAssignment(object):
    """Read & Write tool for CertificationAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWCertificationAssignment self) -> RWStepBasic_RWCertificationAssignment

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWCertificationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWCertificationAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_CertificationAssignment ent)

        Reads CertificationAssignment

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_CertificationAssignment

        """
        return _RWStepBasic.RWStepBasic_RWCertificationAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWCertificationAssignment self, StepData_StepWriter SW, Handle_StepBasic_CertificationAssignment ent)

        Writes CertificationAssignment

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_CertificationAssignment

        """
        return _RWStepBasic.RWStepBasic_RWCertificationAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWCertificationAssignment self, Handle_StepBasic_CertificationAssignment ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_CertificationAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWCertificationAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWCertificationAssignment
RWStepBasic_RWCertificationAssignment_swigregister = _RWStepBasic.RWStepBasic_RWCertificationAssignment_swigregister
RWStepBasic_RWCertificationAssignment_swigregister(RWStepBasic_RWCertificationAssignment)

class RWStepBasic_RWDocumentType(object):
    """Read & Write Module for DocumentType"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWDocumentType self) -> RWStepBasic_RWDocumentType

        Read & Write Module for DocumentType
        """
        this = _RWStepBasic.new_RWStepBasic_RWDocumentType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWDocumentType self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_DocumentType ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentType

        """
        return _RWStepBasic.RWStepBasic_RWDocumentType_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWDocumentType self, StepData_StepWriter SW, Handle_StepBasic_DocumentType ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentType

        """
        return _RWStepBasic.RWStepBasic_RWDocumentType_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWDocumentType self, Handle_StepBasic_DocumentType ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentType
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWDocumentType_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWDocumentType
RWStepBasic_RWDocumentType_swigregister = _RWStepBasic.RWStepBasic_RWDocumentType_swigregister
RWStepBasic_RWDocumentType_swigregister(RWStepBasic_RWDocumentType)

class RWStepBasic_RWProductDefinitionWithAssociatedDocuments(object):
    """Read & Write Module for ProductDefinitionWithAssociatedDocuments"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWProductDefinitionWithAssociatedDocuments self) -> RWStepBasic_RWProductDefinitionWithAssociatedDocuments

        Read & Write Module for ProductDefinitionWithAssociatedDocuments
        """
        this = _RWStepBasic.new_RWStepBasic_RWProductDefinitionWithAssociatedDocuments(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWProductDefinitionWithAssociatedDocuments self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ProductDefinitionWithAssociatedDocuments ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionWithAssociatedDocuments

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionWithAssociatedDocuments_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWProductDefinitionWithAssociatedDocuments self, StepData_StepWriter SW, Handle_StepBasic_ProductDefinitionWithAssociatedDocuments ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionWithAssociatedDocuments

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionWithAssociatedDocuments_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWProductDefinitionWithAssociatedDocuments self, Handle_StepBasic_ProductDefinitionWithAssociatedDocuments ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionWithAssociatedDocuments
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionWithAssociatedDocuments_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWProductDefinitionWithAssociatedDocuments
RWStepBasic_RWProductDefinitionWithAssociatedDocuments_swigregister = _RWStepBasic.RWStepBasic_RWProductDefinitionWithAssociatedDocuments_swigregister
RWStepBasic_RWProductDefinitionWithAssociatedDocuments_swigregister(RWStepBasic_RWProductDefinitionWithAssociatedDocuments)

class RWStepBasic_RWRatioMeasureWithUnit(object):
    """Read & Write Module for RatioMeasureWithUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWRatioMeasureWithUnit self) -> RWStepBasic_RWRatioMeasureWithUnit

        Read & Write Module for RatioMeasureWithUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWRatioMeasureWithUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWRatioMeasureWithUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_RatioMeasureWithUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_RatioMeasureWithUnit

        """
        return _RWStepBasic.RWStepBasic_RWRatioMeasureWithUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWRatioMeasureWithUnit self, StepData_StepWriter SW, Handle_StepBasic_RatioMeasureWithUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_RatioMeasureWithUnit

        """
        return _RWStepBasic.RWStepBasic_RWRatioMeasureWithUnit_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWRatioMeasureWithUnit self, Handle_StepBasic_RatioMeasureWithUnit ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_RatioMeasureWithUnit
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWRatioMeasureWithUnit_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWRatioMeasureWithUnit
RWStepBasic_RWRatioMeasureWithUnit_swigregister = _RWStepBasic.RWStepBasic_RWRatioMeasureWithUnit_swigregister
RWStepBasic_RWRatioMeasureWithUnit_swigregister(RWStepBasic_RWRatioMeasureWithUnit)

class RWStepBasic_RWPersonAndOrganizationRole(object):
    """Read & Write Module for PersonAndOrganizationRole"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWPersonAndOrganizationRole self) -> RWStepBasic_RWPersonAndOrganizationRole

        Read & Write Module for PersonAndOrganizationRole
        """
        this = _RWStepBasic.new_RWStepBasic_RWPersonAndOrganizationRole(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWPersonAndOrganizationRole self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_PersonAndOrganizationRole ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganizationRole

        """
        return _RWStepBasic.RWStepBasic_RWPersonAndOrganizationRole_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWPersonAndOrganizationRole self, StepData_StepWriter SW, Handle_StepBasic_PersonAndOrganizationRole ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganizationRole

        """
        return _RWStepBasic.RWStepBasic_RWPersonAndOrganizationRole_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWPersonAndOrganizationRole
RWStepBasic_RWPersonAndOrganizationRole_swigregister = _RWStepBasic.RWStepBasic_RWPersonAndOrganizationRole_swigregister
RWStepBasic_RWPersonAndOrganizationRole_swigregister(RWStepBasic_RWPersonAndOrganizationRole)

class RWStepBasic_RWProductType(object):
    """Read & Write Module for ProductType"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWProductType self) -> RWStepBasic_RWProductType

        Read & Write Module for ProductType
        """
        this = _RWStepBasic.new_RWStepBasic_RWProductType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWProductType self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ProductType ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductType

        """
        return _RWStepBasic.RWStepBasic_RWProductType_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWProductType self, StepData_StepWriter SW, Handle_StepBasic_ProductType ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductType

        """
        return _RWStepBasic.RWStepBasic_RWProductType_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWProductType self, Handle_StepBasic_ProductType ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductType
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWProductType_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWProductType
RWStepBasic_RWProductType_swigregister = _RWStepBasic.RWStepBasic_RWProductType_swigregister
RWStepBasic_RWProductType_swigregister(RWStepBasic_RWProductType)

class RWStepBasic_RWContractType(object):
    """Read & Write tool for ContractType"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWContractType self) -> RWStepBasic_RWContractType

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWContractType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWContractType self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ContractType ent)

        Reads ContractType

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ContractType

        """
        return _RWStepBasic.RWStepBasic_RWContractType_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWContractType self, StepData_StepWriter SW, Handle_StepBasic_ContractType ent)

        Writes ContractType

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ContractType

        """
        return _RWStepBasic.RWStepBasic_RWContractType_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWContractType self, Handle_StepBasic_ContractType ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ContractType
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWContractType_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWContractType
RWStepBasic_RWContractType_swigregister = _RWStepBasic.RWStepBasic_RWContractType_swigregister
RWStepBasic_RWContractType_swigregister(RWStepBasic_RWContractType)

class RWStepBasic_RWProductCategoryRelationship(object):
    """Read & Write tool for ProductCategoryRelationship"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWProductCategoryRelationship self) -> RWStepBasic_RWProductCategoryRelationship

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWProductCategoryRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWProductCategoryRelationship self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ProductCategoryRelationship ent)

        Reads ProductCategoryRelationship

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductCategoryRelationship

        """
        return _RWStepBasic.RWStepBasic_RWProductCategoryRelationship_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWProductCategoryRelationship self, StepData_StepWriter SW, Handle_StepBasic_ProductCategoryRelationship ent)

        Writes ProductCategoryRelationship

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductCategoryRelationship

        """
        return _RWStepBasic.RWStepBasic_RWProductCategoryRelationship_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWProductCategoryRelationship self, Handle_StepBasic_ProductCategoryRelationship ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductCategoryRelationship
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWProductCategoryRelationship_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWProductCategoryRelationship
RWStepBasic_RWProductCategoryRelationship_swigregister = _RWStepBasic.RWStepBasic_RWProductCategoryRelationship_swigregister
RWStepBasic_RWProductCategoryRelationship_swigregister(RWStepBasic_RWProductCategoryRelationship)

class RWStepBasic_RWPlaneAngleMeasureWithUnit(object):
    """Read & Write Module for PlaneAngleMeasureWithUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWPlaneAngleMeasureWithUnit self) -> RWStepBasic_RWPlaneAngleMeasureWithUnit

        Read & Write Module for PlaneAngleMeasureWithUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWPlaneAngleMeasureWithUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWPlaneAngleMeasureWithUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_PlaneAngleMeasureWithUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit

        """
        return _RWStepBasic.RWStepBasic_RWPlaneAngleMeasureWithUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWPlaneAngleMeasureWithUnit self, StepData_StepWriter SW, Handle_StepBasic_PlaneAngleMeasureWithUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit

        """
        return _RWStepBasic.RWStepBasic_RWPlaneAngleMeasureWithUnit_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWPlaneAngleMeasureWithUnit self, Handle_StepBasic_PlaneAngleMeasureWithUnit ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_PlaneAngleMeasureWithUnit
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWPlaneAngleMeasureWithUnit_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWPlaneAngleMeasureWithUnit
RWStepBasic_RWPlaneAngleMeasureWithUnit_swigregister = _RWStepBasic.RWStepBasic_RWPlaneAngleMeasureWithUnit_swigregister
RWStepBasic_RWPlaneAngleMeasureWithUnit_swigregister(RWStepBasic_RWPlaneAngleMeasureWithUnit)

class RWStepBasic_RWCertificationType(object):
    """Read & Write tool for CertificationType"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWCertificationType self) -> RWStepBasic_RWCertificationType

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWCertificationType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWCertificationType self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_CertificationType ent)

        Reads CertificationType

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_CertificationType

        """
        return _RWStepBasic.RWStepBasic_RWCertificationType_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWCertificationType self, StepData_StepWriter SW, Handle_StepBasic_CertificationType ent)

        Writes CertificationType

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_CertificationType

        """
        return _RWStepBasic.RWStepBasic_RWCertificationType_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWCertificationType self, Handle_StepBasic_CertificationType ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_CertificationType
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWCertificationType_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWCertificationType
RWStepBasic_RWCertificationType_swigregister = _RWStepBasic.RWStepBasic_RWCertificationType_swigregister
RWStepBasic_RWCertificationType_swigregister(RWStepBasic_RWCertificationType)

class RWStepBasic_RWProductRelatedProductCategory(object):
    """Read & Write Module for ProductRelatedProductCategory"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWProductRelatedProductCategory self) -> RWStepBasic_RWProductRelatedProductCategory

        Read & Write Module for ProductRelatedProductCategory
        """
        this = _RWStepBasic.new_RWStepBasic_RWProductRelatedProductCategory(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWProductRelatedProductCategory self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ProductRelatedProductCategory ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductRelatedProductCategory

        """
        return _RWStepBasic.RWStepBasic_RWProductRelatedProductCategory_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWProductRelatedProductCategory self, StepData_StepWriter SW, Handle_StepBasic_ProductRelatedProductCategory ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductRelatedProductCategory

        """
        return _RWStepBasic.RWStepBasic_RWProductRelatedProductCategory_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWProductRelatedProductCategory self, Handle_StepBasic_ProductRelatedProductCategory ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductRelatedProductCategory
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWProductRelatedProductCategory_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWProductRelatedProductCategory
RWStepBasic_RWProductRelatedProductCategory_swigregister = _RWStepBasic.RWStepBasic_RWProductRelatedProductCategory_swigregister
RWStepBasic_RWProductRelatedProductCategory_swigregister(RWStepBasic_RWProductRelatedProductCategory)

class RWStepBasic_RWConversionBasedUnitAndSolidAngleUnit(object):
    """Read & Write Module for ConversionBasedUnitAndSolidAngleUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWConversionBasedUnitAndSolidAngleUnit self) -> RWStepBasic_RWConversionBasedUnitAndSolidAngleUnit

        Read & Write Module for ConversionBasedUnitAndSolidAngleUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWConversionBasedUnitAndSolidAngleUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWConversionBasedUnitAndSolidAngleUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndSolidAngleUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWConversionBasedUnitAndSolidAngleUnit self, StepData_StepWriter SW, Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndSolidAngleUnit_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWConversionBasedUnitAndSolidAngleUnit self, Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnitAndSolidAngleUnit
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndSolidAngleUnit_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWConversionBasedUnitAndSolidAngleUnit
RWStepBasic_RWConversionBasedUnitAndSolidAngleUnit_swigregister = _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndSolidAngleUnit_swigregister
RWStepBasic_RWConversionBasedUnitAndSolidAngleUnit_swigregister(RWStepBasic_RWConversionBasedUnitAndSolidAngleUnit)

class RWStepBasic_RWProductDefinitionFormationWithSpecifiedSource(object):
    """Read & Write Module for ProductDefinitionFormationWithSpecifiedSource"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWProductDefinitionFormationWithSpecifiedSource self) -> RWStepBasic_RWProductDefinitionFormationWithSpecifiedSource

        Read & Write Module for ProductDefinitionFormationWithSpecifiedSource
        """
        this = _RWStepBasic.new_RWStepBasic_RWProductDefinitionFormationWithSpecifiedSource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWProductDefinitionFormationWithSpecifiedSource self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionFormationWithSpecifiedSource_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWProductDefinitionFormationWithSpecifiedSource self, StepData_StepWriter SW, Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionFormationWithSpecifiedSource_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWProductDefinitionFormationWithSpecifiedSource self, Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionFormationWithSpecifiedSource
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionFormationWithSpecifiedSource_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWProductDefinitionFormationWithSpecifiedSource
RWStepBasic_RWProductDefinitionFormationWithSpecifiedSource_swigregister = _RWStepBasic.RWStepBasic_RWProductDefinitionFormationWithSpecifiedSource_swigregister
RWStepBasic_RWProductDefinitionFormationWithSpecifiedSource_swigregister(RWStepBasic_RWProductDefinitionFormationWithSpecifiedSource)

class RWStepBasic_RWApprovalDateTime(object):
    """Read & Write Module for ApprovalDateTime"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWApprovalDateTime self) -> RWStepBasic_RWApprovalDateTime

        Read & Write Module for ApprovalDateTime
        """
        this = _RWStepBasic.new_RWStepBasic_RWApprovalDateTime(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWApprovalDateTime self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ApprovalDateTime ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ApprovalDateTime

        """
        return _RWStepBasic.RWStepBasic_RWApprovalDateTime_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWApprovalDateTime self, StepData_StepWriter SW, Handle_StepBasic_ApprovalDateTime ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ApprovalDateTime

        """
        return _RWStepBasic.RWStepBasic_RWApprovalDateTime_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWApprovalDateTime self, Handle_StepBasic_ApprovalDateTime ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ApprovalDateTime
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWApprovalDateTime_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWApprovalDateTime
RWStepBasic_RWApprovalDateTime_swigregister = _RWStepBasic.RWStepBasic_RWApprovalDateTime_swigregister
RWStepBasic_RWApprovalDateTime_swigregister(RWStepBasic_RWApprovalDateTime)

class RWStepBasic_RWSiUnitAndAreaUnit(object):
    """Read & Write Module for SiUnitAndAreaUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWSiUnitAndAreaUnit self) -> RWStepBasic_RWSiUnitAndAreaUnit

        Read & Write Module for SiUnitAndAreaUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWSiUnitAndAreaUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWSiUnitAndAreaUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_SiUnitAndAreaUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SiUnitAndAreaUnit

        """
        return _RWStepBasic.RWStepBasic_RWSiUnitAndAreaUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWSiUnitAndAreaUnit self, StepData_StepWriter SW, Handle_StepBasic_SiUnitAndAreaUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SiUnitAndAreaUnit

        """
        return _RWStepBasic.RWStepBasic_RWSiUnitAndAreaUnit_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWSiUnitAndAreaUnit
RWStepBasic_RWSiUnitAndAreaUnit_swigregister = _RWStepBasic.RWStepBasic_RWSiUnitAndAreaUnit_swigregister
RWStepBasic_RWSiUnitAndAreaUnit_swigregister(RWStepBasic_RWSiUnitAndAreaUnit)

class RWStepBasic_RWCertification(object):
    """Read & Write tool for Certification"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWCertification self) -> RWStepBasic_RWCertification

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWCertification(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWCertification self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_Certification ent)

        Reads Certification

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Certification

        """
        return _RWStepBasic.RWStepBasic_RWCertification_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWCertification self, StepData_StepWriter SW, Handle_StepBasic_Certification ent)

        Writes Certification

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Certification

        """
        return _RWStepBasic.RWStepBasic_RWCertification_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWCertification self, Handle_StepBasic_Certification ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Certification
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWCertification_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWCertification
RWStepBasic_RWCertification_swigregister = _RWStepBasic.RWStepBasic_RWCertification_swigregister
RWStepBasic_RWCertification_swigregister(RWStepBasic_RWCertification)

class RWStepBasic_RWProductDefinitionRelationship(object):
    """Read & Write tool for ProductDefinitionRelationship"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWProductDefinitionRelationship self) -> RWStepBasic_RWProductDefinitionRelationship

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWProductDefinitionRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWProductDefinitionRelationship self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ProductDefinitionRelationship ent)

        Reads ProductDefinitionRelationship

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionRelationship

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionRelationship_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWProductDefinitionRelationship self, StepData_StepWriter SW, Handle_StepBasic_ProductDefinitionRelationship ent)

        Writes ProductDefinitionRelationship

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionRelationship

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionRelationship_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWProductDefinitionRelationship self, Handle_StepBasic_ProductDefinitionRelationship ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionRelationship
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionRelationship_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWProductDefinitionRelationship
RWStepBasic_RWProductDefinitionRelationship_swigregister = _RWStepBasic.RWStepBasic_RWProductDefinitionRelationship_swigregister
RWStepBasic_RWProductDefinitionRelationship_swigregister(RWStepBasic_RWProductDefinitionRelationship)

class RWStepBasic_RWMassUnit(object):
    """Read & Write tool for MassUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWMassUnit self) -> RWStepBasic_RWMassUnit

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWMassUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWMassUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_MassUnit ent)

        Reads MassUnit

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_MassUnit

        """
        return _RWStepBasic.RWStepBasic_RWMassUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWMassUnit self, StepData_StepWriter SW, Handle_StepBasic_MassUnit ent)

        Writes MassUnit

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_MassUnit

        """
        return _RWStepBasic.RWStepBasic_RWMassUnit_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWMassUnit self, Handle_StepBasic_MassUnit ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_MassUnit
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWMassUnit_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWMassUnit
RWStepBasic_RWMassUnit_swigregister = _RWStepBasic.RWStepBasic_RWMassUnit_swigregister
RWStepBasic_RWMassUnit_swigregister(RWStepBasic_RWMassUnit)

class RWStepBasic_RWDimensionalExponents(object):
    """Read & Write Module for DimensionalExponents"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWDimensionalExponents self) -> RWStepBasic_RWDimensionalExponents

        Read & Write Module for DimensionalExponents
        """
        this = _RWStepBasic.new_RWStepBasic_RWDimensionalExponents(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWDimensionalExponents self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_DimensionalExponents ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DimensionalExponents

        """
        return _RWStepBasic.RWStepBasic_RWDimensionalExponents_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWDimensionalExponents self, StepData_StepWriter SW, Handle_StepBasic_DimensionalExponents ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DimensionalExponents

        """
        return _RWStepBasic.RWStepBasic_RWDimensionalExponents_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWDimensionalExponents
RWStepBasic_RWDimensionalExponents_swigregister = _RWStepBasic.RWStepBasic_RWDimensionalExponents_swigregister
RWStepBasic_RWDimensionalExponents_swigregister(RWStepBasic_RWDimensionalExponents)

class RWStepBasic_RWProduct(object):
    """Read & Write Module for Product"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWProduct self) -> RWStepBasic_RWProduct

        Read & Write Module for Product
        """
        this = _RWStepBasic.new_RWStepBasic_RWProduct(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWProduct self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_Product ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Product

        """
        return _RWStepBasic.RWStepBasic_RWProduct_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWProduct self, StepData_StepWriter SW, Handle_StepBasic_Product ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Product

        """
        return _RWStepBasic.RWStepBasic_RWProduct_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWProduct self, Handle_StepBasic_Product ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Product
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWProduct_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWProduct
RWStepBasic_RWProduct_swigregister = _RWStepBasic.RWStepBasic_RWProduct_swigregister
RWStepBasic_RWProduct_swigregister(RWStepBasic_RWProduct)

class RWStepBasic_RWLengthMeasureWithUnit(object):
    """Read & Write Module for LengthMeasureWithUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWLengthMeasureWithUnit self) -> RWStepBasic_RWLengthMeasureWithUnit

        Read & Write Module for LengthMeasureWithUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWLengthMeasureWithUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWLengthMeasureWithUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_LengthMeasureWithUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _RWStepBasic.RWStepBasic_RWLengthMeasureWithUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWLengthMeasureWithUnit self, StepData_StepWriter SW, Handle_StepBasic_LengthMeasureWithUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit

        """
        return _RWStepBasic.RWStepBasic_RWLengthMeasureWithUnit_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWLengthMeasureWithUnit self, Handle_StepBasic_LengthMeasureWithUnit ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_LengthMeasureWithUnit
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWLengthMeasureWithUnit_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWLengthMeasureWithUnit
RWStepBasic_RWLengthMeasureWithUnit_swigregister = _RWStepBasic.RWStepBasic_RWLengthMeasureWithUnit_swigregister
RWStepBasic_RWLengthMeasureWithUnit_swigregister(RWStepBasic_RWLengthMeasureWithUnit)

class RWStepBasic_RWDocumentRepresentationType(object):
    """Read & Write tool for DocumentRepresentationType"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWDocumentRepresentationType self) -> RWStepBasic_RWDocumentRepresentationType

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWDocumentRepresentationType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWDocumentRepresentationType self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_DocumentRepresentationType ent)

        Reads DocumentRepresentationType

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentRepresentationType

        """
        return _RWStepBasic.RWStepBasic_RWDocumentRepresentationType_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWDocumentRepresentationType self, StepData_StepWriter SW, Handle_StepBasic_DocumentRepresentationType ent)

        Writes DocumentRepresentationType

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentRepresentationType

        """
        return _RWStepBasic.RWStepBasic_RWDocumentRepresentationType_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWDocumentRepresentationType self, Handle_StepBasic_DocumentRepresentationType ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentRepresentationType
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWDocumentRepresentationType_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWDocumentRepresentationType
RWStepBasic_RWDocumentRepresentationType_swigregister = _RWStepBasic.RWStepBasic_RWDocumentRepresentationType_swigregister
RWStepBasic_RWDocumentRepresentationType_swigregister(RWStepBasic_RWDocumentRepresentationType)

class RWStepBasic_RWDateTimeRole(object):
    """Read & Write Module for DateTimeRole"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWDateTimeRole self) -> RWStepBasic_RWDateTimeRole

        Read & Write Module for DateTimeRole
        """
        this = _RWStepBasic.new_RWStepBasic_RWDateTimeRole(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWDateTimeRole self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_DateTimeRole ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DateTimeRole

        """
        return _RWStepBasic.RWStepBasic_RWDateTimeRole_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWDateTimeRole self, StepData_StepWriter SW, Handle_StepBasic_DateTimeRole ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DateTimeRole

        """
        return _RWStepBasic.RWStepBasic_RWDateTimeRole_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWDateTimeRole
RWStepBasic_RWDateTimeRole_swigregister = _RWStepBasic.RWStepBasic_RWDateTimeRole_swigregister
RWStepBasic_RWDateTimeRole_swigregister(RWStepBasic_RWDateTimeRole)

class RWStepBasic_RWConversionBasedUnitAndAreaUnit(object):
    """Read & Write Module for RWConversionBasedUnitAndAreaUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWConversionBasedUnitAndAreaUnit self) -> RWStepBasic_RWConversionBasedUnitAndAreaUnit

        Read & Write Module for RWConversionBasedUnitAndAreaUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWConversionBasedUnitAndAreaUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWConversionBasedUnitAndAreaUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ConversionBasedUnitAndAreaUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnitAndAreaUnit

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndAreaUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWConversionBasedUnitAndAreaUnit self, StepData_StepWriter SW, Handle_StepBasic_ConversionBasedUnitAndAreaUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnitAndAreaUnit

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndAreaUnit_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWConversionBasedUnitAndAreaUnit self, Handle_StepBasic_ConversionBasedUnitAndAreaUnit ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnitAndAreaUnit
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndAreaUnit_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWConversionBasedUnitAndAreaUnit
RWStepBasic_RWConversionBasedUnitAndAreaUnit_swigregister = _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndAreaUnit_swigregister
RWStepBasic_RWConversionBasedUnitAndAreaUnit_swigregister(RWStepBasic_RWConversionBasedUnitAndAreaUnit)

class RWStepBasic_RWProductContext(object):
    """Read & Write Module for ProductContext"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWProductContext self) -> RWStepBasic_RWProductContext

        Read & Write Module for ProductContext
        """
        this = _RWStepBasic.new_RWStepBasic_RWProductContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWProductContext self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ProductContext ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductContext

        """
        return _RWStepBasic.RWStepBasic_RWProductContext_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWProductContext self, StepData_StepWriter SW, Handle_StepBasic_ProductContext ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductContext

        """
        return _RWStepBasic.RWStepBasic_RWProductContext_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWProductContext self, Handle_StepBasic_ProductContext ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductContext
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWProductContext_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWProductContext
RWStepBasic_RWProductContext_swigregister = _RWStepBasic.RWStepBasic_RWProductContext_swigregister
RWStepBasic_RWProductContext_swigregister(RWStepBasic_RWProductContext)

class RWStepBasic_RWConversionBasedUnitAndPlaneAngleUnit(object):
    """Read & Write Module for ConversionBasedUnitAndPlaneAngleUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWConversionBasedUnitAndPlaneAngleUnit self) -> RWStepBasic_RWConversionBasedUnitAndPlaneAngleUnit

        Read & Write Module for ConversionBasedUnitAndPlaneAngleUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWConversionBasedUnitAndPlaneAngleUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWConversionBasedUnitAndPlaneAngleUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndPlaneAngleUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWConversionBasedUnitAndPlaneAngleUnit self, StepData_StepWriter SW, Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndPlaneAngleUnit_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWConversionBasedUnitAndPlaneAngleUnit self, Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnitAndPlaneAngleUnit
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndPlaneAngleUnit_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWConversionBasedUnitAndPlaneAngleUnit
RWStepBasic_RWConversionBasedUnitAndPlaneAngleUnit_swigregister = _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndPlaneAngleUnit_swigregister
RWStepBasic_RWConversionBasedUnitAndPlaneAngleUnit_swigregister(RWStepBasic_RWConversionBasedUnitAndPlaneAngleUnit)

class RWStepBasic_RWRoleAssociation(object):
    """Read & Write tool for RoleAssociation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWRoleAssociation self) -> RWStepBasic_RWRoleAssociation

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWRoleAssociation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWRoleAssociation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_RoleAssociation ent)

        Reads RoleAssociation

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_RoleAssociation

        """
        return _RWStepBasic.RWStepBasic_RWRoleAssociation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWRoleAssociation self, StepData_StepWriter SW, Handle_StepBasic_RoleAssociation ent)

        Writes RoleAssociation

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_RoleAssociation

        """
        return _RWStepBasic.RWStepBasic_RWRoleAssociation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWRoleAssociation self, Handle_StepBasic_RoleAssociation ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_RoleAssociation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWRoleAssociation_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWRoleAssociation
RWStepBasic_RWRoleAssociation_swigregister = _RWStepBasic.RWStepBasic_RWRoleAssociation_swigregister
RWStepBasic_RWRoleAssociation_swigregister(RWStepBasic_RWRoleAssociation)

class RWStepBasic_RWOrganizationalAddress(object):
    """Read & Write Module for OrganizationalAddress"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWOrganizationalAddress self) -> RWStepBasic_RWOrganizationalAddress

        Read & Write Module for OrganizationalAddress
        """
        this = _RWStepBasic.new_RWStepBasic_RWOrganizationalAddress(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWOrganizationalAddress self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_OrganizationalAddress ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_OrganizationalAddress

        """
        return _RWStepBasic.RWStepBasic_RWOrganizationalAddress_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWOrganizationalAddress self, StepData_StepWriter SW, Handle_StepBasic_OrganizationalAddress ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_OrganizationalAddress

        """
        return _RWStepBasic.RWStepBasic_RWOrganizationalAddress_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWOrganizationalAddress self, Handle_StepBasic_OrganizationalAddress ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_OrganizationalAddress
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWOrganizationalAddress_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWOrganizationalAddress
RWStepBasic_RWOrganizationalAddress_swigregister = _RWStepBasic.RWStepBasic_RWOrganizationalAddress_swigregister
RWStepBasic_RWOrganizationalAddress_swigregister(RWStepBasic_RWOrganizationalAddress)

class RWStepBasic_RWActionRequestAssignment(object):
    """Read & Write tool for ActionRequestAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWActionRequestAssignment self) -> RWStepBasic_RWActionRequestAssignment

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWActionRequestAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWActionRequestAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ActionRequestAssignment ent)

        Reads ActionRequestAssignment

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ActionRequestAssignment

        """
        return _RWStepBasic.RWStepBasic_RWActionRequestAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWActionRequestAssignment self, StepData_StepWriter SW, Handle_StepBasic_ActionRequestAssignment ent)

        Writes ActionRequestAssignment

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ActionRequestAssignment

        """
        return _RWStepBasic.RWStepBasic_RWActionRequestAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWActionRequestAssignment self, Handle_StepBasic_ActionRequestAssignment ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ActionRequestAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWActionRequestAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWActionRequestAssignment
RWStepBasic_RWActionRequestAssignment_swigregister = _RWStepBasic.RWStepBasic_RWActionRequestAssignment_swigregister
RWStepBasic_RWActionRequestAssignment_swigregister(RWStepBasic_RWActionRequestAssignment)

class RWStepBasic_RWSiUnitAndTimeUnit(object):
    """Read & Write Module for SiUnitAndTimeUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWSiUnitAndTimeUnit self) -> RWStepBasic_RWSiUnitAndTimeUnit

        Read & Write Module for SiUnitAndTimeUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWSiUnitAndTimeUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWSiUnitAndTimeUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_SiUnitAndTimeUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SiUnitAndTimeUnit

        """
        return _RWStepBasic.RWStepBasic_RWSiUnitAndTimeUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWSiUnitAndTimeUnit self, StepData_StepWriter SW, Handle_StepBasic_SiUnitAndTimeUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SiUnitAndTimeUnit

        """
        return _RWStepBasic.RWStepBasic_RWSiUnitAndTimeUnit_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWSiUnitAndTimeUnit
RWStepBasic_RWSiUnitAndTimeUnit_swigregister = _RWStepBasic.RWStepBasic_RWSiUnitAndTimeUnit_swigregister
RWStepBasic_RWSiUnitAndTimeUnit_swigregister(RWStepBasic_RWSiUnitAndTimeUnit)

class RWStepBasic_RWSolidAngleUnit(object):
    """Read & Write Module for SolidAngleUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWSolidAngleUnit self) -> RWStepBasic_RWSolidAngleUnit

        Read & Write Module for SolidAngleUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWSolidAngleUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWSolidAngleUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_SolidAngleUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SolidAngleUnit

        """
        return _RWStepBasic.RWStepBasic_RWSolidAngleUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWSolidAngleUnit self, StepData_StepWriter SW, Handle_StepBasic_SolidAngleUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SolidAngleUnit

        """
        return _RWStepBasic.RWStepBasic_RWSolidAngleUnit_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWSolidAngleUnit self, Handle_StepBasic_SolidAngleUnit ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SolidAngleUnit
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWSolidAngleUnit_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWSolidAngleUnit
RWStepBasic_RWSolidAngleUnit_swigregister = _RWStepBasic.RWStepBasic_RWSolidAngleUnit_swigregister
RWStepBasic_RWSolidAngleUnit_swigregister(RWStepBasic_RWSolidAngleUnit)

class RWStepBasic_RWCalendarDate(object):
    """Read & Write Module for CalendarDate"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWCalendarDate self) -> RWStepBasic_RWCalendarDate

        Read & Write Module for CalendarDate
        """
        this = _RWStepBasic.new_RWStepBasic_RWCalendarDate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWCalendarDate self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_CalendarDate ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_CalendarDate

        """
        return _RWStepBasic.RWStepBasic_RWCalendarDate_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWCalendarDate self, StepData_StepWriter SW, Handle_StepBasic_CalendarDate ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_CalendarDate

        """
        return _RWStepBasic.RWStepBasic_RWCalendarDate_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWCalendarDate
RWStepBasic_RWCalendarDate_swigregister = _RWStepBasic.RWStepBasic_RWCalendarDate_swigregister
RWStepBasic_RWCalendarDate_swigregister(RWStepBasic_RWCalendarDate)

class RWStepBasic_RWEffectivityAssignment(object):
    """Read & Write tool for EffectivityAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWEffectivityAssignment self) -> RWStepBasic_RWEffectivityAssignment

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWEffectivityAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWEffectivityAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_EffectivityAssignment ent)

        Reads EffectivityAssignment

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_EffectivityAssignment

        """
        return _RWStepBasic.RWStepBasic_RWEffectivityAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWEffectivityAssignment self, StepData_StepWriter SW, Handle_StepBasic_EffectivityAssignment ent)

        Writes EffectivityAssignment

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_EffectivityAssignment

        """
        return _RWStepBasic.RWStepBasic_RWEffectivityAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWEffectivityAssignment self, Handle_StepBasic_EffectivityAssignment ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_EffectivityAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWEffectivityAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWEffectivityAssignment
RWStepBasic_RWEffectivityAssignment_swigregister = _RWStepBasic.RWStepBasic_RWEffectivityAssignment_swigregister
RWStepBasic_RWEffectivityAssignment_swigregister(RWStepBasic_RWEffectivityAssignment)

class RWStepBasic_RWConversionBasedUnitAndRatioUnit(object):
    """Read & Write Module for ConversionBasedUnitAndRatioUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWConversionBasedUnitAndRatioUnit self) -> RWStepBasic_RWConversionBasedUnitAndRatioUnit

        Read & Write Module for ConversionBasedUnitAndRatioUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWConversionBasedUnitAndRatioUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWConversionBasedUnitAndRatioUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ConversionBasedUnitAndRatioUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnitAndRatioUnit

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndRatioUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWConversionBasedUnitAndRatioUnit self, StepData_StepWriter SW, Handle_StepBasic_ConversionBasedUnitAndRatioUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnitAndRatioUnit

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndRatioUnit_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWConversionBasedUnitAndRatioUnit self, Handle_StepBasic_ConversionBasedUnitAndRatioUnit ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnitAndRatioUnit
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndRatioUnit_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWConversionBasedUnitAndRatioUnit
RWStepBasic_RWConversionBasedUnitAndRatioUnit_swigregister = _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndRatioUnit_swigregister
RWStepBasic_RWConversionBasedUnitAndRatioUnit_swigregister(RWStepBasic_RWConversionBasedUnitAndRatioUnit)

class RWStepBasic_RWConversionBasedUnitAndVolumeUnit(object):
    """Read & Write Module for ConversionBasedUnitAndVolumeUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWConversionBasedUnitAndVolumeUnit self) -> RWStepBasic_RWConversionBasedUnitAndVolumeUnit

        Read & Write Module for ConversionBasedUnitAndVolumeUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWConversionBasedUnitAndVolumeUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWConversionBasedUnitAndVolumeUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ConversionBasedUnitAndVolumeUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnitAndVolumeUnit

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndVolumeUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWConversionBasedUnitAndVolumeUnit self, StepData_StepWriter SW, Handle_StepBasic_ConversionBasedUnitAndVolumeUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnitAndVolumeUnit

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndVolumeUnit_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWConversionBasedUnitAndVolumeUnit self, Handle_StepBasic_ConversionBasedUnitAndVolumeUnit ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnitAndVolumeUnit
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndVolumeUnit_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWConversionBasedUnitAndVolumeUnit
RWStepBasic_RWConversionBasedUnitAndVolumeUnit_swigregister = _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndVolumeUnit_swigregister
RWStepBasic_RWConversionBasedUnitAndVolumeUnit_swigregister(RWStepBasic_RWConversionBasedUnitAndVolumeUnit)

class RWStepBasic_RWDateRole(object):
    """Read & Write Module for DateRole"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWDateRole self) -> RWStepBasic_RWDateRole

        Read & Write Module for DateRole
        """
        this = _RWStepBasic.new_RWStepBasic_RWDateRole(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWDateRole self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_DateRole ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DateRole

        """
        return _RWStepBasic.RWStepBasic_RWDateRole_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWDateRole self, StepData_StepWriter SW, Handle_StepBasic_DateRole ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DateRole

        """
        return _RWStepBasic.RWStepBasic_RWDateRole_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWDateRole
RWStepBasic_RWDateRole_swigregister = _RWStepBasic.RWStepBasic_RWDateRole_swigregister
RWStepBasic_RWDateRole_swigregister(RWStepBasic_RWDateRole)

class RWStepBasic_RWProductDefinitionReferenceWithLocalRepresentation(object):
    """Read & Write Module for ProductDefinitionReferenceWithLocalRepresentation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWProductDefinitionReferenceWithLocalRepresentation self) -> RWStepBasic_RWProductDefinitionReferenceWithLocalRepresentation

        Read & Write Module for ProductDefinitionReferenceWithLocalRepresentation
        """
        this = _RWStepBasic.new_RWStepBasic_RWProductDefinitionReferenceWithLocalRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWProductDefinitionReferenceWithLocalRepresentation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ProductDefinitionReferenceWithLocalRepresentation ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionReferenceWithLocalRepresentation

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionReferenceWithLocalRepresentation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWProductDefinitionReferenceWithLocalRepresentation self, StepData_StepWriter SW, Handle_StepBasic_ProductDefinitionReferenceWithLocalRepresentation ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionReferenceWithLocalRepresentation

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionReferenceWithLocalRepresentation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWProductDefinitionReferenceWithLocalRepresentation self, Handle_StepBasic_ProductDefinitionReferenceWithLocalRepresentation ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionReferenceWithLocalRepresentation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWProductDefinitionReferenceWithLocalRepresentation_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWProductDefinitionReferenceWithLocalRepresentation
RWStepBasic_RWProductDefinitionReferenceWithLocalRepresentation_swigregister = _RWStepBasic.RWStepBasic_RWProductDefinitionReferenceWithLocalRepresentation_swigregister
RWStepBasic_RWProductDefinitionReferenceWithLocalRepresentation_swigregister(RWStepBasic_RWProductDefinitionReferenceWithLocalRepresentation)

class RWStepBasic_RWCharacterizedObject(object):
    """Read & Write tool for CharacterizedObject"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWCharacterizedObject self) -> RWStepBasic_RWCharacterizedObject

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWCharacterizedObject(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWCharacterizedObject self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_CharacterizedObject ent)

        Reads CharacterizedObject

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_CharacterizedObject

        """
        return _RWStepBasic.RWStepBasic_RWCharacterizedObject_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWCharacterizedObject self, StepData_StepWriter SW, Handle_StepBasic_CharacterizedObject ent)

        Writes CharacterizedObject

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_CharacterizedObject

        """
        return _RWStepBasic.RWStepBasic_RWCharacterizedObject_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWCharacterizedObject self, Handle_StepBasic_CharacterizedObject ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_CharacterizedObject
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWCharacterizedObject_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWCharacterizedObject
RWStepBasic_RWCharacterizedObject_swigregister = _RWStepBasic.RWStepBasic_RWCharacterizedObject_swigregister
RWStepBasic_RWCharacterizedObject_swigregister(RWStepBasic_RWCharacterizedObject)

class RWStepBasic_RWActionAssignment(object):
    """Read & Write tool for ActionAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWActionAssignment self) -> RWStepBasic_RWActionAssignment

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWActionAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWActionAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ActionAssignment ent)

        Reads ActionAssignment

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ActionAssignment

        """
        return _RWStepBasic.RWStepBasic_RWActionAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWActionAssignment self, StepData_StepWriter SW, Handle_StepBasic_ActionAssignment ent)

        Writes ActionAssignment

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ActionAssignment

        """
        return _RWStepBasic.RWStepBasic_RWActionAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWActionAssignment self, Handle_StepBasic_ActionAssignment ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ActionAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWActionAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWActionAssignment
RWStepBasic_RWActionAssignment_swigregister = _RWStepBasic.RWStepBasic_RWActionAssignment_swigregister
RWStepBasic_RWActionAssignment_swigregister(RWStepBasic_RWActionAssignment)

class RWStepBasic_RWApplicationContext(object):
    """Read & Write Module for ApplicationContext"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWApplicationContext self) -> RWStepBasic_RWApplicationContext

        Read & Write Module for ApplicationContext
        """
        this = _RWStepBasic.new_RWStepBasic_RWApplicationContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWApplicationContext self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ApplicationContext ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ApplicationContext

        """
        return _RWStepBasic.RWStepBasic_RWApplicationContext_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWApplicationContext self, StepData_StepWriter SW, Handle_StepBasic_ApplicationContext ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ApplicationContext

        """
        return _RWStepBasic.RWStepBasic_RWApplicationContext_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWApplicationContext
RWStepBasic_RWApplicationContext_swigregister = _RWStepBasic.RWStepBasic_RWApplicationContext_swigregister
RWStepBasic_RWApplicationContext_swigregister(RWStepBasic_RWApplicationContext)

class RWStepBasic_RWConversionBasedUnit(object):
    """Read & Write Module for ConversionBasedUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWConversionBasedUnit self) -> RWStepBasic_RWConversionBasedUnit

        Read & Write Module for ConversionBasedUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWConversionBasedUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWConversionBasedUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ConversionBasedUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnit

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWConversionBasedUnit self, StepData_StepWriter SW, Handle_StepBasic_ConversionBasedUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnit

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnit_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWConversionBasedUnit self, Handle_StepBasic_ConversionBasedUnit ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnit
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnit_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWConversionBasedUnit
RWStepBasic_RWConversionBasedUnit_swigregister = _RWStepBasic.RWStepBasic_RWConversionBasedUnit_swigregister
RWStepBasic_RWConversionBasedUnit_swigregister(RWStepBasic_RWConversionBasedUnit)

class RWStepBasic_RWExternallyDefinedItem(object):
    """Read & Write tool for ExternallyDefinedItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWExternallyDefinedItem self) -> RWStepBasic_RWExternallyDefinedItem

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWExternallyDefinedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWExternallyDefinedItem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ExternallyDefinedItem ent)

        Reads ExternallyDefinedItem

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ExternallyDefinedItem

        """
        return _RWStepBasic.RWStepBasic_RWExternallyDefinedItem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWExternallyDefinedItem self, StepData_StepWriter SW, Handle_StepBasic_ExternallyDefinedItem ent)

        Writes ExternallyDefinedItem

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ExternallyDefinedItem

        """
        return _RWStepBasic.RWStepBasic_RWExternallyDefinedItem_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWExternallyDefinedItem self, Handle_StepBasic_ExternallyDefinedItem ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ExternallyDefinedItem
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWExternallyDefinedItem_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWExternallyDefinedItem
RWStepBasic_RWExternallyDefinedItem_swigregister = _RWStepBasic.RWStepBasic_RWExternallyDefinedItem_swigregister
RWStepBasic_RWExternallyDefinedItem_swigregister(RWStepBasic_RWExternallyDefinedItem)

class RWStepBasic_RWDocumentProductEquivalence(object):
    """Read & Write tool for DocumentProductEquivalence"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWDocumentProductEquivalence self) -> RWStepBasic_RWDocumentProductEquivalence

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWDocumentProductEquivalence(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWDocumentProductEquivalence self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_DocumentProductEquivalence ent)

        Reads DocumentProductEquivalence

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentProductEquivalence

        """
        return _RWStepBasic.RWStepBasic_RWDocumentProductEquivalence_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWDocumentProductEquivalence self, StepData_StepWriter SW, Handle_StepBasic_DocumentProductEquivalence ent)

        Writes DocumentProductEquivalence

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentProductEquivalence

        """
        return _RWStepBasic.RWStepBasic_RWDocumentProductEquivalence_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWDocumentProductEquivalence self, Handle_StepBasic_DocumentProductEquivalence ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentProductEquivalence
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWDocumentProductEquivalence_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWDocumentProductEquivalence
RWStepBasic_RWDocumentProductEquivalence_swigregister = _RWStepBasic.RWStepBasic_RWDocumentProductEquivalence_swigregister
RWStepBasic_RWDocumentProductEquivalence_swigregister(RWStepBasic_RWDocumentProductEquivalence)

class RWStepBasic_RWConversionBasedUnitAndLengthUnit(object):
    """Read & Write Module for ConversionBasedUnitAndLengthUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWConversionBasedUnitAndLengthUnit self) -> RWStepBasic_RWConversionBasedUnitAndLengthUnit

        Read & Write Module for ConversionBasedUnitAndLengthUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWConversionBasedUnitAndLengthUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWConversionBasedUnitAndLengthUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ConversionBasedUnitAndLengthUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnitAndLengthUnit

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndLengthUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWConversionBasedUnitAndLengthUnit self, StepData_StepWriter SW, Handle_StepBasic_ConversionBasedUnitAndLengthUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnitAndLengthUnit

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndLengthUnit_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWConversionBasedUnitAndLengthUnit self, Handle_StepBasic_ConversionBasedUnitAndLengthUnit ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ConversionBasedUnitAndLengthUnit
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndLengthUnit_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWConversionBasedUnitAndLengthUnit
RWStepBasic_RWConversionBasedUnitAndLengthUnit_swigregister = _RWStepBasic.RWStepBasic_RWConversionBasedUnitAndLengthUnit_swigregister
RWStepBasic_RWConversionBasedUnitAndLengthUnit_swigregister(RWStepBasic_RWConversionBasedUnitAndLengthUnit)

class RWStepBasic_RWDocumentFile(object):
    """Read & Write tool for DocumentFile"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWDocumentFile self) -> RWStepBasic_RWDocumentFile

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWDocumentFile(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWDocumentFile self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_DocumentFile ent)

        Reads DocumentFile

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentFile

        """
        return _RWStepBasic.RWStepBasic_RWDocumentFile_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWDocumentFile self, StepData_StepWriter SW, Handle_StepBasic_DocumentFile ent)

        Writes DocumentFile

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentFile

        """
        return _RWStepBasic.RWStepBasic_RWDocumentFile_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWDocumentFile self, Handle_StepBasic_DocumentFile ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentFile
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWDocumentFile_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWDocumentFile
RWStepBasic_RWDocumentFile_swigregister = _RWStepBasic.RWStepBasic_RWDocumentFile_swigregister
RWStepBasic_RWDocumentFile_swigregister(RWStepBasic_RWDocumentFile)

class RWStepBasic_RWLengthUnit(object):
    """Read & Write Module for LengthUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWLengthUnit self) -> RWStepBasic_RWLengthUnit

        Read & Write Module for LengthUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWLengthUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWLengthUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_LengthUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_LengthUnit

        """
        return _RWStepBasic.RWStepBasic_RWLengthUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWLengthUnit self, StepData_StepWriter SW, Handle_StepBasic_LengthUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_LengthUnit

        """
        return _RWStepBasic.RWStepBasic_RWLengthUnit_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWLengthUnit self, Handle_StepBasic_LengthUnit ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_LengthUnit
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWLengthUnit_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWLengthUnit
RWStepBasic_RWLengthUnit_swigregister = _RWStepBasic.RWStepBasic_RWLengthUnit_swigregister
RWStepBasic_RWLengthUnit_swigregister(RWStepBasic_RWLengthUnit)

class RWStepBasic_RWDocumentProductAssociation(object):
    """Read & Write tool for DocumentProductAssociation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWDocumentProductAssociation self) -> RWStepBasic_RWDocumentProductAssociation

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWDocumentProductAssociation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWDocumentProductAssociation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_DocumentProductAssociation ent)

        Reads DocumentProductAssociation

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentProductAssociation

        """
        return _RWStepBasic.RWStepBasic_RWDocumentProductAssociation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWDocumentProductAssociation self, StepData_StepWriter SW, Handle_StepBasic_DocumentProductAssociation ent)

        Writes DocumentProductAssociation

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentProductAssociation

        """
        return _RWStepBasic.RWStepBasic_RWDocumentProductAssociation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWDocumentProductAssociation self, Handle_StepBasic_DocumentProductAssociation ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentProductAssociation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWDocumentProductAssociation_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWDocumentProductAssociation
RWStepBasic_RWDocumentProductAssociation_swigregister = _RWStepBasic.RWStepBasic_RWDocumentProductAssociation_swigregister
RWStepBasic_RWDocumentProductAssociation_swigregister(RWStepBasic_RWDocumentProductAssociation)

class RWStepBasic_RWPerson(object):
    """Read & Write Module for Person"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWPerson self) -> RWStepBasic_RWPerson

        Read & Write Module for Person
        """
        this = _RWStepBasic.new_RWStepBasic_RWPerson(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWPerson self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_Person ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Person

        """
        return _RWStepBasic.RWStepBasic_RWPerson_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWPerson self, StepData_StepWriter SW, Handle_StepBasic_Person ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Person

        """
        return _RWStepBasic.RWStepBasic_RWPerson_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWPerson
RWStepBasic_RWPerson_swigregister = _RWStepBasic.RWStepBasic_RWPerson_swigregister
RWStepBasic_RWPerson_swigregister(RWStepBasic_RWPerson)

class RWStepBasic_RWWeekOfYearAndDayDate(object):
    """Read & Write Module for WeekOfYearAndDayDate"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWWeekOfYearAndDayDate self) -> RWStepBasic_RWWeekOfYearAndDayDate

        Read & Write Module for WeekOfYearAndDayDate
        """
        this = _RWStepBasic.new_RWStepBasic_RWWeekOfYearAndDayDate(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWWeekOfYearAndDayDate self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_WeekOfYearAndDayDate ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_WeekOfYearAndDayDate

        """
        return _RWStepBasic.RWStepBasic_RWWeekOfYearAndDayDate_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWWeekOfYearAndDayDate self, StepData_StepWriter SW, Handle_StepBasic_WeekOfYearAndDayDate ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_WeekOfYearAndDayDate

        """
        return _RWStepBasic.RWStepBasic_RWWeekOfYearAndDayDate_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWWeekOfYearAndDayDate
RWStepBasic_RWWeekOfYearAndDayDate_swigregister = _RWStepBasic.RWStepBasic_RWWeekOfYearAndDayDate_swigregister
RWStepBasic_RWWeekOfYearAndDayDate_swigregister(RWStepBasic_RWWeekOfYearAndDayDate)

class RWStepBasic_RWGroupAssignment(object):
    """Read & Write tool for GroupAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWGroupAssignment self) -> RWStepBasic_RWGroupAssignment

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWGroupAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWGroupAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_GroupAssignment ent)

        Reads GroupAssignment

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_GroupAssignment

        """
        return _RWStepBasic.RWStepBasic_RWGroupAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWGroupAssignment self, StepData_StepWriter SW, Handle_StepBasic_GroupAssignment ent)

        Writes GroupAssignment

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_GroupAssignment

        """
        return _RWStepBasic.RWStepBasic_RWGroupAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWGroupAssignment self, Handle_StepBasic_GroupAssignment ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_GroupAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWGroupAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWGroupAssignment
RWStepBasic_RWGroupAssignment_swigregister = _RWStepBasic.RWStepBasic_RWGroupAssignment_swigregister
RWStepBasic_RWGroupAssignment_swigregister(RWStepBasic_RWGroupAssignment)

class RWStepBasic_RWPersonAndOrganization(object):
    """Read & Write Module for PersonAndOrganization"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWPersonAndOrganization self) -> RWStepBasic_RWPersonAndOrganization

        Read & Write Module for PersonAndOrganization
        """
        this = _RWStepBasic.new_RWStepBasic_RWPersonAndOrganization(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWPersonAndOrganization self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_PersonAndOrganization ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganization

        """
        return _RWStepBasic.RWStepBasic_RWPersonAndOrganization_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWPersonAndOrganization self, StepData_StepWriter SW, Handle_StepBasic_PersonAndOrganization ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganization

        """
        return _RWStepBasic.RWStepBasic_RWPersonAndOrganization_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWPersonAndOrganization self, Handle_StepBasic_PersonAndOrganization ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganization
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWPersonAndOrganization_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWPersonAndOrganization
RWStepBasic_RWPersonAndOrganization_swigregister = _RWStepBasic.RWStepBasic_RWPersonAndOrganization_swigregister
RWStepBasic_RWPersonAndOrganization_swigregister(RWStepBasic_RWPersonAndOrganization)

class RWStepBasic_RWSiUnitAndPlaneAngleUnit(object):
    """Read & Write Module for SiUnitAndPlaneAngleUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWSiUnitAndPlaneAngleUnit self) -> RWStepBasic_RWSiUnitAndPlaneAngleUnit

        Read & Write Module for SiUnitAndPlaneAngleUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWSiUnitAndPlaneAngleUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWSiUnitAndPlaneAngleUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_SiUnitAndPlaneAngleUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SiUnitAndPlaneAngleUnit

        """
        return _RWStepBasic.RWStepBasic_RWSiUnitAndPlaneAngleUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWSiUnitAndPlaneAngleUnit self, StepData_StepWriter SW, Handle_StepBasic_SiUnitAndPlaneAngleUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SiUnitAndPlaneAngleUnit

        """
        return _RWStepBasic.RWStepBasic_RWSiUnitAndPlaneAngleUnit_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWSiUnitAndPlaneAngleUnit
RWStepBasic_RWSiUnitAndPlaneAngleUnit_swigregister = _RWStepBasic.RWStepBasic_RWSiUnitAndPlaneAngleUnit_swigregister
RWStepBasic_RWSiUnitAndPlaneAngleUnit_swigregister(RWStepBasic_RWSiUnitAndPlaneAngleUnit)

class RWStepBasic_RWApprovalPersonOrganization(object):
    """Read & Write Module for ApprovalPersonOrganization"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWApprovalPersonOrganization self) -> RWStepBasic_RWApprovalPersonOrganization

        Read & Write Module for ApprovalPersonOrganization
        """
        this = _RWStepBasic.new_RWStepBasic_RWApprovalPersonOrganization(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWApprovalPersonOrganization self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ApprovalPersonOrganization ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ApprovalPersonOrganization

        """
        return _RWStepBasic.RWStepBasic_RWApprovalPersonOrganization_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWApprovalPersonOrganization self, StepData_StepWriter SW, Handle_StepBasic_ApprovalPersonOrganization ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ApprovalPersonOrganization

        """
        return _RWStepBasic.RWStepBasic_RWApprovalPersonOrganization_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWApprovalPersonOrganization self, Handle_StepBasic_ApprovalPersonOrganization ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ApprovalPersonOrganization
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWApprovalPersonOrganization_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWApprovalPersonOrganization
RWStepBasic_RWApprovalPersonOrganization_swigregister = _RWStepBasic.RWStepBasic_RWApprovalPersonOrganization_swigregister
RWStepBasic_RWApprovalPersonOrganization_swigregister(RWStepBasic_RWApprovalPersonOrganization)

class RWStepBasic_RWSecurityClassification(object):
    """Read & Write Module for SecurityClassification"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWSecurityClassification self) -> RWStepBasic_RWSecurityClassification

        Read & Write Module for SecurityClassification
        """
        this = _RWStepBasic.new_RWStepBasic_RWSecurityClassification(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWSecurityClassification self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_SecurityClassification ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SecurityClassification

        """
        return _RWStepBasic.RWStepBasic_RWSecurityClassification_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWSecurityClassification self, StepData_StepWriter SW, Handle_StepBasic_SecurityClassification ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SecurityClassification

        """
        return _RWStepBasic.RWStepBasic_RWSecurityClassification_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWSecurityClassification self, Handle_StepBasic_SecurityClassification ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_SecurityClassification
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWSecurityClassification_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWSecurityClassification
RWStepBasic_RWSecurityClassification_swigregister = _RWStepBasic.RWStepBasic_RWSecurityClassification_swigregister
RWStepBasic_RWSecurityClassification_swigregister(RWStepBasic_RWSecurityClassification)

class RWStepBasic_RWIdentificationAssignment(object):
    """Read & Write tool for IdentificationAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWIdentificationAssignment self) -> RWStepBasic_RWIdentificationAssignment

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWIdentificationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWIdentificationAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_IdentificationAssignment ent)

        Reads IdentificationAssignment

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_IdentificationAssignment

        """
        return _RWStepBasic.RWStepBasic_RWIdentificationAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWIdentificationAssignment self, StepData_StepWriter SW, Handle_StepBasic_IdentificationAssignment ent)

        Writes IdentificationAssignment

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_IdentificationAssignment

        """
        return _RWStepBasic.RWStepBasic_RWIdentificationAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWIdentificationAssignment self, Handle_StepBasic_IdentificationAssignment ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_IdentificationAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWIdentificationAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWIdentificationAssignment
RWStepBasic_RWIdentificationAssignment_swigregister = _RWStepBasic.RWStepBasic_RWIdentificationAssignment_swigregister
RWStepBasic_RWIdentificationAssignment_swigregister(RWStepBasic_RWIdentificationAssignment)

class RWStepBasic_RWOrganizationRole(object):
    """Read & Write Module for OrganizationRole"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWOrganizationRole self) -> RWStepBasic_RWOrganizationRole

        Read & Write Module for OrganizationRole
        """
        this = _RWStepBasic.new_RWStepBasic_RWOrganizationRole(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWOrganizationRole self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_OrganizationRole ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_OrganizationRole

        """
        return _RWStepBasic.RWStepBasic_RWOrganizationRole_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWOrganizationRole self, StepData_StepWriter SW, Handle_StepBasic_OrganizationRole ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_OrganizationRole

        """
        return _RWStepBasic.RWStepBasic_RWOrganizationRole_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWOrganizationRole
RWStepBasic_RWOrganizationRole_swigregister = _RWStepBasic.RWStepBasic_RWOrganizationRole_swigregister
RWStepBasic_RWOrganizationRole_swigregister(RWStepBasic_RWOrganizationRole)

class RWStepBasic_RWUncertaintyMeasureWithUnit(object):
    """Read & Write Module for UncertaintyMeasureWithUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWUncertaintyMeasureWithUnit self) -> RWStepBasic_RWUncertaintyMeasureWithUnit

        Read & Write Module for UncertaintyMeasureWithUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWUncertaintyMeasureWithUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWUncertaintyMeasureWithUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_UncertaintyMeasureWithUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_UncertaintyMeasureWithUnit

        """
        return _RWStepBasic.RWStepBasic_RWUncertaintyMeasureWithUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWUncertaintyMeasureWithUnit self, StepData_StepWriter SW, Handle_StepBasic_UncertaintyMeasureWithUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_UncertaintyMeasureWithUnit

        """
        return _RWStepBasic.RWStepBasic_RWUncertaintyMeasureWithUnit_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWUncertaintyMeasureWithUnit self, Handle_StepBasic_UncertaintyMeasureWithUnit ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_UncertaintyMeasureWithUnit
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWUncertaintyMeasureWithUnit_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWUncertaintyMeasureWithUnit
RWStepBasic_RWUncertaintyMeasureWithUnit_swigregister = _RWStepBasic.RWStepBasic_RWUncertaintyMeasureWithUnit_swigregister
RWStepBasic_RWUncertaintyMeasureWithUnit_swigregister(RWStepBasic_RWUncertaintyMeasureWithUnit)

class RWStepBasic_RWProductConceptContext(object):
    """Read & Write tool for ProductConceptContext"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWProductConceptContext self) -> RWStepBasic_RWProductConceptContext

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWProductConceptContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWProductConceptContext self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ProductConceptContext ent)

        Reads ProductConceptContext

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductConceptContext

        """
        return _RWStepBasic.RWStepBasic_RWProductConceptContext_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWProductConceptContext self, StepData_StepWriter SW, Handle_StepBasic_ProductConceptContext ent)

        Writes ProductConceptContext

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductConceptContext

        """
        return _RWStepBasic.RWStepBasic_RWProductConceptContext_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWProductConceptContext self, Handle_StepBasic_ProductConceptContext ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ProductConceptContext
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWProductConceptContext_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWProductConceptContext
RWStepBasic_RWProductConceptContext_swigregister = _RWStepBasic.RWStepBasic_RWProductConceptContext_swigregister
RWStepBasic_RWProductConceptContext_swigregister(RWStepBasic_RWProductConceptContext)

class RWStepBasic_RWNamedUnit(object):
    """Read & Write Module for NamedUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWNamedUnit self) -> RWStepBasic_RWNamedUnit

        Read & Write Module for NamedUnit
        """
        this = _RWStepBasic.new_RWStepBasic_RWNamedUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWNamedUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_NamedUnit ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_NamedUnit

        """
        return _RWStepBasic.RWStepBasic_RWNamedUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWNamedUnit self, StepData_StepWriter SW, Handle_StepBasic_NamedUnit ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_NamedUnit

        """
        return _RWStepBasic.RWStepBasic_RWNamedUnit_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWNamedUnit self, Handle_StepBasic_NamedUnit ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_NamedUnit
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWNamedUnit_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWNamedUnit
RWStepBasic_RWNamedUnit_swigregister = _RWStepBasic.RWStepBasic_RWNamedUnit_swigregister
RWStepBasic_RWNamedUnit_swigregister(RWStepBasic_RWNamedUnit)

class RWStepBasic_RWExternalIdentificationAssignment(object):
    """Read & Write tool for ExternalIdentificationAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWExternalIdentificationAssignment self) -> RWStepBasic_RWExternalIdentificationAssignment

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWExternalIdentificationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWExternalIdentificationAssignment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ExternalIdentificationAssignment ent)

        Reads ExternalIdentificationAssignment

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ExternalIdentificationAssignment

        """
        return _RWStepBasic.RWStepBasic_RWExternalIdentificationAssignment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWExternalIdentificationAssignment self, StepData_StepWriter SW, Handle_StepBasic_ExternalIdentificationAssignment ent)

        Writes ExternalIdentificationAssignment

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ExternalIdentificationAssignment

        """
        return _RWStepBasic.RWStepBasic_RWExternalIdentificationAssignment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWExternalIdentificationAssignment self, Handle_StepBasic_ExternalIdentificationAssignment ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ExternalIdentificationAssignment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWExternalIdentificationAssignment_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWExternalIdentificationAssignment
RWStepBasic_RWExternalIdentificationAssignment_swigregister = _RWStepBasic.RWStepBasic_RWExternalIdentificationAssignment_swigregister
RWStepBasic_RWExternalIdentificationAssignment_swigregister(RWStepBasic_RWExternalIdentificationAssignment)

class RWStepBasic_RWDocumentRelationship(object):
    """Read & Write Module for DocumentRelationship"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWDocumentRelationship self) -> RWStepBasic_RWDocumentRelationship

        Read & Write Module for DocumentRelationship
        """
        this = _RWStepBasic.new_RWStepBasic_RWDocumentRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWDocumentRelationship self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_DocumentRelationship ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentRelationship

        """
        return _RWStepBasic.RWStepBasic_RWDocumentRelationship_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWDocumentRelationship self, StepData_StepWriter SW, Handle_StepBasic_DocumentRelationship ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentRelationship

        """
        return _RWStepBasic.RWStepBasic_RWDocumentRelationship_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWDocumentRelationship self, Handle_StepBasic_DocumentRelationship ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentRelationship
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWDocumentRelationship_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWDocumentRelationship
RWStepBasic_RWDocumentRelationship_swigregister = _RWStepBasic.RWStepBasic_RWDocumentRelationship_swigregister
RWStepBasic_RWDocumentRelationship_swigregister(RWStepBasic_RWDocumentRelationship)

class RWStepBasic_RWDerivedUnitElement(object):
    """Read & Write Module for DerivedUnitElement"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWDerivedUnitElement self) -> RWStepBasic_RWDerivedUnitElement

        Read & Write Module for DerivedUnitElement
        """
        this = _RWStepBasic.new_RWStepBasic_RWDerivedUnitElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWDerivedUnitElement self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_DerivedUnitElement ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DerivedUnitElement

        """
        return _RWStepBasic.RWStepBasic_RWDerivedUnitElement_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWDerivedUnitElement self, StepData_StepWriter SW, Handle_StepBasic_DerivedUnitElement ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DerivedUnitElement

        """
        return _RWStepBasic.RWStepBasic_RWDerivedUnitElement_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWDerivedUnitElement self, Handle_StepBasic_DerivedUnitElement ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_DerivedUnitElement
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWDerivedUnitElement_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWDerivedUnitElement
RWStepBasic_RWDerivedUnitElement_swigregister = _RWStepBasic.RWStepBasic_RWDerivedUnitElement_swigregister
RWStepBasic_RWDerivedUnitElement_swigregister(RWStepBasic_RWDerivedUnitElement)

class RWStepBasic_RWApprovalStatus(object):
    """Read & Write Module for ApprovalStatus"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWApprovalStatus self) -> RWStepBasic_RWApprovalStatus

        Read & Write Module for ApprovalStatus
        """
        this = _RWStepBasic.new_RWStepBasic_RWApprovalStatus(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWApprovalStatus self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_ApprovalStatus ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ApprovalStatus

        """
        return _RWStepBasic.RWStepBasic_RWApprovalStatus_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWApprovalStatus self, StepData_StepWriter SW, Handle_StepBasic_ApprovalStatus ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_ApprovalStatus

        """
        return _RWStepBasic.RWStepBasic_RWApprovalStatus_WriteStep(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWApprovalStatus
RWStepBasic_RWApprovalStatus_swigregister = _RWStepBasic.RWStepBasic_RWApprovalStatus_swigregister
RWStepBasic_RWApprovalStatus_swigregister(RWStepBasic_RWApprovalStatus)

class RWStepBasic_RWGroup(object):
    """Read & Write tool for Group"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepBasic_RWGroup self) -> RWStepBasic_RWGroup

        Empty constructor


        """
        this = _RWStepBasic.new_RWStepBasic_RWGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepBasic_RWGroup self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepBasic_Group ent)

        Reads Group

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Group

        """
        return _RWStepBasic.RWStepBasic_RWGroup_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepBasic_RWGroup self, StepData_StepWriter SW, Handle_StepBasic_Group ent)

        Writes Group

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Group

        """
        return _RWStepBasic.RWStepBasic_RWGroup_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepBasic_RWGroup self, Handle_StepBasic_Group ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepBasic.Handle_StepBasic_Group
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepBasic.RWStepBasic_RWGroup_Share(self, *args)

    __swig_destroy__ = _RWStepBasic.delete_RWStepBasic_RWGroup
RWStepBasic_RWGroup_swigregister = _RWStepBasic.RWStepBasic_RWGroup_swigregister
RWStepBasic_RWGroup_swigregister(RWStepBasic_RWGroup)



