# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BinMDataXtd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BinMDataXtd')
    _BinMDataXtd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BinMDataXtd', [dirname(__file__)])
        except ImportError:
            import _BinMDataXtd
            return _BinMDataXtd
        try:
            _mod = imp.load_module('_BinMDataXtd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BinMDataXtd = swig_import_helper()
    del swig_import_helper
else:
    import _BinMDataXtd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BinMDataXtd.delete_SwigPyIterator

    def value(self):
        return _BinMDataXtd.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BinMDataXtd.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BinMDataXtd.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BinMDataXtd.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BinMDataXtd.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BinMDataXtd.SwigPyIterator_copy(self)

    def next(self):
        return _BinMDataXtd.SwigPyIterator_next(self)

    def __next__(self):
        return _BinMDataXtd.SwigPyIterator___next__(self)

    def previous(self):
        return _BinMDataXtd.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BinMDataXtd.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BinMDataXtd.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BinMDataXtd.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BinMDataXtd.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BinMDataXtd.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BinMDataXtd.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BinMDataXtd.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BinMDataXtd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BinMDataXtd.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_BinMDataXtd.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _BinMDataXtd.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BinMDataXtd.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinMDataXtd.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _BinMDataXtd.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _BinMDataXtd.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _BinMDataXtd.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BinMDataXtd.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_BinMDataXtd.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _BinMDataXtd.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BinMDataXtd.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinMDataXtd.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _BinMDataXtd.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _BinMDataXtd.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _BinMDataXtd.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _BinMDataXtd.ptr_to_number(item)
ptr_to_number = _BinMDataXtd.ptr_to_number

def HashCode(*args):
    return _BinMDataXtd.HashCode(*args)
HashCode = _BinMDataXtd.HashCode

def ptr_equal(a, b):
    return _BinMDataXtd.ptr_equal(a, b)
ptr_equal = _BinMDataXtd.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BinObjMgt
else:
    import BinObjMgt
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Storage
else:
    import Storage
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BinMDF
else:
    import BinMDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
class BinMDataXtd_GeometryDriver(BinMDF.BinMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataXtd_GeometryDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataXtd_GeometryDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataXtd_GeometryDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataXtd_GeometryDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataXtd.new_BinMDataXtd_GeometryDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataXtd_GeometryDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataXtd.BinMDataXtd_GeometryDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataXtd_GeometryDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataXtd_GeometryDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataXtd.BinMDataXtd_GeometryDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataXtd.BinMDataXtd_GeometryDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataXtd.BinMDataXtd_GeometryDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.BinMDataXtd_GeometryDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataXtd.delete_BinMDataXtd_GeometryDriver
BinMDataXtd_GeometryDriver_swigregister = _BinMDataXtd.BinMDataXtd_GeometryDriver_swigregister
BinMDataXtd_GeometryDriver_swigregister(BinMDataXtd_GeometryDriver)

def BinMDataXtd_GeometryDriver_get_type_name(*args):
    """
    BinMDataXtd_GeometryDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataXtd.BinMDataXtd_GeometryDriver_get_type_name(*args)

def BinMDataXtd_GeometryDriver_get_type_descriptor(*args):
    """
    BinMDataXtd_GeometryDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataXtd.BinMDataXtd_GeometryDriver_get_type_descriptor(*args)

class BinMDataXtd_PointDriver(BinMDF.BinMDF_ADriver):
    """Point attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataXtd_PointDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataXtd_PointDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataXtd_PointDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataXtd_PointDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataXtd.new_BinMDataXtd_PointDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataXtd_PointDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataXtd.BinMDataXtd_PointDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataXtd_PointDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataXtd_PointDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataXtd.BinMDataXtd_PointDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataXtd.BinMDataXtd_PointDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataXtd.BinMDataXtd_PointDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.BinMDataXtd_PointDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataXtd.delete_BinMDataXtd_PointDriver
BinMDataXtd_PointDriver_swigregister = _BinMDataXtd.BinMDataXtd_PointDriver_swigregister
BinMDataXtd_PointDriver_swigregister(BinMDataXtd_PointDriver)

def BinMDataXtd_PointDriver_get_type_name(*args):
    """
    BinMDataXtd_PointDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataXtd.BinMDataXtd_PointDriver_get_type_name(*args)

def BinMDataXtd_PointDriver_get_type_descriptor(*args):
    """
    BinMDataXtd_PointDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataXtd.BinMDataXtd_PointDriver_get_type_descriptor(*args)

class BinMDataXtd_PatternStdDriver(BinMDF.BinMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataXtd_PatternStdDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataXtd_PatternStdDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataXtd_PatternStdDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataXtd_PatternStdDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataXtd.new_BinMDataXtd_PatternStdDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataXtd_PatternStdDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataXtd.BinMDataXtd_PatternStdDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataXtd_PatternStdDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataXtd_PatternStdDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataXtd.BinMDataXtd_PatternStdDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataXtd.BinMDataXtd_PatternStdDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataXtd.BinMDataXtd_PatternStdDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.BinMDataXtd_PatternStdDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataXtd.delete_BinMDataXtd_PatternStdDriver
BinMDataXtd_PatternStdDriver_swigregister = _BinMDataXtd.BinMDataXtd_PatternStdDriver_swigregister
BinMDataXtd_PatternStdDriver_swigregister(BinMDataXtd_PatternStdDriver)

def BinMDataXtd_PatternStdDriver_get_type_name(*args):
    """
    BinMDataXtd_PatternStdDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataXtd.BinMDataXtd_PatternStdDriver_get_type_name(*args)

def BinMDataXtd_PatternStdDriver_get_type_descriptor(*args):
    """
    BinMDataXtd_PatternStdDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataXtd.BinMDataXtd_PatternStdDriver_get_type_descriptor(*args)

class BinMDataXtd_PlacementDriver(BinMDF.BinMDF_ADriver):
    """Placement attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataXtd_PlacementDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataXtd_PlacementDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataXtd_PlacementDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataXtd_PlacementDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataXtd.new_BinMDataXtd_PlacementDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataXtd_PlacementDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataXtd.BinMDataXtd_PlacementDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataXtd_PlacementDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataXtd_PlacementDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataXtd.BinMDataXtd_PlacementDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataXtd.BinMDataXtd_PlacementDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataXtd.BinMDataXtd_PlacementDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.BinMDataXtd_PlacementDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataXtd.delete_BinMDataXtd_PlacementDriver
BinMDataXtd_PlacementDriver_swigregister = _BinMDataXtd.BinMDataXtd_PlacementDriver_swigregister
BinMDataXtd_PlacementDriver_swigregister(BinMDataXtd_PlacementDriver)

def BinMDataXtd_PlacementDriver_get_type_name(*args):
    """
    BinMDataXtd_PlacementDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataXtd.BinMDataXtd_PlacementDriver_get_type_name(*args)

def BinMDataXtd_PlacementDriver_get_type_descriptor(*args):
    """
    BinMDataXtd_PlacementDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataXtd.BinMDataXtd_PlacementDriver_get_type_descriptor(*args)

class BinMDataXtd_ShapeDriver(BinMDF.BinMDF_ADriver):
    """Shape attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataXtd_ShapeDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataXtd_ShapeDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataXtd_ShapeDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataXtd_ShapeDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataXtd.new_BinMDataXtd_ShapeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataXtd_ShapeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataXtd.BinMDataXtd_ShapeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataXtd_ShapeDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataXtd_ShapeDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataXtd.BinMDataXtd_ShapeDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataXtd.BinMDataXtd_ShapeDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataXtd.BinMDataXtd_ShapeDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.BinMDataXtd_ShapeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataXtd.delete_BinMDataXtd_ShapeDriver
BinMDataXtd_ShapeDriver_swigregister = _BinMDataXtd.BinMDataXtd_ShapeDriver_swigregister
BinMDataXtd_ShapeDriver_swigregister(BinMDataXtd_ShapeDriver)

def BinMDataXtd_ShapeDriver_get_type_name(*args):
    """
    BinMDataXtd_ShapeDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataXtd.BinMDataXtd_ShapeDriver_get_type_name(*args)

def BinMDataXtd_ShapeDriver_get_type_descriptor(*args):
    """
    BinMDataXtd_ShapeDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataXtd.BinMDataXtd_ShapeDriver_get_type_descriptor(*args)

class BinMDataXtd_AxisDriver(BinMDF.BinMDF_ADriver):
    """Axis attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataXtd_AxisDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataXtd_AxisDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataXtd_AxisDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataXtd_AxisDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataXtd.new_BinMDataXtd_AxisDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataXtd_AxisDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataXtd.BinMDataXtd_AxisDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataXtd_AxisDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataXtd_AxisDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataXtd.BinMDataXtd_AxisDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataXtd.BinMDataXtd_AxisDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataXtd.BinMDataXtd_AxisDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.BinMDataXtd_AxisDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataXtd.delete_BinMDataXtd_AxisDriver
BinMDataXtd_AxisDriver_swigregister = _BinMDataXtd.BinMDataXtd_AxisDriver_swigregister
BinMDataXtd_AxisDriver_swigregister(BinMDataXtd_AxisDriver)

def BinMDataXtd_AxisDriver_get_type_name(*args):
    """
    BinMDataXtd_AxisDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataXtd.BinMDataXtd_AxisDriver_get_type_name(*args)

def BinMDataXtd_AxisDriver_get_type_descriptor(*args):
    """
    BinMDataXtd_AxisDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataXtd.BinMDataXtd_AxisDriver_get_type_descriptor(*args)

class BinMDataXtd_PresentationDriver(BinMDF.BinMDF_ADriver):
    """Presentation Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataXtd_PresentationDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataXtd_PresentationDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataXtd_PresentationDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataXtd_PresentationDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataXtd.new_BinMDataXtd_PresentationDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataXtd_PresentationDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataXtd.BinMDataXtd_PresentationDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataXtd_PresentationDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataXtd_PresentationDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataXtd.BinMDataXtd_PresentationDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataXtd.BinMDataXtd_PresentationDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataXtd.BinMDataXtd_PresentationDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.BinMDataXtd_PresentationDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataXtd.delete_BinMDataXtd_PresentationDriver
BinMDataXtd_PresentationDriver_swigregister = _BinMDataXtd.BinMDataXtd_PresentationDriver_swigregister
BinMDataXtd_PresentationDriver_swigregister(BinMDataXtd_PresentationDriver)

def BinMDataXtd_PresentationDriver_get_type_name(*args):
    """
    BinMDataXtd_PresentationDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataXtd.BinMDataXtd_PresentationDriver_get_type_name(*args)

def BinMDataXtd_PresentationDriver_get_type_descriptor(*args):
    """
    BinMDataXtd_PresentationDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataXtd.BinMDataXtd_PresentationDriver_get_type_descriptor(*args)

class Handle_BinMDataXtd_PointDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataXtd_PointDriver self)

        Nullify the handle


        """
        return _BinMDataXtd.Handle_BinMDataXtd_PointDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataXtd_PointDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PointDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataXtd_PointDriver self, BinMDataXtd_PointDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PointDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataXtd_PointDriver self, Handle_BinMDataXtd_PointDriver theHandle) -> Handle_BinMDataXtd_PointDriver
        assign(Handle_BinMDataXtd_PointDriver self, BinMDataXtd_PointDriver thePtr) -> Handle_BinMDataXtd_PointDriver
        assign(Handle_BinMDataXtd_PointDriver self, Handle_BinMDataXtd_PointDriver theHandle) -> Handle_BinMDataXtd_PointDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PointDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataXtd_PointDriver self) -> BinMDataXtd_PointDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PointDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataXtd_PointDriver self) -> BinMDataXtd_PointDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PointDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataXtd_PointDriver self) -> BinMDataXtd_PointDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PointDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataXtd.Handle_BinMDataXtd_PointDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataXtd.Handle_BinMDataXtd_PointDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataXtd.new_Handle_BinMDataXtd_PointDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataXtd.Handle_BinMDataXtd_PointDriver_DownCast)
    __swig_destroy__ = _BinMDataXtd.delete_Handle_BinMDataXtd_PointDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataXtd_PointDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PointDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataXtd_PointDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataXtd_PointDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PointDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataXtd_PointDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PointDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_PointDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_PointDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_PointDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_PointDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataXtd_PointDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataXtd.Handle_BinMDataXtd_PointDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataXtd_PointDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataXtd_PointDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PointDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataXtd_PointDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataXtd_PointDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PointDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataXtd_PointDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PointDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataXtd_PointDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PointDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataXtd_PointDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataXtd.Handle_BinMDataXtd_PointDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataXtd_PointDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PointDriver_DecrementRefCounter(self, *args)

Handle_BinMDataXtd_PointDriver_swigregister = _BinMDataXtd.Handle_BinMDataXtd_PointDriver_swigregister
Handle_BinMDataXtd_PointDriver_swigregister(Handle_BinMDataXtd_PointDriver)

def Handle_BinMDataXtd_PointDriver_DownCast(thing):
    return _BinMDataXtd.Handle_BinMDataXtd_PointDriver_DownCast(thing)
Handle_BinMDataXtd_PointDriver_DownCast = _BinMDataXtd.Handle_BinMDataXtd_PointDriver_DownCast

class Handle_BinMDataXtd_AxisDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataXtd_AxisDriver self)

        Nullify the handle


        """
        return _BinMDataXtd.Handle_BinMDataXtd_AxisDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataXtd_AxisDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataXtd.Handle_BinMDataXtd_AxisDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataXtd_AxisDriver self, BinMDataXtd_AxisDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_AxisDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataXtd_AxisDriver self, Handle_BinMDataXtd_AxisDriver theHandle) -> Handle_BinMDataXtd_AxisDriver
        assign(Handle_BinMDataXtd_AxisDriver self, BinMDataXtd_AxisDriver thePtr) -> Handle_BinMDataXtd_AxisDriver
        assign(Handle_BinMDataXtd_AxisDriver self, Handle_BinMDataXtd_AxisDriver theHandle) -> Handle_BinMDataXtd_AxisDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataXtd.Handle_BinMDataXtd_AxisDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataXtd_AxisDriver self) -> BinMDataXtd_AxisDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_AxisDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataXtd_AxisDriver self) -> BinMDataXtd_AxisDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_AxisDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataXtd_AxisDriver self) -> BinMDataXtd_AxisDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataXtd.Handle_BinMDataXtd_AxisDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataXtd.Handle_BinMDataXtd_AxisDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataXtd.Handle_BinMDataXtd_AxisDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataXtd.new_Handle_BinMDataXtd_AxisDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataXtd.Handle_BinMDataXtd_AxisDriver_DownCast)
    __swig_destroy__ = _BinMDataXtd.delete_Handle_BinMDataXtd_AxisDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataXtd_AxisDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataXtd.Handle_BinMDataXtd_AxisDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataXtd_AxisDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataXtd_AxisDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataXtd.Handle_BinMDataXtd_AxisDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataXtd_AxisDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_AxisDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_AxisDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_AxisDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_AxisDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_AxisDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataXtd_AxisDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataXtd.Handle_BinMDataXtd_AxisDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataXtd_AxisDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataXtd_AxisDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataXtd.Handle_BinMDataXtd_AxisDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataXtd_AxisDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataXtd_AxisDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataXtd.Handle_BinMDataXtd_AxisDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataXtd_AxisDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataXtd.Handle_BinMDataXtd_AxisDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataXtd_AxisDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataXtd.Handle_BinMDataXtd_AxisDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataXtd_AxisDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataXtd.Handle_BinMDataXtd_AxisDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataXtd_AxisDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataXtd.Handle_BinMDataXtd_AxisDriver_DecrementRefCounter(self, *args)

Handle_BinMDataXtd_AxisDriver_swigregister = _BinMDataXtd.Handle_BinMDataXtd_AxisDriver_swigregister
Handle_BinMDataXtd_AxisDriver_swigregister(Handle_BinMDataXtd_AxisDriver)

def Handle_BinMDataXtd_AxisDriver_DownCast(thing):
    return _BinMDataXtd.Handle_BinMDataXtd_AxisDriver_DownCast(thing)
Handle_BinMDataXtd_AxisDriver_DownCast = _BinMDataXtd.Handle_BinMDataXtd_AxisDriver_DownCast

class BinMDataXtd_PositionDriver(BinMDF.BinMDF_ADriver):
    """Position Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataXtd_PositionDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataXtd_PositionDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataXtd_PositionDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataXtd_PositionDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataXtd.new_BinMDataXtd_PositionDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataXtd_PositionDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataXtd.BinMDataXtd_PositionDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataXtd_PositionDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataXtd_PositionDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataXtd.BinMDataXtd_PositionDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataXtd.BinMDataXtd_PositionDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataXtd.BinMDataXtd_PositionDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.BinMDataXtd_PositionDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataXtd.delete_BinMDataXtd_PositionDriver
BinMDataXtd_PositionDriver_swigregister = _BinMDataXtd.BinMDataXtd_PositionDriver_swigregister
BinMDataXtd_PositionDriver_swigregister(BinMDataXtd_PositionDriver)

def BinMDataXtd_PositionDriver_get_type_name(*args):
    """
    BinMDataXtd_PositionDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataXtd.BinMDataXtd_PositionDriver_get_type_name(*args)

def BinMDataXtd_PositionDriver_get_type_descriptor(*args):
    """
    BinMDataXtd_PositionDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataXtd.BinMDataXtd_PositionDriver_get_type_descriptor(*args)

class Handle_BinMDataXtd_GeometryDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataXtd_GeometryDriver self)

        Nullify the handle


        """
        return _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataXtd_GeometryDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataXtd_GeometryDriver self, BinMDataXtd_GeometryDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataXtd_GeometryDriver self, Handle_BinMDataXtd_GeometryDriver theHandle) -> Handle_BinMDataXtd_GeometryDriver
        assign(Handle_BinMDataXtd_GeometryDriver self, BinMDataXtd_GeometryDriver thePtr) -> Handle_BinMDataXtd_GeometryDriver
        assign(Handle_BinMDataXtd_GeometryDriver self, Handle_BinMDataXtd_GeometryDriver theHandle) -> Handle_BinMDataXtd_GeometryDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataXtd_GeometryDriver self) -> BinMDataXtd_GeometryDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataXtd_GeometryDriver self) -> BinMDataXtd_GeometryDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataXtd_GeometryDriver self) -> BinMDataXtd_GeometryDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataXtd.new_Handle_BinMDataXtd_GeometryDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataXtd.Handle_BinMDataXtd_GeometryDriver_DownCast)
    __swig_destroy__ = _BinMDataXtd.delete_Handle_BinMDataXtd_GeometryDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataXtd_GeometryDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataXtd_GeometryDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataXtd_GeometryDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataXtd_GeometryDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataXtd_GeometryDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataXtd_GeometryDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataXtd_GeometryDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataXtd_GeometryDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataXtd_GeometryDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataXtd_GeometryDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataXtd_GeometryDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataXtd_GeometryDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataXtd_GeometryDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver_DecrementRefCounter(self, *args)

Handle_BinMDataXtd_GeometryDriver_swigregister = _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver_swigregister
Handle_BinMDataXtd_GeometryDriver_swigregister(Handle_BinMDataXtd_GeometryDriver)

def Handle_BinMDataXtd_GeometryDriver_DownCast(thing):
    return _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver_DownCast(thing)
Handle_BinMDataXtd_GeometryDriver_DownCast = _BinMDataXtd.Handle_BinMDataXtd_GeometryDriver_DownCast

class Handle_BinMDataXtd_PlacementDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataXtd_PlacementDriver self)

        Nullify the handle


        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataXtd_PlacementDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataXtd_PlacementDriver self, BinMDataXtd_PlacementDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataXtd_PlacementDriver self, Handle_BinMDataXtd_PlacementDriver theHandle) -> Handle_BinMDataXtd_PlacementDriver
        assign(Handle_BinMDataXtd_PlacementDriver self, BinMDataXtd_PlacementDriver thePtr) -> Handle_BinMDataXtd_PlacementDriver
        assign(Handle_BinMDataXtd_PlacementDriver self, Handle_BinMDataXtd_PlacementDriver theHandle) -> Handle_BinMDataXtd_PlacementDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataXtd_PlacementDriver self) -> BinMDataXtd_PlacementDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataXtd_PlacementDriver self) -> BinMDataXtd_PlacementDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataXtd_PlacementDriver self) -> BinMDataXtd_PlacementDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataXtd.new_Handle_BinMDataXtd_PlacementDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataXtd.Handle_BinMDataXtd_PlacementDriver_DownCast)
    __swig_destroy__ = _BinMDataXtd.delete_Handle_BinMDataXtd_PlacementDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataXtd_PlacementDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataXtd_PlacementDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataXtd_PlacementDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataXtd_PlacementDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataXtd_PlacementDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataXtd_PlacementDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataXtd_PlacementDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataXtd_PlacementDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataXtd_PlacementDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataXtd_PlacementDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataXtd_PlacementDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataXtd_PlacementDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataXtd_PlacementDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver_DecrementRefCounter(self, *args)

Handle_BinMDataXtd_PlacementDriver_swigregister = _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver_swigregister
Handle_BinMDataXtd_PlacementDriver_swigregister(Handle_BinMDataXtd_PlacementDriver)

def Handle_BinMDataXtd_PlacementDriver_DownCast(thing):
    return _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver_DownCast(thing)
Handle_BinMDataXtd_PlacementDriver_DownCast = _BinMDataXtd.Handle_BinMDataXtd_PlacementDriver_DownCast

class Handle_BinMDataXtd_PositionDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataXtd_PositionDriver self)

        Nullify the handle


        """
        return _BinMDataXtd.Handle_BinMDataXtd_PositionDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataXtd_PositionDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PositionDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataXtd_PositionDriver self, BinMDataXtd_PositionDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PositionDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataXtd_PositionDriver self, Handle_BinMDataXtd_PositionDriver theHandle) -> Handle_BinMDataXtd_PositionDriver
        assign(Handle_BinMDataXtd_PositionDriver self, BinMDataXtd_PositionDriver thePtr) -> Handle_BinMDataXtd_PositionDriver
        assign(Handle_BinMDataXtd_PositionDriver self, Handle_BinMDataXtd_PositionDriver theHandle) -> Handle_BinMDataXtd_PositionDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PositionDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataXtd_PositionDriver self) -> BinMDataXtd_PositionDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PositionDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataXtd_PositionDriver self) -> BinMDataXtd_PositionDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PositionDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataXtd_PositionDriver self) -> BinMDataXtd_PositionDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PositionDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataXtd.Handle_BinMDataXtd_PositionDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataXtd.Handle_BinMDataXtd_PositionDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataXtd.new_Handle_BinMDataXtd_PositionDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataXtd.Handle_BinMDataXtd_PositionDriver_DownCast)
    __swig_destroy__ = _BinMDataXtd.delete_Handle_BinMDataXtd_PositionDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataXtd_PositionDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PositionDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataXtd_PositionDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataXtd_PositionDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PositionDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataXtd_PositionDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PositionDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_PositionDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_PositionDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_PositionDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_PositionDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataXtd_PositionDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataXtd.Handle_BinMDataXtd_PositionDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataXtd_PositionDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataXtd_PositionDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PositionDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataXtd_PositionDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataXtd_PositionDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PositionDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataXtd_PositionDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PositionDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataXtd_PositionDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PositionDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataXtd_PositionDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataXtd.Handle_BinMDataXtd_PositionDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataXtd_PositionDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PositionDriver_DecrementRefCounter(self, *args)

Handle_BinMDataXtd_PositionDriver_swigregister = _BinMDataXtd.Handle_BinMDataXtd_PositionDriver_swigregister
Handle_BinMDataXtd_PositionDriver_swigregister(Handle_BinMDataXtd_PositionDriver)

def Handle_BinMDataXtd_PositionDriver_DownCast(thing):
    return _BinMDataXtd.Handle_BinMDataXtd_PositionDriver_DownCast(thing)
Handle_BinMDataXtd_PositionDriver_DownCast = _BinMDataXtd.Handle_BinMDataXtd_PositionDriver_DownCast

class Handle_BinMDataXtd_PatternStdDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataXtd_PatternStdDriver self)

        Nullify the handle


        """
        return _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataXtd_PatternStdDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataXtd_PatternStdDriver self, BinMDataXtd_PatternStdDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataXtd_PatternStdDriver self, Handle_BinMDataXtd_PatternStdDriver theHandle) -> Handle_BinMDataXtd_PatternStdDriver
        assign(Handle_BinMDataXtd_PatternStdDriver self, BinMDataXtd_PatternStdDriver thePtr) -> Handle_BinMDataXtd_PatternStdDriver
        assign(Handle_BinMDataXtd_PatternStdDriver self, Handle_BinMDataXtd_PatternStdDriver theHandle) -> Handle_BinMDataXtd_PatternStdDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataXtd_PatternStdDriver self) -> BinMDataXtd_PatternStdDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataXtd_PatternStdDriver self) -> BinMDataXtd_PatternStdDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataXtd_PatternStdDriver self) -> BinMDataXtd_PatternStdDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataXtd.new_Handle_BinMDataXtd_PatternStdDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver_DownCast)
    __swig_destroy__ = _BinMDataXtd.delete_Handle_BinMDataXtd_PatternStdDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataXtd_PatternStdDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataXtd_PatternStdDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataXtd_PatternStdDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataXtd_PatternStdDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataXtd_PatternStdDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataXtd_PatternStdDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataXtd_PatternStdDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataXtd_PatternStdDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataXtd_PatternStdDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataXtd_PatternStdDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataXtd_PatternStdDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataXtd_PatternStdDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataXtd_PatternStdDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver_DecrementRefCounter(self, *args)

Handle_BinMDataXtd_PatternStdDriver_swigregister = _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver_swigregister
Handle_BinMDataXtd_PatternStdDriver_swigregister(Handle_BinMDataXtd_PatternStdDriver)

def Handle_BinMDataXtd_PatternStdDriver_DownCast(thing):
    return _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver_DownCast(thing)
Handle_BinMDataXtd_PatternStdDriver_DownCast = _BinMDataXtd.Handle_BinMDataXtd_PatternStdDriver_DownCast

class Handle_BinMDataXtd_PresentationDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataXtd_PresentationDriver self)

        Nullify the handle


        """
        return _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataXtd_PresentationDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataXtd_PresentationDriver self, BinMDataXtd_PresentationDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataXtd_PresentationDriver self, Handle_BinMDataXtd_PresentationDriver theHandle) -> Handle_BinMDataXtd_PresentationDriver
        assign(Handle_BinMDataXtd_PresentationDriver self, BinMDataXtd_PresentationDriver thePtr) -> Handle_BinMDataXtd_PresentationDriver
        assign(Handle_BinMDataXtd_PresentationDriver self, Handle_BinMDataXtd_PresentationDriver theHandle) -> Handle_BinMDataXtd_PresentationDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataXtd_PresentationDriver self) -> BinMDataXtd_PresentationDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataXtd_PresentationDriver self) -> BinMDataXtd_PresentationDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataXtd_PresentationDriver self) -> BinMDataXtd_PresentationDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataXtd.new_Handle_BinMDataXtd_PresentationDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataXtd.Handle_BinMDataXtd_PresentationDriver_DownCast)
    __swig_destroy__ = _BinMDataXtd.delete_Handle_BinMDataXtd_PresentationDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataXtd_PresentationDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataXtd_PresentationDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataXtd_PresentationDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataXtd_PresentationDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataXtd_PresentationDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataXtd_PresentationDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataXtd_PresentationDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataXtd_PresentationDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataXtd_PresentationDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataXtd_PresentationDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataXtd_PresentationDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataXtd_PresentationDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataXtd_PresentationDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver_DecrementRefCounter(self, *args)

Handle_BinMDataXtd_PresentationDriver_swigregister = _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver_swigregister
Handle_BinMDataXtd_PresentationDriver_swigregister(Handle_BinMDataXtd_PresentationDriver)

def Handle_BinMDataXtd_PresentationDriver_DownCast(thing):
    return _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver_DownCast(thing)
Handle_BinMDataXtd_PresentationDriver_DownCast = _BinMDataXtd.Handle_BinMDataXtd_PresentationDriver_DownCast

class BinMDataXtd_ConstraintDriver(BinMDF.BinMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataXtd_ConstraintDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataXtd_ConstraintDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataXtd_ConstraintDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataXtd_ConstraintDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataXtd.new_BinMDataXtd_ConstraintDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataXtd_ConstraintDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataXtd.BinMDataXtd_ConstraintDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataXtd_ConstraintDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataXtd_ConstraintDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataXtd.BinMDataXtd_ConstraintDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataXtd.BinMDataXtd_ConstraintDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataXtd.BinMDataXtd_ConstraintDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.BinMDataXtd_ConstraintDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataXtd.delete_BinMDataXtd_ConstraintDriver
BinMDataXtd_ConstraintDriver_swigregister = _BinMDataXtd.BinMDataXtd_ConstraintDriver_swigregister
BinMDataXtd_ConstraintDriver_swigregister(BinMDataXtd_ConstraintDriver)

def BinMDataXtd_ConstraintDriver_get_type_name(*args):
    """
    BinMDataXtd_ConstraintDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataXtd.BinMDataXtd_ConstraintDriver_get_type_name(*args)

def BinMDataXtd_ConstraintDriver_get_type_descriptor(*args):
    """
    BinMDataXtd_ConstraintDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataXtd.BinMDataXtd_ConstraintDriver_get_type_descriptor(*args)

class BinMDataXtd_PlaneDriver(BinMDF.BinMDF_ADriver):
    """Plane attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataXtd_PlaneDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataXtd_PlaneDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataXtd_PlaneDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataXtd_PlaneDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataXtd.new_BinMDataXtd_PlaneDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataXtd_PlaneDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataXtd.BinMDataXtd_PlaneDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataXtd_PlaneDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataXtd_PlaneDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataXtd.BinMDataXtd_PlaneDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataXtd.BinMDataXtd_PlaneDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataXtd.BinMDataXtd_PlaneDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.BinMDataXtd_PlaneDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataXtd.delete_BinMDataXtd_PlaneDriver
BinMDataXtd_PlaneDriver_swigregister = _BinMDataXtd.BinMDataXtd_PlaneDriver_swigregister
BinMDataXtd_PlaneDriver_swigregister(BinMDataXtd_PlaneDriver)

def BinMDataXtd_PlaneDriver_get_type_name(*args):
    """
    BinMDataXtd_PlaneDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataXtd.BinMDataXtd_PlaneDriver_get_type_name(*args)

def BinMDataXtd_PlaneDriver_get_type_descriptor(*args):
    """
    BinMDataXtd_PlaneDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataXtd.BinMDataXtd_PlaneDriver_get_type_descriptor(*args)

class Handle_BinMDataXtd_PlaneDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataXtd_PlaneDriver self)

        Nullify the handle


        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataXtd_PlaneDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataXtd_PlaneDriver self, BinMDataXtd_PlaneDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataXtd_PlaneDriver self, Handle_BinMDataXtd_PlaneDriver theHandle) -> Handle_BinMDataXtd_PlaneDriver
        assign(Handle_BinMDataXtd_PlaneDriver self, BinMDataXtd_PlaneDriver thePtr) -> Handle_BinMDataXtd_PlaneDriver
        assign(Handle_BinMDataXtd_PlaneDriver self, Handle_BinMDataXtd_PlaneDriver theHandle) -> Handle_BinMDataXtd_PlaneDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataXtd_PlaneDriver self) -> BinMDataXtd_PlaneDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataXtd_PlaneDriver self) -> BinMDataXtd_PlaneDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataXtd_PlaneDriver self) -> BinMDataXtd_PlaneDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataXtd.new_Handle_BinMDataXtd_PlaneDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataXtd.Handle_BinMDataXtd_PlaneDriver_DownCast)
    __swig_destroy__ = _BinMDataXtd.delete_Handle_BinMDataXtd_PlaneDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataXtd_PlaneDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataXtd_PlaneDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataXtd_PlaneDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataXtd_PlaneDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataXtd_PlaneDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataXtd_PlaneDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataXtd_PlaneDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataXtd_PlaneDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataXtd_PlaneDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataXtd_PlaneDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataXtd_PlaneDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataXtd_PlaneDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataXtd_PlaneDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver_DecrementRefCounter(self, *args)

Handle_BinMDataXtd_PlaneDriver_swigregister = _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver_swigregister
Handle_BinMDataXtd_PlaneDriver_swigregister(Handle_BinMDataXtd_PlaneDriver)

def Handle_BinMDataXtd_PlaneDriver_DownCast(thing):
    return _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver_DownCast(thing)
Handle_BinMDataXtd_PlaneDriver_DownCast = _BinMDataXtd.Handle_BinMDataXtd_PlaneDriver_DownCast

class Handle_BinMDataXtd_ConstraintDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataXtd_ConstraintDriver self)

        Nullify the handle


        """
        return _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataXtd_ConstraintDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataXtd_ConstraintDriver self, BinMDataXtd_ConstraintDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataXtd_ConstraintDriver self, Handle_BinMDataXtd_ConstraintDriver theHandle) -> Handle_BinMDataXtd_ConstraintDriver
        assign(Handle_BinMDataXtd_ConstraintDriver self, BinMDataXtd_ConstraintDriver thePtr) -> Handle_BinMDataXtd_ConstraintDriver
        assign(Handle_BinMDataXtd_ConstraintDriver self, Handle_BinMDataXtd_ConstraintDriver theHandle) -> Handle_BinMDataXtd_ConstraintDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataXtd_ConstraintDriver self) -> BinMDataXtd_ConstraintDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataXtd_ConstraintDriver self) -> BinMDataXtd_ConstraintDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataXtd_ConstraintDriver self) -> BinMDataXtd_ConstraintDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataXtd.new_Handle_BinMDataXtd_ConstraintDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver_DownCast)
    __swig_destroy__ = _BinMDataXtd.delete_Handle_BinMDataXtd_ConstraintDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataXtd_ConstraintDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataXtd_ConstraintDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataXtd_ConstraintDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataXtd_ConstraintDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataXtd_ConstraintDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataXtd_ConstraintDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataXtd_ConstraintDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataXtd_ConstraintDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataXtd_ConstraintDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataXtd_ConstraintDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataXtd_ConstraintDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataXtd_ConstraintDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataXtd_ConstraintDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver_DecrementRefCounter(self, *args)

Handle_BinMDataXtd_ConstraintDriver_swigregister = _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver_swigregister
Handle_BinMDataXtd_ConstraintDriver_swigregister(Handle_BinMDataXtd_ConstraintDriver)

def Handle_BinMDataXtd_ConstraintDriver_DownCast(thing):
    return _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver_DownCast(thing)
Handle_BinMDataXtd_ConstraintDriver_DownCast = _BinMDataXtd.Handle_BinMDataXtd_ConstraintDriver_DownCast

class BinMDataXtd_(object):
    """Storage and Retrieval drivers for modelling attributes."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddDrivers(*args):
        """
        AddDrivers(Handle_BinMDF_ADriverTable theDriverTable, Handle_Message_Messenger aMsgDrv)

        Adds the attribute drivers to <theDriverTable>.

        :type theDriverTable: OCC.wrapper.BinMDF.Handle_BinMDF_ADriverTable
        :type aMsgDrv: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _BinMDataXtd.BinMDataXtd__AddDrivers(*args)

    AddDrivers = staticmethod(AddDrivers)

    def SetDocumentVersion(*args):
        """
        SetDocumentVersion(Standard_Integer const DocVersion)

        :type DocVersion: int

        """
        return _BinMDataXtd.BinMDataXtd__SetDocumentVersion(*args)

    SetDocumentVersion = staticmethod(SetDocumentVersion)

    def DocumentVersion(*args):
        """
        DocumentVersion() -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataXtd.BinMDataXtd__DocumentVersion(*args)

    DocumentVersion = staticmethod(DocumentVersion)

    def __init__(self):
        """Storage and Retrieval drivers for modelling attributes."""
        this = _BinMDataXtd.new_BinMDataXtd_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinMDataXtd.delete_BinMDataXtd_
BinMDataXtd__swigregister = _BinMDataXtd.BinMDataXtd__swigregister
BinMDataXtd__swigregister(BinMDataXtd_)

def BinMDataXtd__AddDrivers(*args):
    """
    BinMDataXtd__AddDrivers(Handle_BinMDF_ADriverTable theDriverTable, Handle_Message_Messenger aMsgDrv)

    Adds the attribute drivers to <theDriverTable>.

    :type theDriverTable: OCC.wrapper.BinMDF.Handle_BinMDF_ADriverTable
    :type aMsgDrv: OCC.wrapper.Message.Handle_Message_Messenger

    """
    return _BinMDataXtd.BinMDataXtd__AddDrivers(*args)

def BinMDataXtd__SetDocumentVersion(*args):
    """
    BinMDataXtd__SetDocumentVersion(Standard_Integer const DocVersion)

    :type DocVersion: int

    """
    return _BinMDataXtd.BinMDataXtd__SetDocumentVersion(*args)

def BinMDataXtd__DocumentVersion(*args):
    """
    BinMDataXtd__DocumentVersion() -> Standard_Integer

    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _BinMDataXtd.BinMDataXtd__DocumentVersion(*args)

class BinMDataXtd_TriangulationDriver(BinMDF.BinMDF_ADriver):
    """TDataXtd_Triangulation attribute bin Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDataXtd_TriangulationDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDataXtd_TriangulationDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDataXtd_TriangulationDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDataXtd_TriangulationDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDataXtd.new_BinMDataXtd_TriangulationDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDataXtd_TriangulationDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataXtd.BinMDataXtd_TriangulationDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDataXtd_TriangulationDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDataXtd_TriangulationDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataXtd.BinMDataXtd_TriangulationDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDataXtd.BinMDataXtd_TriangulationDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDataXtd.BinMDataXtd_TriangulationDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.BinMDataXtd_TriangulationDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDataXtd.delete_BinMDataXtd_TriangulationDriver
BinMDataXtd_TriangulationDriver_swigregister = _BinMDataXtd.BinMDataXtd_TriangulationDriver_swigregister
BinMDataXtd_TriangulationDriver_swigregister(BinMDataXtd_TriangulationDriver)

def BinMDataXtd_TriangulationDriver_get_type_name(*args):
    """
    BinMDataXtd_TriangulationDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDataXtd.BinMDataXtd_TriangulationDriver_get_type_name(*args)

def BinMDataXtd_TriangulationDriver_get_type_descriptor(*args):
    """
    BinMDataXtd_TriangulationDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDataXtd.BinMDataXtd_TriangulationDriver_get_type_descriptor(*args)

class Handle_BinMDataXtd_TriangulationDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataXtd_TriangulationDriver self)

        Nullify the handle


        """
        return _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataXtd_TriangulationDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataXtd_TriangulationDriver self, BinMDataXtd_TriangulationDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataXtd_TriangulationDriver self, Handle_BinMDataXtd_TriangulationDriver theHandle) -> Handle_BinMDataXtd_TriangulationDriver
        assign(Handle_BinMDataXtd_TriangulationDriver self, BinMDataXtd_TriangulationDriver thePtr) -> Handle_BinMDataXtd_TriangulationDriver
        assign(Handle_BinMDataXtd_TriangulationDriver self, Handle_BinMDataXtd_TriangulationDriver theHandle) -> Handle_BinMDataXtd_TriangulationDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataXtd_TriangulationDriver self) -> BinMDataXtd_TriangulationDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataXtd_TriangulationDriver self) -> BinMDataXtd_TriangulationDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataXtd_TriangulationDriver self) -> BinMDataXtd_TriangulationDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataXtd.new_Handle_BinMDataXtd_TriangulationDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver_DownCast)
    __swig_destroy__ = _BinMDataXtd.delete_Handle_BinMDataXtd_TriangulationDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataXtd_TriangulationDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataXtd_TriangulationDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataXtd_TriangulationDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataXtd_TriangulationDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataXtd_TriangulationDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataXtd_TriangulationDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataXtd_TriangulationDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataXtd_TriangulationDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataXtd_TriangulationDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataXtd_TriangulationDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataXtd_TriangulationDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataXtd_TriangulationDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataXtd_TriangulationDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver_DecrementRefCounter(self, *args)

Handle_BinMDataXtd_TriangulationDriver_swigregister = _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver_swigregister
Handle_BinMDataXtd_TriangulationDriver_swigregister(Handle_BinMDataXtd_TriangulationDriver)

def Handle_BinMDataXtd_TriangulationDriver_DownCast(thing):
    return _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver_DownCast(thing)
Handle_BinMDataXtd_TriangulationDriver_DownCast = _BinMDataXtd.Handle_BinMDataXtd_TriangulationDriver_DownCast

class Handle_BinMDataXtd_ShapeDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDataXtd_ShapeDriver self)

        Nullify the handle


        """
        return _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDataXtd_ShapeDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDataXtd_ShapeDriver self, BinMDataXtd_ShapeDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDataXtd_ShapeDriver self, Handle_BinMDataXtd_ShapeDriver theHandle) -> Handle_BinMDataXtd_ShapeDriver
        assign(Handle_BinMDataXtd_ShapeDriver self, BinMDataXtd_ShapeDriver thePtr) -> Handle_BinMDataXtd_ShapeDriver
        assign(Handle_BinMDataXtd_ShapeDriver self, Handle_BinMDataXtd_ShapeDriver theHandle) -> Handle_BinMDataXtd_ShapeDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDataXtd_ShapeDriver self) -> BinMDataXtd_ShapeDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDataXtd_ShapeDriver self) -> BinMDataXtd_ShapeDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDataXtd_ShapeDriver self) -> BinMDataXtd_ShapeDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDataXtd.new_Handle_BinMDataXtd_ShapeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDataXtd.Handle_BinMDataXtd_ShapeDriver_DownCast)
    __swig_destroy__ = _BinMDataXtd.delete_Handle_BinMDataXtd_ShapeDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDataXtd_ShapeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDataXtd_ShapeDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDataXtd_ShapeDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDataXtd_ShapeDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDataXtd_ShapeDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDataXtd_ShapeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDataXtd_ShapeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDataXtd_ShapeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDataXtd_ShapeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDataXtd_ShapeDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDataXtd_ShapeDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDataXtd_ShapeDriver self)

        Increments the reference counter of this object


        """
        return _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDataXtd_ShapeDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver_DecrementRefCounter(self, *args)

Handle_BinMDataXtd_ShapeDriver_swigregister = _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver_swigregister
Handle_BinMDataXtd_ShapeDriver_swigregister(Handle_BinMDataXtd_ShapeDriver)

def Handle_BinMDataXtd_ShapeDriver_DownCast(thing):
    return _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver_DownCast(thing)
Handle_BinMDataXtd_ShapeDriver_DownCast = _BinMDataXtd.Handle_BinMDataXtd_ShapeDriver_DownCast



