# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ChFi3d')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ChFi3d')
    _ChFi3d = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ChFi3d', [dirname(__file__)])
        except ImportError:
            import _ChFi3d
            return _ChFi3d
        try:
            _mod = imp.load_module('_ChFi3d', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ChFi3d = swig_import_helper()
    del swig_import_helper
else:
    import _ChFi3d
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ChFi3d.delete_SwigPyIterator

    def value(self):
        return _ChFi3d.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ChFi3d.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ChFi3d.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ChFi3d.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ChFi3d.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ChFi3d.SwigPyIterator_copy(self)

    def next(self):
        return _ChFi3d.SwigPyIterator_next(self)

    def __next__(self):
        return _ChFi3d.SwigPyIterator___next__(self)

    def previous(self):
        return _ChFi3d.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ChFi3d.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ChFi3d.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ChFi3d.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ChFi3d.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ChFi3d.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ChFi3d.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ChFi3d.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _ChFi3d.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _ChFi3d.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_ChFi3d.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _ChFi3d.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _ChFi3d.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ChFi3d.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _ChFi3d.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _ChFi3d.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _ChFi3d.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _ChFi3d.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_ChFi3d.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _ChFi3d.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _ChFi3d.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ChFi3d.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _ChFi3d.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _ChFi3d.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _ChFi3d.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _ChFi3d.ptr_to_number(item)
ptr_to_number = _ChFi3d.ptr_to_number

def HashCode(*args):
    return _ChFi3d.HashCode(*args)
HashCode = _ChFi3d.HashCode

def ptr_equal(a, b):
    return _ChFi3d.ptr_equal(a, b)
ptr_equal = _ChFi3d.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopOpeBRepBuild
else:
    import TopOpeBRepBuild
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopOpeBRepDS
else:
    import TopOpeBRepDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopOpeBRepTool
else:
    import TopOpeBRepTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopExp
else:
    import TopExp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepClass3d
else:
    import BRepClass3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntCurveSurface
else:
    import IntCurveSurface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Intf
else:
    import Intf
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntAna
else:
    import IntAna
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntSurf
else:
    import IntSurf
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntCurvesFace
else:
    import IntCurvesFace
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepAdaptor
else:
    import BRepAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2dAdaptor
else:
    import Geom2dAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAdaptor
else:
    import GeomAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepBlend
else:
    import BRepBlend
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Approx
else:
    import Approx
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AppCont
else:
    import AppCont
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AppParCurves
else:
    import AppParCurves
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AdvApprox
else:
    import AdvApprox
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PLib
else:
    import PLib
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Law
else:
    import Law
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import ChFiDS
else:
    import ChFiDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import AppBlend
else:
    import AppBlend
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Blend
else:
    import Blend
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BlendFunc
else:
    import BlendFunc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Convert
else:
    import Convert
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepTopAdaptor
else:
    import BRepTopAdaptor
del _swig_python_version_info
ChFi3d_Rational = _ChFi3d.ChFi3d_Rational
ChFi3d_QuasiAngular = _ChFi3d.ChFi3d_QuasiAngular
ChFi3d_Polynomial = _ChFi3d.ChFi3d_Polynomial
class ChFi3d_Builder(object):
    """
    Root  class  for calculation of  surfaces (fillets,
    chamfers)  destined  to smooth edges  of
    a gap on a Shape and the reconstruction of  the   Shape.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetParams(self, *args):
        """
        SetParams(ChFi3d_Builder self, Standard_Real const Tang, Standard_Real const Tesp, Standard_Real const T2d, Standard_Real const TApp3d, Standard_Real const TolApp2d, Standard_Real const Fleche)

        :type Tang: float
        :type Tesp: float
        :type T2d: float
        :type TApp3d: float
        :type TolApp2d: float
        :type Fleche: float

        """
        return _ChFi3d.ChFi3d_Builder_SetParams(self, *args)


    def SetContinuity(self, *args):
        """
        SetContinuity(ChFi3d_Builder self, GeomAbs_Shape const InternalContinuity, Standard_Real const AngularTolerance)

        :type InternalContinuity: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :type AngularTolerance: float

        """
        return _ChFi3d.ChFi3d_Builder_SetContinuity(self, *args)


    def Remove(self, *args):
        """
        Remove(ChFi3d_Builder self, TopoDS_Edge E)

        extracts from  the list the contour containing edge E.

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _ChFi3d.ChFi3d_Builder_Remove(self, *args)


    def Contains(self, *args):
        """
        Contains(ChFi3d_Builder self, TopoDS_Edge E) -> Standard_Integer
        Contains(ChFi3d_Builder self, TopoDS_Edge E) -> Standard_Integer

        gives  the number of  the contour containing E or 0
        if E does  not  belong  to  any  contour.
        Sets in IndexInSpine the index of E in the contour if it's found

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type IndexInSpine: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ChFi3d.ChFi3d_Builder_Contains(self, *args)


    def NbElements(self, *args):
        """
        NbElements(ChFi3d_Builder self) -> Standard_Integer

        gives the number of  disjoint contours on  which
        the  fillets  are  calculated

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ChFi3d.ChFi3d_Builder_NbElements(self, *args)


    def Value(self, *args):
        """
        Value(ChFi3d_Builder self, Standard_Integer const I) -> Handle_ChFiDS_Spine

        gives the n'th set  of edges (contour)
        if I >NbElements()

        :type I: int
        :rtype: OCC.wrapper.ChFiDS.Handle_ChFiDS_Spine

        """
        return _ChFi3d.ChFi3d_Builder_Value(self, *args)


    def Length(self, *args):
        """
        Length(ChFi3d_Builder self, Standard_Integer const IC) -> Standard_Real

        returns the length of  the contour of index IC.

        :type IC: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ChFi3d.ChFi3d_Builder_Length(self, *args)


    def FirstVertex(self, *args):
        """
        FirstVertex(ChFi3d_Builder self, Standard_Integer const IC) -> TopoDS_Vertex

        returns the First vertex V of
        the contour of index IC.

        :type IC: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _ChFi3d.ChFi3d_Builder_FirstVertex(self, *args)


    def LastVertex(self, *args):
        """
        LastVertex(ChFi3d_Builder self, Standard_Integer const IC) -> TopoDS_Vertex

        returns the Last vertex V of
        the contour of index IC.

        :type IC: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _ChFi3d.ChFi3d_Builder_LastVertex(self, *args)


    def Abscissa(self, *args):
        """
        Abscissa(ChFi3d_Builder self, Standard_Integer const IC, TopoDS_Vertex V) -> Standard_Real

        returns the abscissa of the vertex V on
        the contour of index IC.

        :type IC: int
        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ChFi3d.ChFi3d_Builder_Abscissa(self, *args)


    def RelativeAbscissa(self, *args):
        """
        RelativeAbscissa(ChFi3d_Builder self, Standard_Integer const IC, TopoDS_Vertex V) -> Standard_Real

        returns the relative abscissa([0.,1.]) of the
        vertex V on the contour of index IC.

        :type IC: int
        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ChFi3d.ChFi3d_Builder_RelativeAbscissa(self, *args)


    def ClosedAndTangent(self, *args):
        """
        ClosedAndTangent(ChFi3d_Builder self, Standard_Integer const IC) -> Standard_Boolean

        returns true if the contour of index IC is closed
        an tangent.

        :type IC: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ChFi3d.ChFi3d_Builder_ClosedAndTangent(self, *args)


    def Closed(self, *args):
        """
        Closed(ChFi3d_Builder self, Standard_Integer const IC) -> Standard_Boolean

        returns true if the contour of index IC is closed

        :type IC: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ChFi3d.ChFi3d_Builder_Closed(self, *args)


    def Compute(self, *args):
        """
        Compute(ChFi3d_Builder self)

        general calculation of geometry on all edges,
        topologic reconstruction.


        """
        return _ChFi3d.ChFi3d_Builder_Compute(self, *args)


    def IsDone(self, *args):
        """
        IsDone(ChFi3d_Builder self) -> Standard_Boolean

        returns True if the computation  is  success

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ChFi3d.ChFi3d_Builder_IsDone(self, *args)


    def Shape(self, *args):
        """
        Shape(ChFi3d_Builder self) -> TopoDS_Shape

        if (Isdone()) makes the result.
        if (!Isdone())

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _ChFi3d.ChFi3d_Builder_Shape(self, *args)


    def Generated(self, *args):
        """
        Advanced  function for the history

        :type EouV: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        res = _ChFi3d.ChFi3d_Builder_Generated(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NbFaultyContours(self, *args):
        """
        NbFaultyContours(ChFi3d_Builder self) -> Standard_Integer

        Returns the number of contours on  which the calculation
        has failed.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ChFi3d.ChFi3d_Builder_NbFaultyContours(self, *args)


    def FaultyContour(self, *args):
        """
        FaultyContour(ChFi3d_Builder self, Standard_Integer const I) -> Standard_Integer

        Returns the number of  I'th contour on  which the calculation
        has failed.

        :type I: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ChFi3d.ChFi3d_Builder_FaultyContour(self, *args)


    def NbComputedSurfaces(self, *args):
        """
        NbComputedSurfaces(ChFi3d_Builder self, Standard_Integer const IC) -> Standard_Integer

        Returns the number of  surfaces calculated  on  the contour IC.

        :type IC: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ChFi3d.ChFi3d_Builder_NbComputedSurfaces(self, *args)


    def ComputedSurface(self, *args):
        """
        ComputedSurface(ChFi3d_Builder self, Standard_Integer const IC, Standard_Integer const IS) -> Handle_Geom_Surface

        Returns the IS'th surface calculated on  the contour IC.

        :type IC: int
        :type IS: int
        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _ChFi3d.ChFi3d_Builder_ComputedSurface(self, *args)


    def NbFaultyVertices(self, *args):
        """
        NbFaultyVertices(ChFi3d_Builder self) -> Standard_Integer

        Returns the number of vertices on  which the calculation
        has failed.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ChFi3d.ChFi3d_Builder_NbFaultyVertices(self, *args)


    def FaultyVertex(self, *args):
        """
        FaultyVertex(ChFi3d_Builder self, Standard_Integer const IV) -> TopoDS_Vertex

        Returns the IV'th vertex on  which the calculation has failed.

        :type IV: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _ChFi3d.ChFi3d_Builder_FaultyVertex(self, *args)


    def HasResult(self, *args):
        """
        HasResult(ChFi3d_Builder self) -> Standard_Boolean

        returns True if  a partial result has  been  calculated

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ChFi3d.ChFi3d_Builder_HasResult(self, *args)


    def BadShape(self, *args):
        """
        BadShape(ChFi3d_Builder self) -> TopoDS_Shape

        if (HasResult()) returns partial result
        if (!HasResult())

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _ChFi3d.ChFi3d_Builder_BadShape(self, *args)


    def StripeStatus(self, *args):
        """
        StripeStatus(ChFi3d_Builder self, Standard_Integer const IC) -> ChFiDS_ErrorStatus

        for the stripe IC ,indication on the cause
        of  failure WalkingFailure,TwistedSurface,Error, Ok

        :type IC: int
        :rtype: OCC.wrapper.ChFiDS.ChFiDS_ErrorStatus

        """
        return _ChFi3d.ChFi3d_Builder_StripeStatus(self, *args)


    def Reset(self, *args):
        """
        Reset(ChFi3d_Builder self)

        Reset all  results of   compute and returns the  algorythm
        in  the  state  of  the  last  acquisition to
        enable modification of contours or areas.


        """
        return _ChFi3d.ChFi3d_Builder_Reset(self, *args)


    def Builder(self, *args):
        """
        Builder(ChFi3d_Builder self) -> Handle_TopOpeBRepBuild_HBuilder

        Returns the Builder of  topologic operations.

        :rtype: OCC.wrapper.TopOpeBRepBuild.Handle_TopOpeBRepBuild_HBuilder

        """
        return _ChFi3d.ChFi3d_Builder_Builder(self, *args)


    def SplitKPart(self, *args):
        """
        SplitKPart(ChFi3d_Builder self, Handle_ChFiDS_SurfData Data, NCollection_Sequence_Handle_ChFiDS_SurfData SetData, Handle_ChFiDS_Spine Spine, Standard_Integer const Iedge, Handle_Adaptor3d_HSurface S1, Handle_Adaptor3d_TopolTool I1, Handle_Adaptor3d_HSurface S2, Handle_Adaptor3d_TopolTool I2) -> Standard_Boolean

        Method, implemented in the inheritants, calculates
        the elements of construction of the surface (fillet or
        chamfer).

        :type Data: OCC.wrapper.ChFiDS.Handle_ChFiDS_SurfData
        :type SetData: OCC.wrapper.ChFiDS.ChFiDS_SequenceOfSurfData
        :type Spine: OCC.wrapper.ChFiDS.Handle_ChFiDS_Spine
        :type Iedge: int
        :type S1: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type I1: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_TopolTool
        :type S2: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HSurface
        :type I2: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_TopolTool
        :type Intf: bool
        :type Intl: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ChFi3d.ChFi3d_Builder_SplitKPart(self, *args)


    def PerformTwoCornerbyInter(self, *args):
        """
        PerformTwoCornerbyInter(ChFi3d_Builder self, Standard_Integer const Index) -> Standard_Boolean

        :type Index: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ChFi3d.ChFi3d_Builder_PerformTwoCornerbyInter(self, *args)

    __swig_destroy__ = _ChFi3d.delete_ChFi3d_Builder
ChFi3d_Builder_swigregister = _ChFi3d.ChFi3d_Builder_swigregister
ChFi3d_Builder_swigregister(ChFi3d_Builder)

class ChFi3d_(object):
    """creation of spatial fillets on a solid."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ConcaveSide(*args):
        """
        ConcaveSide(BRepAdaptor_Surface S1, BRepAdaptor_Surface S2, TopoDS_Edge E) -> Standard_Integer

        Returns  Reversed  in  Or1  and(or)  Or2  if
        the  concave edge  defined by the  interior of faces F1 and F2,
        in  the  neighbourhood of  their boundary E is of the edge opposite to  the
        normal  of their surface  support.  The  orientation of
        faces is  not  taken  into  consideration in  the calculation. The
        function  returns  0 if  the calculation fails (tangence),
        if  not, it  returns the  number of  choice of  the fillet
        or chamfer corresponding to  the orientations  calculated
        and  to  the tangent to  the  guide line read in  E.

        :type S1: OCC.wrapper.BRepAdaptor.BRepAdaptor_Surface
        :type S2: OCC.wrapper.BRepAdaptor.BRepAdaptor_Surface
        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type Or1: OCC.wrapper.TopAbs.TopAbs_Orientation
        :type Or2: OCC.wrapper.TopAbs.TopAbs_Orientation
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ChFi3d.ChFi3d__ConcaveSide(*args)

    ConcaveSide = staticmethod(ConcaveSide)

    def NextSide(*args):
        """
        NextSide(TopAbs_Orientation const OrSave1, TopAbs_Orientation const OrSave2, Standard_Integer const ChoixSauv) -> Standard_Integer
        NextSide(TopAbs_Orientation const OrSave, TopAbs_Orientation const OrFace)

        Same  as  the  other NextSide, but the calculation is  done
        on an edge  only.

        :type Or: OCC.wrapper.TopAbs.TopAbs_Orientation
        :type OrSave: OCC.wrapper.TopAbs.TopAbs_Orientation
        :type OrFace: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _ChFi3d.ChFi3d__NextSide(*args)

    NextSide = staticmethod(NextSide)

    def SameSide(*args):
        """
        SameSide(TopAbs_Orientation const Or, TopAbs_Orientation const OrSave1, TopAbs_Orientation const OrSave2, TopAbs_Orientation const OrFace1, TopAbs_Orientation const OrFace2) -> Standard_Boolean

        Enables  to  determine while  processing  an  angle, if
        two fillets or chamfers constituting a face have
        identic or opposed  concave  edges.

        :type Or: OCC.wrapper.TopAbs.TopAbs_Orientation
        :type OrSave1: OCC.wrapper.TopAbs.TopAbs_Orientation
        :type OrSave2: OCC.wrapper.TopAbs.TopAbs_Orientation
        :type OrFace1: OCC.wrapper.TopAbs.TopAbs_Orientation
        :type OrFace2: OCC.wrapper.TopAbs.TopAbs_Orientation
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ChFi3d.ChFi3d__SameSide(*args)

    SameSide = staticmethod(SameSide)

    def __init__(self):
        """creation of spatial fillets on a solid."""
        this = _ChFi3d.new_ChFi3d_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ChFi3d.delete_ChFi3d_
ChFi3d__swigregister = _ChFi3d.ChFi3d__swigregister
ChFi3d__swigregister(ChFi3d_)

def ChFi3d__ConcaveSide(*args):
    """
    ChFi3d__ConcaveSide(BRepAdaptor_Surface S1, BRepAdaptor_Surface S2, TopoDS_Edge E) -> Standard_Integer

    Returns  Reversed  in  Or1  and(or)  Or2  if
    the  concave edge  defined by the  interior of faces F1 and F2,
    in  the  neighbourhood of  their boundary E is of the edge opposite to  the
    normal  of their surface  support.  The  orientation of
    faces is  not  taken  into  consideration in  the calculation. The
    function  returns  0 if  the calculation fails (tangence),
    if  not, it  returns the  number of  choice of  the fillet
    or chamfer corresponding to  the orientations  calculated
    and  to  the tangent to  the  guide line read in  E.

    :type S1: OCC.wrapper.BRepAdaptor.BRepAdaptor_Surface
    :type S2: OCC.wrapper.BRepAdaptor.BRepAdaptor_Surface
    :type E: OCC.wrapper.TopoDS.TopoDS_Edge
    :type Or1: OCC.wrapper.TopAbs.TopAbs_Orientation
    :type Or2: OCC.wrapper.TopAbs.TopAbs_Orientation
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _ChFi3d.ChFi3d__ConcaveSide(*args)

def ChFi3d__NextSide(*args):
    """
    NextSide(TopAbs_Orientation const OrSave1, TopAbs_Orientation const OrSave2, Standard_Integer const ChoixSauv) -> Standard_Integer
    ChFi3d__NextSide(TopAbs_Orientation const OrSave, TopAbs_Orientation const OrFace)

    Same  as  the  other NextSide, but the calculation is  done
    on an edge  only.

    :type Or: OCC.wrapper.TopAbs.TopAbs_Orientation
    :type OrSave: OCC.wrapper.TopAbs.TopAbs_Orientation
    :type OrFace: OCC.wrapper.TopAbs.TopAbs_Orientation

    """
    return _ChFi3d.ChFi3d__NextSide(*args)

def ChFi3d__SameSide(*args):
    """
    ChFi3d__SameSide(TopAbs_Orientation const Or, TopAbs_Orientation const OrSave1, TopAbs_Orientation const OrSave2, TopAbs_Orientation const OrFace1, TopAbs_Orientation const OrFace2) -> Standard_Boolean

    Enables  to  determine while  processing  an  angle, if
    two fillets or chamfers constituting a face have
    identic or opposed  concave  edges.

    :type Or: OCC.wrapper.TopAbs.TopAbs_Orientation
    :type OrSave1: OCC.wrapper.TopAbs.TopAbs_Orientation
    :type OrSave2: OCC.wrapper.TopAbs.TopAbs_Orientation
    :type OrFace1: OCC.wrapper.TopAbs.TopAbs_Orientation
    :type OrFace2: OCC.wrapper.TopAbs.TopAbs_Orientation
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _ChFi3d.ChFi3d__SameSide(*args)

class ChFi3d_FilBuilder(ChFi3d_Builder):
    """Tool  of  construction of  fillets 3d on  edges (on a solid)."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ChFi3d_FilBuilder self, TopoDS_Shape S, ChFi3d_FilletShape const FShape=ChFi3d_Rational, Standard_Real const Ta=1.0e-2) -> ChFi3d_FilBuilder

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type FShape: OCC.wrapper.ChFi3d.ChFi3d_FilletShape
        :type Ta: float

        """
        this = _ChFi3d.new_ChFi3d_FilBuilder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetFilletShape(self, *args):
        """
        SetFilletShape(ChFi3d_FilBuilder self, ChFi3d_FilletShape const FShape)

        Sets the type of fillet surface.

        :type FShape: OCC.wrapper.ChFi3d.ChFi3d_FilletShape

        """
        return _ChFi3d.ChFi3d_FilBuilder_SetFilletShape(self, *args)


    def GetFilletShape(self, *args):
        """
        GetFilletShape(ChFi3d_FilBuilder self) -> ChFi3d_FilletShape

        Returns the type of fillet surface.

        :rtype: OCC.wrapper.ChFi3d.ChFi3d_FilletShape

        """
        return _ChFi3d.ChFi3d_FilBuilder_GetFilletShape(self, *args)


    def Add(self, *args):
        """
        Add(ChFi3d_FilBuilder self, TopoDS_Edge E)
        Add(ChFi3d_FilBuilder self, Standard_Real const Radius, TopoDS_Edge E)

        initialisation of the constant vector the corresponding  1st  edge.

        :type Radius: float
        :type E: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _ChFi3d.ChFi3d_FilBuilder_Add(self, *args)


    def ResetContour(self, *args):
        """
        ResetContour(ChFi3d_FilBuilder self, Standard_Integer const IC)

        Reset all vectors of contour IC.

        :type IC: int

        """
        return _ChFi3d.ChFi3d_FilBuilder_ResetContour(self, *args)


    def UnSet(self, *args):
        """
        UnSet(ChFi3d_FilBuilder self, Standard_Integer const IC, TopoDS_Edge E)
        UnSet(ChFi3d_FilBuilder self, Standard_Integer const IC, TopoDS_Vertex V)

        Extracts the vector of  the vertex V.

        :type IC: int
        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _ChFi3d.ChFi3d_FilBuilder_UnSet(self, *args)


    def SetRadius(self, *args):
        """
        SetRadius(ChFi3d_FilBuilder self, Handle_Law_Function C, Standard_Integer const IC, Standard_Integer const IinC)
        SetRadius(ChFi3d_FilBuilder self, Standard_Real const Radius, Standard_Integer const IC, TopoDS_Edge E)
        SetRadius(ChFi3d_FilBuilder self, Standard_Real const Radius, Standard_Integer const IC, TopoDS_Vertex V)
        SetRadius(ChFi3d_FilBuilder self, gp_XY UandR, Standard_Integer const IC, Standard_Integer const IinC)

        Set  a vertex on the point of parametre U in the edge IinC
        of  the contour of index IC

        :type UandR: OCC.wrapper.gp.gp_XY
        :type IC: int
        :type IinC: int

        """
        return _ChFi3d.ChFi3d_FilBuilder_SetRadius(self, *args)


    def IsConstant(self, *args):
        """
        IsConstant(ChFi3d_FilBuilder self, Standard_Integer const IC) -> Standard_Boolean
        IsConstant(ChFi3d_FilBuilder self, Standard_Integer const IC, TopoDS_Edge E) -> Standard_Boolean

        Returns true E is flagged as edge constant.

        :type IC: int
        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ChFi3d.ChFi3d_FilBuilder_IsConstant(self, *args)


    def Radius(self, *args):
        """
        Radius(ChFi3d_FilBuilder self, Standard_Integer const IC) -> Standard_Real
        Radius(ChFi3d_FilBuilder self, Standard_Integer const IC, TopoDS_Edge E) -> Standard_Real

        Returns the vector if E is flagged as edge constant.

        :type IC: int
        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ChFi3d.ChFi3d_FilBuilder_Radius(self, *args)


    def GetBounds(self, *args):
        """
        GetBounds(ChFi3d_FilBuilder self, Standard_Integer const IC, TopoDS_Edge E) -> Standard_Boolean

        Returns in First and Last  les extremities of  the
        part of variable  vector framing E, returns
        False  if  E is flagged as edge constant.

        :type IC: int
        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type First: float
        :type Last: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ChFi3d.ChFi3d_FilBuilder_GetBounds(self, *args)


    def GetLaw(self, *args):
        """
        GetLaw(ChFi3d_FilBuilder self, Standard_Integer const IC, TopoDS_Edge E) -> Handle_Law_Function

        Returns the rule of  elementary  evolution of  the
        part to  variable vector framing E, returns a
        rule zero if E is flagged as edge constant.

        :type IC: int
        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.Law.Handle_Law_Function

        """
        return _ChFi3d.ChFi3d_FilBuilder_GetLaw(self, *args)


    def SetLaw(self, *args):
        """
        SetLaw(ChFi3d_FilBuilder self, Standard_Integer const IC, TopoDS_Edge E, Handle_Law_Function L)

        Sets the rule of elementary evolution of  the
        part to variable  vector framing E.

        :type IC: int
        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type L: OCC.wrapper.Law.Handle_Law_Function

        """
        return _ChFi3d.ChFi3d_FilBuilder_SetLaw(self, *args)


    def Simulate(self, *args):
        """
        Simulate(ChFi3d_FilBuilder self, Standard_Integer const IC)

        :type IC: int

        """
        return _ChFi3d.ChFi3d_FilBuilder_Simulate(self, *args)


    def NbSurf(self, *args):
        """
        NbSurf(ChFi3d_FilBuilder self, Standard_Integer const IC) -> Standard_Integer

        :type IC: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ChFi3d.ChFi3d_FilBuilder_NbSurf(self, *args)


    def Sect(self, *args):
        """
        Sect(ChFi3d_FilBuilder self, Standard_Integer const IC, Standard_Integer const IS) -> Handle_ChFiDS_SecHArray1

        :type IC: int
        :type IS: int
        :rtype: OCC.wrapper.ChFiDS.Handle_ChFiDS_SecHArray1

        """
        return _ChFi3d.ChFi3d_FilBuilder_Sect(self, *args)

    __swig_destroy__ = _ChFi3d.delete_ChFi3d_FilBuilder
ChFi3d_FilBuilder_swigregister = _ChFi3d.ChFi3d_FilBuilder_swigregister
ChFi3d_FilBuilder_swigregister(ChFi3d_FilBuilder)

class ChFi3d_ChBuilder(ChFi3d_Builder):
    """construction tool for 3D chamfers on edges (on a solid)."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ChFi3d_ChBuilder self, TopoDS_Shape S, Standard_Real const Ta=1.0e-2) -> ChFi3d_ChBuilder

        initializes the Builder with the Shape <S> for the
        computation of chamfers

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type Ta: float

        """
        this = _ChFi3d.new_ChFi3d_ChBuilder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetDist(self, *args):
        """
        SetDist(ChFi3d_ChBuilder self, Standard_Real const Dis, Standard_Integer const IC, TopoDS_Face F)

        set the distance <Dis> of the fillet
        contour of index <IC> in the DS with <Dis> on <F>.
        if the face <F> is not one of common faces
        of an edge of the contour <IC>

        :type Dis: float
        :type IC: int
        :type F: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _ChFi3d.ChFi3d_ChBuilder_SetDist(self, *args)


    def GetDist(self, *args):
        """
        GetDist(ChFi3d_ChBuilder self, Standard_Integer const IC)

        gives the distances <Dis> of the fillet
        contour of index <IC> in the DS

        :type IC: int
        :type Dis: float

        """
        return _ChFi3d.ChFi3d_ChBuilder_GetDist(self, *args)


    def Add(self, *args):
        """
        Add(ChFi3d_ChBuilder self, TopoDS_Edge E)
        Add(ChFi3d_ChBuilder self, Standard_Real const Dis, TopoDS_Edge E, TopoDS_Face F)
        Add(ChFi3d_ChBuilder self, Standard_Real const Dis1, Standard_Real const Dis2, TopoDS_Edge E, TopoDS_Face F)

        initializes a new contour with the edge <E> as first
        (the next are found by propagation ), and  the
        distance <Dis1> and <Dis2>
        if the edge <E> has more than 2 adjacent faces

        :type Dis1: float
        :type Dis2: float
        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type F: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _ChFi3d.ChFi3d_ChBuilder_Add(self, *args)


    def SetDists(self, *args):
        """
        SetDists(ChFi3d_ChBuilder self, Standard_Real const Dis1, Standard_Real const Dis2, Standard_Integer const IC, TopoDS_Face F)

        set the distances <Dis1> and <Dis2> of the fillet
        contour of index <IC> in the DS with <Dis1> on <F>.
        if the face <F> is not one of common faces
        of an edge of the contour <IC>

        :type Dis1: float
        :type Dis2: float
        :type IC: int
        :type F: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _ChFi3d.ChFi3d_ChBuilder_SetDists(self, *args)


    def Dists(self, *args):
        """
        Dists(ChFi3d_ChBuilder self, Standard_Integer const IC)

        gives the distances <Dis1> and <Dis2> of the fillet
        contour of index <IC> in the DS

        :type IC: int
        :type Dis1: float
        :type Dis2: float

        """
        return _ChFi3d.ChFi3d_ChBuilder_Dists(self, *args)


    def AddDA(self, *args):
        """
        AddDA(ChFi3d_ChBuilder self, Standard_Real const Dis, Standard_Real const Angle, TopoDS_Edge E, TopoDS_Face F)

        initializes a new contour with the edge <E> as first
        (the next are found by propagation ), and  the
        distance <Dis1> and <Angle>
        if the edge <E> has more than 2 adjacent faces

        :type Dis: float
        :type Angle: float
        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type F: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _ChFi3d.ChFi3d_ChBuilder_AddDA(self, *args)


    def SetDistAngle(self, *args):
        """
        SetDistAngle(ChFi3d_ChBuilder self, Standard_Real const Dis, Standard_Real const Angle, Standard_Integer const IC, TopoDS_Face F)

        set the distance <Dis> and <Angle> of the fillet
        contour of index <IC> in the DS with <Dis> on <F>.
        if the face <F> is not one of common faces
        of an edge of the contour <IC>

        :type Dis: float
        :type Angle: float
        :type IC: int
        :type F: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _ChFi3d.ChFi3d_ChBuilder_SetDistAngle(self, *args)


    def GetDistAngle(self, *args):
        """
        GetDistAngle(ChFi3d_ChBuilder self, Standard_Integer const IC)

        gives the distances <Dis> and <Angle> of the fillet
        contour of index <IC> in the DS

        :type IC: int
        :type Dis: float
        :type Angle: float
        :type DisOnFace1: bool

        """
        return _ChFi3d.ChFi3d_ChBuilder_GetDistAngle(self, *args)


    def IsChamfer(self, *args):
        """
        IsChamfer(ChFi3d_ChBuilder self, Standard_Integer const IC) -> ChFiDS_ChamfMethod

        renvoi la methode des chanfreins utilisee

        :type IC: int
        :rtype: OCC.wrapper.ChFiDS.ChFiDS_ChamfMethod

        """
        return _ChFi3d.ChFi3d_ChBuilder_IsChamfer(self, *args)


    def ResetContour(self, *args):
        """
        ResetContour(ChFi3d_ChBuilder self, Standard_Integer const IC)

        Reset tous rayons du contour IC.

        :type IC: int

        """
        return _ChFi3d.ChFi3d_ChBuilder_ResetContour(self, *args)


    def Simulate(self, *args):
        """
        Simulate(ChFi3d_ChBuilder self, Standard_Integer const IC)

        :type IC: int

        """
        return _ChFi3d.ChFi3d_ChBuilder_Simulate(self, *args)


    def NbSurf(self, *args):
        """
        NbSurf(ChFi3d_ChBuilder self, Standard_Integer const IC) -> Standard_Integer

        :type IC: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ChFi3d.ChFi3d_ChBuilder_NbSurf(self, *args)


    def Sect(self, *args):
        """
        Sect(ChFi3d_ChBuilder self, Standard_Integer const IC, Standard_Integer const IS) -> Handle_ChFiDS_SecHArray1

        :type IC: int
        :type IS: int
        :rtype: OCC.wrapper.ChFiDS.Handle_ChFiDS_SecHArray1

        """
        return _ChFi3d.ChFi3d_ChBuilder_Sect(self, *args)


    def SimulSurf(self, *args):
        """
        SimulSurf(ChFi3d_ChBuilder self, Handle_ChFiDS_SurfData Data, Handle_ChFiDS_HElSpine Guide, Handle_ChFiDS_Spine Spine, Standard_Integer const Choix, Handle_BRepAdaptor_HSurface S1, Handle_Adaptor3d_TopolTool I1, Handle_BRepAdaptor_HCurve2d PC1, Handle_BRepAdaptor_HSurface Sref1, Handle_BRepAdaptor_HCurve2d PCref1, Handle_BRepAdaptor_HSurface S2, Handle_Adaptor3d_TopolTool I2, TopAbs_Orientation const Or2, Standard_Real const Fleche, Standard_Real const TolGuide, Standard_Boolean const Inside, Standard_Boolean const Appro, Standard_Boolean const Forward, Standard_Boolean const RecP, Standard_Boolean const RecS, Standard_Boolean const RecRst, math_Vector Soldep)
        SimulSurf(ChFi3d_ChBuilder self, Handle_ChFiDS_SurfData Data, Handle_ChFiDS_HElSpine Guide, Handle_ChFiDS_Spine Spine, Standard_Integer const Choix, Handle_BRepAdaptor_HSurface S1, Handle_Adaptor3d_TopolTool I1, TopAbs_Orientation const Or1, Handle_BRepAdaptor_HSurface S2, Handle_Adaptor3d_TopolTool I2, Handle_BRepAdaptor_HCurve2d PC2, Handle_BRepAdaptor_HSurface Sref2, Handle_BRepAdaptor_HCurve2d PCref2, Standard_Real const Fleche, Standard_Real const TolGuide, Standard_Boolean const Inside, Standard_Boolean const Appro, Standard_Boolean const Forward, Standard_Boolean const RecP, Standard_Boolean const RecS, Standard_Boolean const RecRst, math_Vector Soldep)
        SimulSurf(ChFi3d_ChBuilder self, Handle_ChFiDS_SurfData Data, Handle_ChFiDS_HElSpine Guide, Handle_ChFiDS_Spine Spine, Standard_Integer const Choix, Handle_BRepAdaptor_HSurface S1, Handle_Adaptor3d_TopolTool I1, Handle_BRepAdaptor_HCurve2d PC1, Handle_BRepAdaptor_HSurface Sref1, Handle_BRepAdaptor_HCurve2d PCref1, TopAbs_Orientation const Or1, Handle_BRepAdaptor_HSurface S2, Handle_Adaptor3d_TopolTool I2, Handle_BRepAdaptor_HCurve2d PC2, Handle_BRepAdaptor_HSurface Sref2, Handle_BRepAdaptor_HCurve2d PCref2, TopAbs_Orientation const Or2, Standard_Real const Fleche, Standard_Real const TolGuide, Standard_Boolean const Inside, Standard_Boolean const Appro, Standard_Boolean const Forward, Standard_Boolean const RecP1, Standard_Boolean const RecRst1, Standard_Boolean const RecP2, Standard_Boolean const RecRst2, math_Vector Soldep)

        :type Data: OCC.wrapper.ChFiDS.Handle_ChFiDS_SurfData
        :type Guide: OCC.wrapper.ChFiDS.Handle_ChFiDS_HElSpine
        :type Spine: OCC.wrapper.ChFiDS.Handle_ChFiDS_Spine
        :type Choix: int
        :type S1: OCC.wrapper.BRepAdaptor.Handle_BRepAdaptor_HSurface
        :type I1: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_TopolTool
        :type PC1: OCC.wrapper.BRepAdaptor.Handle_BRepAdaptor_HCurve2d
        :type Sref1: OCC.wrapper.BRepAdaptor.Handle_BRepAdaptor_HSurface
        :type PCref1: OCC.wrapper.BRepAdaptor.Handle_BRepAdaptor_HCurve2d
        :type Decroch1: bool
        :type Or1: OCC.wrapper.TopAbs.TopAbs_Orientation
        :type S2: OCC.wrapper.BRepAdaptor.Handle_BRepAdaptor_HSurface
        :type I2: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_TopolTool
        :type PC2: OCC.wrapper.BRepAdaptor.Handle_BRepAdaptor_HCurve2d
        :type Sref2: OCC.wrapper.BRepAdaptor.Handle_BRepAdaptor_HSurface
        :type PCref2: OCC.wrapper.BRepAdaptor.Handle_BRepAdaptor_HCurve2d
        :type Decroch2: bool
        :type Or2: OCC.wrapper.TopAbs.TopAbs_Orientation
        :type Fleche: float
        :type TolGuide: float
        :type First: float
        :type Last: float
        :type Inside: bool
        :type Appro: bool
        :type Forward: bool
        :type RecP1: bool
        :type RecRst1: bool
        :type RecP2: bool
        :type RecRst2: bool
        :type Soldep: OCC.wrapper.math.math_Vector

        """
        return _ChFi3d.ChFi3d_ChBuilder_SimulSurf(self, *args)


    def PerformSurf(self, *args):
        """
        PerformSurf(ChFi3d_ChBuilder self, NCollection_Sequence_Handle_ChFiDS_SurfData Data, Handle_ChFiDS_HElSpine Guide, Handle_ChFiDS_Spine Spine, Standard_Integer const Choix, Handle_BRepAdaptor_HSurface S1, Handle_Adaptor3d_TopolTool I1, Handle_BRepAdaptor_HSurface S2, Handle_Adaptor3d_TopolTool I2, Standard_Real const MaxStep, Standard_Real const Fleche, Standard_Real const TolGuide, Standard_Boolean const Inside, Standard_Boolean const Appro, Standard_Boolean const Forward, Standard_Boolean const RecOnS1, Standard_Boolean const RecOnS2, math_Vector Soldep) -> Standard_Boolean
        PerformSurf(ChFi3d_ChBuilder self, NCollection_Sequence_Handle_ChFiDS_SurfData Data, Handle_ChFiDS_HElSpine Guide, Handle_ChFiDS_Spine Spine, Standard_Integer const Choix, Handle_BRepAdaptor_HSurface S1, Handle_Adaptor3d_TopolTool I1, Handle_BRepAdaptor_HCurve2d PC1, Handle_BRepAdaptor_HSurface Sref1, Handle_BRepAdaptor_HCurve2d PCref1, Handle_BRepAdaptor_HSurface S2, Handle_Adaptor3d_TopolTool I2, TopAbs_Orientation const Or2, Standard_Real const MaxStep, Standard_Real const Fleche, Standard_Real const TolGuide, Standard_Boolean const Inside, Standard_Boolean const Appro, Standard_Boolean const Forward, Standard_Boolean const RecP, Standard_Boolean const RecS, Standard_Boolean const RecRst, math_Vector Soldep)
        PerformSurf(ChFi3d_ChBuilder self, NCollection_Sequence_Handle_ChFiDS_SurfData Data, Handle_ChFiDS_HElSpine Guide, Handle_ChFiDS_Spine Spine, Standard_Integer const Choix, Handle_BRepAdaptor_HSurface S1, Handle_Adaptor3d_TopolTool I1, TopAbs_Orientation const Or1, Handle_BRepAdaptor_HSurface S2, Handle_Adaptor3d_TopolTool I2, Handle_BRepAdaptor_HCurve2d PC2, Handle_BRepAdaptor_HSurface Sref2, Handle_BRepAdaptor_HCurve2d PCref2, Standard_Real const MaxStep, Standard_Real const Fleche, Standard_Real const TolGuide, Standard_Boolean const Inside, Standard_Boolean const Appro, Standard_Boolean const Forward, Standard_Boolean const RecP, Standard_Boolean const RecS, Standard_Boolean const RecRst, math_Vector Soldep)
        PerformSurf(ChFi3d_ChBuilder self, NCollection_Sequence_Handle_ChFiDS_SurfData Data, Handle_ChFiDS_HElSpine Guide, Handle_ChFiDS_Spine Spine, Standard_Integer const Choix, Handle_BRepAdaptor_HSurface S1, Handle_Adaptor3d_TopolTool I1, Handle_BRepAdaptor_HCurve2d PC1, Handle_BRepAdaptor_HSurface Sref1, Handle_BRepAdaptor_HCurve2d PCref1, TopAbs_Orientation const Or1, Handle_BRepAdaptor_HSurface S2, Handle_Adaptor3d_TopolTool I2, Handle_BRepAdaptor_HCurve2d PC2, Handle_BRepAdaptor_HSurface Sref2, Handle_BRepAdaptor_HCurve2d PCref2, TopAbs_Orientation const Or2, Standard_Real const MaxStep, Standard_Real const Fleche, Standard_Real const TolGuide, Standard_Boolean const Inside, Standard_Boolean const Appro, Standard_Boolean const Forward, Standard_Boolean const RecP1, Standard_Boolean const RecRst1, Standard_Boolean const RecP2, Standard_Boolean const RecRst2, math_Vector Soldep)

        Method, implemented in  inheritants, calculates
        the elements of construction of  the surface (fillet
        or chamfer) contact edge/edge.

        :type Data: OCC.wrapper.ChFiDS.ChFiDS_SequenceOfSurfData
        :type Guide: OCC.wrapper.ChFiDS.Handle_ChFiDS_HElSpine
        :type Spine: OCC.wrapper.ChFiDS.Handle_ChFiDS_Spine
        :type Choix: int
        :type S1: OCC.wrapper.BRepAdaptor.Handle_BRepAdaptor_HSurface
        :type I1: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_TopolTool
        :type PC1: OCC.wrapper.BRepAdaptor.Handle_BRepAdaptor_HCurve2d
        :type Sref1: OCC.wrapper.BRepAdaptor.Handle_BRepAdaptor_HSurface
        :type PCref1: OCC.wrapper.BRepAdaptor.Handle_BRepAdaptor_HCurve2d
        :type Decroch1: bool
        :type Or1: OCC.wrapper.TopAbs.TopAbs_Orientation
        :type S2: OCC.wrapper.BRepAdaptor.Handle_BRepAdaptor_HSurface
        :type I2: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_TopolTool
        :type PC2: OCC.wrapper.BRepAdaptor.Handle_BRepAdaptor_HCurve2d
        :type Sref2: OCC.wrapper.BRepAdaptor.Handle_BRepAdaptor_HSurface
        :type PCref2: OCC.wrapper.BRepAdaptor.Handle_BRepAdaptor_HCurve2d
        :type Decroch2: bool
        :type Or2: OCC.wrapper.TopAbs.TopAbs_Orientation
        :type MaxStep: float
        :type Fleche: float
        :type TolGuide: float
        :type First: float
        :type Last: float
        :type Inside: bool
        :type Appro: bool
        :type Forward: bool
        :type RecP1: bool
        :type RecRst1: bool
        :type RecP2: bool
        :type RecRst2: bool
        :type Soldep: OCC.wrapper.math.math_Vector

        """
        return _ChFi3d.ChFi3d_ChBuilder_PerformSurf(self, *args)


    def FindChoiceDistAngle(self, *args):
        """
        FindChoiceDistAngle(ChFi3d_ChBuilder self, Standard_Integer const Choice, Standard_Boolean const DisOnF1) -> Standard_Integer

        :type Choice: int
        :type DisOnF1: bool
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ChFi3d.ChFi3d_ChBuilder_FindChoiceDistAngle(self, *args)

    __swig_destroy__ = _ChFi3d.delete_ChFi3d_ChBuilder
ChFi3d_ChBuilder_swigregister = _ChFi3d.ChFi3d_ChBuilder_swigregister
ChFi3d_ChBuilder_swigregister(ChFi3d_ChBuilder)

class ChFi3d_SearchSing(math.math_FunctionWithDerivative):
    """
    Searches   singularities on fillet.
    F(t) = (C1(t) - C2(t)).(C1'(t) - C2'(t));
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ChFi3d_SearchSing self, Handle_Geom_Curve C1, Handle_Geom_Curve C2) -> ChFi3d_SearchSing

        :type C1: OCC.wrapper.Geom.Handle_Geom_Curve
        :type C2: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        this = _ChFi3d.new_ChFi3d_SearchSing(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self, *args):
        """
        Value(ChFi3d_SearchSing self, Standard_Real const X) -> Standard_Boolean

        computes the value of the function <F> for the
        variable <X>.
        returns True if the computation was done successfully,
        False otherwise.

        :type X: float
        :type F: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ChFi3d.ChFi3d_SearchSing_Value(self, *args)


    def Derivative(self, *args):
        """
        Derivative(ChFi3d_SearchSing self, Standard_Real const X) -> Standard_Boolean

        computes the derivative <D> of the function
        for the variable <X>.
        Returns True if the calculation were successfully done,
        False otherwise.

        :type X: float
        :type D: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ChFi3d.ChFi3d_SearchSing_Derivative(self, *args)


    def Values(self, *args):
        """
        Values(ChFi3d_SearchSing self, Standard_Real const X) -> Standard_Boolean

        computes the value <F> and the derivative <D> of the
        function for the variable <X>.
        Returns True if the calculation were successfully done,
        False otherwise.

        :type X: float
        :type F: float
        :type D: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ChFi3d.ChFi3d_SearchSing_Values(self, *args)

    __swig_destroy__ = _ChFi3d.delete_ChFi3d_SearchSing
ChFi3d_SearchSing_swigregister = _ChFi3d.ChFi3d_SearchSing_swigregister
ChFi3d_SearchSing_swigregister(ChFi3d_SearchSing)



