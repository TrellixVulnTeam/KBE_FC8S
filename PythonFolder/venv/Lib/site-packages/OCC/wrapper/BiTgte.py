# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BiTgte')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BiTgte')
    _BiTgte = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BiTgte', [dirname(__file__)])
        except ImportError:
            import _BiTgte
            return _BiTgte
        try:
            _mod = imp.load_module('_BiTgte', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BiTgte = swig_import_helper()
    del swig_import_helper
else:
    import _BiTgte
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BiTgte.delete_SwigPyIterator

    def value(self):
        return _BiTgte.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BiTgte.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BiTgte.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BiTgte.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BiTgte.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BiTgte.SwigPyIterator_copy(self)

    def next(self):
        return _BiTgte.SwigPyIterator_next(self)

    def __next__(self):
        return _BiTgte.SwigPyIterator___next__(self)

    def previous(self):
        return _BiTgte.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BiTgte.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BiTgte.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BiTgte.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BiTgte.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BiTgte.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BiTgte.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BiTgte.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BiTgte.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BiTgte.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_BiTgte.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _BiTgte.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BiTgte.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BiTgte.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _BiTgte.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _BiTgte.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _BiTgte.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BiTgte.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_BiTgte.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _BiTgte.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BiTgte.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BiTgte.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _BiTgte.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _BiTgte.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _BiTgte.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _BiTgte.ptr_to_number(item)
ptr_to_number = _BiTgte.ptr_to_number

def HashCode(*args):
    return _BiTgte.HashCode(*args)
HashCode = _BiTgte.HashCode

def ptr_equal(a, b):
    return _BiTgte.ptr_equal(a, b)
ptr_equal = _BiTgte.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepOffset
else:
    import BRepOffset
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepTools
else:
    import BRepTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRep
else:
    import BRep
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepAlgo
else:
    import BRepAlgo
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopOpeBRepDS
else:
    import TopOpeBRepDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopOpeBRepTool
else:
    import TopOpeBRepTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopExp
else:
    import TopExp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepClass3d
else:
    import BRepClass3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntCurveSurface
else:
    import IntCurveSurface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Intf
else:
    import Intf
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntAna
else:
    import IntAna
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntSurf
else:
    import IntSurf
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntCurvesFace
else:
    import IntCurvesFace
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepAdaptor
else:
    import BRepAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2dAdaptor
else:
    import Geom2dAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAdaptor
else:
    import GeomAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepBuilderAPI
else:
    import BRepBuilderAPI
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopOpeBRepBuild
else:
    import TopOpeBRepBuild
del _swig_python_version_info
BiTgte_FaceFace = _BiTgte.BiTgte_FaceFace
BiTgte_FaceEdge = _BiTgte.BiTgte_FaceEdge
BiTgte_FaceVertex = _BiTgte.BiTgte_FaceVertex
BiTgte_EdgeEdge = _BiTgte.BiTgte_EdgeEdge
BiTgte_EdgeVertex = _BiTgte.BiTgte_EdgeVertex
BiTgte_VertexVertex = _BiTgte.BiTgte_VertexVertex
class BiTgte_HCurveOnVertex(Adaptor3d.Adaptor3d_HCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BiTgte_HCurveOnVertex
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BiTgte_HCurveOnVertex(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BiTgte_HCurveOnVertex self) -> BiTgte_HCurveOnVertex
        __init__(BiTgte_HCurveOnVertex self, BiTgte_CurveOnVertex C) -> BiTgte_HCurveOnVertex

        Creates a GenHCurve from a Curve

        :type C: OCC.wrapper.BiTgte.BiTgte_CurveOnVertex

        """
        this = _BiTgte.new_BiTgte_HCurveOnVertex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(self, *args):
        """
        Set(BiTgte_HCurveOnVertex self, BiTgte_CurveOnVertex C)

        Sets the field of the GenHCurve.

        :type C: OCC.wrapper.BiTgte.BiTgte_CurveOnVertex

        """
        return _BiTgte.BiTgte_HCurveOnVertex_Set(self, *args)


    def Curve(self, *args):
        """
        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        res = _BiTgte.BiTgte_HCurveOnVertex_Curve(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurve(self, *args):
        """
        GetCurve(BiTgte_HCurveOnVertex self) -> Adaptor3d_Curve

        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        return _BiTgte.BiTgte_HCurveOnVertex_GetCurve(self, *args)


    def ChangeCurve(self, *args):
        """
        ChangeCurve(BiTgte_HCurveOnVertex self) -> BiTgte_CurveOnVertex

        Returns the curve used to create the GenHCurve.

        :rtype: OCC.wrapper.BiTgte.BiTgte_CurveOnVertex

        """
        return _BiTgte.BiTgte_HCurveOnVertex_ChangeCurve(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BiTgte.BiTgte_HCurveOnVertex_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BiTgte.BiTgte_HCurveOnVertex_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BiTgte.BiTgte_HCurveOnVertex_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BiTgte.delete_BiTgte_HCurveOnVertex
BiTgte_HCurveOnVertex_swigregister = _BiTgte.BiTgte_HCurveOnVertex_swigregister
BiTgte_HCurveOnVertex_swigregister(BiTgte_HCurveOnVertex)

def BiTgte_HCurveOnVertex_get_type_name(*args):
    """
    BiTgte_HCurveOnVertex_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BiTgte.BiTgte_HCurveOnVertex_get_type_name(*args)

def BiTgte_HCurveOnVertex_get_type_descriptor(*args):
    """
    BiTgte_HCurveOnVertex_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BiTgte.BiTgte_HCurveOnVertex_get_type_descriptor(*args)

class BiTgte_CurveOnEdge(Adaptor3d.Adaptor3d_Curve):
    """
    private class used  to create a filler rolling  on
    an edge.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BiTgte_CurveOnEdge self) -> BiTgte_CurveOnEdge
        __init__(BiTgte_CurveOnEdge self, TopoDS_Edge EonF, TopoDS_Edge Edge) -> BiTgte_CurveOnEdge

        :type EonF: OCC.wrapper.TopoDS.TopoDS_Edge
        :type Edge: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        this = _BiTgte.new_BiTgte_CurveOnEdge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(BiTgte_CurveOnEdge self, TopoDS_Edge EonF, TopoDS_Edge Edge)

        :type EonF: OCC.wrapper.TopoDS.TopoDS_Edge
        :type Edge: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _BiTgte.BiTgte_CurveOnEdge_Init(self, *args)


    def FirstParameter(self, *args):
        """
        FirstParameter(BiTgte_CurveOnEdge self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BiTgte.BiTgte_CurveOnEdge_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(BiTgte_CurveOnEdge self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BiTgte.BiTgte_CurveOnEdge_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(BiTgte_CurveOnEdge self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BiTgte.BiTgte_CurveOnEdge_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(BiTgte_CurveOnEdge self, GeomAbs_Shape const S) -> Standard_Integer

        Returns  the number  of  intervals for  continuity
        <S>. May be one if Continuity(me) >= <S>

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BiTgte.BiTgte_CurveOnEdge_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(BiTgte_CurveOnEdge self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Stores in <T> the  parameters bounding the intervals
        of continuity <S>.

        The array must provide  enough room to  accomodate
        for the parameters. i.e. T.Length() > NbIntervals()

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BiTgte.BiTgte_CurveOnEdge_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(BiTgte_CurveOnEdge self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HCurve

        Returns    a  curve equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.
        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _BiTgte.BiTgte_CurveOnEdge_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(BiTgte_CurveOnEdge self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BiTgte.BiTgte_CurveOnEdge_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(BiTgte_CurveOnEdge self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BiTgte.BiTgte_CurveOnEdge_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(BiTgte_CurveOnEdge self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BiTgte.BiTgte_CurveOnEdge_Period(self, *args)


    def Value(self, *args):
        """
        Value(BiTgte_CurveOnEdge self, Standard_Real const U) -> gp_Pnt

        Computes the point of parameter U on the curve.

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _BiTgte.BiTgte_CurveOnEdge_Value(self, *args)


    def D0(self, *args):
        """
        D0(BiTgte_CurveOnEdge self, Standard_Real const U, gp_Pnt P)

        Computes the point of parameter U on the curve.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _BiTgte.BiTgte_CurveOnEdge_D0(self, *args)


    def D1(self, *args):
        """
        D1(BiTgte_CurveOnEdge self, Standard_Real const U, gp_Pnt P, gp_Vec V)

        Computes the point of parameter U on the curve with its
        first derivative.
        Raised if the continuity of the current interval
        is not C1.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V: OCC.wrapper.gp.gp_Vec

        """
        return _BiTgte.BiTgte_CurveOnEdge_D1(self, *args)


    def D2(self, *args):
        """
        D2(BiTgte_CurveOnEdge self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2)

        Returns the point P of parameter U, the first and second
        derivatives V1 and V2.
        Raised if the continuity of the current interval
        is not C2.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec

        """
        return _BiTgte.BiTgte_CurveOnEdge_D2(self, *args)


    def D3(self, *args):
        """
        D3(BiTgte_CurveOnEdge self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2, gp_Vec V3)

        Returns the point P of parameter U, the first, the second
        and the third derivative.
        Raised if the continuity of the current interval
        is not C3.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec
        :type V3: OCC.wrapper.gp.gp_Vec

        """
        return _BiTgte.BiTgte_CurveOnEdge_D3(self, *args)


    def DN(self, *args):
        """
        DN(BiTgte_CurveOnEdge self, Standard_Real const U, Standard_Integer const N) -> gp_Vec

        The returned vector gives the value of the derivative for the
        order of derivation N.
        Raised if the continuity of the current interval
        is not CN.
        Raised if N < 1.

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _BiTgte.BiTgte_CurveOnEdge_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(BiTgte_CurveOnEdge self, Standard_Real const R3d) -> Standard_Real

        Returns the parametric  resolution corresponding
        to the real space resolution <R3d>.

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BiTgte.BiTgte_CurveOnEdge_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(BiTgte_CurveOnEdge self) -> GeomAbs_CurveType

        Returns  the  type of the   curve  in the  current
        interval :   Line,   Circle,   Ellipse, Hyperbola,
        Parabola, BezierCurve, BSplineCurve, OtherCurve.

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _BiTgte.BiTgte_CurveOnEdge_GetType(self, *args)


    def Line(self, *args):
        """
        Line(BiTgte_CurveOnEdge self) -> gp_Lin

        :rtype: OCC.wrapper.gp.gp_Lin

        """
        return _BiTgte.BiTgte_CurveOnEdge_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(BiTgte_CurveOnEdge self) -> gp_Circ

        :rtype: OCC.wrapper.gp.gp_Circ

        """
        return _BiTgte.BiTgte_CurveOnEdge_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(BiTgte_CurveOnEdge self) -> gp_Elips

        :rtype: OCC.wrapper.gp.gp_Elips

        """
        return _BiTgte.BiTgte_CurveOnEdge_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(BiTgte_CurveOnEdge self) -> gp_Hypr

        :rtype: OCC.wrapper.gp.gp_Hypr

        """
        return _BiTgte.BiTgte_CurveOnEdge_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(BiTgte_CurveOnEdge self) -> gp_Parab

        :rtype: OCC.wrapper.gp.gp_Parab

        """
        return _BiTgte.BiTgte_CurveOnEdge_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(BiTgte_CurveOnEdge self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BiTgte.BiTgte_CurveOnEdge_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(BiTgte_CurveOnEdge self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BiTgte.BiTgte_CurveOnEdge_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(BiTgte_CurveOnEdge self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BiTgte.BiTgte_CurveOnEdge_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(BiTgte_CurveOnEdge self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BiTgte.BiTgte_CurveOnEdge_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        Bezier(BiTgte_CurveOnEdge self) -> Handle_Geom_BezierCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierCurve

        """
        return _BiTgte.BiTgte_CurveOnEdge_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(BiTgte_CurveOnEdge self) -> Handle_Geom_BSplineCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _BiTgte.BiTgte_CurveOnEdge_BSpline(self, *args)

    __swig_destroy__ = _BiTgte.delete_BiTgte_CurveOnEdge
BiTgte_CurveOnEdge_swigregister = _BiTgte.BiTgte_CurveOnEdge_swigregister
BiTgte_CurveOnEdge_swigregister(BiTgte_CurveOnEdge)

class Handle_BiTgte_HCurveOnVertex(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BiTgte_HCurveOnVertex self)

        Nullify the handle


        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BiTgte_HCurveOnVertex self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BiTgte_HCurveOnVertex self, BiTgte_HCurveOnVertex thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BiTgte_HCurveOnVertex self, Handle_BiTgte_HCurveOnVertex theHandle) -> Handle_BiTgte_HCurveOnVertex
        assign(Handle_BiTgte_HCurveOnVertex self, BiTgte_HCurveOnVertex thePtr) -> Handle_BiTgte_HCurveOnVertex
        assign(Handle_BiTgte_HCurveOnVertex self, Handle_BiTgte_HCurveOnVertex theHandle) -> Handle_BiTgte_HCurveOnVertex

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BiTgte_HCurveOnVertex self) -> BiTgte_HCurveOnVertex

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BiTgte_HCurveOnVertex self) -> BiTgte_HCurveOnVertex

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BiTgte_HCurveOnVertex self) -> BiTgte_HCurveOnVertex

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex___ref__(self, *args)


    def __hash__(self):
        return _BiTgte.Handle_BiTgte_HCurveOnVertex___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BiTgte.Handle_BiTgte_HCurveOnVertex___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BiTgte.new_Handle_BiTgte_HCurveOnVertex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BiTgte.Handle_BiTgte_HCurveOnVertex_DownCast)
    __swig_destroy__ = _BiTgte.delete_Handle_BiTgte_HCurveOnVertex

    def Set(self, *args):
        """
        Set(Handle_BiTgte_HCurveOnVertex self, BiTgte_CurveOnVertex C)

        Sets the field of the GenHCurve.

        :type C: OCC.wrapper.BiTgte.BiTgte_CurveOnVertex

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_Set(self, *args)


    def Curve(self, *args):
        """
        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        res = _BiTgte.Handle_BiTgte_HCurveOnVertex_Curve(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurve(self, *args):
        """
        GetCurve(Handle_BiTgte_HCurveOnVertex self) -> Adaptor3d_Curve

        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_GetCurve(self, *args)


    def ChangeCurve(self, *args):
        """
        ChangeCurve(Handle_BiTgte_HCurveOnVertex self) -> BiTgte_CurveOnVertex

        Returns the curve used to create the GenHCurve.

        :rtype: OCC.wrapper.BiTgte.BiTgte_CurveOnVertex

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_ChangeCurve(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BiTgte_HCurveOnVertex self) -> char const *

        :rtype: const char *

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BiTgte.Handle_BiTgte_HCurveOnVertex_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BiTgte.Handle_BiTgte_HCurveOnVertex_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstParameter(self, *args):
        """
        FirstParameter(Handle_BiTgte_HCurveOnVertex self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(Handle_BiTgte_HCurveOnVertex self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(Handle_BiTgte_HCurveOnVertex self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(Handle_BiTgte_HCurveOnVertex self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(Handle_BiTgte_HCurveOnVertex self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Stores in <T> the  parameters bounding the intervals
        of continuity <S>.

        The array must provide  enough room to  accomodate
        for the parameters. i.e. T.Length() > NbIntervals()

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(Handle_BiTgte_HCurveOnVertex self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HCurve

        Returns    a  curve equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.

        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(Handle_BiTgte_HCurveOnVertex self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(Handle_BiTgte_HCurveOnVertex self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(Handle_BiTgte_HCurveOnVertex self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_Period(self, *args)


    def Value(self, *args):
        """
        Value(Handle_BiTgte_HCurveOnVertex self, Standard_Real const U) -> gp_Pnt

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_Value(self, *args)


    def D0(self, *args):
        """
        D0(Handle_BiTgte_HCurveOnVertex self, Standard_Real const U, gp_Pnt P)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_BiTgte_HCurveOnVertex self, Standard_Real const U, gp_Pnt P, gp_Vec V)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V: OCC.wrapper.gp.gp_Vec

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_BiTgte_HCurveOnVertex self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_BiTgte_HCurveOnVertex self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2, gp_Vec V3)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec
        :type V3: OCC.wrapper.gp.gp_Vec

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_BiTgte_HCurveOnVertex self, Standard_Real const U, Standard_Integer const N) -> gp_Vec

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(Handle_BiTgte_HCurveOnVertex self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Handle_BiTgte_HCurveOnVertex self) -> GeomAbs_CurveType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_GetType(self, *args)


    def Line(self, *args):
        """
        Line(Handle_BiTgte_HCurveOnVertex self) -> gp_Lin

        :rtype: OCC.wrapper.gp.gp_Lin

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(Handle_BiTgte_HCurveOnVertex self) -> gp_Circ

        :rtype: OCC.wrapper.gp.gp_Circ

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Handle_BiTgte_HCurveOnVertex self) -> gp_Elips

        :rtype: OCC.wrapper.gp.gp_Elips

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(Handle_BiTgte_HCurveOnVertex self) -> gp_Hypr

        :rtype: OCC.wrapper.gp.gp_Hypr

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(Handle_BiTgte_HCurveOnVertex self) -> gp_Parab

        :rtype: OCC.wrapper.gp.gp_Parab

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_BiTgte_HCurveOnVertex self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(Handle_BiTgte_HCurveOnVertex self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(Handle_BiTgte_HCurveOnVertex self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(Handle_BiTgte_HCurveOnVertex self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Handle_BiTgte_HCurveOnVertex self) -> Handle_Geom_BezierCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierCurve

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Handle_BiTgte_HCurveOnVertex self) -> Handle_Geom_BSplineCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_BSpline(self, *args)


    def OffsetCurve(self, *args):
        """
        OffsetCurve(Handle_BiTgte_HCurveOnVertex self) -> Handle_Geom_OffsetCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_OffsetCurve

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_OffsetCurve(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_BiTgte_HCurveOnVertex self)

        Memory deallocator for transient classes


        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BiTgte_HCurveOnVertex self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BiTgte_HCurveOnVertex self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BiTgte_HCurveOnVertex self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BiTgte_HCurveOnVertex self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BiTgte_HCurveOnVertex self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BiTgte_HCurveOnVertex self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BiTgte_HCurveOnVertex self)

        Increments the reference counter of this object


        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BiTgte_HCurveOnVertex self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BiTgte.Handle_BiTgte_HCurveOnVertex_DecrementRefCounter(self, *args)

Handle_BiTgte_HCurveOnVertex_swigregister = _BiTgte.Handle_BiTgte_HCurveOnVertex_swigregister
Handle_BiTgte_HCurveOnVertex_swigregister(Handle_BiTgte_HCurveOnVertex)

def Handle_BiTgte_HCurveOnVertex_DownCast(thing):
    return _BiTgte.Handle_BiTgte_HCurveOnVertex_DownCast(thing)
Handle_BiTgte_HCurveOnVertex_DownCast = _BiTgte.Handle_BiTgte_HCurveOnVertex_DownCast

class BiTgte_HCurveOnEdge(Adaptor3d.Adaptor3d_HCurve):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BiTgte_HCurveOnEdge
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BiTgte_HCurveOnEdge(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BiTgte_HCurveOnEdge self) -> BiTgte_HCurveOnEdge
        __init__(BiTgte_HCurveOnEdge self, BiTgte_CurveOnEdge C) -> BiTgte_HCurveOnEdge

        Creates a GenHCurve from a Curve

        :type C: OCC.wrapper.BiTgte.BiTgte_CurveOnEdge

        """
        this = _BiTgte.new_BiTgte_HCurveOnEdge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(self, *args):
        """
        Set(BiTgte_HCurveOnEdge self, BiTgte_CurveOnEdge C)

        Sets the field of the GenHCurve.

        :type C: OCC.wrapper.BiTgte.BiTgte_CurveOnEdge

        """
        return _BiTgte.BiTgte_HCurveOnEdge_Set(self, *args)


    def Curve(self, *args):
        """
        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        res = _BiTgte.BiTgte_HCurveOnEdge_Curve(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurve(self, *args):
        """
        GetCurve(BiTgte_HCurveOnEdge self) -> Adaptor3d_Curve

        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        return _BiTgte.BiTgte_HCurveOnEdge_GetCurve(self, *args)


    def ChangeCurve(self, *args):
        """
        ChangeCurve(BiTgte_HCurveOnEdge self) -> BiTgte_CurveOnEdge

        Returns the curve used to create the GenHCurve.

        :rtype: OCC.wrapper.BiTgte.BiTgte_CurveOnEdge

        """
        return _BiTgte.BiTgte_HCurveOnEdge_ChangeCurve(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BiTgte.BiTgte_HCurveOnEdge_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BiTgte.BiTgte_HCurveOnEdge_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BiTgte.BiTgte_HCurveOnEdge_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BiTgte.delete_BiTgte_HCurveOnEdge
BiTgte_HCurveOnEdge_swigregister = _BiTgte.BiTgte_HCurveOnEdge_swigregister
BiTgte_HCurveOnEdge_swigregister(BiTgte_HCurveOnEdge)

def BiTgte_HCurveOnEdge_get_type_name(*args):
    """
    BiTgte_HCurveOnEdge_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BiTgte.BiTgte_HCurveOnEdge_get_type_name(*args)

def BiTgte_HCurveOnEdge_get_type_descriptor(*args):
    """
    BiTgte_HCurveOnEdge_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BiTgte.BiTgte_HCurveOnEdge_get_type_descriptor(*args)

class Handle_BiTgte_HCurveOnEdge(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BiTgte_HCurveOnEdge self)

        Nullify the handle


        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BiTgte_HCurveOnEdge self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BiTgte_HCurveOnEdge self, BiTgte_HCurveOnEdge thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BiTgte_HCurveOnEdge self, Handle_BiTgte_HCurveOnEdge theHandle) -> Handle_BiTgte_HCurveOnEdge
        assign(Handle_BiTgte_HCurveOnEdge self, BiTgte_HCurveOnEdge thePtr) -> Handle_BiTgte_HCurveOnEdge
        assign(Handle_BiTgte_HCurveOnEdge self, Handle_BiTgte_HCurveOnEdge theHandle) -> Handle_BiTgte_HCurveOnEdge

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BiTgte_HCurveOnEdge self) -> BiTgte_HCurveOnEdge

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BiTgte_HCurveOnEdge self) -> BiTgte_HCurveOnEdge

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BiTgte_HCurveOnEdge self) -> BiTgte_HCurveOnEdge

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge___ref__(self, *args)


    def __hash__(self):
        return _BiTgte.Handle_BiTgte_HCurveOnEdge___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BiTgte.Handle_BiTgte_HCurveOnEdge___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BiTgte.new_Handle_BiTgte_HCurveOnEdge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BiTgte.Handle_BiTgte_HCurveOnEdge_DownCast)
    __swig_destroy__ = _BiTgte.delete_Handle_BiTgte_HCurveOnEdge

    def Set(self, *args):
        """
        Set(Handle_BiTgte_HCurveOnEdge self, BiTgte_CurveOnEdge C)

        Sets the field of the GenHCurve.

        :type C: OCC.wrapper.BiTgte.BiTgte_CurveOnEdge

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_Set(self, *args)


    def Curve(self, *args):
        """
        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        res = _BiTgte.Handle_BiTgte_HCurveOnEdge_Curve(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurve(self, *args):
        """
        GetCurve(Handle_BiTgte_HCurveOnEdge self) -> Adaptor3d_Curve

        Returns the curve used to create the GenHCurve.
        This is redefined from HCurve, cannot be inline.

        :rtype: OCC.wrapper.Adaptor3d.Adaptor3d_Curve

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_GetCurve(self, *args)


    def ChangeCurve(self, *args):
        """
        ChangeCurve(Handle_BiTgte_HCurveOnEdge self) -> BiTgte_CurveOnEdge

        Returns the curve used to create the GenHCurve.

        :rtype: OCC.wrapper.BiTgte.BiTgte_CurveOnEdge

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_ChangeCurve(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BiTgte_HCurveOnEdge self) -> char const *

        :rtype: const char *

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BiTgte.Handle_BiTgte_HCurveOnEdge_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BiTgte.Handle_BiTgte_HCurveOnEdge_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstParameter(self, *args):
        """
        FirstParameter(Handle_BiTgte_HCurveOnEdge self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(Handle_BiTgte_HCurveOnEdge self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(Handle_BiTgte_HCurveOnEdge self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(Handle_BiTgte_HCurveOnEdge self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(Handle_BiTgte_HCurveOnEdge self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Stores in <T> the  parameters bounding the intervals
        of continuity <S>.

        The array must provide  enough room to  accomodate
        for the parameters. i.e. T.Length() > NbIntervals()

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(Handle_BiTgte_HCurveOnEdge self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HCurve

        Returns    a  curve equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.

        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(Handle_BiTgte_HCurveOnEdge self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(Handle_BiTgte_HCurveOnEdge self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(Handle_BiTgte_HCurveOnEdge self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_Period(self, *args)


    def Value(self, *args):
        """
        Value(Handle_BiTgte_HCurveOnEdge self, Standard_Real const U) -> gp_Pnt

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_Value(self, *args)


    def D0(self, *args):
        """
        D0(Handle_BiTgte_HCurveOnEdge self, Standard_Real const U, gp_Pnt P)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_BiTgte_HCurveOnEdge self, Standard_Real const U, gp_Pnt P, gp_Vec V)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V: OCC.wrapper.gp.gp_Vec

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_BiTgte_HCurveOnEdge self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_BiTgte_HCurveOnEdge self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2, gp_Vec V3)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec
        :type V3: OCC.wrapper.gp.gp_Vec

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_BiTgte_HCurveOnEdge self, Standard_Real const U, Standard_Integer const N) -> gp_Vec

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(Handle_BiTgte_HCurveOnEdge self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Handle_BiTgte_HCurveOnEdge self) -> GeomAbs_CurveType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_GetType(self, *args)


    def Line(self, *args):
        """
        Line(Handle_BiTgte_HCurveOnEdge self) -> gp_Lin

        :rtype: OCC.wrapper.gp.gp_Lin

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(Handle_BiTgte_HCurveOnEdge self) -> gp_Circ

        :rtype: OCC.wrapper.gp.gp_Circ

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Handle_BiTgte_HCurveOnEdge self) -> gp_Elips

        :rtype: OCC.wrapper.gp.gp_Elips

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(Handle_BiTgte_HCurveOnEdge self) -> gp_Hypr

        :rtype: OCC.wrapper.gp.gp_Hypr

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(Handle_BiTgte_HCurveOnEdge self) -> gp_Parab

        :rtype: OCC.wrapper.gp.gp_Parab

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_BiTgte_HCurveOnEdge self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(Handle_BiTgte_HCurveOnEdge self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(Handle_BiTgte_HCurveOnEdge self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(Handle_BiTgte_HCurveOnEdge self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Handle_BiTgte_HCurveOnEdge self) -> Handle_Geom_BezierCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierCurve

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Handle_BiTgte_HCurveOnEdge self) -> Handle_Geom_BSplineCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_BSpline(self, *args)


    def OffsetCurve(self, *args):
        """
        OffsetCurve(Handle_BiTgte_HCurveOnEdge self) -> Handle_Geom_OffsetCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_OffsetCurve

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_OffsetCurve(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_BiTgte_HCurveOnEdge self)

        Memory deallocator for transient classes


        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BiTgte_HCurveOnEdge self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BiTgte_HCurveOnEdge self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BiTgte_HCurveOnEdge self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BiTgte_HCurveOnEdge self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BiTgte_HCurveOnEdge self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BiTgte_HCurveOnEdge self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BiTgte_HCurveOnEdge self)

        Increments the reference counter of this object


        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BiTgte_HCurveOnEdge self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BiTgte.Handle_BiTgte_HCurveOnEdge_DecrementRefCounter(self, *args)

Handle_BiTgte_HCurveOnEdge_swigregister = _BiTgte.Handle_BiTgte_HCurveOnEdge_swigregister
Handle_BiTgte_HCurveOnEdge_swigregister(Handle_BiTgte_HCurveOnEdge)

def Handle_BiTgte_HCurveOnEdge_DownCast(thing):
    return _BiTgte.Handle_BiTgte_HCurveOnEdge_DownCast(thing)
Handle_BiTgte_HCurveOnEdge_DownCast = _BiTgte.Handle_BiTgte_HCurveOnEdge_DownCast

class BiTgte_CurveOnVertex(Adaptor3d.Adaptor3d_Curve):
    """
    private class used  to create a filler rolling  on
    an edge.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BiTgte_CurveOnVertex self) -> BiTgte_CurveOnVertex
        __init__(BiTgte_CurveOnVertex self, TopoDS_Edge EonF, TopoDS_Vertex V) -> BiTgte_CurveOnVertex

        :type EonF: OCC.wrapper.TopoDS.TopoDS_Edge
        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        this = _BiTgte.new_BiTgte_CurveOnVertex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(BiTgte_CurveOnVertex self, TopoDS_Edge EonF, TopoDS_Vertex V)

        :type EonF: OCC.wrapper.TopoDS.TopoDS_Edge
        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _BiTgte.BiTgte_CurveOnVertex_Init(self, *args)


    def FirstParameter(self, *args):
        """
        FirstParameter(BiTgte_CurveOnVertex self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BiTgte.BiTgte_CurveOnVertex_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(BiTgte_CurveOnVertex self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BiTgte.BiTgte_CurveOnVertex_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(BiTgte_CurveOnVertex self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BiTgte.BiTgte_CurveOnVertex_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(BiTgte_CurveOnVertex self, GeomAbs_Shape const S) -> Standard_Integer

        Returns  the number  of  intervals for  continuity
        <S>. May be one if Continuity(me) >= <S>

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BiTgte.BiTgte_CurveOnVertex_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(BiTgte_CurveOnVertex self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Stores in <T> the  parameters bounding the intervals
        of continuity <S>.

        The array must provide  enough room to  accomodate
        for the parameters. i.e. T.Length() > NbIntervals()

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _BiTgte.BiTgte_CurveOnVertex_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(BiTgte_CurveOnVertex self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor3d_HCurve

        Returns    a  curve equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.
        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve

        """
        return _BiTgte.BiTgte_CurveOnVertex_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(BiTgte_CurveOnVertex self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BiTgte.BiTgte_CurveOnVertex_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(BiTgte_CurveOnVertex self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BiTgte.BiTgte_CurveOnVertex_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(BiTgte_CurveOnVertex self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BiTgte.BiTgte_CurveOnVertex_Period(self, *args)


    def Value(self, *args):
        """
        Value(BiTgte_CurveOnVertex self, Standard_Real const U) -> gp_Pnt

        Computes the point of parameter U on the curve.

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _BiTgte.BiTgte_CurveOnVertex_Value(self, *args)


    def D0(self, *args):
        """
        D0(BiTgte_CurveOnVertex self, Standard_Real const U, gp_Pnt P)

        Computes the point of parameter U on the curve.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt

        """
        return _BiTgte.BiTgte_CurveOnVertex_D0(self, *args)


    def D1(self, *args):
        """
        D1(BiTgte_CurveOnVertex self, Standard_Real const U, gp_Pnt P, gp_Vec V)

        Computes the point of parameter U on the curve with its
        first derivative.
        Raised if the continuity of the current interval
        is not C1.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V: OCC.wrapper.gp.gp_Vec

        """
        return _BiTgte.BiTgte_CurveOnVertex_D1(self, *args)


    def D2(self, *args):
        """
        D2(BiTgte_CurveOnVertex self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2)

        Returns the point P of parameter U, the first and second
        derivatives V1 and V2.
        Raised if the continuity of the current interval
        is not C2.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec

        """
        return _BiTgte.BiTgte_CurveOnVertex_D2(self, *args)


    def D3(self, *args):
        """
        D3(BiTgte_CurveOnVertex self, Standard_Real const U, gp_Pnt P, gp_Vec V1, gp_Vec V2, gp_Vec V3)

        Returns the point P of parameter U, the first, the second
        and the third derivative.
        Raised if the continuity of the current interval
        is not C3.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt
        :type V1: OCC.wrapper.gp.gp_Vec
        :type V2: OCC.wrapper.gp.gp_Vec
        :type V3: OCC.wrapper.gp.gp_Vec

        """
        return _BiTgte.BiTgte_CurveOnVertex_D3(self, *args)


    def DN(self, *args):
        """
        DN(BiTgte_CurveOnVertex self, Standard_Real const U, Standard_Integer const N) -> gp_Vec

        The returned vector gives the value of the derivative for the
        order of derivation N.
        Raised if the continuity of the current interval
        is not CN.
        Raised if N < 1.

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _BiTgte.BiTgte_CurveOnVertex_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(BiTgte_CurveOnVertex self, Standard_Real const R3d) -> Standard_Real

        Returns the parametric  resolution corresponding
        to the real space resolution <R3d>.

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BiTgte.BiTgte_CurveOnVertex_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(BiTgte_CurveOnVertex self) -> GeomAbs_CurveType

        Returns  the  type of the   curve  in the  current
        interval :   Line,   Circle,   Ellipse, Hyperbola,
        Parabola, BezierCurve, BSplineCurve, OtherCurve.

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _BiTgte.BiTgte_CurveOnVertex_GetType(self, *args)


    def Line(self, *args):
        """
        Line(BiTgte_CurveOnVertex self) -> gp_Lin

        :rtype: OCC.wrapper.gp.gp_Lin

        """
        return _BiTgte.BiTgte_CurveOnVertex_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(BiTgte_CurveOnVertex self) -> gp_Circ

        :rtype: OCC.wrapper.gp.gp_Circ

        """
        return _BiTgte.BiTgte_CurveOnVertex_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(BiTgte_CurveOnVertex self) -> gp_Elips

        :rtype: OCC.wrapper.gp.gp_Elips

        """
        return _BiTgte.BiTgte_CurveOnVertex_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(BiTgte_CurveOnVertex self) -> gp_Hypr

        :rtype: OCC.wrapper.gp.gp_Hypr

        """
        return _BiTgte.BiTgte_CurveOnVertex_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(BiTgte_CurveOnVertex self) -> gp_Parab

        :rtype: OCC.wrapper.gp.gp_Parab

        """
        return _BiTgte.BiTgte_CurveOnVertex_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(BiTgte_CurveOnVertex self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BiTgte.BiTgte_CurveOnVertex_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(BiTgte_CurveOnVertex self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BiTgte.BiTgte_CurveOnVertex_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(BiTgte_CurveOnVertex self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BiTgte.BiTgte_CurveOnVertex_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(BiTgte_CurveOnVertex self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BiTgte.BiTgte_CurveOnVertex_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        Bezier(BiTgte_CurveOnVertex self) -> Handle_Geom_BezierCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BezierCurve

        """
        return _BiTgte.BiTgte_CurveOnVertex_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(BiTgte_CurveOnVertex self) -> Handle_Geom_BSplineCurve

        :rtype: OCC.wrapper.Geom.Handle_Geom_BSplineCurve

        """
        return _BiTgte.BiTgte_CurveOnVertex_BSpline(self, *args)

    __swig_destroy__ = _BiTgte.delete_BiTgte_CurveOnVertex
BiTgte_CurveOnVertex_swigregister = _BiTgte.BiTgte_CurveOnVertex_swigregister
BiTgte_CurveOnVertex_swigregister(BiTgte_CurveOnVertex)

class BiTgte_Blend(object):
    """Root class"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BiTgte_Blend self) -> BiTgte_Blend
        __init__(BiTgte_Blend self, TopoDS_Shape S, Standard_Real const Radius, Standard_Real const Tol, Standard_Boolean const NUBS) -> BiTgte_Blend

        <S>: Shape to be rounded
        <Radius>: radius of the fillet
        <Tol>: Tol3d used in approximations
        <NUBS>: if true,  generate only NUBS surfaces,
        if false, generate analytical surfaces if possible

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type Radius: float
        :type Tol: float
        :type NUBS: bool

        """
        this = _BiTgte.new_BiTgte_Blend(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(BiTgte_Blend self, TopoDS_Shape S, Standard_Real const Radius, Standard_Real const Tol, Standard_Boolean const NUBS)

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape
        :type Radius: float
        :type Tol: float
        :type NUBS: bool

        """
        return _BiTgte.BiTgte_Blend_Init(self, *args)


    def Clear(self, *args):
        """
        Clear(BiTgte_Blend self)

        Clear all the Fields.


        """
        return _BiTgte.BiTgte_Blend_Clear(self, *args)


    def SetFaces(self, *args):
        """
        SetFaces(BiTgte_Blend self, TopoDS_Face F1, TopoDS_Face F2)

        Set two faces   of <myShape> on which the  Sphere
        must roll.

        :type F1: OCC.wrapper.TopoDS.TopoDS_Face
        :type F2: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _BiTgte.BiTgte_Blend_SetFaces(self, *args)


    def SetEdge(self, *args):
        """
        SetEdge(BiTgte_Blend self, TopoDS_Edge Edge)

        Set an edge of <myShape> to be rounded.

        :type Edge: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _BiTgte.BiTgte_Blend_SetEdge(self, *args)


    def SetStoppingFace(self, *args):
        """
        SetStoppingFace(BiTgte_Blend self, TopoDS_Face Face)

        Set a face on which the fillet must stop.

        :type Face: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _BiTgte.BiTgte_Blend_SetStoppingFace(self, *args)


    def Perform(self, *args):
        """
        Perform(BiTgte_Blend self, Standard_Boolean const BuildShape)

        Compute the generated surfaces.
        If <BuildShape> is true, compute the resulting Shape.
        If false, only the blending surfaces are computed.

        :type BuildShape: bool

        """
        return _BiTgte.BiTgte_Blend_Perform(self, *args)


    def IsDone(self, *args):
        """
        IsDone(BiTgte_Blend self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BiTgte.BiTgte_Blend_IsDone(self, *args)


    def Shape(self, *args):
        """
        returns the result

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _BiTgte.BiTgte_Blend_Shape(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NbSurfaces(self, *args):
        """
        NbSurfaces(BiTgte_Blend self) -> Standard_Integer

        returns the Number of generated surfaces.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BiTgte.BiTgte_Blend_NbSurfaces(self, *args)


    def CenterLines(self, *args):
        """
        CenterLines(BiTgte_Blend self, NCollection_List_TopoDS_Shape LC)

        set in <LC> all the center lines

        :type LC: OCC.wrapper.TopTools.TopTools_ListOfShape

        """
        return _BiTgte.BiTgte_Blend_CenterLines(self, *args)


    def Surface(self, *args):
        """
        Surface(BiTgte_Blend self, Standard_Integer const Index) -> Handle_Geom_Surface
        Surface(BiTgte_Blend self, TopoDS_Shape CenterLine) -> Handle_Geom_Surface

        returns  the surface generated  by the centerline.
        <CenterLine> may be
        - an edge  : generate a pipe.
        - a vertex : generate a sphere.
        Warning: returns a Null Handle if <CenterLine> generates
        no surface.

        :type CenterLine: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Geom.Handle_Geom_Surface

        """
        return _BiTgte.BiTgte_Blend_Surface(self, *args)


    def Face(self, *args):
        """
        returns  the face generated  by the centerline.
        <CenterLine> may be
        - an edge  : generate a pipe.
        - a vertex : generate a sphere.
        Warning: returns a Null Shape if <CenterLine> generates
        no surface.

        :type CenterLine: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _BiTgte.BiTgte_Blend_Face(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ContactType(self, *args):
        """
        ContactType(BiTgte_Blend self, Standard_Integer const Index) -> BiTgte_ContactType

        returns the type of contact

        :type Index: int
        :rtype: OCC.wrapper.BiTgte.BiTgte_ContactType

        """
        return _BiTgte.BiTgte_Blend_ContactType(self, *args)


    def SupportShape1(self, *args):
        """
        gives the first support shape relative to
        SurfaceFillet(Index);

        :type Index: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _BiTgte.BiTgte_Blend_SupportShape1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SupportShape2(self, *args):
        """
        gives the second support shape relative to
        SurfaceFillet(Index);

        :type Index: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _BiTgte.BiTgte_Blend_SupportShape2(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CurveOnShape1(self, *args):
        """
        CurveOnShape1(BiTgte_Blend self, Standard_Integer const Index) -> Handle_Geom_Curve

        gives the 3d curve of SurfaceFillet(Index)
        on SupportShape1(Index)

        :type Index: int
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _BiTgte.BiTgte_Blend_CurveOnShape1(self, *args)


    def CurveOnShape2(self, *args):
        """
        CurveOnShape2(BiTgte_Blend self, Standard_Integer const Index) -> Handle_Geom_Curve

        gives the 3d curve of SurfaceFillet(Index)
        on SupportShape2(Index)

        :type Index: int
        :rtype: OCC.wrapper.Geom.Handle_Geom_Curve

        """
        return _BiTgte.BiTgte_Blend_CurveOnShape2(self, *args)


    def PCurveOnFace1(self, *args):
        """
        PCurveOnFace1(BiTgte_Blend self, Standard_Integer const Index) -> Handle_Geom2d_Curve

        gives the PCurve associated to CurvOnShape1(Index)
        on the support face
        Warning: returns a Null Handle if SupportShape1 is not a Face

        :type Index: int
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _BiTgte.BiTgte_Blend_PCurveOnFace1(self, *args)


    def PCurve1OnFillet(self, *args):
        """
        PCurve1OnFillet(BiTgte_Blend self, Standard_Integer const Index) -> Handle_Geom2d_Curve

        gives the PCurve associated to CurveOnShape1(Index)
        on the Fillet

        :type Index: int
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _BiTgte.BiTgte_Blend_PCurve1OnFillet(self, *args)


    def PCurveOnFace2(self, *args):
        """
        PCurveOnFace2(BiTgte_Blend self, Standard_Integer const Index) -> Handle_Geom2d_Curve

        gives the PCurve  associated to CurveOnShape2(Index)
        on the  support face
        Warning: returns a Null Handle if SupportShape2 is not a Face

        :type Index: int
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _BiTgte.BiTgte_Blend_PCurveOnFace2(self, *args)


    def PCurve2OnFillet(self, *args):
        """
        PCurve2OnFillet(BiTgte_Blend self, Standard_Integer const Index) -> Handle_Geom2d_Curve

        gives the PCurve associated to CurveOnShape2(Index)
        on the fillet

        :type Index: int
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _BiTgte.BiTgte_Blend_PCurve2OnFillet(self, *args)


    def NbBranches(self, *args):
        """
        NbBranches(BiTgte_Blend self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BiTgte.BiTgte_Blend_NbBranches(self, *args)


    def IndicesOfBranche(self, *args):
        """
        IndicesOfBranche(BiTgte_Blend self, Standard_Integer const Index)

        Set in <From>,<To>   the indices of the faces  of
        the branche <Index>.

        i.e: Branche<Index> = Face(From) + Face(From+1) + ..+ Face(To)

        :type Index: int
        :type From: int
        :type To: int

        """
        return _BiTgte.BiTgte_Blend_IndicesOfBranche(self, *args)


    def ComputeCenters(self, *args):
        """
        ComputeCenters(BiTgte_Blend self)

        Computes the center lines


        """
        return _BiTgte.BiTgte_Blend_ComputeCenters(self, *args)

    __swig_destroy__ = _BiTgte.delete_BiTgte_Blend
BiTgte_Blend_swigregister = _BiTgte.BiTgte_Blend_swigregister
BiTgte_Blend_swigregister(BiTgte_Blend)



