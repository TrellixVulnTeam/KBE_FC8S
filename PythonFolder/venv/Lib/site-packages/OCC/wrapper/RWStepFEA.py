# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_RWStepFEA')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_RWStepFEA')
    _RWStepFEA = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RWStepFEA', [dirname(__file__)])
        except ImportError:
            import _RWStepFEA
            return _RWStepFEA
        try:
            _mod = imp.load_module('_RWStepFEA', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _RWStepFEA = swig_import_helper()
    del swig_import_helper
else:
    import _RWStepFEA
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWStepFEA.delete_SwigPyIterator

    def value(self):
        return _RWStepFEA.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _RWStepFEA.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _RWStepFEA.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _RWStepFEA.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _RWStepFEA.SwigPyIterator_equal(self, x)

    def copy(self):
        return _RWStepFEA.SwigPyIterator_copy(self)

    def next(self):
        return _RWStepFEA.SwigPyIterator_next(self)

    def __next__(self):
        return _RWStepFEA.SwigPyIterator___next__(self)

    def previous(self):
        return _RWStepFEA.SwigPyIterator_previous(self)

    def advance(self, n):
        return _RWStepFEA.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _RWStepFEA.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _RWStepFEA.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _RWStepFEA.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _RWStepFEA.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _RWStepFEA.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _RWStepFEA.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _RWStepFEA.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _RWStepFEA.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_RWStepFEA.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _RWStepFEA.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _RWStepFEA.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RWStepFEA.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _RWStepFEA.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _RWStepFEA.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _RWStepFEA.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _RWStepFEA.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_RWStepFEA.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _RWStepFEA.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _RWStepFEA.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RWStepFEA.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _RWStepFEA.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _RWStepFEA.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _RWStepFEA.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _RWStepFEA.ptr_to_number(item)
ptr_to_number = _RWStepFEA.ptr_to_number

def HashCode(*args):
    return _RWStepFEA.HashCode(*args)
HashCode = _RWStepFEA.HashCode

def ptr_equal(a, b):
    return _RWStepFEA.ptr_equal(a, b)
ptr_equal = _RWStepFEA.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepFEA
else:
    import StepFEA
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepBasic
else:
    import StepBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepData
else:
    import StepData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepGeom
else:
    import StepGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepRepr
else:
    import StepRepr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepShape
else:
    import StepShape
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepElement
else:
    import StepElement
del _swig_python_version_info
class RWStepFEA_RWSurface3dElementRepresentation(object):
    """Read & Write tool for Surface3dElementRepresentation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWSurface3dElementRepresentation self) -> RWStepFEA_RWSurface3dElementRepresentation

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWSurface3dElementRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWSurface3dElementRepresentation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_Surface3dElementRepresentation ent)

        Reads Surface3dElementRepresentation

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_Surface3dElementRepresentation

        """
        return _RWStepFEA.RWStepFEA_RWSurface3dElementRepresentation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWSurface3dElementRepresentation self, StepData_StepWriter SW, Handle_StepFEA_Surface3dElementRepresentation ent)

        Writes Surface3dElementRepresentation

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_Surface3dElementRepresentation

        """
        return _RWStepFEA.RWStepFEA_RWSurface3dElementRepresentation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWSurface3dElementRepresentation self, Handle_StepFEA_Surface3dElementRepresentation ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_Surface3dElementRepresentation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWSurface3dElementRepresentation_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWSurface3dElementRepresentation
RWStepFEA_RWSurface3dElementRepresentation_swigregister = _RWStepFEA.RWStepFEA_RWSurface3dElementRepresentation_swigregister
RWStepFEA_RWSurface3dElementRepresentation_swigregister(RWStepFEA_RWSurface3dElementRepresentation)

class RWStepFEA_RWFreedomsList(object):
    """Read & Write tool for FreedomsList"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWFreedomsList self) -> RWStepFEA_RWFreedomsList

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWFreedomsList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWFreedomsList self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_FreedomsList ent)

        Reads FreedomsList

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FreedomsList

        """
        return _RWStepFEA.RWStepFEA_RWFreedomsList_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWFreedomsList self, StepData_StepWriter SW, Handle_StepFEA_FreedomsList ent)

        Writes FreedomsList

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FreedomsList

        """
        return _RWStepFEA.RWStepFEA_RWFreedomsList_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWFreedomsList self, Handle_StepFEA_FreedomsList ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FreedomsList
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWFreedomsList_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFreedomsList
RWStepFEA_RWFreedomsList_swigregister = _RWStepFEA.RWStepFEA_RWFreedomsList_swigregister
RWStepFEA_RWFreedomsList_swigregister(RWStepFEA_RWFreedomsList)

class RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness(object):
    """Read & Write tool for FeaShellMembraneBendingCouplingStiffness"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness self) -> RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_FeaShellMembraneBendingCouplingStiffness ent)

        Reads FeaShellMembraneBendingCouplingStiffness

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaShellMembraneBendingCouplingStiffness

        """
        return _RWStepFEA.RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness self, StepData_StepWriter SW, Handle_StepFEA_FeaShellMembraneBendingCouplingStiffness ent)

        Writes FeaShellMembraneBendingCouplingStiffness

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaShellMembraneBendingCouplingStiffness

        """
        return _RWStepFEA.RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness self, Handle_StepFEA_FeaShellMembraneBendingCouplingStiffness ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaShellMembraneBendingCouplingStiffness
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness
RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness_swigregister = _RWStepFEA.RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness_swigregister
RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness_swigregister(RWStepFEA_RWFeaShellMembraneBendingCouplingStiffness)

class RWStepFEA_RWCurveElementIntervalConstant(object):
    """Read & Write tool for CurveElementIntervalConstant"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWCurveElementIntervalConstant self) -> RWStepFEA_RWCurveElementIntervalConstant

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWCurveElementIntervalConstant(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWCurveElementIntervalConstant self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_CurveElementIntervalConstant ent)

        Reads CurveElementIntervalConstant

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_CurveElementIntervalConstant

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementIntervalConstant_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWCurveElementIntervalConstant self, StepData_StepWriter SW, Handle_StepFEA_CurveElementIntervalConstant ent)

        Writes CurveElementIntervalConstant

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_CurveElementIntervalConstant

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementIntervalConstant_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWCurveElementIntervalConstant self, Handle_StepFEA_CurveElementIntervalConstant ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_CurveElementIntervalConstant
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementIntervalConstant_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWCurveElementIntervalConstant
RWStepFEA_RWCurveElementIntervalConstant_swigregister = _RWStepFEA.RWStepFEA_RWCurveElementIntervalConstant_swigregister
RWStepFEA_RWCurveElementIntervalConstant_swigregister(RWStepFEA_RWCurveElementIntervalConstant)

class RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem(object):
    """Read & Write tool for ArbitraryVolume3dElementCoordinateSystem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem self) -> RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_ArbitraryVolume3dElementCoordinateSystem ent)

        Reads ArbitraryVolume3dElementCoordinateSystem

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_ArbitraryVolume3dElementCoordinateSystem

        """
        return _RWStepFEA.RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem self, StepData_StepWriter SW, Handle_StepFEA_ArbitraryVolume3dElementCoordinateSystem ent)

        Writes ArbitraryVolume3dElementCoordinateSystem

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_ArbitraryVolume3dElementCoordinateSystem

        """
        return _RWStepFEA.RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem self, Handle_StepFEA_ArbitraryVolume3dElementCoordinateSystem ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_ArbitraryVolume3dElementCoordinateSystem
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem
RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem_swigregister = _RWStepFEA.RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem_swigregister
RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem_swigregister(RWStepFEA_RWArbitraryVolume3dElementCoordinateSystem)

class RWStepFEA_RWElementGeometricRelationship(object):
    """Read & Write tool for ElementGeometricRelationship"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWElementGeometricRelationship self) -> RWStepFEA_RWElementGeometricRelationship

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWElementGeometricRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWElementGeometricRelationship self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_ElementGeometricRelationship ent)

        Reads ElementGeometricRelationship

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_ElementGeometricRelationship

        """
        return _RWStepFEA.RWStepFEA_RWElementGeometricRelationship_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWElementGeometricRelationship self, StepData_StepWriter SW, Handle_StepFEA_ElementGeometricRelationship ent)

        Writes ElementGeometricRelationship

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_ElementGeometricRelationship

        """
        return _RWStepFEA.RWStepFEA_RWElementGeometricRelationship_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWElementGeometricRelationship self, Handle_StepFEA_ElementGeometricRelationship ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_ElementGeometricRelationship
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWElementGeometricRelationship_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWElementGeometricRelationship
RWStepFEA_RWElementGeometricRelationship_swigregister = _RWStepFEA.RWStepFEA_RWElementGeometricRelationship_swigregister
RWStepFEA_RWElementGeometricRelationship_swigregister(RWStepFEA_RWElementGeometricRelationship)

class RWStepFEA_RWFeaModelDefinition(object):
    """Read & Write tool for FeaModelDefinition"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWFeaModelDefinition self) -> RWStepFEA_RWFeaModelDefinition

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaModelDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWFeaModelDefinition self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_FeaModelDefinition ent)

        Reads FeaModelDefinition

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaModelDefinition

        """
        return _RWStepFEA.RWStepFEA_RWFeaModelDefinition_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWFeaModelDefinition self, StepData_StepWriter SW, Handle_StepFEA_FeaModelDefinition ent)

        Writes FeaModelDefinition

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaModelDefinition

        """
        return _RWStepFEA.RWStepFEA_RWFeaModelDefinition_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWFeaModelDefinition self, Handle_StepFEA_FeaModelDefinition ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaModelDefinition
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWFeaModelDefinition_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaModelDefinition
RWStepFEA_RWFeaModelDefinition_swigregister = _RWStepFEA.RWStepFEA_RWFeaModelDefinition_swigregister
RWStepFEA_RWFeaModelDefinition_swigregister(RWStepFEA_RWFeaModelDefinition)

class RWStepFEA_RWFeaMaterialPropertyRepresentation(object):
    """Read & Write tool for FeaMaterialPropertyRepresentation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWFeaMaterialPropertyRepresentation self) -> RWStepFEA_RWFeaMaterialPropertyRepresentation

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaMaterialPropertyRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWFeaMaterialPropertyRepresentation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_FeaMaterialPropertyRepresentation ent)

        Reads FeaMaterialPropertyRepresentation

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaMaterialPropertyRepresentation

        """
        return _RWStepFEA.RWStepFEA_RWFeaMaterialPropertyRepresentation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWFeaMaterialPropertyRepresentation self, StepData_StepWriter SW, Handle_StepFEA_FeaMaterialPropertyRepresentation ent)

        Writes FeaMaterialPropertyRepresentation

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaMaterialPropertyRepresentation

        """
        return _RWStepFEA.RWStepFEA_RWFeaMaterialPropertyRepresentation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWFeaMaterialPropertyRepresentation self, Handle_StepFEA_FeaMaterialPropertyRepresentation ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaMaterialPropertyRepresentation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWFeaMaterialPropertyRepresentation_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaMaterialPropertyRepresentation
RWStepFEA_RWFeaMaterialPropertyRepresentation_swigregister = _RWStepFEA.RWStepFEA_RWFeaMaterialPropertyRepresentation_swigregister
RWStepFEA_RWFeaMaterialPropertyRepresentation_swigregister(RWStepFEA_RWFeaMaterialPropertyRepresentation)

class RWStepFEA_RWFeaMassDensity(object):
    """Read & Write tool for FeaMassDensity"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWFeaMassDensity self) -> RWStepFEA_RWFeaMassDensity

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaMassDensity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWFeaMassDensity self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_FeaMassDensity ent)

        Reads FeaMassDensity

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaMassDensity

        """
        return _RWStepFEA.RWStepFEA_RWFeaMassDensity_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWFeaMassDensity self, StepData_StepWriter SW, Handle_StepFEA_FeaMassDensity ent)

        Writes FeaMassDensity

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaMassDensity

        """
        return _RWStepFEA.RWStepFEA_RWFeaMassDensity_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWFeaMassDensity self, Handle_StepFEA_FeaMassDensity ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaMassDensity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWFeaMassDensity_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaMassDensity
RWStepFEA_RWFeaMassDensity_swigregister = _RWStepFEA.RWStepFEA_RWFeaMassDensity_swigregister
RWStepFEA_RWFeaMassDensity_swigregister(RWStepFEA_RWFeaMassDensity)

class RWStepFEA_RWDummyNode(object):
    """Read & Write tool for DummyNode"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWDummyNode self) -> RWStepFEA_RWDummyNode

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWDummyNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWDummyNode self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_DummyNode ent)

        Reads DummyNode

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_DummyNode

        """
        return _RWStepFEA.RWStepFEA_RWDummyNode_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWDummyNode self, StepData_StepWriter SW, Handle_StepFEA_DummyNode ent)

        Writes DummyNode

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_DummyNode

        """
        return _RWStepFEA.RWStepFEA_RWDummyNode_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWDummyNode self, Handle_StepFEA_DummyNode ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_DummyNode
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWDummyNode_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWDummyNode
RWStepFEA_RWDummyNode_swigregister = _RWStepFEA.RWStepFEA_RWDummyNode_swigregister
RWStepFEA_RWDummyNode_swigregister(RWStepFEA_RWDummyNode)

class RWStepFEA_RWFeaAxis2Placement3d(object):
    """Read & Write tool for FeaAxis2Placement3d"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWFeaAxis2Placement3d self) -> RWStepFEA_RWFeaAxis2Placement3d

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaAxis2Placement3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWFeaAxis2Placement3d self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_FeaAxis2Placement3d ent)

        Reads FeaAxis2Placement3d

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaAxis2Placement3d

        """
        return _RWStepFEA.RWStepFEA_RWFeaAxis2Placement3d_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWFeaAxis2Placement3d self, StepData_StepWriter SW, Handle_StepFEA_FeaAxis2Placement3d ent)

        Writes FeaAxis2Placement3d

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaAxis2Placement3d

        """
        return _RWStepFEA.RWStepFEA_RWFeaAxis2Placement3d_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWFeaAxis2Placement3d self, Handle_StepFEA_FeaAxis2Placement3d ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaAxis2Placement3d
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWFeaAxis2Placement3d_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaAxis2Placement3d
RWStepFEA_RWFeaAxis2Placement3d_swigregister = _RWStepFEA.RWStepFEA_RWFeaAxis2Placement3d_swigregister
RWStepFEA_RWFeaAxis2Placement3d_swigregister(RWStepFEA_RWFeaAxis2Placement3d)

class RWStepFEA_RWAlignedCurve3dElementCoordinateSystem(object):
    """Read & Write tool for AlignedCurve3dElementCoordinateSystem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWAlignedCurve3dElementCoordinateSystem self) -> RWStepFEA_RWAlignedCurve3dElementCoordinateSystem

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWAlignedCurve3dElementCoordinateSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWAlignedCurve3dElementCoordinateSystem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_AlignedCurve3dElementCoordinateSystem ent)

        Reads AlignedCurve3dElementCoordinateSystem

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_AlignedCurve3dElementCoordinateSystem

        """
        return _RWStepFEA.RWStepFEA_RWAlignedCurve3dElementCoordinateSystem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWAlignedCurve3dElementCoordinateSystem self, StepData_StepWriter SW, Handle_StepFEA_AlignedCurve3dElementCoordinateSystem ent)

        Writes AlignedCurve3dElementCoordinateSystem

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_AlignedCurve3dElementCoordinateSystem

        """
        return _RWStepFEA.RWStepFEA_RWAlignedCurve3dElementCoordinateSystem_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWAlignedCurve3dElementCoordinateSystem self, Handle_StepFEA_AlignedCurve3dElementCoordinateSystem ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_AlignedCurve3dElementCoordinateSystem
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWAlignedCurve3dElementCoordinateSystem_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWAlignedCurve3dElementCoordinateSystem
RWStepFEA_RWAlignedCurve3dElementCoordinateSystem_swigregister = _RWStepFEA.RWStepFEA_RWAlignedCurve3dElementCoordinateSystem_swigregister
RWStepFEA_RWAlignedCurve3dElementCoordinateSystem_swigregister(RWStepFEA_RWAlignedCurve3dElementCoordinateSystem)

class RWStepFEA_RWConstantSurface3dElementCoordinateSystem(object):
    """Read & Write tool for ConstantSurface3dElementCoordinateSystem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWConstantSurface3dElementCoordinateSystem self) -> RWStepFEA_RWConstantSurface3dElementCoordinateSystem

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWConstantSurface3dElementCoordinateSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWConstantSurface3dElementCoordinateSystem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_ConstantSurface3dElementCoordinateSystem ent)

        Reads ConstantSurface3dElementCoordinateSystem

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_ConstantSurface3dElementCoordinateSystem

        """
        return _RWStepFEA.RWStepFEA_RWConstantSurface3dElementCoordinateSystem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWConstantSurface3dElementCoordinateSystem self, StepData_StepWriter SW, Handle_StepFEA_ConstantSurface3dElementCoordinateSystem ent)

        Writes ConstantSurface3dElementCoordinateSystem

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_ConstantSurface3dElementCoordinateSystem

        """
        return _RWStepFEA.RWStepFEA_RWConstantSurface3dElementCoordinateSystem_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWConstantSurface3dElementCoordinateSystem self, Handle_StepFEA_ConstantSurface3dElementCoordinateSystem ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_ConstantSurface3dElementCoordinateSystem
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWConstantSurface3dElementCoordinateSystem_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWConstantSurface3dElementCoordinateSystem
RWStepFEA_RWConstantSurface3dElementCoordinateSystem_swigregister = _RWStepFEA.RWStepFEA_RWConstantSurface3dElementCoordinateSystem_swigregister
RWStepFEA_RWConstantSurface3dElementCoordinateSystem_swigregister(RWStepFEA_RWConstantSurface3dElementCoordinateSystem)

class RWStepFEA_RWFeaShellBendingStiffness(object):
    """Read & Write tool for FeaShellBendingStiffness"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWFeaShellBendingStiffness self) -> RWStepFEA_RWFeaShellBendingStiffness

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaShellBendingStiffness(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWFeaShellBendingStiffness self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_FeaShellBendingStiffness ent)

        Reads FeaShellBendingStiffness

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaShellBendingStiffness

        """
        return _RWStepFEA.RWStepFEA_RWFeaShellBendingStiffness_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWFeaShellBendingStiffness self, StepData_StepWriter SW, Handle_StepFEA_FeaShellBendingStiffness ent)

        Writes FeaShellBendingStiffness

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaShellBendingStiffness

        """
        return _RWStepFEA.RWStepFEA_RWFeaShellBendingStiffness_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWFeaShellBendingStiffness self, Handle_StepFEA_FeaShellBendingStiffness ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaShellBendingStiffness
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWFeaShellBendingStiffness_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaShellBendingStiffness
RWStepFEA_RWFeaShellBendingStiffness_swigregister = _RWStepFEA.RWStepFEA_RWFeaShellBendingStiffness_swigregister
RWStepFEA_RWFeaShellBendingStiffness_swigregister(RWStepFEA_RWFeaShellBendingStiffness)

class RWStepFEA_RWVolume3dElementRepresentation(object):
    """Read & Write tool for Volume3dElementRepresentation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWVolume3dElementRepresentation self) -> RWStepFEA_RWVolume3dElementRepresentation

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWVolume3dElementRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWVolume3dElementRepresentation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_Volume3dElementRepresentation ent)

        Reads Volume3dElementRepresentation

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_Volume3dElementRepresentation

        """
        return _RWStepFEA.RWStepFEA_RWVolume3dElementRepresentation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWVolume3dElementRepresentation self, StepData_StepWriter SW, Handle_StepFEA_Volume3dElementRepresentation ent)

        Writes Volume3dElementRepresentation

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_Volume3dElementRepresentation

        """
        return _RWStepFEA.RWStepFEA_RWVolume3dElementRepresentation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWVolume3dElementRepresentation self, Handle_StepFEA_Volume3dElementRepresentation ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_Volume3dElementRepresentation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWVolume3dElementRepresentation_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWVolume3dElementRepresentation
RWStepFEA_RWVolume3dElementRepresentation_swigregister = _RWStepFEA.RWStepFEA_RWVolume3dElementRepresentation_swigregister
RWStepFEA_RWVolume3dElementRepresentation_swigregister(RWStepFEA_RWVolume3dElementRepresentation)

class RWStepFEA_RWElementGroup(object):
    """Read & Write tool for ElementGroup"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWElementGroup self) -> RWStepFEA_RWElementGroup

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWElementGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWElementGroup self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_ElementGroup ent)

        Reads ElementGroup

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_ElementGroup

        """
        return _RWStepFEA.RWStepFEA_RWElementGroup_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWElementGroup self, StepData_StepWriter SW, Handle_StepFEA_ElementGroup ent)

        Writes ElementGroup

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_ElementGroup

        """
        return _RWStepFEA.RWStepFEA_RWElementGroup_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWElementGroup self, Handle_StepFEA_ElementGroup ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_ElementGroup
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWElementGroup_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWElementGroup
RWStepFEA_RWElementGroup_swigregister = _RWStepFEA.RWStepFEA_RWElementGroup_swigregister
RWStepFEA_RWElementGroup_swigregister(RWStepFEA_RWElementGroup)

class RWStepFEA_RWCurve3dElementProperty(object):
    """Read & Write tool for Curve3dElementProperty"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWCurve3dElementProperty self) -> RWStepFEA_RWCurve3dElementProperty

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWCurve3dElementProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWCurve3dElementProperty self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_Curve3dElementProperty ent)

        Reads Curve3dElementProperty

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_Curve3dElementProperty

        """
        return _RWStepFEA.RWStepFEA_RWCurve3dElementProperty_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWCurve3dElementProperty self, StepData_StepWriter SW, Handle_StepFEA_Curve3dElementProperty ent)

        Writes Curve3dElementProperty

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_Curve3dElementProperty

        """
        return _RWStepFEA.RWStepFEA_RWCurve3dElementProperty_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWCurve3dElementProperty self, Handle_StepFEA_Curve3dElementProperty ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_Curve3dElementProperty
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWCurve3dElementProperty_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWCurve3dElementProperty
RWStepFEA_RWCurve3dElementProperty_swigregister = _RWStepFEA.RWStepFEA_RWCurve3dElementProperty_swigregister
RWStepFEA_RWCurve3dElementProperty_swigregister(RWStepFEA_RWCurve3dElementProperty)

class RWStepFEA_RWNodeSet(object):
    """Read & Write tool for NodeSet"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWNodeSet self) -> RWStepFEA_RWNodeSet

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWNodeSet(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWNodeSet self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_NodeSet ent)

        Reads NodeSet

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_NodeSet

        """
        return _RWStepFEA.RWStepFEA_RWNodeSet_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWNodeSet self, StepData_StepWriter SW, Handle_StepFEA_NodeSet ent)

        Writes NodeSet

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_NodeSet

        """
        return _RWStepFEA.RWStepFEA_RWNodeSet_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWNodeSet self, Handle_StepFEA_NodeSet ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_NodeSet
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWNodeSet_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWNodeSet
RWStepFEA_RWNodeSet_swigregister = _RWStepFEA.RWStepFEA_RWNodeSet_swigregister
RWStepFEA_RWNodeSet_swigregister(RWStepFEA_RWNodeSet)

class RWStepFEA_RWFeaAreaDensity(object):
    """Read & Write tool for FeaAreaDensity"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWFeaAreaDensity self) -> RWStepFEA_RWFeaAreaDensity

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaAreaDensity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWFeaAreaDensity self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_FeaAreaDensity ent)

        Reads FeaAreaDensity

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaAreaDensity

        """
        return _RWStepFEA.RWStepFEA_RWFeaAreaDensity_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWFeaAreaDensity self, StepData_StepWriter SW, Handle_StepFEA_FeaAreaDensity ent)

        Writes FeaAreaDensity

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaAreaDensity

        """
        return _RWStepFEA.RWStepFEA_RWFeaAreaDensity_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWFeaAreaDensity self, Handle_StepFEA_FeaAreaDensity ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaAreaDensity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWFeaAreaDensity_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaAreaDensity
RWStepFEA_RWFeaAreaDensity_swigregister = _RWStepFEA.RWStepFEA_RWFeaAreaDensity_swigregister
RWStepFEA_RWFeaAreaDensity_swigregister(RWStepFEA_RWFeaAreaDensity)

class RWStepFEA_RWCurveElementInterval(object):
    """Read & Write tool for CurveElementInterval"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWCurveElementInterval self) -> RWStepFEA_RWCurveElementInterval

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWCurveElementInterval(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWCurveElementInterval self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_CurveElementInterval ent)

        Reads CurveElementInterval

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_CurveElementInterval

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementInterval_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWCurveElementInterval self, StepData_StepWriter SW, Handle_StepFEA_CurveElementInterval ent)

        Writes CurveElementInterval

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_CurveElementInterval

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementInterval_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWCurveElementInterval self, Handle_StepFEA_CurveElementInterval ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_CurveElementInterval
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementInterval_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWCurveElementInterval
RWStepFEA_RWCurveElementInterval_swigregister = _RWStepFEA.RWStepFEA_RWCurveElementInterval_swigregister
RWStepFEA_RWCurveElementInterval_swigregister(RWStepFEA_RWCurveElementInterval)

class RWStepFEA_RWFeaRepresentationItem(object):
    """Read & Write tool for FeaRepresentationItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWFeaRepresentationItem self) -> RWStepFEA_RWFeaRepresentationItem

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWFeaRepresentationItem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_FeaRepresentationItem ent)

        Reads FeaRepresentationItem

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaRepresentationItem

        """
        return _RWStepFEA.RWStepFEA_RWFeaRepresentationItem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWFeaRepresentationItem self, StepData_StepWriter SW, Handle_StepFEA_FeaRepresentationItem ent)

        Writes FeaRepresentationItem

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaRepresentationItem

        """
        return _RWStepFEA.RWStepFEA_RWFeaRepresentationItem_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWFeaRepresentationItem self, Handle_StepFEA_FeaRepresentationItem ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaRepresentationItem
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWFeaRepresentationItem_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaRepresentationItem
RWStepFEA_RWFeaRepresentationItem_swigregister = _RWStepFEA.RWStepFEA_RWFeaRepresentationItem_swigregister
RWStepFEA_RWFeaRepresentationItem_swigregister(RWStepFEA_RWFeaRepresentationItem)

class RWStepFEA_RWFeaSurfaceSectionGeometricRelationship(object):
    """Read & Write tool for FeaSurfaceSectionGeometricRelationship"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWFeaSurfaceSectionGeometricRelationship self) -> RWStepFEA_RWFeaSurfaceSectionGeometricRelationship

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaSurfaceSectionGeometricRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWFeaSurfaceSectionGeometricRelationship self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_FeaSurfaceSectionGeometricRelationship ent)

        Reads FeaSurfaceSectionGeometricRelationship

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaSurfaceSectionGeometricRelationship

        """
        return _RWStepFEA.RWStepFEA_RWFeaSurfaceSectionGeometricRelationship_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWFeaSurfaceSectionGeometricRelationship self, StepData_StepWriter SW, Handle_StepFEA_FeaSurfaceSectionGeometricRelationship ent)

        Writes FeaSurfaceSectionGeometricRelationship

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaSurfaceSectionGeometricRelationship

        """
        return _RWStepFEA.RWStepFEA_RWFeaSurfaceSectionGeometricRelationship_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWFeaSurfaceSectionGeometricRelationship self, Handle_StepFEA_FeaSurfaceSectionGeometricRelationship ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaSurfaceSectionGeometricRelationship
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWFeaSurfaceSectionGeometricRelationship_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaSurfaceSectionGeometricRelationship
RWStepFEA_RWFeaSurfaceSectionGeometricRelationship_swigregister = _RWStepFEA.RWStepFEA_RWFeaSurfaceSectionGeometricRelationship_swigregister
RWStepFEA_RWFeaSurfaceSectionGeometricRelationship_swigregister(RWStepFEA_RWFeaSurfaceSectionGeometricRelationship)

class RWStepFEA_RWGeometricNode(object):
    """Read & Write tool for GeometricNode"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWGeometricNode self) -> RWStepFEA_RWGeometricNode

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWGeometricNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWGeometricNode self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_GeometricNode ent)

        Reads GeometricNode

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_GeometricNode

        """
        return _RWStepFEA.RWStepFEA_RWGeometricNode_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWGeometricNode self, StepData_StepWriter SW, Handle_StepFEA_GeometricNode ent)

        Writes GeometricNode

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_GeometricNode

        """
        return _RWStepFEA.RWStepFEA_RWGeometricNode_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWGeometricNode self, Handle_StepFEA_GeometricNode ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_GeometricNode
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWGeometricNode_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWGeometricNode
RWStepFEA_RWGeometricNode_swigregister = _RWStepFEA.RWStepFEA_RWGeometricNode_swigregister
RWStepFEA_RWGeometricNode_swigregister(RWStepFEA_RWGeometricNode)

class RWStepFEA_RWNodeRepresentation(object):
    """Read & Write tool for NodeRepresentation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWNodeRepresentation self) -> RWStepFEA_RWNodeRepresentation

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWNodeRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWNodeRepresentation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_NodeRepresentation ent)

        Reads NodeRepresentation

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_NodeRepresentation

        """
        return _RWStepFEA.RWStepFEA_RWNodeRepresentation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWNodeRepresentation self, StepData_StepWriter SW, Handle_StepFEA_NodeRepresentation ent)

        Writes NodeRepresentation

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_NodeRepresentation

        """
        return _RWStepFEA.RWStepFEA_RWNodeRepresentation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWNodeRepresentation self, Handle_StepFEA_NodeRepresentation ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_NodeRepresentation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWNodeRepresentation_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWNodeRepresentation
RWStepFEA_RWNodeRepresentation_swigregister = _RWStepFEA.RWStepFEA_RWNodeRepresentation_swigregister
RWStepFEA_RWNodeRepresentation_swigregister(RWStepFEA_RWNodeRepresentation)

class RWStepFEA_RWFeaModel3d(object):
    """Read & Write tool for FeaModel3d"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWFeaModel3d self) -> RWStepFEA_RWFeaModel3d

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaModel3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWFeaModel3d self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_FeaModel3d ent)

        Reads FeaModel3d

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaModel3d

        """
        return _RWStepFEA.RWStepFEA_RWFeaModel3d_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWFeaModel3d self, StepData_StepWriter SW, Handle_StepFEA_FeaModel3d ent)

        Writes FeaModel3d

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaModel3d

        """
        return _RWStepFEA.RWStepFEA_RWFeaModel3d_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWFeaModel3d self, Handle_StepFEA_FeaModel3d ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaModel3d
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWFeaModel3d_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaModel3d
RWStepFEA_RWFeaModel3d_swigregister = _RWStepFEA.RWStepFEA_RWFeaModel3d_swigregister
RWStepFEA_RWFeaModel3d_swigregister(RWStepFEA_RWFeaModel3d)

class RWStepFEA_RWNodeDefinition(object):
    """Read & Write tool for NodeDefinition"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWNodeDefinition self) -> RWStepFEA_RWNodeDefinition

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWNodeDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWNodeDefinition self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_NodeDefinition ent)

        Reads NodeDefinition

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_NodeDefinition

        """
        return _RWStepFEA.RWStepFEA_RWNodeDefinition_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWNodeDefinition self, StepData_StepWriter SW, Handle_StepFEA_NodeDefinition ent)

        Writes NodeDefinition

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_NodeDefinition

        """
        return _RWStepFEA.RWStepFEA_RWNodeDefinition_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWNodeDefinition self, Handle_StepFEA_NodeDefinition ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_NodeDefinition
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWNodeDefinition_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWNodeDefinition
RWStepFEA_RWNodeDefinition_swigregister = _RWStepFEA.RWStepFEA_RWNodeDefinition_swigregister
RWStepFEA_RWNodeDefinition_swigregister(RWStepFEA_RWNodeDefinition)

class RWStepFEA_RWNode(object):
    """Read & Write tool for Node"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWNode self) -> RWStepFEA_RWNode

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWNode self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_Node ent)

        Reads Node

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_Node

        """
        return _RWStepFEA.RWStepFEA_RWNode_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWNode self, StepData_StepWriter SW, Handle_StepFEA_Node ent)

        Writes Node

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_Node

        """
        return _RWStepFEA.RWStepFEA_RWNode_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWNode self, Handle_StepFEA_Node ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_Node
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWNode_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWNode
RWStepFEA_RWNode_swigregister = _RWStepFEA.RWStepFEA_RWNode_swigregister
RWStepFEA_RWNode_swigregister(RWStepFEA_RWNode)

class RWStepFEA_RWFeaMaterialPropertyRepresentationItem(object):
    """Read & Write tool for FeaMaterialPropertyRepresentationItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWFeaMaterialPropertyRepresentationItem self) -> RWStepFEA_RWFeaMaterialPropertyRepresentationItem

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaMaterialPropertyRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWFeaMaterialPropertyRepresentationItem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_FeaMaterialPropertyRepresentationItem ent)

        Reads FeaMaterialPropertyRepresentationItem

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaMaterialPropertyRepresentationItem

        """
        return _RWStepFEA.RWStepFEA_RWFeaMaterialPropertyRepresentationItem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWFeaMaterialPropertyRepresentationItem self, StepData_StepWriter SW, Handle_StepFEA_FeaMaterialPropertyRepresentationItem ent)

        Writes FeaMaterialPropertyRepresentationItem

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaMaterialPropertyRepresentationItem

        """
        return _RWStepFEA.RWStepFEA_RWFeaMaterialPropertyRepresentationItem_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWFeaMaterialPropertyRepresentationItem self, Handle_StepFEA_FeaMaterialPropertyRepresentationItem ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaMaterialPropertyRepresentationItem
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWFeaMaterialPropertyRepresentationItem_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaMaterialPropertyRepresentationItem
RWStepFEA_RWFeaMaterialPropertyRepresentationItem_swigregister = _RWStepFEA.RWStepFEA_RWFeaMaterialPropertyRepresentationItem_swigregister
RWStepFEA_RWFeaMaterialPropertyRepresentationItem_swigregister(RWStepFEA_RWFeaMaterialPropertyRepresentationItem)

class RWStepFEA_RWFeaModel(object):
    """Read & Write tool for FeaModel"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWFeaModel self) -> RWStepFEA_RWFeaModel

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWFeaModel self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_FeaModel ent)

        Reads FeaModel

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaModel

        """
        return _RWStepFEA.RWStepFEA_RWFeaModel_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWFeaModel self, StepData_StepWriter SW, Handle_StepFEA_FeaModel ent)

        Writes FeaModel

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaModel

        """
        return _RWStepFEA.RWStepFEA_RWFeaModel_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWFeaModel self, Handle_StepFEA_FeaModel ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaModel
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWFeaModel_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaModel
RWStepFEA_RWFeaModel_swigregister = _RWStepFEA.RWStepFEA_RWFeaModel_swigregister
RWStepFEA_RWFeaModel_swigregister(RWStepFEA_RWFeaModel)

class RWStepFEA_RWNodeWithVector(object):
    """Read & Write tool for NodeWithVector"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWNodeWithVector self) -> RWStepFEA_RWNodeWithVector

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWNodeWithVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWNodeWithVector self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_NodeWithVector ent)

        Reads NodeWithVector

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_NodeWithVector

        """
        return _RWStepFEA.RWStepFEA_RWNodeWithVector_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWNodeWithVector self, StepData_StepWriter SW, Handle_StepFEA_NodeWithVector ent)

        Writes NodeWithVector

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_NodeWithVector

        """
        return _RWStepFEA.RWStepFEA_RWNodeWithVector_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWNodeWithVector self, Handle_StepFEA_NodeWithVector ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_NodeWithVector
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWNodeWithVector_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWNodeWithVector
RWStepFEA_RWNodeWithVector_swigregister = _RWStepFEA.RWStepFEA_RWNodeWithVector_swigregister
RWStepFEA_RWNodeWithVector_swigregister(RWStepFEA_RWNodeWithVector)

class RWStepFEA_RWCurveElementEndRelease(object):
    """Read & Write tool for CurveElementEndRelease"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWCurveElementEndRelease self) -> RWStepFEA_RWCurveElementEndRelease

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWCurveElementEndRelease(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWCurveElementEndRelease self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_CurveElementEndRelease ent)

        Reads CurveElementEndRelease

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_CurveElementEndRelease

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementEndRelease_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWCurveElementEndRelease self, StepData_StepWriter SW, Handle_StepFEA_CurveElementEndRelease ent)

        Writes CurveElementEndRelease

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_CurveElementEndRelease

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementEndRelease_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWCurveElementEndRelease self, Handle_StepFEA_CurveElementEndRelease ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_CurveElementEndRelease
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementEndRelease_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWCurveElementEndRelease
RWStepFEA_RWCurveElementEndRelease_swigregister = _RWStepFEA.RWStepFEA_RWCurveElementEndRelease_swigregister
RWStepFEA_RWCurveElementEndRelease_swigregister(RWStepFEA_RWCurveElementEndRelease)

class RWStepFEA_RWFeaCurveSectionGeometricRelationship(object):
    """Read & Write tool for FeaCurveSectionGeometricRelationship"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWFeaCurveSectionGeometricRelationship self) -> RWStepFEA_RWFeaCurveSectionGeometricRelationship

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaCurveSectionGeometricRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWFeaCurveSectionGeometricRelationship self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_FeaCurveSectionGeometricRelationship ent)

        Reads FeaCurveSectionGeometricRelationship

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaCurveSectionGeometricRelationship

        """
        return _RWStepFEA.RWStepFEA_RWFeaCurveSectionGeometricRelationship_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWFeaCurveSectionGeometricRelationship self, StepData_StepWriter SW, Handle_StepFEA_FeaCurveSectionGeometricRelationship ent)

        Writes FeaCurveSectionGeometricRelationship

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaCurveSectionGeometricRelationship

        """
        return _RWStepFEA.RWStepFEA_RWFeaCurveSectionGeometricRelationship_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWFeaCurveSectionGeometricRelationship self, Handle_StepFEA_FeaCurveSectionGeometricRelationship ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaCurveSectionGeometricRelationship
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWFeaCurveSectionGeometricRelationship_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaCurveSectionGeometricRelationship
RWStepFEA_RWFeaCurveSectionGeometricRelationship_swigregister = _RWStepFEA.RWStepFEA_RWFeaCurveSectionGeometricRelationship_swigregister
RWStepFEA_RWFeaCurveSectionGeometricRelationship_swigregister(RWStepFEA_RWFeaCurveSectionGeometricRelationship)

class RWStepFEA_RWFeaGroup(object):
    """Read & Write tool for FeaGroup"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWFeaGroup self) -> RWStepFEA_RWFeaGroup

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWFeaGroup self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_FeaGroup ent)

        Reads FeaGroup

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaGroup

        """
        return _RWStepFEA.RWStepFEA_RWFeaGroup_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWFeaGroup self, StepData_StepWriter SW, Handle_StepFEA_FeaGroup ent)

        Writes FeaGroup

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaGroup

        """
        return _RWStepFEA.RWStepFEA_RWFeaGroup_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWFeaGroup self, Handle_StepFEA_FeaGroup ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaGroup
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWFeaGroup_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaGroup
RWStepFEA_RWFeaGroup_swigregister = _RWStepFEA.RWStepFEA_RWFeaGroup_swigregister
RWStepFEA_RWFeaGroup_swigregister(RWStepFEA_RWFeaGroup)

class RWStepFEA_RWAlignedSurface3dElementCoordinateSystem(object):
    """Read & Write tool for AlignedSurface3dElementCoordinateSystem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWAlignedSurface3dElementCoordinateSystem self) -> RWStepFEA_RWAlignedSurface3dElementCoordinateSystem

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWAlignedSurface3dElementCoordinateSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWAlignedSurface3dElementCoordinateSystem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_AlignedSurface3dElementCoordinateSystem ent)

        Reads AlignedSurface3dElementCoordinateSystem

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_AlignedSurface3dElementCoordinateSystem

        """
        return _RWStepFEA.RWStepFEA_RWAlignedSurface3dElementCoordinateSystem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWAlignedSurface3dElementCoordinateSystem self, StepData_StepWriter SW, Handle_StepFEA_AlignedSurface3dElementCoordinateSystem ent)

        Writes AlignedSurface3dElementCoordinateSystem

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_AlignedSurface3dElementCoordinateSystem

        """
        return _RWStepFEA.RWStepFEA_RWAlignedSurface3dElementCoordinateSystem_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWAlignedSurface3dElementCoordinateSystem self, Handle_StepFEA_AlignedSurface3dElementCoordinateSystem ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_AlignedSurface3dElementCoordinateSystem
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWAlignedSurface3dElementCoordinateSystem_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWAlignedSurface3dElementCoordinateSystem
RWStepFEA_RWAlignedSurface3dElementCoordinateSystem_swigregister = _RWStepFEA.RWStepFEA_RWAlignedSurface3dElementCoordinateSystem_swigregister
RWStepFEA_RWAlignedSurface3dElementCoordinateSystem_swigregister(RWStepFEA_RWAlignedSurface3dElementCoordinateSystem)

class RWStepFEA_RWElementRepresentation(object):
    """Read & Write tool for ElementRepresentation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWElementRepresentation self) -> RWStepFEA_RWElementRepresentation

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWElementRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWElementRepresentation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_ElementRepresentation ent)

        Reads ElementRepresentation

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_ElementRepresentation

        """
        return _RWStepFEA.RWStepFEA_RWElementRepresentation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWElementRepresentation self, StepData_StepWriter SW, Handle_StepFEA_ElementRepresentation ent)

        Writes ElementRepresentation

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_ElementRepresentation

        """
        return _RWStepFEA.RWStepFEA_RWElementRepresentation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWElementRepresentation self, Handle_StepFEA_ElementRepresentation ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_ElementRepresentation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWElementRepresentation_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWElementRepresentation
RWStepFEA_RWElementRepresentation_swigregister = _RWStepFEA.RWStepFEA_RWElementRepresentation_swigregister
RWStepFEA_RWElementRepresentation_swigregister(RWStepFEA_RWElementRepresentation)

class RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion(object):
    """Read & Write tool for FeaTangentialCoefficientOfLinearThermalExpansion"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion self) -> RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion ent)

        Reads FeaTangentialCoefficientOfLinearThermalExpansion

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion

        """
        return _RWStepFEA.RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion self, StepData_StepWriter SW, Handle_StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion ent)

        Writes FeaTangentialCoefficientOfLinearThermalExpansion

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion

        """
        return _RWStepFEA.RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion self, Handle_StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaTangentialCoefficientOfLinearThermalExpansion
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion
RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion_swigregister = _RWStepFEA.RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion_swigregister
RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion_swigregister(RWStepFEA_RWFeaTangentialCoefficientOfLinearThermalExpansion)

class RWStepFEA_RWCurveElementEndOffset(object):
    """Read & Write tool for CurveElementEndOffset"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWCurveElementEndOffset self) -> RWStepFEA_RWCurveElementEndOffset

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWCurveElementEndOffset(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWCurveElementEndOffset self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_CurveElementEndOffset ent)

        Reads CurveElementEndOffset

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_CurveElementEndOffset

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementEndOffset_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWCurveElementEndOffset self, StepData_StepWriter SW, Handle_StepFEA_CurveElementEndOffset ent)

        Writes CurveElementEndOffset

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_CurveElementEndOffset

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementEndOffset_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWCurveElementEndOffset self, Handle_StepFEA_CurveElementEndOffset ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_CurveElementEndOffset
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementEndOffset_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWCurveElementEndOffset
RWStepFEA_RWCurveElementEndOffset_swigregister = _RWStepFEA.RWStepFEA_RWCurveElementEndOffset_swigregister
RWStepFEA_RWCurveElementEndOffset_swigregister(RWStepFEA_RWCurveElementEndOffset)

class RWStepFEA_RWParametricSurface3dElementCoordinateSystem(object):
    """Read & Write tool for ParametricSurface3dElementCoordinateSystem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWParametricSurface3dElementCoordinateSystem self) -> RWStepFEA_RWParametricSurface3dElementCoordinateSystem

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWParametricSurface3dElementCoordinateSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWParametricSurface3dElementCoordinateSystem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_ParametricSurface3dElementCoordinateSystem ent)

        Reads ParametricSurface3dElementCoordinateSystem

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_ParametricSurface3dElementCoordinateSystem

        """
        return _RWStepFEA.RWStepFEA_RWParametricSurface3dElementCoordinateSystem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWParametricSurface3dElementCoordinateSystem self, StepData_StepWriter SW, Handle_StepFEA_ParametricSurface3dElementCoordinateSystem ent)

        Writes ParametricSurface3dElementCoordinateSystem

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_ParametricSurface3dElementCoordinateSystem

        """
        return _RWStepFEA.RWStepFEA_RWParametricSurface3dElementCoordinateSystem_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWParametricSurface3dElementCoordinateSystem self, Handle_StepFEA_ParametricSurface3dElementCoordinateSystem ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_ParametricSurface3dElementCoordinateSystem
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWParametricSurface3dElementCoordinateSystem_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWParametricSurface3dElementCoordinateSystem
RWStepFEA_RWParametricSurface3dElementCoordinateSystem_swigregister = _RWStepFEA.RWStepFEA_RWParametricSurface3dElementCoordinateSystem_swigregister
RWStepFEA_RWParametricSurface3dElementCoordinateSystem_swigregister(RWStepFEA_RWParametricSurface3dElementCoordinateSystem)

class RWStepFEA_RWFeaParametricPoint(object):
    """Read & Write tool for FeaParametricPoint"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWFeaParametricPoint self) -> RWStepFEA_RWFeaParametricPoint

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaParametricPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWFeaParametricPoint self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_FeaParametricPoint ent)

        Reads FeaParametricPoint

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaParametricPoint

        """
        return _RWStepFEA.RWStepFEA_RWFeaParametricPoint_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWFeaParametricPoint self, StepData_StepWriter SW, Handle_StepFEA_FeaParametricPoint ent)

        Writes FeaParametricPoint

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaParametricPoint

        """
        return _RWStepFEA.RWStepFEA_RWFeaParametricPoint_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWFeaParametricPoint self, Handle_StepFEA_FeaParametricPoint ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaParametricPoint
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWFeaParametricPoint_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaParametricPoint
RWStepFEA_RWFeaParametricPoint_swigregister = _RWStepFEA.RWStepFEA_RWFeaParametricPoint_swigregister
RWStepFEA_RWFeaParametricPoint_swigregister(RWStepFEA_RWFeaParametricPoint)

class RWStepFEA_RWNodeWithSolutionCoordinateSystem(object):
    """Read & Write tool for NodeWithSolutionCoordinateSystem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWNodeWithSolutionCoordinateSystem self) -> RWStepFEA_RWNodeWithSolutionCoordinateSystem

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWNodeWithSolutionCoordinateSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWNodeWithSolutionCoordinateSystem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_NodeWithSolutionCoordinateSystem ent)

        Reads NodeWithSolutionCoordinateSystem

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_NodeWithSolutionCoordinateSystem

        """
        return _RWStepFEA.RWStepFEA_RWNodeWithSolutionCoordinateSystem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWNodeWithSolutionCoordinateSystem self, StepData_StepWriter SW, Handle_StepFEA_NodeWithSolutionCoordinateSystem ent)

        Writes NodeWithSolutionCoordinateSystem

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_NodeWithSolutionCoordinateSystem

        """
        return _RWStepFEA.RWStepFEA_RWNodeWithSolutionCoordinateSystem_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWNodeWithSolutionCoordinateSystem self, Handle_StepFEA_NodeWithSolutionCoordinateSystem ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_NodeWithSolutionCoordinateSystem
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWNodeWithSolutionCoordinateSystem_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWNodeWithSolutionCoordinateSystem
RWStepFEA_RWNodeWithSolutionCoordinateSystem_swigregister = _RWStepFEA.RWStepFEA_RWNodeWithSolutionCoordinateSystem_swigregister
RWStepFEA_RWNodeWithSolutionCoordinateSystem_swigregister(RWStepFEA_RWNodeWithSolutionCoordinateSystem)

class RWStepFEA_RWFeaShellMembraneStiffness(object):
    """Read & Write tool for FeaShellMembraneStiffness"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWFeaShellMembraneStiffness self) -> RWStepFEA_RWFeaShellMembraneStiffness

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaShellMembraneStiffness(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWFeaShellMembraneStiffness self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_FeaShellMembraneStiffness ent)

        Reads FeaShellMembraneStiffness

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaShellMembraneStiffness

        """
        return _RWStepFEA.RWStepFEA_RWFeaShellMembraneStiffness_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWFeaShellMembraneStiffness self, StepData_StepWriter SW, Handle_StepFEA_FeaShellMembraneStiffness ent)

        Writes FeaShellMembraneStiffness

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaShellMembraneStiffness

        """
        return _RWStepFEA.RWStepFEA_RWFeaShellMembraneStiffness_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWFeaShellMembraneStiffness self, Handle_StepFEA_FeaShellMembraneStiffness ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaShellMembraneStiffness
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWFeaShellMembraneStiffness_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaShellMembraneStiffness
RWStepFEA_RWFeaShellMembraneStiffness_swigregister = _RWStepFEA.RWStepFEA_RWFeaShellMembraneStiffness_swigregister
RWStepFEA_RWFeaShellMembraneStiffness_swigregister(RWStepFEA_RWFeaShellMembraneStiffness)

class RWStepFEA_RWParametricCurve3dElementCoordinateSystem(object):
    """Read & Write tool for ParametricCurve3dElementCoordinateSystem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWParametricCurve3dElementCoordinateSystem self) -> RWStepFEA_RWParametricCurve3dElementCoordinateSystem

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWParametricCurve3dElementCoordinateSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWParametricCurve3dElementCoordinateSystem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_ParametricCurve3dElementCoordinateSystem ent)

        Reads ParametricCurve3dElementCoordinateSystem

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_ParametricCurve3dElementCoordinateSystem

        """
        return _RWStepFEA.RWStepFEA_RWParametricCurve3dElementCoordinateSystem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWParametricCurve3dElementCoordinateSystem self, StepData_StepWriter SW, Handle_StepFEA_ParametricCurve3dElementCoordinateSystem ent)

        Writes ParametricCurve3dElementCoordinateSystem

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_ParametricCurve3dElementCoordinateSystem

        """
        return _RWStepFEA.RWStepFEA_RWParametricCurve3dElementCoordinateSystem_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWParametricCurve3dElementCoordinateSystem self, Handle_StepFEA_ParametricCurve3dElementCoordinateSystem ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_ParametricCurve3dElementCoordinateSystem
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWParametricCurve3dElementCoordinateSystem_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWParametricCurve3dElementCoordinateSystem
RWStepFEA_RWParametricCurve3dElementCoordinateSystem_swigregister = _RWStepFEA.RWStepFEA_RWParametricCurve3dElementCoordinateSystem_swigregister
RWStepFEA_RWParametricCurve3dElementCoordinateSystem_swigregister(RWStepFEA_RWParametricCurve3dElementCoordinateSystem)

class RWStepFEA_RWFeaShellShearStiffness(object):
    """Read & Write tool for FeaShellShearStiffness"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWFeaShellShearStiffness self) -> RWStepFEA_RWFeaShellShearStiffness

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaShellShearStiffness(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWFeaShellShearStiffness self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_FeaShellShearStiffness ent)

        Reads FeaShellShearStiffness

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaShellShearStiffness

        """
        return _RWStepFEA.RWStepFEA_RWFeaShellShearStiffness_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWFeaShellShearStiffness self, StepData_StepWriter SW, Handle_StepFEA_FeaShellShearStiffness ent)

        Writes FeaShellShearStiffness

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaShellShearStiffness

        """
        return _RWStepFEA.RWStepFEA_RWFeaShellShearStiffness_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWFeaShellShearStiffness self, Handle_StepFEA_FeaShellShearStiffness ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaShellShearStiffness
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWFeaShellShearStiffness_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaShellShearStiffness
RWStepFEA_RWFeaShellShearStiffness_swigregister = _RWStepFEA.RWStepFEA_RWFeaShellShearStiffness_swigregister
RWStepFEA_RWFeaShellShearStiffness_swigregister(RWStepFEA_RWFeaShellShearStiffness)

class RWStepFEA_RWFeaMoistureAbsorption(object):
    """Read & Write tool for FeaMoistureAbsorption"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWFeaMoistureAbsorption self) -> RWStepFEA_RWFeaMoistureAbsorption

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaMoistureAbsorption(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWFeaMoistureAbsorption self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_FeaMoistureAbsorption ent)

        Reads FeaMoistureAbsorption

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaMoistureAbsorption

        """
        return _RWStepFEA.RWStepFEA_RWFeaMoistureAbsorption_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWFeaMoistureAbsorption self, StepData_StepWriter SW, Handle_StepFEA_FeaMoistureAbsorption ent)

        Writes FeaMoistureAbsorption

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaMoistureAbsorption

        """
        return _RWStepFEA.RWStepFEA_RWFeaMoistureAbsorption_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWFeaMoistureAbsorption self, Handle_StepFEA_FeaMoistureAbsorption ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaMoistureAbsorption
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWFeaMoistureAbsorption_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaMoistureAbsorption
RWStepFEA_RWFeaMoistureAbsorption_swigregister = _RWStepFEA.RWStepFEA_RWFeaMoistureAbsorption_swigregister
RWStepFEA_RWFeaMoistureAbsorption_swigregister(RWStepFEA_RWFeaMoistureAbsorption)

class RWStepFEA_RWFreedomAndCoefficient(object):
    """Read & Write tool for FreedomAndCoefficient"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWFreedomAndCoefficient self) -> RWStepFEA_RWFreedomAndCoefficient

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWFreedomAndCoefficient(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWFreedomAndCoefficient self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_FreedomAndCoefficient ent)

        Reads FreedomAndCoefficient

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FreedomAndCoefficient

        """
        return _RWStepFEA.RWStepFEA_RWFreedomAndCoefficient_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWFreedomAndCoefficient self, StepData_StepWriter SW, Handle_StepFEA_FreedomAndCoefficient ent)

        Writes FreedomAndCoefficient

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FreedomAndCoefficient

        """
        return _RWStepFEA.RWStepFEA_RWFreedomAndCoefficient_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWFreedomAndCoefficient self, Handle_StepFEA_FreedomAndCoefficient ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FreedomAndCoefficient
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWFreedomAndCoefficient_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFreedomAndCoefficient
RWStepFEA_RWFreedomAndCoefficient_swigregister = _RWStepFEA.RWStepFEA_RWFreedomAndCoefficient_swigregister
RWStepFEA_RWFreedomAndCoefficient_swigregister(RWStepFEA_RWFreedomAndCoefficient)

class RWStepFEA_RWFeaLinearElasticity(object):
    """Read & Write tool for FeaLinearElasticity"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWFeaLinearElasticity self) -> RWStepFEA_RWFeaLinearElasticity

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaLinearElasticity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWFeaLinearElasticity self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_FeaLinearElasticity ent)

        Reads FeaLinearElasticity

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaLinearElasticity

        """
        return _RWStepFEA.RWStepFEA_RWFeaLinearElasticity_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWFeaLinearElasticity self, StepData_StepWriter SW, Handle_StepFEA_FeaLinearElasticity ent)

        Writes FeaLinearElasticity

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaLinearElasticity

        """
        return _RWStepFEA.RWStepFEA_RWFeaLinearElasticity_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWFeaLinearElasticity self, Handle_StepFEA_FeaLinearElasticity ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaLinearElasticity
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWFeaLinearElasticity_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaLinearElasticity
RWStepFEA_RWFeaLinearElasticity_swigregister = _RWStepFEA.RWStepFEA_RWFeaLinearElasticity_swigregister
RWStepFEA_RWFeaLinearElasticity_swigregister(RWStepFEA_RWFeaLinearElasticity)

class RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion(object):
    """Read & Write tool for FeaSecantCoefficientOfLinearThermalExpansion"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion self) -> RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_FeaSecantCoefficientOfLinearThermalExpansion ent)

        Reads FeaSecantCoefficientOfLinearThermalExpansion

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaSecantCoefficientOfLinearThermalExpansion

        """
        return _RWStepFEA.RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion self, StepData_StepWriter SW, Handle_StepFEA_FeaSecantCoefficientOfLinearThermalExpansion ent)

        Writes FeaSecantCoefficientOfLinearThermalExpansion

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaSecantCoefficientOfLinearThermalExpansion

        """
        return _RWStepFEA.RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion self, Handle_StepFEA_FeaSecantCoefficientOfLinearThermalExpansion ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_FeaSecantCoefficientOfLinearThermalExpansion
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion
RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion_swigregister = _RWStepFEA.RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion_swigregister
RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion_swigregister(RWStepFEA_RWFeaSecantCoefficientOfLinearThermalExpansion)

class RWStepFEA_RWCurve3dElementRepresentation(object):
    """Read & Write tool for Curve3dElementRepresentation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWCurve3dElementRepresentation self) -> RWStepFEA_RWCurve3dElementRepresentation

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWCurve3dElementRepresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWCurve3dElementRepresentation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_Curve3dElementRepresentation ent)

        Reads Curve3dElementRepresentation

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_Curve3dElementRepresentation

        """
        return _RWStepFEA.RWStepFEA_RWCurve3dElementRepresentation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWCurve3dElementRepresentation self, StepData_StepWriter SW, Handle_StepFEA_Curve3dElementRepresentation ent)

        Writes Curve3dElementRepresentation

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_Curve3dElementRepresentation

        """
        return _RWStepFEA.RWStepFEA_RWCurve3dElementRepresentation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWCurve3dElementRepresentation self, Handle_StepFEA_Curve3dElementRepresentation ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_Curve3dElementRepresentation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWCurve3dElementRepresentation_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWCurve3dElementRepresentation
RWStepFEA_RWCurve3dElementRepresentation_swigregister = _RWStepFEA.RWStepFEA_RWCurve3dElementRepresentation_swigregister
RWStepFEA_RWCurve3dElementRepresentation_swigregister(RWStepFEA_RWCurve3dElementRepresentation)

class RWStepFEA_RWCurveElementLocation(object):
    """Read & Write tool for CurveElementLocation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWCurveElementLocation self) -> RWStepFEA_RWCurveElementLocation

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWCurveElementLocation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWCurveElementLocation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_CurveElementLocation ent)

        Reads CurveElementLocation

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_CurveElementLocation

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementLocation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWCurveElementLocation self, StepData_StepWriter SW, Handle_StepFEA_CurveElementLocation ent)

        Writes CurveElementLocation

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_CurveElementLocation

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementLocation_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWCurveElementLocation self, Handle_StepFEA_CurveElementLocation ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_CurveElementLocation
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementLocation_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWCurveElementLocation
RWStepFEA_RWCurveElementLocation_swigregister = _RWStepFEA.RWStepFEA_RWCurveElementLocation_swigregister
RWStepFEA_RWCurveElementLocation_swigregister(RWStepFEA_RWCurveElementLocation)

class RWStepFEA_RWCurveElementIntervalLinearlyVarying(object):
    """Read & Write tool for CurveElementIntervalLinearlyVarying"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWCurveElementIntervalLinearlyVarying self) -> RWStepFEA_RWCurveElementIntervalLinearlyVarying

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWCurveElementIntervalLinearlyVarying(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWCurveElementIntervalLinearlyVarying self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_CurveElementIntervalLinearlyVarying ent)

        Reads CurveElementIntervalLinearlyVarying

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_CurveElementIntervalLinearlyVarying

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementIntervalLinearlyVarying_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWCurveElementIntervalLinearlyVarying self, StepData_StepWriter SW, Handle_StepFEA_CurveElementIntervalLinearlyVarying ent)

        Writes CurveElementIntervalLinearlyVarying

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_CurveElementIntervalLinearlyVarying

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementIntervalLinearlyVarying_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWCurveElementIntervalLinearlyVarying self, Handle_StepFEA_CurveElementIntervalLinearlyVarying ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_CurveElementIntervalLinearlyVarying
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWCurveElementIntervalLinearlyVarying_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWCurveElementIntervalLinearlyVarying
RWStepFEA_RWCurveElementIntervalLinearlyVarying_swigregister = _RWStepFEA.RWStepFEA_RWCurveElementIntervalLinearlyVarying_swigregister
RWStepFEA_RWCurveElementIntervalLinearlyVarying_swigregister(RWStepFEA_RWCurveElementIntervalLinearlyVarying)

class RWStepFEA_RWNodeGroup(object):
    """Read & Write tool for NodeGroup"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWNodeGroup self) -> RWStepFEA_RWNodeGroup

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWNodeGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWNodeGroup self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_NodeGroup ent)

        Reads NodeGroup

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_NodeGroup

        """
        return _RWStepFEA.RWStepFEA_RWNodeGroup_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWNodeGroup self, StepData_StepWriter SW, Handle_StepFEA_NodeGroup ent)

        Writes NodeGroup

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_NodeGroup

        """
        return _RWStepFEA.RWStepFEA_RWNodeGroup_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWNodeGroup self, Handle_StepFEA_NodeGroup ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_NodeGroup
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWNodeGroup_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWNodeGroup
RWStepFEA_RWNodeGroup_swigregister = _RWStepFEA.RWStepFEA_RWNodeGroup_swigregister
RWStepFEA_RWNodeGroup_swigregister(RWStepFEA_RWNodeGroup)

class RWStepFEA_RWParametricCurve3dElementCoordinateDirection(object):
    """Read & Write tool for ParametricCurve3dElementCoordinateDirection"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepFEA_RWParametricCurve3dElementCoordinateDirection self) -> RWStepFEA_RWParametricCurve3dElementCoordinateDirection

        Empty constructor


        """
        this = _RWStepFEA.new_RWStepFEA_RWParametricCurve3dElementCoordinateDirection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepFEA_RWParametricCurve3dElementCoordinateDirection self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepFEA_ParametricCurve3dElementCoordinateDirection ent)

        Reads ParametricCurve3dElementCoordinateDirection

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_ParametricCurve3dElementCoordinateDirection

        """
        return _RWStepFEA.RWStepFEA_RWParametricCurve3dElementCoordinateDirection_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepFEA_RWParametricCurve3dElementCoordinateDirection self, StepData_StepWriter SW, Handle_StepFEA_ParametricCurve3dElementCoordinateDirection ent)

        Writes ParametricCurve3dElementCoordinateDirection

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_ParametricCurve3dElementCoordinateDirection

        """
        return _RWStepFEA.RWStepFEA_RWParametricCurve3dElementCoordinateDirection_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepFEA_RWParametricCurve3dElementCoordinateDirection self, Handle_StepFEA_ParametricCurve3dElementCoordinateDirection ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepFEA.Handle_StepFEA_ParametricCurve3dElementCoordinateDirection
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepFEA.RWStepFEA_RWParametricCurve3dElementCoordinateDirection_Share(self, *args)

    __swig_destroy__ = _RWStepFEA.delete_RWStepFEA_RWParametricCurve3dElementCoordinateDirection
RWStepFEA_RWParametricCurve3dElementCoordinateDirection_swigregister = _RWStepFEA.RWStepFEA_RWParametricCurve3dElementCoordinateDirection_swigregister
RWStepFEA_RWParametricCurve3dElementCoordinateDirection_swigregister(RWStepFEA_RWParametricCurve3dElementCoordinateDirection)



