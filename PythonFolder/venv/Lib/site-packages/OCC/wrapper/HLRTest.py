# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_HLRTest')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_HLRTest')
    _HLRTest = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_HLRTest', [dirname(__file__)])
        except ImportError:
            import _HLRTest
            return _HLRTest
        try:
            _mod = imp.load_module('_HLRTest', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _HLRTest = swig_import_helper()
    del swig_import_helper
else:
    import _HLRTest
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HLRTest.delete_SwigPyIterator

    def value(self):
        return _HLRTest.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _HLRTest.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _HLRTest.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _HLRTest.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _HLRTest.SwigPyIterator_equal(self, x)

    def copy(self):
        return _HLRTest.SwigPyIterator_copy(self)

    def next(self):
        return _HLRTest.SwigPyIterator_next(self)

    def __next__(self):
        return _HLRTest.SwigPyIterator___next__(self)

    def previous(self):
        return _HLRTest.SwigPyIterator_previous(self)

    def advance(self, n):
        return _HLRTest.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _HLRTest.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _HLRTest.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _HLRTest.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _HLRTest.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _HLRTest.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _HLRTest.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _HLRTest.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _HLRTest.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_HLRTest.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _HLRTest.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _HLRTest.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _HLRTest.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _HLRTest.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _HLRTest.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _HLRTest.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _HLRTest.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_HLRTest.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _HLRTest.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _HLRTest.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _HLRTest.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _HLRTest.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _HLRTest.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _HLRTest.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _HLRTest.ptr_to_number(item)
ptr_to_number = _HLRTest.ptr_to_number

def HashCode(*args):
    return _HLRTest.HashCode(*args)
HashCode = _HLRTest.HashCode

def ptr_equal(a, b):
    return _HLRTest.ptr_equal(a, b)
ptr_equal = _HLRTest.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Draw
else:
    import Draw
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import HLRBRep
else:
    import HLRBRep
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntCurve
else:
    import IntCurve
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntRes2d
else:
    import IntRes2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntSurf
else:
    import IntSurf
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepTopAdaptor
else:
    import BRepTopAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BRepAdaptor
else:
    import BRepAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2dAdaptor
else:
    import Geom2dAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAdaptor
else:
    import GeomAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import HLRTopoBRep
else:
    import HLRTopoBRep
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import HLRAlgo
else:
    import HLRAlgo
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Contap
else:
    import Contap
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntWalk
else:
    import IntWalk
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntImp
else:
    import IntImp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Extrema
else:
    import Extrema
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Intf
else:
    import Intf
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntCurveSurface
else:
    import IntCurveSurface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntAna
else:
    import IntAna
del _swig_python_version_info
class HLRTest_ShapeData(Standard.Standard_Transient):
    """Contains the colors of a shape."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_HLRTest_ShapeData
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_HLRTest_ShapeData(self) 
            return h


    def __init__(self, *args):
        """
        __init__(HLRTest_ShapeData self, Draw_Color CVis, Draw_Color COVis, Draw_Color CIVis, Draw_Color CHid, Draw_Color COHid, Draw_Color CIHid) -> HLRTest_ShapeData

        :type CVis: OCC.wrapper.Draw.Draw_Color
        :type COVis: OCC.wrapper.Draw.Draw_Color
        :type CIVis: OCC.wrapper.Draw.Draw_Color
        :type CHid: OCC.wrapper.Draw.Draw_Color
        :type COHid: OCC.wrapper.Draw.Draw_Color
        :type CIHid: OCC.wrapper.Draw.Draw_Color

        """
        this = _HLRTest.new_HLRTest_ShapeData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def VisibleColor(self, *args):
        """
        VisibleColor(HLRTest_ShapeData self, Draw_Color CVis)
        VisibleColor(HLRTest_ShapeData self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _HLRTest.HLRTest_ShapeData_VisibleColor(self, *args)


    def VisibleOutLineColor(self, *args):
        """
        VisibleOutLineColor(HLRTest_ShapeData self, Draw_Color COVis)
        VisibleOutLineColor(HLRTest_ShapeData self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _HLRTest.HLRTest_ShapeData_VisibleOutLineColor(self, *args)


    def VisibleIsoColor(self, *args):
        """
        VisibleIsoColor(HLRTest_ShapeData self, Draw_Color CIVis)
        VisibleIsoColor(HLRTest_ShapeData self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _HLRTest.HLRTest_ShapeData_VisibleIsoColor(self, *args)


    def HiddenColor(self, *args):
        """
        HiddenColor(HLRTest_ShapeData self, Draw_Color CHid)
        HiddenColor(HLRTest_ShapeData self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _HLRTest.HLRTest_ShapeData_HiddenColor(self, *args)


    def HiddenOutLineColor(self, *args):
        """
        HiddenOutLineColor(HLRTest_ShapeData self, Draw_Color COHid)
        HiddenOutLineColor(HLRTest_ShapeData self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _HLRTest.HLRTest_ShapeData_HiddenOutLineColor(self, *args)


    def HiddenIsoColor(self, *args):
        """
        HiddenIsoColor(HLRTest_ShapeData self, Draw_Color CIHid)
        HiddenIsoColor(HLRTest_ShapeData self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _HLRTest.HLRTest_ShapeData_HiddenIsoColor(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _HLRTest.HLRTest_ShapeData_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _HLRTest.HLRTest_ShapeData_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRTest.HLRTest_ShapeData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _HLRTest.delete_HLRTest_ShapeData
HLRTest_ShapeData_swigregister = _HLRTest.HLRTest_ShapeData_swigregister
HLRTest_ShapeData_swigregister(HLRTest_ShapeData)

def HLRTest_ShapeData_get_type_name(*args):
    """
    HLRTest_ShapeData_get_type_name() -> char const *

    :rtype: const char *

    """
    return _HLRTest.HLRTest_ShapeData_get_type_name(*args)

def HLRTest_ShapeData_get_type_descriptor(*args):
    """
    HLRTest_ShapeData_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _HLRTest.HLRTest_ShapeData_get_type_descriptor(*args)

class HLRTest_Projector(Draw.Draw_Drawable3D):
    """Draw Variable Projector to test."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_HLRTest_Projector
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_HLRTest_Projector(self) 
            return h


    def __init__(self, *args):
        """
        __init__(HLRTest_Projector self, HLRAlgo_Projector P) -> HLRTest_Projector

        :type P: OCC.wrapper.HLRAlgo.HLRAlgo_Projector

        """
        this = _HLRTest.new_HLRTest_Projector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Projector(self, *args):
        """
        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Projector

        """
        res = _HLRTest.HLRTest_Projector_Projector(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DrawOn(self, *args):
        """
        DrawOn(HLRTest_Projector self, Draw_Display dis)

        Does nothhing,

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _HLRTest.HLRTest_Projector_DrawOn(self, *args)


    def Copy(self, *args):
        """
        Copy(HLRTest_Projector self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _HLRTest.HLRTest_Projector_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(HLRTest_Projector self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _HLRTest.HLRTest_Projector_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(HLRTest_Projector self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _HLRTest.HLRTest_Projector_Whatis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _HLRTest.HLRTest_Projector_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _HLRTest.HLRTest_Projector_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRTest.HLRTest_Projector_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _HLRTest.delete_HLRTest_Projector
HLRTest_Projector_swigregister = _HLRTest.HLRTest_Projector_swigregister
HLRTest_Projector_swigregister(HLRTest_Projector)

def HLRTest_Projector_get_type_name(*args):
    """
    HLRTest_Projector_get_type_name() -> char const *

    :rtype: const char *

    """
    return _HLRTest.HLRTest_Projector_get_type_name(*args)

def HLRTest_Projector_get_type_descriptor(*args):
    """
    HLRTest_Projector_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _HLRTest.HLRTest_Projector_get_type_descriptor(*args)

class HLRTest_OutLiner(Draw.Draw_Drawable3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_HLRTest_OutLiner
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_HLRTest_OutLiner(self) 
            return h


    def __init__(self, *args):
        """
        __init__(HLRTest_OutLiner self, TopoDS_Shape S) -> HLRTest_OutLiner

        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        this = _HLRTest.new_HLRTest_OutLiner(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def OutLiner(self, *args):
        """
        OutLiner(HLRTest_OutLiner self) -> Handle_HLRTopoBRep_OutLiner

        :rtype: OCC.wrapper.HLRTopoBRep.Handle_HLRTopoBRep_OutLiner

        """
        return _HLRTest.HLRTest_OutLiner_OutLiner(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(HLRTest_OutLiner self, Draw_Display dis)

        Does nothhing,

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _HLRTest.HLRTest_OutLiner_DrawOn(self, *args)


    def Copy(self, *args):
        """
        Copy(HLRTest_OutLiner self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _HLRTest.HLRTest_OutLiner_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(HLRTest_OutLiner self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _HLRTest.HLRTest_OutLiner_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(HLRTest_OutLiner self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _HLRTest.HLRTest_OutLiner_Whatis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _HLRTest.HLRTest_OutLiner_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _HLRTest.HLRTest_OutLiner_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRTest.HLRTest_OutLiner_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _HLRTest.delete_HLRTest_OutLiner
HLRTest_OutLiner_swigregister = _HLRTest.HLRTest_OutLiner_swigregister
HLRTest_OutLiner_swigregister(HLRTest_OutLiner)

def HLRTest_OutLiner_get_type_name(*args):
    """
    HLRTest_OutLiner_get_type_name() -> char const *

    :rtype: const char *

    """
    return _HLRTest.HLRTest_OutLiner_get_type_name(*args)

def HLRTest_OutLiner_get_type_descriptor(*args):
    """
    HLRTest_OutLiner_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _HLRTest.HLRTest_OutLiner_get_type_descriptor(*args)

class HLRTest_DrawablePolyEdgeTool(Draw.Draw_Drawable3D):
    """Used to display the results."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_HLRTest_DrawablePolyEdgeTool
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_HLRTest_DrawablePolyEdgeTool(self) 
            return h


    def __init__(self, *args):
        """
        __init__(HLRTest_DrawablePolyEdgeTool self, Handle_HLRBRep_PolyAlgo Alg, Standard_Integer const ViewId, Standard_Boolean const Debug) -> HLRTest_DrawablePolyEdgeTool

        :type Alg: OCC.wrapper.HLRBRep.Handle_HLRBRep_PolyAlgo
        :type ViewId: int
        :type Debug: bool

        """
        this = _HLRTest.new_HLRTest_DrawablePolyEdgeTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Show(self, *args):
        """Show(HLRTest_DrawablePolyEdgeTool self)"""
        return _HLRTest.HLRTest_DrawablePolyEdgeTool_Show(self, *args)


    def Hide(self, *args):
        """Hide(HLRTest_DrawablePolyEdgeTool self)"""
        return _HLRTest.HLRTest_DrawablePolyEdgeTool_Hide(self, *args)


    def DisplayRg1Line(self, *args):
        """
        DisplayRg1Line(HLRTest_DrawablePolyEdgeTool self, Standard_Boolean const B)
        DisplayRg1Line(HLRTest_DrawablePolyEdgeTool self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTest.HLRTest_DrawablePolyEdgeTool_DisplayRg1Line(self, *args)


    def DisplayRgNLine(self, *args):
        """
        DisplayRgNLine(HLRTest_DrawablePolyEdgeTool self, Standard_Boolean const B)
        DisplayRgNLine(HLRTest_DrawablePolyEdgeTool self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTest.HLRTest_DrawablePolyEdgeTool_DisplayRgNLine(self, *args)


    def DisplayHidden(self, *args):
        """
        DisplayHidden(HLRTest_DrawablePolyEdgeTool self, Standard_Boolean const B)
        DisplayHidden(HLRTest_DrawablePolyEdgeTool self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTest.HLRTest_DrawablePolyEdgeTool_DisplayHidden(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(HLRTest_DrawablePolyEdgeTool self, Draw_Display D)

        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _HLRTest.HLRTest_DrawablePolyEdgeTool_DrawOn(self, *args)


    def Debug(self, *args):
        """
        Debug(HLRTest_DrawablePolyEdgeTool self) -> Standard_Boolean
        Debug(HLRTest_DrawablePolyEdgeTool self, Standard_Boolean const B)

        :type B: bool

        """
        return _HLRTest.HLRTest_DrawablePolyEdgeTool_Debug(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _HLRTest.HLRTest_DrawablePolyEdgeTool_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _HLRTest.HLRTest_DrawablePolyEdgeTool_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRTest.HLRTest_DrawablePolyEdgeTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _HLRTest.delete_HLRTest_DrawablePolyEdgeTool
HLRTest_DrawablePolyEdgeTool_swigregister = _HLRTest.HLRTest_DrawablePolyEdgeTool_swigregister
HLRTest_DrawablePolyEdgeTool_swigregister(HLRTest_DrawablePolyEdgeTool)

def HLRTest_DrawablePolyEdgeTool_get_type_name(*args):
    """
    HLRTest_DrawablePolyEdgeTool_get_type_name() -> char const *

    :rtype: const char *

    """
    return _HLRTest.HLRTest_DrawablePolyEdgeTool_get_type_name(*args)

def HLRTest_DrawablePolyEdgeTool_get_type_descriptor(*args):
    """
    HLRTest_DrawablePolyEdgeTool_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _HLRTest.HLRTest_DrawablePolyEdgeTool_get_type_descriptor(*args)

class Handle_HLRTest_OutLiner(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_HLRTest_OutLiner self)

        Nullify the handle


        """
        return _HLRTest.Handle_HLRTest_OutLiner_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_HLRTest_OutLiner self) -> bool

        Check for being null

        :rtype: bool

        """
        return _HLRTest.Handle_HLRTest_OutLiner_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_HLRTest_OutLiner self, HLRTest_OutLiner thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _HLRTest.Handle_HLRTest_OutLiner_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_HLRTest_OutLiner self, Handle_HLRTest_OutLiner theHandle) -> Handle_HLRTest_OutLiner
        assign(Handle_HLRTest_OutLiner self, HLRTest_OutLiner thePtr) -> Handle_HLRTest_OutLiner
        assign(Handle_HLRTest_OutLiner self, Handle_HLRTest_OutLiner theHandle) -> Handle_HLRTest_OutLiner

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _HLRTest.Handle_HLRTest_OutLiner_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_HLRTest_OutLiner self) -> HLRTest_OutLiner

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _HLRTest.Handle_HLRTest_OutLiner_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_HLRTest_OutLiner self) -> HLRTest_OutLiner

        Member access operator (note non-const)

        :rtype: T *

        """
        return _HLRTest.Handle_HLRTest_OutLiner___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_HLRTest_OutLiner self) -> HLRTest_OutLiner

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _HLRTest.Handle_HLRTest_OutLiner___ref__(self, *args)


    def __hash__(self):
        return _HLRTest.Handle_HLRTest_OutLiner___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _HLRTest.Handle_HLRTest_OutLiner___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _HLRTest.new_Handle_HLRTest_OutLiner(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_HLRTest.Handle_HLRTest_OutLiner_DownCast)
    __swig_destroy__ = _HLRTest.delete_Handle_HLRTest_OutLiner

    def OutLiner(self, *args):
        """
        OutLiner(Handle_HLRTest_OutLiner self) -> Handle_HLRTopoBRep_OutLiner

        :rtype: OCC.wrapper.HLRTopoBRep.Handle_HLRTopoBRep_OutLiner

        """
        return _HLRTest.Handle_HLRTest_OutLiner_OutLiner(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Handle_HLRTest_OutLiner self, Draw_Display dis)

        Does nothhing,

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _HLRTest.Handle_HLRTest_OutLiner_DrawOn(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_HLRTest_OutLiner self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _HLRTest.Handle_HLRTest_OutLiner_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_HLRTest_OutLiner self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _HLRTest.Handle_HLRTest_OutLiner_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_HLRTest_OutLiner self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _HLRTest.Handle_HLRTest_OutLiner_Whatis(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_HLRTest_OutLiner self) -> char const *

        :rtype: const char *

        """
        return _HLRTest.Handle_HLRTest_OutLiner_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRTest.Handle_HLRTest_OutLiner_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRTest.Handle_HLRTest_OutLiner_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PickReject(self, *args):
        """
        PickReject(Handle_HLRTest_OutLiner self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTest.Handle_HLRTest_OutLiner_PickReject(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_HLRTest_OutLiner self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTest.Handle_HLRTest_OutLiner_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_HLRTest_OutLiner self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _HLRTest.Handle_HLRTest_OutLiner_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_HLRTest_OutLiner self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _HLRTest.Handle_HLRTest_OutLiner_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_HLRTest_OutLiner self) -> Standard_Boolean
        Visible(Handle_HLRTest_OutLiner self, Standard_Boolean const V)

        :type V: bool

        """
        return _HLRTest.Handle_HLRTest_OutLiner_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_HLRTest_OutLiner self) -> Standard_Boolean
        Protected(Handle_HLRTest_OutLiner self, Standard_Boolean const P)

        :type P: bool

        """
        return _HLRTest.Handle_HLRTest_OutLiner_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_HLRTest_OutLiner self) -> Standard_CString
        Name(Handle_HLRTest_OutLiner self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _HLRTest.Handle_HLRTest_OutLiner_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_HLRTest_OutLiner self)

        Memory deallocator for transient classes


        """
        return _HLRTest.Handle_HLRTest_OutLiner_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_HLRTest_OutLiner self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_HLRTest_OutLiner self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTest.Handle_HLRTest_OutLiner_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_HLRTest_OutLiner self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_HLRTest_OutLiner self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTest.Handle_HLRTest_OutLiner_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_HLRTest_OutLiner self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _HLRTest.Handle_HLRTest_OutLiner_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_HLRTest_OutLiner self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRTest.Handle_HLRTest_OutLiner_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_HLRTest_OutLiner self)

        Increments the reference counter of this object


        """
        return _HLRTest.Handle_HLRTest_OutLiner_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_HLRTest_OutLiner self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRTest.Handle_HLRTest_OutLiner_DecrementRefCounter(self, *args)

Handle_HLRTest_OutLiner_swigregister = _HLRTest.Handle_HLRTest_OutLiner_swigregister
Handle_HLRTest_OutLiner_swigregister(Handle_HLRTest_OutLiner)

def Handle_HLRTest_OutLiner_DownCast(thing):
    return _HLRTest.Handle_HLRTest_OutLiner_DownCast(thing)
Handle_HLRTest_OutLiner_DownCast = _HLRTest.Handle_HLRTest_OutLiner_DownCast

class Handle_HLRTest_Projector(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_HLRTest_Projector self)

        Nullify the handle


        """
        return _HLRTest.Handle_HLRTest_Projector_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_HLRTest_Projector self) -> bool

        Check for being null

        :rtype: bool

        """
        return _HLRTest.Handle_HLRTest_Projector_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_HLRTest_Projector self, HLRTest_Projector thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _HLRTest.Handle_HLRTest_Projector_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_HLRTest_Projector self, Handle_HLRTest_Projector theHandle) -> Handle_HLRTest_Projector
        assign(Handle_HLRTest_Projector self, HLRTest_Projector thePtr) -> Handle_HLRTest_Projector
        assign(Handle_HLRTest_Projector self, Handle_HLRTest_Projector theHandle) -> Handle_HLRTest_Projector

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _HLRTest.Handle_HLRTest_Projector_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_HLRTest_Projector self) -> HLRTest_Projector

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _HLRTest.Handle_HLRTest_Projector_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_HLRTest_Projector self) -> HLRTest_Projector

        Member access operator (note non-const)

        :rtype: T *

        """
        return _HLRTest.Handle_HLRTest_Projector___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_HLRTest_Projector self) -> HLRTest_Projector

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _HLRTest.Handle_HLRTest_Projector___ref__(self, *args)


    def __hash__(self):
        return _HLRTest.Handle_HLRTest_Projector___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _HLRTest.Handle_HLRTest_Projector___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _HLRTest.new_Handle_HLRTest_Projector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_HLRTest.Handle_HLRTest_Projector_DownCast)
    __swig_destroy__ = _HLRTest.delete_Handle_HLRTest_Projector

    def Projector(self, *args):
        """
        :rtype: OCC.wrapper.HLRAlgo.HLRAlgo_Projector

        """
        res = _HLRTest.Handle_HLRTest_Projector_Projector(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DrawOn(self, *args):
        """
        DrawOn(Handle_HLRTest_Projector self, Draw_Display dis)

        Does nothhing,

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _HLRTest.Handle_HLRTest_Projector_DrawOn(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_HLRTest_Projector self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _HLRTest.Handle_HLRTest_Projector_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_HLRTest_Projector self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _HLRTest.Handle_HLRTest_Projector_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_HLRTest_Projector self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _HLRTest.Handle_HLRTest_Projector_Whatis(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_HLRTest_Projector self) -> char const *

        :rtype: const char *

        """
        return _HLRTest.Handle_HLRTest_Projector_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRTest.Handle_HLRTest_Projector_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRTest.Handle_HLRTest_Projector_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PickReject(self, *args):
        """
        PickReject(Handle_HLRTest_Projector self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTest.Handle_HLRTest_Projector_PickReject(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_HLRTest_Projector self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTest.Handle_HLRTest_Projector_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_HLRTest_Projector self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _HLRTest.Handle_HLRTest_Projector_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_HLRTest_Projector self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _HLRTest.Handle_HLRTest_Projector_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_HLRTest_Projector self) -> Standard_Boolean
        Visible(Handle_HLRTest_Projector self, Standard_Boolean const V)

        :type V: bool

        """
        return _HLRTest.Handle_HLRTest_Projector_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_HLRTest_Projector self) -> Standard_Boolean
        Protected(Handle_HLRTest_Projector self, Standard_Boolean const P)

        :type P: bool

        """
        return _HLRTest.Handle_HLRTest_Projector_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_HLRTest_Projector self) -> Standard_CString
        Name(Handle_HLRTest_Projector self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _HLRTest.Handle_HLRTest_Projector_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_HLRTest_Projector self)

        Memory deallocator for transient classes


        """
        return _HLRTest.Handle_HLRTest_Projector_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_HLRTest_Projector self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_HLRTest_Projector self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTest.Handle_HLRTest_Projector_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_HLRTest_Projector self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_HLRTest_Projector self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTest.Handle_HLRTest_Projector_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_HLRTest_Projector self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _HLRTest.Handle_HLRTest_Projector_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_HLRTest_Projector self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRTest.Handle_HLRTest_Projector_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_HLRTest_Projector self)

        Increments the reference counter of this object


        """
        return _HLRTest.Handle_HLRTest_Projector_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_HLRTest_Projector self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRTest.Handle_HLRTest_Projector_DecrementRefCounter(self, *args)

Handle_HLRTest_Projector_swigregister = _HLRTest.Handle_HLRTest_Projector_swigregister
Handle_HLRTest_Projector_swigregister(Handle_HLRTest_Projector)

def Handle_HLRTest_Projector_DownCast(thing):
    return _HLRTest.Handle_HLRTest_Projector_DownCast(thing)
Handle_HLRTest_Projector_DownCast = _HLRTest.Handle_HLRTest_Projector_DownCast

class Handle_HLRTest_ShapeData(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_HLRTest_ShapeData self)

        Nullify the handle


        """
        return _HLRTest.Handle_HLRTest_ShapeData_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_HLRTest_ShapeData self) -> bool

        Check for being null

        :rtype: bool

        """
        return _HLRTest.Handle_HLRTest_ShapeData_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_HLRTest_ShapeData self, HLRTest_ShapeData thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _HLRTest.Handle_HLRTest_ShapeData_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_HLRTest_ShapeData self, Handle_HLRTest_ShapeData theHandle) -> Handle_HLRTest_ShapeData
        assign(Handle_HLRTest_ShapeData self, HLRTest_ShapeData thePtr) -> Handle_HLRTest_ShapeData
        assign(Handle_HLRTest_ShapeData self, Handle_HLRTest_ShapeData theHandle) -> Handle_HLRTest_ShapeData

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _HLRTest.Handle_HLRTest_ShapeData_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_HLRTest_ShapeData self) -> HLRTest_ShapeData

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _HLRTest.Handle_HLRTest_ShapeData_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_HLRTest_ShapeData self) -> HLRTest_ShapeData

        Member access operator (note non-const)

        :rtype: T *

        """
        return _HLRTest.Handle_HLRTest_ShapeData___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_HLRTest_ShapeData self) -> HLRTest_ShapeData

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _HLRTest.Handle_HLRTest_ShapeData___ref__(self, *args)


    def __hash__(self):
        return _HLRTest.Handle_HLRTest_ShapeData___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _HLRTest.Handle_HLRTest_ShapeData___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _HLRTest.new_Handle_HLRTest_ShapeData(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_HLRTest.Handle_HLRTest_ShapeData_DownCast)
    __swig_destroy__ = _HLRTest.delete_Handle_HLRTest_ShapeData

    def VisibleColor(self, *args):
        """
        VisibleColor(Handle_HLRTest_ShapeData self, Draw_Color CVis)
        VisibleColor(Handle_HLRTest_ShapeData self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _HLRTest.Handle_HLRTest_ShapeData_VisibleColor(self, *args)


    def VisibleOutLineColor(self, *args):
        """
        VisibleOutLineColor(Handle_HLRTest_ShapeData self, Draw_Color COVis)
        VisibleOutLineColor(Handle_HLRTest_ShapeData self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _HLRTest.Handle_HLRTest_ShapeData_VisibleOutLineColor(self, *args)


    def VisibleIsoColor(self, *args):
        """
        VisibleIsoColor(Handle_HLRTest_ShapeData self, Draw_Color CIVis)
        VisibleIsoColor(Handle_HLRTest_ShapeData self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _HLRTest.Handle_HLRTest_ShapeData_VisibleIsoColor(self, *args)


    def HiddenColor(self, *args):
        """
        HiddenColor(Handle_HLRTest_ShapeData self, Draw_Color CHid)
        HiddenColor(Handle_HLRTest_ShapeData self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _HLRTest.Handle_HLRTest_ShapeData_HiddenColor(self, *args)


    def HiddenOutLineColor(self, *args):
        """
        HiddenOutLineColor(Handle_HLRTest_ShapeData self, Draw_Color COHid)
        HiddenOutLineColor(Handle_HLRTest_ShapeData self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _HLRTest.Handle_HLRTest_ShapeData_HiddenOutLineColor(self, *args)


    def HiddenIsoColor(self, *args):
        """
        HiddenIsoColor(Handle_HLRTest_ShapeData self, Draw_Color CIHid)
        HiddenIsoColor(Handle_HLRTest_ShapeData self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _HLRTest.Handle_HLRTest_ShapeData_HiddenIsoColor(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_HLRTest_ShapeData self) -> char const *

        :rtype: const char *

        """
        return _HLRTest.Handle_HLRTest_ShapeData_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRTest.Handle_HLRTest_ShapeData_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRTest.Handle_HLRTest_ShapeData_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_HLRTest_ShapeData self)

        Memory deallocator for transient classes


        """
        return _HLRTest.Handle_HLRTest_ShapeData_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_HLRTest_ShapeData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_HLRTest_ShapeData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTest.Handle_HLRTest_ShapeData_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_HLRTest_ShapeData self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_HLRTest_ShapeData self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTest.Handle_HLRTest_ShapeData_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_HLRTest_ShapeData self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _HLRTest.Handle_HLRTest_ShapeData_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_HLRTest_ShapeData self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRTest.Handle_HLRTest_ShapeData_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_HLRTest_ShapeData self)

        Increments the reference counter of this object


        """
        return _HLRTest.Handle_HLRTest_ShapeData_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_HLRTest_ShapeData self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRTest.Handle_HLRTest_ShapeData_DecrementRefCounter(self, *args)

Handle_HLRTest_ShapeData_swigregister = _HLRTest.Handle_HLRTest_ShapeData_swigregister
Handle_HLRTest_ShapeData_swigregister(Handle_HLRTest_ShapeData)

def Handle_HLRTest_ShapeData_DownCast(thing):
    return _HLRTest.Handle_HLRTest_ShapeData_DownCast(thing)
Handle_HLRTest_ShapeData_DownCast = _HLRTest.Handle_HLRTest_ShapeData_DownCast

class HLRTest_(object):
    """
    This package   is  a test  of  the    Hidden Lines
    algorithms instantiated on the BRep Data Structure
    and using the Draw package to display the results.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def GetProjector(*args):
        """
        GetProjector(Standard_CString & Name, HLRAlgo_Projector P) -> Standard_Boolean

        Get a projector variable
        Returns false if the variable is not a projector

        :type Name: OCC.wrapper.Standard.Standard_CString
        :type P: OCC.wrapper.HLRAlgo.HLRAlgo_Projector
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTest.HLRTest__GetProjector(*args)

    GetProjector = staticmethod(GetProjector)

    def Set(*args):
        """
        Set(Standard_CString const Name, HLRAlgo_Projector P)
        Set(Standard_CString const Name, TopoDS_Shape S)

        Set a OutLiner Variable

        :type Name: OCC.wrapper.Standard.Standard_CString
        :type S: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _HLRTest.HLRTest__Set(*args)

    Set = staticmethod(Set)

    def GetOutLiner(*args):
        """
        GetOutLiner(Standard_CString & Name) -> Handle_HLRTopoBRep_OutLiner

        Get a outliner variable
        Returns a null handle if the variable is not a outliner

        :type Name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.HLRTopoBRep.Handle_HLRTopoBRep_OutLiner

        """
        return _HLRTest.HLRTest__GetOutLiner(*args)

    GetOutLiner = staticmethod(GetOutLiner)

    def Commands(*args):
        """
        Commands(Draw_Interpretor I)

        Defines commands to test the Hidden Line Removal

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _HLRTest.HLRTest__Commands(*args)

    Commands = staticmethod(Commands)

    def __init__(self):
        """
        This package   is  a test  of  the    Hidden Lines
        algorithms instantiated on the BRep Data Structure
        and using the Draw package to display the results.
        """
        this = _HLRTest.new_HLRTest_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _HLRTest.delete_HLRTest_
HLRTest__swigregister = _HLRTest.HLRTest__swigregister
HLRTest__swigregister(HLRTest_)

def HLRTest__GetProjector(*args):
    """
    HLRTest__GetProjector(Standard_CString & Name, HLRAlgo_Projector P) -> Standard_Boolean

    Get a projector variable
    Returns false if the variable is not a projector

    :type Name: OCC.wrapper.Standard.Standard_CString
    :type P: OCC.wrapper.HLRAlgo.HLRAlgo_Projector
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _HLRTest.HLRTest__GetProjector(*args)

def HLRTest__Set(*args):
    """
    Set(Standard_CString const Name, HLRAlgo_Projector P)
    HLRTest__Set(Standard_CString const Name, TopoDS_Shape S)

    Set a OutLiner Variable

    :type Name: OCC.wrapper.Standard.Standard_CString
    :type S: OCC.wrapper.TopoDS.TopoDS_Shape

    """
    return _HLRTest.HLRTest__Set(*args)

def HLRTest__GetOutLiner(*args):
    """
    HLRTest__GetOutLiner(Standard_CString & Name) -> Handle_HLRTopoBRep_OutLiner

    Get a outliner variable
    Returns a null handle if the variable is not a outliner

    :type Name: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.HLRTopoBRep.Handle_HLRTopoBRep_OutLiner

    """
    return _HLRTest.HLRTest__GetOutLiner(*args)

def HLRTest__Commands(*args):
    """
    HLRTest__Commands(Draw_Interpretor I)

    Defines commands to test the Hidden Line Removal

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _HLRTest.HLRTest__Commands(*args)

class Handle_HLRTest_DrawablePolyEdgeTool(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_HLRTest_DrawablePolyEdgeTool self)

        Nullify the handle


        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_HLRTest_DrawablePolyEdgeTool self) -> bool

        Check for being null

        :rtype: bool

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_HLRTest_DrawablePolyEdgeTool self, HLRTest_DrawablePolyEdgeTool thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_HLRTest_DrawablePolyEdgeTool self, Handle_HLRTest_DrawablePolyEdgeTool theHandle) -> Handle_HLRTest_DrawablePolyEdgeTool
        assign(Handle_HLRTest_DrawablePolyEdgeTool self, HLRTest_DrawablePolyEdgeTool thePtr) -> Handle_HLRTest_DrawablePolyEdgeTool
        assign(Handle_HLRTest_DrawablePolyEdgeTool self, Handle_HLRTest_DrawablePolyEdgeTool theHandle) -> Handle_HLRTest_DrawablePolyEdgeTool

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_HLRTest_DrawablePolyEdgeTool self) -> HLRTest_DrawablePolyEdgeTool

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_HLRTest_DrawablePolyEdgeTool self) -> HLRTest_DrawablePolyEdgeTool

        Member access operator (note non-const)

        :rtype: T *

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_HLRTest_DrawablePolyEdgeTool self) -> HLRTest_DrawablePolyEdgeTool

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool___ref__(self, *args)


    def __hash__(self):
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _HLRTest.new_Handle_HLRTest_DrawablePolyEdgeTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_DownCast)
    __swig_destroy__ = _HLRTest.delete_Handle_HLRTest_DrawablePolyEdgeTool

    def Show(self, *args):
        """Show(Handle_HLRTest_DrawablePolyEdgeTool self)"""
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_Show(self, *args)


    def Hide(self, *args):
        """Hide(Handle_HLRTest_DrawablePolyEdgeTool self)"""
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_Hide(self, *args)


    def DisplayRg1Line(self, *args):
        """
        DisplayRg1Line(Handle_HLRTest_DrawablePolyEdgeTool self, Standard_Boolean const B)
        DisplayRg1Line(Handle_HLRTest_DrawablePolyEdgeTool self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_DisplayRg1Line(self, *args)


    def DisplayRgNLine(self, *args):
        """
        DisplayRgNLine(Handle_HLRTest_DrawablePolyEdgeTool self, Standard_Boolean const B)
        DisplayRgNLine(Handle_HLRTest_DrawablePolyEdgeTool self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_DisplayRgNLine(self, *args)


    def DisplayHidden(self, *args):
        """
        DisplayHidden(Handle_HLRTest_DrawablePolyEdgeTool self, Standard_Boolean const B)
        DisplayHidden(Handle_HLRTest_DrawablePolyEdgeTool self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_DisplayHidden(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Handle_HLRTest_DrawablePolyEdgeTool self, Draw_Display D)

        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_DrawOn(self, *args)


    def Debug(self, *args):
        """
        Debug(Handle_HLRTest_DrawablePolyEdgeTool self) -> Standard_Boolean
        Debug(Handle_HLRTest_DrawablePolyEdgeTool self, Standard_Boolean const B)

        :type B: bool

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_Debug(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_HLRTest_DrawablePolyEdgeTool self) -> char const *

        :rtype: const char *

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PickReject(self, *args):
        """
        PickReject(Handle_HLRTest_DrawablePolyEdgeTool self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_HLRTest_DrawablePolyEdgeTool self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_HLRTest_DrawablePolyEdgeTool self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_HLRTest_DrawablePolyEdgeTool self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_Whatis(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_HLRTest_DrawablePolyEdgeTool self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_HLRTest_DrawablePolyEdgeTool self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_HLRTest_DrawablePolyEdgeTool self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_HLRTest_DrawablePolyEdgeTool self) -> Standard_Boolean
        Visible(Handle_HLRTest_DrawablePolyEdgeTool self, Standard_Boolean const V)

        :type V: bool

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_HLRTest_DrawablePolyEdgeTool self) -> Standard_Boolean
        Protected(Handle_HLRTest_DrawablePolyEdgeTool self, Standard_Boolean const P)

        :type P: bool

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_HLRTest_DrawablePolyEdgeTool self) -> Standard_CString
        Name(Handle_HLRTest_DrawablePolyEdgeTool self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_HLRTest_DrawablePolyEdgeTool self)

        Memory deallocator for transient classes


        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_HLRTest_DrawablePolyEdgeTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_HLRTest_DrawablePolyEdgeTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_HLRTest_DrawablePolyEdgeTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_HLRTest_DrawablePolyEdgeTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_HLRTest_DrawablePolyEdgeTool self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_HLRTest_DrawablePolyEdgeTool self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_HLRTest_DrawablePolyEdgeTool self)

        Increments the reference counter of this object


        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_HLRTest_DrawablePolyEdgeTool self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_DecrementRefCounter(self, *args)

Handle_HLRTest_DrawablePolyEdgeTool_swigregister = _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_swigregister
Handle_HLRTest_DrawablePolyEdgeTool_swigregister(Handle_HLRTest_DrawablePolyEdgeTool)

def Handle_HLRTest_DrawablePolyEdgeTool_DownCast(thing):
    return _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_DownCast(thing)
Handle_HLRTest_DrawablePolyEdgeTool_DownCast = _HLRTest.Handle_HLRTest_DrawablePolyEdgeTool_DownCast

class HLRTest_DrawableEdgeTool(Draw.Draw_Drawable3D):
    """Used to display the results."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_HLRTest_DrawableEdgeTool
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_HLRTest_DrawableEdgeTool(self) 
            return h


    def __init__(self, *args):
        """
        __init__(HLRTest_DrawableEdgeTool self, Handle_HLRBRep_Algo Alg, Standard_Boolean const Visible, Standard_Boolean const IsoLine, Standard_Boolean const Rg1Line, Standard_Boolean const RgNLine, Standard_Integer const ViewId) -> HLRTest_DrawableEdgeTool

        :type Alg: OCC.wrapper.HLRBRep.Handle_HLRBRep_Algo
        :type Visible: bool
        :type IsoLine: bool
        :type Rg1Line: bool
        :type RgNLine: bool
        :type ViewId: int

        """
        this = _HLRTest.new_HLRTest_DrawableEdgeTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DrawOn(self, *args):
        """
        DrawOn(HLRTest_DrawableEdgeTool self, Draw_Display D)

        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _HLRTest.HLRTest_DrawableEdgeTool_DrawOn(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _HLRTest.HLRTest_DrawableEdgeTool_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _HLRTest.HLRTest_DrawableEdgeTool_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRTest.HLRTest_DrawableEdgeTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _HLRTest.delete_HLRTest_DrawableEdgeTool
HLRTest_DrawableEdgeTool_swigregister = _HLRTest.HLRTest_DrawableEdgeTool_swigregister
HLRTest_DrawableEdgeTool_swigregister(HLRTest_DrawableEdgeTool)

def HLRTest_DrawableEdgeTool_get_type_name(*args):
    """
    HLRTest_DrawableEdgeTool_get_type_name() -> char const *

    :rtype: const char *

    """
    return _HLRTest.HLRTest_DrawableEdgeTool_get_type_name(*args)

def HLRTest_DrawableEdgeTool_get_type_descriptor(*args):
    """
    HLRTest_DrawableEdgeTool_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _HLRTest.HLRTest_DrawableEdgeTool_get_type_descriptor(*args)

class Handle_HLRTest_DrawableEdgeTool(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_HLRTest_DrawableEdgeTool self)

        Nullify the handle


        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_HLRTest_DrawableEdgeTool self) -> bool

        Check for being null

        :rtype: bool

        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_HLRTest_DrawableEdgeTool self, HLRTest_DrawableEdgeTool thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_HLRTest_DrawableEdgeTool self, Handle_HLRTest_DrawableEdgeTool theHandle) -> Handle_HLRTest_DrawableEdgeTool
        assign(Handle_HLRTest_DrawableEdgeTool self, HLRTest_DrawableEdgeTool thePtr) -> Handle_HLRTest_DrawableEdgeTool
        assign(Handle_HLRTest_DrawableEdgeTool self, Handle_HLRTest_DrawableEdgeTool theHandle) -> Handle_HLRTest_DrawableEdgeTool

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_HLRTest_DrawableEdgeTool self) -> HLRTest_DrawableEdgeTool

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_HLRTest_DrawableEdgeTool self) -> HLRTest_DrawableEdgeTool

        Member access operator (note non-const)

        :rtype: T *

        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_HLRTest_DrawableEdgeTool self) -> HLRTest_DrawableEdgeTool

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool___ref__(self, *args)


    def __hash__(self):
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _HLRTest.Handle_HLRTest_DrawableEdgeTool___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _HLRTest.new_Handle_HLRTest_DrawableEdgeTool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_HLRTest.Handle_HLRTest_DrawableEdgeTool_DownCast)
    __swig_destroy__ = _HLRTest.delete_Handle_HLRTest_DrawableEdgeTool

    def DrawOn(self, *args):
        """
        DrawOn(Handle_HLRTest_DrawableEdgeTool self, Draw_Display D)

        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool_DrawOn(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_HLRTest_DrawableEdgeTool self) -> char const *

        :rtype: const char *

        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRTest.Handle_HLRTest_DrawableEdgeTool_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _HLRTest.Handle_HLRTest_DrawableEdgeTool_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PickReject(self, *args):
        """
        PickReject(Handle_HLRTest_DrawableEdgeTool self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool_PickReject(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_HLRTest_DrawableEdgeTool self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_HLRTest_DrawableEdgeTool self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_HLRTest_DrawableEdgeTool self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool_Whatis(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_HLRTest_DrawableEdgeTool self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_HLRTest_DrawableEdgeTool self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_HLRTest_DrawableEdgeTool self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_HLRTest_DrawableEdgeTool self) -> Standard_Boolean
        Visible(Handle_HLRTest_DrawableEdgeTool self, Standard_Boolean const V)

        :type V: bool

        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_HLRTest_DrawableEdgeTool self) -> Standard_Boolean
        Protected(Handle_HLRTest_DrawableEdgeTool self, Standard_Boolean const P)

        :type P: bool

        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_HLRTest_DrawableEdgeTool self) -> Standard_CString
        Name(Handle_HLRTest_DrawableEdgeTool self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_HLRTest_DrawableEdgeTool self)

        Memory deallocator for transient classes


        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_HLRTest_DrawableEdgeTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_HLRTest_DrawableEdgeTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_HLRTest_DrawableEdgeTool self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_HLRTest_DrawableEdgeTool self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_HLRTest_DrawableEdgeTool self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_HLRTest_DrawableEdgeTool self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_HLRTest_DrawableEdgeTool self)

        Increments the reference counter of this object


        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_HLRTest_DrawableEdgeTool self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _HLRTest.Handle_HLRTest_DrawableEdgeTool_DecrementRefCounter(self, *args)

Handle_HLRTest_DrawableEdgeTool_swigregister = _HLRTest.Handle_HLRTest_DrawableEdgeTool_swigregister
Handle_HLRTest_DrawableEdgeTool_swigregister(Handle_HLRTest_DrawableEdgeTool)

def Handle_HLRTest_DrawableEdgeTool_DownCast(thing):
    return _HLRTest.Handle_HLRTest_DrawableEdgeTool_DownCast(thing)
Handle_HLRTest_DrawableEdgeTool_DownCast = _HLRTest.Handle_HLRTest_DrawableEdgeTool_DownCast



