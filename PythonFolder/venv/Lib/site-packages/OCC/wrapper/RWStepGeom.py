# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_RWStepGeom')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_RWStepGeom')
    _RWStepGeom = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RWStepGeom', [dirname(__file__)])
        except ImportError:
            import _RWStepGeom
            return _RWStepGeom
        try:
            _mod = imp.load_module('_RWStepGeom', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _RWStepGeom = swig_import_helper()
    del swig_import_helper
else:
    import _RWStepGeom
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWStepGeom.delete_SwigPyIterator

    def value(self):
        return _RWStepGeom.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _RWStepGeom.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _RWStepGeom.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _RWStepGeom.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _RWStepGeom.SwigPyIterator_equal(self, x)

    def copy(self):
        return _RWStepGeom.SwigPyIterator_copy(self)

    def next(self):
        return _RWStepGeom.SwigPyIterator_next(self)

    def __next__(self):
        return _RWStepGeom.SwigPyIterator___next__(self)

    def previous(self):
        return _RWStepGeom.SwigPyIterator_previous(self)

    def advance(self, n):
        return _RWStepGeom.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _RWStepGeom.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _RWStepGeom.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _RWStepGeom.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _RWStepGeom.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _RWStepGeom.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _RWStepGeom.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _RWStepGeom.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _RWStepGeom.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_RWStepGeom.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _RWStepGeom.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _RWStepGeom.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RWStepGeom.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _RWStepGeom.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _RWStepGeom.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _RWStepGeom.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _RWStepGeom.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_RWStepGeom.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _RWStepGeom.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _RWStepGeom.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RWStepGeom.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _RWStepGeom.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _RWStepGeom.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _RWStepGeom.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _RWStepGeom.ptr_to_number(item)
ptr_to_number = _RWStepGeom.ptr_to_number

def HashCode(*args):
    return _RWStepGeom.HashCode(*args)
HashCode = _RWStepGeom.HashCode

def ptr_equal(a, b):
    return _RWStepGeom.ptr_equal(a, b)
ptr_equal = _RWStepGeom.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepGeom
else:
    import StepGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepBasic
else:
    import StepBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepData
else:
    import StepData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepRepr
else:
    import StepRepr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepShape
else:
    import StepShape
del _swig_python_version_info
class RWStepGeom_RWPoint(object):
    """Read & Write Module for Point"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWPoint self) -> RWStepGeom_RWPoint

        Read & Write Module for Point
        """
        this = _RWStepGeom.new_RWStepGeom_RWPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWPoint self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_Point ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_Point

        """
        return _RWStepGeom.RWStepGeom_RWPoint_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWPoint self, StepData_StepWriter SW, Handle_StepGeom_Point ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_Point

        """
        return _RWStepGeom.RWStepGeom_RWPoint_WriteStep(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWPoint
RWStepGeom_RWPoint_swigregister = _RWStepGeom.RWStepGeom_RWPoint_swigregister
RWStepGeom_RWPoint_swigregister(RWStepGeom_RWPoint)

class RWStepGeom_RWTrimmedCurve(object):
    """Read & Write Module for TrimmedCurve"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWTrimmedCurve self) -> RWStepGeom_RWTrimmedCurve

        Read & Write Module for TrimmedCurve
        """
        this = _RWStepGeom.new_RWStepGeom_RWTrimmedCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWTrimmedCurve self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_TrimmedCurve ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_TrimmedCurve

        """
        return _RWStepGeom.RWStepGeom_RWTrimmedCurve_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWTrimmedCurve self, StepData_StepWriter SW, Handle_StepGeom_TrimmedCurve ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_TrimmedCurve

        """
        return _RWStepGeom.RWStepGeom_RWTrimmedCurve_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWTrimmedCurve self, Handle_StepGeom_TrimmedCurve ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_TrimmedCurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWTrimmedCurve_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWTrimmedCurve
RWStepGeom_RWTrimmedCurve_swigregister = _RWStepGeom.RWStepGeom_RWTrimmedCurve_swigregister
RWStepGeom_RWTrimmedCurve_swigregister(RWStepGeom_RWTrimmedCurve)

class RWStepGeom_RWQuasiUniformCurve(object):
    """Read & Write Module for QuasiUniformCurve"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWQuasiUniformCurve self) -> RWStepGeom_RWQuasiUniformCurve

        Read & Write Module for QuasiUniformCurve
        """
        this = _RWStepGeom.new_RWStepGeom_RWQuasiUniformCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWQuasiUniformCurve self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_QuasiUniformCurve ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_QuasiUniformCurve

        """
        return _RWStepGeom.RWStepGeom_RWQuasiUniformCurve_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWQuasiUniformCurve self, StepData_StepWriter SW, Handle_StepGeom_QuasiUniformCurve ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_QuasiUniformCurve

        """
        return _RWStepGeom.RWStepGeom_RWQuasiUniformCurve_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWQuasiUniformCurve self, Handle_StepGeom_QuasiUniformCurve ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_QuasiUniformCurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWQuasiUniformCurve_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWQuasiUniformCurve
RWStepGeom_RWQuasiUniformCurve_swigregister = _RWStepGeom.RWStepGeom_RWQuasiUniformCurve_swigregister
RWStepGeom_RWQuasiUniformCurve_swigregister(RWStepGeom_RWQuasiUniformCurve)

class RWStepGeom_RWUniformCurve(object):
    """Read & Write Module for UniformCurve"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWUniformCurve self) -> RWStepGeom_RWUniformCurve

        Read & Write Module for UniformCurve
        """
        this = _RWStepGeom.new_RWStepGeom_RWUniformCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWUniformCurve self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_UniformCurve ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_UniformCurve

        """
        return _RWStepGeom.RWStepGeom_RWUniformCurve_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWUniformCurve self, StepData_StepWriter SW, Handle_StepGeom_UniformCurve ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_UniformCurve

        """
        return _RWStepGeom.RWStepGeom_RWUniformCurve_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWUniformCurve self, Handle_StepGeom_UniformCurve ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_UniformCurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWUniformCurve_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWUniformCurve
RWStepGeom_RWUniformCurve_swigregister = _RWStepGeom.RWStepGeom_RWUniformCurve_swigregister
RWStepGeom_RWUniformCurve_swigregister(RWStepGeom_RWUniformCurve)

class RWStepGeom_RWGeometricRepresentationContextAndGlobalUnitAssignedContext(object):
    """Read & Write Module for GeometricRepresentationContextAndGlobalUnitAssignedContext"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWGeometricRepresentationContextAndGlobalUnitAssignedContext self) -> RWStepGeom_RWGeometricRepresentationContextAndGlobalUnitAssignedContext

        Read & Write Module for GeometricRepresentationContextAndGlobalUnitAssignedContext
        """
        this = _RWStepGeom.new_RWStepGeom_RWGeometricRepresentationContextAndGlobalUnitAssignedContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWGeometricRepresentationContextAndGlobalUnitAssignedContext self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext

        """
        return _RWStepGeom.RWStepGeom_RWGeometricRepresentationContextAndGlobalUnitAssignedContext_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWGeometricRepresentationContextAndGlobalUnitAssignedContext self, StepData_StepWriter SW, Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext

        """
        return _RWStepGeom.RWStepGeom_RWGeometricRepresentationContextAndGlobalUnitAssignedContext_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWGeometricRepresentationContextAndGlobalUnitAssignedContext self, Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_GeometricRepresentationContextAndGlobalUnitAssignedContext
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWGeometricRepresentationContextAndGlobalUnitAssignedContext_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWGeometricRepresentationContextAndGlobalUnitAssignedContext
RWStepGeom_RWGeometricRepresentationContextAndGlobalUnitAssignedContext_swigregister = _RWStepGeom.RWStepGeom_RWGeometricRepresentationContextAndGlobalUnitAssignedContext_swigregister
RWStepGeom_RWGeometricRepresentationContextAndGlobalUnitAssignedContext_swigregister(RWStepGeom_RWGeometricRepresentationContextAndGlobalUnitAssignedContext)

class RWStepGeom_RWCurve(object):
    """Read & Write Module for Curve"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWCurve self) -> RWStepGeom_RWCurve

        Read & Write Module for Curve
        """
        this = _RWStepGeom.new_RWStepGeom_RWCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWCurve self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_Curve ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_Curve

        """
        return _RWStepGeom.RWStepGeom_RWCurve_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWCurve self, StepData_StepWriter SW, Handle_StepGeom_Curve ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_Curve

        """
        return _RWStepGeom.RWStepGeom_RWCurve_WriteStep(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWCurve
RWStepGeom_RWCurve_swigregister = _RWStepGeom.RWStepGeom_RWCurve_swigregister
RWStepGeom_RWCurve_swigregister(RWStepGeom_RWCurve)

class RWStepGeom_RWBSplineSurface(object):
    """Read & Write Module for BSplineSurface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWBSplineSurface self) -> RWStepGeom_RWBSplineSurface

        Read & Write Module for BSplineSurface
        """
        this = _RWStepGeom.new_RWStepGeom_RWBSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWBSplineSurface self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_BSplineSurface ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineSurface

        """
        return _RWStepGeom.RWStepGeom_RWBSplineSurface_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWBSplineSurface self, StepData_StepWriter SW, Handle_StepGeom_BSplineSurface ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineSurface

        """
        return _RWStepGeom.RWStepGeom_RWBSplineSurface_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWBSplineSurface self, Handle_StepGeom_BSplineSurface ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWBSplineSurface_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWBSplineSurface
RWStepGeom_RWBSplineSurface_swigregister = _RWStepGeom.RWStepGeom_RWBSplineSurface_swigregister
RWStepGeom_RWBSplineSurface_swigregister(RWStepGeom_RWBSplineSurface)

class RWStepGeom_RWOffsetSurface(object):
    """Read & Write Module for OffsetSurface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWOffsetSurface self) -> RWStepGeom_RWOffsetSurface

        Read & Write Module for OffsetSurface
        """
        this = _RWStepGeom.new_RWStepGeom_RWOffsetSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWOffsetSurface self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_OffsetSurface ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_OffsetSurface

        """
        return _RWStepGeom.RWStepGeom_RWOffsetSurface_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWOffsetSurface self, StepData_StepWriter SW, Handle_StepGeom_OffsetSurface ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_OffsetSurface

        """
        return _RWStepGeom.RWStepGeom_RWOffsetSurface_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWOffsetSurface self, Handle_StepGeom_OffsetSurface ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_OffsetSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWOffsetSurface_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWOffsetSurface
RWStepGeom_RWOffsetSurface_swigregister = _RWStepGeom.RWStepGeom_RWOffsetSurface_swigregister
RWStepGeom_RWOffsetSurface_swigregister(RWStepGeom_RWOffsetSurface)

class RWStepGeom_RWQuasiUniformCurveAndRationalBSplineCurve(object):
    """Read & Write Module for QuasiUniformCurveAndRationalBSplineCurve"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWQuasiUniformCurveAndRationalBSplineCurve self) -> RWStepGeom_RWQuasiUniformCurveAndRationalBSplineCurve

        Read & Write Module for QuasiUniformCurveAndRationalBSplineCurve
        """
        this = _RWStepGeom.new_RWStepGeom_RWQuasiUniformCurveAndRationalBSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWQuasiUniformCurveAndRationalBSplineCurve self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve

        """
        return _RWStepGeom.RWStepGeom_RWQuasiUniformCurveAndRationalBSplineCurve_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWQuasiUniformCurveAndRationalBSplineCurve self, StepData_StepWriter SW, Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve

        """
        return _RWStepGeom.RWStepGeom_RWQuasiUniformCurveAndRationalBSplineCurve_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWQuasiUniformCurveAndRationalBSplineCurve self, Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_QuasiUniformCurveAndRationalBSplineCurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWQuasiUniformCurveAndRationalBSplineCurve_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWQuasiUniformCurveAndRationalBSplineCurve
RWStepGeom_RWQuasiUniformCurveAndRationalBSplineCurve_swigregister = _RWStepGeom.RWStepGeom_RWQuasiUniformCurveAndRationalBSplineCurve_swigregister
RWStepGeom_RWQuasiUniformCurveAndRationalBSplineCurve_swigregister(RWStepGeom_RWQuasiUniformCurveAndRationalBSplineCurve)

class RWStepGeom_RWCurveReplica(object):
    """Read & Write Module for CurveReplica"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWCurveReplica self) -> RWStepGeom_RWCurveReplica

        Read & Write Module for CurveReplica
        """
        this = _RWStepGeom.new_RWStepGeom_RWCurveReplica(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWCurveReplica self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_CurveReplica ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_CurveReplica

        """
        return _RWStepGeom.RWStepGeom_RWCurveReplica_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWCurveReplica self, StepData_StepWriter SW, Handle_StepGeom_CurveReplica ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_CurveReplica

        """
        return _RWStepGeom.RWStepGeom_RWCurveReplica_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWCurveReplica self, Handle_StepGeom_CurveReplica ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_CurveReplica
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWCurveReplica_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWCurveReplica
RWStepGeom_RWCurveReplica_swigregister = _RWStepGeom.RWStepGeom_RWCurveReplica_swigregister
RWStepGeom_RWCurveReplica_swigregister(RWStepGeom_RWCurveReplica)

class RWStepGeom_RWCompositeCurveOnSurface(object):
    """Read & Write Module for CompositeCurveOnSurface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWCompositeCurveOnSurface self) -> RWStepGeom_RWCompositeCurveOnSurface

        Read & Write Module for CompositeCurveOnSurface
        """
        this = _RWStepGeom.new_RWStepGeom_RWCompositeCurveOnSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWCompositeCurveOnSurface self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_CompositeCurveOnSurface ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_CompositeCurveOnSurface

        """
        return _RWStepGeom.RWStepGeom_RWCompositeCurveOnSurface_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWCompositeCurveOnSurface self, StepData_StepWriter SW, Handle_StepGeom_CompositeCurveOnSurface ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_CompositeCurveOnSurface

        """
        return _RWStepGeom.RWStepGeom_RWCompositeCurveOnSurface_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWCompositeCurveOnSurface self, Handle_StepGeom_CompositeCurveOnSurface ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_CompositeCurveOnSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWCompositeCurveOnSurface_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWCompositeCurveOnSurface
RWStepGeom_RWCompositeCurveOnSurface_swigregister = _RWStepGeom.RWStepGeom_RWCompositeCurveOnSurface_swigregister
RWStepGeom_RWCompositeCurveOnSurface_swigregister(RWStepGeom_RWCompositeCurveOnSurface)

class RWStepGeom_RWConic(object):
    """Read & Write Module for Conic"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWConic self) -> RWStepGeom_RWConic

        Read & Write Module for Conic
        """
        this = _RWStepGeom.new_RWStepGeom_RWConic(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWConic self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_Conic ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Conic

        """
        return _RWStepGeom.RWStepGeom_RWConic_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWConic self, StepData_StepWriter SW, Handle_StepGeom_Conic ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Conic

        """
        return _RWStepGeom.RWStepGeom_RWConic_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWConic self, Handle_StepGeom_Conic ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Conic
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWConic_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWConic
RWStepGeom_RWConic_swigregister = _RWStepGeom.RWStepGeom_RWConic_swigregister
RWStepGeom_RWConic_swigregister(RWStepGeom_RWConic)

class RWStepGeom_RWGeometricRepresentationContext(object):
    """Read & Write Module for GeometricRepresentationContext"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWGeometricRepresentationContext self) -> RWStepGeom_RWGeometricRepresentationContext

        Read & Write Module for GeometricRepresentationContext
        """
        this = _RWStepGeom.new_RWStepGeom_RWGeometricRepresentationContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWGeometricRepresentationContext self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_GeometricRepresentationContext ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_GeometricRepresentationContext

        """
        return _RWStepGeom.RWStepGeom_RWGeometricRepresentationContext_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWGeometricRepresentationContext self, StepData_StepWriter SW, Handle_StepGeom_GeometricRepresentationContext ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_GeometricRepresentationContext

        """
        return _RWStepGeom.RWStepGeom_RWGeometricRepresentationContext_WriteStep(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWGeometricRepresentationContext
RWStepGeom_RWGeometricRepresentationContext_swigregister = _RWStepGeom.RWStepGeom_RWGeometricRepresentationContext_swigregister
RWStepGeom_RWGeometricRepresentationContext_swigregister(RWStepGeom_RWGeometricRepresentationContext)

class RWStepGeom_RWQuasiUniformSurfaceAndRationalBSplineSurface(object):
    """Read & Write Module for QuasiUniformSurfaceAndRationalBSplineSurface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWQuasiUniformSurfaceAndRationalBSplineSurface self) -> RWStepGeom_RWQuasiUniformSurfaceAndRationalBSplineSurface

        Read & Write Module for QuasiUniformSurfaceAndRationalBSplineSurface
        """
        this = _RWStepGeom.new_RWStepGeom_RWQuasiUniformSurfaceAndRationalBSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWQuasiUniformSurfaceAndRationalBSplineSurface self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface

        """
        return _RWStepGeom.RWStepGeom_RWQuasiUniformSurfaceAndRationalBSplineSurface_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWQuasiUniformSurfaceAndRationalBSplineSurface self, StepData_StepWriter SW, Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface

        """
        return _RWStepGeom.RWStepGeom_RWQuasiUniformSurfaceAndRationalBSplineSurface_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWQuasiUniformSurfaceAndRationalBSplineSurface self, Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_QuasiUniformSurfaceAndRationalBSplineSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWQuasiUniformSurfaceAndRationalBSplineSurface_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWQuasiUniformSurfaceAndRationalBSplineSurface
RWStepGeom_RWQuasiUniformSurfaceAndRationalBSplineSurface_swigregister = _RWStepGeom.RWStepGeom_RWQuasiUniformSurfaceAndRationalBSplineSurface_swigregister
RWStepGeom_RWQuasiUniformSurfaceAndRationalBSplineSurface_swigregister(RWStepGeom_RWQuasiUniformSurfaceAndRationalBSplineSurface)

class RWStepGeom_RWPointReplica(object):
    """Read & Write Module for PointReplica"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWPointReplica self) -> RWStepGeom_RWPointReplica

        Read & Write Module for PointReplica
        """
        this = _RWStepGeom.new_RWStepGeom_RWPointReplica(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWPointReplica self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_PointReplica ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_PointReplica

        """
        return _RWStepGeom.RWStepGeom_RWPointReplica_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWPointReplica self, StepData_StepWriter SW, Handle_StepGeom_PointReplica ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_PointReplica

        """
        return _RWStepGeom.RWStepGeom_RWPointReplica_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWPointReplica self, Handle_StepGeom_PointReplica ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_PointReplica
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWPointReplica_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWPointReplica
RWStepGeom_RWPointReplica_swigregister = _RWStepGeom.RWStepGeom_RWPointReplica_swigregister
RWStepGeom_RWPointReplica_swigregister(RWStepGeom_RWPointReplica)

class RWStepGeom_RWUniformSurfaceAndRationalBSplineSurface(object):
    """Read & Write Module for UniformSurfaceAndRationalBSplineSurface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWUniformSurfaceAndRationalBSplineSurface self) -> RWStepGeom_RWUniformSurfaceAndRationalBSplineSurface

        Read & Write Module for UniformSurfaceAndRationalBSplineSurface
        """
        this = _RWStepGeom.new_RWStepGeom_RWUniformSurfaceAndRationalBSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWUniformSurfaceAndRationalBSplineSurface self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface

        """
        return _RWStepGeom.RWStepGeom_RWUniformSurfaceAndRationalBSplineSurface_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWUniformSurfaceAndRationalBSplineSurface self, StepData_StepWriter SW, Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface

        """
        return _RWStepGeom.RWStepGeom_RWUniformSurfaceAndRationalBSplineSurface_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWUniformSurfaceAndRationalBSplineSurface self, Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_UniformSurfaceAndRationalBSplineSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWUniformSurfaceAndRationalBSplineSurface_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWUniformSurfaceAndRationalBSplineSurface
RWStepGeom_RWUniformSurfaceAndRationalBSplineSurface_swigregister = _RWStepGeom.RWStepGeom_RWUniformSurfaceAndRationalBSplineSurface_swigregister
RWStepGeom_RWUniformSurfaceAndRationalBSplineSurface_swigregister(RWStepGeom_RWUniformSurfaceAndRationalBSplineSurface)

class RWStepGeom_RWOffsetCurve3d(object):
    """Read & Write Module for OffsetCurve3d"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWOffsetCurve3d self) -> RWStepGeom_RWOffsetCurve3d

        Read & Write Module for OffsetCurve3d
        """
        this = _RWStepGeom.new_RWStepGeom_RWOffsetCurve3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWOffsetCurve3d self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_OffsetCurve3d ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_OffsetCurve3d

        """
        return _RWStepGeom.RWStepGeom_RWOffsetCurve3d_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWOffsetCurve3d self, StepData_StepWriter SW, Handle_StepGeom_OffsetCurve3d ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_OffsetCurve3d

        """
        return _RWStepGeom.RWStepGeom_RWOffsetCurve3d_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWOffsetCurve3d self, Handle_StepGeom_OffsetCurve3d ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_OffsetCurve3d
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWOffsetCurve3d_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWOffsetCurve3d
RWStepGeom_RWOffsetCurve3d_swigregister = _RWStepGeom.RWStepGeom_RWOffsetCurve3d_swigregister
RWStepGeom_RWOffsetCurve3d_swigregister(RWStepGeom_RWOffsetCurve3d)

class RWStepGeom_RWCartesianTransformationOperator3d(object):
    """Read & Write Module for CartesianTransformationOperator3d"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWCartesianTransformationOperator3d self) -> RWStepGeom_RWCartesianTransformationOperator3d

        Read & Write Module for CartesianTransformationOperator3d
        """
        this = _RWStepGeom.new_RWStepGeom_RWCartesianTransformationOperator3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWCartesianTransformationOperator3d self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_CartesianTransformationOperator3d ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_CartesianTransformationOperator3d

        """
        return _RWStepGeom.RWStepGeom_RWCartesianTransformationOperator3d_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWCartesianTransformationOperator3d self, StepData_StepWriter SW, Handle_StepGeom_CartesianTransformationOperator3d ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_CartesianTransformationOperator3d

        """
        return _RWStepGeom.RWStepGeom_RWCartesianTransformationOperator3d_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWCartesianTransformationOperator3d self, Handle_StepGeom_CartesianTransformationOperator3d ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_CartesianTransformationOperator3d
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWCartesianTransformationOperator3d_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWCartesianTransformationOperator3d
RWStepGeom_RWCartesianTransformationOperator3d_swigregister = _RWStepGeom.RWStepGeom_RWCartesianTransformationOperator3d_swigregister
RWStepGeom_RWCartesianTransformationOperator3d_swigregister(RWStepGeom_RWCartesianTransformationOperator3d)

class RWStepGeom_RWLine(object):
    """Read & Write Module for Line"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWLine self) -> RWStepGeom_RWLine

        Read & Write Module for Line
        """
        this = _RWStepGeom.new_RWStepGeom_RWLine(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWLine self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_Line ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Line

        """
        return _RWStepGeom.RWStepGeom_RWLine_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWLine self, StepData_StepWriter SW, Handle_StepGeom_Line ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Line

        """
        return _RWStepGeom.RWStepGeom_RWLine_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWLine self, Handle_StepGeom_Line ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Line
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWLine_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWLine
RWStepGeom_RWLine_swigregister = _RWStepGeom.RWStepGeom_RWLine_swigregister
RWStepGeom_RWLine_swigregister(RWStepGeom_RWLine)

class RWStepGeom_RWRectangularTrimmedSurface(object):
    """Read & Write Module for RectangularTrimmedSurface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWRectangularTrimmedSurface self) -> RWStepGeom_RWRectangularTrimmedSurface

        Read & Write Module for RectangularTrimmedSurface
        """
        this = _RWStepGeom.new_RWStepGeom_RWRectangularTrimmedSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWRectangularTrimmedSurface self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_RectangularTrimmedSurface ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_RectangularTrimmedSurface

        """
        return _RWStepGeom.RWStepGeom_RWRectangularTrimmedSurface_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWRectangularTrimmedSurface self, StepData_StepWriter SW, Handle_StepGeom_RectangularTrimmedSurface ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_RectangularTrimmedSurface

        """
        return _RWStepGeom.RWStepGeom_RWRectangularTrimmedSurface_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWRectangularTrimmedSurface self, Handle_StepGeom_RectangularTrimmedSurface ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_RectangularTrimmedSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWRectangularTrimmedSurface_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWRectangularTrimmedSurface
RWStepGeom_RWRectangularTrimmedSurface_swigregister = _RWStepGeom.RWStepGeom_RWRectangularTrimmedSurface_swigregister
RWStepGeom_RWRectangularTrimmedSurface_swigregister(RWStepGeom_RWRectangularTrimmedSurface)

class RWStepGeom_RWPolyline(object):
    """Read & Write Module for Polyline"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWPolyline self) -> RWStepGeom_RWPolyline

        Read & Write Module for Polyline
        """
        this = _RWStepGeom.new_RWStepGeom_RWPolyline(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWPolyline self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_Polyline ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Polyline

        """
        return _RWStepGeom.RWStepGeom_RWPolyline_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWPolyline self, StepData_StepWriter SW, Handle_StepGeom_Polyline ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Polyline

        """
        return _RWStepGeom.RWStepGeom_RWPolyline_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWPolyline self, Handle_StepGeom_Polyline ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Polyline
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWPolyline_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWPolyline
RWStepGeom_RWPolyline_swigregister = _RWStepGeom.RWStepGeom_RWPolyline_swigregister
RWStepGeom_RWPolyline_swigregister(RWStepGeom_RWPolyline)

class RWStepGeom_RWCompositeCurve(object):
    """Read & Write Module for CompositeCurve"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWCompositeCurve self) -> RWStepGeom_RWCompositeCurve

        Read & Write Module for CompositeCurve
        """
        this = _RWStepGeom.new_RWStepGeom_RWCompositeCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWCompositeCurve self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_CompositeCurve ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_CompositeCurve

        """
        return _RWStepGeom.RWStepGeom_RWCompositeCurve_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWCompositeCurve self, StepData_StepWriter SW, Handle_StepGeom_CompositeCurve ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_CompositeCurve

        """
        return _RWStepGeom.RWStepGeom_RWCompositeCurve_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWCompositeCurve self, Handle_StepGeom_CompositeCurve ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_CompositeCurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWCompositeCurve_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWCompositeCurve
RWStepGeom_RWCompositeCurve_swigregister = _RWStepGeom.RWStepGeom_RWCompositeCurve_swigregister
RWStepGeom_RWCompositeCurve_swigregister(RWStepGeom_RWCompositeCurve)

class RWStepGeom_RWSurfacePatch(object):
    """Read & Write Module for SurfacePatch"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWSurfacePatch self) -> RWStepGeom_RWSurfacePatch

        Read & Write Module for SurfacePatch
        """
        this = _RWStepGeom.new_RWStepGeom_RWSurfacePatch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWSurfacePatch self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_SurfacePatch ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SurfacePatch

        """
        return _RWStepGeom.RWStepGeom_RWSurfacePatch_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWSurfacePatch self, StepData_StepWriter SW, Handle_StepGeom_SurfacePatch ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SurfacePatch

        """
        return _RWStepGeom.RWStepGeom_RWSurfacePatch_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWSurfacePatch self, Handle_StepGeom_SurfacePatch ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SurfacePatch
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWSurfacePatch_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWSurfacePatch
RWStepGeom_RWSurfacePatch_swigregister = _RWStepGeom.RWStepGeom_RWSurfacePatch_swigregister
RWStepGeom_RWSurfacePatch_swigregister(RWStepGeom_RWSurfacePatch)

class RWStepGeom_RWDegenerateToroidalSurface(object):
    """Read & Write Module for DegenerateToroidalSurface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWDegenerateToroidalSurface self) -> RWStepGeom_RWDegenerateToroidalSurface

        Read & Write Module for DegenerateToroidalSurface
        """
        this = _RWStepGeom.new_RWStepGeom_RWDegenerateToroidalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWDegenerateToroidalSurface self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_DegenerateToroidalSurface ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_DegenerateToroidalSurface

        """
        return _RWStepGeom.RWStepGeom_RWDegenerateToroidalSurface_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWDegenerateToroidalSurface self, StepData_StepWriter SW, Handle_StepGeom_DegenerateToroidalSurface ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_DegenerateToroidalSurface

        """
        return _RWStepGeom.RWStepGeom_RWDegenerateToroidalSurface_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWDegenerateToroidalSurface self, Handle_StepGeom_DegenerateToroidalSurface ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_DegenerateToroidalSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWDegenerateToroidalSurface_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWDegenerateToroidalSurface
RWStepGeom_RWDegenerateToroidalSurface_swigregister = _RWStepGeom.RWStepGeom_RWDegenerateToroidalSurface_swigregister
RWStepGeom_RWDegenerateToroidalSurface_swigregister(RWStepGeom_RWDegenerateToroidalSurface)

class RWStepGeom_RWRationalBSplineCurve(object):
    """
    Read & Write Module for RationalBSplineCurve
    Check added by CKY , 7-OCT-1996
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWRationalBSplineCurve self) -> RWStepGeom_RWRationalBSplineCurve

        Read & Write Module for RationalBSplineCurve
        Check added by CKY , 7-OCT-1996
        """
        this = _RWStepGeom.new_RWStepGeom_RWRationalBSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWRationalBSplineCurve self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_RationalBSplineCurve ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineCurve

        """
        return _RWStepGeom.RWStepGeom_RWRationalBSplineCurve_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWRationalBSplineCurve self, StepData_StepWriter SW, Handle_StepGeom_RationalBSplineCurve ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineCurve

        """
        return _RWStepGeom.RWStepGeom_RWRationalBSplineCurve_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWRationalBSplineCurve self, Handle_StepGeom_RationalBSplineCurve ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineCurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWRationalBSplineCurve_Share(self, *args)


    def Check(self, *args):
        """
        Check(RWStepGeom_RWRationalBSplineCurve self, Handle_StepGeom_RationalBSplineCurve ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineCurve
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _RWStepGeom.RWStepGeom_RWRationalBSplineCurve_Check(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWRationalBSplineCurve
RWStepGeom_RWRationalBSplineCurve_swigregister = _RWStepGeom.RWStepGeom_RWRationalBSplineCurve_swigregister
RWStepGeom_RWRationalBSplineCurve_swigregister(RWStepGeom_RWRationalBSplineCurve)

class RWStepGeom_RWAxis1Placement(object):
    """Read & Write Module for Axis1Placement"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWAxis1Placement self) -> RWStepGeom_RWAxis1Placement

        Read & Write Module for Axis1Placement
        """
        this = _RWStepGeom.new_RWStepGeom_RWAxis1Placement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWAxis1Placement self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_Axis1Placement ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_Axis1Placement

        """
        return _RWStepGeom.RWStepGeom_RWAxis1Placement_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWAxis1Placement self, StepData_StepWriter SW, Handle_StepGeom_Axis1Placement ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_Axis1Placement

        """
        return _RWStepGeom.RWStepGeom_RWAxis1Placement_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWAxis1Placement self, Handle_StepGeom_Axis1Placement ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_Axis1Placement
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWAxis1Placement_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWAxis1Placement
RWStepGeom_RWAxis1Placement_swigregister = _RWStepGeom.RWStepGeom_RWAxis1Placement_swigregister
RWStepGeom_RWAxis1Placement_swigregister(RWStepGeom_RWAxis1Placement)

class RWStepGeom_RWUniformCurveAndRationalBSplineCurve(object):
    """Read & Write Module for UniformCurveAndRationalBSplineCurve"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWUniformCurveAndRationalBSplineCurve self) -> RWStepGeom_RWUniformCurveAndRationalBSplineCurve

        Read & Write Module for UniformCurveAndRationalBSplineCurve
        """
        this = _RWStepGeom.new_RWStepGeom_RWUniformCurveAndRationalBSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWUniformCurveAndRationalBSplineCurve self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_UniformCurveAndRationalBSplineCurve ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve

        """
        return _RWStepGeom.RWStepGeom_RWUniformCurveAndRationalBSplineCurve_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWUniformCurveAndRationalBSplineCurve self, StepData_StepWriter SW, Handle_StepGeom_UniformCurveAndRationalBSplineCurve ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve

        """
        return _RWStepGeom.RWStepGeom_RWUniformCurveAndRationalBSplineCurve_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWUniformCurveAndRationalBSplineCurve self, Handle_StepGeom_UniformCurveAndRationalBSplineCurve ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_UniformCurveAndRationalBSplineCurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWUniformCurveAndRationalBSplineCurve_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWUniformCurveAndRationalBSplineCurve
RWStepGeom_RWUniformCurveAndRationalBSplineCurve_swigregister = _RWStepGeom.RWStepGeom_RWUniformCurveAndRationalBSplineCurve_swigregister
RWStepGeom_RWUniformCurveAndRationalBSplineCurve_swigregister(RWStepGeom_RWUniformCurveAndRationalBSplineCurve)

class RWStepGeom_RWGeometricRepresentationItem(object):
    """Read & Write Module for GeometricRepresentationItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWGeometricRepresentationItem self) -> RWStepGeom_RWGeometricRepresentationItem

        Read & Write Module for GeometricRepresentationItem
        """
        this = _RWStepGeom.new_RWStepGeom_RWGeometricRepresentationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWGeometricRepresentationItem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_GeometricRepresentationItem ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_GeometricRepresentationItem

        """
        return _RWStepGeom.RWStepGeom_RWGeometricRepresentationItem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWGeometricRepresentationItem self, StepData_StepWriter SW, Handle_StepGeom_GeometricRepresentationItem ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_GeometricRepresentationItem

        """
        return _RWStepGeom.RWStepGeom_RWGeometricRepresentationItem_WriteStep(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWGeometricRepresentationItem
RWStepGeom_RWGeometricRepresentationItem_swigregister = _RWStepGeom.RWStepGeom_RWGeometricRepresentationItem_swigregister
RWStepGeom_RWGeometricRepresentationItem_swigregister(RWStepGeom_RWGeometricRepresentationItem)

class RWStepGeom_RWCircle(object):
    """Read & Write Module for Circle"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWCircle self) -> RWStepGeom_RWCircle

        Read & Write Module for Circle
        """
        this = _RWStepGeom.new_RWStepGeom_RWCircle(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWCircle self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_Circle ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Circle

        """
        return _RWStepGeom.RWStepGeom_RWCircle_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWCircle self, StepData_StepWriter SW, Handle_StepGeom_Circle ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Circle

        """
        return _RWStepGeom.RWStepGeom_RWCircle_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWCircle self, Handle_StepGeom_Circle ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Circle
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWCircle_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWCircle
RWStepGeom_RWCircle_swigregister = _RWStepGeom.RWStepGeom_RWCircle_swigregister
RWStepGeom_RWCircle_swigregister(RWStepGeom_RWCircle)

class RWStepGeom_RWIntersectionCurve(object):
    """Read & Write Module for IntersectionCurve"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWIntersectionCurve self) -> RWStepGeom_RWIntersectionCurve

        Read & Write Module for IntersectionCurve
        """
        this = _RWStepGeom.new_RWStepGeom_RWIntersectionCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWIntersectionCurve self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_IntersectionCurve ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_IntersectionCurve

        """
        return _RWStepGeom.RWStepGeom_RWIntersectionCurve_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWIntersectionCurve self, StepData_StepWriter SW, Handle_StepGeom_IntersectionCurve ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_IntersectionCurve

        """
        return _RWStepGeom.RWStepGeom_RWIntersectionCurve_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWIntersectionCurve self, Handle_StepGeom_IntersectionCurve ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_IntersectionCurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWIntersectionCurve_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWIntersectionCurve
RWStepGeom_RWIntersectionCurve_swigregister = _RWStepGeom.RWStepGeom_RWIntersectionCurve_swigregister
RWStepGeom_RWIntersectionCurve_swigregister(RWStepGeom_RWIntersectionCurve)

class RWStepGeom_RWQuasiUniformSurface(object):
    """Read & Write Module for QuasiUniformSurface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWQuasiUniformSurface self) -> RWStepGeom_RWQuasiUniformSurface

        Read & Write Module for QuasiUniformSurface
        """
        this = _RWStepGeom.new_RWStepGeom_RWQuasiUniformSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWQuasiUniformSurface self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_QuasiUniformSurface ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_QuasiUniformSurface

        """
        return _RWStepGeom.RWStepGeom_RWQuasiUniformSurface_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWQuasiUniformSurface self, StepData_StepWriter SW, Handle_StepGeom_QuasiUniformSurface ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_QuasiUniformSurface

        """
        return _RWStepGeom.RWStepGeom_RWQuasiUniformSurface_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWQuasiUniformSurface self, Handle_StepGeom_QuasiUniformSurface ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_QuasiUniformSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWQuasiUniformSurface_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWQuasiUniformSurface
RWStepGeom_RWQuasiUniformSurface_swigregister = _RWStepGeom.RWStepGeom_RWQuasiUniformSurface_swigregister
RWStepGeom_RWQuasiUniformSurface_swigregister(RWStepGeom_RWQuasiUniformSurface)

class RWStepGeom_RWBezierCurveAndRationalBSplineCurve(object):
    """Read & Write Module for BezierCurveAndRationalBSplineCurve"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWBezierCurveAndRationalBSplineCurve self) -> RWStepGeom_RWBezierCurveAndRationalBSplineCurve

        Read & Write Module for BezierCurveAndRationalBSplineCurve
        """
        this = _RWStepGeom.new_RWStepGeom_RWBezierCurveAndRationalBSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWBezierCurveAndRationalBSplineCurve self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_BezierCurveAndRationalBSplineCurve ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve

        """
        return _RWStepGeom.RWStepGeom_RWBezierCurveAndRationalBSplineCurve_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWBezierCurveAndRationalBSplineCurve self, StepData_StepWriter SW, Handle_StepGeom_BezierCurveAndRationalBSplineCurve ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve

        """
        return _RWStepGeom.RWStepGeom_RWBezierCurveAndRationalBSplineCurve_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWBezierCurveAndRationalBSplineCurve self, Handle_StepGeom_BezierCurveAndRationalBSplineCurve ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BezierCurveAndRationalBSplineCurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWBezierCurveAndRationalBSplineCurve_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWBezierCurveAndRationalBSplineCurve
RWStepGeom_RWBezierCurveAndRationalBSplineCurve_swigregister = _RWStepGeom.RWStepGeom_RWBezierCurveAndRationalBSplineCurve_swigregister
RWStepGeom_RWBezierCurveAndRationalBSplineCurve_swigregister(RWStepGeom_RWBezierCurveAndRationalBSplineCurve)

class RWStepGeom_RWBoundaryCurve(object):
    """Read & Write Module for BoundaryCurve"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWBoundaryCurve self) -> RWStepGeom_RWBoundaryCurve

        Read & Write Module for BoundaryCurve
        """
        this = _RWStepGeom.new_RWStepGeom_RWBoundaryCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWBoundaryCurve self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_BoundaryCurve ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BoundaryCurve

        """
        return _RWStepGeom.RWStepGeom_RWBoundaryCurve_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWBoundaryCurve self, StepData_StepWriter SW, Handle_StepGeom_BoundaryCurve ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BoundaryCurve

        """
        return _RWStepGeom.RWStepGeom_RWBoundaryCurve_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWBoundaryCurve self, Handle_StepGeom_BoundaryCurve ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BoundaryCurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWBoundaryCurve_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWBoundaryCurve
RWStepGeom_RWBoundaryCurve_swigregister = _RWStepGeom.RWStepGeom_RWBoundaryCurve_swigregister
RWStepGeom_RWBoundaryCurve_swigregister(RWStepGeom_RWBoundaryCurve)

class RWStepGeom_RWBSplineSurfaceWithKnotsAndRationalBSplineSurface(object):
    """
    Read & Write Module for BSplineSurfaceWithKnotsAndRationalBSplineSurface
    Check added by CKY , 7-OCT-1996
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWBSplineSurfaceWithKnotsAndRationalBSplineSurface self) -> RWStepGeom_RWBSplineSurfaceWithKnotsAndRationalBSplineSurface

        Read & Write Module for BSplineSurfaceWithKnotsAndRationalBSplineSurface
        Check added by CKY , 7-OCT-1996
        """
        this = _RWStepGeom.new_RWStepGeom_RWBSplineSurfaceWithKnotsAndRationalBSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWBSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface

        """
        return _RWStepGeom.RWStepGeom_RWBSplineSurfaceWithKnotsAndRationalBSplineSurface_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWBSplineSurfaceWithKnotsAndRationalBSplineSurface self, StepData_StepWriter SW, Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface

        """
        return _RWStepGeom.RWStepGeom_RWBSplineSurfaceWithKnotsAndRationalBSplineSurface_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWBSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWBSplineSurfaceWithKnotsAndRationalBSplineSurface_Share(self, *args)


    def Check(self, *args):
        """
        Check(RWStepGeom_RWBSplineSurfaceWithKnotsAndRationalBSplineSurface self, Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineSurfaceWithKnotsAndRationalBSplineSurface
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _RWStepGeom.RWStepGeom_RWBSplineSurfaceWithKnotsAndRationalBSplineSurface_Check(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWBSplineSurfaceWithKnotsAndRationalBSplineSurface
RWStepGeom_RWBSplineSurfaceWithKnotsAndRationalBSplineSurface_swigregister = _RWStepGeom.RWStepGeom_RWBSplineSurfaceWithKnotsAndRationalBSplineSurface_swigregister
RWStepGeom_RWBSplineSurfaceWithKnotsAndRationalBSplineSurface_swigregister(RWStepGeom_RWBSplineSurfaceWithKnotsAndRationalBSplineSurface)

class RWStepGeom_RWCylindricalSurface(object):
    """Read & Write Module for CylindricalSurface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWCylindricalSurface self) -> RWStepGeom_RWCylindricalSurface

        Read & Write Module for CylindricalSurface
        """
        this = _RWStepGeom.new_RWStepGeom_RWCylindricalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWCylindricalSurface self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_CylindricalSurface ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_CylindricalSurface

        """
        return _RWStepGeom.RWStepGeom_RWCylindricalSurface_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWCylindricalSurface self, StepData_StepWriter SW, Handle_StepGeom_CylindricalSurface ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_CylindricalSurface

        """
        return _RWStepGeom.RWStepGeom_RWCylindricalSurface_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWCylindricalSurface self, Handle_StepGeom_CylindricalSurface ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_CylindricalSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWCylindricalSurface_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWCylindricalSurface
RWStepGeom_RWCylindricalSurface_swigregister = _RWStepGeom.RWStepGeom_RWCylindricalSurface_swigregister
RWStepGeom_RWCylindricalSurface_swigregister(RWStepGeom_RWCylindricalSurface)

class RWStepGeom_RWBSplineSurfaceWithKnots(object):
    """
    Read & Write Module for BSplineSurfaceWithKnots
    Check added by CKY , 7-OCT-1996
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWBSplineSurfaceWithKnots self) -> RWStepGeom_RWBSplineSurfaceWithKnots

        Read & Write Module for BSplineSurfaceWithKnots
        Check added by CKY , 7-OCT-1996
        """
        this = _RWStepGeom.new_RWStepGeom_RWBSplineSurfaceWithKnots(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWBSplineSurfaceWithKnots self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_BSplineSurfaceWithKnots ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots

        """
        return _RWStepGeom.RWStepGeom_RWBSplineSurfaceWithKnots_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWBSplineSurfaceWithKnots self, StepData_StepWriter SW, Handle_StepGeom_BSplineSurfaceWithKnots ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots

        """
        return _RWStepGeom.RWStepGeom_RWBSplineSurfaceWithKnots_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWBSplineSurfaceWithKnots self, Handle_StepGeom_BSplineSurfaceWithKnots ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWBSplineSurfaceWithKnots_Share(self, *args)


    def Check(self, *args):
        """
        Check(RWStepGeom_RWBSplineSurfaceWithKnots self, Handle_StepGeom_BSplineSurfaceWithKnots ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineSurfaceWithKnots
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _RWStepGeom.RWStepGeom_RWBSplineSurfaceWithKnots_Check(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWBSplineSurfaceWithKnots
RWStepGeom_RWBSplineSurfaceWithKnots_swigregister = _RWStepGeom.RWStepGeom_RWBSplineSurfaceWithKnots_swigregister
RWStepGeom_RWBSplineSurfaceWithKnots_swigregister(RWStepGeom_RWBSplineSurfaceWithKnots)

class RWStepGeom_RWBezierSurfaceAndRationalBSplineSurface(object):
    """Read & Write Module for BezierSurfaceAndRationalBSplineSurface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWBezierSurfaceAndRationalBSplineSurface self) -> RWStepGeom_RWBezierSurfaceAndRationalBSplineSurface

        Read & Write Module for BezierSurfaceAndRationalBSplineSurface
        """
        this = _RWStepGeom.new_RWStepGeom_RWBezierSurfaceAndRationalBSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWBezierSurfaceAndRationalBSplineSurface self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface

        """
        return _RWStepGeom.RWStepGeom_RWBezierSurfaceAndRationalBSplineSurface_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWBezierSurfaceAndRationalBSplineSurface self, StepData_StepWriter SW, Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface

        """
        return _RWStepGeom.RWStepGeom_RWBezierSurfaceAndRationalBSplineSurface_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWBezierSurfaceAndRationalBSplineSurface self, Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BezierSurfaceAndRationalBSplineSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWBezierSurfaceAndRationalBSplineSurface_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWBezierSurfaceAndRationalBSplineSurface
RWStepGeom_RWBezierSurfaceAndRationalBSplineSurface_swigregister = _RWStepGeom.RWStepGeom_RWBezierSurfaceAndRationalBSplineSurface_swigregister
RWStepGeom_RWBezierSurfaceAndRationalBSplineSurface_swigregister(RWStepGeom_RWBezierSurfaceAndRationalBSplineSurface)

class RWStepGeom_RWEllipse(object):
    """
    Read & Write Module for Ellipse
    Check added by CKY , 7-OCT-1996
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWEllipse self) -> RWStepGeom_RWEllipse

        Read & Write Module for Ellipse
        Check added by CKY , 7-OCT-1996
        """
        this = _RWStepGeom.new_RWStepGeom_RWEllipse(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWEllipse self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_Ellipse ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Ellipse

        """
        return _RWStepGeom.RWStepGeom_RWEllipse_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWEllipse self, StepData_StepWriter SW, Handle_StepGeom_Ellipse ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Ellipse

        """
        return _RWStepGeom.RWStepGeom_RWEllipse_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWEllipse self, Handle_StepGeom_Ellipse ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Ellipse
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWEllipse_Share(self, *args)


    def Check(self, *args):
        """
        Check(RWStepGeom_RWEllipse self, Handle_StepGeom_Ellipse ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Ellipse
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _RWStepGeom.RWStepGeom_RWEllipse_Check(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWEllipse
RWStepGeom_RWEllipse_swigregister = _RWStepGeom.RWStepGeom_RWEllipse_swigregister
RWStepGeom_RWEllipse_swigregister(RWStepGeom_RWEllipse)

class RWStepGeom_RWBSplineCurveWithKnots(object):
    """
    Read & Write Module for BSplineCurveWithKnots
    Check added by CKY , 7-OCT-1996
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWBSplineCurveWithKnots self) -> RWStepGeom_RWBSplineCurveWithKnots

        Read & Write Module for BSplineCurveWithKnots
        Check added by CKY , 7-OCT-1996
        """
        this = _RWStepGeom.new_RWStepGeom_RWBSplineCurveWithKnots(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWBSplineCurveWithKnots self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_BSplineCurveWithKnots ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineCurveWithKnots

        """
        return _RWStepGeom.RWStepGeom_RWBSplineCurveWithKnots_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWBSplineCurveWithKnots self, StepData_StepWriter SW, Handle_StepGeom_BSplineCurveWithKnots ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineCurveWithKnots

        """
        return _RWStepGeom.RWStepGeom_RWBSplineCurveWithKnots_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWBSplineCurveWithKnots self, Handle_StepGeom_BSplineCurveWithKnots ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineCurveWithKnots
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWBSplineCurveWithKnots_Share(self, *args)


    def Check(self, *args):
        """
        Check(RWStepGeom_RWBSplineCurveWithKnots self, Handle_StepGeom_BSplineCurveWithKnots ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineCurveWithKnots
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _RWStepGeom.RWStepGeom_RWBSplineCurveWithKnots_Check(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWBSplineCurveWithKnots
RWStepGeom_RWBSplineCurveWithKnots_swigregister = _RWStepGeom.RWStepGeom_RWBSplineCurveWithKnots_swigregister
RWStepGeom_RWBSplineCurveWithKnots_swigregister(RWStepGeom_RWBSplineCurveWithKnots)

class RWStepGeom_RWHyperbola(object):
    """Read & Write Module for Hyperbola"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWHyperbola self) -> RWStepGeom_RWHyperbola

        Read & Write Module for Hyperbola
        """
        this = _RWStepGeom.new_RWStepGeom_RWHyperbola(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWHyperbola self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_Hyperbola ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Hyperbola

        """
        return _RWStepGeom.RWStepGeom_RWHyperbola_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWHyperbola self, StepData_StepWriter SW, Handle_StepGeom_Hyperbola ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Hyperbola

        """
        return _RWStepGeom.RWStepGeom_RWHyperbola_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWHyperbola self, Handle_StepGeom_Hyperbola ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Hyperbola
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWHyperbola_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWHyperbola
RWStepGeom_RWHyperbola_swigregister = _RWStepGeom.RWStepGeom_RWHyperbola_swigregister
RWStepGeom_RWHyperbola_swigregister(RWStepGeom_RWHyperbola)

class RWStepGeom_RWCartesianTransformationOperator(object):
    """Read & Write Module for CartesianTransformationOperator"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWCartesianTransformationOperator self) -> RWStepGeom_RWCartesianTransformationOperator

        Read & Write Module for CartesianTransformationOperator
        """
        this = _RWStepGeom.new_RWStepGeom_RWCartesianTransformationOperator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWCartesianTransformationOperator self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_CartesianTransformationOperator ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianTransformationOperator

        """
        return _RWStepGeom.RWStepGeom_RWCartesianTransformationOperator_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWCartesianTransformationOperator self, StepData_StepWriter SW, Handle_StepGeom_CartesianTransformationOperator ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianTransformationOperator

        """
        return _RWStepGeom.RWStepGeom_RWCartesianTransformationOperator_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWCartesianTransformationOperator self, Handle_StepGeom_CartesianTransformationOperator ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_CartesianTransformationOperator
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWCartesianTransformationOperator_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWCartesianTransformationOperator
RWStepGeom_RWCartesianTransformationOperator_swigregister = _RWStepGeom.RWStepGeom_RWCartesianTransformationOperator_swigregister
RWStepGeom_RWCartesianTransformationOperator_swigregister(RWStepGeom_RWCartesianTransformationOperator)

class RWStepGeom_RWConicalSurface(object):
    """Read & Write Module for ConicalSurface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWConicalSurface self) -> RWStepGeom_RWConicalSurface

        Read & Write Module for ConicalSurface
        """
        this = _RWStepGeom.new_RWStepGeom_RWConicalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWConicalSurface self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_ConicalSurface ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_ConicalSurface

        """
        return _RWStepGeom.RWStepGeom_RWConicalSurface_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWConicalSurface self, StepData_StepWriter SW, Handle_StepGeom_ConicalSurface ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_ConicalSurface

        """
        return _RWStepGeom.RWStepGeom_RWConicalSurface_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWConicalSurface self, Handle_StepGeom_ConicalSurface ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_ConicalSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWConicalSurface_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWConicalSurface
RWStepGeom_RWConicalSurface_swigregister = _RWStepGeom.RWStepGeom_RWConicalSurface_swigregister
RWStepGeom_RWConicalSurface_swigregister(RWStepGeom_RWConicalSurface)

class RWStepGeom_RWSurfaceCurve(object):
    """Read & Write Module for SurfaceCurve"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWSurfaceCurve self) -> RWStepGeom_RWSurfaceCurve

        Read & Write Module for SurfaceCurve
        """
        this = _RWStepGeom.new_RWStepGeom_RWSurfaceCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWSurfaceCurve self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_SurfaceCurve ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SurfaceCurve

        """
        return _RWStepGeom.RWStepGeom_RWSurfaceCurve_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWSurfaceCurve self, StepData_StepWriter SW, Handle_StepGeom_SurfaceCurve ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SurfaceCurve

        """
        return _RWStepGeom.RWStepGeom_RWSurfaceCurve_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWSurfaceCurve self, Handle_StepGeom_SurfaceCurve ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SurfaceCurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWSurfaceCurve_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWSurfaceCurve
RWStepGeom_RWSurfaceCurve_swigregister = _RWStepGeom.RWStepGeom_RWSurfaceCurve_swigregister
RWStepGeom_RWSurfaceCurve_swigregister(RWStepGeom_RWSurfaceCurve)

class RWStepGeom_RWSurfaceCurveAndBoundedCurve(object):
    """Read StepGeom_SurfaceCurveAndBoundedCurve"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWSurfaceCurveAndBoundedCurve self) -> RWStepGeom_RWSurfaceCurveAndBoundedCurve

        Read StepGeom_SurfaceCurveAndBoundedCurve
        """
        this = _RWStepGeom.new_RWStepGeom_RWSurfaceCurveAndBoundedCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWSurfaceCurveAndBoundedCurve self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_SurfaceCurveAndBoundedCurve ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve

        """
        return _RWStepGeom.RWStepGeom_RWSurfaceCurveAndBoundedCurve_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWSurfaceCurveAndBoundedCurve self, StepData_StepWriter SW, Handle_StepGeom_SurfaceCurveAndBoundedCurve ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve

        """
        return _RWStepGeom.RWStepGeom_RWSurfaceCurveAndBoundedCurve_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWSurfaceCurveAndBoundedCurve self, Handle_StepGeom_SurfaceCurveAndBoundedCurve ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SurfaceCurveAndBoundedCurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWSurfaceCurveAndBoundedCurve_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWSurfaceCurveAndBoundedCurve
RWStepGeom_RWSurfaceCurveAndBoundedCurve_swigregister = _RWStepGeom.RWStepGeom_RWSurfaceCurveAndBoundedCurve_swigregister
RWStepGeom_RWSurfaceCurveAndBoundedCurve_swigregister(RWStepGeom_RWSurfaceCurveAndBoundedCurve)

class RWStepGeom_RWVector(object):
    """
    Read & Write Module for Vector
    Check added by CKY , 7-OCT-1996
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWVector self) -> RWStepGeom_RWVector

        Read & Write Module for Vector
        Check added by CKY , 7-OCT-1996
        """
        this = _RWStepGeom.new_RWStepGeom_RWVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWVector self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_Vector ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Vector

        """
        return _RWStepGeom.RWStepGeom_RWVector_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWVector self, StepData_StepWriter SW, Handle_StepGeom_Vector ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Vector

        """
        return _RWStepGeom.RWStepGeom_RWVector_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWVector self, Handle_StepGeom_Vector ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Vector
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWVector_Share(self, *args)


    def Check(self, *args):
        """
        Check(RWStepGeom_RWVector self, Handle_StepGeom_Vector ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Vector
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _RWStepGeom.RWStepGeom_RWVector_Check(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWVector
RWStepGeom_RWVector_swigregister = _RWStepGeom.RWStepGeom_RWVector_swigregister
RWStepGeom_RWVector_swigregister(RWStepGeom_RWVector)

class RWStepGeom_RWOrientedSurface(object):
    """Read & Write tool for OrientedSurface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWOrientedSurface self) -> RWStepGeom_RWOrientedSurface

        Empty constructor


        """
        this = _RWStepGeom.new_RWStepGeom_RWOrientedSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWOrientedSurface self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_OrientedSurface ent)

        Reads OrientedSurface

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_OrientedSurface

        """
        return _RWStepGeom.RWStepGeom_RWOrientedSurface_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWOrientedSurface self, StepData_StepWriter SW, Handle_StepGeom_OrientedSurface ent)

        Writes OrientedSurface

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_OrientedSurface

        """
        return _RWStepGeom.RWStepGeom_RWOrientedSurface_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWOrientedSurface self, Handle_StepGeom_OrientedSurface ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_OrientedSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWOrientedSurface_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWOrientedSurface
RWStepGeom_RWOrientedSurface_swigregister = _RWStepGeom.RWStepGeom_RWOrientedSurface_swigregister
RWStepGeom_RWOrientedSurface_swigregister(RWStepGeom_RWOrientedSurface)

class RWStepGeom_RWSeamCurve(object):
    """Read & Write Module for SeamCurve"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWSeamCurve self) -> RWStepGeom_RWSeamCurve

        Read & Write Module for SeamCurve
        """
        this = _RWStepGeom.new_RWStepGeom_RWSeamCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWSeamCurve self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_SeamCurve ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SeamCurve

        """
        return _RWStepGeom.RWStepGeom_RWSeamCurve_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWSeamCurve self, StepData_StepWriter SW, Handle_StepGeom_SeamCurve ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SeamCurve

        """
        return _RWStepGeom.RWStepGeom_RWSeamCurve_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWSeamCurve self, Handle_StepGeom_SeamCurve ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SeamCurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWSeamCurve_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWSeamCurve
RWStepGeom_RWSeamCurve_swigregister = _RWStepGeom.RWStepGeom_RWSeamCurve_swigregister
RWStepGeom_RWSeamCurve_swigregister(RWStepGeom_RWSeamCurve)

class RWStepGeom_RWAxis2Placement3d(object):
    """Read & Write Module for Axis2Placement3d"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWAxis2Placement3d self) -> RWStepGeom_RWAxis2Placement3d

        Read & Write Module for Axis2Placement3d
        """
        this = _RWStepGeom.new_RWStepGeom_RWAxis2Placement3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWAxis2Placement3d self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_Axis2Placement3d ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_Axis2Placement3d

        """
        return _RWStepGeom.RWStepGeom_RWAxis2Placement3d_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWAxis2Placement3d self, StepData_StepWriter SW, Handle_StepGeom_Axis2Placement3d ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_Axis2Placement3d

        """
        return _RWStepGeom.RWStepGeom_RWAxis2Placement3d_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWAxis2Placement3d self, Handle_StepGeom_Axis2Placement3d ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_Axis2Placement3d
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWAxis2Placement3d_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWAxis2Placement3d
RWStepGeom_RWAxis2Placement3d_swigregister = _RWStepGeom.RWStepGeom_RWAxis2Placement3d_swigregister
RWStepGeom_RWAxis2Placement3d_swigregister(RWStepGeom_RWAxis2Placement3d)

class RWStepGeom_RWSweptSurface(object):
    """Read & Write Module for SweptSurface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWSweptSurface self) -> RWStepGeom_RWSweptSurface

        Read & Write Module for SweptSurface
        """
        this = _RWStepGeom.new_RWStepGeom_RWSweptSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWSweptSurface self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_SweptSurface ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SweptSurface

        """
        return _RWStepGeom.RWStepGeom_RWSweptSurface_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWSweptSurface self, StepData_StepWriter SW, Handle_StepGeom_SweptSurface ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SweptSurface

        """
        return _RWStepGeom.RWStepGeom_RWSweptSurface_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWSweptSurface self, Handle_StepGeom_SweptSurface ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SweptSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWSweptSurface_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWSweptSurface
RWStepGeom_RWSweptSurface_swigregister = _RWStepGeom.RWStepGeom_RWSweptSurface_swigregister
RWStepGeom_RWSweptSurface_swigregister(RWStepGeom_RWSweptSurface)

class RWStepGeom_RWCartesianPoint(object):
    """Read & Write Module for CartesianPoint"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWCartesianPoint self) -> RWStepGeom_RWCartesianPoint

        Read & Write Module for CartesianPoint
        """
        this = _RWStepGeom.new_RWStepGeom_RWCartesianPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWCartesianPoint self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_CartesianPoint ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_CartesianPoint

        """
        return _RWStepGeom.RWStepGeom_RWCartesianPoint_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWCartesianPoint self, StepData_StepWriter SW, Handle_StepGeom_CartesianPoint ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_CartesianPoint

        """
        return _RWStepGeom.RWStepGeom_RWCartesianPoint_WriteStep(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWCartesianPoint
RWStepGeom_RWCartesianPoint_swigregister = _RWStepGeom.RWStepGeom_RWCartesianPoint_swigregister
RWStepGeom_RWCartesianPoint_swigregister(RWStepGeom_RWCartesianPoint)

class RWStepGeom_RWRationalBSplineSurface(object):
    """
    Read & Write Module for RationalBSplineSurface
    Check added by CKY , 7-OCT-1996
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWRationalBSplineSurface self) -> RWStepGeom_RWRationalBSplineSurface

        Read & Write Module for RationalBSplineSurface
        Check added by CKY , 7-OCT-1996
        """
        this = _RWStepGeom.new_RWStepGeom_RWRationalBSplineSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWRationalBSplineSurface self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_RationalBSplineSurface ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineSurface

        """
        return _RWStepGeom.RWStepGeom_RWRationalBSplineSurface_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWRationalBSplineSurface self, StepData_StepWriter SW, Handle_StepGeom_RationalBSplineSurface ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineSurface

        """
        return _RWStepGeom.RWStepGeom_RWRationalBSplineSurface_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWRationalBSplineSurface self, Handle_StepGeom_RationalBSplineSurface ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWRationalBSplineSurface_Share(self, *args)


    def Check(self, *args):
        """
        Check(RWStepGeom_RWRationalBSplineSurface self, Handle_StepGeom_RationalBSplineSurface ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_RationalBSplineSurface
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _RWStepGeom.RWStepGeom_RWRationalBSplineSurface_Check(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWRationalBSplineSurface
RWStepGeom_RWRationalBSplineSurface_swigregister = _RWStepGeom.RWStepGeom_RWRationalBSplineSurface_swigregister
RWStepGeom_RWRationalBSplineSurface_swigregister(RWStepGeom_RWRationalBSplineSurface)

class RWStepGeom_RWSphericalSurface(object):
    """Read & Write Module for SphericalSurface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWSphericalSurface self) -> RWStepGeom_RWSphericalSurface

        Read & Write Module for SphericalSurface
        """
        this = _RWStepGeom.new_RWStepGeom_RWSphericalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWSphericalSurface self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_SphericalSurface ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SphericalSurface

        """
        return _RWStepGeom.RWStepGeom_RWSphericalSurface_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWSphericalSurface self, StepData_StepWriter SW, Handle_StepGeom_SphericalSurface ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SphericalSurface

        """
        return _RWStepGeom.RWStepGeom_RWSphericalSurface_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWSphericalSurface self, Handle_StepGeom_SphericalSurface ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SphericalSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWSphericalSurface_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWSphericalSurface
RWStepGeom_RWSphericalSurface_swigregister = _RWStepGeom.RWStepGeom_RWSphericalSurface_swigregister
RWStepGeom_RWSphericalSurface_swigregister(RWStepGeom_RWSphericalSurface)

class RWStepGeom_RWSurfaceOfRevolution(object):
    """Read & Write Module for SurfaceOfRevolution"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWSurfaceOfRevolution self) -> RWStepGeom_RWSurfaceOfRevolution

        Read & Write Module for SurfaceOfRevolution
        """
        this = _RWStepGeom.new_RWStepGeom_RWSurfaceOfRevolution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWSurfaceOfRevolution self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_SurfaceOfRevolution ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SurfaceOfRevolution

        """
        return _RWStepGeom.RWStepGeom_RWSurfaceOfRevolution_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWSurfaceOfRevolution self, StepData_StepWriter SW, Handle_StepGeom_SurfaceOfRevolution ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SurfaceOfRevolution

        """
        return _RWStepGeom.RWStepGeom_RWSurfaceOfRevolution_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWSurfaceOfRevolution self, Handle_StepGeom_SurfaceOfRevolution ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SurfaceOfRevolution
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWSurfaceOfRevolution_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWSurfaceOfRevolution
RWStepGeom_RWSurfaceOfRevolution_swigregister = _RWStepGeom.RWStepGeom_RWSurfaceOfRevolution_swigregister
RWStepGeom_RWSurfaceOfRevolution_swigregister(RWStepGeom_RWSurfaceOfRevolution)

class RWStepGeom_RWBezierSurface(object):
    """Read & Write Module for BezierSurface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWBezierSurface self) -> RWStepGeom_RWBezierSurface

        Read & Write Module for BezierSurface
        """
        this = _RWStepGeom.new_RWStepGeom_RWBezierSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWBezierSurface self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_BezierSurface ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BezierSurface

        """
        return _RWStepGeom.RWStepGeom_RWBezierSurface_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWBezierSurface self, StepData_StepWriter SW, Handle_StepGeom_BezierSurface ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BezierSurface

        """
        return _RWStepGeom.RWStepGeom_RWBezierSurface_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWBezierSurface self, Handle_StepGeom_BezierSurface ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BezierSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWBezierSurface_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWBezierSurface
RWStepGeom_RWBezierSurface_swigregister = _RWStepGeom.RWStepGeom_RWBezierSurface_swigregister
RWStepGeom_RWBezierSurface_swigregister(RWStepGeom_RWBezierSurface)

class RWStepGeom_RWPcurve(object):
    """Read & Write Module for Pcurve"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWPcurve self) -> RWStepGeom_RWPcurve

        Read & Write Module for Pcurve
        """
        this = _RWStepGeom.new_RWStepGeom_RWPcurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWPcurve self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_Pcurve ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_Pcurve

        """
        return _RWStepGeom.RWStepGeom_RWPcurve_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWPcurve self, StepData_StepWriter SW, Handle_StepGeom_Pcurve ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_Pcurve

        """
        return _RWStepGeom.RWStepGeom_RWPcurve_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWPcurve self, Handle_StepGeom_Pcurve ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_Pcurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWPcurve_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWPcurve
RWStepGeom_RWPcurve_swigregister = _RWStepGeom.RWStepGeom_RWPcurve_swigregister
RWStepGeom_RWPcurve_swigregister(RWStepGeom_RWPcurve)

class RWStepGeom_RWOuterBoundaryCurve(object):
    """Read & Write Module for OuterBoundaryCurve"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWOuterBoundaryCurve self) -> RWStepGeom_RWOuterBoundaryCurve

        Read & Write Module for OuterBoundaryCurve
        """
        this = _RWStepGeom.new_RWStepGeom_RWOuterBoundaryCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWOuterBoundaryCurve self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_OuterBoundaryCurve ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_OuterBoundaryCurve

        """
        return _RWStepGeom.RWStepGeom_RWOuterBoundaryCurve_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWOuterBoundaryCurve self, StepData_StepWriter SW, Handle_StepGeom_OuterBoundaryCurve ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_OuterBoundaryCurve

        """
        return _RWStepGeom.RWStepGeom_RWOuterBoundaryCurve_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWOuterBoundaryCurve self, Handle_StepGeom_OuterBoundaryCurve ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_OuterBoundaryCurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWOuterBoundaryCurve_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWOuterBoundaryCurve
RWStepGeom_RWOuterBoundaryCurve_swigregister = _RWStepGeom.RWStepGeom_RWOuterBoundaryCurve_swigregister
RWStepGeom_RWOuterBoundaryCurve_swigregister(RWStepGeom_RWOuterBoundaryCurve)

class RWStepGeom_RWUniformSurface(object):
    """Read & Write Module for UniformSurface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWUniformSurface self) -> RWStepGeom_RWUniformSurface

        Read & Write Module for UniformSurface
        """
        this = _RWStepGeom.new_RWStepGeom_RWUniformSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWUniformSurface self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_UniformSurface ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_UniformSurface

        """
        return _RWStepGeom.RWStepGeom_RWUniformSurface_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWUniformSurface self, StepData_StepWriter SW, Handle_StepGeom_UniformSurface ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_UniformSurface

        """
        return _RWStepGeom.RWStepGeom_RWUniformSurface_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWUniformSurface self, Handle_StepGeom_UniformSurface ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_UniformSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWUniformSurface_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWUniformSurface
RWStepGeom_RWUniformSurface_swigregister = _RWStepGeom.RWStepGeom_RWUniformSurface_swigregister
RWStepGeom_RWUniformSurface_swigregister(RWStepGeom_RWUniformSurface)

class RWStepGeom_RWBoundedSurface(object):
    """Read & Write Module for BoundedSurface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWBoundedSurface self) -> RWStepGeom_RWBoundedSurface

        Read & Write Module for BoundedSurface
        """
        this = _RWStepGeom.new_RWStepGeom_RWBoundedSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWBoundedSurface self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_BoundedSurface ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BoundedSurface

        """
        return _RWStepGeom.RWStepGeom_RWBoundedSurface_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWBoundedSurface self, StepData_StepWriter SW, Handle_StepGeom_BoundedSurface ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BoundedSurface

        """
        return _RWStepGeom.RWStepGeom_RWBoundedSurface_WriteStep(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWBoundedSurface
RWStepGeom_RWBoundedSurface_swigregister = _RWStepGeom.RWStepGeom_RWBoundedSurface_swigregister
RWStepGeom_RWBoundedSurface_swigregister(RWStepGeom_RWBoundedSurface)

class RWStepGeom_RWGeometricRepresentationContextAndParametricRepresentationContext(object):
    """Read & Write Module for GeometricRepresentationContextAndParametricRepresentationContext"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWGeometricRepresentationContextAndParametricRepresentationContext self) -> RWStepGeom_RWGeometricRepresentationContextAndParametricRepresentationContext

        Read & Write Module for GeometricRepresentationContextAndParametricRepresentationContext
        """
        this = _RWStepGeom.new_RWStepGeom_RWGeometricRepresentationContextAndParametricRepresentationContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWGeometricRepresentationContextAndParametricRepresentationContext self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext

        """
        return _RWStepGeom.RWStepGeom_RWGeometricRepresentationContextAndParametricRepresentationContext_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWGeometricRepresentationContextAndParametricRepresentationContext self, StepData_StepWriter SW, Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext

        """
        return _RWStepGeom.RWStepGeom_RWGeometricRepresentationContextAndParametricRepresentationContext_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWGeometricRepresentationContextAndParametricRepresentationContext self, Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_GeometricRepresentationContextAndParametricRepresentationContext
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWGeometricRepresentationContextAndParametricRepresentationContext_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWGeometricRepresentationContextAndParametricRepresentationContext
RWStepGeom_RWGeometricRepresentationContextAndParametricRepresentationContext_swigregister = _RWStepGeom.RWStepGeom_RWGeometricRepresentationContextAndParametricRepresentationContext_swigregister
RWStepGeom_RWGeometricRepresentationContextAndParametricRepresentationContext_swigregister(RWStepGeom_RWGeometricRepresentationContextAndParametricRepresentationContext)

class RWStepGeom_RWParabola(object):
    """Read & Write Module for Parabola"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWParabola self) -> RWStepGeom_RWParabola

        Read & Write Module for Parabola
        """
        this = _RWStepGeom.new_RWStepGeom_RWParabola(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWParabola self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_Parabola ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Parabola

        """
        return _RWStepGeom.RWStepGeom_RWParabola_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWParabola self, StepData_StepWriter SW, Handle_StepGeom_Parabola ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Parabola

        """
        return _RWStepGeom.RWStepGeom_RWParabola_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWParabola self, Handle_StepGeom_Parabola ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Parabola
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWParabola_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWParabola
RWStepGeom_RWParabola_swigregister = _RWStepGeom.RWStepGeom_RWParabola_swigregister
RWStepGeom_RWParabola_swigregister(RWStepGeom_RWParabola)

class RWStepGeom_RWGeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx(object):
    """
    Read & Write Module for
    GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWGeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self) -> RWStepGeom_RWGeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx

        Read & Write Module for
        GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx
        """
        this = _RWStepGeom.new_RWStepGeom_RWGeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWGeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx

        """
        return _RWStepGeom.RWStepGeom_RWGeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWGeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, StepData_StepWriter SW, Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx

        """
        return _RWStepGeom.RWStepGeom_RWGeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWGeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx self, Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_GeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWGeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWGeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx
RWStepGeom_RWGeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_swigregister = _RWStepGeom.RWStepGeom_RWGeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_swigregister
RWStepGeom_RWGeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx_swigregister(RWStepGeom_RWGeomRepContextAndGlobUnitAssCtxAndGlobUncertaintyAssCtx)

class RWStepGeom_RWBezierCurve(object):
    """Read & Write Module for BezierCurve"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWBezierCurve self) -> RWStepGeom_RWBezierCurve

        Read & Write Module for BezierCurve
        """
        this = _RWStepGeom.new_RWStepGeom_RWBezierCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWBezierCurve self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_BezierCurve ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BezierCurve

        """
        return _RWStepGeom.RWStepGeom_RWBezierCurve_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWBezierCurve self, StepData_StepWriter SW, Handle_StepGeom_BezierCurve ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BezierCurve

        """
        return _RWStepGeom.RWStepGeom_RWBezierCurve_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWBezierCurve self, Handle_StepGeom_BezierCurve ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BezierCurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWBezierCurve_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWBezierCurve
RWStepGeom_RWBezierCurve_swigregister = _RWStepGeom.RWStepGeom_RWBezierCurve_swigregister
RWStepGeom_RWBezierCurve_swigregister(RWStepGeom_RWBezierCurve)

class RWStepGeom_RWBSplineCurve(object):
    """Read & Write Module for BSplineCurve"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWBSplineCurve self) -> RWStepGeom_RWBSplineCurve

        Read & Write Module for BSplineCurve
        """
        this = _RWStepGeom.new_RWStepGeom_RWBSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWBSplineCurve self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_BSplineCurve ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineCurve

        """
        return _RWStepGeom.RWStepGeom_RWBSplineCurve_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWBSplineCurve self, StepData_StepWriter SW, Handle_StepGeom_BSplineCurve ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineCurve

        """
        return _RWStepGeom.RWStepGeom_RWBSplineCurve_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWBSplineCurve self, Handle_StepGeom_BSplineCurve ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineCurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWBSplineCurve_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWBSplineCurve
RWStepGeom_RWBSplineCurve_swigregister = _RWStepGeom.RWStepGeom_RWBSplineCurve_swigregister
RWStepGeom_RWBSplineCurve_swigregister(RWStepGeom_RWBSplineCurve)

class RWStepGeom_RWSurface(object):
    """Read & Write Module for Surface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWSurface self) -> RWStepGeom_RWSurface

        Read & Write Module for Surface
        """
        this = _RWStepGeom.new_RWStepGeom_RWSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWSurface self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_Surface ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_Surface

        """
        return _RWStepGeom.RWStepGeom_RWSurface_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWSurface self, StepData_StepWriter SW, Handle_StepGeom_Surface ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_Surface

        """
        return _RWStepGeom.RWStepGeom_RWSurface_WriteStep(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWSurface
RWStepGeom_RWSurface_swigregister = _RWStepGeom.RWStepGeom_RWSurface_swigregister
RWStepGeom_RWSurface_swigregister(RWStepGeom_RWSurface)

class RWStepGeom_RWPointOnSurface(object):
    """Read & Write Module for PointOnSurface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWPointOnSurface self) -> RWStepGeom_RWPointOnSurface

        Read & Write Module for PointOnSurface
        """
        this = _RWStepGeom.new_RWStepGeom_RWPointOnSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWPointOnSurface self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_PointOnSurface ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_PointOnSurface

        """
        return _RWStepGeom.RWStepGeom_RWPointOnSurface_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWPointOnSurface self, StepData_StepWriter SW, Handle_StepGeom_PointOnSurface ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_PointOnSurface

        """
        return _RWStepGeom.RWStepGeom_RWPointOnSurface_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWPointOnSurface self, Handle_StepGeom_PointOnSurface ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_PointOnSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWPointOnSurface_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWPointOnSurface
RWStepGeom_RWPointOnSurface_swigregister = _RWStepGeom.RWStepGeom_RWPointOnSurface_swigregister
RWStepGeom_RWPointOnSurface_swigregister(RWStepGeom_RWPointOnSurface)

class RWStepGeom_RWToroidalSurface(object):
    """
    Read & Write Module for ToroidalSurface
    Check added by CKY , 7-OCT-1996
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWToroidalSurface self) -> RWStepGeom_RWToroidalSurface

        Read & Write Module for ToroidalSurface
        Check added by CKY , 7-OCT-1996
        """
        this = _RWStepGeom.new_RWStepGeom_RWToroidalSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWToroidalSurface self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_ToroidalSurface ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_ToroidalSurface

        """
        return _RWStepGeom.RWStepGeom_RWToroidalSurface_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWToroidalSurface self, StepData_StepWriter SW, Handle_StepGeom_ToroidalSurface ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_ToroidalSurface

        """
        return _RWStepGeom.RWStepGeom_RWToroidalSurface_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWToroidalSurface self, Handle_StepGeom_ToroidalSurface ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_ToroidalSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWToroidalSurface_Share(self, *args)


    def Check(self, *args):
        """
        Check(RWStepGeom_RWToroidalSurface self, Handle_StepGeom_ToroidalSurface ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_ToroidalSurface
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _RWStepGeom.RWStepGeom_RWToroidalSurface_Check(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWToroidalSurface
RWStepGeom_RWToroidalSurface_swigregister = _RWStepGeom.RWStepGeom_RWToroidalSurface_swigregister
RWStepGeom_RWToroidalSurface_swigregister(RWStepGeom_RWToroidalSurface)

class RWStepGeom_RWReparametrisedCompositeCurveSegment(object):
    """Read & Write Module for ReparametrisedCompositeCurveSegment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWReparametrisedCompositeCurveSegment self) -> RWStepGeom_RWReparametrisedCompositeCurveSegment

        Read & Write Module for ReparametrisedCompositeCurveSegment
        """
        this = _RWStepGeom.new_RWStepGeom_RWReparametrisedCompositeCurveSegment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWReparametrisedCompositeCurveSegment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_ReparametrisedCompositeCurveSegment ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment

        """
        return _RWStepGeom.RWStepGeom_RWReparametrisedCompositeCurveSegment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWReparametrisedCompositeCurveSegment self, StepData_StepWriter SW, Handle_StepGeom_ReparametrisedCompositeCurveSegment ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment

        """
        return _RWStepGeom.RWStepGeom_RWReparametrisedCompositeCurveSegment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWReparametrisedCompositeCurveSegment self, Handle_StepGeom_ReparametrisedCompositeCurveSegment ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_ReparametrisedCompositeCurveSegment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWReparametrisedCompositeCurveSegment_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWReparametrisedCompositeCurveSegment
RWStepGeom_RWReparametrisedCompositeCurveSegment_swigregister = _RWStepGeom.RWStepGeom_RWReparametrisedCompositeCurveSegment_swigregister
RWStepGeom_RWReparametrisedCompositeCurveSegment_swigregister(RWStepGeom_RWReparametrisedCompositeCurveSegment)

class RWStepGeom_RWAxis2Placement2d(object):
    """Read & Write Module for Axis2Placement2d"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWAxis2Placement2d self) -> RWStepGeom_RWAxis2Placement2d

        Read & Write Module for Axis2Placement2d
        """
        this = _RWStepGeom.new_RWStepGeom_RWAxis2Placement2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWAxis2Placement2d self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_Axis2Placement2d ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement2d

        """
        return _RWStepGeom.RWStepGeom_RWAxis2Placement2d_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWAxis2Placement2d self, StepData_StepWriter SW, Handle_StepGeom_Axis2Placement2d ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement2d

        """
        return _RWStepGeom.RWStepGeom_RWAxis2Placement2d_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWAxis2Placement2d self, Handle_StepGeom_Axis2Placement2d ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Axis2Placement2d
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWAxis2Placement2d_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWAxis2Placement2d
RWStepGeom_RWAxis2Placement2d_swigregister = _RWStepGeom.RWStepGeom_RWAxis2Placement2d_swigregister
RWStepGeom_RWAxis2Placement2d_swigregister(RWStepGeom_RWAxis2Placement2d)

class RWStepGeom_RWElementarySurface(object):
    """Read & Write Module for ElementarySurface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWElementarySurface self) -> RWStepGeom_RWElementarySurface

        Read & Write Module for ElementarySurface
        """
        this = _RWStepGeom.new_RWStepGeom_RWElementarySurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWElementarySurface self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_ElementarySurface ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_ElementarySurface

        """
        return _RWStepGeom.RWStepGeom_RWElementarySurface_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWElementarySurface self, StepData_StepWriter SW, Handle_StepGeom_ElementarySurface ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_ElementarySurface

        """
        return _RWStepGeom.RWStepGeom_RWElementarySurface_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWElementarySurface self, Handle_StepGeom_ElementarySurface ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_ElementarySurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWElementarySurface_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWElementarySurface
RWStepGeom_RWElementarySurface_swigregister = _RWStepGeom.RWStepGeom_RWElementarySurface_swigregister
RWStepGeom_RWElementarySurface_swigregister(RWStepGeom_RWElementarySurface)

class RWStepGeom_RWPlacement(object):
    """Read & Write Module for Placement"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWPlacement self) -> RWStepGeom_RWPlacement

        Read & Write Module for Placement
        """
        this = _RWStepGeom.new_RWStepGeom_RWPlacement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWPlacement self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_Placement ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_Placement

        """
        return _RWStepGeom.RWStepGeom_RWPlacement_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWPlacement self, StepData_StepWriter SW, Handle_StepGeom_Placement ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_Placement

        """
        return _RWStepGeom.RWStepGeom_RWPlacement_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWPlacement self, Handle_StepGeom_Placement ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_Placement
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWPlacement_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWPlacement
RWStepGeom_RWPlacement_swigregister = _RWStepGeom.RWStepGeom_RWPlacement_swigregister
RWStepGeom_RWPlacement_swigregister(RWStepGeom_RWPlacement)

class RWStepGeom_RWRectangularCompositeSurface(object):
    """Read & Write Module for RectangularCompositeSurface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWRectangularCompositeSurface self) -> RWStepGeom_RWRectangularCompositeSurface

        Read & Write Module for RectangularCompositeSurface
        """
        this = _RWStepGeom.new_RWStepGeom_RWRectangularCompositeSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWRectangularCompositeSurface self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_RectangularCompositeSurface ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_RectangularCompositeSurface

        """
        return _RWStepGeom.RWStepGeom_RWRectangularCompositeSurface_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWRectangularCompositeSurface self, StepData_StepWriter SW, Handle_StepGeom_RectangularCompositeSurface ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_RectangularCompositeSurface

        """
        return _RWStepGeom.RWStepGeom_RWRectangularCompositeSurface_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWRectangularCompositeSurface self, Handle_StepGeom_RectangularCompositeSurface ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_RectangularCompositeSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWRectangularCompositeSurface_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWRectangularCompositeSurface
RWStepGeom_RWRectangularCompositeSurface_swigregister = _RWStepGeom.RWStepGeom_RWRectangularCompositeSurface_swigregister
RWStepGeom_RWRectangularCompositeSurface_swigregister(RWStepGeom_RWRectangularCompositeSurface)

class RWStepGeom_RWCompositeCurveSegment(object):
    """Read & Write Module for CompositeCurveSegment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWCompositeCurveSegment self) -> RWStepGeom_RWCompositeCurveSegment

        Read & Write Module for CompositeCurveSegment
        """
        this = _RWStepGeom.new_RWStepGeom_RWCompositeCurveSegment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWCompositeCurveSegment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_CompositeCurveSegment ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_CompositeCurveSegment

        """
        return _RWStepGeom.RWStepGeom_RWCompositeCurveSegment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWCompositeCurveSegment self, StepData_StepWriter SW, Handle_StepGeom_CompositeCurveSegment ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_CompositeCurveSegment

        """
        return _RWStepGeom.RWStepGeom_RWCompositeCurveSegment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWCompositeCurveSegment self, Handle_StepGeom_CompositeCurveSegment ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_CompositeCurveSegment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWCompositeCurveSegment_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWCompositeCurveSegment
RWStepGeom_RWCompositeCurveSegment_swigregister = _RWStepGeom.RWStepGeom_RWCompositeCurveSegment_swigregister
RWStepGeom_RWCompositeCurveSegment_swigregister(RWStepGeom_RWCompositeCurveSegment)

class RWStepGeom_RWSurfaceReplica(object):
    """Read & Write Module for SurfaceReplica"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWSurfaceReplica self) -> RWStepGeom_RWSurfaceReplica

        Read & Write Module for SurfaceReplica
        """
        this = _RWStepGeom.new_RWStepGeom_RWSurfaceReplica(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWSurfaceReplica self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_SurfaceReplica ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SurfaceReplica

        """
        return _RWStepGeom.RWStepGeom_RWSurfaceReplica_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWSurfaceReplica self, StepData_StepWriter SW, Handle_StepGeom_SurfaceReplica ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SurfaceReplica

        """
        return _RWStepGeom.RWStepGeom_RWSurfaceReplica_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWSurfaceReplica self, Handle_StepGeom_SurfaceReplica ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SurfaceReplica
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWSurfaceReplica_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWSurfaceReplica
RWStepGeom_RWSurfaceReplica_swigregister = _RWStepGeom.RWStepGeom_RWSurfaceReplica_swigregister
RWStepGeom_RWSurfaceReplica_swigregister(RWStepGeom_RWSurfaceReplica)

class RWStepGeom_RWBSplineCurveWithKnotsAndRationalBSplineCurve(object):
    """
    Read & Write Module for BSplineCurveWithKnotsAndRationalBSplineCurve
    Check added by CKY , 7-OCT-1996
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWBSplineCurveWithKnotsAndRationalBSplineCurve self) -> RWStepGeom_RWBSplineCurveWithKnotsAndRationalBSplineCurve

        Read & Write Module for BSplineCurveWithKnotsAndRationalBSplineCurve
        Check added by CKY , 7-OCT-1996
        """
        this = _RWStepGeom.new_RWStepGeom_RWBSplineCurveWithKnotsAndRationalBSplineCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWBSplineCurveWithKnotsAndRationalBSplineCurve self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve

        """
        return _RWStepGeom.RWStepGeom_RWBSplineCurveWithKnotsAndRationalBSplineCurve_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWBSplineCurveWithKnotsAndRationalBSplineCurve self, StepData_StepWriter SW, Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve

        """
        return _RWStepGeom.RWStepGeom_RWBSplineCurveWithKnotsAndRationalBSplineCurve_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWBSplineCurveWithKnotsAndRationalBSplineCurve self, Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWBSplineCurveWithKnotsAndRationalBSplineCurve_Share(self, *args)


    def Check(self, *args):
        """
        Check(RWStepGeom_RWBSplineCurveWithKnotsAndRationalBSplineCurve self, Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BSplineCurveWithKnotsAndRationalBSplineCurve
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _RWStepGeom.RWStepGeom_RWBSplineCurveWithKnotsAndRationalBSplineCurve_Check(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWBSplineCurveWithKnotsAndRationalBSplineCurve
RWStepGeom_RWBSplineCurveWithKnotsAndRationalBSplineCurve_swigregister = _RWStepGeom.RWStepGeom_RWBSplineCurveWithKnotsAndRationalBSplineCurve_swigregister
RWStepGeom_RWBSplineCurveWithKnotsAndRationalBSplineCurve_swigregister(RWStepGeom_RWBSplineCurveWithKnotsAndRationalBSplineCurve)

class RWStepGeom_RWPlane(object):
    """Read & Write Module for Plane"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWPlane self) -> RWStepGeom_RWPlane

        Read & Write Module for Plane
        """
        this = _RWStepGeom.new_RWStepGeom_RWPlane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWPlane self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_Plane ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Plane

        """
        return _RWStepGeom.RWStepGeom_RWPlane_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWPlane self, StepData_StepWriter SW, Handle_StepGeom_Plane ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Plane

        """
        return _RWStepGeom.RWStepGeom_RWPlane_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWPlane self, Handle_StepGeom_Plane ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_Plane
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWPlane_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWPlane
RWStepGeom_RWPlane_swigregister = _RWStepGeom.RWStepGeom_RWPlane_swigregister
RWStepGeom_RWPlane_swigregister(RWStepGeom_RWPlane)

class RWStepGeom_RWDegeneratePcurve(object):
    """Read & Write Module for DegeneratePcurve"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWDegeneratePcurve self) -> RWStepGeom_RWDegeneratePcurve

        Read & Write Module for DegeneratePcurve
        """
        this = _RWStepGeom.new_RWStepGeom_RWDegeneratePcurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWDegeneratePcurve self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_DegeneratePcurve ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_DegeneratePcurve

        """
        return _RWStepGeom.RWStepGeom_RWDegeneratePcurve_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWDegeneratePcurve self, StepData_StepWriter SW, Handle_StepGeom_DegeneratePcurve ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_DegeneratePcurve

        """
        return _RWStepGeom.RWStepGeom_RWDegeneratePcurve_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWDegeneratePcurve self, Handle_StepGeom_DegeneratePcurve ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_DegeneratePcurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWDegeneratePcurve_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWDegeneratePcurve
RWStepGeom_RWDegeneratePcurve_swigregister = _RWStepGeom.RWStepGeom_RWDegeneratePcurve_swigregister
RWStepGeom_RWDegeneratePcurve_swigregister(RWStepGeom_RWDegeneratePcurve)

class RWStepGeom_RWPointOnCurve(object):
    """Read & Write Module for PointOnCurve"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWPointOnCurve self) -> RWStepGeom_RWPointOnCurve

        Read & Write Module for PointOnCurve
        """
        this = _RWStepGeom.new_RWStepGeom_RWPointOnCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWPointOnCurve self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_PointOnCurve ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_PointOnCurve

        """
        return _RWStepGeom.RWStepGeom_RWPointOnCurve_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWPointOnCurve self, StepData_StepWriter SW, Handle_StepGeom_PointOnCurve ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_PointOnCurve

        """
        return _RWStepGeom.RWStepGeom_RWPointOnCurve_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWPointOnCurve self, Handle_StepGeom_PointOnCurve ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_PointOnCurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWPointOnCurve_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWPointOnCurve
RWStepGeom_RWPointOnCurve_swigregister = _RWStepGeom.RWStepGeom_RWPointOnCurve_swigregister
RWStepGeom_RWPointOnCurve_swigregister(RWStepGeom_RWPointOnCurve)

class RWStepGeom_RWSurfaceOfLinearExtrusion(object):
    """Read & Write Module for SurfaceOfLinearExtrusion"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWSurfaceOfLinearExtrusion self) -> RWStepGeom_RWSurfaceOfLinearExtrusion

        Read & Write Module for SurfaceOfLinearExtrusion
        """
        this = _RWStepGeom.new_RWStepGeom_RWSurfaceOfLinearExtrusion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWSurfaceOfLinearExtrusion self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_SurfaceOfLinearExtrusion ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion

        """
        return _RWStepGeom.RWStepGeom_RWSurfaceOfLinearExtrusion_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWSurfaceOfLinearExtrusion self, StepData_StepWriter SW, Handle_StepGeom_SurfaceOfLinearExtrusion ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion

        """
        return _RWStepGeom.RWStepGeom_RWSurfaceOfLinearExtrusion_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWSurfaceOfLinearExtrusion self, Handle_StepGeom_SurfaceOfLinearExtrusion ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_SurfaceOfLinearExtrusion
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWSurfaceOfLinearExtrusion_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWSurfaceOfLinearExtrusion
RWStepGeom_RWSurfaceOfLinearExtrusion_swigregister = _RWStepGeom.RWStepGeom_RWSurfaceOfLinearExtrusion_swigregister
RWStepGeom_RWSurfaceOfLinearExtrusion_swigregister(RWStepGeom_RWSurfaceOfLinearExtrusion)

class RWStepGeom_RWBoundedCurve(object):
    """Read & Write Module for BoundedCurve"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWBoundedCurve self) -> RWStepGeom_RWBoundedCurve

        Read & Write Module for BoundedCurve
        """
        this = _RWStepGeom.new_RWStepGeom_RWBoundedCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWBoundedCurve self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_BoundedCurve ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BoundedCurve

        """
        return _RWStepGeom.RWStepGeom_RWBoundedCurve_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWBoundedCurve self, StepData_StepWriter SW, Handle_StepGeom_BoundedCurve ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_BoundedCurve

        """
        return _RWStepGeom.RWStepGeom_RWBoundedCurve_WriteStep(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWBoundedCurve
RWStepGeom_RWBoundedCurve_swigregister = _RWStepGeom.RWStepGeom_RWBoundedCurve_swigregister
RWStepGeom_RWBoundedCurve_swigregister(RWStepGeom_RWBoundedCurve)

class RWStepGeom_RWDirection(object):
    """
    Read & Write Module for Direction
    Check added by CKY , 7-OCT-1996
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWDirection self) -> RWStepGeom_RWDirection

        Read & Write Module for Direction
        Check added by CKY , 7-OCT-1996
        """
        this = _RWStepGeom.new_RWStepGeom_RWDirection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWDirection self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_Direction ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_Direction

        """
        return _RWStepGeom.RWStepGeom_RWDirection_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWDirection self, StepData_StepWriter SW, Handle_StepGeom_Direction ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_Direction

        """
        return _RWStepGeom.RWStepGeom_RWDirection_WriteStep(self, *args)


    def Check(self, *args):
        """
        Check(RWStepGeom_RWDirection self, Handle_StepGeom_Direction ent, Interface_ShareTool shares, Handle_Interface_Check ach)

        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_Direction
        :type shares: OCC.wrapper.Interface.Interface_ShareTool
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _RWStepGeom.RWStepGeom_RWDirection_Check(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWDirection
RWStepGeom_RWDirection_swigregister = _RWStepGeom.RWStepGeom_RWDirection_swigregister
RWStepGeom_RWDirection_swigregister(RWStepGeom_RWDirection)

class RWStepGeom_RWEvaluatedDegeneratePcurve(object):
    """Read & Write Module for EvaluatedDegeneratePcurve"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWEvaluatedDegeneratePcurve self) -> RWStepGeom_RWEvaluatedDegeneratePcurve

        Read & Write Module for EvaluatedDegeneratePcurve
        """
        this = _RWStepGeom.new_RWStepGeom_RWEvaluatedDegeneratePcurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWEvaluatedDegeneratePcurve self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_EvaluatedDegeneratePcurve ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve

        """
        return _RWStepGeom.RWStepGeom_RWEvaluatedDegeneratePcurve_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWEvaluatedDegeneratePcurve self, StepData_StepWriter SW, Handle_StepGeom_EvaluatedDegeneratePcurve ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve

        """
        return _RWStepGeom.RWStepGeom_RWEvaluatedDegeneratePcurve_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWEvaluatedDegeneratePcurve self, Handle_StepGeom_EvaluatedDegeneratePcurve ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepGeom.Handle_StepGeom_EvaluatedDegeneratePcurve
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWEvaluatedDegeneratePcurve_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWEvaluatedDegeneratePcurve
RWStepGeom_RWEvaluatedDegeneratePcurve_swigregister = _RWStepGeom.RWStepGeom_RWEvaluatedDegeneratePcurve_swigregister
RWStepGeom_RWEvaluatedDegeneratePcurve_swigregister(RWStepGeom_RWEvaluatedDegeneratePcurve)

class RWStepGeom_RWCurveBoundedSurface(object):
    """Read & Write tool for CurveBoundedSurface"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepGeom_RWCurveBoundedSurface self) -> RWStepGeom_RWCurveBoundedSurface

        Empty constructor


        """
        this = _RWStepGeom.new_RWStepGeom_RWCurveBoundedSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepGeom_RWCurveBoundedSurface self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepGeom_CurveBoundedSurface ent)

        Reads CurveBoundedSurface

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_CurveBoundedSurface

        """
        return _RWStepGeom.RWStepGeom_RWCurveBoundedSurface_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepGeom_RWCurveBoundedSurface self, StepData_StepWriter SW, Handle_StepGeom_CurveBoundedSurface ent)

        Writes CurveBoundedSurface

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_CurveBoundedSurface

        """
        return _RWStepGeom.RWStepGeom_RWCurveBoundedSurface_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepGeom_RWCurveBoundedSurface self, Handle_StepGeom_CurveBoundedSurface ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.RWStepGeom.Handle_StepGeom_CurveBoundedSurface
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepGeom.RWStepGeom_RWCurveBoundedSurface_Share(self, *args)

    __swig_destroy__ = _RWStepGeom.delete_RWStepGeom_RWCurveBoundedSurface
RWStepGeom_RWCurveBoundedSurface_swigregister = _RWStepGeom.RWStepGeom_RWCurveBoundedSurface_swigregister
RWStepGeom_RWCurveBoundedSurface_swigregister(RWStepGeom_RWCurveBoundedSurface)



