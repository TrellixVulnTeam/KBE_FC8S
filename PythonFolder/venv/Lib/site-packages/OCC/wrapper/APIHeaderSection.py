# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_APIHeaderSection')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_APIHeaderSection')
    _APIHeaderSection = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_APIHeaderSection', [dirname(__file__)])
        except ImportError:
            import _APIHeaderSection
            return _APIHeaderSection
        try:
            _mod = imp.load_module('_APIHeaderSection', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _APIHeaderSection = swig_import_helper()
    del swig_import_helper
else:
    import _APIHeaderSection
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _APIHeaderSection.delete_SwigPyIterator

    def value(self):
        return _APIHeaderSection.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _APIHeaderSection.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _APIHeaderSection.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _APIHeaderSection.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _APIHeaderSection.SwigPyIterator_equal(self, x)

    def copy(self):
        return _APIHeaderSection.SwigPyIterator_copy(self)

    def next(self):
        return _APIHeaderSection.SwigPyIterator_next(self)

    def __next__(self):
        return _APIHeaderSection.SwigPyIterator___next__(self)

    def previous(self):
        return _APIHeaderSection.SwigPyIterator_previous(self)

    def advance(self, n):
        return _APIHeaderSection.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _APIHeaderSection.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _APIHeaderSection.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _APIHeaderSection.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _APIHeaderSection.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _APIHeaderSection.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _APIHeaderSection.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _APIHeaderSection.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _APIHeaderSection.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_APIHeaderSection.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _APIHeaderSection.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _APIHeaderSection.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _APIHeaderSection.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _APIHeaderSection.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _APIHeaderSection.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _APIHeaderSection.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _APIHeaderSection.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_APIHeaderSection.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _APIHeaderSection.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _APIHeaderSection.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _APIHeaderSection.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _APIHeaderSection.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _APIHeaderSection.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _APIHeaderSection.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _APIHeaderSection.ptr_to_number(item)
ptr_to_number = _APIHeaderSection.ptr_to_number

def HashCode(*args):
    return _APIHeaderSection.HashCode(*args)
HashCode = _APIHeaderSection.HashCode

def ptr_equal(a, b):
    return _APIHeaderSection.ptr_equal(a, b)
ptr_equal = _APIHeaderSection.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import HeaderSection
else:
    import HeaderSection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepData
else:
    import StepData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IFSelect
else:
    import IFSelect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IFGraph
else:
    import IFGraph
del _swig_python_version_info
class APIHeaderSection_EditHeader(IFSelect.IFSelect_Editor):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_APIHeaderSection_EditHeader
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_APIHeaderSection_EditHeader(self) 
            return h


    def __init__(self, *args):
        """__init__(APIHeaderSection_EditHeader self) -> APIHeaderSection_EditHeader"""
        this = _APIHeaderSection.new_APIHeaderSection_EditHeader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Label(self, *args):
        """
        Label(APIHeaderSection_EditHeader self) -> TCollection_AsciiString

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _APIHeaderSection.APIHeaderSection_EditHeader_Label(self, *args)


    def Recognize(self, *args):
        """
        Recognize(APIHeaderSection_EditHeader self, Handle_IFSelect_EditForm form) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _APIHeaderSection.APIHeaderSection_EditHeader_Recognize(self, *args)


    def StringValue(self, *args):
        """
        StringValue(APIHeaderSection_EditHeader self, Handle_IFSelect_EditForm form, Standard_Integer const num) -> Handle_TCollection_HAsciiString

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_EditHeader_StringValue(self, *args)


    def Apply(self, *args):
        """
        Apply(APIHeaderSection_EditHeader self, Handle_IFSelect_EditForm form, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _APIHeaderSection.APIHeaderSection_EditHeader_Apply(self, *args)


    def Load(self, *args):
        """
        Load(APIHeaderSection_EditHeader self, Handle_IFSelect_EditForm form, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _APIHeaderSection.APIHeaderSection_EditHeader_Load(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _APIHeaderSection.APIHeaderSection_EditHeader_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _APIHeaderSection.APIHeaderSection_EditHeader_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _APIHeaderSection.APIHeaderSection_EditHeader_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _APIHeaderSection.delete_APIHeaderSection_EditHeader
APIHeaderSection_EditHeader_swigregister = _APIHeaderSection.APIHeaderSection_EditHeader_swigregister
APIHeaderSection_EditHeader_swigregister(APIHeaderSection_EditHeader)

def APIHeaderSection_EditHeader_get_type_name(*args):
    """
    APIHeaderSection_EditHeader_get_type_name() -> char const *

    :rtype: const char *

    """
    return _APIHeaderSection.APIHeaderSection_EditHeader_get_type_name(*args)

def APIHeaderSection_EditHeader_get_type_descriptor(*args):
    """
    APIHeaderSection_EditHeader_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _APIHeaderSection.APIHeaderSection_EditHeader_get_type_descriptor(*args)

class Handle_APIHeaderSection_EditHeader(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_APIHeaderSection_EditHeader self)

        Nullify the handle


        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_APIHeaderSection_EditHeader self) -> bool

        Check for being null

        :rtype: bool

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_APIHeaderSection_EditHeader self, APIHeaderSection_EditHeader thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_APIHeaderSection_EditHeader self, Handle_APIHeaderSection_EditHeader theHandle) -> Handle_APIHeaderSection_EditHeader
        assign(Handle_APIHeaderSection_EditHeader self, APIHeaderSection_EditHeader thePtr) -> Handle_APIHeaderSection_EditHeader
        assign(Handle_APIHeaderSection_EditHeader self, Handle_APIHeaderSection_EditHeader theHandle) -> Handle_APIHeaderSection_EditHeader

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_APIHeaderSection_EditHeader self) -> APIHeaderSection_EditHeader

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_APIHeaderSection_EditHeader self) -> APIHeaderSection_EditHeader

        Member access operator (note non-const)

        :rtype: T *

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_APIHeaderSection_EditHeader self) -> APIHeaderSection_EditHeader

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader___ref__(self, *args)


    def __hash__(self):
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _APIHeaderSection.Handle_APIHeaderSection_EditHeader___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _APIHeaderSection.new_Handle_APIHeaderSection_EditHeader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_APIHeaderSection.Handle_APIHeaderSection_EditHeader_DownCast)
    __swig_destroy__ = _APIHeaderSection.delete_Handle_APIHeaderSection_EditHeader

    def Label(self, *args):
        """
        Label(Handle_APIHeaderSection_EditHeader self) -> TCollection_AsciiString

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_Label(self, *args)


    def Recognize(self, *args):
        """
        Recognize(Handle_APIHeaderSection_EditHeader self, Handle_IFSelect_EditForm form) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_Recognize(self, *args)


    def StringValue(self, *args):
        """
        StringValue(Handle_APIHeaderSection_EditHeader self, Handle_IFSelect_EditForm form, Standard_Integer const num) -> Handle_TCollection_HAsciiString

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_StringValue(self, *args)


    def Apply(self, *args):
        """
        Apply(Handle_APIHeaderSection_EditHeader self, Handle_IFSelect_EditForm form, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_Apply(self, *args)


    def Load(self, *args):
        """
        Load(Handle_APIHeaderSection_EditHeader self, Handle_IFSelect_EditForm form, Handle_Standard_Transient ent, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_Load(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_APIHeaderSection_EditHeader self) -> char const *

        :rtype: const char *

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _APIHeaderSection.Handle_APIHeaderSection_EditHeader_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _APIHeaderSection.Handle_APIHeaderSection_EditHeader_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(Handle_APIHeaderSection_EditHeader self, Standard_Integer const num, Handle_Interface_TypedValue typval, Standard_CString const shortname, IFSelect_EditValue const accessmode=IFSelect_Editable)

        Sets a Typed Value for a given ident and short name, with an
        Edit Mode

        :type num: int
        :type typval: OCC.wrapper.Interface.Handle_Interface_TypedValue
        :type shortname: OCC.wrapper.Standard.Standard_CString
        :type accessmode: OCC.wrapper.IFSelect.IFSelect_EditValue

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_SetValue(self, *args)


    def SetList(self, *args):
        """
        SetList(Handle_APIHeaderSection_EditHeader self, Standard_Integer const num, Standard_Integer const max=0)

        Sets a parameter to be a List
        max < 0 : not for a list (set when starting)
        max = 0 : list with no length limit (default for SetList)
        max > 0 : list limited to <max> items

        :type num: int
        :type max: int

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_SetList(self, *args)


    def NbValues(self, *args):
        """
        NbValues(Handle_APIHeaderSection_EditHeader self) -> Standard_Integer

        Returns the count of Typed Values

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_NbValues(self, *args)


    def TypedValue(self, *args):
        """
        TypedValue(Handle_APIHeaderSection_EditHeader self, Standard_Integer const num) -> Handle_Interface_TypedValue

        Returns a Typed Value from its ident

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_TypedValue

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_TypedValue(self, *args)


    def IsList(self, *args):
        """
        IsList(Handle_APIHeaderSection_EditHeader self, Standard_Integer const num) -> Standard_Boolean

        Tells if a parameter is a list

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_IsList(self, *args)


    def MaxList(self, *args):
        """
        MaxList(Handle_APIHeaderSection_EditHeader self, Standard_Integer const num) -> Standard_Integer

        Returns max length allowed for a list
        = 0 means : list with no limit
        < 0 means : not a list

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_MaxList(self, *args)


    def Name(self, *args):
        """
        Name(Handle_APIHeaderSection_EditHeader self, Standard_Integer const num, Standard_Boolean const isshort) -> Standard_CString

        Returns the name of a Value (complete or short) from its ident
        Short Name can be empty

        :type num: int
        :type isshort: bool
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_Name(self, *args)


    def EditMode(self, *args):
        """
        EditMode(Handle_APIHeaderSection_EditHeader self, Standard_Integer const num) -> IFSelect_EditValue

        Returns the edit mode of a Value

        :type num: int
        :rtype: OCC.wrapper.IFSelect.IFSelect_EditValue

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_EditMode(self, *args)


    def NameNumber(self, *args):
        """
        NameNumber(Handle_APIHeaderSection_EditHeader self, Standard_CString const name) -> Standard_Integer

        Returns the number (ident) of a Value, from its name, short or
        complete. If not found, returns 0

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_NameNumber(self, *args)


    def PrintNames(self, *args):
        """
        PrintNames(Handle_APIHeaderSection_EditHeader self, Handle_Message_Messenger S)

        :type S: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_PrintNames(self, *args)


    def PrintDefs(self, *args):
        """
        PrintDefs(Handle_APIHeaderSection_EditHeader self, Handle_Message_Messenger S, Standard_Boolean const labels)

        :type S: OCC.wrapper.Message.Handle_Message_Messenger
        :type labels: bool

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_PrintDefs(self, *args)


    def MaxNameLength(self, *args):
        """
        MaxNameLength(Handle_APIHeaderSection_EditHeader self, Standard_Integer const what) -> Standard_Integer

        Returns the MaxLength of, according to what :
        <what> = -1 : length of short names
        <what> =  0 : length of complete names
        <what> =  1 : length of values labels

        :type what: int
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_MaxNameLength(self, *args)


    def Form(self, *args):
        """
        Form(Handle_APIHeaderSection_EditHeader self, Standard_Boolean const readonly, Standard_Boolean const undoable) -> Handle_IFSelect_EditForm

        Builds and Returns an EditForm, empty (no data yet)
        Can be redefined to return a specific type of EditForm

        :type readonly: bool
        :type undoable: bool
        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_Form(self, *args)


    def ListEditor(self, *args):
        """
        ListEditor(Handle_APIHeaderSection_EditHeader self, Standard_Integer const num) -> Handle_IFSelect_ListEditor

        Returns a ListEditor for a parameter which is a List
        Default returns a basic ListEditor for a List, a Null Handle
        if <num> is not for a List. Can be redefined

        :type num: int
        :rtype: OCC.wrapper.IFSelect.Handle_IFSelect_ListEditor

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_ListEditor(self, *args)


    def ListValue(self, *args):
        """
        ListValue(Handle_APIHeaderSection_EditHeader self, Handle_IFSelect_EditForm form, Standard_Integer const num) -> Handle_TColStd_HSequenceOfHAsciiString

        Returns the value of an EditForm as a List, for a given item
        If not a list, a Null Handle should be returned
        Default returns a Null Handle, because many Editors have
        no list to edit. To be redefined as required

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfHAsciiString

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_ListValue(self, *args)


    def Update(self, *args):
        """
        Update(Handle_APIHeaderSection_EditHeader self, Handle_IFSelect_EditForm form, Standard_Integer const num, Handle_TCollection_HAsciiString newval, Standard_Boolean const enforce) -> Standard_Boolean

        Updates the EditForm when a parameter is modified
        I.E.  default does nothing, can be redefined, as follows :
        Returns True when done (even if does nothing), False in case
        of refuse (for instance, if the new value is not suitable)
        <num> is the rank of the parameter for the EDITOR itself
        <enforce> True means that protected parameters can be touched

        If a parameter commands the value of other ones, when it is
        modified, it is necessary to touch them by Touch from EditForm

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :type newval: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type enforce: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_Update(self, *args)


    def UpdateList(self, *args):
        """
        UpdateList(Handle_APIHeaderSection_EditHeader self, Handle_IFSelect_EditForm form, Standard_Integer const num, Handle_TColStd_HSequenceOfHAsciiString newlist, Standard_Boolean const enforce) -> Standard_Boolean

        Acts as Update, but when the value is a list

        :type form: OCC.wrapper.IFSelect.Handle_IFSelect_EditForm
        :type num: int
        :type newlist: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfHAsciiString
        :type enforce: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_UpdateList(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_APIHeaderSection_EditHeader self)

        Memory deallocator for transient classes


        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_APIHeaderSection_EditHeader self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_APIHeaderSection_EditHeader self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_APIHeaderSection_EditHeader self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_APIHeaderSection_EditHeader self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_APIHeaderSection_EditHeader self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_APIHeaderSection_EditHeader self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_APIHeaderSection_EditHeader self)

        Increments the reference counter of this object


        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_APIHeaderSection_EditHeader self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_DecrementRefCounter(self, *args)

Handle_APIHeaderSection_EditHeader_swigregister = _APIHeaderSection.Handle_APIHeaderSection_EditHeader_swigregister
Handle_APIHeaderSection_EditHeader_swigregister(Handle_APIHeaderSection_EditHeader)

def Handle_APIHeaderSection_EditHeader_DownCast(thing):
    return _APIHeaderSection.Handle_APIHeaderSection_EditHeader_DownCast(thing)
Handle_APIHeaderSection_EditHeader_DownCast = _APIHeaderSection.Handle_APIHeaderSection_EditHeader_DownCast

class APIHeaderSection_MakeHeader(object):
    """
    This class allows to consult and prepare/edit  data stored in
    a Step Model  Header
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(APIHeaderSection_MakeHeader self, Standard_Integer const shapetype=0) -> APIHeaderSection_MakeHeader
        __init__(APIHeaderSection_MakeHeader self, Handle_StepData_StepModel model) -> APIHeaderSection_MakeHeader

        Prepares a MakeHeader from the content of a StepModel
        See IsDone to know if the Header is well defined

        :type model: OCC.wrapper.StepData.Handle_StepData_StepModel

        """
        this = _APIHeaderSection.new_APIHeaderSection_MakeHeader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(APIHeaderSection_MakeHeader self, Standard_CString const nameval)

        Cancels the former definition and gives a FileName
        To be used when a Model has no well defined Header

        :type nameval: OCC.wrapper.Standard.Standard_CString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_Init(self, *args)


    def IsDone(self, *args):
        """
        IsDone(APIHeaderSection_MakeHeader self) -> Standard_Boolean

        Returns True if all data have been defined (see also
        HasFn, HasFs, HasFd)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_IsDone(self, *args)


    def Apply(self, *args):
        """
        Apply(APIHeaderSection_MakeHeader self, Handle_StepData_StepModel model)

        Creates an empty header for a new
        STEP model and allows the header fields to be completed.

        :type model: OCC.wrapper.StepData.Handle_StepData_StepModel

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_Apply(self, *args)


    def NewModel(self, *args):
        """
        NewModel(APIHeaderSection_MakeHeader self, Handle_Interface_Protocol protocol) -> Handle_StepData_StepModel

        Builds a Header, creates a new StepModel, then applies the
        Header to the StepModel
        The Schema Name is taken from the Protocol (if it inherits
        from StepData, else it is left in blanks)

        :type protocol: OCC.wrapper.Interface.Handle_Interface_Protocol
        :rtype: OCC.wrapper.StepData.Handle_StepData_StepModel

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_NewModel(self, *args)


    def HasFn(self, *args):
        """
        HasFn(APIHeaderSection_MakeHeader self) -> Standard_Boolean

        Checks whether there is a
        file_name entity. Returns True if there is one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_HasFn(self, *args)


    def FnValue(self, *args):
        """
        FnValue(APIHeaderSection_MakeHeader self) -> Handle_HeaderSection_FileName

        Returns the file_name entity.
        Returns an empty entity if the file_name entity is not initialized.

        :rtype: OCC.wrapper.HeaderSection.Handle_HeaderSection_FileName

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_FnValue(self, *args)


    def SetName(self, *args):
        """
        SetName(APIHeaderSection_MakeHeader self, Handle_TCollection_HAsciiString aName)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_SetName(self, *args)


    def Name(self, *args):
        """
        Name(APIHeaderSection_MakeHeader self) -> Handle_TCollection_HAsciiString

        Returns the name attribute for the file_name entity.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_Name(self, *args)


    def SetTimeStamp(self, *args):
        """
        SetTimeStamp(APIHeaderSection_MakeHeader self, Handle_TCollection_HAsciiString aTimeStamp)

        :type aTimeStamp: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_SetTimeStamp(self, *args)


    def TimeStamp(self, *args):
        """
        TimeStamp(APIHeaderSection_MakeHeader self) -> Handle_TCollection_HAsciiString

        Returns the value of the time_stamp attribute for the file_name entity.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_TimeStamp(self, *args)


    def SetAuthor(self, *args):
        """
        SetAuthor(APIHeaderSection_MakeHeader self, Handle_Interface_HArray1OfHAsciiString aAuthor)

        :type aAuthor: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_SetAuthor(self, *args)


    def SetAuthorValue(self, *args):
        """
        SetAuthorValue(APIHeaderSection_MakeHeader self, Standard_Integer const num, Handle_TCollection_HAsciiString aAuthor)

        :type num: int
        :type aAuthor: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_SetAuthorValue(self, *args)


    def Author(self, *args):
        """
        Author(APIHeaderSection_MakeHeader self) -> Handle_Interface_HArray1OfHAsciiString

        :rtype: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_Author(self, *args)


    def AuthorValue(self, *args):
        """
        AuthorValue(APIHeaderSection_MakeHeader self, Standard_Integer const num) -> Handle_TCollection_HAsciiString

        Returns the value of the name attribute for the file_name entity.

        :type num: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_AuthorValue(self, *args)


    def NbAuthor(self, *args):
        """
        NbAuthor(APIHeaderSection_MakeHeader self) -> Standard_Integer

        Returns the number of values for the author attribute in the file_name entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_NbAuthor(self, *args)


    def SetOrganization(self, *args):
        """
        SetOrganization(APIHeaderSection_MakeHeader self, Handle_Interface_HArray1OfHAsciiString aOrganization)

        :type aOrganization: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_SetOrganization(self, *args)


    def SetOrganizationValue(self, *args):
        """
        SetOrganizationValue(APIHeaderSection_MakeHeader self, Standard_Integer const num, Handle_TCollection_HAsciiString aOrganization)

        :type num: int
        :type aOrganization: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_SetOrganizationValue(self, *args)


    def Organization(self, *args):
        """
        Organization(APIHeaderSection_MakeHeader self) -> Handle_Interface_HArray1OfHAsciiString

        :rtype: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_Organization(self, *args)


    def OrganizationValue(self, *args):
        """
        OrganizationValue(APIHeaderSection_MakeHeader self, Standard_Integer const num) -> Handle_TCollection_HAsciiString

        Returns the value of attribute
        organization for the file_name entity.

        :type num: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_OrganizationValue(self, *args)


    def NbOrganization(self, *args):
        """
        NbOrganization(APIHeaderSection_MakeHeader self) -> Standard_Integer

        Returns the number of values for
        the organization attribute in the file_name entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_NbOrganization(self, *args)


    def SetPreprocessorVersion(self, *args):
        """
        SetPreprocessorVersion(APIHeaderSection_MakeHeader self, Handle_TCollection_HAsciiString aPreprocessorVersion)

        :type aPreprocessorVersion: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_SetPreprocessorVersion(self, *args)


    def PreprocessorVersion(self, *args):
        """
        PreprocessorVersion(APIHeaderSection_MakeHeader self) -> Handle_TCollection_HAsciiString

        Returns the name of the preprocessor_version for the file_name entity.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_PreprocessorVersion(self, *args)


    def SetOriginatingSystem(self, *args):
        """
        SetOriginatingSystem(APIHeaderSection_MakeHeader self, Handle_TCollection_HAsciiString aOriginatingSystem)

        :type aOriginatingSystem: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_SetOriginatingSystem(self, *args)


    def OriginatingSystem(self, *args):
        """
        OriginatingSystem(APIHeaderSection_MakeHeader self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_OriginatingSystem(self, *args)


    def SetAuthorisation(self, *args):
        """
        SetAuthorisation(APIHeaderSection_MakeHeader self, Handle_TCollection_HAsciiString aAuthorisation)

        :type aAuthorisation: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_SetAuthorisation(self, *args)


    def Authorisation(self, *args):
        """
        Authorisation(APIHeaderSection_MakeHeader self) -> Handle_TCollection_HAsciiString

        Returns the value of the authorization attribute for the file_name entity.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_Authorisation(self, *args)


    def HasFs(self, *args):
        """
        HasFs(APIHeaderSection_MakeHeader self) -> Standard_Boolean

        Checks whether there is a file_schema entity. Returns True if there is one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_HasFs(self, *args)


    def FsValue(self, *args):
        """
        FsValue(APIHeaderSection_MakeHeader self) -> Handle_HeaderSection_FileSchema

        Returns the file_schema entity. Returns an empty entity if the file_schema entity is not initialized.

        :rtype: OCC.wrapper.HeaderSection.Handle_HeaderSection_FileSchema

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_FsValue(self, *args)


    def SetSchemaIdentifiers(self, *args):
        """
        SetSchemaIdentifiers(APIHeaderSection_MakeHeader self, Handle_Interface_HArray1OfHAsciiString aSchemaIdentifiers)

        :type aSchemaIdentifiers: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_SetSchemaIdentifiers(self, *args)


    def SetSchemaIdentifiersValue(self, *args):
        """
        SetSchemaIdentifiersValue(APIHeaderSection_MakeHeader self, Standard_Integer const num, Handle_TCollection_HAsciiString aSchemaIdentifier)

        :type num: int
        :type aSchemaIdentifier: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_SetSchemaIdentifiersValue(self, *args)


    def SchemaIdentifiers(self, *args):
        """
        SchemaIdentifiers(APIHeaderSection_MakeHeader self) -> Handle_Interface_HArray1OfHAsciiString

        :rtype: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_SchemaIdentifiers(self, *args)


    def SchemaIdentifiersValue(self, *args):
        """
        SchemaIdentifiersValue(APIHeaderSection_MakeHeader self, Standard_Integer const num) -> Handle_TCollection_HAsciiString

        Returns the value of the schema_identifier attribute for the file_schema entity.

        :type num: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_SchemaIdentifiersValue(self, *args)


    def NbSchemaIdentifiers(self, *args):
        """
        NbSchemaIdentifiers(APIHeaderSection_MakeHeader self) -> Standard_Integer

        Returns the number of values for the schema_identifier attribute in the file_schema entity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_NbSchemaIdentifiers(self, *args)


    def AddSchemaIdentifier(self, *args):
        """
        AddSchemaIdentifier(APIHeaderSection_MakeHeader self, Handle_TCollection_HAsciiString aSchemaIdentifier)

        Add a subname of schema (if not yet in the list)

        :type aSchemaIdentifier: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_AddSchemaIdentifier(self, *args)


    def HasFd(self, *args):
        """
        HasFd(APIHeaderSection_MakeHeader self) -> Standard_Boolean

        Checks whether there is a file_description entity. Returns True if there is one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_HasFd(self, *args)


    def FdValue(self, *args):
        """
        FdValue(APIHeaderSection_MakeHeader self) -> Handle_HeaderSection_FileDescription

        Returns the file_description
        entity. Returns an empty entity if the file_description entity is not initialized.

        :rtype: OCC.wrapper.HeaderSection.Handle_HeaderSection_FileDescription

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_FdValue(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(APIHeaderSection_MakeHeader self, Handle_Interface_HArray1OfHAsciiString aDescription)

        :type aDescription: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_SetDescription(self, *args)


    def SetDescriptionValue(self, *args):
        """
        SetDescriptionValue(APIHeaderSection_MakeHeader self, Standard_Integer const num, Handle_TCollection_HAsciiString aDescription)

        :type num: int
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_SetDescriptionValue(self, *args)


    def Description(self, *args):
        """
        Description(APIHeaderSection_MakeHeader self) -> Handle_Interface_HArray1OfHAsciiString

        :rtype: OCC.wrapper.Interface.Handle_Interface_HArray1OfHAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_Description(self, *args)


    def DescriptionValue(self, *args):
        """
        DescriptionValue(APIHeaderSection_MakeHeader self, Standard_Integer const num) -> Handle_TCollection_HAsciiString

        Returns the value of the
        description attribute for the file_description entity.

        :type num: int
        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_DescriptionValue(self, *args)


    def NbDescription(self, *args):
        """
        NbDescription(APIHeaderSection_MakeHeader self) -> Standard_Integer

        Returns the number of values for
        the file_description entity in the STEP file header.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_NbDescription(self, *args)


    def SetImplementationLevel(self, *args):
        """
        SetImplementationLevel(APIHeaderSection_MakeHeader self, Handle_TCollection_HAsciiString aImplementationLevel)

        :type aImplementationLevel: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_SetImplementationLevel(self, *args)


    def ImplementationLevel(self, *args):
        """
        ImplementationLevel(APIHeaderSection_MakeHeader self) -> Handle_TCollection_HAsciiString

        Returns the value of the
        implementation_level attribute for the file_description entity.

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _APIHeaderSection.APIHeaderSection_MakeHeader_ImplementationLevel(self, *args)

    __swig_destroy__ = _APIHeaderSection.delete_APIHeaderSection_MakeHeader
APIHeaderSection_MakeHeader_swigregister = _APIHeaderSection.APIHeaderSection_MakeHeader_swigregister
APIHeaderSection_MakeHeader_swigregister(APIHeaderSection_MakeHeader)



