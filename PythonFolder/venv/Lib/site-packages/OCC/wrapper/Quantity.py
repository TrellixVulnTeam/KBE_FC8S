# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Quantity')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Quantity')
    _Quantity = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Quantity', [dirname(__file__)])
        except ImportError:
            import _Quantity
            return _Quantity
        try:
            _mod = imp.load_module('_Quantity', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Quantity = swig_import_helper()
    del swig_import_helper
else:
    import _Quantity
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Quantity.delete_SwigPyIterator

    def value(self):
        return _Quantity.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Quantity.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Quantity.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Quantity.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Quantity.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Quantity.SwigPyIterator_copy(self)

    def next(self):
        return _Quantity.SwigPyIterator_next(self)

    def __next__(self):
        return _Quantity.SwigPyIterator___next__(self)

    def previous(self):
        return _Quantity.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Quantity.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Quantity.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Quantity.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Quantity.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Quantity.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Quantity.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Quantity.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Quantity.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Quantity.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_Quantity.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _Quantity.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Quantity.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Quantity.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _Quantity.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _Quantity.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _Quantity.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Quantity.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_Quantity.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _Quantity.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Quantity.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Quantity.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _Quantity.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _Quantity.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _Quantity.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _Quantity.ptr_to_number(item)
ptr_to_number = _Quantity.ptr_to_number

def HashCode(*args):
    return _Quantity.HashCode(*args)
HashCode = _Quantity.HashCode

def ptr_equal(a, b):
    return _Quantity.ptr_equal(a, b)
ptr_equal = _Quantity.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
Quantity_NOC_BLACK = _Quantity.Quantity_NOC_BLACK
Quantity_NOC_MATRABLUE = _Quantity.Quantity_NOC_MATRABLUE
Quantity_NOC_MATRAGRAY = _Quantity.Quantity_NOC_MATRAGRAY
Quantity_NOC_ALICEBLUE = _Quantity.Quantity_NOC_ALICEBLUE
Quantity_NOC_ANTIQUEWHITE = _Quantity.Quantity_NOC_ANTIQUEWHITE
Quantity_NOC_ANTIQUEWHITE1 = _Quantity.Quantity_NOC_ANTIQUEWHITE1
Quantity_NOC_ANTIQUEWHITE2 = _Quantity.Quantity_NOC_ANTIQUEWHITE2
Quantity_NOC_ANTIQUEWHITE3 = _Quantity.Quantity_NOC_ANTIQUEWHITE3
Quantity_NOC_ANTIQUEWHITE4 = _Quantity.Quantity_NOC_ANTIQUEWHITE4
Quantity_NOC_AQUAMARINE1 = _Quantity.Quantity_NOC_AQUAMARINE1
Quantity_NOC_AQUAMARINE2 = _Quantity.Quantity_NOC_AQUAMARINE2
Quantity_NOC_AQUAMARINE4 = _Quantity.Quantity_NOC_AQUAMARINE4
Quantity_NOC_AZURE = _Quantity.Quantity_NOC_AZURE
Quantity_NOC_AZURE2 = _Quantity.Quantity_NOC_AZURE2
Quantity_NOC_AZURE3 = _Quantity.Quantity_NOC_AZURE3
Quantity_NOC_AZURE4 = _Quantity.Quantity_NOC_AZURE4
Quantity_NOC_BEIGE = _Quantity.Quantity_NOC_BEIGE
Quantity_NOC_BISQUE = _Quantity.Quantity_NOC_BISQUE
Quantity_NOC_BISQUE2 = _Quantity.Quantity_NOC_BISQUE2
Quantity_NOC_BISQUE3 = _Quantity.Quantity_NOC_BISQUE3
Quantity_NOC_BISQUE4 = _Quantity.Quantity_NOC_BISQUE4
Quantity_NOC_BLANCHEDALMOND = _Quantity.Quantity_NOC_BLANCHEDALMOND
Quantity_NOC_BLUE1 = _Quantity.Quantity_NOC_BLUE1
Quantity_NOC_BLUE2 = _Quantity.Quantity_NOC_BLUE2
Quantity_NOC_BLUE3 = _Quantity.Quantity_NOC_BLUE3
Quantity_NOC_BLUE4 = _Quantity.Quantity_NOC_BLUE4
Quantity_NOC_BLUEVIOLET = _Quantity.Quantity_NOC_BLUEVIOLET
Quantity_NOC_BROWN = _Quantity.Quantity_NOC_BROWN
Quantity_NOC_BROWN1 = _Quantity.Quantity_NOC_BROWN1
Quantity_NOC_BROWN2 = _Quantity.Quantity_NOC_BROWN2
Quantity_NOC_BROWN3 = _Quantity.Quantity_NOC_BROWN3
Quantity_NOC_BROWN4 = _Quantity.Quantity_NOC_BROWN4
Quantity_NOC_BURLYWOOD = _Quantity.Quantity_NOC_BURLYWOOD
Quantity_NOC_BURLYWOOD1 = _Quantity.Quantity_NOC_BURLYWOOD1
Quantity_NOC_BURLYWOOD2 = _Quantity.Quantity_NOC_BURLYWOOD2
Quantity_NOC_BURLYWOOD3 = _Quantity.Quantity_NOC_BURLYWOOD3
Quantity_NOC_BURLYWOOD4 = _Quantity.Quantity_NOC_BURLYWOOD4
Quantity_NOC_CADETBLUE = _Quantity.Quantity_NOC_CADETBLUE
Quantity_NOC_CADETBLUE1 = _Quantity.Quantity_NOC_CADETBLUE1
Quantity_NOC_CADETBLUE2 = _Quantity.Quantity_NOC_CADETBLUE2
Quantity_NOC_CADETBLUE3 = _Quantity.Quantity_NOC_CADETBLUE3
Quantity_NOC_CADETBLUE4 = _Quantity.Quantity_NOC_CADETBLUE4
Quantity_NOC_CHARTREUSE = _Quantity.Quantity_NOC_CHARTREUSE
Quantity_NOC_CHARTREUSE1 = _Quantity.Quantity_NOC_CHARTREUSE1
Quantity_NOC_CHARTREUSE2 = _Quantity.Quantity_NOC_CHARTREUSE2
Quantity_NOC_CHARTREUSE3 = _Quantity.Quantity_NOC_CHARTREUSE3
Quantity_NOC_CHARTREUSE4 = _Quantity.Quantity_NOC_CHARTREUSE4
Quantity_NOC_CHOCOLATE = _Quantity.Quantity_NOC_CHOCOLATE
Quantity_NOC_CHOCOLATE1 = _Quantity.Quantity_NOC_CHOCOLATE1
Quantity_NOC_CHOCOLATE2 = _Quantity.Quantity_NOC_CHOCOLATE2
Quantity_NOC_CHOCOLATE3 = _Quantity.Quantity_NOC_CHOCOLATE3
Quantity_NOC_CHOCOLATE4 = _Quantity.Quantity_NOC_CHOCOLATE4
Quantity_NOC_CORAL = _Quantity.Quantity_NOC_CORAL
Quantity_NOC_CORAL1 = _Quantity.Quantity_NOC_CORAL1
Quantity_NOC_CORAL2 = _Quantity.Quantity_NOC_CORAL2
Quantity_NOC_CORAL3 = _Quantity.Quantity_NOC_CORAL3
Quantity_NOC_CORAL4 = _Quantity.Quantity_NOC_CORAL4
Quantity_NOC_CORNFLOWERBLUE = _Quantity.Quantity_NOC_CORNFLOWERBLUE
Quantity_NOC_CORNSILK1 = _Quantity.Quantity_NOC_CORNSILK1
Quantity_NOC_CORNSILK2 = _Quantity.Quantity_NOC_CORNSILK2
Quantity_NOC_CORNSILK3 = _Quantity.Quantity_NOC_CORNSILK3
Quantity_NOC_CORNSILK4 = _Quantity.Quantity_NOC_CORNSILK4
Quantity_NOC_CYAN1 = _Quantity.Quantity_NOC_CYAN1
Quantity_NOC_CYAN2 = _Quantity.Quantity_NOC_CYAN2
Quantity_NOC_CYAN3 = _Quantity.Quantity_NOC_CYAN3
Quantity_NOC_CYAN4 = _Quantity.Quantity_NOC_CYAN4
Quantity_NOC_DARKGOLDENROD = _Quantity.Quantity_NOC_DARKGOLDENROD
Quantity_NOC_DARKGOLDENROD1 = _Quantity.Quantity_NOC_DARKGOLDENROD1
Quantity_NOC_DARKGOLDENROD2 = _Quantity.Quantity_NOC_DARKGOLDENROD2
Quantity_NOC_DARKGOLDENROD3 = _Quantity.Quantity_NOC_DARKGOLDENROD3
Quantity_NOC_DARKGOLDENROD4 = _Quantity.Quantity_NOC_DARKGOLDENROD4
Quantity_NOC_DARKGREEN = _Quantity.Quantity_NOC_DARKGREEN
Quantity_NOC_DARKKHAKI = _Quantity.Quantity_NOC_DARKKHAKI
Quantity_NOC_DARKOLIVEGREEN = _Quantity.Quantity_NOC_DARKOLIVEGREEN
Quantity_NOC_DARKOLIVEGREEN1 = _Quantity.Quantity_NOC_DARKOLIVEGREEN1
Quantity_NOC_DARKOLIVEGREEN2 = _Quantity.Quantity_NOC_DARKOLIVEGREEN2
Quantity_NOC_DARKOLIVEGREEN3 = _Quantity.Quantity_NOC_DARKOLIVEGREEN3
Quantity_NOC_DARKOLIVEGREEN4 = _Quantity.Quantity_NOC_DARKOLIVEGREEN4
Quantity_NOC_DARKORANGE = _Quantity.Quantity_NOC_DARKORANGE
Quantity_NOC_DARKORANGE1 = _Quantity.Quantity_NOC_DARKORANGE1
Quantity_NOC_DARKORANGE2 = _Quantity.Quantity_NOC_DARKORANGE2
Quantity_NOC_DARKORANGE3 = _Quantity.Quantity_NOC_DARKORANGE3
Quantity_NOC_DARKORANGE4 = _Quantity.Quantity_NOC_DARKORANGE4
Quantity_NOC_DARKORCHID = _Quantity.Quantity_NOC_DARKORCHID
Quantity_NOC_DARKORCHID1 = _Quantity.Quantity_NOC_DARKORCHID1
Quantity_NOC_DARKORCHID2 = _Quantity.Quantity_NOC_DARKORCHID2
Quantity_NOC_DARKORCHID3 = _Quantity.Quantity_NOC_DARKORCHID3
Quantity_NOC_DARKORCHID4 = _Quantity.Quantity_NOC_DARKORCHID4
Quantity_NOC_DARKSALMON = _Quantity.Quantity_NOC_DARKSALMON
Quantity_NOC_DARKSEAGREEN = _Quantity.Quantity_NOC_DARKSEAGREEN
Quantity_NOC_DARKSEAGREEN1 = _Quantity.Quantity_NOC_DARKSEAGREEN1
Quantity_NOC_DARKSEAGREEN2 = _Quantity.Quantity_NOC_DARKSEAGREEN2
Quantity_NOC_DARKSEAGREEN3 = _Quantity.Quantity_NOC_DARKSEAGREEN3
Quantity_NOC_DARKSEAGREEN4 = _Quantity.Quantity_NOC_DARKSEAGREEN4
Quantity_NOC_DARKSLATEBLUE = _Quantity.Quantity_NOC_DARKSLATEBLUE
Quantity_NOC_DARKSLATEGRAY1 = _Quantity.Quantity_NOC_DARKSLATEGRAY1
Quantity_NOC_DARKSLATEGRAY2 = _Quantity.Quantity_NOC_DARKSLATEGRAY2
Quantity_NOC_DARKSLATEGRAY3 = _Quantity.Quantity_NOC_DARKSLATEGRAY3
Quantity_NOC_DARKSLATEGRAY4 = _Quantity.Quantity_NOC_DARKSLATEGRAY4
Quantity_NOC_DARKSLATEGRAY = _Quantity.Quantity_NOC_DARKSLATEGRAY
Quantity_NOC_DARKTURQUOISE = _Quantity.Quantity_NOC_DARKTURQUOISE
Quantity_NOC_DARKVIOLET = _Quantity.Quantity_NOC_DARKVIOLET
Quantity_NOC_DEEPPINK = _Quantity.Quantity_NOC_DEEPPINK
Quantity_NOC_DEEPPINK2 = _Quantity.Quantity_NOC_DEEPPINK2
Quantity_NOC_DEEPPINK3 = _Quantity.Quantity_NOC_DEEPPINK3
Quantity_NOC_DEEPPINK4 = _Quantity.Quantity_NOC_DEEPPINK4
Quantity_NOC_DEEPSKYBLUE1 = _Quantity.Quantity_NOC_DEEPSKYBLUE1
Quantity_NOC_DEEPSKYBLUE2 = _Quantity.Quantity_NOC_DEEPSKYBLUE2
Quantity_NOC_DEEPSKYBLUE3 = _Quantity.Quantity_NOC_DEEPSKYBLUE3
Quantity_NOC_DEEPSKYBLUE4 = _Quantity.Quantity_NOC_DEEPSKYBLUE4
Quantity_NOC_DODGERBLUE1 = _Quantity.Quantity_NOC_DODGERBLUE1
Quantity_NOC_DODGERBLUE2 = _Quantity.Quantity_NOC_DODGERBLUE2
Quantity_NOC_DODGERBLUE3 = _Quantity.Quantity_NOC_DODGERBLUE3
Quantity_NOC_DODGERBLUE4 = _Quantity.Quantity_NOC_DODGERBLUE4
Quantity_NOC_FIREBRICK = _Quantity.Quantity_NOC_FIREBRICK
Quantity_NOC_FIREBRICK1 = _Quantity.Quantity_NOC_FIREBRICK1
Quantity_NOC_FIREBRICK2 = _Quantity.Quantity_NOC_FIREBRICK2
Quantity_NOC_FIREBRICK3 = _Quantity.Quantity_NOC_FIREBRICK3
Quantity_NOC_FIREBRICK4 = _Quantity.Quantity_NOC_FIREBRICK4
Quantity_NOC_FLORALWHITE = _Quantity.Quantity_NOC_FLORALWHITE
Quantity_NOC_FORESTGREEN = _Quantity.Quantity_NOC_FORESTGREEN
Quantity_NOC_GAINSBORO = _Quantity.Quantity_NOC_GAINSBORO
Quantity_NOC_GHOSTWHITE = _Quantity.Quantity_NOC_GHOSTWHITE
Quantity_NOC_GOLD = _Quantity.Quantity_NOC_GOLD
Quantity_NOC_GOLD1 = _Quantity.Quantity_NOC_GOLD1
Quantity_NOC_GOLD2 = _Quantity.Quantity_NOC_GOLD2
Quantity_NOC_GOLD3 = _Quantity.Quantity_NOC_GOLD3
Quantity_NOC_GOLD4 = _Quantity.Quantity_NOC_GOLD4
Quantity_NOC_GOLDENROD = _Quantity.Quantity_NOC_GOLDENROD
Quantity_NOC_GOLDENROD1 = _Quantity.Quantity_NOC_GOLDENROD1
Quantity_NOC_GOLDENROD2 = _Quantity.Quantity_NOC_GOLDENROD2
Quantity_NOC_GOLDENROD3 = _Quantity.Quantity_NOC_GOLDENROD3
Quantity_NOC_GOLDENROD4 = _Quantity.Quantity_NOC_GOLDENROD4
Quantity_NOC_GRAY = _Quantity.Quantity_NOC_GRAY
Quantity_NOC_GRAY0 = _Quantity.Quantity_NOC_GRAY0
Quantity_NOC_GRAY1 = _Quantity.Quantity_NOC_GRAY1
Quantity_NOC_GRAY10 = _Quantity.Quantity_NOC_GRAY10
Quantity_NOC_GRAY11 = _Quantity.Quantity_NOC_GRAY11
Quantity_NOC_GRAY12 = _Quantity.Quantity_NOC_GRAY12
Quantity_NOC_GRAY13 = _Quantity.Quantity_NOC_GRAY13
Quantity_NOC_GRAY14 = _Quantity.Quantity_NOC_GRAY14
Quantity_NOC_GRAY15 = _Quantity.Quantity_NOC_GRAY15
Quantity_NOC_GRAY16 = _Quantity.Quantity_NOC_GRAY16
Quantity_NOC_GRAY17 = _Quantity.Quantity_NOC_GRAY17
Quantity_NOC_GRAY18 = _Quantity.Quantity_NOC_GRAY18
Quantity_NOC_GRAY19 = _Quantity.Quantity_NOC_GRAY19
Quantity_NOC_GRAY2 = _Quantity.Quantity_NOC_GRAY2
Quantity_NOC_GRAY20 = _Quantity.Quantity_NOC_GRAY20
Quantity_NOC_GRAY21 = _Quantity.Quantity_NOC_GRAY21
Quantity_NOC_GRAY22 = _Quantity.Quantity_NOC_GRAY22
Quantity_NOC_GRAY23 = _Quantity.Quantity_NOC_GRAY23
Quantity_NOC_GRAY24 = _Quantity.Quantity_NOC_GRAY24
Quantity_NOC_GRAY25 = _Quantity.Quantity_NOC_GRAY25
Quantity_NOC_GRAY26 = _Quantity.Quantity_NOC_GRAY26
Quantity_NOC_GRAY27 = _Quantity.Quantity_NOC_GRAY27
Quantity_NOC_GRAY28 = _Quantity.Quantity_NOC_GRAY28
Quantity_NOC_GRAY29 = _Quantity.Quantity_NOC_GRAY29
Quantity_NOC_GRAY3 = _Quantity.Quantity_NOC_GRAY3
Quantity_NOC_GRAY30 = _Quantity.Quantity_NOC_GRAY30
Quantity_NOC_GRAY31 = _Quantity.Quantity_NOC_GRAY31
Quantity_NOC_GRAY32 = _Quantity.Quantity_NOC_GRAY32
Quantity_NOC_GRAY33 = _Quantity.Quantity_NOC_GRAY33
Quantity_NOC_GRAY34 = _Quantity.Quantity_NOC_GRAY34
Quantity_NOC_GRAY35 = _Quantity.Quantity_NOC_GRAY35
Quantity_NOC_GRAY36 = _Quantity.Quantity_NOC_GRAY36
Quantity_NOC_GRAY37 = _Quantity.Quantity_NOC_GRAY37
Quantity_NOC_GRAY38 = _Quantity.Quantity_NOC_GRAY38
Quantity_NOC_GRAY39 = _Quantity.Quantity_NOC_GRAY39
Quantity_NOC_GRAY4 = _Quantity.Quantity_NOC_GRAY4
Quantity_NOC_GRAY40 = _Quantity.Quantity_NOC_GRAY40
Quantity_NOC_GRAY41 = _Quantity.Quantity_NOC_GRAY41
Quantity_NOC_GRAY42 = _Quantity.Quantity_NOC_GRAY42
Quantity_NOC_GRAY43 = _Quantity.Quantity_NOC_GRAY43
Quantity_NOC_GRAY44 = _Quantity.Quantity_NOC_GRAY44
Quantity_NOC_GRAY45 = _Quantity.Quantity_NOC_GRAY45
Quantity_NOC_GRAY46 = _Quantity.Quantity_NOC_GRAY46
Quantity_NOC_GRAY47 = _Quantity.Quantity_NOC_GRAY47
Quantity_NOC_GRAY48 = _Quantity.Quantity_NOC_GRAY48
Quantity_NOC_GRAY49 = _Quantity.Quantity_NOC_GRAY49
Quantity_NOC_GRAY5 = _Quantity.Quantity_NOC_GRAY5
Quantity_NOC_GRAY50 = _Quantity.Quantity_NOC_GRAY50
Quantity_NOC_GRAY51 = _Quantity.Quantity_NOC_GRAY51
Quantity_NOC_GRAY52 = _Quantity.Quantity_NOC_GRAY52
Quantity_NOC_GRAY53 = _Quantity.Quantity_NOC_GRAY53
Quantity_NOC_GRAY54 = _Quantity.Quantity_NOC_GRAY54
Quantity_NOC_GRAY55 = _Quantity.Quantity_NOC_GRAY55
Quantity_NOC_GRAY56 = _Quantity.Quantity_NOC_GRAY56
Quantity_NOC_GRAY57 = _Quantity.Quantity_NOC_GRAY57
Quantity_NOC_GRAY58 = _Quantity.Quantity_NOC_GRAY58
Quantity_NOC_GRAY59 = _Quantity.Quantity_NOC_GRAY59
Quantity_NOC_GRAY6 = _Quantity.Quantity_NOC_GRAY6
Quantity_NOC_GRAY60 = _Quantity.Quantity_NOC_GRAY60
Quantity_NOC_GRAY61 = _Quantity.Quantity_NOC_GRAY61
Quantity_NOC_GRAY62 = _Quantity.Quantity_NOC_GRAY62
Quantity_NOC_GRAY63 = _Quantity.Quantity_NOC_GRAY63
Quantity_NOC_GRAY64 = _Quantity.Quantity_NOC_GRAY64
Quantity_NOC_GRAY65 = _Quantity.Quantity_NOC_GRAY65
Quantity_NOC_GRAY66 = _Quantity.Quantity_NOC_GRAY66
Quantity_NOC_GRAY67 = _Quantity.Quantity_NOC_GRAY67
Quantity_NOC_GRAY68 = _Quantity.Quantity_NOC_GRAY68
Quantity_NOC_GRAY69 = _Quantity.Quantity_NOC_GRAY69
Quantity_NOC_GRAY7 = _Quantity.Quantity_NOC_GRAY7
Quantity_NOC_GRAY70 = _Quantity.Quantity_NOC_GRAY70
Quantity_NOC_GRAY71 = _Quantity.Quantity_NOC_GRAY71
Quantity_NOC_GRAY72 = _Quantity.Quantity_NOC_GRAY72
Quantity_NOC_GRAY73 = _Quantity.Quantity_NOC_GRAY73
Quantity_NOC_GRAY74 = _Quantity.Quantity_NOC_GRAY74
Quantity_NOC_GRAY75 = _Quantity.Quantity_NOC_GRAY75
Quantity_NOC_GRAY76 = _Quantity.Quantity_NOC_GRAY76
Quantity_NOC_GRAY77 = _Quantity.Quantity_NOC_GRAY77
Quantity_NOC_GRAY78 = _Quantity.Quantity_NOC_GRAY78
Quantity_NOC_GRAY79 = _Quantity.Quantity_NOC_GRAY79
Quantity_NOC_GRAY8 = _Quantity.Quantity_NOC_GRAY8
Quantity_NOC_GRAY80 = _Quantity.Quantity_NOC_GRAY80
Quantity_NOC_GRAY81 = _Quantity.Quantity_NOC_GRAY81
Quantity_NOC_GRAY82 = _Quantity.Quantity_NOC_GRAY82
Quantity_NOC_GRAY83 = _Quantity.Quantity_NOC_GRAY83
Quantity_NOC_GRAY85 = _Quantity.Quantity_NOC_GRAY85
Quantity_NOC_GRAY86 = _Quantity.Quantity_NOC_GRAY86
Quantity_NOC_GRAY87 = _Quantity.Quantity_NOC_GRAY87
Quantity_NOC_GRAY88 = _Quantity.Quantity_NOC_GRAY88
Quantity_NOC_GRAY89 = _Quantity.Quantity_NOC_GRAY89
Quantity_NOC_GRAY9 = _Quantity.Quantity_NOC_GRAY9
Quantity_NOC_GRAY90 = _Quantity.Quantity_NOC_GRAY90
Quantity_NOC_GRAY91 = _Quantity.Quantity_NOC_GRAY91
Quantity_NOC_GRAY92 = _Quantity.Quantity_NOC_GRAY92
Quantity_NOC_GRAY93 = _Quantity.Quantity_NOC_GRAY93
Quantity_NOC_GRAY94 = _Quantity.Quantity_NOC_GRAY94
Quantity_NOC_GRAY95 = _Quantity.Quantity_NOC_GRAY95
Quantity_NOC_GREEN = _Quantity.Quantity_NOC_GREEN
Quantity_NOC_GREEN1 = _Quantity.Quantity_NOC_GREEN1
Quantity_NOC_GREEN2 = _Quantity.Quantity_NOC_GREEN2
Quantity_NOC_GREEN3 = _Quantity.Quantity_NOC_GREEN3
Quantity_NOC_GREEN4 = _Quantity.Quantity_NOC_GREEN4
Quantity_NOC_GREENYELLOW = _Quantity.Quantity_NOC_GREENYELLOW
Quantity_NOC_GRAY97 = _Quantity.Quantity_NOC_GRAY97
Quantity_NOC_GRAY98 = _Quantity.Quantity_NOC_GRAY98
Quantity_NOC_GRAY99 = _Quantity.Quantity_NOC_GRAY99
Quantity_NOC_HONEYDEW = _Quantity.Quantity_NOC_HONEYDEW
Quantity_NOC_HONEYDEW2 = _Quantity.Quantity_NOC_HONEYDEW2
Quantity_NOC_HONEYDEW3 = _Quantity.Quantity_NOC_HONEYDEW3
Quantity_NOC_HONEYDEW4 = _Quantity.Quantity_NOC_HONEYDEW4
Quantity_NOC_HOTPINK = _Quantity.Quantity_NOC_HOTPINK
Quantity_NOC_HOTPINK1 = _Quantity.Quantity_NOC_HOTPINK1
Quantity_NOC_HOTPINK2 = _Quantity.Quantity_NOC_HOTPINK2
Quantity_NOC_HOTPINK3 = _Quantity.Quantity_NOC_HOTPINK3
Quantity_NOC_HOTPINK4 = _Quantity.Quantity_NOC_HOTPINK4
Quantity_NOC_INDIANRED = _Quantity.Quantity_NOC_INDIANRED
Quantity_NOC_INDIANRED1 = _Quantity.Quantity_NOC_INDIANRED1
Quantity_NOC_INDIANRED2 = _Quantity.Quantity_NOC_INDIANRED2
Quantity_NOC_INDIANRED3 = _Quantity.Quantity_NOC_INDIANRED3
Quantity_NOC_INDIANRED4 = _Quantity.Quantity_NOC_INDIANRED4
Quantity_NOC_IVORY = _Quantity.Quantity_NOC_IVORY
Quantity_NOC_IVORY2 = _Quantity.Quantity_NOC_IVORY2
Quantity_NOC_IVORY3 = _Quantity.Quantity_NOC_IVORY3
Quantity_NOC_IVORY4 = _Quantity.Quantity_NOC_IVORY4
Quantity_NOC_KHAKI = _Quantity.Quantity_NOC_KHAKI
Quantity_NOC_KHAKI1 = _Quantity.Quantity_NOC_KHAKI1
Quantity_NOC_KHAKI2 = _Quantity.Quantity_NOC_KHAKI2
Quantity_NOC_KHAKI3 = _Quantity.Quantity_NOC_KHAKI3
Quantity_NOC_KHAKI4 = _Quantity.Quantity_NOC_KHAKI4
Quantity_NOC_LAVENDER = _Quantity.Quantity_NOC_LAVENDER
Quantity_NOC_LAVENDERBLUSH1 = _Quantity.Quantity_NOC_LAVENDERBLUSH1
Quantity_NOC_LAVENDERBLUSH2 = _Quantity.Quantity_NOC_LAVENDERBLUSH2
Quantity_NOC_LAVENDERBLUSH3 = _Quantity.Quantity_NOC_LAVENDERBLUSH3
Quantity_NOC_LAVENDERBLUSH4 = _Quantity.Quantity_NOC_LAVENDERBLUSH4
Quantity_NOC_LAWNGREEN = _Quantity.Quantity_NOC_LAWNGREEN
Quantity_NOC_LEMONCHIFFON1 = _Quantity.Quantity_NOC_LEMONCHIFFON1
Quantity_NOC_LEMONCHIFFON2 = _Quantity.Quantity_NOC_LEMONCHIFFON2
Quantity_NOC_LEMONCHIFFON3 = _Quantity.Quantity_NOC_LEMONCHIFFON3
Quantity_NOC_LEMONCHIFFON4 = _Quantity.Quantity_NOC_LEMONCHIFFON4
Quantity_NOC_LIGHTBLUE = _Quantity.Quantity_NOC_LIGHTBLUE
Quantity_NOC_LIGHTBLUE1 = _Quantity.Quantity_NOC_LIGHTBLUE1
Quantity_NOC_LIGHTBLUE2 = _Quantity.Quantity_NOC_LIGHTBLUE2
Quantity_NOC_LIGHTBLUE3 = _Quantity.Quantity_NOC_LIGHTBLUE3
Quantity_NOC_LIGHTBLUE4 = _Quantity.Quantity_NOC_LIGHTBLUE4
Quantity_NOC_LIGHTCORAL = _Quantity.Quantity_NOC_LIGHTCORAL
Quantity_NOC_LIGHTCYAN1 = _Quantity.Quantity_NOC_LIGHTCYAN1
Quantity_NOC_LIGHTCYAN2 = _Quantity.Quantity_NOC_LIGHTCYAN2
Quantity_NOC_LIGHTCYAN3 = _Quantity.Quantity_NOC_LIGHTCYAN3
Quantity_NOC_LIGHTCYAN4 = _Quantity.Quantity_NOC_LIGHTCYAN4
Quantity_NOC_LIGHTGOLDENROD = _Quantity.Quantity_NOC_LIGHTGOLDENROD
Quantity_NOC_LIGHTGOLDENROD1 = _Quantity.Quantity_NOC_LIGHTGOLDENROD1
Quantity_NOC_LIGHTGOLDENROD2 = _Quantity.Quantity_NOC_LIGHTGOLDENROD2
Quantity_NOC_LIGHTGOLDENROD3 = _Quantity.Quantity_NOC_LIGHTGOLDENROD3
Quantity_NOC_LIGHTGOLDENROD4 = _Quantity.Quantity_NOC_LIGHTGOLDENROD4
Quantity_NOC_LIGHTGOLDENRODYELLOW = _Quantity.Quantity_NOC_LIGHTGOLDENRODYELLOW
Quantity_NOC_LIGHTGRAY = _Quantity.Quantity_NOC_LIGHTGRAY
Quantity_NOC_LIGHTPINK = _Quantity.Quantity_NOC_LIGHTPINK
Quantity_NOC_LIGHTPINK1 = _Quantity.Quantity_NOC_LIGHTPINK1
Quantity_NOC_LIGHTPINK2 = _Quantity.Quantity_NOC_LIGHTPINK2
Quantity_NOC_LIGHTPINK3 = _Quantity.Quantity_NOC_LIGHTPINK3
Quantity_NOC_LIGHTPINK4 = _Quantity.Quantity_NOC_LIGHTPINK4
Quantity_NOC_LIGHTSALMON1 = _Quantity.Quantity_NOC_LIGHTSALMON1
Quantity_NOC_LIGHTSALMON2 = _Quantity.Quantity_NOC_LIGHTSALMON2
Quantity_NOC_LIGHTSALMON3 = _Quantity.Quantity_NOC_LIGHTSALMON3
Quantity_NOC_LIGHTSALMON4 = _Quantity.Quantity_NOC_LIGHTSALMON4
Quantity_NOC_LIGHTSEAGREEN = _Quantity.Quantity_NOC_LIGHTSEAGREEN
Quantity_NOC_LIGHTSKYBLUE = _Quantity.Quantity_NOC_LIGHTSKYBLUE
Quantity_NOC_LIGHTSKYBLUE1 = _Quantity.Quantity_NOC_LIGHTSKYBLUE1
Quantity_NOC_LIGHTSKYBLUE2 = _Quantity.Quantity_NOC_LIGHTSKYBLUE2
Quantity_NOC_LIGHTSKYBLUE3 = _Quantity.Quantity_NOC_LIGHTSKYBLUE3
Quantity_NOC_LIGHTSKYBLUE4 = _Quantity.Quantity_NOC_LIGHTSKYBLUE4
Quantity_NOC_LIGHTSLATEBLUE = _Quantity.Quantity_NOC_LIGHTSLATEBLUE
Quantity_NOC_LIGHTSLATEGRAY = _Quantity.Quantity_NOC_LIGHTSLATEGRAY
Quantity_NOC_LIGHTSTEELBLUE = _Quantity.Quantity_NOC_LIGHTSTEELBLUE
Quantity_NOC_LIGHTSTEELBLUE1 = _Quantity.Quantity_NOC_LIGHTSTEELBLUE1
Quantity_NOC_LIGHTSTEELBLUE2 = _Quantity.Quantity_NOC_LIGHTSTEELBLUE2
Quantity_NOC_LIGHTSTEELBLUE3 = _Quantity.Quantity_NOC_LIGHTSTEELBLUE3
Quantity_NOC_LIGHTSTEELBLUE4 = _Quantity.Quantity_NOC_LIGHTSTEELBLUE4
Quantity_NOC_LIGHTYELLOW = _Quantity.Quantity_NOC_LIGHTYELLOW
Quantity_NOC_LIGHTYELLOW2 = _Quantity.Quantity_NOC_LIGHTYELLOW2
Quantity_NOC_LIGHTYELLOW3 = _Quantity.Quantity_NOC_LIGHTYELLOW3
Quantity_NOC_LIGHTYELLOW4 = _Quantity.Quantity_NOC_LIGHTYELLOW4
Quantity_NOC_LIMEGREEN = _Quantity.Quantity_NOC_LIMEGREEN
Quantity_NOC_LINEN = _Quantity.Quantity_NOC_LINEN
Quantity_NOC_MAGENTA1 = _Quantity.Quantity_NOC_MAGENTA1
Quantity_NOC_MAGENTA2 = _Quantity.Quantity_NOC_MAGENTA2
Quantity_NOC_MAGENTA3 = _Quantity.Quantity_NOC_MAGENTA3
Quantity_NOC_MAGENTA4 = _Quantity.Quantity_NOC_MAGENTA4
Quantity_NOC_MAROON = _Quantity.Quantity_NOC_MAROON
Quantity_NOC_MAROON1 = _Quantity.Quantity_NOC_MAROON1
Quantity_NOC_MAROON2 = _Quantity.Quantity_NOC_MAROON2
Quantity_NOC_MAROON3 = _Quantity.Quantity_NOC_MAROON3
Quantity_NOC_MAROON4 = _Quantity.Quantity_NOC_MAROON4
Quantity_NOC_MEDIUMAQUAMARINE = _Quantity.Quantity_NOC_MEDIUMAQUAMARINE
Quantity_NOC_MEDIUMORCHID = _Quantity.Quantity_NOC_MEDIUMORCHID
Quantity_NOC_MEDIUMORCHID1 = _Quantity.Quantity_NOC_MEDIUMORCHID1
Quantity_NOC_MEDIUMORCHID2 = _Quantity.Quantity_NOC_MEDIUMORCHID2
Quantity_NOC_MEDIUMORCHID3 = _Quantity.Quantity_NOC_MEDIUMORCHID3
Quantity_NOC_MEDIUMORCHID4 = _Quantity.Quantity_NOC_MEDIUMORCHID4
Quantity_NOC_MEDIUMPURPLE = _Quantity.Quantity_NOC_MEDIUMPURPLE
Quantity_NOC_MEDIUMPURPLE1 = _Quantity.Quantity_NOC_MEDIUMPURPLE1
Quantity_NOC_MEDIUMPURPLE2 = _Quantity.Quantity_NOC_MEDIUMPURPLE2
Quantity_NOC_MEDIUMPURPLE3 = _Quantity.Quantity_NOC_MEDIUMPURPLE3
Quantity_NOC_MEDIUMPURPLE4 = _Quantity.Quantity_NOC_MEDIUMPURPLE4
Quantity_NOC_MEDIUMSEAGREEN = _Quantity.Quantity_NOC_MEDIUMSEAGREEN
Quantity_NOC_MEDIUMSLATEBLUE = _Quantity.Quantity_NOC_MEDIUMSLATEBLUE
Quantity_NOC_MEDIUMSPRINGGREEN = _Quantity.Quantity_NOC_MEDIUMSPRINGGREEN
Quantity_NOC_MEDIUMTURQUOISE = _Quantity.Quantity_NOC_MEDIUMTURQUOISE
Quantity_NOC_MEDIUMVIOLETRED = _Quantity.Quantity_NOC_MEDIUMVIOLETRED
Quantity_NOC_MIDNIGHTBLUE = _Quantity.Quantity_NOC_MIDNIGHTBLUE
Quantity_NOC_MINTCREAM = _Quantity.Quantity_NOC_MINTCREAM
Quantity_NOC_MISTYROSE = _Quantity.Quantity_NOC_MISTYROSE
Quantity_NOC_MISTYROSE2 = _Quantity.Quantity_NOC_MISTYROSE2
Quantity_NOC_MISTYROSE3 = _Quantity.Quantity_NOC_MISTYROSE3
Quantity_NOC_MISTYROSE4 = _Quantity.Quantity_NOC_MISTYROSE4
Quantity_NOC_MOCCASIN = _Quantity.Quantity_NOC_MOCCASIN
Quantity_NOC_NAVAJOWHITE1 = _Quantity.Quantity_NOC_NAVAJOWHITE1
Quantity_NOC_NAVAJOWHITE2 = _Quantity.Quantity_NOC_NAVAJOWHITE2
Quantity_NOC_NAVAJOWHITE3 = _Quantity.Quantity_NOC_NAVAJOWHITE3
Quantity_NOC_NAVAJOWHITE4 = _Quantity.Quantity_NOC_NAVAJOWHITE4
Quantity_NOC_NAVYBLUE = _Quantity.Quantity_NOC_NAVYBLUE
Quantity_NOC_OLDLACE = _Quantity.Quantity_NOC_OLDLACE
Quantity_NOC_OLIVEDRAB = _Quantity.Quantity_NOC_OLIVEDRAB
Quantity_NOC_OLIVEDRAB1 = _Quantity.Quantity_NOC_OLIVEDRAB1
Quantity_NOC_OLIVEDRAB2 = _Quantity.Quantity_NOC_OLIVEDRAB2
Quantity_NOC_OLIVEDRAB3 = _Quantity.Quantity_NOC_OLIVEDRAB3
Quantity_NOC_OLIVEDRAB4 = _Quantity.Quantity_NOC_OLIVEDRAB4
Quantity_NOC_ORANGE = _Quantity.Quantity_NOC_ORANGE
Quantity_NOC_ORANGE1 = _Quantity.Quantity_NOC_ORANGE1
Quantity_NOC_ORANGE2 = _Quantity.Quantity_NOC_ORANGE2
Quantity_NOC_ORANGE3 = _Quantity.Quantity_NOC_ORANGE3
Quantity_NOC_ORANGE4 = _Quantity.Quantity_NOC_ORANGE4
Quantity_NOC_ORANGERED = _Quantity.Quantity_NOC_ORANGERED
Quantity_NOC_ORANGERED1 = _Quantity.Quantity_NOC_ORANGERED1
Quantity_NOC_ORANGERED2 = _Quantity.Quantity_NOC_ORANGERED2
Quantity_NOC_ORANGERED3 = _Quantity.Quantity_NOC_ORANGERED3
Quantity_NOC_ORANGERED4 = _Quantity.Quantity_NOC_ORANGERED4
Quantity_NOC_ORCHID = _Quantity.Quantity_NOC_ORCHID
Quantity_NOC_ORCHID1 = _Quantity.Quantity_NOC_ORCHID1
Quantity_NOC_ORCHID2 = _Quantity.Quantity_NOC_ORCHID2
Quantity_NOC_ORCHID3 = _Quantity.Quantity_NOC_ORCHID3
Quantity_NOC_ORCHID4 = _Quantity.Quantity_NOC_ORCHID4
Quantity_NOC_PALEGOLDENROD = _Quantity.Quantity_NOC_PALEGOLDENROD
Quantity_NOC_PALEGREEN = _Quantity.Quantity_NOC_PALEGREEN
Quantity_NOC_PALEGREEN1 = _Quantity.Quantity_NOC_PALEGREEN1
Quantity_NOC_PALEGREEN2 = _Quantity.Quantity_NOC_PALEGREEN2
Quantity_NOC_PALEGREEN3 = _Quantity.Quantity_NOC_PALEGREEN3
Quantity_NOC_PALEGREEN4 = _Quantity.Quantity_NOC_PALEGREEN4
Quantity_NOC_PALETURQUOISE = _Quantity.Quantity_NOC_PALETURQUOISE
Quantity_NOC_PALETURQUOISE1 = _Quantity.Quantity_NOC_PALETURQUOISE1
Quantity_NOC_PALETURQUOISE2 = _Quantity.Quantity_NOC_PALETURQUOISE2
Quantity_NOC_PALETURQUOISE3 = _Quantity.Quantity_NOC_PALETURQUOISE3
Quantity_NOC_PALETURQUOISE4 = _Quantity.Quantity_NOC_PALETURQUOISE4
Quantity_NOC_PALEVIOLETRED = _Quantity.Quantity_NOC_PALEVIOLETRED
Quantity_NOC_PALEVIOLETRED1 = _Quantity.Quantity_NOC_PALEVIOLETRED1
Quantity_NOC_PALEVIOLETRED2 = _Quantity.Quantity_NOC_PALEVIOLETRED2
Quantity_NOC_PALEVIOLETRED3 = _Quantity.Quantity_NOC_PALEVIOLETRED3
Quantity_NOC_PALEVIOLETRED4 = _Quantity.Quantity_NOC_PALEVIOLETRED4
Quantity_NOC_PAPAYAWHIP = _Quantity.Quantity_NOC_PAPAYAWHIP
Quantity_NOC_PEACHPUFF = _Quantity.Quantity_NOC_PEACHPUFF
Quantity_NOC_PEACHPUFF2 = _Quantity.Quantity_NOC_PEACHPUFF2
Quantity_NOC_PEACHPUFF3 = _Quantity.Quantity_NOC_PEACHPUFF3
Quantity_NOC_PEACHPUFF4 = _Quantity.Quantity_NOC_PEACHPUFF4
Quantity_NOC_PERU = _Quantity.Quantity_NOC_PERU
Quantity_NOC_PINK = _Quantity.Quantity_NOC_PINK
Quantity_NOC_PINK1 = _Quantity.Quantity_NOC_PINK1
Quantity_NOC_PINK2 = _Quantity.Quantity_NOC_PINK2
Quantity_NOC_PINK3 = _Quantity.Quantity_NOC_PINK3
Quantity_NOC_PINK4 = _Quantity.Quantity_NOC_PINK4
Quantity_NOC_PLUM = _Quantity.Quantity_NOC_PLUM
Quantity_NOC_PLUM1 = _Quantity.Quantity_NOC_PLUM1
Quantity_NOC_PLUM2 = _Quantity.Quantity_NOC_PLUM2
Quantity_NOC_PLUM3 = _Quantity.Quantity_NOC_PLUM3
Quantity_NOC_PLUM4 = _Quantity.Quantity_NOC_PLUM4
Quantity_NOC_POWDERBLUE = _Quantity.Quantity_NOC_POWDERBLUE
Quantity_NOC_PURPLE = _Quantity.Quantity_NOC_PURPLE
Quantity_NOC_PURPLE1 = _Quantity.Quantity_NOC_PURPLE1
Quantity_NOC_PURPLE2 = _Quantity.Quantity_NOC_PURPLE2
Quantity_NOC_PURPLE3 = _Quantity.Quantity_NOC_PURPLE3
Quantity_NOC_PURPLE4 = _Quantity.Quantity_NOC_PURPLE4
Quantity_NOC_RED = _Quantity.Quantity_NOC_RED
Quantity_NOC_RED1 = _Quantity.Quantity_NOC_RED1
Quantity_NOC_RED2 = _Quantity.Quantity_NOC_RED2
Quantity_NOC_RED3 = _Quantity.Quantity_NOC_RED3
Quantity_NOC_RED4 = _Quantity.Quantity_NOC_RED4
Quantity_NOC_ROSYBROWN = _Quantity.Quantity_NOC_ROSYBROWN
Quantity_NOC_ROSYBROWN1 = _Quantity.Quantity_NOC_ROSYBROWN1
Quantity_NOC_ROSYBROWN2 = _Quantity.Quantity_NOC_ROSYBROWN2
Quantity_NOC_ROSYBROWN3 = _Quantity.Quantity_NOC_ROSYBROWN3
Quantity_NOC_ROSYBROWN4 = _Quantity.Quantity_NOC_ROSYBROWN4
Quantity_NOC_ROYALBLUE = _Quantity.Quantity_NOC_ROYALBLUE
Quantity_NOC_ROYALBLUE1 = _Quantity.Quantity_NOC_ROYALBLUE1
Quantity_NOC_ROYALBLUE2 = _Quantity.Quantity_NOC_ROYALBLUE2
Quantity_NOC_ROYALBLUE3 = _Quantity.Quantity_NOC_ROYALBLUE3
Quantity_NOC_ROYALBLUE4 = _Quantity.Quantity_NOC_ROYALBLUE4
Quantity_NOC_SADDLEBROWN = _Quantity.Quantity_NOC_SADDLEBROWN
Quantity_NOC_SALMON = _Quantity.Quantity_NOC_SALMON
Quantity_NOC_SALMON1 = _Quantity.Quantity_NOC_SALMON1
Quantity_NOC_SALMON2 = _Quantity.Quantity_NOC_SALMON2
Quantity_NOC_SALMON3 = _Quantity.Quantity_NOC_SALMON3
Quantity_NOC_SALMON4 = _Quantity.Quantity_NOC_SALMON4
Quantity_NOC_SANDYBROWN = _Quantity.Quantity_NOC_SANDYBROWN
Quantity_NOC_SEAGREEN = _Quantity.Quantity_NOC_SEAGREEN
Quantity_NOC_SEAGREEN1 = _Quantity.Quantity_NOC_SEAGREEN1
Quantity_NOC_SEAGREEN2 = _Quantity.Quantity_NOC_SEAGREEN2
Quantity_NOC_SEAGREEN3 = _Quantity.Quantity_NOC_SEAGREEN3
Quantity_NOC_SEAGREEN4 = _Quantity.Quantity_NOC_SEAGREEN4
Quantity_NOC_SEASHELL = _Quantity.Quantity_NOC_SEASHELL
Quantity_NOC_SEASHELL2 = _Quantity.Quantity_NOC_SEASHELL2
Quantity_NOC_SEASHELL3 = _Quantity.Quantity_NOC_SEASHELL3
Quantity_NOC_SEASHELL4 = _Quantity.Quantity_NOC_SEASHELL4
Quantity_NOC_BEET = _Quantity.Quantity_NOC_BEET
Quantity_NOC_TEAL = _Quantity.Quantity_NOC_TEAL
Quantity_NOC_SIENNA = _Quantity.Quantity_NOC_SIENNA
Quantity_NOC_SIENNA1 = _Quantity.Quantity_NOC_SIENNA1
Quantity_NOC_SIENNA2 = _Quantity.Quantity_NOC_SIENNA2
Quantity_NOC_SIENNA3 = _Quantity.Quantity_NOC_SIENNA3
Quantity_NOC_SIENNA4 = _Quantity.Quantity_NOC_SIENNA4
Quantity_NOC_SKYBLUE = _Quantity.Quantity_NOC_SKYBLUE
Quantity_NOC_SKYBLUE1 = _Quantity.Quantity_NOC_SKYBLUE1
Quantity_NOC_SKYBLUE2 = _Quantity.Quantity_NOC_SKYBLUE2
Quantity_NOC_SKYBLUE3 = _Quantity.Quantity_NOC_SKYBLUE3
Quantity_NOC_SKYBLUE4 = _Quantity.Quantity_NOC_SKYBLUE4
Quantity_NOC_SLATEBLUE = _Quantity.Quantity_NOC_SLATEBLUE
Quantity_NOC_SLATEBLUE1 = _Quantity.Quantity_NOC_SLATEBLUE1
Quantity_NOC_SLATEBLUE2 = _Quantity.Quantity_NOC_SLATEBLUE2
Quantity_NOC_SLATEBLUE3 = _Quantity.Quantity_NOC_SLATEBLUE3
Quantity_NOC_SLATEBLUE4 = _Quantity.Quantity_NOC_SLATEBLUE4
Quantity_NOC_SLATEGRAY1 = _Quantity.Quantity_NOC_SLATEGRAY1
Quantity_NOC_SLATEGRAY2 = _Quantity.Quantity_NOC_SLATEGRAY2
Quantity_NOC_SLATEGRAY3 = _Quantity.Quantity_NOC_SLATEGRAY3
Quantity_NOC_SLATEGRAY4 = _Quantity.Quantity_NOC_SLATEGRAY4
Quantity_NOC_SLATEGRAY = _Quantity.Quantity_NOC_SLATEGRAY
Quantity_NOC_SNOW = _Quantity.Quantity_NOC_SNOW
Quantity_NOC_SNOW2 = _Quantity.Quantity_NOC_SNOW2
Quantity_NOC_SNOW3 = _Quantity.Quantity_NOC_SNOW3
Quantity_NOC_SNOW4 = _Quantity.Quantity_NOC_SNOW4
Quantity_NOC_SPRINGGREEN = _Quantity.Quantity_NOC_SPRINGGREEN
Quantity_NOC_SPRINGGREEN2 = _Quantity.Quantity_NOC_SPRINGGREEN2
Quantity_NOC_SPRINGGREEN3 = _Quantity.Quantity_NOC_SPRINGGREEN3
Quantity_NOC_SPRINGGREEN4 = _Quantity.Quantity_NOC_SPRINGGREEN4
Quantity_NOC_STEELBLUE = _Quantity.Quantity_NOC_STEELBLUE
Quantity_NOC_STEELBLUE1 = _Quantity.Quantity_NOC_STEELBLUE1
Quantity_NOC_STEELBLUE2 = _Quantity.Quantity_NOC_STEELBLUE2
Quantity_NOC_STEELBLUE3 = _Quantity.Quantity_NOC_STEELBLUE3
Quantity_NOC_STEELBLUE4 = _Quantity.Quantity_NOC_STEELBLUE4
Quantity_NOC_TAN = _Quantity.Quantity_NOC_TAN
Quantity_NOC_TAN1 = _Quantity.Quantity_NOC_TAN1
Quantity_NOC_TAN2 = _Quantity.Quantity_NOC_TAN2
Quantity_NOC_TAN3 = _Quantity.Quantity_NOC_TAN3
Quantity_NOC_TAN4 = _Quantity.Quantity_NOC_TAN4
Quantity_NOC_THISTLE = _Quantity.Quantity_NOC_THISTLE
Quantity_NOC_THISTLE1 = _Quantity.Quantity_NOC_THISTLE1
Quantity_NOC_THISTLE2 = _Quantity.Quantity_NOC_THISTLE2
Quantity_NOC_THISTLE3 = _Quantity.Quantity_NOC_THISTLE3
Quantity_NOC_THISTLE4 = _Quantity.Quantity_NOC_THISTLE4
Quantity_NOC_TOMATO = _Quantity.Quantity_NOC_TOMATO
Quantity_NOC_TOMATO1 = _Quantity.Quantity_NOC_TOMATO1
Quantity_NOC_TOMATO2 = _Quantity.Quantity_NOC_TOMATO2
Quantity_NOC_TOMATO3 = _Quantity.Quantity_NOC_TOMATO3
Quantity_NOC_TOMATO4 = _Quantity.Quantity_NOC_TOMATO4
Quantity_NOC_TURQUOISE = _Quantity.Quantity_NOC_TURQUOISE
Quantity_NOC_TURQUOISE1 = _Quantity.Quantity_NOC_TURQUOISE1
Quantity_NOC_TURQUOISE2 = _Quantity.Quantity_NOC_TURQUOISE2
Quantity_NOC_TURQUOISE3 = _Quantity.Quantity_NOC_TURQUOISE3
Quantity_NOC_TURQUOISE4 = _Quantity.Quantity_NOC_TURQUOISE4
Quantity_NOC_VIOLET = _Quantity.Quantity_NOC_VIOLET
Quantity_NOC_VIOLETRED = _Quantity.Quantity_NOC_VIOLETRED
Quantity_NOC_VIOLETRED1 = _Quantity.Quantity_NOC_VIOLETRED1
Quantity_NOC_VIOLETRED2 = _Quantity.Quantity_NOC_VIOLETRED2
Quantity_NOC_VIOLETRED3 = _Quantity.Quantity_NOC_VIOLETRED3
Quantity_NOC_VIOLETRED4 = _Quantity.Quantity_NOC_VIOLETRED4
Quantity_NOC_WHEAT = _Quantity.Quantity_NOC_WHEAT
Quantity_NOC_WHEAT1 = _Quantity.Quantity_NOC_WHEAT1
Quantity_NOC_WHEAT2 = _Quantity.Quantity_NOC_WHEAT2
Quantity_NOC_WHEAT3 = _Quantity.Quantity_NOC_WHEAT3
Quantity_NOC_WHEAT4 = _Quantity.Quantity_NOC_WHEAT4
Quantity_NOC_WHITESMOKE = _Quantity.Quantity_NOC_WHITESMOKE
Quantity_NOC_YELLOW = _Quantity.Quantity_NOC_YELLOW
Quantity_NOC_YELLOW1 = _Quantity.Quantity_NOC_YELLOW1
Quantity_NOC_YELLOW2 = _Quantity.Quantity_NOC_YELLOW2
Quantity_NOC_YELLOW3 = _Quantity.Quantity_NOC_YELLOW3
Quantity_NOC_YELLOW4 = _Quantity.Quantity_NOC_YELLOW4
Quantity_NOC_YELLOWGREEN = _Quantity.Quantity_NOC_YELLOWGREEN
Quantity_NOC_WHITE = _Quantity.Quantity_NOC_WHITE
Quantity_TOC_RGB = _Quantity.Quantity_TOC_RGB
Quantity_TOC_HLS = _Quantity.Quantity_TOC_HLS
Quantity_MASS = _Quantity.Quantity_MASS
Quantity_PLANEANGLE = _Quantity.Quantity_PLANEANGLE
Quantity_SOLIDANGLE = _Quantity.Quantity_SOLIDANGLE
Quantity_LENGTH = _Quantity.Quantity_LENGTH
Quantity_AREA = _Quantity.Quantity_AREA
Quantity_VOLUME = _Quantity.Quantity_VOLUME
Quantity_SPEED = _Quantity.Quantity_SPEED
Quantity_VELOCITY = _Quantity.Quantity_VELOCITY
Quantity_ACCELERATION = _Quantity.Quantity_ACCELERATION
Quantity_ANGULARVELOCITY = _Quantity.Quantity_ANGULARVELOCITY
Quantity_FREQUENCY = _Quantity.Quantity_FREQUENCY
Quantity_TEMPERATURE = _Quantity.Quantity_TEMPERATURE
Quantity_AMOUNTOFSUBSTANCE = _Quantity.Quantity_AMOUNTOFSUBSTANCE
Quantity_DENSITY = _Quantity.Quantity_DENSITY
Quantity_MASSFLOW = _Quantity.Quantity_MASSFLOW
Quantity_VOLUMEFLOW = _Quantity.Quantity_VOLUMEFLOW
Quantity_CONSUMPTION = _Quantity.Quantity_CONSUMPTION
Quantity_MOMENTUM = _Quantity.Quantity_MOMENTUM
Quantity_KINETICMOMENT = _Quantity.Quantity_KINETICMOMENT
Quantity_MOMENTOFINERTIA = _Quantity.Quantity_MOMENTOFINERTIA
Quantity_FORCE = _Quantity.Quantity_FORCE
Quantity_MOMENTOFAFORCE = _Quantity.Quantity_MOMENTOFAFORCE
Quantity_TORQUE = _Quantity.Quantity_TORQUE
Quantity_WEIGHT = _Quantity.Quantity_WEIGHT
Quantity_PRESSURE = _Quantity.Quantity_PRESSURE
Quantity_VISCOSITY = _Quantity.Quantity_VISCOSITY
Quantity_KINEMATICVISCOSITY = _Quantity.Quantity_KINEMATICVISCOSITY
Quantity_ENERGY = _Quantity.Quantity_ENERGY
Quantity_WORK = _Quantity.Quantity_WORK
Quantity_POWER = _Quantity.Quantity_POWER
Quantity_SURFACETENSION = _Quantity.Quantity_SURFACETENSION
Quantity_COEFFICIENTOFEXPANSION = _Quantity.Quantity_COEFFICIENTOFEXPANSION
Quantity_THERMALCONDUCTIVITY = _Quantity.Quantity_THERMALCONDUCTIVITY
Quantity_SPECIFICHEATCAPACITY = _Quantity.Quantity_SPECIFICHEATCAPACITY
Quantity_ENTROPY = _Quantity.Quantity_ENTROPY
Quantity_ENTHALPY = _Quantity.Quantity_ENTHALPY
Quantity_LUMINOUSINTENSITY = _Quantity.Quantity_LUMINOUSINTENSITY
Quantity_LUMINOUSFLUX = _Quantity.Quantity_LUMINOUSFLUX
Quantity_LUMINANCE = _Quantity.Quantity_LUMINANCE
Quantity_ILLUMINANCE = _Quantity.Quantity_ILLUMINANCE
Quantity_LUMINOUSEXPOSITION = _Quantity.Quantity_LUMINOUSEXPOSITION
Quantity_LUMINOUSEFFICACITY = _Quantity.Quantity_LUMINOUSEFFICACITY
Quantity_ELECTRICCHARGE = _Quantity.Quantity_ELECTRICCHARGE
Quantity_ELECTRICCURRENT = _Quantity.Quantity_ELECTRICCURRENT
Quantity_ELECTRICFIELDSTRENGTH = _Quantity.Quantity_ELECTRICFIELDSTRENGTH
Quantity_ELECTRICPOTENTIAL = _Quantity.Quantity_ELECTRICPOTENTIAL
Quantity_ELECTRICCAPACITANCE = _Quantity.Quantity_ELECTRICCAPACITANCE
Quantity_MAGNETICFLUX = _Quantity.Quantity_MAGNETICFLUX
Quantity_MAGNETICFLUXDENSITY = _Quantity.Quantity_MAGNETICFLUXDENSITY
Quantity_MAGNETICFIELDSTRENGTH = _Quantity.Quantity_MAGNETICFIELDSTRENGTH
Quantity_RELUCTANCE = _Quantity.Quantity_RELUCTANCE
Quantity_RESISTANCE = _Quantity.Quantity_RESISTANCE
Quantity_INDUCTANCE = _Quantity.Quantity_INDUCTANCE
Quantity_CAPACITANCE = _Quantity.Quantity_CAPACITANCE
Quantity_IMPEDANCE = _Quantity.Quantity_IMPEDANCE
Quantity_ADMITTANCE = _Quantity.Quantity_ADMITTANCE
Quantity_RESISTIVITY = _Quantity.Quantity_RESISTIVITY
Quantity_CONDUCTIVITY = _Quantity.Quantity_CONDUCTIVITY
Quantity_MOLARMASS = _Quantity.Quantity_MOLARMASS
Quantity_MOLARVOLUME = _Quantity.Quantity_MOLARVOLUME
Quantity_CONCENTRATION = _Quantity.Quantity_CONCENTRATION
Quantity_MOLARCONCENTRATION = _Quantity.Quantity_MOLARCONCENTRATION
Quantity_MOLARITY = _Quantity.Quantity_MOLARITY
Quantity_SOUNDINTENSITY = _Quantity.Quantity_SOUNDINTENSITY
Quantity_ACOUSTICINTENSITY = _Quantity.Quantity_ACOUSTICINTENSITY
Quantity_ACTIVITY = _Quantity.Quantity_ACTIVITY
Quantity_ABSORBEDDOSE = _Quantity.Quantity_ABSORBEDDOSE
Quantity_DOSEEQUIVALENT = _Quantity.Quantity_DOSEEQUIVALENT
class Quantity_Color(object):
    """
    This class allows the definition of a colour.
    The names of the colours are from the X11 specification.
    color object may be used for numerous applicative purposes.
    A color is defined by:
    -   its respective quantities of red, green and blue (R-G-B values), or
    -   its hue angle and its values of lightness and  saturation (H-L-S values).
    These two color definition systems are equivalent.
    Use this class in conjunction with:
    -   the Quantity_TypeOfColor enumeration
    which identifies the color definition system you are using,
    -   the Quantity_NameOfColor enumeration
    which lists numerous predefined colors and
    identifies them by their name.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Quantity_Color self) -> Quantity_Color
        __init__(Quantity_Color self, Quantity_NameOfColor const AName) -> Quantity_Color
        __init__(Quantity_Color self, Standard_Real const theR1, Standard_Real const theR2, Standard_Real const theR3, Quantity_TypeOfColor const theType) -> Quantity_Color
        __init__(Quantity_Color self, NCollection_Vec3< float > const & theRgb) -> Quantity_Color

        Define color from RGB values.

        :type theRgb: OCC.wrapper.Quantity.NCollection_Vec3

        """
        this = _Quantity.new_Quantity_Color(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ChangeContrast(self, *args):
        """
        ChangeContrast(Quantity_Color self, Standard_Real const ADelta)

        Increases or decreases the contrast by <ADelta>.
        <ADelta> is a percentage. Any value greater than zero
        will increase the contrast.
        The variation is expressed as a percentage of the
        current value.
        It is a variation of the saturation.

        :type ADelta: float

        """
        return _Quantity.Quantity_Color_ChangeContrast(self, *args)


    def ChangeIntensity(self, *args):
        """
        ChangeIntensity(Quantity_Color self, Standard_Real const ADelta)

        Increases or decreases the intensity by <ADelta>.
        <ADelta> is a percentage. Any value greater than zero
        will increase the intensity.
        The variation is expressed as a percentage of the
        current value.
        It is a variation of the lightness.

        :type ADelta: float

        """
        return _Quantity.Quantity_Color_ChangeIntensity(self, *args)


    def SetValues(self, *args):
        """
        SetValues(Quantity_Color self, Quantity_NameOfColor const AName)
        SetValues(Quantity_Color self, Standard_Real const theR1, Standard_Real const theR2, Standard_Real const theR3, Quantity_TypeOfColor const theType)

        Updates a color according to the mode specified by theType.
        TOC_RGB:
        - theR1 the value of Red   within range [0.0; 1.0]
        - theR2 the value of Green within range [0.0; 1.0]
        - theR3 the value of Blue  within range [0.0; 1.0]

        TOC_HLS:
        - theR1 is the Hue (H) angle in degrees within range [0.0; 360.0], 0.0 being Red.
        -1.0 is a special value reserved for grayscale color (S should be 0.0).
        - theR2 is the Lightness  (L) within range [0.0; 1.0]
        - theR3 is the Saturation (S) within range [0.0; 1.0]

        :type theR1: float
        :type theR2: float
        :type theR3: float
        :type theType: OCC.wrapper.Quantity.Quantity_TypeOfColor

        """
        return _Quantity.Quantity_Color_SetValues(self, *args)


    def Delta(self, *args):
        """
        Delta(Quantity_Color self, Quantity_Color AColor)

        Returns the percentage change of contrast and intensity
        between <me> and <AColor>.
        <DC> and <DI> are percentages, either positive or negative.
        The calculation is with respect to the current value of <me>
        If <DC> is positive then <me> is more contrasty.
        If <DI> is positive then <me> is more intense.

        :type AColor: OCC.wrapper.Quantity.Quantity_Color
        :type DC: float
        :type DI: float

        """
        return _Quantity.Quantity_Color_Delta(self, *args)


    def Distance(self, *args):
        """
        Distance(Quantity_Color self, Quantity_Color AColor) -> Standard_Real

        Returns the distance between two colours. It's a
        value between 0 and the square root of 3
        (the black/white distance)

        :type AColor: OCC.wrapper.Quantity.Quantity_Color
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Quantity.Quantity_Color_Distance(self, *args)


    def SquareDistance(self, *args):
        """
        SquareDistance(Quantity_Color self, Quantity_Color AColor) -> Standard_Real

        Returns the square of distance between two colours.

        :type AColor: OCC.wrapper.Quantity.Quantity_Color
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Quantity.Quantity_Color_SquareDistance(self, *args)


    def Blue(self, *args):
        """
        Blue(Quantity_Color self) -> Standard_Real

        Returns the Blue component (quantity of blue) of the color within range [0.0; 1.0].

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Quantity.Quantity_Color_Blue(self, *args)


    def Green(self, *args):
        """
        Green(Quantity_Color self) -> Standard_Real

        Returns the Green component (quantity of green) of the color within range [0.0; 1.0].

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Quantity.Quantity_Color_Green(self, *args)


    def Hue(self, *args):
        """
        Hue(Quantity_Color self) -> Standard_Real

        Returns the Hue component (hue angle) of the color
        in degrees within range [0.0; 360.0], 0.0 being Red.
        -1.0 is a special value reserved for grayscale color (S should be 0.0)

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Quantity.Quantity_Color_Hue(self, *args)


    def IsDifferent(self, *args):
        """
        IsDifferent(Quantity_Color self, Quantity_Color Other) -> Standard_Boolean

        Returns Standard_True if the distance between <me> and
        <Other> is greater than Epsilon ().

        :type Other: OCC.wrapper.Quantity.Quantity_Color
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Quantity_Color_IsDifferent(self, *args)


    def __ne__(self, *args):
        """
        __ne__(Quantity_Color self, Quantity_Color Other) -> Standard_Boolean

        :type Other: OCC.wrapper.Quantity.Quantity_Color
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Quantity_Color___ne__(self, *args)


    def IsEqual(self, *args):
        """
        IsEqual(Quantity_Color self, Quantity_Color Other) -> Standard_Boolean

        Returns true if the Other color is
        -   different from, or
        -   equal to this color.
        Two colors are considered to be equal if their
        distance is no greater than Epsilon().
        These methods are aliases of operator != and operator ==.

        :type Other: OCC.wrapper.Quantity.Quantity_Color
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Quantity_Color_IsEqual(self, *args)


    def __eq__(self, *args):
        """
        __eq__(Quantity_Color self, Quantity_Color Other) -> Standard_Boolean

        :type Other: OCC.wrapper.Quantity.Quantity_Color
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Quantity_Color___eq__(self, *args)


    def Light(self, *args):
        """
        Light(Quantity_Color self) -> Standard_Real

        Returns the Light component (value of the lightness) of the color within range [0.0; 1.0].

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Quantity.Quantity_Color_Light(self, *args)


    def Red(self, *args):
        """
        Red(Quantity_Color self) -> Standard_Real

        Returns the Red component (quantity of red) of the color within range [0.0; 1.0].

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Quantity.Quantity_Color_Red(self, *args)


    def Saturation(self, *args):
        """
        Saturation(Quantity_Color self) -> Standard_Real

        Returns the Saturation component (value of the saturation) of the color within range [0.0; 1.0].

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Quantity.Quantity_Color_Saturation(self, *args)


    def Values(self, *args):
        """
        Values(Quantity_Color self, Quantity_TypeOfColor const theType)

        Returns in theR1, theR2 and theR3 the components of this color according to the color system definition theType.
        If theType is Quantity_TOC_RGB:
        - theR1 the value of Red   between 0.0 and 1.0
        - theR2 the value of Green between 0.0 and 1.0
        - theR3 the value of Blue  between 0.0 and 1.0
        If theType is Quantity_TOC_HLS:
        - theR1 is the Hue (H) angle in degrees within range [0.0; 360.0], 0.0 being Red.
        -1.0 is a special value reserved for grayscale color (S should be 0.0).
        - theR2 is the Lightness  (L) within range [0.0; 1.0]
        - theR3 is the Saturation (S) within range [0.0; 1.0]

        :type theR1: float
        :type theR2: float
        :type theR3: float
        :type theType: OCC.wrapper.Quantity.Quantity_TypeOfColor

        """
        return _Quantity.Quantity_Color_Values(self, *args)


    def SetEpsilon(*args):
        """
        SetEpsilon(Standard_Real const AnEpsilon)

        Sets the specified value used to compare <me> and
        an other color in IsDifferent and in IsEqual methods.
        Warning: The default value is 0.0001

        :type AnEpsilon: float

        """
        return _Quantity.Quantity_Color_SetEpsilon(*args)

    SetEpsilon = staticmethod(SetEpsilon)

    def Epsilon(*args):
        """
        Epsilon() -> Standard_Real

        Returns the specified value used to compare <me> and
        an other color in IsDifferent and in IsEqual methods.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Quantity.Quantity_Color_Epsilon(*args)

    Epsilon = staticmethod(Epsilon)

    def Name(*args):
        """
        Name() -> Quantity_NameOfColor
        Name(Standard_Real const R, Standard_Real const G, Standard_Real const B) -> Quantity_NameOfColor

        Returns the name of the colour for which the RGB components
        are nearest to <R>, <G> and <B>.

        :type R: float
        :type G: float
        :type B: float
        :rtype: OCC.wrapper.Quantity.Quantity_NameOfColor

        """
        return _Quantity.Quantity_Color_Name(*args)

    Name = staticmethod(Name)

    def StringName(*args):
        """
        StringName(Quantity_NameOfColor const AColor) -> Standard_CString

        Returns the name of the color identified by
        AName in the Quantity_NameOfColor enumeration.
        For example, the name of the color which
        corresponds to Quantity_NOC_BLACK is "BLACK".
        Exceptions
        Standard_OutOfRange if AName in not known
        in the Quantity_NameOfColor enumeration.

        :type AColor: OCC.wrapper.Quantity.Quantity_NameOfColor
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Quantity.Quantity_Color_StringName(*args)

    StringName = staticmethod(StringName)

    def ColorFromName(*args):
        """
        ColorFromName(Standard_CString const theName) -> Standard_Boolean

        Finds color from predefined names.
        For example, the name of the color which
        corresponds to "BLACK" is Quantity_NOC_BLACK.
        Returns false if name is unknown.

        :type theName: OCC.wrapper.Standard.Standard_CString
        :type theColor: OCC.wrapper.Quantity.Quantity_NameOfColor
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Quantity_Color_ColorFromName(*args)

    ColorFromName = staticmethod(ColorFromName)

    def HlsRgb(*args):
        """
        HlsRgb(Standard_Real const H, Standard_Real const L, Standard_Real const S)

        Converts HLS components into RGB ones.

        :type H: float
        :type L: float
        :type S: float
        :type R: float
        :type G: float
        :type B: float

        """
        return _Quantity.Quantity_Color_HlsRgb(*args)

    HlsRgb = staticmethod(HlsRgb)

    def RgbHls(*args):
        """
        RgbHls(Standard_Real const R, Standard_Real const G, Standard_Real const B)

        Converts RGB components into HLS ones.

        :type R: float
        :type G: float
        :type B: float
        :type H: float
        :type L: float
        :type S: float

        """
        return _Quantity.Quantity_Color_RgbHls(*args)

    RgbHls = staticmethod(RgbHls)

    def Color2argb(*args):
        """
        Color2argb(Quantity_Color theColor)

        Convert the Color value to ARGB integer value.
        theARGB has Alpha equal to zero, so the output is
        formatted as 0x00RRGGBB

        :type theColor: OCC.wrapper.Quantity.Quantity_Color
        :type theARGB: int

        """
        return _Quantity.Quantity_Color_Color2argb(*args)

    Color2argb = staticmethod(Color2argb)

    def Argb2color(*args):
        """
        Argb2color(Standard_Integer const theARGB, Quantity_Color theColor)

        Convert integer ARGB value to Color. Alpha bits are ignored

        :type theARGB: int
        :type theColor: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Quantity.Quantity_Color_Argb2color(*args)

    Argb2color = staticmethod(Argb2color)

    def Test(*args):
        """
        Test()

        Internal test


        """
        return _Quantity.Quantity_Color_Test(*args)

    Test = staticmethod(Test)
    __swig_destroy__ = _Quantity.delete_Quantity_Color
Quantity_Color_swigregister = _Quantity.Quantity_Color_swigregister
Quantity_Color_swigregister(Quantity_Color)

def Quantity_Color_SetEpsilon(*args):
    """
    Quantity_Color_SetEpsilon(Standard_Real const AnEpsilon)

    Sets the specified value used to compare <me> and
    an other color in IsDifferent and in IsEqual methods.
    Warning: The default value is 0.0001

    :type AnEpsilon: float

    """
    return _Quantity.Quantity_Color_SetEpsilon(*args)

def Quantity_Color_Epsilon(*args):
    """
    Quantity_Color_Epsilon() -> Standard_Real

    Returns the specified value used to compare <me> and
    an other color in IsDifferent and in IsEqual methods.

    :rtype: OCC.wrapper.Standard.Standard_Real

    """
    return _Quantity.Quantity_Color_Epsilon(*args)

def Quantity_Color_Name(*args):
    """
    Name() -> Quantity_NameOfColor
    Quantity_Color_Name(Standard_Real const R, Standard_Real const G, Standard_Real const B) -> Quantity_NameOfColor

    Returns the name of the colour for which the RGB components
    are nearest to <R>, <G> and <B>.

    :type R: float
    :type G: float
    :type B: float
    :rtype: OCC.wrapper.Quantity.Quantity_NameOfColor

    """
    return _Quantity.Quantity_Color_Name(*args)

def Quantity_Color_StringName(*args):
    """
    Quantity_Color_StringName(Quantity_NameOfColor const AColor) -> Standard_CString

    Returns the name of the color identified by
    AName in the Quantity_NameOfColor enumeration.
    For example, the name of the color which
    corresponds to Quantity_NOC_BLACK is "BLACK".
    Exceptions
    Standard_OutOfRange if AName in not known
    in the Quantity_NameOfColor enumeration.

    :type AColor: OCC.wrapper.Quantity.Quantity_NameOfColor
    :rtype: OCC.wrapper.Standard.Standard_CString

    """
    return _Quantity.Quantity_Color_StringName(*args)

def Quantity_Color_ColorFromName(*args):
    """
    Quantity_Color_ColorFromName(Standard_CString const theName) -> Standard_Boolean

    Finds color from predefined names.
    For example, the name of the color which
    corresponds to "BLACK" is Quantity_NOC_BLACK.
    Returns false if name is unknown.

    :type theName: OCC.wrapper.Standard.Standard_CString
    :type theColor: OCC.wrapper.Quantity.Quantity_NameOfColor
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _Quantity.Quantity_Color_ColorFromName(*args)

def Quantity_Color_HlsRgb(*args):
    """
    Quantity_Color_HlsRgb(Standard_Real const H, Standard_Real const L, Standard_Real const S)

    Converts HLS components into RGB ones.

    :type H: float
    :type L: float
    :type S: float
    :type R: float
    :type G: float
    :type B: float

    """
    return _Quantity.Quantity_Color_HlsRgb(*args)

def Quantity_Color_RgbHls(*args):
    """
    Quantity_Color_RgbHls(Standard_Real const R, Standard_Real const G, Standard_Real const B)

    Converts RGB components into HLS ones.

    :type R: float
    :type G: float
    :type B: float
    :type H: float
    :type L: float
    :type S: float

    """
    return _Quantity.Quantity_Color_RgbHls(*args)

def Quantity_Color_Color2argb(*args):
    """
    Quantity_Color_Color2argb(Quantity_Color theColor)

    Convert the Color value to ARGB integer value.
    theARGB has Alpha equal to zero, so the output is
    formatted as 0x00RRGGBB

    :type theColor: OCC.wrapper.Quantity.Quantity_Color
    :type theARGB: int

    """
    return _Quantity.Quantity_Color_Color2argb(*args)

def Quantity_Color_Argb2color(*args):
    """
    Quantity_Color_Argb2color(Standard_Integer const theARGB, Quantity_Color theColor)

    Convert integer ARGB value to Color. Alpha bits are ignored

    :type theARGB: int
    :type theColor: OCC.wrapper.Quantity.Quantity_Color

    """
    return _Quantity.Quantity_Color_Argb2color(*args)

def Quantity_Color_Test(*args):
    """
    Quantity_Color_Test()

    Internal test


    """
    return _Quantity.Quantity_Color_Test(*args)

class Quantity_DateDefinitionError(Standard.Standard_DomainError):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Quantity_DateDefinitionError
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Quantity_DateDefinitionError(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Quantity_DateDefinitionError self) -> Quantity_DateDefinitionError
        __init__(Quantity_DateDefinitionError self, Standard_CString const theMessage) -> Quantity_DateDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString

        """
        this = _Quantity.new_Quantity_DateDefinitionError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewInstance(*args):
        """
        NewInstance(Standard_CString const theMessage) -> Handle_Quantity_DateDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Quantity.Handle_Quantity_DateDefinitionError

        """
        return _Quantity.Quantity_DateDefinitionError_NewInstance(*args)

    NewInstance = staticmethod(NewInstance)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Quantity.Quantity_DateDefinitionError_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Quantity.Quantity_DateDefinitionError_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Quantity.Quantity_DateDefinitionError_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Quantity.delete_Quantity_DateDefinitionError
Quantity_DateDefinitionError_swigregister = _Quantity.Quantity_DateDefinitionError_swigregister
Quantity_DateDefinitionError_swigregister(Quantity_DateDefinitionError)

def Quantity_DateDefinitionError_NewInstance(*args):
    """
    Quantity_DateDefinitionError_NewInstance(Standard_CString const theMessage) -> Handle_Quantity_DateDefinitionError

    :type theMessage: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Quantity.Handle_Quantity_DateDefinitionError

    """
    return _Quantity.Quantity_DateDefinitionError_NewInstance(*args)

def Quantity_DateDefinitionError_get_type_name(*args):
    """
    Quantity_DateDefinitionError_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Quantity.Quantity_DateDefinitionError_get_type_name(*args)

def Quantity_DateDefinitionError_get_type_descriptor(*args):
    """
    Quantity_DateDefinitionError_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Quantity.Quantity_DateDefinitionError_get_type_descriptor(*args)

class Quantity_ColorDefinitionError(Standard.Standard_DomainError):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Quantity_ColorDefinitionError
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Quantity_ColorDefinitionError(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Quantity_ColorDefinitionError self) -> Quantity_ColorDefinitionError
        __init__(Quantity_ColorDefinitionError self, Standard_CString const theMessage) -> Quantity_ColorDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString

        """
        this = _Quantity.new_Quantity_ColorDefinitionError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewInstance(*args):
        """
        NewInstance(Standard_CString const theMessage) -> Handle_Quantity_ColorDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Quantity.Handle_Quantity_ColorDefinitionError

        """
        return _Quantity.Quantity_ColorDefinitionError_NewInstance(*args)

    NewInstance = staticmethod(NewInstance)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Quantity.Quantity_ColorDefinitionError_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Quantity.Quantity_ColorDefinitionError_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Quantity.Quantity_ColorDefinitionError_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Quantity.delete_Quantity_ColorDefinitionError
Quantity_ColorDefinitionError_swigregister = _Quantity.Quantity_ColorDefinitionError_swigregister
Quantity_ColorDefinitionError_swigregister(Quantity_ColorDefinitionError)

def Quantity_ColorDefinitionError_NewInstance(*args):
    """
    Quantity_ColorDefinitionError_NewInstance(Standard_CString const theMessage) -> Handle_Quantity_ColorDefinitionError

    :type theMessage: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Quantity.Handle_Quantity_ColorDefinitionError

    """
    return _Quantity.Quantity_ColorDefinitionError_NewInstance(*args)

def Quantity_ColorDefinitionError_get_type_name(*args):
    """
    Quantity_ColorDefinitionError_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Quantity.Quantity_ColorDefinitionError_get_type_name(*args)

def Quantity_ColorDefinitionError_get_type_descriptor(*args):
    """
    Quantity_ColorDefinitionError_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Quantity.Quantity_ColorDefinitionError_get_type_descriptor(*args)

class Quantity_HArray1OfColor(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Quantity_HArray1OfColor
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Quantity_HArray1OfColor(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Quantity_HArray1OfColor self, Standard_Integer const theLower, Standard_Integer const theUpper) -> Quantity_HArray1OfColor
        __init__(Quantity_HArray1OfColor self, Standard_Integer const theLower, Standard_Integer const theUpper, Quantity_Color theValue) -> Quantity_HArray1OfColor
        __init__(Quantity_HArray1OfColor self, NCollection_Array1_Quantity_Color theOther) -> Quantity_HArray1OfColor

        :type theOther: OCC.wrapper.Quantity.Quantity_Array1OfColor

        """
        this = _Quantity.new_Quantity_HArray1OfColor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.Quantity.Quantity_Array1OfColor

        """
        res = _Quantity.Quantity_HArray1OfColor_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Quantity_HArray1OfColor self) -> NCollection_Array1_Quantity_Color

        :rtype: OCC.wrapper.Quantity.Quantity_Array1OfColor

        """
        return _Quantity.Quantity_HArray1OfColor_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Quantity.Quantity_HArray1OfColor_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Quantity.Quantity_HArray1OfColor_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Quantity.Quantity_HArray1OfColor_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Quantity.delete_Quantity_HArray1OfColor
Quantity_HArray1OfColor_swigregister = _Quantity.Quantity_HArray1OfColor_swigregister
Quantity_HArray1OfColor_swigregister(Quantity_HArray1OfColor)

def Quantity_HArray1OfColor_get_type_name(*args):
    """
    Quantity_HArray1OfColor_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Quantity.Quantity_HArray1OfColor_get_type_name(*args)

def Quantity_HArray1OfColor_get_type_descriptor(*args):
    """
    Quantity_HArray1OfColor_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Quantity.Quantity_HArray1OfColor_get_type_descriptor(*args)

class Quantity_Date(object):
    """
    This class provides services to manage date information.
    A date represents the following time intervals:
    year, month, day, hour, minute, second,
    millisecond and microsecond.
    Current time is expressed in elapsed seconds
    and microseconds beginning from 00:00 GMT,
    January 1, 1979 (zero hour). The valid date can
    only be later than this one.
    Note: a Period object gives the interval between two dates.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Quantity_Date self) -> Quantity_Date
        __init__(Quantity_Date self, Standard_Integer const mm, Standard_Integer const dd, Standard_Integer const yyyy, Standard_Integer const hh, Standard_Integer const mn, Standard_Integer const ss, Standard_Integer const mis=0, Standard_Integer const mics=0) -> Quantity_Date

        Constructs a date from the year yyyy, the
        month mm, the day dd, the hour hh, the minute
        mn, the second ss, the millisecond mis
        (defaulted to 0) and the microsecond mics (defaulted to 0)..
        With:      1 <= mm <= 12
        1 <= dd <= max number of days of <mm>
        1979 <= yyyy
        0 <= hh <= 23
        0 <= mn <= 59
        0 <= ss <= 59
        0 <= mis <= 999
        0 <= mics <= 999
        Exceptions
        Quantity_DateDefinitionError if mm, dd, hh,
        mn, ss, mis and mics are not the components of the valid date.

        :type mm: int
        :type dd: int
        :type yyyy: int
        :type hh: int
        :type mn: int
        :type ss: int
        :type mis: int
        :type mics: int

        """
        this = _Quantity.new_Quantity_Date(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Values(self, *args):
        """
        Values(Quantity_Date self)

        Gets a complete Date.
        -   in mm - the month,
        -   in dd - the day,
        -   in yyyy - the year,
        -   in hh - the hour,
        -   in mn - the minute,
        -   in ss - the second,
        -   in mis - the millisecond, and
        -   in mics - the microsecond

        :type mm: int
        :type dd: int
        :type yy: int
        :type hh: int
        :type mn: int
        :type ss: int
        :type mis: int
        :type mics: int

        """
        return _Quantity.Quantity_Date_Values(self, *args)


    def SetValues(self, *args):
        """
        SetValues(Quantity_Date self, Standard_Integer const mm, Standard_Integer const dd, Standard_Integer const yy, Standard_Integer const hh, Standard_Integer const mn, Standard_Integer const ss, Standard_Integer const mis=0, Standard_Integer const mics=0)

        Assigns to this date the year yyyy, the month
        mm, the day dd, the hour hh, the minute mn, the
        second ss, the millisecond mis (defaulted to 0)
        and the microsecond mics (defaulted to 0).
        Exceptions
        Quantity_DateDefinitionError if mm, dd, hh,
        mn, ss, mis and mics are not components of a valid date.

        :type mm: int
        :type dd: int
        :type yy: int
        :type hh: int
        :type mn: int
        :type ss: int
        :type mis: int
        :type mics: int

        """
        return _Quantity.Quantity_Date_SetValues(self, *args)


    def Difference(self, *args):
        """
        Difference(Quantity_Date self, Quantity_Date anOther) -> Quantity_Period

        Subtracts one Date from another one to find the period
        between and returns the value.
        The result is the absolute value between the difference
        of two dates.

        :type anOther: OCC.wrapper.Quantity.Quantity_Date
        :rtype: OCC.wrapper.Quantity.Quantity_Period

        """
        return _Quantity.Quantity_Date_Difference(self, *args)


    def Subtract(self, *args):
        """
        Subtract(Quantity_Date self, Quantity_Period aPeriod) -> Quantity_Date

        Subtracts a period from a Date and returns the new Date.
        Raises an exception if the result date is anterior to
        Jan 1, 1979.

        :type aPeriod: OCC.wrapper.Quantity.Quantity_Period
        :rtype: OCC.wrapper.Quantity.Quantity_Date

        """
        return _Quantity.Quantity_Date_Subtract(self, *args)


    def __sub__(self, *args):
        """
        __sub__(Quantity_Date self, Quantity_Period aPeriod) -> Quantity_Date

        :type aPeriod: OCC.wrapper.Quantity.Quantity_Period
        :rtype: OCC.wrapper.Quantity.Quantity_Date

        """
        return _Quantity.Quantity_Date___sub__(self, *args)


    def Add(self, *args):
        """
        Add(Quantity_Date self, Quantity_Period aPeriod) -> Quantity_Date

        Adds a Period to a Date and returns the new Date.

        :type aPeriod: OCC.wrapper.Quantity.Quantity_Period
        :rtype: OCC.wrapper.Quantity.Quantity_Date

        """
        return _Quantity.Quantity_Date_Add(self, *args)


    def __add__(self, *args):
        """
        __add__(Quantity_Date self, Quantity_Period aPeriod) -> Quantity_Date

        :type aPeriod: OCC.wrapper.Quantity.Quantity_Period
        :rtype: OCC.wrapper.Quantity.Quantity_Date

        """
        return _Quantity.Quantity_Date___add__(self, *args)


    def Year(self, *args):
        """
        Year(Quantity_Date self) -> Standard_Integer

        Returns year of a Date.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.Quantity_Date_Year(self, *args)


    def Month(self, *args):
        """
        Month(Quantity_Date self) -> Standard_Integer

        Returns month of a Date.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.Quantity_Date_Month(self, *args)


    def Day(self, *args):
        """
        Day(Quantity_Date self) -> Standard_Integer

        Returns Day of a Date.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.Quantity_Date_Day(self, *args)


    def Hour(self, *args):
        """
        Hour(Quantity_Date self) -> Standard_Integer

        Returns Hour of a Date.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.Quantity_Date_Hour(self, *args)


    def Minute(self, *args):
        """
        Minute(Quantity_Date self) -> Standard_Integer

        Returns minute of a Date.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.Quantity_Date_Minute(self, *args)


    def Second(self, *args):
        """
        Second(Quantity_Date self) -> Standard_Integer

        Returns seconde of a Date.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.Quantity_Date_Second(self, *args)


    def MilliSecond(self, *args):
        """
        MilliSecond(Quantity_Date self) -> Standard_Integer

        Returns millisecond of a Date.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.Quantity_Date_MilliSecond(self, *args)


    def MicroSecond(self, *args):
        """
        MicroSecond(Quantity_Date self) -> Standard_Integer

        Returns microsecond of a Date.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.Quantity_Date_MicroSecond(self, *args)


    def IsEqual(self, *args):
        """
        IsEqual(Quantity_Date self, Quantity_Date anOther) -> Standard_Boolean

        Returns TRUE if both <me> and <other> are equal.
        This method is an alias of operator ==.

        :type anOther: OCC.wrapper.Quantity.Quantity_Date
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Quantity_Date_IsEqual(self, *args)


    def __eq__(self, *args):
        """
        __eq__(Quantity_Date self, Quantity_Date anOther) -> Standard_Boolean

        :type anOther: OCC.wrapper.Quantity.Quantity_Date
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Quantity_Date___eq__(self, *args)


    def IsEarlier(self, *args):
        """
        IsEarlier(Quantity_Date self, Quantity_Date anOther) -> Standard_Boolean

        Returns TRUE if <me> is earlier than <other>.

        :type anOther: OCC.wrapper.Quantity.Quantity_Date
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Quantity_Date_IsEarlier(self, *args)


    def __lt__(self, *args):
        """
        __lt__(Quantity_Date self, Quantity_Date anOther) -> Standard_Boolean

        :type anOther: OCC.wrapper.Quantity.Quantity_Date
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Quantity_Date___lt__(self, *args)


    def IsLater(self, *args):
        """
        IsLater(Quantity_Date self, Quantity_Date anOther) -> Standard_Boolean

        Returns TRUE if <me> is later then <other>.

        :type anOther: OCC.wrapper.Quantity.Quantity_Date
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Quantity_Date_IsLater(self, *args)


    def __gt__(self, *args):
        """
        __gt__(Quantity_Date self, Quantity_Date anOther) -> Standard_Boolean

        :type anOther: OCC.wrapper.Quantity.Quantity_Date
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Quantity_Date___gt__(self, *args)


    def IsValid(*args):
        """
        IsValid(Standard_Integer const mm, Standard_Integer const dd, Standard_Integer const yy, Standard_Integer const hh, Standard_Integer const mn, Standard_Integer const ss, Standard_Integer const mis=0, Standard_Integer const mics=0) -> Standard_Boolean

        Checks the validity of a date - returns true if a
        date defined from the year yyyy, the month mm,
        the day dd, the hour hh, the minute mn, the
        second ss, the millisecond mis (defaulted to 0)
        and the microsecond mics (defaulted to 0) is valid.
        A date must satisfy the conditions above:
        -   yyyy is greater than or equal to 1979,
        -   mm lies within the range [1, 12] (with 1
        corresponding to January and 12 to December),
        -   dd lies within a valid range for the month mm
        (from 1 to 28, 29, 30 or 31 depending on
        mm and whether yyyy is a leap year or not),
        -   hh lies within the range [0, 23],
        -   mn lies within the range [0, 59],
        -   ss lies within the range [0, 59],
        -   mis lies within the range [0, 999],
        -   mics lies within the range [0, 999].C

        :type mm: int
        :type dd: int
        :type yy: int
        :type hh: int
        :type mn: int
        :type ss: int
        :type mis: int
        :type mics: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Quantity_Date_IsValid(*args)

    IsValid = staticmethod(IsValid)

    def IsLeap(*args):
        """
        IsLeap(Standard_Integer const yy) -> Standard_Boolean

        Returns true if a year is a leap year.
        The leap years are divisable by 4 and not by 100 except
        the years divisable by 400.

        :type yy: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Quantity_Date_IsLeap(*args)

    IsLeap = staticmethod(IsLeap)
    __swig_destroy__ = _Quantity.delete_Quantity_Date
Quantity_Date_swigregister = _Quantity.Quantity_Date_swigregister
Quantity_Date_swigregister(Quantity_Date)

def Quantity_Date_IsValid(*args):
    """
    Quantity_Date_IsValid(Standard_Integer const mm, Standard_Integer const dd, Standard_Integer const yy, Standard_Integer const hh, Standard_Integer const mn, Standard_Integer const ss, Standard_Integer const mis=0, Standard_Integer const mics=0) -> Standard_Boolean

    Checks the validity of a date - returns true if a
    date defined from the year yyyy, the month mm,
    the day dd, the hour hh, the minute mn, the
    second ss, the millisecond mis (defaulted to 0)
    and the microsecond mics (defaulted to 0) is valid.
    A date must satisfy the conditions above:
    -   yyyy is greater than or equal to 1979,
    -   mm lies within the range [1, 12] (with 1
    corresponding to January and 12 to December),
    -   dd lies within a valid range for the month mm
    (from 1 to 28, 29, 30 or 31 depending on
    mm and whether yyyy is a leap year or not),
    -   hh lies within the range [0, 23],
    -   mn lies within the range [0, 59],
    -   ss lies within the range [0, 59],
    -   mis lies within the range [0, 999],
    -   mics lies within the range [0, 999].C

    :type mm: int
    :type dd: int
    :type yy: int
    :type hh: int
    :type mn: int
    :type ss: int
    :type mis: int
    :type mics: int
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _Quantity.Quantity_Date_IsValid(*args)

def Quantity_Date_IsLeap(*args):
    """
    Quantity_Date_IsLeap(Standard_Integer const yy) -> Standard_Boolean

    Returns true if a year is a leap year.
    The leap years are divisable by 4 and not by 100 except
    the years divisable by 400.

    :type yy: int
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _Quantity.Quantity_Date_IsLeap(*args)

class Quantity_PeriodDefinitionError(Standard.Standard_DomainError):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Quantity_PeriodDefinitionError
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Quantity_PeriodDefinitionError(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Quantity_PeriodDefinitionError self) -> Quantity_PeriodDefinitionError
        __init__(Quantity_PeriodDefinitionError self, Standard_CString const theMessage) -> Quantity_PeriodDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString

        """
        this = _Quantity.new_Quantity_PeriodDefinitionError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewInstance(*args):
        """
        NewInstance(Standard_CString const theMessage) -> Handle_Quantity_PeriodDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Quantity.Handle_Quantity_PeriodDefinitionError

        """
        return _Quantity.Quantity_PeriodDefinitionError_NewInstance(*args)

    NewInstance = staticmethod(NewInstance)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Quantity.Quantity_PeriodDefinitionError_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Quantity.Quantity_PeriodDefinitionError_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Quantity.Quantity_PeriodDefinitionError_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Quantity.delete_Quantity_PeriodDefinitionError
Quantity_PeriodDefinitionError_swigregister = _Quantity.Quantity_PeriodDefinitionError_swigregister
Quantity_PeriodDefinitionError_swigregister(Quantity_PeriodDefinitionError)

def Quantity_PeriodDefinitionError_NewInstance(*args):
    """
    Quantity_PeriodDefinitionError_NewInstance(Standard_CString const theMessage) -> Handle_Quantity_PeriodDefinitionError

    :type theMessage: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.Quantity.Handle_Quantity_PeriodDefinitionError

    """
    return _Quantity.Quantity_PeriodDefinitionError_NewInstance(*args)

def Quantity_PeriodDefinitionError_get_type_name(*args):
    """
    Quantity_PeriodDefinitionError_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Quantity.Quantity_PeriodDefinitionError_get_type_name(*args)

def Quantity_PeriodDefinitionError_get_type_descriptor(*args):
    """
    Quantity_PeriodDefinitionError_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Quantity.Quantity_PeriodDefinitionError_get_type_descriptor(*args)

class Quantity_ColorRGBA(object):
    """The pair of Quantity_Color and Alpha component (1.0 opaque, 0.0 transparent)."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Quantity_ColorRGBA self) -> Quantity_ColorRGBA
        __init__(Quantity_ColorRGBA self, Quantity_Color theRgb) -> Quantity_ColorRGBA
        __init__(Quantity_ColorRGBA self, Quantity_Color theRgb, float theAlpha) -> Quantity_ColorRGBA
        __init__(Quantity_ColorRGBA self, NCollection_Vec4< float > const & theRgba) -> Quantity_ColorRGBA
        __init__(Quantity_ColorRGBA self, float theRed, float theGreen, float theBlue, float theAlpha) -> Quantity_ColorRGBA

        Creates the color from RGBA values.

        :type theRed: float
        :type theGreen: float
        :type theBlue: float
        :type theAlpha: float

        """
        this = _Quantity.new_Quantity_ColorRGBA(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetValues(self, *args):
        """
        SetValues(Quantity_ColorRGBA self, float theRed, float theGreen, float theBlue, float theAlpha)

        Assign new values to the color.

        :type theRed: float
        :type theGreen: float
        :type theBlue: float
        :type theAlpha: float

        """
        return _Quantity.Quantity_ColorRGBA_SetValues(self, *args)


    def GetRGB(self, *args):
        """
        Return RGB color value.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        res = _Quantity.Quantity_ColorRGBA_GetRGB(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeRGB(self, *args):
        """
        ChangeRGB(Quantity_ColorRGBA self) -> Quantity_Color

        Modify RGB color components without affecting alpha value.

        :rtype: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Quantity.Quantity_ColorRGBA_ChangeRGB(self, *args)


    def SetRGB(self, *args):
        """
        SetRGB(Quantity_ColorRGBA self, Quantity_Color theRgb)

        Assign RGB color components without affecting alpha value.

        :type theRgb: OCC.wrapper.Quantity.Quantity_Color

        """
        return _Quantity.Quantity_ColorRGBA_SetRGB(self, *args)


    def Alpha(self, *args):
        """
        Alpha(Quantity_ColorRGBA self) -> Standard_ShortReal

        Return alpha value (1.0 means opaque, 0.0 means fully transparent).

        :rtype: OCC.wrapper.Standard.Standard_ShortReal

        """
        return _Quantity.Quantity_ColorRGBA_Alpha(self, *args)


    def SetAlpha(self, *args):
        """
        SetAlpha(Quantity_ColorRGBA self, Standard_ShortReal const theAlpha)

        Assign the alpha value.

        :type theAlpha: float

        """
        return _Quantity.Quantity_ColorRGBA_SetAlpha(self, *args)


    def IsDifferent(self, *args):
        """
        IsDifferent(Quantity_ColorRGBA self, Quantity_ColorRGBA theOther) -> bool

        Returns true if the distance between colors is greater than Epsilon().

        :type theOther: OCC.wrapper.Quantity.Quantity_ColorRGBA
        :rtype: bool

        """
        return _Quantity.Quantity_ColorRGBA_IsDifferent(self, *args)


    def __ne__(self, *args):
        """
        __ne__(Quantity_ColorRGBA self, Quantity_ColorRGBA theOther) -> bool

        Returns true if the distance between colors is greater than Epsilon().

        :type theOther: OCC.wrapper.Quantity.Quantity_ColorRGBA
        :rtype: bool

        """
        return _Quantity.Quantity_ColorRGBA___ne__(self, *args)


    def IsEqual(self, *args):
        """
        IsEqual(Quantity_ColorRGBA self, Quantity_ColorRGBA theOther) -> bool

        Two colors are considered to be equal if their distance is no greater than Epsilon().

        :type theOther: OCC.wrapper.Quantity.Quantity_ColorRGBA
        :rtype: bool

        """
        return _Quantity.Quantity_ColorRGBA_IsEqual(self, *args)


    def __eq__(self, *args):
        """
        __eq__(Quantity_ColorRGBA self, Quantity_ColorRGBA theOther) -> bool

        Two colors are considered to be equal if their distance is no greater than Epsilon().

        :type theOther: OCC.wrapper.Quantity.Quantity_ColorRGBA
        :rtype: bool

        """
        return _Quantity.Quantity_ColorRGBA___eq__(self, *args)

    __swig_destroy__ = _Quantity.delete_Quantity_ColorRGBA
Quantity_ColorRGBA_swigregister = _Quantity.Quantity_ColorRGBA_swigregister
Quantity_ColorRGBA_swigregister(Quantity_ColorRGBA)

class NCollection_Array1_Quantity_Color(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_Quantity_Color self) -> NCollection_Array1< Quantity_Color >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _Quantity.NCollection_Array1_Quantity_Color_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_Quantity_Color self) -> NCollection_Array1< Quantity_Color >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _Quantity.NCollection_Array1_Quantity_Color_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_Quantity_Color self) -> NCollection_Array1< Quantity_Color >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _Quantity.NCollection_Array1_Quantity_Color_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_Quantity_Color self) -> NCollection_Array1< Quantity_Color >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _Quantity.NCollection_Array1_Quantity_Color_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _Quantity.new_NCollection_Array1_Quantity_Color(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_Quantity_Color self, Quantity_Color theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _Quantity.NCollection_Array1_Quantity_Color_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_Quantity_Color self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.NCollection_Array1_Quantity_Color_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_Quantity_Color self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.NCollection_Array1_Quantity_Color_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_Quantity_Color self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.NCollection_Array1_Quantity_Color_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_Quantity_Color self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.NCollection_Array1_Quantity_Color_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_Quantity_Color self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.NCollection_Array1_Quantity_Color_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_Quantity_Color self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.NCollection_Array1_Quantity_Color_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_Quantity_Color self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.NCollection_Array1_Quantity_Color_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_Quantity_Color self, NCollection_Array1_Quantity_Color theOther) -> NCollection_Array1_Quantity_Color

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _Quantity.NCollection_Array1_Quantity_Color_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_Quantity_Color self, NCollection_Array1_Quantity_Color theOther) -> NCollection_Array1_Quantity_Color

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _Quantity.NCollection_Array1_Quantity_Color_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_Quantity_Color self, NCollection_Array1_Quantity_Color theOther) -> NCollection_Array1_Quantity_Color
        assign(NCollection_Array1_Quantity_Color self, NCollection_Array1_Quantity_Color theOther) -> NCollection_Array1_Quantity_Color

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _Quantity.NCollection_Array1_Quantity_Color_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _Quantity.NCollection_Array1_Quantity_Color_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_Quantity_Color self) -> Quantity_Color

        @return first element

        :rtype: TheItemType &

        """
        return _Quantity.NCollection_Array1_Quantity_Color_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _Quantity.NCollection_Array1_Quantity_Color_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_Quantity_Color self) -> Quantity_Color

        @return last element

        :rtype: TheItemType &

        """
        return _Quantity.NCollection_Array1_Quantity_Color_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Quantity.NCollection_Array1_Quantity_Color_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_Quantity_Color self, Standard_Integer const theIndex) -> Quantity_Color

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _Quantity.NCollection_Array1_Quantity_Color_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Quantity.NCollection_Array1_Quantity_Color___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _Quantity.NCollection_Array1_Quantity_Color_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_Quantity_Color self, Standard_Integer const theIndex, Quantity_Color theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _Quantity.NCollection_Array1_Quantity_Color_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_Quantity_Color self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _Quantity.NCollection_Array1_Quantity_Color_Resize(self, *args)

    __swig_destroy__ = _Quantity.delete_NCollection_Array1_Quantity_Color
NCollection_Array1_Quantity_Color_swigregister = _Quantity.NCollection_Array1_Quantity_Color_swigregister
NCollection_Array1_Quantity_Color_swigregister(NCollection_Array1_Quantity_Color)


try:
	Quantity_Array1OfColor = NCollection_Array1_Quantity_Color
except NameError:
	pass # does not exist, probably ignored

class Handle_Quantity_ColorDefinitionError(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Quantity_ColorDefinitionError self)

        Nullify the handle


        """
        return _Quantity.Handle_Quantity_ColorDefinitionError_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Quantity_ColorDefinitionError self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Quantity.Handle_Quantity_ColorDefinitionError_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Quantity_ColorDefinitionError self, Quantity_ColorDefinitionError thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Quantity.Handle_Quantity_ColorDefinitionError_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Quantity_ColorDefinitionError self, Handle_Quantity_ColorDefinitionError theHandle) -> Handle_Quantity_ColorDefinitionError
        assign(Handle_Quantity_ColorDefinitionError self, Quantity_ColorDefinitionError thePtr) -> Handle_Quantity_ColorDefinitionError
        assign(Handle_Quantity_ColorDefinitionError self, Handle_Quantity_ColorDefinitionError theHandle) -> Handle_Quantity_ColorDefinitionError

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Quantity.Handle_Quantity_ColorDefinitionError_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Quantity_ColorDefinitionError self) -> Quantity_ColorDefinitionError

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Quantity.Handle_Quantity_ColorDefinitionError_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Quantity_ColorDefinitionError self) -> Quantity_ColorDefinitionError

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Quantity.Handle_Quantity_ColorDefinitionError___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Quantity_ColorDefinitionError self) -> Quantity_ColorDefinitionError

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Quantity.Handle_Quantity_ColorDefinitionError___ref__(self, *args)


    def __hash__(self):
        return _Quantity.Handle_Quantity_ColorDefinitionError___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Quantity.Handle_Quantity_ColorDefinitionError___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Quantity.new_Handle_Quantity_ColorDefinitionError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Quantity.Handle_Quantity_ColorDefinitionError_DownCast)
    __swig_destroy__ = _Quantity.delete_Handle_Quantity_ColorDefinitionError

    def NewInstance(self, *args):
        """
        NewInstance(Handle_Quantity_ColorDefinitionError self, Standard_CString const theMessage) -> Handle_Quantity_ColorDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Quantity.Handle_Quantity_ColorDefinitionError

        """
        return _Quantity.Handle_Quantity_ColorDefinitionError_NewInstance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Quantity_ColorDefinitionError self) -> char const *

        :rtype: const char *

        """
        return _Quantity.Handle_Quantity_ColorDefinitionError_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Quantity.Handle_Quantity_ColorDefinitionError_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Quantity.Handle_Quantity_ColorDefinitionError_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Print(self, *args):
        """
        Print(Handle_Quantity_ColorDefinitionError self, Standard_OStream & s)

        Prints on the stream <s> the exception name followed by
        the error message.
        Level: Advanced
        Warning:
        The operator "OStream& operator<< (Standard_OStream&,
        Handle(Standard_Failure)&)"
        is implemented. (This operator uses the method Print)

        :type s: OCC.wrapper.Standard.Standard_OStream

        """
        return _Quantity.Handle_Quantity_ColorDefinitionError_Print(self, *args)


    def GetMessageString(self, *args):
        """
        GetMessageString(Handle_Quantity_ColorDefinitionError self) -> Standard_CString

        Returns error message

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Quantity.Handle_Quantity_ColorDefinitionError_GetMessageString(self, *args)


    def SetMessageString(self, *args):
        """
        SetMessageString(Handle_Quantity_ColorDefinitionError self, Standard_CString const aMessage)

        Sets error message

        :type aMessage: OCC.wrapper.Standard.Standard_CString

        """
        return _Quantity.Handle_Quantity_ColorDefinitionError_SetMessageString(self, *args)


    def Reraise(self, *args):
        """
        Reraise(Handle_Quantity_ColorDefinitionError self)
        Reraise(Handle_Quantity_ColorDefinitionError self, Standard_CString const aMessage)
        Reraise(Handle_Quantity_ColorDefinitionError self, Standard_SStream const & aReason)

        Reraises a caught exception and changes its error message.

        :type aReason: OCC.wrapper.Standard.Standard_SStream

        """
        return _Quantity.Handle_Quantity_ColorDefinitionError_Reraise(self, *args)


    def Jump(self, *args):
        """
        Jump(Handle_Quantity_ColorDefinitionError self)

        Used to throw CASCADE exception from C signal handler.
        On platforms that do not allow throwing C++ exceptions
        from this handler (e.g. Linux), uses longjump to get to
        the current active signal handler, and only then is
        converted to C++ exception.


        """
        return _Quantity.Handle_Quantity_ColorDefinitionError_Jump(self, *args)


    def Caught(self, *args):
        """
        Caught(Handle_Quantity_ColorDefinitionError self) -> Handle_Standard_Failure

        Returns the last caught exception.
        Needed when exceptions are emulated by C longjumps,
        in other cases is also provided for compatibility.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Failure

        """
        return _Quantity.Handle_Quantity_ColorDefinitionError_Caught(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Quantity_ColorDefinitionError self)

        Memory deallocator for transient classes


        """
        return _Quantity.Handle_Quantity_ColorDefinitionError_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Quantity_ColorDefinitionError self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Quantity_ColorDefinitionError self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Handle_Quantity_ColorDefinitionError_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Quantity_ColorDefinitionError self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Quantity_ColorDefinitionError self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Handle_Quantity_ColorDefinitionError_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Quantity_ColorDefinitionError self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Quantity.Handle_Quantity_ColorDefinitionError_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Quantity_ColorDefinitionError self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.Handle_Quantity_ColorDefinitionError_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Quantity_ColorDefinitionError self)

        Increments the reference counter of this object


        """
        return _Quantity.Handle_Quantity_ColorDefinitionError_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Quantity_ColorDefinitionError self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.Handle_Quantity_ColorDefinitionError_DecrementRefCounter(self, *args)

Handle_Quantity_ColorDefinitionError_swigregister = _Quantity.Handle_Quantity_ColorDefinitionError_swigregister
Handle_Quantity_ColorDefinitionError_swigregister(Handle_Quantity_ColorDefinitionError)

def Handle_Quantity_ColorDefinitionError_DownCast(thing):
    return _Quantity.Handle_Quantity_ColorDefinitionError_DownCast(thing)
Handle_Quantity_ColorDefinitionError_DownCast = _Quantity.Handle_Quantity_ColorDefinitionError_DownCast

class Handle_Quantity_DateDefinitionError(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Quantity_DateDefinitionError self)

        Nullify the handle


        """
        return _Quantity.Handle_Quantity_DateDefinitionError_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Quantity_DateDefinitionError self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Quantity.Handle_Quantity_DateDefinitionError_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Quantity_DateDefinitionError self, Quantity_DateDefinitionError thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Quantity.Handle_Quantity_DateDefinitionError_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Quantity_DateDefinitionError self, Handle_Quantity_DateDefinitionError theHandle) -> Handle_Quantity_DateDefinitionError
        assign(Handle_Quantity_DateDefinitionError self, Quantity_DateDefinitionError thePtr) -> Handle_Quantity_DateDefinitionError
        assign(Handle_Quantity_DateDefinitionError self, Handle_Quantity_DateDefinitionError theHandle) -> Handle_Quantity_DateDefinitionError

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Quantity.Handle_Quantity_DateDefinitionError_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Quantity_DateDefinitionError self) -> Quantity_DateDefinitionError

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Quantity.Handle_Quantity_DateDefinitionError_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Quantity_DateDefinitionError self) -> Quantity_DateDefinitionError

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Quantity.Handle_Quantity_DateDefinitionError___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Quantity_DateDefinitionError self) -> Quantity_DateDefinitionError

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Quantity.Handle_Quantity_DateDefinitionError___ref__(self, *args)


    def __hash__(self):
        return _Quantity.Handle_Quantity_DateDefinitionError___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Quantity.Handle_Quantity_DateDefinitionError___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Quantity.new_Handle_Quantity_DateDefinitionError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Quantity.Handle_Quantity_DateDefinitionError_DownCast)
    __swig_destroy__ = _Quantity.delete_Handle_Quantity_DateDefinitionError

    def NewInstance(self, *args):
        """
        NewInstance(Handle_Quantity_DateDefinitionError self, Standard_CString const theMessage) -> Handle_Quantity_DateDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Quantity.Handle_Quantity_DateDefinitionError

        """
        return _Quantity.Handle_Quantity_DateDefinitionError_NewInstance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Quantity_DateDefinitionError self) -> char const *

        :rtype: const char *

        """
        return _Quantity.Handle_Quantity_DateDefinitionError_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Quantity.Handle_Quantity_DateDefinitionError_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Quantity.Handle_Quantity_DateDefinitionError_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Print(self, *args):
        """
        Print(Handle_Quantity_DateDefinitionError self, Standard_OStream & s)

        Prints on the stream <s> the exception name followed by
        the error message.
        Level: Advanced
        Warning:
        The operator "OStream& operator<< (Standard_OStream&,
        Handle(Standard_Failure)&)"
        is implemented. (This operator uses the method Print)

        :type s: OCC.wrapper.Standard.Standard_OStream

        """
        return _Quantity.Handle_Quantity_DateDefinitionError_Print(self, *args)


    def GetMessageString(self, *args):
        """
        GetMessageString(Handle_Quantity_DateDefinitionError self) -> Standard_CString

        Returns error message

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Quantity.Handle_Quantity_DateDefinitionError_GetMessageString(self, *args)


    def SetMessageString(self, *args):
        """
        SetMessageString(Handle_Quantity_DateDefinitionError self, Standard_CString const aMessage)

        Sets error message

        :type aMessage: OCC.wrapper.Standard.Standard_CString

        """
        return _Quantity.Handle_Quantity_DateDefinitionError_SetMessageString(self, *args)


    def Reraise(self, *args):
        """
        Reraise(Handle_Quantity_DateDefinitionError self)
        Reraise(Handle_Quantity_DateDefinitionError self, Standard_CString const aMessage)
        Reraise(Handle_Quantity_DateDefinitionError self, Standard_SStream const & aReason)

        Reraises a caught exception and changes its error message.

        :type aReason: OCC.wrapper.Standard.Standard_SStream

        """
        return _Quantity.Handle_Quantity_DateDefinitionError_Reraise(self, *args)


    def Jump(self, *args):
        """
        Jump(Handle_Quantity_DateDefinitionError self)

        Used to throw CASCADE exception from C signal handler.
        On platforms that do not allow throwing C++ exceptions
        from this handler (e.g. Linux), uses longjump to get to
        the current active signal handler, and only then is
        converted to C++ exception.


        """
        return _Quantity.Handle_Quantity_DateDefinitionError_Jump(self, *args)


    def Caught(self, *args):
        """
        Caught(Handle_Quantity_DateDefinitionError self) -> Handle_Standard_Failure

        Returns the last caught exception.
        Needed when exceptions are emulated by C longjumps,
        in other cases is also provided for compatibility.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Failure

        """
        return _Quantity.Handle_Quantity_DateDefinitionError_Caught(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Quantity_DateDefinitionError self)

        Memory deallocator for transient classes


        """
        return _Quantity.Handle_Quantity_DateDefinitionError_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Quantity_DateDefinitionError self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Quantity_DateDefinitionError self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Handle_Quantity_DateDefinitionError_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Quantity_DateDefinitionError self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Quantity_DateDefinitionError self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Handle_Quantity_DateDefinitionError_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Quantity_DateDefinitionError self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Quantity.Handle_Quantity_DateDefinitionError_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Quantity_DateDefinitionError self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.Handle_Quantity_DateDefinitionError_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Quantity_DateDefinitionError self)

        Increments the reference counter of this object


        """
        return _Quantity.Handle_Quantity_DateDefinitionError_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Quantity_DateDefinitionError self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.Handle_Quantity_DateDefinitionError_DecrementRefCounter(self, *args)

Handle_Quantity_DateDefinitionError_swigregister = _Quantity.Handle_Quantity_DateDefinitionError_swigregister
Handle_Quantity_DateDefinitionError_swigregister(Handle_Quantity_DateDefinitionError)

def Handle_Quantity_DateDefinitionError_DownCast(thing):
    return _Quantity.Handle_Quantity_DateDefinitionError_DownCast(thing)
Handle_Quantity_DateDefinitionError_DownCast = _Quantity.Handle_Quantity_DateDefinitionError_DownCast

class Quantity_Period(object):
    """
    Manages date intervals. For example, a Period object
    gives the interval between two dates.
    A period is expressed in seconds and microseconds.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Quantity_Period self, Standard_Integer const dd, Standard_Integer const hh, Standard_Integer const mn, Standard_Integer const ss, Standard_Integer const mis=0, Standard_Integer const mics=0) -> Quantity_Period
        __init__(Quantity_Period self, Standard_Integer const ss, Standard_Integer const mics=0) -> Quantity_Period

        Creates a Period with a number of seconds and microseconds.
        Exceptions
        Quantity_PeriodDefinitionError:
        -   if the number of seconds expressed either by:
        -   dd days, hh hours, mn minutes and ss seconds, or
        -   Ss
        is less than 0.
        -   if the number of microseconds expressed either by:
        -   mis milliseconds and mics microseconds, or
        -   Mics
        is less than 0.

        :type ss: int
        :type mics: int

        """
        this = _Quantity.new_Quantity_Period(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Values(self, *args):
        """
        Values(Quantity_Period self)
        Values(Quantity_Period self)

        Returns the number of seconds in Ss and the
        number of remainding microseconds in Mics of this period.
        Example of return values: 3600 seconds and 0 microseconds

        :type ss: int
        :type mics: int

        """
        return _Quantity.Quantity_Period_Values(self, *args)


    def SetValues(self, *args):
        """
        SetValues(Quantity_Period self, Standard_Integer const dd, Standard_Integer const hh, Standard_Integer const mn, Standard_Integer const ss, Standard_Integer const mis=0, Standard_Integer const mics=0)
        SetValues(Quantity_Period self, Standard_Integer const ss, Standard_Integer const mics=0)

        Assigns to this period the time interval defined
        -   with Ss seconds and Mics (defaulted to 0) microseconds.
        Exceptions
        Quantity_PeriodDefinitionError:
        -   if the number of seconds expressed either by:
        -   dd days, hh hours, mn minutes and ss seconds, or
        -   Ss
        is less than 0.
        -   if the number of microseconds expressed either by:
        -   mis milliseconds and mics microseconds, or
        -   Mics
        is less than 0.

        :type ss: int
        :type mics: int

        """
        return _Quantity.Quantity_Period_SetValues(self, *args)


    def Subtract(self, *args):
        """
        Subtract(Quantity_Period self, Quantity_Period anOther) -> Quantity_Period

        Subtracts one Period from another and returns the difference.

        :type anOther: OCC.wrapper.Quantity.Quantity_Period
        :rtype: OCC.wrapper.Quantity.Quantity_Period

        """
        return _Quantity.Quantity_Period_Subtract(self, *args)


    def __sub__(self, *args):
        """
        __sub__(Quantity_Period self, Quantity_Period anOther) -> Quantity_Period

        :type anOther: OCC.wrapper.Quantity.Quantity_Period
        :rtype: OCC.wrapper.Quantity.Quantity_Period

        """
        return _Quantity.Quantity_Period___sub__(self, *args)


    def Add(self, *args):
        """
        Add(Quantity_Period self, Quantity_Period anOther) -> Quantity_Period

        Adds one Period to another one.

        :type anOther: OCC.wrapper.Quantity.Quantity_Period
        :rtype: OCC.wrapper.Quantity.Quantity_Period

        """
        return _Quantity.Quantity_Period_Add(self, *args)


    def __add__(self, *args):
        """
        __add__(Quantity_Period self, Quantity_Period anOther) -> Quantity_Period

        :type anOther: OCC.wrapper.Quantity.Quantity_Period
        :rtype: OCC.wrapper.Quantity.Quantity_Period

        """
        return _Quantity.Quantity_Period___add__(self, *args)


    def IsEqual(self, *args):
        """
        IsEqual(Quantity_Period self, Quantity_Period anOther) -> Standard_Boolean

        Returns TRUE if both <me> and <other> are equal.

        :type anOther: OCC.wrapper.Quantity.Quantity_Period
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Quantity_Period_IsEqual(self, *args)


    def __eq__(self, *args):
        """
        __eq__(Quantity_Period self, Quantity_Period anOther) -> Standard_Boolean

        :type anOther: OCC.wrapper.Quantity.Quantity_Period
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Quantity_Period___eq__(self, *args)


    def IsShorter(self, *args):
        """
        IsShorter(Quantity_Period self, Quantity_Period anOther) -> Standard_Boolean

        Returns TRUE if <me> is shorter than <other>.

        :type anOther: OCC.wrapper.Quantity.Quantity_Period
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Quantity_Period_IsShorter(self, *args)


    def __lt__(self, *args):
        """
        __lt__(Quantity_Period self, Quantity_Period anOther) -> Standard_Boolean

        :type anOther: OCC.wrapper.Quantity.Quantity_Period
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Quantity_Period___lt__(self, *args)


    def IsLonger(self, *args):
        """
        IsLonger(Quantity_Period self, Quantity_Period anOther) -> Standard_Boolean

        Returns TRUE if <me> is longer then <other>.

        :type anOther: OCC.wrapper.Quantity.Quantity_Period
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Quantity_Period_IsLonger(self, *args)


    def __gt__(self, *args):
        """
        __gt__(Quantity_Period self, Quantity_Period anOther) -> Standard_Boolean

        :type anOther: OCC.wrapper.Quantity.Quantity_Period
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Quantity_Period___gt__(self, *args)


    def IsValid(*args):
        """
        IsValid(Standard_Integer const dd, Standard_Integer const hh, Standard_Integer const mn, Standard_Integer const ss, Standard_Integer const mis=0, Standard_Integer const mics=0) -> Standard_Boolean
        IsValid(Standard_Integer const ss, Standard_Integer const mics=0) -> Standard_Boolean

        Checks the validity of a Period in form (ss,mic)
        With:      0 <= ss
        0 <= mics

        :type ss: int
        :type mics: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Quantity_Period_IsValid(*args)

    IsValid = staticmethod(IsValid)
    __swig_destroy__ = _Quantity.delete_Quantity_Period
Quantity_Period_swigregister = _Quantity.Quantity_Period_swigregister
Quantity_Period_swigregister(Quantity_Period)

def Quantity_Period_IsValid(*args):
    """
    IsValid(Standard_Integer const dd, Standard_Integer const hh, Standard_Integer const mn, Standard_Integer const ss, Standard_Integer const mis=0, Standard_Integer const mics=0) -> Standard_Boolean
    Quantity_Period_IsValid(Standard_Integer const ss, Standard_Integer const mics=0) -> Standard_Boolean

    Checks the validity of a Period in form (ss,mic)
    With:      0 <= ss
    0 <= mics

    :type ss: int
    :type mics: int
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _Quantity.Quantity_Period_IsValid(*args)

class Handle_Quantity_PeriodDefinitionError(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Quantity_PeriodDefinitionError self)

        Nullify the handle


        """
        return _Quantity.Handle_Quantity_PeriodDefinitionError_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Quantity_PeriodDefinitionError self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Quantity.Handle_Quantity_PeriodDefinitionError_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Quantity_PeriodDefinitionError self, Quantity_PeriodDefinitionError thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Quantity.Handle_Quantity_PeriodDefinitionError_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Quantity_PeriodDefinitionError self, Handle_Quantity_PeriodDefinitionError theHandle) -> Handle_Quantity_PeriodDefinitionError
        assign(Handle_Quantity_PeriodDefinitionError self, Quantity_PeriodDefinitionError thePtr) -> Handle_Quantity_PeriodDefinitionError
        assign(Handle_Quantity_PeriodDefinitionError self, Handle_Quantity_PeriodDefinitionError theHandle) -> Handle_Quantity_PeriodDefinitionError

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Quantity.Handle_Quantity_PeriodDefinitionError_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Quantity_PeriodDefinitionError self) -> Quantity_PeriodDefinitionError

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Quantity.Handle_Quantity_PeriodDefinitionError_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Quantity_PeriodDefinitionError self) -> Quantity_PeriodDefinitionError

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Quantity.Handle_Quantity_PeriodDefinitionError___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Quantity_PeriodDefinitionError self) -> Quantity_PeriodDefinitionError

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Quantity.Handle_Quantity_PeriodDefinitionError___ref__(self, *args)


    def __hash__(self):
        return _Quantity.Handle_Quantity_PeriodDefinitionError___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Quantity.Handle_Quantity_PeriodDefinitionError___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Quantity.new_Handle_Quantity_PeriodDefinitionError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Quantity.Handle_Quantity_PeriodDefinitionError_DownCast)
    __swig_destroy__ = _Quantity.delete_Handle_Quantity_PeriodDefinitionError

    def NewInstance(self, *args):
        """
        NewInstance(Handle_Quantity_PeriodDefinitionError self, Standard_CString const theMessage) -> Handle_Quantity_PeriodDefinitionError

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Quantity.Handle_Quantity_PeriodDefinitionError

        """
        return _Quantity.Handle_Quantity_PeriodDefinitionError_NewInstance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Quantity_PeriodDefinitionError self) -> char const *

        :rtype: const char *

        """
        return _Quantity.Handle_Quantity_PeriodDefinitionError_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Quantity.Handle_Quantity_PeriodDefinitionError_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Quantity.Handle_Quantity_PeriodDefinitionError_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Print(self, *args):
        """
        Print(Handle_Quantity_PeriodDefinitionError self, Standard_OStream & s)

        Prints on the stream <s> the exception name followed by
        the error message.
        Level: Advanced
        Warning:
        The operator "OStream& operator<< (Standard_OStream&,
        Handle(Standard_Failure)&)"
        is implemented. (This operator uses the method Print)

        :type s: OCC.wrapper.Standard.Standard_OStream

        """
        return _Quantity.Handle_Quantity_PeriodDefinitionError_Print(self, *args)


    def GetMessageString(self, *args):
        """
        GetMessageString(Handle_Quantity_PeriodDefinitionError self) -> Standard_CString

        Returns error message

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _Quantity.Handle_Quantity_PeriodDefinitionError_GetMessageString(self, *args)


    def SetMessageString(self, *args):
        """
        SetMessageString(Handle_Quantity_PeriodDefinitionError self, Standard_CString const aMessage)

        Sets error message

        :type aMessage: OCC.wrapper.Standard.Standard_CString

        """
        return _Quantity.Handle_Quantity_PeriodDefinitionError_SetMessageString(self, *args)


    def Reraise(self, *args):
        """
        Reraise(Handle_Quantity_PeriodDefinitionError self)
        Reraise(Handle_Quantity_PeriodDefinitionError self, Standard_CString const aMessage)
        Reraise(Handle_Quantity_PeriodDefinitionError self, Standard_SStream const & aReason)

        Reraises a caught exception and changes its error message.

        :type aReason: OCC.wrapper.Standard.Standard_SStream

        """
        return _Quantity.Handle_Quantity_PeriodDefinitionError_Reraise(self, *args)


    def Jump(self, *args):
        """
        Jump(Handle_Quantity_PeriodDefinitionError self)

        Used to throw CASCADE exception from C signal handler.
        On platforms that do not allow throwing C++ exceptions
        from this handler (e.g. Linux), uses longjump to get to
        the current active signal handler, and only then is
        converted to C++ exception.


        """
        return _Quantity.Handle_Quantity_PeriodDefinitionError_Jump(self, *args)


    def Caught(self, *args):
        """
        Caught(Handle_Quantity_PeriodDefinitionError self) -> Handle_Standard_Failure

        Returns the last caught exception.
        Needed when exceptions are emulated by C longjumps,
        in other cases is also provided for compatibility.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Failure

        """
        return _Quantity.Handle_Quantity_PeriodDefinitionError_Caught(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Quantity_PeriodDefinitionError self)

        Memory deallocator for transient classes


        """
        return _Quantity.Handle_Quantity_PeriodDefinitionError_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Quantity_PeriodDefinitionError self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Quantity_PeriodDefinitionError self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Handle_Quantity_PeriodDefinitionError_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Quantity_PeriodDefinitionError self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Quantity_PeriodDefinitionError self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Handle_Quantity_PeriodDefinitionError_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Quantity_PeriodDefinitionError self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Quantity.Handle_Quantity_PeriodDefinitionError_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Quantity_PeriodDefinitionError self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.Handle_Quantity_PeriodDefinitionError_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Quantity_PeriodDefinitionError self)

        Increments the reference counter of this object


        """
        return _Quantity.Handle_Quantity_PeriodDefinitionError_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Quantity_PeriodDefinitionError self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.Handle_Quantity_PeriodDefinitionError_DecrementRefCounter(self, *args)

Handle_Quantity_PeriodDefinitionError_swigregister = _Quantity.Handle_Quantity_PeriodDefinitionError_swigregister
Handle_Quantity_PeriodDefinitionError_swigregister(Handle_Quantity_PeriodDefinitionError)

def Handle_Quantity_PeriodDefinitionError_DownCast(thing):
    return _Quantity.Handle_Quantity_PeriodDefinitionError_DownCast(thing)
Handle_Quantity_PeriodDefinitionError_DownCast = _Quantity.Handle_Quantity_PeriodDefinitionError_DownCast

class NCollection_Array2_Quantity_Color(object):
    """
    Purpose:   The class Array2 represents bi-dimensional arrays 
    of fixed size known at run time. 
    The ranges of indices are user defined.

    Warning:   Programs clients of such class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.LowerRow(); i <= A.UpperRow(); i++)
    for (j = A.LowerCol(); j <= A.UpperCol(); j++)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        Purpose:   The class Array2 represents bi-dimensional arrays 
        of fixed size known at run time. 
        The ranges of indices are user defined.

        Warning:   Programs clients of such class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.LowerRow(); i <= A.UpperRow(); i++)
        for (j = A.LowerCol(); j <= A.UpperCol(); j++)
        """
        this = _Quantity.new_NCollection_Array2_Quantity_Color(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array2_Quantity_Color self, Quantity_Color theValue)

        Initialise the values

        :type theValue: const TheItemType &

        """
        return _Quantity.NCollection_Array2_Quantity_Color_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array2_Quantity_Color self) -> Standard_Integer

        Size (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.NCollection_Array2_Quantity_Color_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array2_Quantity_Color self) -> Standard_Integer

        Length (number of items)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.NCollection_Array2_Quantity_Color_Length(self, *args)


    def RowLength(self, *args):
        """
        RowLength(NCollection_Array2_Quantity_Color self) -> Standard_Integer

        Returns length of the row, i.e. number of columns

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.NCollection_Array2_Quantity_Color_RowLength(self, *args)


    def ColLength(self, *args):
        """
        ColLength(NCollection_Array2_Quantity_Color self) -> Standard_Integer

        Returns length of the column, i.e. number of rows

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.NCollection_Array2_Quantity_Color_ColLength(self, *args)


    def LowerRow(self, *args):
        """
        LowerRow(NCollection_Array2_Quantity_Color self) -> Standard_Integer

        LowerRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.NCollection_Array2_Quantity_Color_LowerRow(self, *args)


    def UpperRow(self, *args):
        """
        UpperRow(NCollection_Array2_Quantity_Color self) -> Standard_Integer

        UpperRow

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.NCollection_Array2_Quantity_Color_UpperRow(self, *args)


    def LowerCol(self, *args):
        """
        LowerCol(NCollection_Array2_Quantity_Color self) -> Standard_Integer

        LowerCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.NCollection_Array2_Quantity_Color_LowerCol(self, *args)


    def UpperCol(self, *args):
        """
        UpperCol(NCollection_Array2_Quantity_Color self) -> Standard_Integer

        UpperCol

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.NCollection_Array2_Quantity_Color_UpperCol(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array2_Quantity_Color self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.NCollection_Array2_Quantity_Color_IsDeletable(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array2_Quantity_Color self, NCollection_Array2_Quantity_Color theOther) -> NCollection_Array2_Quantity_Color

        Assignment

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _Quantity.NCollection_Array2_Quantity_Color_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array2_Quantity_Color self, NCollection_Array2_Quantity_Color theOther) -> NCollection_Array2_Quantity_Color

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Array2
        :rtype: OCC.wrapper.NCollection.NCollection_Array2

        """
        return _Quantity.NCollection_Array2_Quantity_Color_assign(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _Quantity.NCollection_Array2_Quantity_Color_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array2_Quantity_Color self, Standard_Integer const theRow, Standard_Integer const theCol) -> Quantity_Color

        Variable value access

        :type theRow: int
        :type theCol: int
        :rtype: TheItemType &

        """
        return _Quantity.NCollection_Array2_Quantity_Color_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to ChangeValue

        :type theRow: int
        :type theCol: int
        :rtype: const TheItemType &

        """
        res = _Quantity.NCollection_Array2_Quantity_Color___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array2_Quantity_Color self, Standard_Integer const theRow, Standard_Integer const theCol, Quantity_Color theItem)

        SetValue

        :type theRow: int
        :type theCol: int
        :type theItem: const TheItemType &

        """
        return _Quantity.NCollection_Array2_Quantity_Color_SetValue(self, *args)

    __swig_destroy__ = _Quantity.delete_NCollection_Array2_Quantity_Color
NCollection_Array2_Quantity_Color_swigregister = _Quantity.NCollection_Array2_Quantity_Color_swigregister
NCollection_Array2_Quantity_Color_swigregister(NCollection_Array2_Quantity_Color)


try:
	Quantity_Array2OfColor = NCollection_Array2_Quantity_Color
except NameError:
	pass # does not exist, probably ignored

class Handle_Quantity_HArray1OfColor(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Quantity_HArray1OfColor self)

        Nullify the handle


        """
        return _Quantity.Handle_Quantity_HArray1OfColor_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Quantity_HArray1OfColor self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Quantity.Handle_Quantity_HArray1OfColor_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Quantity_HArray1OfColor self, Quantity_HArray1OfColor thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Quantity.Handle_Quantity_HArray1OfColor_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Quantity_HArray1OfColor self, Handle_Quantity_HArray1OfColor theHandle) -> Handle_Quantity_HArray1OfColor
        assign(Handle_Quantity_HArray1OfColor self, Quantity_HArray1OfColor thePtr) -> Handle_Quantity_HArray1OfColor
        assign(Handle_Quantity_HArray1OfColor self, Handle_Quantity_HArray1OfColor theHandle) -> Handle_Quantity_HArray1OfColor

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Quantity.Handle_Quantity_HArray1OfColor_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Quantity_HArray1OfColor self) -> Quantity_HArray1OfColor

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Quantity.Handle_Quantity_HArray1OfColor_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Quantity_HArray1OfColor self) -> Quantity_HArray1OfColor

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Quantity.Handle_Quantity_HArray1OfColor___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Quantity_HArray1OfColor self) -> Quantity_HArray1OfColor

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Quantity.Handle_Quantity_HArray1OfColor___ref__(self, *args)


    def __hash__(self):
        return _Quantity.Handle_Quantity_HArray1OfColor___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Quantity.Handle_Quantity_HArray1OfColor___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Quantity.new_Handle_Quantity_HArray1OfColor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Quantity.Handle_Quantity_HArray1OfColor_DownCast)
    __swig_destroy__ = _Quantity.delete_Handle_Quantity_HArray1OfColor

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.Quantity.Quantity_Array1OfColor

        """
        res = _Quantity.Handle_Quantity_HArray1OfColor_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_Quantity_HArray1OfColor self) -> NCollection_Array1_Quantity_Color

        :rtype: OCC.wrapper.Quantity.Quantity_Array1OfColor

        """
        return _Quantity.Handle_Quantity_HArray1OfColor_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Quantity_HArray1OfColor self) -> char const *

        :rtype: const char *

        """
        return _Quantity.Handle_Quantity_HArray1OfColor_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Quantity.Handle_Quantity_HArray1OfColor_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Quantity.Handle_Quantity_HArray1OfColor_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_Quantity_HArray1OfColor self)

        Memory deallocator for transient classes


        """
        return _Quantity.Handle_Quantity_HArray1OfColor_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Quantity_HArray1OfColor self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Quantity_HArray1OfColor self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Handle_Quantity_HArray1OfColor_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Quantity_HArray1OfColor self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Quantity_HArray1OfColor self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Quantity.Handle_Quantity_HArray1OfColor_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Quantity_HArray1OfColor self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Quantity.Handle_Quantity_HArray1OfColor_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Quantity_HArray1OfColor self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.Handle_Quantity_HArray1OfColor_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Quantity_HArray1OfColor self)

        Increments the reference counter of this object


        """
        return _Quantity.Handle_Quantity_HArray1OfColor_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Quantity_HArray1OfColor self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Quantity.Handle_Quantity_HArray1OfColor_DecrementRefCounter(self, *args)

Handle_Quantity_HArray1OfColor_swigregister = _Quantity.Handle_Quantity_HArray1OfColor_swigregister
Handle_Quantity_HArray1OfColor_swigregister(Handle_Quantity_HArray1OfColor)

def Handle_Quantity_HArray1OfColor_DownCast(thing):
    return _Quantity.Handle_Quantity_HArray1OfColor_DownCast(thing)
Handle_Quantity_HArray1OfColor_DownCast = _Quantity.Handle_Quantity_HArray1OfColor_DownCast



