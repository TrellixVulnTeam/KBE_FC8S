# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BinTObjDrivers')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BinTObjDrivers')
    _BinTObjDrivers = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BinTObjDrivers', [dirname(__file__)])
        except ImportError:
            import _BinTObjDrivers
            return _BinTObjDrivers
        try:
            _mod = imp.load_module('_BinTObjDrivers', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BinTObjDrivers = swig_import_helper()
    del swig_import_helper
else:
    import _BinTObjDrivers
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BinTObjDrivers.delete_SwigPyIterator

    def value(self):
        return _BinTObjDrivers.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BinTObjDrivers.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BinTObjDrivers.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BinTObjDrivers.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BinTObjDrivers.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BinTObjDrivers.SwigPyIterator_copy(self)

    def next(self):
        return _BinTObjDrivers.SwigPyIterator_next(self)

    def __next__(self):
        return _BinTObjDrivers.SwigPyIterator___next__(self)

    def previous(self):
        return _BinTObjDrivers.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BinTObjDrivers.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BinTObjDrivers.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BinTObjDrivers.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BinTObjDrivers.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BinTObjDrivers.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BinTObjDrivers.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BinTObjDrivers.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BinTObjDrivers.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BinTObjDrivers.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_BinTObjDrivers.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _BinTObjDrivers.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BinTObjDrivers.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinTObjDrivers.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _BinTObjDrivers.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _BinTObjDrivers.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _BinTObjDrivers.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BinTObjDrivers.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_BinTObjDrivers.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _BinTObjDrivers.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BinTObjDrivers.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinTObjDrivers.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _BinTObjDrivers.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _BinTObjDrivers.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _BinTObjDrivers.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _BinTObjDrivers.ptr_to_number(item)
ptr_to_number = _BinTObjDrivers.ptr_to_number

def HashCode(*args):
    return _BinTObjDrivers.HashCode(*args)
HashCode = _BinTObjDrivers.HashCode

def ptr_equal(a, b):
    return _BinTObjDrivers.ptr_equal(a, b)
ptr_equal = _BinTObjDrivers.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDocStd
else:
    import TDocStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDF
else:
    import CDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDM
else:
    import CDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Resource
else:
    import Resource
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PCDM
else:
    import PCDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import LDOM
else:
    import LDOM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Storage
else:
    import Storage
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BinObjMgt
else:
    import BinObjMgt
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BinMDF
else:
    import BinMDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BinLDrivers
else:
    import BinLDrivers
del _swig_python_version_info
class BinTObjDrivers_DocumentStorageDriver(BinLDrivers.BinLDrivers_DocumentStorageDriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinTObjDrivers_DocumentStorageDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinTObjDrivers_DocumentStorageDriver(self) 
            return h


    def __init__(self, *args):
        """__init__(BinTObjDrivers_DocumentStorageDriver self) -> BinTObjDrivers_DocumentStorageDriver"""
        this = _BinTObjDrivers.new_BinTObjDrivers_DocumentStorageDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def AttributeDrivers(self, *args):
        """
        AttributeDrivers(BinTObjDrivers_DocumentStorageDriver self, Handle_Message_Messenger theMsgDriver) -> Handle_BinMDF_ADriverTable

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.BinMDF.Handle_BinMDF_ADriverTable

        """
        return _BinTObjDrivers.BinTObjDrivers_DocumentStorageDriver_AttributeDrivers(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinTObjDrivers.BinTObjDrivers_DocumentStorageDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinTObjDrivers.BinTObjDrivers_DocumentStorageDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.BinTObjDrivers_DocumentStorageDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinTObjDrivers.delete_BinTObjDrivers_DocumentStorageDriver
BinTObjDrivers_DocumentStorageDriver_swigregister = _BinTObjDrivers.BinTObjDrivers_DocumentStorageDriver_swigregister
BinTObjDrivers_DocumentStorageDriver_swigregister(BinTObjDrivers_DocumentStorageDriver)

def BinTObjDrivers_DocumentStorageDriver_get_type_name(*args):
    """
    BinTObjDrivers_DocumentStorageDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinTObjDrivers.BinTObjDrivers_DocumentStorageDriver_get_type_name(*args)

def BinTObjDrivers_DocumentStorageDriver_get_type_descriptor(*args):
    """
    BinTObjDrivers_DocumentStorageDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinTObjDrivers.BinTObjDrivers_DocumentStorageDriver_get_type_descriptor(*args)

class BinTObjDrivers_XYZDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinTObjDrivers_XYZDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinTObjDrivers_XYZDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinTObjDrivers_XYZDriver self, Handle_Message_Messenger theMessageDriver) -> BinTObjDrivers_XYZDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinTObjDrivers.new_BinTObjDrivers_XYZDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinTObjDrivers_XYZDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinTObjDrivers.BinTObjDrivers_XYZDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinTObjDrivers_XYZDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinTObjDrivers_XYZDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinTObjDrivers.BinTObjDrivers_XYZDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinTObjDrivers.BinTObjDrivers_XYZDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinTObjDrivers.BinTObjDrivers_XYZDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.BinTObjDrivers_XYZDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinTObjDrivers.delete_BinTObjDrivers_XYZDriver
BinTObjDrivers_XYZDriver_swigregister = _BinTObjDrivers.BinTObjDrivers_XYZDriver_swigregister
BinTObjDrivers_XYZDriver_swigregister(BinTObjDrivers_XYZDriver)

def BinTObjDrivers_XYZDriver_get_type_name(*args):
    """
    BinTObjDrivers_XYZDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinTObjDrivers.BinTObjDrivers_XYZDriver_get_type_name(*args)

def BinTObjDrivers_XYZDriver_get_type_descriptor(*args):
    """
    BinTObjDrivers_XYZDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinTObjDrivers.BinTObjDrivers_XYZDriver_get_type_descriptor(*args)

class Handle_BinTObjDrivers_DocumentStorageDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinTObjDrivers_DocumentStorageDriver self)

        Nullify the handle


        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinTObjDrivers_DocumentStorageDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinTObjDrivers_DocumentStorageDriver self, BinTObjDrivers_DocumentStorageDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinTObjDrivers_DocumentStorageDriver self, Handle_BinTObjDrivers_DocumentStorageDriver theHandle) -> Handle_BinTObjDrivers_DocumentStorageDriver
        assign(Handle_BinTObjDrivers_DocumentStorageDriver self, BinTObjDrivers_DocumentStorageDriver thePtr) -> Handle_BinTObjDrivers_DocumentStorageDriver
        assign(Handle_BinTObjDrivers_DocumentStorageDriver self, Handle_BinTObjDrivers_DocumentStorageDriver theHandle) -> Handle_BinTObjDrivers_DocumentStorageDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinTObjDrivers_DocumentStorageDriver self) -> BinTObjDrivers_DocumentStorageDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinTObjDrivers_DocumentStorageDriver self) -> BinTObjDrivers_DocumentStorageDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinTObjDrivers_DocumentStorageDriver self) -> BinTObjDrivers_DocumentStorageDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver___ref__(self, *args)


    def __hash__(self):
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinTObjDrivers.new_Handle_BinTObjDrivers_DocumentStorageDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_DownCast)
    __swig_destroy__ = _BinTObjDrivers.delete_Handle_BinTObjDrivers_DocumentStorageDriver

    def AttributeDrivers(self, *args):
        """
        AttributeDrivers(Handle_BinTObjDrivers_DocumentStorageDriver self, Handle_Message_Messenger theMsgDriver) -> Handle_BinMDF_ADriverTable

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.BinMDF.Handle_BinMDF_ADriverTable

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_AttributeDrivers(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinTObjDrivers_DocumentStorageDriver self) -> char const *

        :rtype: const char *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Write(self, *args):
        """
        Write(Handle_BinTObjDrivers_DocumentStorageDriver self, Handle_CDM_Document theDocument, TCollection_ExtendedString theFileName)
        Write(Handle_BinTObjDrivers_DocumentStorageDriver self, Handle_CDM_Document theDocument, Standard_OStream & theOStream)

        Write <theDocument> to theOStream

        :type theDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :type theOStream: OCC.wrapper.Standard.Standard_OStream

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_Write(self, *args)


    def AddSection(self, *args):
        """
        AddSection(Handle_BinTObjDrivers_DocumentStorageDriver self, TCollection_AsciiString theName, Standard_Boolean const isPostRead)

        Create a section that should be written after the OCAF data

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type isPostRead: bool

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_AddSection(self, *args)


    def Make(self, *args):
        """
        Make(Handle_BinTObjDrivers_DocumentStorageDriver self, Handle_CDM_Document aDocument) -> Handle_PCDM_Document
        Make(Handle_BinTObjDrivers_DocumentStorageDriver self, Handle_CDM_Document aDocument, NCollection_Sequence_Handle_PCDM_Document Documents)

        By default, puts  in the Sequence the  document returns
        by the previous Make method.

        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :type Documents: OCC.wrapper.PCDM.PCDM_SequenceOfDocument

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_Make(self, *args)


    def SetFormat(self, *args):
        """
        SetFormat(Handle_BinTObjDrivers_DocumentStorageDriver self, TCollection_ExtendedString aformat)

        :type aformat: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_SetFormat(self, *args)


    def GetFormat(self, *args):
        """
        GetFormat(Handle_BinTObjDrivers_DocumentStorageDriver self) -> TCollection_ExtendedString

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_GetFormat(self, *args)


    def IsError(self, *args):
        """
        IsError(Handle_BinTObjDrivers_DocumentStorageDriver self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_IsError(self, *args)


    def SetIsError(self, *args):
        """
        SetIsError(Handle_BinTObjDrivers_DocumentStorageDriver self, Standard_Boolean const theIsError)

        :type theIsError: bool

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_SetIsError(self, *args)


    def GetStoreStatus(self, *args):
        """
        GetStoreStatus(Handle_BinTObjDrivers_DocumentStorageDriver self) -> PCDM_StoreStatus

        :rtype: OCC.wrapper.PCDM.PCDM_StoreStatus

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_GetStoreStatus(self, *args)


    def SetStoreStatus(self, *args):
        """
        SetStoreStatus(Handle_BinTObjDrivers_DocumentStorageDriver self, PCDM_StoreStatus const theStoreStatus)

        :type theStoreStatus: OCC.wrapper.PCDM.PCDM_StoreStatus

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_SetStoreStatus(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_BinTObjDrivers_DocumentStorageDriver self)

        Memory deallocator for transient classes


        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinTObjDrivers_DocumentStorageDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinTObjDrivers_DocumentStorageDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinTObjDrivers_DocumentStorageDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinTObjDrivers_DocumentStorageDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinTObjDrivers_DocumentStorageDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinTObjDrivers_DocumentStorageDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinTObjDrivers_DocumentStorageDriver self)

        Increments the reference counter of this object


        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinTObjDrivers_DocumentStorageDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_DecrementRefCounter(self, *args)

Handle_BinTObjDrivers_DocumentStorageDriver_swigregister = _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_swigregister
Handle_BinTObjDrivers_DocumentStorageDriver_swigregister(Handle_BinTObjDrivers_DocumentStorageDriver)

def Handle_BinTObjDrivers_DocumentStorageDriver_DownCast(thing):
    return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_DownCast(thing)
Handle_BinTObjDrivers_DocumentStorageDriver_DownCast = _BinTObjDrivers.Handle_BinTObjDrivers_DocumentStorageDriver_DownCast

class Handle_BinTObjDrivers_XYZDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinTObjDrivers_XYZDriver self)

        Nullify the handle


        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinTObjDrivers_XYZDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinTObjDrivers_XYZDriver self, BinTObjDrivers_XYZDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinTObjDrivers_XYZDriver self, Handle_BinTObjDrivers_XYZDriver theHandle) -> Handle_BinTObjDrivers_XYZDriver
        assign(Handle_BinTObjDrivers_XYZDriver self, BinTObjDrivers_XYZDriver thePtr) -> Handle_BinTObjDrivers_XYZDriver
        assign(Handle_BinTObjDrivers_XYZDriver self, Handle_BinTObjDrivers_XYZDriver theHandle) -> Handle_BinTObjDrivers_XYZDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinTObjDrivers_XYZDriver self) -> BinTObjDrivers_XYZDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinTObjDrivers_XYZDriver self) -> BinTObjDrivers_XYZDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinTObjDrivers_XYZDriver self) -> BinTObjDrivers_XYZDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver___ref__(self, *args)


    def __hash__(self):
        return _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinTObjDrivers.new_Handle_BinTObjDrivers_XYZDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_DownCast)
    __swig_destroy__ = _BinTObjDrivers.delete_Handle_BinTObjDrivers_XYZDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinTObjDrivers_XYZDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinTObjDrivers_XYZDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinTObjDrivers_XYZDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinTObjDrivers_XYZDriver self) -> char const *

        :rtype: const char *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinTObjDrivers_XYZDriver self)

        Memory deallocator for transient classes


        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinTObjDrivers_XYZDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinTObjDrivers_XYZDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinTObjDrivers_XYZDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinTObjDrivers_XYZDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinTObjDrivers_XYZDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinTObjDrivers_XYZDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinTObjDrivers_XYZDriver self)

        Increments the reference counter of this object


        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinTObjDrivers_XYZDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_DecrementRefCounter(self, *args)

Handle_BinTObjDrivers_XYZDriver_swigregister = _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_swigregister
Handle_BinTObjDrivers_XYZDriver_swigregister(Handle_BinTObjDrivers_XYZDriver)

def Handle_BinTObjDrivers_XYZDriver_DownCast(thing):
    return _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_DownCast(thing)
Handle_BinTObjDrivers_XYZDriver_DownCast = _BinTObjDrivers.Handle_BinTObjDrivers_XYZDriver_DownCast

class BinTObjDrivers_IntSparseArrayDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinTObjDrivers_IntSparseArrayDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinTObjDrivers_IntSparseArrayDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinTObjDrivers_IntSparseArrayDriver self, Handle_Message_Messenger theMessageDriver) -> BinTObjDrivers_IntSparseArrayDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinTObjDrivers.new_BinTObjDrivers_IntSparseArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinTObjDrivers_IntSparseArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinTObjDrivers.BinTObjDrivers_IntSparseArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinTObjDrivers_IntSparseArrayDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(BinTObjDrivers_IntSparseArrayDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinTObjDrivers.BinTObjDrivers_IntSparseArrayDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinTObjDrivers.BinTObjDrivers_IntSparseArrayDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinTObjDrivers.BinTObjDrivers_IntSparseArrayDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.BinTObjDrivers_IntSparseArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinTObjDrivers.delete_BinTObjDrivers_IntSparseArrayDriver
BinTObjDrivers_IntSparseArrayDriver_swigregister = _BinTObjDrivers.BinTObjDrivers_IntSparseArrayDriver_swigregister
BinTObjDrivers_IntSparseArrayDriver_swigregister(BinTObjDrivers_IntSparseArrayDriver)

def BinTObjDrivers_IntSparseArrayDriver_get_type_name(*args):
    """
    BinTObjDrivers_IntSparseArrayDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinTObjDrivers.BinTObjDrivers_IntSparseArrayDriver_get_type_name(*args)

def BinTObjDrivers_IntSparseArrayDriver_get_type_descriptor(*args):
    """
    BinTObjDrivers_IntSparseArrayDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinTObjDrivers.BinTObjDrivers_IntSparseArrayDriver_get_type_descriptor(*args)

class BinTObjDrivers_DocumentRetrievalDriver(BinLDrivers.BinLDrivers_DocumentRetrievalDriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinTObjDrivers_DocumentRetrievalDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinTObjDrivers_DocumentRetrievalDriver(self) 
            return h


    def __init__(self, *args):
        """__init__(BinTObjDrivers_DocumentRetrievalDriver self) -> BinTObjDrivers_DocumentRetrievalDriver"""
        this = _BinTObjDrivers.new_BinTObjDrivers_DocumentRetrievalDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def AttributeDrivers(self, *args):
        """
        AttributeDrivers(BinTObjDrivers_DocumentRetrievalDriver self, Handle_Message_Messenger theMsgDriver) -> Handle_BinMDF_ADriverTable

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.BinMDF.Handle_BinMDF_ADriverTable

        """
        return _BinTObjDrivers.BinTObjDrivers_DocumentRetrievalDriver_AttributeDrivers(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinTObjDrivers.BinTObjDrivers_DocumentRetrievalDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinTObjDrivers.BinTObjDrivers_DocumentRetrievalDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.BinTObjDrivers_DocumentRetrievalDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinTObjDrivers.delete_BinTObjDrivers_DocumentRetrievalDriver
BinTObjDrivers_DocumentRetrievalDriver_swigregister = _BinTObjDrivers.BinTObjDrivers_DocumentRetrievalDriver_swigregister
BinTObjDrivers_DocumentRetrievalDriver_swigregister(BinTObjDrivers_DocumentRetrievalDriver)

def BinTObjDrivers_DocumentRetrievalDriver_get_type_name(*args):
    """
    BinTObjDrivers_DocumentRetrievalDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinTObjDrivers.BinTObjDrivers_DocumentRetrievalDriver_get_type_name(*args)

def BinTObjDrivers_DocumentRetrievalDriver_get_type_descriptor(*args):
    """
    BinTObjDrivers_DocumentRetrievalDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinTObjDrivers.BinTObjDrivers_DocumentRetrievalDriver_get_type_descriptor(*args)

class BinTObjDrivers_ReferenceDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinTObjDrivers_ReferenceDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinTObjDrivers_ReferenceDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinTObjDrivers_ReferenceDriver self, Handle_Message_Messenger theMessageDriver) -> BinTObjDrivers_ReferenceDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinTObjDrivers.new_BinTObjDrivers_ReferenceDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinTObjDrivers_ReferenceDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinTObjDrivers.BinTObjDrivers_ReferenceDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinTObjDrivers_ReferenceDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinTObjDrivers_ReferenceDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinTObjDrivers.BinTObjDrivers_ReferenceDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinTObjDrivers.BinTObjDrivers_ReferenceDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinTObjDrivers.BinTObjDrivers_ReferenceDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.BinTObjDrivers_ReferenceDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinTObjDrivers.delete_BinTObjDrivers_ReferenceDriver
BinTObjDrivers_ReferenceDriver_swigregister = _BinTObjDrivers.BinTObjDrivers_ReferenceDriver_swigregister
BinTObjDrivers_ReferenceDriver_swigregister(BinTObjDrivers_ReferenceDriver)

def BinTObjDrivers_ReferenceDriver_get_type_name(*args):
    """
    BinTObjDrivers_ReferenceDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinTObjDrivers.BinTObjDrivers_ReferenceDriver_get_type_name(*args)

def BinTObjDrivers_ReferenceDriver_get_type_descriptor(*args):
    """
    BinTObjDrivers_ReferenceDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinTObjDrivers.BinTObjDrivers_ReferenceDriver_get_type_descriptor(*args)

class Handle_BinTObjDrivers_ReferenceDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinTObjDrivers_ReferenceDriver self)

        Nullify the handle


        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinTObjDrivers_ReferenceDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinTObjDrivers_ReferenceDriver self, BinTObjDrivers_ReferenceDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinTObjDrivers_ReferenceDriver self, Handle_BinTObjDrivers_ReferenceDriver theHandle) -> Handle_BinTObjDrivers_ReferenceDriver
        assign(Handle_BinTObjDrivers_ReferenceDriver self, BinTObjDrivers_ReferenceDriver thePtr) -> Handle_BinTObjDrivers_ReferenceDriver
        assign(Handle_BinTObjDrivers_ReferenceDriver self, Handle_BinTObjDrivers_ReferenceDriver theHandle) -> Handle_BinTObjDrivers_ReferenceDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinTObjDrivers_ReferenceDriver self) -> BinTObjDrivers_ReferenceDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinTObjDrivers_ReferenceDriver self) -> BinTObjDrivers_ReferenceDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinTObjDrivers_ReferenceDriver self) -> BinTObjDrivers_ReferenceDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver___ref__(self, *args)


    def __hash__(self):
        return _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinTObjDrivers.new_Handle_BinTObjDrivers_ReferenceDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_DownCast)
    __swig_destroy__ = _BinTObjDrivers.delete_Handle_BinTObjDrivers_ReferenceDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinTObjDrivers_ReferenceDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinTObjDrivers_ReferenceDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinTObjDrivers_ReferenceDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinTObjDrivers_ReferenceDriver self) -> char const *

        :rtype: const char *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinTObjDrivers_ReferenceDriver self)

        Memory deallocator for transient classes


        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinTObjDrivers_ReferenceDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinTObjDrivers_ReferenceDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinTObjDrivers_ReferenceDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinTObjDrivers_ReferenceDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinTObjDrivers_ReferenceDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinTObjDrivers_ReferenceDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinTObjDrivers_ReferenceDriver self)

        Increments the reference counter of this object


        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinTObjDrivers_ReferenceDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_DecrementRefCounter(self, *args)

Handle_BinTObjDrivers_ReferenceDriver_swigregister = _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_swigregister
Handle_BinTObjDrivers_ReferenceDriver_swigregister(Handle_BinTObjDrivers_ReferenceDriver)

def Handle_BinTObjDrivers_ReferenceDriver_DownCast(thing):
    return _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_DownCast(thing)
Handle_BinTObjDrivers_ReferenceDriver_DownCast = _BinTObjDrivers.Handle_BinTObjDrivers_ReferenceDriver_DownCast

class BinTObjDrivers_(object):
    """Class for registering storage/retrieval drivers for TObj Bin persistence"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Factory(*args):
        """
        Factory(Standard_GUID aGUID) -> Handle_Standard_Transient

        :type aGUID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _BinTObjDrivers.BinTObjDrivers__Factory(*args)

    Factory = staticmethod(Factory)

    def DefineFormat(*args):
        """
        DefineFormat(Handle_TDocStd_Application theApp)

        Defines format "TObjBin" and registers its read and write drivers
        in the specified application

        :type theApp: OCC.wrapper.TDocStd.Handle_TDocStd_Application

        """
        return _BinTObjDrivers.BinTObjDrivers__DefineFormat(*args)

    DefineFormat = staticmethod(DefineFormat)

    def AddDrivers(*args):
        """
        AddDrivers(Handle_BinMDF_ADriverTable aDriverTable, Handle_Message_Messenger aMsgDrv)

        :type aDriverTable: OCC.wrapper.BinMDF.Handle_BinMDF_ADriverTable
        :type aMsgDrv: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _BinTObjDrivers.BinTObjDrivers__AddDrivers(*args)

    AddDrivers = staticmethod(AddDrivers)

    def __init__(self):
        """Class for registering storage/retrieval drivers for TObj Bin persistence"""
        this = _BinTObjDrivers.new_BinTObjDrivers_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinTObjDrivers.delete_BinTObjDrivers_
BinTObjDrivers__swigregister = _BinTObjDrivers.BinTObjDrivers__swigregister
BinTObjDrivers__swigregister(BinTObjDrivers_)

def BinTObjDrivers__Factory(*args):
    """
    BinTObjDrivers__Factory(Standard_GUID aGUID) -> Handle_Standard_Transient

    :type aGUID: OCC.wrapper.Standard.Standard_GUID
    :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

    """
    return _BinTObjDrivers.BinTObjDrivers__Factory(*args)

def BinTObjDrivers__DefineFormat(*args):
    """
    BinTObjDrivers__DefineFormat(Handle_TDocStd_Application theApp)

    Defines format "TObjBin" and registers its read and write drivers
    in the specified application

    :type theApp: OCC.wrapper.TDocStd.Handle_TDocStd_Application

    """
    return _BinTObjDrivers.BinTObjDrivers__DefineFormat(*args)

def BinTObjDrivers__AddDrivers(*args):
    """
    BinTObjDrivers__AddDrivers(Handle_BinMDF_ADriverTable aDriverTable, Handle_Message_Messenger aMsgDrv)

    :type aDriverTable: OCC.wrapper.BinMDF.Handle_BinMDF_ADriverTable
    :type aMsgDrv: OCC.wrapper.Message.Handle_Message_Messenger

    """
    return _BinTObjDrivers.BinTObjDrivers__AddDrivers(*args)

class BinTObjDrivers_ObjectDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinTObjDrivers_ObjectDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinTObjDrivers_ObjectDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinTObjDrivers_ObjectDriver self, Handle_Message_Messenger theMessageDriver) -> BinTObjDrivers_ObjectDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinTObjDrivers.new_BinTObjDrivers_ObjectDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinTObjDrivers_ObjectDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinTObjDrivers.BinTObjDrivers_ObjectDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinTObjDrivers_ObjectDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinTObjDrivers_ObjectDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinTObjDrivers.BinTObjDrivers_ObjectDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinTObjDrivers.BinTObjDrivers_ObjectDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinTObjDrivers.BinTObjDrivers_ObjectDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.BinTObjDrivers_ObjectDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinTObjDrivers.delete_BinTObjDrivers_ObjectDriver
BinTObjDrivers_ObjectDriver_swigregister = _BinTObjDrivers.BinTObjDrivers_ObjectDriver_swigregister
BinTObjDrivers_ObjectDriver_swigregister(BinTObjDrivers_ObjectDriver)

def BinTObjDrivers_ObjectDriver_get_type_name(*args):
    """
    BinTObjDrivers_ObjectDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinTObjDrivers.BinTObjDrivers_ObjectDriver_get_type_name(*args)

def BinTObjDrivers_ObjectDriver_get_type_descriptor(*args):
    """
    BinTObjDrivers_ObjectDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinTObjDrivers.BinTObjDrivers_ObjectDriver_get_type_descriptor(*args)

class Handle_BinTObjDrivers_IntSparseArrayDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinTObjDrivers_IntSparseArrayDriver self)

        Nullify the handle


        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinTObjDrivers_IntSparseArrayDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinTObjDrivers_IntSparseArrayDriver self, BinTObjDrivers_IntSparseArrayDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinTObjDrivers_IntSparseArrayDriver self, Handle_BinTObjDrivers_IntSparseArrayDriver theHandle) -> Handle_BinTObjDrivers_IntSparseArrayDriver
        assign(Handle_BinTObjDrivers_IntSparseArrayDriver self, BinTObjDrivers_IntSparseArrayDriver thePtr) -> Handle_BinTObjDrivers_IntSparseArrayDriver
        assign(Handle_BinTObjDrivers_IntSparseArrayDriver self, Handle_BinTObjDrivers_IntSparseArrayDriver theHandle) -> Handle_BinTObjDrivers_IntSparseArrayDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinTObjDrivers_IntSparseArrayDriver self) -> BinTObjDrivers_IntSparseArrayDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinTObjDrivers_IntSparseArrayDriver self) -> BinTObjDrivers_IntSparseArrayDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinTObjDrivers_IntSparseArrayDriver self) -> BinTObjDrivers_IntSparseArrayDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver___ref__(self, *args)


    def __hash__(self):
        return _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinTObjDrivers.new_Handle_BinTObjDrivers_IntSparseArrayDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_DownCast)
    __swig_destroy__ = _BinTObjDrivers.delete_Handle_BinTObjDrivers_IntSparseArrayDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinTObjDrivers_IntSparseArrayDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinTObjDrivers_IntSparseArrayDriver self, BinObjMgt_Persistent theSource, Handle_TDF_Attribute theTarget, BinObjMgt_RRelocationTable theRelocTable) -> Standard_Boolean
        Paste(Handle_BinTObjDrivers_IntSparseArrayDriver self, Handle_TDF_Attribute theSource, BinObjMgt_Persistent theTarget, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher theRelocTable)

        :type theSource: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type theTarget: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type theRelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinTObjDrivers_IntSparseArrayDriver self) -> char const *

        :rtype: const char *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinTObjDrivers_IntSparseArrayDriver self)

        Memory deallocator for transient classes


        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinTObjDrivers_IntSparseArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinTObjDrivers_IntSparseArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinTObjDrivers_IntSparseArrayDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinTObjDrivers_IntSparseArrayDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinTObjDrivers_IntSparseArrayDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinTObjDrivers_IntSparseArrayDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinTObjDrivers_IntSparseArrayDriver self)

        Increments the reference counter of this object


        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinTObjDrivers_IntSparseArrayDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_DecrementRefCounter(self, *args)

Handle_BinTObjDrivers_IntSparseArrayDriver_swigregister = _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_swigregister
Handle_BinTObjDrivers_IntSparseArrayDriver_swigregister(Handle_BinTObjDrivers_IntSparseArrayDriver)

def Handle_BinTObjDrivers_IntSparseArrayDriver_DownCast(thing):
    return _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_DownCast(thing)
Handle_BinTObjDrivers_IntSparseArrayDriver_DownCast = _BinTObjDrivers.Handle_BinTObjDrivers_IntSparseArrayDriver_DownCast

class Handle_BinTObjDrivers_DocumentRetrievalDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinTObjDrivers_DocumentRetrievalDriver self)

        Nullify the handle


        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinTObjDrivers_DocumentRetrievalDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinTObjDrivers_DocumentRetrievalDriver self, BinTObjDrivers_DocumentRetrievalDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinTObjDrivers_DocumentRetrievalDriver self, Handle_BinTObjDrivers_DocumentRetrievalDriver theHandle) -> Handle_BinTObjDrivers_DocumentRetrievalDriver
        assign(Handle_BinTObjDrivers_DocumentRetrievalDriver self, BinTObjDrivers_DocumentRetrievalDriver thePtr) -> Handle_BinTObjDrivers_DocumentRetrievalDriver
        assign(Handle_BinTObjDrivers_DocumentRetrievalDriver self, Handle_BinTObjDrivers_DocumentRetrievalDriver theHandle) -> Handle_BinTObjDrivers_DocumentRetrievalDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinTObjDrivers_DocumentRetrievalDriver self) -> BinTObjDrivers_DocumentRetrievalDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinTObjDrivers_DocumentRetrievalDriver self) -> BinTObjDrivers_DocumentRetrievalDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinTObjDrivers_DocumentRetrievalDriver self) -> BinTObjDrivers_DocumentRetrievalDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver___ref__(self, *args)


    def __hash__(self):
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinTObjDrivers.new_Handle_BinTObjDrivers_DocumentRetrievalDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_DownCast)
    __swig_destroy__ = _BinTObjDrivers.delete_Handle_BinTObjDrivers_DocumentRetrievalDriver

    def AttributeDrivers(self, *args):
        """
        AttributeDrivers(Handle_BinTObjDrivers_DocumentRetrievalDriver self, Handle_Message_Messenger theMsgDriver) -> Handle_BinMDF_ADriverTable

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.BinMDF.Handle_BinMDF_ADriverTable

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_AttributeDrivers(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinTObjDrivers_DocumentRetrievalDriver self) -> char const *

        :rtype: const char *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CreateDocument(self, *args):
        """
        CreateDocument(Handle_BinTObjDrivers_DocumentRetrievalDriver self) -> Handle_CDM_Document

        pure virtual method definition

        :rtype: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_CreateDocument(self, *args)


    def Read(self, *args):
        """
        Read(Handle_BinTObjDrivers_DocumentRetrievalDriver self, TCollection_ExtendedString theFileName, Handle_CDM_Document theNewDocument, Handle_CDM_Application theApplication)
        Read(Handle_BinTObjDrivers_DocumentRetrievalDriver self, Standard_IStream & theIStream, Handle_Storage_Data theStorageData, Handle_CDM_Document theDoc, Handle_CDM_Application theApplication)

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type theStorageData: OCC.wrapper.Storage.Handle_Storage_Data
        :type theDoc: OCC.wrapper.CDM.Handle_CDM_Document
        :type theApplication: OCC.wrapper.CDM.Handle_CDM_Application

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_Read(self, *args)


    def DocumentVersion(self, *args):
        """
        DocumentVersion(Handle_BinTObjDrivers_DocumentRetrievalDriver self, TCollection_ExtendedString theFileName, Handle_Message_Messenger theMsgDriver) -> Standard_Integer

        :type theFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_DocumentVersion(self, *args)


    def ReferenceCounter(self, *args):
        """
        ReferenceCounter(Handle_BinTObjDrivers_DocumentRetrievalDriver self, TCollection_ExtendedString theFileName, Handle_Message_Messenger theMsgDriver) -> Standard_Integer

        :type theFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_ReferenceCounter(self, *args)


    def SetFormat(self, *args):
        """
        SetFormat(Handle_BinTObjDrivers_DocumentRetrievalDriver self, TCollection_ExtendedString aformat)

        :type aformat: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_SetFormat(self, *args)


    def GetFormat(self, *args):
        """
        GetFormat(Handle_BinTObjDrivers_DocumentRetrievalDriver self) -> TCollection_ExtendedString

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_GetFormat(self, *args)


    def GetStatus(self, *args):
        """
        GetStatus(Handle_BinTObjDrivers_DocumentRetrievalDriver self) -> PCDM_ReaderStatus

        :rtype: OCC.wrapper.PCDM.PCDM_ReaderStatus

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_GetStatus(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_BinTObjDrivers_DocumentRetrievalDriver self)

        Memory deallocator for transient classes


        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinTObjDrivers_DocumentRetrievalDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinTObjDrivers_DocumentRetrievalDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinTObjDrivers_DocumentRetrievalDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinTObjDrivers_DocumentRetrievalDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinTObjDrivers_DocumentRetrievalDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinTObjDrivers_DocumentRetrievalDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinTObjDrivers_DocumentRetrievalDriver self)

        Increments the reference counter of this object


        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinTObjDrivers_DocumentRetrievalDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_DecrementRefCounter(self, *args)

Handle_BinTObjDrivers_DocumentRetrievalDriver_swigregister = _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_swigregister
Handle_BinTObjDrivers_DocumentRetrievalDriver_swigregister(Handle_BinTObjDrivers_DocumentRetrievalDriver)

def Handle_BinTObjDrivers_DocumentRetrievalDriver_DownCast(thing):
    return _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_DownCast(thing)
Handle_BinTObjDrivers_DocumentRetrievalDriver_DownCast = _BinTObjDrivers.Handle_BinTObjDrivers_DocumentRetrievalDriver_DownCast

class BinTObjDrivers_ModelDriver(BinMDF.BinMDF_ADriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinTObjDrivers_ModelDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinTObjDrivers_ModelDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinTObjDrivers_ModelDriver self, Handle_Message_Messenger theMessageDriver) -> BinTObjDrivers_ModelDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinTObjDrivers.new_BinTObjDrivers_ModelDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinTObjDrivers_ModelDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinTObjDrivers.BinTObjDrivers_ModelDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinTObjDrivers_ModelDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinTObjDrivers_ModelDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinTObjDrivers.BinTObjDrivers_ModelDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinTObjDrivers.BinTObjDrivers_ModelDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinTObjDrivers.BinTObjDrivers_ModelDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.BinTObjDrivers_ModelDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinTObjDrivers.delete_BinTObjDrivers_ModelDriver
BinTObjDrivers_ModelDriver_swigregister = _BinTObjDrivers.BinTObjDrivers_ModelDriver_swigregister
BinTObjDrivers_ModelDriver_swigregister(BinTObjDrivers_ModelDriver)

def BinTObjDrivers_ModelDriver_get_type_name(*args):
    """
    BinTObjDrivers_ModelDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinTObjDrivers.BinTObjDrivers_ModelDriver_get_type_name(*args)

def BinTObjDrivers_ModelDriver_get_type_descriptor(*args):
    """
    BinTObjDrivers_ModelDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinTObjDrivers.BinTObjDrivers_ModelDriver_get_type_descriptor(*args)

class Handle_BinTObjDrivers_ModelDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinTObjDrivers_ModelDriver self)

        Nullify the handle


        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinTObjDrivers_ModelDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinTObjDrivers_ModelDriver self, BinTObjDrivers_ModelDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinTObjDrivers_ModelDriver self, Handle_BinTObjDrivers_ModelDriver theHandle) -> Handle_BinTObjDrivers_ModelDriver
        assign(Handle_BinTObjDrivers_ModelDriver self, BinTObjDrivers_ModelDriver thePtr) -> Handle_BinTObjDrivers_ModelDriver
        assign(Handle_BinTObjDrivers_ModelDriver self, Handle_BinTObjDrivers_ModelDriver theHandle) -> Handle_BinTObjDrivers_ModelDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinTObjDrivers_ModelDriver self) -> BinTObjDrivers_ModelDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinTObjDrivers_ModelDriver self) -> BinTObjDrivers_ModelDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinTObjDrivers_ModelDriver self) -> BinTObjDrivers_ModelDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver___ref__(self, *args)


    def __hash__(self):
        return _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinTObjDrivers.new_Handle_BinTObjDrivers_ModelDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_DownCast)
    __swig_destroy__ = _BinTObjDrivers.delete_Handle_BinTObjDrivers_ModelDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinTObjDrivers_ModelDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinTObjDrivers_ModelDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinTObjDrivers_ModelDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinTObjDrivers_ModelDriver self) -> char const *

        :rtype: const char *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinTObjDrivers_ModelDriver self)

        Memory deallocator for transient classes


        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinTObjDrivers_ModelDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinTObjDrivers_ModelDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinTObjDrivers_ModelDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinTObjDrivers_ModelDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinTObjDrivers_ModelDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinTObjDrivers_ModelDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinTObjDrivers_ModelDriver self)

        Increments the reference counter of this object


        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinTObjDrivers_ModelDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_DecrementRefCounter(self, *args)

Handle_BinTObjDrivers_ModelDriver_swigregister = _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_swigregister
Handle_BinTObjDrivers_ModelDriver_swigregister(Handle_BinTObjDrivers_ModelDriver)

def Handle_BinTObjDrivers_ModelDriver_DownCast(thing):
    return _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_DownCast(thing)
Handle_BinTObjDrivers_ModelDriver_DownCast = _BinTObjDrivers.Handle_BinTObjDrivers_ModelDriver_DownCast

class Handle_BinTObjDrivers_ObjectDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinTObjDrivers_ObjectDriver self)

        Nullify the handle


        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinTObjDrivers_ObjectDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinTObjDrivers_ObjectDriver self, BinTObjDrivers_ObjectDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinTObjDrivers_ObjectDriver self, Handle_BinTObjDrivers_ObjectDriver theHandle) -> Handle_BinTObjDrivers_ObjectDriver
        assign(Handle_BinTObjDrivers_ObjectDriver self, BinTObjDrivers_ObjectDriver thePtr) -> Handle_BinTObjDrivers_ObjectDriver
        assign(Handle_BinTObjDrivers_ObjectDriver self, Handle_BinTObjDrivers_ObjectDriver theHandle) -> Handle_BinTObjDrivers_ObjectDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinTObjDrivers_ObjectDriver self) -> BinTObjDrivers_ObjectDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinTObjDrivers_ObjectDriver self) -> BinTObjDrivers_ObjectDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinTObjDrivers_ObjectDriver self) -> BinTObjDrivers_ObjectDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver___ref__(self, *args)


    def __hash__(self):
        return _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinTObjDrivers.new_Handle_BinTObjDrivers_ObjectDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_DownCast)
    __swig_destroy__ = _BinTObjDrivers.delete_Handle_BinTObjDrivers_ObjectDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinTObjDrivers_ObjectDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinTObjDrivers_ObjectDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinTObjDrivers_ObjectDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinTObjDrivers_ObjectDriver self) -> char const *

        :rtype: const char *

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinTObjDrivers_ObjectDriver self)

        Memory deallocator for transient classes


        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinTObjDrivers_ObjectDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinTObjDrivers_ObjectDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinTObjDrivers_ObjectDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinTObjDrivers_ObjectDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinTObjDrivers_ObjectDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinTObjDrivers_ObjectDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinTObjDrivers_ObjectDriver self)

        Increments the reference counter of this object


        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinTObjDrivers_ObjectDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_DecrementRefCounter(self, *args)

Handle_BinTObjDrivers_ObjectDriver_swigregister = _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_swigregister
Handle_BinTObjDrivers_ObjectDriver_swigregister(Handle_BinTObjDrivers_ObjectDriver)

def Handle_BinTObjDrivers_ObjectDriver_DownCast(thing):
    return _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_DownCast(thing)
Handle_BinTObjDrivers_ObjectDriver_DownCast = _BinTObjDrivers.Handle_BinTObjDrivers_ObjectDriver_DownCast



