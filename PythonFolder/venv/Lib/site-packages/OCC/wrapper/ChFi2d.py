# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ChFi2d')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ChFi2d')
    _ChFi2d = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ChFi2d', [dirname(__file__)])
        except ImportError:
            import _ChFi2d
            return _ChFi2d
        try:
            _mod = imp.load_module('_ChFi2d', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ChFi2d = swig_import_helper()
    del swig_import_helper
else:
    import _ChFi2d
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ChFi2d.delete_SwigPyIterator

    def value(self):
        return _ChFi2d.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ChFi2d.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ChFi2d.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ChFi2d.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ChFi2d.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ChFi2d.SwigPyIterator_copy(self)

    def next(self):
        return _ChFi2d.SwigPyIterator_next(self)

    def __next__(self):
        return _ChFi2d.SwigPyIterator___next__(self)

    def previous(self):
        return _ChFi2d.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ChFi2d.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ChFi2d.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ChFi2d.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ChFi2d.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ChFi2d.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ChFi2d.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ChFi2d.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _ChFi2d.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _ChFi2d.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_ChFi2d.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _ChFi2d.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _ChFi2d.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ChFi2d.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _ChFi2d.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _ChFi2d.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _ChFi2d.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _ChFi2d.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_ChFi2d.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _ChFi2d.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _ChFi2d.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ChFi2d.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _ChFi2d.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _ChFi2d.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _ChFi2d.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _ChFi2d.ptr_to_number(item)
ptr_to_number = _ChFi2d.ptr_to_number

def HashCode(*args):
    return _ChFi2d.HashCode(*args)
HashCode = _ChFi2d.HashCode

def ptr_equal(a, b):
    return _ChFi2d.ptr_equal(a, b)
ptr_equal = _ChFi2d.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
ChFi2d_NotPlanar = _ChFi2d.ChFi2d_NotPlanar
ChFi2d_NoFace = _ChFi2d.ChFi2d_NoFace
ChFi2d_InitialisationError = _ChFi2d.ChFi2d_InitialisationError
ChFi2d_ParametersError = _ChFi2d.ChFi2d_ParametersError
ChFi2d_Ready = _ChFi2d.ChFi2d_Ready
ChFi2d_IsDone = _ChFi2d.ChFi2d_IsDone
ChFi2d_ComputationError = _ChFi2d.ChFi2d_ComputationError
ChFi2d_ConnexionError = _ChFi2d.ChFi2d_ConnexionError
ChFi2d_TangencyError = _ChFi2d.ChFi2d_TangencyError
ChFi2d_FirstEdgeDegenerated = _ChFi2d.ChFi2d_FirstEdgeDegenerated
ChFi2d_LastEdgeDegenerated = _ChFi2d.ChFi2d_LastEdgeDegenerated
ChFi2d_BothEdgesDegenerated = _ChFi2d.ChFi2d_BothEdgesDegenerated
ChFi2d_NotAuthorized = _ChFi2d.ChFi2d_NotAuthorized
class ChFi2d_Builder(object):
    """
    This  class contains  the algorithm  used to build
    fillet on planar wire.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ChFi2d_Builder self) -> ChFi2d_Builder
        __init__(ChFi2d_Builder self, TopoDS_Face F) -> ChFi2d_Builder

        The face  <F> can be build  on a closed or an open
        wire.

        :type F: OCC.wrapper.TopoDS.TopoDS_Face

        """
        this = _ChFi2d.new_ChFi2d_Builder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(ChFi2d_Builder self, TopoDS_Face F)
        Init(ChFi2d_Builder self, TopoDS_Face RefFace, TopoDS_Face ModFace)

        :type RefFace: OCC.wrapper.TopoDS.TopoDS_Face
        :type ModFace: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _ChFi2d.ChFi2d_Builder_Init(self, *args)


    def AddFillet(self, *args):
        """
        AddFillet(ChFi2d_Builder self, TopoDS_Vertex V, Standard_Real const Radius) -> TopoDS_Edge

        Add  a fillet  of   radius  <Radius> on  the  wire
        between the two edges connected to the vertex <V>.
        <AddFillet> returns the  fillet edge. The returned
        edge has  sense only   if the status   <status> is
        <IsDone>

        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex
        :type Radius: float
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _ChFi2d.ChFi2d_Builder_AddFillet(self, *args)


    def ModifyFillet(self, *args):
        """
        ModifyFillet(ChFi2d_Builder self, TopoDS_Edge Fillet, Standard_Real const Radius) -> TopoDS_Edge

        modify the fillet radius and return the new fillet
        edge. this    edge has sense  only if   the status
        <status> is <IsDone>.

        :type Fillet: OCC.wrapper.TopoDS.TopoDS_Edge
        :type Radius: float
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _ChFi2d.ChFi2d_Builder_ModifyFillet(self, *args)


    def RemoveFillet(self, *args):
        """
        RemoveFillet(ChFi2d_Builder self, TopoDS_Edge Fillet) -> TopoDS_Vertex

        removes the fillet <Fillet> and returns the vertex
        connecting the two adjacent edges to  this fillet.

        :type Fillet: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _ChFi2d.ChFi2d_Builder_RemoveFillet(self, *args)


    def AddChamfer(self, *args):
        """
        AddChamfer(ChFi2d_Builder self, TopoDS_Edge E1, TopoDS_Edge E2, Standard_Real const D1, Standard_Real const D2) -> TopoDS_Edge
        AddChamfer(ChFi2d_Builder self, TopoDS_Edge E, TopoDS_Vertex V, Standard_Real const D, Standard_Real const Ang) -> TopoDS_Edge

        Add  a chamfer on the   wire between the two edges
        connected to the vertex <V>. The chamfer will make
        an  angle <Ang> with the edge  <E>, and one of its
        extremities  will be on  <E>  at distance <D>. The
        returned   edge has sense   only   if the   status
        <status> is <IsDone>.
        Warning: The value of <Ang> must be expressed in Radian.

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type V: OCC.wrapper.TopoDS.TopoDS_Vertex
        :type D: float
        :type Ang: float
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _ChFi2d.ChFi2d_Builder_AddChamfer(self, *args)


    def ModifyChamfer(self, *args):
        """
        ModifyChamfer(ChFi2d_Builder self, TopoDS_Edge Chamfer, TopoDS_Edge E1, TopoDS_Edge E2, Standard_Real const D1, Standard_Real const D2) -> TopoDS_Edge
        ModifyChamfer(ChFi2d_Builder self, TopoDS_Edge Chamfer, TopoDS_Edge E, Standard_Real const D, Standard_Real const Ang) -> TopoDS_Edge

        modify the  chamfer <Chamfer>  and returns the new
        chamfer edge. This    edge as sense  only   if the
        status <status>   is  <IsDone>.
        Warning: The value of <Ang> must be expressed in Radian.

        :type Chamfer: OCC.wrapper.TopoDS.TopoDS_Edge
        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type D: float
        :type Ang: float
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _ChFi2d.ChFi2d_Builder_ModifyChamfer(self, *args)


    def RemoveChamfer(self, *args):
        """
        RemoveChamfer(ChFi2d_Builder self, TopoDS_Edge Chamfer) -> TopoDS_Vertex

        removes   the chamfer  <Chamfer>   and returns the
        vertex connecting  the two adjacent  edges to this
        chamfer.

        :type Chamfer: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _ChFi2d.ChFi2d_Builder_RemoveChamfer(self, *args)


    def Result(self, *args):
        """
        Result(ChFi2d_Builder self) -> TopoDS_Face

        returns the modified face

        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _ChFi2d.ChFi2d_Builder_Result(self, *args)


    def IsModified(self, *args):
        """
        IsModified(ChFi2d_Builder self, TopoDS_Edge E) -> Standard_Boolean

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ChFi2d.ChFi2d_Builder_IsModified(self, *args)


    def FilletEdges(self, *args):
        """
        returns the list of new edges

        :rtype: OCC.wrapper.TopTools.TopTools_SequenceOfShape

        """
        res = _ChFi2d.ChFi2d_Builder_FilletEdges(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NbFillet(self, *args):
        """
        NbFillet(ChFi2d_Builder self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ChFi2d.ChFi2d_Builder_NbFillet(self, *args)


    def ChamferEdges(self, *args):
        """
        returns the list of new edges

        :rtype: OCC.wrapper.TopTools.TopTools_SequenceOfShape

        """
        res = _ChFi2d.ChFi2d_Builder_ChamferEdges(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NbChamfer(self, *args):
        """
        NbChamfer(ChFi2d_Builder self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ChFi2d.ChFi2d_Builder_NbChamfer(self, *args)


    def HasDescendant(self, *args):
        """
        HasDescendant(ChFi2d_Builder self, TopoDS_Edge E) -> Standard_Boolean

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ChFi2d.ChFi2d_Builder_HasDescendant(self, *args)


    def DescendantEdge(self, *args):
        """
        returns the modified edge if <E> has descendant or
        <E> in the other case.

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        res = _ChFi2d.ChFi2d_Builder_DescendantEdge(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def BasisEdge(self, *args):
        """
        Returns the parent edge of  <E>
        Warning: If <E>is a basis edge,  the returned edge would be
        equal to <E>

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        res = _ChFi2d.ChFi2d_Builder_BasisEdge(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Status(self, *args):
        """
        Status(ChFi2d_Builder self) -> ChFi2d_ConstructionError

        :rtype: OCC.wrapper.ChFi2d.ChFi2d_ConstructionError

        """
        return _ChFi2d.ChFi2d_Builder_Status(self, *args)

    __swig_destroy__ = _ChFi2d.delete_ChFi2d_Builder
ChFi2d_Builder_swigregister = _ChFi2d.ChFi2d_Builder_swigregister
ChFi2d_Builder_swigregister(ChFi2d_Builder)

class ChFi2d_(object):
    """
    This package contains the algorithms used to build
    fillets or chamfers on planar wire.

    This package provides two algorithms for 2D fillets:
    ChFi2d_Builder - it constructs a fillet or chamfer
    for linear and circular edges of a face.
    ChFi2d_FilletAPI - it encapsulates two algorithms:
    ChFi2d_AnaFilletAlgo - analytical constructor of the fillet.
    It works only for linear and circular edges,
    having a common point.
    ChFi2d_FilletAlgo - iteration recursive method constructing
    the fillet edge for any type of edges including
    ellipses and b-splines.
    The edges may even have no common point.
    ChFi2d_ChamferAPI - an algoroithm for construction of chamfers
    between two linear edges of a plane.

    The algorithms ChFi2d_AnaFilletAlgo and ChFi2d_FilletAlgo may be used directly
    or via the interface class ChFi2d_FilletAPI.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """
        This package contains the algorithms used to build
        fillets or chamfers on planar wire.

        This package provides two algorithms for 2D fillets:
        ChFi2d_Builder - it constructs a fillet or chamfer
        for linear and circular edges of a face.
        ChFi2d_FilletAPI - it encapsulates two algorithms:
        ChFi2d_AnaFilletAlgo - analytical constructor of the fillet.
        It works only for linear and circular edges,
        having a common point.
        ChFi2d_FilletAlgo - iteration recursive method constructing
        the fillet edge for any type of edges including
        ellipses and b-splines.
        The edges may even have no common point.
        ChFi2d_ChamferAPI - an algoroithm for construction of chamfers
        between two linear edges of a plane.

        The algorithms ChFi2d_AnaFilletAlgo and ChFi2d_FilletAlgo may be used directly
        or via the interface class ChFi2d_FilletAPI.
        """
        this = _ChFi2d.new_ChFi2d_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ChFi2d.delete_ChFi2d_
ChFi2d__swigregister = _ChFi2d.ChFi2d__swigregister
ChFi2d__swigregister(ChFi2d_)

class ChFi2d_FilletAlgo(object):
    """
    Algorithm that creates fillet edge: arc tangent to two edges in the start
    and in the end vertices. Initial edges must be located on the plane and 
    must be connected by the end or start points (shared vertices are not 
    obligatory). Created fillet arc is created with the given radius, that is
    useful in sketcher applications.

    The algorithm is iterative that allows to create fillet on any curves
    of initial edges, that supports projection of point and C2 continuous.
    Principles of algorithm can de reduced to the Newton method:
    1. Splitting initial edge into N segments where probably only 1 root can be
    found. N depends on the complexity of the underlying curve.
    2. On each segment compute value and derivative of the function:
    - argument of the function is the parameter on the curve
    - take point on the curve by the parameter: point of tangency
    - make center of fillet: perpendicular vector from the point of tagency
    - make projection from the center to the second curve
    - length of the projection minus radius of the fillet is result of the 
    function
    - derivative of this function in the point is computed by value in 
    point with small shift
    3. Using Newton search method take the point on the segment where function
    value is most close to zero. If it is not enough close, step 2 and 3 are
    repeated taking as start or end point the found point.
    4. If solution is found, result is created on point on root of the function
    (as a start point), point of the projection onto second curve (as an end 
    point) and center of arc in found center. Initial edges are cutted by
    the start and end point of tangency.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ChFi2d_FilletAlgo self) -> ChFi2d_FilletAlgo
        __init__(ChFi2d_FilletAlgo self, TopoDS_Wire theWire, gp_Pln thePlane) -> ChFi2d_FilletAlgo
        __init__(ChFi2d_FilletAlgo self, TopoDS_Edge theEdge1, TopoDS_Edge theEdge2, gp_Pln thePlane) -> ChFi2d_FilletAlgo

        A constructor of a fillet algorithm: accepts two edges in a plane.

        :type theEdge1: OCC.wrapper.TopoDS.TopoDS_Edge
        :type theEdge2: OCC.wrapper.TopoDS.TopoDS_Edge
        :type thePlane: OCC.wrapper.gp.gp_Pln

        """
        this = _ChFi2d.new_ChFi2d_FilletAlgo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(ChFi2d_FilletAlgo self, TopoDS_Wire theWire, gp_Pln thePlane)
        Init(ChFi2d_FilletAlgo self, TopoDS_Edge theEdge1, TopoDS_Edge theEdge2, gp_Pln thePlane)

        Initializes a fillet algorithm: accepts two edges in a plane.

        :type theEdge1: OCC.wrapper.TopoDS.TopoDS_Edge
        :type theEdge2: OCC.wrapper.TopoDS.TopoDS_Edge
        :type thePlane: OCC.wrapper.gp.gp_Pln

        """
        return _ChFi2d.ChFi2d_FilletAlgo_Init(self, *args)


    def Perform(self, *args):
        """
        Perform(ChFi2d_FilletAlgo self, Standard_Real const theRadius) -> Standard_Boolean

        Constructs a fillet edge.
        Returns true, if at least one result was found

        :type theRadius: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ChFi2d.ChFi2d_FilletAlgo_Perform(self, *args)


    def NbResults(self, *args):
        """
        NbResults(ChFi2d_FilletAlgo self, gp_Pnt thePoint) -> Standard_Integer

        Returns number of possible solutions.
        <thePoint> chooses a particular fillet in case of several fillets 
        may be constructed (for example, a circle intersecting a segment in 2 points).
        Put the intersecting (or common) point of the edges.

        :type thePoint: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ChFi2d.ChFi2d_FilletAlgo_NbResults(self, *args)


    def Result(self, *args):
        """
        Result(ChFi2d_FilletAlgo self, gp_Pnt thePoint, TopoDS_Edge theEdge1, TopoDS_Edge theEdge2, Standard_Integer const iSolution=-1) -> TopoDS_Edge

        Returns result (fillet edge, modified edge1, modified edge2), 
        neares to the given point <thePoint> if iSolution == -1.
        <thePoint> chooses a particular fillet in case of several fillets 
        may be constructed (for example, a circle intersecting a segment in 2 points).
        Put the intersecting (or common) point of the edges.

        :type thePoint: OCC.wrapper.gp.gp_Pnt
        :type theEdge1: OCC.wrapper.TopoDS.TopoDS_Edge
        :type theEdge2: OCC.wrapper.TopoDS.TopoDS_Edge
        :type iSolution: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _ChFi2d.ChFi2d_FilletAlgo_Result(self, *args)

    __swig_destroy__ = _ChFi2d.delete_ChFi2d_FilletAlgo
ChFi2d_FilletAlgo_swigregister = _ChFi2d.ChFi2d_FilletAlgo_swigregister
ChFi2d_FilletAlgo_swigregister(ChFi2d_FilletAlgo)

class ChFi2d_FilletAPI(object):
    """
    An interface class for 2D fillets.
    Open CASCADE provides two algorithms for 2D fillets:
    ChFi2d_Builder - it constructs a fillet or chamfer 
    for linear and circular edges of a face.
    ChFi2d_FilletAPI - it encapsulates two algorithms:
    ChFi2d_AnaFilletAlgo - analytical constructor of the fillet.
    It works only for linear and circular edges,
    having a common point.
    ChFi2d_FilletAlgo - iteration recursive method constructing 
    the fillet edge for any type of edges including
    ellipses and b-splines. 
    The edges may even have no common point.

    The algorithms ChFi2d_AnaFilletAlgo and ChFi2d_FilletAlgo may be used directly 
    or via this ChFi2d_FilletAPI class. This class chooses an appropriate algorithm
    analyzing the arguments (a wire or two edges).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ChFi2d_FilletAPI self) -> ChFi2d_FilletAPI
        __init__(ChFi2d_FilletAPI self, TopoDS_Wire theWire, gp_Pln thePlane) -> ChFi2d_FilletAPI
        __init__(ChFi2d_FilletAPI self, TopoDS_Edge theEdge1, TopoDS_Edge theEdge2, gp_Pln thePlane) -> ChFi2d_FilletAPI

        A constructor of a fillet algorithm: accepts two edges in a plane.

        :type theEdge1: OCC.wrapper.TopoDS.TopoDS_Edge
        :type theEdge2: OCC.wrapper.TopoDS.TopoDS_Edge
        :type thePlane: OCC.wrapper.gp.gp_Pln

        """
        this = _ChFi2d.new_ChFi2d_FilletAPI(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(ChFi2d_FilletAPI self, TopoDS_Wire theWire, gp_Pln thePlane)
        Init(ChFi2d_FilletAPI self, TopoDS_Edge theEdge1, TopoDS_Edge theEdge2, gp_Pln thePlane)

        Initializes a fillet algorithm: accepts two edges in a plane.

        :type theEdge1: OCC.wrapper.TopoDS.TopoDS_Edge
        :type theEdge2: OCC.wrapper.TopoDS.TopoDS_Edge
        :type thePlane: OCC.wrapper.gp.gp_Pln

        """
        return _ChFi2d.ChFi2d_FilletAPI_Init(self, *args)


    def Perform(self, *args):
        """
        Perform(ChFi2d_FilletAPI self, Standard_Real const theRadius) -> Standard_Boolean

        Constructs a fillet edge.
        Returns true if at least one result was found.

        :type theRadius: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ChFi2d.ChFi2d_FilletAPI_Perform(self, *args)


    def NbResults(self, *args):
        """
        NbResults(ChFi2d_FilletAPI self, gp_Pnt thePoint) -> Standard_Integer

        Returns number of possible solutions.
        <thePoint> chooses a particular fillet in case of several fillets 
        may be constructed (for example, a circle intersecting a segment in 2 points).
        Put the intersecting (or common) point of the edges.

        :type thePoint: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ChFi2d.ChFi2d_FilletAPI_NbResults(self, *args)


    def Result(self, *args):
        """
        Result(ChFi2d_FilletAPI self, gp_Pnt thePoint, TopoDS_Edge theEdge1, TopoDS_Edge theEdge2, Standard_Integer const iSolution=-1) -> TopoDS_Edge

        Returns result (fillet edge, modified edge1, modified edge2), 
        nearest to the given point <thePoint> if iSolution == -1
        <thePoint> chooses a particular fillet in case of several fillets 
        may be constructed (for example, a circle intersecting a segment in 2 points).
        Put the intersecting (or common) point of the edges.

        :type thePoint: OCC.wrapper.gp.gp_Pnt
        :type theEdge1: OCC.wrapper.TopoDS.TopoDS_Edge
        :type theEdge2: OCC.wrapper.TopoDS.TopoDS_Edge
        :type iSolution: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _ChFi2d.ChFi2d_FilletAPI_Result(self, *args)

    __swig_destroy__ = _ChFi2d.delete_ChFi2d_FilletAPI
ChFi2d_FilletAPI_swigregister = _ChFi2d.ChFi2d_FilletAPI_swigregister
ChFi2d_FilletAPI_swigregister(ChFi2d_FilletAPI)

class FilletPoint(object):
    """
    Private class. Corresponds to the point on the first curve, computed
    fillet function and derivative on it.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setParam(self, *args):
        """
        setParam(FilletPoint self, Standard_Real theParam)

        Changes the point position by changing point parameter on the first curve.

        :type theParam: float

        """
        return _ChFi2d.FilletPoint_setParam(self, *args)


    def getParam(self, *args):
        """
        getParam(FilletPoint self) -> Standard_Real

        Returns the point parameter on the first curve.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ChFi2d.FilletPoint_getParam(self, *args)


    def getNBValues(self, *args):
        """
        getNBValues(FilletPoint self) -> Standard_Integer

        Returns number of found values of function in this point.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _ChFi2d.FilletPoint_getNBValues(self, *args)


    def getValue(self, *args):
        """
        getValue(FilletPoint self, int theIndex) -> Standard_Real

        Returns value of function in this point.

        :type theIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ChFi2d.FilletPoint_getValue(self, *args)


    def getDiff(self, *args):
        """
        getDiff(FilletPoint self, int theIndex) -> Standard_Real

        Returns derivatives of function in this point.

        :type theIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ChFi2d.FilletPoint_getDiff(self, *args)


    def isValid(self, *args):
        """
        isValid(FilletPoint self, int theIndex) -> Standard_Boolean

        Returns true if function is valid (rediuses vectors of fillet do not intersect any curve).

        :type theIndex: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ChFi2d.FilletPoint_isValid(self, *args)


    def getNear(self, *args):
        """
        getNear(FilletPoint self, int theIndex) -> int

        Returns the index of the nearest value

        :type theIndex: int
        :rtype: int

        """
        return _ChFi2d.FilletPoint_getNear(self, *args)


    def setParam2(self, *args):
        """
        setParam2(FilletPoint self, Standard_Real const theParam2)

        Defines the parameter of the projected point on the second curve.

        :type theParam2: float

        """
        return _ChFi2d.FilletPoint_setParam2(self, *args)


    def getParam2(self, *args):
        """
        getParam2(FilletPoint self) -> Standard_Real

        Returns the parameter of the projected point on the second curve.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ChFi2d.FilletPoint_getParam2(self, *args)


    def setCenter(self, *args):
        """
        setCenter(FilletPoint self, gp_Pnt2d thePoint)

        Center of the fillet.

        :type thePoint: OCC.wrapper.gp.gp_Pnt2d

        """
        return _ChFi2d.FilletPoint_setCenter(self, *args)


    def getCenter(self, *args):
        """
        getCenter(FilletPoint self) -> gp_Pnt2d

        Center of the fillet.

        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _ChFi2d.FilletPoint_getCenter(self, *args)


    def LowerValue(self, *args):
        """
        LowerValue(FilletPoint self) -> Standard_Real

        For debug only

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _ChFi2d.FilletPoint_LowerValue(self, *args)

    __swig_destroy__ = _ChFi2d.delete_FilletPoint
FilletPoint_swigregister = _ChFi2d.FilletPoint_swigregister
FilletPoint_swigregister(FilletPoint)

class ChFi2d_AnaFilletAlgo(object):
    """
    An analytical algorithm for calculation of the fillets.
    It is implemented for segments and arcs of circle only.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ChFi2d_AnaFilletAlgo self) -> ChFi2d_AnaFilletAlgo
        __init__(ChFi2d_AnaFilletAlgo self, TopoDS_Wire theWire, gp_Pln thePlane) -> ChFi2d_AnaFilletAlgo
        __init__(ChFi2d_AnaFilletAlgo self, TopoDS_Edge theEdge1, TopoDS_Edge theEdge2, gp_Pln thePlane) -> ChFi2d_AnaFilletAlgo

        A constructor.
        It expects two edges having a common point of type:
        - segment
        - arc of circle.

        :type theEdge1: OCC.wrapper.TopoDS.TopoDS_Edge
        :type theEdge2: OCC.wrapper.TopoDS.TopoDS_Edge
        :type thePlane: OCC.wrapper.gp.gp_Pln

        """
        this = _ChFi2d.new_ChFi2d_AnaFilletAlgo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(ChFi2d_AnaFilletAlgo self, TopoDS_Wire theWire, gp_Pln thePlane)
        Init(ChFi2d_AnaFilletAlgo self, TopoDS_Edge theEdge1, TopoDS_Edge theEdge2, gp_Pln thePlane)

        Initializes the class by two edges.

        :type theEdge1: OCC.wrapper.TopoDS.TopoDS_Edge
        :type theEdge2: OCC.wrapper.TopoDS.TopoDS_Edge
        :type thePlane: OCC.wrapper.gp.gp_Pln

        """
        return _ChFi2d.ChFi2d_AnaFilletAlgo_Init(self, *args)


    def Perform(self, *args):
        """
        Perform(ChFi2d_AnaFilletAlgo self, Standard_Real const radius) -> Standard_Boolean

        Calculates a fillet.

        :type radius: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ChFi2d.ChFi2d_AnaFilletAlgo_Perform(self, *args)


    def Result(self, *args):
        """
        Retrieves a result (fillet and shrinked neighbours).

        :type e1: OCC.wrapper.TopoDS.TopoDS_Edge
        :type e2: OCC.wrapper.TopoDS.TopoDS_Edge
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        res = _ChFi2d.ChFi2d_AnaFilletAlgo_Result(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _ChFi2d.delete_ChFi2d_AnaFilletAlgo
ChFi2d_AnaFilletAlgo_swigregister = _ChFi2d.ChFi2d_AnaFilletAlgo_swigregister
ChFi2d_AnaFilletAlgo_swigregister(ChFi2d_AnaFilletAlgo)

class ChFi2d_ChamferAPI(object):
    """A class making a chamfer between two linear edges."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ChFi2d_ChamferAPI self) -> ChFi2d_ChamferAPI
        __init__(ChFi2d_ChamferAPI self, TopoDS_Wire theWire) -> ChFi2d_ChamferAPI
        __init__(ChFi2d_ChamferAPI self, TopoDS_Edge theEdge1, TopoDS_Edge theEdge2) -> ChFi2d_ChamferAPI

        A constructor accepting two linear edges.

        :type theEdge1: OCC.wrapper.TopoDS.TopoDS_Edge
        :type theEdge2: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        this = _ChFi2d.new_ChFi2d_ChamferAPI(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(ChFi2d_ChamferAPI self, TopoDS_Wire theWire)
        Init(ChFi2d_ChamferAPI self, TopoDS_Edge theEdge1, TopoDS_Edge theEdge2)

        Initializes the class by two linear edges.

        :type theEdge1: OCC.wrapper.TopoDS.TopoDS_Edge
        :type theEdge2: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _ChFi2d.ChFi2d_ChamferAPI_Init(self, *args)


    def Perform(self, *args):
        """
        Perform(ChFi2d_ChamferAPI self) -> Standard_Boolean

        Constructs a chamfer edge.
        Returns true if the edge is constructed.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _ChFi2d.ChFi2d_ChamferAPI_Perform(self, *args)


    def Result(self, *args):
        """
        Result(ChFi2d_ChamferAPI self, TopoDS_Edge theEdge1, TopoDS_Edge theEdge2, Standard_Real const theLength1, Standard_Real const theLength2) -> TopoDS_Edge

        :type theEdge1: OCC.wrapper.TopoDS.TopoDS_Edge
        :type theEdge2: OCC.wrapper.TopoDS.TopoDS_Edge
        :type theLength1: float
        :type theLength2: float
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _ChFi2d.ChFi2d_ChamferAPI_Result(self, *args)

    __swig_destroy__ = _ChFi2d.delete_ChFi2d_ChamferAPI
ChFi2d_ChamferAPI_swigregister = _ChFi2d.ChFi2d_ChamferAPI_swigregister
ChFi2d_ChamferAPI_swigregister(ChFi2d_ChamferAPI)



