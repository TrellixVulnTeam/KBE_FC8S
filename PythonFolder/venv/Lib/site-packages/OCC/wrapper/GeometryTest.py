# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GeometryTest')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GeometryTest')
    _GeometryTest = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GeometryTest', [dirname(__file__)])
        except ImportError:
            import _GeometryTest
            return _GeometryTest
        try:
            _mod = imp.load_module('_GeometryTest', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GeometryTest = swig_import_helper()
    del swig_import_helper
else:
    import _GeometryTest
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeometryTest.delete_SwigPyIterator

    def value(self):
        return _GeometryTest.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _GeometryTest.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _GeometryTest.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _GeometryTest.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _GeometryTest.SwigPyIterator_equal(self, x)

    def copy(self):
        return _GeometryTest.SwigPyIterator_copy(self)

    def next(self):
        return _GeometryTest.SwigPyIterator_next(self)

    def __next__(self):
        return _GeometryTest.SwigPyIterator___next__(self)

    def previous(self):
        return _GeometryTest.SwigPyIterator_previous(self)

    def advance(self, n):
        return _GeometryTest.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _GeometryTest.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _GeometryTest.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _GeometryTest.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _GeometryTest.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _GeometryTest.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _GeometryTest.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _GeometryTest.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _GeometryTest.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_GeometryTest.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _GeometryTest.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _GeometryTest.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeometryTest.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _GeometryTest.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _GeometryTest.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _GeometryTest.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _GeometryTest.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_GeometryTest.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _GeometryTest.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _GeometryTest.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeometryTest.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _GeometryTest.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _GeometryTest.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _GeometryTest.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _GeometryTest.ptr_to_number(item)
ptr_to_number = _GeometryTest.ptr_to_number

def HashCode(*args):
    return _GeometryTest.HashCode(*args)
HashCode = _GeometryTest.HashCode

def ptr_equal(a, b):
    return _GeometryTest.ptr_equal(a, b)
ptr_equal = _GeometryTest.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Draw
else:
    import Draw
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GccEnt
else:
    import GccEnt
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import DrawTrSurf
else:
    import DrawTrSurf
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
class GeometryTest_DrawableQualifiedCurve2d(DrawTrSurf.DrawTrSurf_Curve2d):
    """Create geom curve drawable presentation with the position of a solution of a construction algorithm."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GeometryTest_DrawableQualifiedCurve2d
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GeometryTest_DrawableQualifiedCurve2d(self) 
            return h


    def __init__(self, *args):
        """
        __init__(GeometryTest_DrawableQualifiedCurve2d self, Handle_Geom2d_Curve theCurve, GccEnt_Position const thePosition, Standard_Boolean const theDispOrigin) -> GeometryTest_DrawableQualifiedCurve2d
        __init__(GeometryTest_DrawableQualifiedCurve2d self, Handle_Geom2d_Curve theCurve, Draw_Color theColor, Standard_Integer const theDiscret, GccEnt_Position const thePosition, Standard_Boolean const theDispOrigin, Standard_Boolean const theDispCurvRadius, Standard_Real const theRadiusMax=1.0e3, Standard_Real const theRatioOfRadius=0.1) -> GeometryTest_DrawableQualifiedCurve2d

        Creates a drawable curve from a curve of package Geom.

        :type theCurve: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :type theColor: OCC.wrapper.Draw.Draw_Color
        :type theDiscret: int
        :type thePosition: OCC.wrapper.GccEnt.GccEnt_Position
        :type theDispOrigin: bool
        :type theDispCurvRadius: bool
        :type theRadiusMax: float
        :type theRatioOfRadius: float

        """
        this = _GeometryTest.new_GeometryTest_DrawableQualifiedCurve2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def GetPosition(self, *args):
        """
        GetPosition(GeometryTest_DrawableQualifiedCurve2d self) -> GccEnt_Position

        @returns position of a solution

        :rtype: OCC.wrapper.GccEnt.GccEnt_Position

        """
        return _GeometryTest.GeometryTest_DrawableQualifiedCurve2d_GetPosition(self, *args)


    def SetPosition(self, *args):
        """
        SetPosition(GeometryTest_DrawableQualifiedCurve2d self, GccEnt_Position const thePosition)

        Sets position of a solution
        \param thePosition the value

        :type thePosition: OCC.wrapper.GccEnt.GccEnt_Position

        """
        return _GeometryTest.GeometryTest_DrawableQualifiedCurve2d_SetPosition(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(GeometryTest_DrawableQualifiedCurve2d self, Draw_Display theDisplay)

        Paints the drawable presentation in given display
        \param theDisplay

        :type theDisplay: OCC.wrapper.Draw.Draw_Display

        """
        return _GeometryTest.GeometryTest_DrawableQualifiedCurve2d_DrawOn(self, *args)


    def Dump(self, *args):
        """
        Dump(GeometryTest_DrawableQualifiedCurve2d self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _GeometryTest.GeometryTest_DrawableQualifiedCurve2d_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(GeometryTest_DrawableQualifiedCurve2d self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _GeometryTest.GeometryTest_DrawableQualifiedCurve2d_Whatis(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GeometryTest.GeometryTest_DrawableQualifiedCurve2d_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GeometryTest.GeometryTest_DrawableQualifiedCurve2d_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeometryTest.GeometryTest_DrawableQualifiedCurve2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeometryTest.delete_GeometryTest_DrawableQualifiedCurve2d
GeometryTest_DrawableQualifiedCurve2d_swigregister = _GeometryTest.GeometryTest_DrawableQualifiedCurve2d_swigregister
GeometryTest_DrawableQualifiedCurve2d_swigregister(GeometryTest_DrawableQualifiedCurve2d)

def GeometryTest_DrawableQualifiedCurve2d_get_type_name(*args):
    """
    GeometryTest_DrawableQualifiedCurve2d_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GeometryTest.GeometryTest_DrawableQualifiedCurve2d_get_type_name(*args)

def GeometryTest_DrawableQualifiedCurve2d_get_type_descriptor(*args):
    """
    GeometryTest_DrawableQualifiedCurve2d_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GeometryTest.GeometryTest_DrawableQualifiedCurve2d_get_type_descriptor(*args)

class Handle_GeometryTest_DrawableQualifiedCurve2d(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GeometryTest_DrawableQualifiedCurve2d self)

        Nullify the handle


        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GeometryTest_DrawableQualifiedCurve2d self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GeometryTest_DrawableQualifiedCurve2d self, GeometryTest_DrawableQualifiedCurve2d thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GeometryTest_DrawableQualifiedCurve2d self, Handle_GeometryTest_DrawableQualifiedCurve2d theHandle) -> Handle_GeometryTest_DrawableQualifiedCurve2d
        assign(Handle_GeometryTest_DrawableQualifiedCurve2d self, GeometryTest_DrawableQualifiedCurve2d thePtr) -> Handle_GeometryTest_DrawableQualifiedCurve2d
        assign(Handle_GeometryTest_DrawableQualifiedCurve2d self, Handle_GeometryTest_DrawableQualifiedCurve2d theHandle) -> Handle_GeometryTest_DrawableQualifiedCurve2d

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GeometryTest_DrawableQualifiedCurve2d self) -> GeometryTest_DrawableQualifiedCurve2d

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GeometryTest_DrawableQualifiedCurve2d self) -> GeometryTest_DrawableQualifiedCurve2d

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GeometryTest_DrawableQualifiedCurve2d self) -> GeometryTest_DrawableQualifiedCurve2d

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d___ref__(self, *args)


    def __hash__(self):
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GeometryTest.new_Handle_GeometryTest_DrawableQualifiedCurve2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_DownCast)
    __swig_destroy__ = _GeometryTest.delete_Handle_GeometryTest_DrawableQualifiedCurve2d

    def GetPosition(self, *args):
        """
        GetPosition(Handle_GeometryTest_DrawableQualifiedCurve2d self) -> GccEnt_Position

        @returns position of a solution

        :rtype: OCC.wrapper.GccEnt.GccEnt_Position

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_GetPosition(self, *args)


    def SetPosition(self, *args):
        """
        SetPosition(Handle_GeometryTest_DrawableQualifiedCurve2d self, GccEnt_Position const thePosition)

        Sets position of a solution
        \param thePosition the value

        :type thePosition: OCC.wrapper.GccEnt.GccEnt_Position

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_SetPosition(self, *args)


    def DrawOn(self, *args):
        """
        DrawOn(Handle_GeometryTest_DrawableQualifiedCurve2d self, Draw_Display theDisplay)

        Paints the drawable presentation in given display
        \param theDisplay

        :type theDisplay: OCC.wrapper.Draw.Draw_Display

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_DrawOn(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_GeometryTest_DrawableQualifiedCurve2d self, Standard_OStream & S)

        For variable dump.

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_GeometryTest_DrawableQualifiedCurve2d self, Draw_Interpretor I)

        For variable whatis command. Set  as a result  the
        type of the variable.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_Whatis(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GeometryTest_DrawableQualifiedCurve2d self) -> char const *

        :rtype: const char *

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetCurve(self, *args):
        """
        GetCurve(Handle_GeometryTest_DrawableQualifiedCurve2d self) -> Handle_Geom2d_Curve

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_GetCurve(self, *args)


    def SetColor(self, *args):
        """
        SetColor(Handle_GeometryTest_DrawableQualifiedCurve2d self, Draw_Color aColor)

        :type aColor: OCC.wrapper.Draw.Draw_Color

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_SetColor(self, *args)


    def ShowCurvature(self, *args):
        """ShowCurvature(Handle_GeometryTest_DrawableQualifiedCurve2d self)"""
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_ShowCurvature(self, *args)


    def ClearCurvature(self, *args):
        """ClearCurvature(Handle_GeometryTest_DrawableQualifiedCurve2d self)"""
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_ClearCurvature(self, *args)


    def SetRadiusMax(self, *args):
        """
        SetRadiusMax(Handle_GeometryTest_DrawableQualifiedCurve2d self, Standard_Real const Radius)

        :type Radius: float

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_SetRadiusMax(self, *args)


    def SetRadiusRatio(self, *args):
        """
        SetRadiusRatio(Handle_GeometryTest_DrawableQualifiedCurve2d self, Standard_Real const Ratio)

        :type Ratio: float

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_SetRadiusRatio(self, *args)


    def Color(self, *args):
        """
        Color(Handle_GeometryTest_DrawableQualifiedCurve2d self) -> Draw_Color

        :rtype: OCC.wrapper.Draw.Draw_Color

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_Color(self, *args)


    def RadiusMax(self, *args):
        """
        RadiusMax(Handle_GeometryTest_DrawableQualifiedCurve2d self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_RadiusMax(self, *args)


    def RadiusRatio(self, *args):
        """
        RadiusRatio(Handle_GeometryTest_DrawableQualifiedCurve2d self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_RadiusRatio(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_GeometryTest_DrawableQualifiedCurve2d self) -> Handle_Draw_Drawable3D

        For variable copy.

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_Copy(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_GeometryTest_DrawableQualifiedCurve2d self) -> Standard_Boolean

        Returns False.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_Is3D(self, *args)


    def DrawCurve2dOn(self, *args):
        """
        DrawCurve2dOn(Handle_GeometryTest_DrawableQualifiedCurve2d self, Adaptor2d_Curve2d C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_DrawCurve2dOn(self, *args)


    def DrawCurveOn(self, *args):
        """
        DrawCurveOn(Handle_GeometryTest_DrawableQualifiedCurve2d self, Adaptor3d_Curve C, Draw_Display D)

        Draw a polygon of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_Curve
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_DrawCurveOn(self, *args)


    def DrawIsoCurveOn(self, *args):
        """
        DrawIsoCurveOn(Handle_GeometryTest_DrawableQualifiedCurve2d self, Adaptor3d_IsoCurve C, GeomAbs_IsoType const T, Standard_Real const P, Standard_Real const F, Standard_Real const L, Draw_Display D)

        Load C  with the specified iso  and Draw a polygon
        of the curve on the Display

        :type C: OCC.wrapper.Adaptor3d.Adaptor3d_IsoCurve
        :type T: OCC.wrapper.GeomAbs.GeomAbs_IsoType
        :type P: float
        :type F: float
        :type L: float
        :type D: OCC.wrapper.Draw.Draw_Display

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_DrawIsoCurveOn(self, *args)


    def SetDiscretisation(self, *args):
        """
        SetDiscretisation(Handle_GeometryTest_DrawableQualifiedCurve2d self, Standard_Integer const Discret)

        :type Discret: int

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_SetDiscretisation(self, *args)


    def GetDiscretisation(self, *args):
        """
        GetDiscretisation(Handle_GeometryTest_DrawableQualifiedCurve2d self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_GetDiscretisation(self, *args)


    def SetDeflection(self, *args):
        """
        SetDeflection(Handle_GeometryTest_DrawableQualifiedCurve2d self, Standard_Real const Deflection)

        :type Deflection: float

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_SetDeflection(self, *args)


    def GetDeflection(self, *args):
        """
        GetDeflection(Handle_GeometryTest_DrawableQualifiedCurve2d self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_GetDeflection(self, *args)


    def SetDrawMode(self, *args):
        """
        SetDrawMode(Handle_GeometryTest_DrawableQualifiedCurve2d self, Standard_Integer const DrawMode)

        :type DrawMode: int

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_SetDrawMode(self, *args)


    def GetDrawMode(self, *args):
        """
        GetDrawMode(Handle_GeometryTest_DrawableQualifiedCurve2d self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_GetDrawMode(self, *args)


    def PickReject(self, *args):
        """
        PickReject(Handle_GeometryTest_DrawableQualifiedCurve2d self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_PickReject(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_GeometryTest_DrawableQualifiedCurve2d self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_GeometryTest_DrawableQualifiedCurve2d self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_GeometryTest_DrawableQualifiedCurve2d self) -> Standard_Boolean
        Visible(Handle_GeometryTest_DrawableQualifiedCurve2d self, Standard_Boolean const V)

        :type V: bool

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_GeometryTest_DrawableQualifiedCurve2d self) -> Standard_Boolean
        Protected(Handle_GeometryTest_DrawableQualifiedCurve2d self, Standard_Boolean const P)

        :type P: bool

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_GeometryTest_DrawableQualifiedCurve2d self) -> Standard_CString
        Name(Handle_GeometryTest_DrawableQualifiedCurve2d self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_GeometryTest_DrawableQualifiedCurve2d self)

        Memory deallocator for transient classes


        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GeometryTest_DrawableQualifiedCurve2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GeometryTest_DrawableQualifiedCurve2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GeometryTest_DrawableQualifiedCurve2d self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GeometryTest_DrawableQualifiedCurve2d self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GeometryTest_DrawableQualifiedCurve2d self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GeometryTest_DrawableQualifiedCurve2d self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GeometryTest_DrawableQualifiedCurve2d self)

        Increments the reference counter of this object


        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GeometryTest_DrawableQualifiedCurve2d self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_DecrementRefCounter(self, *args)

Handle_GeometryTest_DrawableQualifiedCurve2d_swigregister = _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_swigregister
Handle_GeometryTest_DrawableQualifiedCurve2d_swigregister(Handle_GeometryTest_DrawableQualifiedCurve2d)

def Handle_GeometryTest_DrawableQualifiedCurve2d_DownCast(thing):
    return _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_DownCast(thing)
Handle_GeometryTest_DrawableQualifiedCurve2d_DownCast = _GeometryTest.Handle_GeometryTest_DrawableQualifiedCurve2d_DownCast

class GeometryTest_(object):
    """
    this  package  provides  commands for  curves  and
    surface.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AllCommands(*args):
        """
        AllCommands(Draw_Interpretor I)

        defines all geometric commands.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _GeometryTest.GeometryTest__AllCommands(*args)

    AllCommands = staticmethod(AllCommands)

    def CurveCommands(*args):
        """
        CurveCommands(Draw_Interpretor I)

        defines curve commands.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _GeometryTest.GeometryTest__CurveCommands(*args)

    CurveCommands = staticmethod(CurveCommands)

    def CurveTanCommands(*args):
        """
        CurveTanCommands(Draw_Interpretor I)

        defines tangent curve commands.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _GeometryTest.GeometryTest__CurveTanCommands(*args)

    CurveTanCommands = staticmethod(CurveTanCommands)

    def FairCurveCommands(*args):
        """
        FairCurveCommands(Draw_Interpretor I)

        defines fair curve commands.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _GeometryTest.GeometryTest__FairCurveCommands(*args)

    FairCurveCommands = staticmethod(FairCurveCommands)

    def SurfaceCommands(*args):
        """
        SurfaceCommands(Draw_Interpretor I)

        defines surface commands.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _GeometryTest.GeometryTest__SurfaceCommands(*args)

    SurfaceCommands = staticmethod(SurfaceCommands)

    def ConstraintCommands(*args):
        """
        ConstraintCommands(Draw_Interpretor I)

        defines cosntrained curves commands.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _GeometryTest.GeometryTest__ConstraintCommands(*args)

    ConstraintCommands = staticmethod(ConstraintCommands)

    def API2dCommands(*args):
        """
        API2dCommands(Draw_Interpretor I)

        defines commands to test the Geom2dAPI
        - Intersection
        - Extrema
        - Projection
        - Approximation, interpolation

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _GeometryTest.GeometryTest__API2dCommands(*args)

    API2dCommands = staticmethod(API2dCommands)

    def APICommands(*args):
        """
        APICommands(Draw_Interpretor I)

        defines commands to test the Geom2dAPI
        - Intersection
        - Extrema
        - Projection
        - Approximation, interpolation

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _GeometryTest.GeometryTest__APICommands(*args)

    APICommands = staticmethod(APICommands)

    def ContinuityCommands(*args):
        """
        ContinuityCommands(Draw_Interpretor I)

        defines commands to check local
        continuity between curves or surfaces

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _GeometryTest.GeometryTest__ContinuityCommands(*args)

    ContinuityCommands = staticmethod(ContinuityCommands)

    def PolyCommands(*args):
        """
        PolyCommands(Draw_Interpretor I)

        defines     command  to    test  the    polyhedral
        triangulations and the polygons from the Poly package.

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _GeometryTest.GeometryTest__PolyCommands(*args)

    PolyCommands = staticmethod(PolyCommands)

    def TestProjCommands(*args):
        """
        TestProjCommands(Draw_Interpretor I)

        defines commands to test projection of geometric objects

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _GeometryTest.GeometryTest__TestProjCommands(*args)

    TestProjCommands = staticmethod(TestProjCommands)

    def __init__(self):
        """
        this  package  provides  commands for  curves  and
        surface.
        """
        this = _GeometryTest.new_GeometryTest_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeometryTest.delete_GeometryTest_
GeometryTest__swigregister = _GeometryTest.GeometryTest__swigregister
GeometryTest__swigregister(GeometryTest_)

def GeometryTest__AllCommands(*args):
    """
    GeometryTest__AllCommands(Draw_Interpretor I)

    defines all geometric commands.

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _GeometryTest.GeometryTest__AllCommands(*args)

def GeometryTest__CurveCommands(*args):
    """
    GeometryTest__CurveCommands(Draw_Interpretor I)

    defines curve commands.

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _GeometryTest.GeometryTest__CurveCommands(*args)

def GeometryTest__CurveTanCommands(*args):
    """
    GeometryTest__CurveTanCommands(Draw_Interpretor I)

    defines tangent curve commands.

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _GeometryTest.GeometryTest__CurveTanCommands(*args)

def GeometryTest__FairCurveCommands(*args):
    """
    GeometryTest__FairCurveCommands(Draw_Interpretor I)

    defines fair curve commands.

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _GeometryTest.GeometryTest__FairCurveCommands(*args)

def GeometryTest__SurfaceCommands(*args):
    """
    GeometryTest__SurfaceCommands(Draw_Interpretor I)

    defines surface commands.

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _GeometryTest.GeometryTest__SurfaceCommands(*args)

def GeometryTest__ConstraintCommands(*args):
    """
    GeometryTest__ConstraintCommands(Draw_Interpretor I)

    defines cosntrained curves commands.

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _GeometryTest.GeometryTest__ConstraintCommands(*args)

def GeometryTest__API2dCommands(*args):
    """
    GeometryTest__API2dCommands(Draw_Interpretor I)

    defines commands to test the Geom2dAPI
    - Intersection
    - Extrema
    - Projection
    - Approximation, interpolation

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _GeometryTest.GeometryTest__API2dCommands(*args)

def GeometryTest__APICommands(*args):
    """
    GeometryTest__APICommands(Draw_Interpretor I)

    defines commands to test the Geom2dAPI
    - Intersection
    - Extrema
    - Projection
    - Approximation, interpolation

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _GeometryTest.GeometryTest__APICommands(*args)

def GeometryTest__ContinuityCommands(*args):
    """
    GeometryTest__ContinuityCommands(Draw_Interpretor I)

    defines commands to check local
    continuity between curves or surfaces

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _GeometryTest.GeometryTest__ContinuityCommands(*args)

def GeometryTest__PolyCommands(*args):
    """
    GeometryTest__PolyCommands(Draw_Interpretor I)

    defines     command  to    test  the    polyhedral
    triangulations and the polygons from the Poly package.

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _GeometryTest.GeometryTest__PolyCommands(*args)

def GeometryTest__TestProjCommands(*args):
    """
    GeometryTest__TestProjCommands(Draw_Interpretor I)

    defines commands to test projection of geometric objects

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _GeometryTest.GeometryTest__TestProjCommands(*args)



