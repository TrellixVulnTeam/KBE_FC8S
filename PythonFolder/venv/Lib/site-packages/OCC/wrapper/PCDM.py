# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_PCDM')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_PCDM')
    _PCDM = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PCDM', [dirname(__file__)])
        except ImportError:
            import _PCDM
            return _PCDM
        try:
            _mod = imp.load_module('_PCDM', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _PCDM = swig_import_helper()
    del swig_import_helper
else:
    import _PCDM
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PCDM.delete_SwigPyIterator

    def value(self):
        return _PCDM.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PCDM.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PCDM.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PCDM.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PCDM.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PCDM.SwigPyIterator_copy(self)

    def next(self):
        return _PCDM.SwigPyIterator_next(self)

    def __next__(self):
        return _PCDM.SwigPyIterator___next__(self)

    def previous(self):
        return _PCDM.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PCDM.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PCDM.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PCDM.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PCDM.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PCDM.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PCDM.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PCDM.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _PCDM.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _PCDM.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_PCDM.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _PCDM.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _PCDM.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PCDM.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _PCDM.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _PCDM.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _PCDM.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _PCDM.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_PCDM.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _PCDM.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _PCDM.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PCDM.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _PCDM.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _PCDM.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _PCDM.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _PCDM.ptr_to_number(item)
ptr_to_number = _PCDM.ptr_to_number

def HashCode(*args):
    return _PCDM.HashCode(*args)
HashCode = _PCDM.HashCode

def ptr_equal(a, b):
    return _PCDM.ptr_equal(a, b)
ptr_equal = _PCDM.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import LDOM
else:
    import LDOM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDM
else:
    import CDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Resource
else:
    import Resource
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Storage
else:
    import Storage
del _swig_python_version_info
PCDM_TOFD_File = _PCDM.PCDM_TOFD_File
PCDM_TOFD_CmpFile = _PCDM.PCDM_TOFD_CmpFile
PCDM_TOFD_XmlFile = _PCDM.PCDM_TOFD_XmlFile
PCDM_TOFD_Unknown = _PCDM.PCDM_TOFD_Unknown
PCDM_RS_OK = _PCDM.PCDM_RS_OK
PCDM_RS_NoDriver = _PCDM.PCDM_RS_NoDriver
PCDM_RS_UnknownFileDriver = _PCDM.PCDM_RS_UnknownFileDriver
PCDM_RS_OpenError = _PCDM.PCDM_RS_OpenError
PCDM_RS_NoVersion = _PCDM.PCDM_RS_NoVersion
PCDM_RS_NoSchema = _PCDM.PCDM_RS_NoSchema
PCDM_RS_NoDocument = _PCDM.PCDM_RS_NoDocument
PCDM_RS_ExtensionFailure = _PCDM.PCDM_RS_ExtensionFailure
PCDM_RS_WrongStreamMode = _PCDM.PCDM_RS_WrongStreamMode
PCDM_RS_FormatFailure = _PCDM.PCDM_RS_FormatFailure
PCDM_RS_TypeFailure = _PCDM.PCDM_RS_TypeFailure
PCDM_RS_TypeNotFoundInSchema = _PCDM.PCDM_RS_TypeNotFoundInSchema
PCDM_RS_UnrecognizedFileFormat = _PCDM.PCDM_RS_UnrecognizedFileFormat
PCDM_RS_MakeFailure = _PCDM.PCDM_RS_MakeFailure
PCDM_RS_PermissionDenied = _PCDM.PCDM_RS_PermissionDenied
PCDM_RS_DriverFailure = _PCDM.PCDM_RS_DriverFailure
PCDM_RS_AlreadyRetrievedAndModified = _PCDM.PCDM_RS_AlreadyRetrievedAndModified
PCDM_RS_AlreadyRetrieved = _PCDM.PCDM_RS_AlreadyRetrieved
PCDM_RS_UnknownDocument = _PCDM.PCDM_RS_UnknownDocument
PCDM_RS_WrongResource = _PCDM.PCDM_RS_WrongResource
PCDM_RS_ReaderException = _PCDM.PCDM_RS_ReaderException
PCDM_RS_NoModel = _PCDM.PCDM_RS_NoModel
PCDM_SS_OK = _PCDM.PCDM_SS_OK
PCDM_SS_DriverFailure = _PCDM.PCDM_SS_DriverFailure
PCDM_SS_WriteFailure = _PCDM.PCDM_SS_WriteFailure
PCDM_SS_Failure = _PCDM.PCDM_SS_Failure
PCDM_SS_Doc_IsNull = _PCDM.PCDM_SS_Doc_IsNull
PCDM_SS_No_Obj = _PCDM.PCDM_SS_No_Obj
PCDM_SS_Info_Section_Error = _PCDM.PCDM_SS_Info_Section_Error
class PCDM_ReadWriter(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_PCDM_ReadWriter
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_PCDM_ReadWriter(self) 
            return h


    def Version(self, *args):
        """
        Version(PCDM_ReadWriter self) -> TCollection_AsciiString

        returns PCDM_ReadWriter_1.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _PCDM.PCDM_ReadWriter_Version(self, *args)


    def WriteReferenceCounter(self, *args):
        """
        WriteReferenceCounter(PCDM_ReadWriter self, Handle_Storage_Data aData, Handle_CDM_Document aDocument)

        :type aData: OCC.wrapper.Storage.Handle_Storage_Data
        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _PCDM.PCDM_ReadWriter_WriteReferenceCounter(self, *args)


    def WriteReferences(self, *args):
        """
        WriteReferences(PCDM_ReadWriter self, Handle_Storage_Data aData, Handle_CDM_Document aDocument, TCollection_ExtendedString theReferencerFileName)

        :type aData: OCC.wrapper.Storage.Handle_Storage_Data
        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :type theReferencerFileName: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _PCDM.PCDM_ReadWriter_WriteReferences(self, *args)


    def WriteExtensions(self, *args):
        """
        WriteExtensions(PCDM_ReadWriter self, Handle_Storage_Data aData, Handle_CDM_Document aDocument)

        :type aData: OCC.wrapper.Storage.Handle_Storage_Data
        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _PCDM.PCDM_ReadWriter_WriteExtensions(self, *args)


    def WriteVersion(self, *args):
        """
        WriteVersion(PCDM_ReadWriter self, Handle_Storage_Data aData, Handle_CDM_Document aDocument)

        :type aData: OCC.wrapper.Storage.Handle_Storage_Data
        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _PCDM.PCDM_ReadWriter_WriteVersion(self, *args)


    def ReadReferenceCounter(self, *args):
        """
        ReadReferenceCounter(PCDM_ReadWriter self, TCollection_ExtendedString theFileName, Handle_Message_Messenger theMsgDriver) -> Standard_Integer

        :type theFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.PCDM_ReadWriter_ReadReferenceCounter(self, *args)


    def ReadReferences(self, *args):
        """
        ReadReferences(PCDM_ReadWriter self, TCollection_ExtendedString aFileName, NCollection_Sequence_PCDM_Reference theReferences, Handle_Message_Messenger theMsgDriver)

        :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theReferences: OCC.wrapper.PCDM.PCDM_SequenceOfReference
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _PCDM.PCDM_ReadWriter_ReadReferences(self, *args)


    def ReadExtensions(self, *args):
        """
        ReadExtensions(PCDM_ReadWriter self, TCollection_ExtendedString aFileName, NCollection_Sequence_TCollection_ExtendedString theExtensions, Handle_Message_Messenger theMsgDriver)

        :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theExtensions: OCC.wrapper.TColStd.TColStd_SequenceOfExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _PCDM.PCDM_ReadWriter_ReadExtensions(self, *args)


    def ReadDocumentVersion(self, *args):
        """
        ReadDocumentVersion(PCDM_ReadWriter self, TCollection_ExtendedString aFileName, Handle_Message_Messenger theMsgDriver) -> Standard_Integer

        :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.PCDM_ReadWriter_ReadDocumentVersion(self, *args)


    def Open(*args):
        """
        Open(Storage_BaseDriver aDriver, TCollection_ExtendedString aFileName, Storage_OpenMode const anOpenMode)

        :type aDriver: OCC.wrapper.Storage.Storage_BaseDriver
        :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type anOpenMode: OCC.wrapper.Storage.Storage_OpenMode

        """
        return _PCDM.PCDM_ReadWriter_Open(*args)

    Open = staticmethod(Open)

    def Reader(*args):
        """
        Reader(TCollection_ExtendedString aFileName) -> Handle_PCDM_ReadWriter

        returns the convenient Reader for a File.

        :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.PCDM.Handle_PCDM_ReadWriter

        """
        return _PCDM.PCDM_ReadWriter_Reader(*args)

    Reader = staticmethod(Reader)

    def Writer(*args):
        """
        Writer() -> Handle_PCDM_ReadWriter

        :rtype: OCC.wrapper.PCDM.Handle_PCDM_ReadWriter

        """
        return _PCDM.PCDM_ReadWriter_Writer(*args)

    Writer = staticmethod(Writer)

    def WriteFileFormat(*args):
        """
        WriteFileFormat(Handle_Storage_Data aData, Handle_CDM_Document aDocument)

        :type aData: OCC.wrapper.Storage.Handle_Storage_Data
        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _PCDM.PCDM_ReadWriter_WriteFileFormat(*args)

    WriteFileFormat = staticmethod(WriteFileFormat)

    def FileFormat(*args):
        """
        FileFormat(TCollection_ExtendedString aFileName) -> TCollection_ExtendedString
        FileFormat(Standard_IStream & theIStream, Handle_Storage_Data theData) -> TCollection_ExtendedString

        tries  to get a format  from the stream.  returns an empty
        string if the file could not be read or does not have
        a FileFormat information.

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type theData: OCC.wrapper.Storage.Handle_Storage_Data
        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _PCDM.PCDM_ReadWriter_FileFormat(*args)

    FileFormat = staticmethod(FileFormat)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _PCDM.PCDM_ReadWriter_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _PCDM.PCDM_ReadWriter_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.PCDM_ReadWriter_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _PCDM.delete_PCDM_ReadWriter
PCDM_ReadWriter_swigregister = _PCDM.PCDM_ReadWriter_swigregister
PCDM_ReadWriter_swigregister(PCDM_ReadWriter)

def PCDM_ReadWriter_Open(*args):
    """
    PCDM_ReadWriter_Open(Storage_BaseDriver aDriver, TCollection_ExtendedString aFileName, Storage_OpenMode const anOpenMode)

    :type aDriver: OCC.wrapper.Storage.Storage_BaseDriver
    :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
    :type anOpenMode: OCC.wrapper.Storage.Storage_OpenMode

    """
    return _PCDM.PCDM_ReadWriter_Open(*args)

def PCDM_ReadWriter_Reader(*args):
    """
    PCDM_ReadWriter_Reader(TCollection_ExtendedString aFileName) -> Handle_PCDM_ReadWriter

    returns the convenient Reader for a File.

    :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
    :rtype: OCC.wrapper.PCDM.Handle_PCDM_ReadWriter

    """
    return _PCDM.PCDM_ReadWriter_Reader(*args)

def PCDM_ReadWriter_Writer(*args):
    """
    PCDM_ReadWriter_Writer() -> Handle_PCDM_ReadWriter

    :rtype: OCC.wrapper.PCDM.Handle_PCDM_ReadWriter

    """
    return _PCDM.PCDM_ReadWriter_Writer(*args)

def PCDM_ReadWriter_WriteFileFormat(*args):
    """
    PCDM_ReadWriter_WriteFileFormat(Handle_Storage_Data aData, Handle_CDM_Document aDocument)

    :type aData: OCC.wrapper.Storage.Handle_Storage_Data
    :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document

    """
    return _PCDM.PCDM_ReadWriter_WriteFileFormat(*args)

def PCDM_ReadWriter_FileFormat(*args):
    """
    FileFormat(TCollection_ExtendedString aFileName) -> TCollection_ExtendedString
    PCDM_ReadWriter_FileFormat(Standard_IStream & theIStream, Handle_Storage_Data theData) -> TCollection_ExtendedString

    tries  to get a format  from the stream.  returns an empty
    string if the file could not be read or does not have
    a FileFormat information.

    :type theIStream: OCC.wrapper.Standard.Standard_IStream
    :type theData: OCC.wrapper.Storage.Handle_Storage_Data
    :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

    """
    return _PCDM.PCDM_ReadWriter_FileFormat(*args)

def PCDM_ReadWriter_get_type_name(*args):
    """
    PCDM_ReadWriter_get_type_name() -> char const *

    :rtype: const char *

    """
    return _PCDM.PCDM_ReadWriter_get_type_name(*args)

def PCDM_ReadWriter_get_type_descriptor(*args):
    """
    PCDM_ReadWriter_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _PCDM.PCDM_ReadWriter_get_type_descriptor(*args)

class PCDM_Writer(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_PCDM_Writer
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_PCDM_Writer(self) 
            return h


    def Write(self, *args):
        """
        Write(PCDM_Writer self, Handle_CDM_Document aDocument, TCollection_ExtendedString aFileName)
        Write(PCDM_Writer self, Handle_CDM_Document theDocument, Standard_OStream & theOStream)

        Write <theDocument> to theOStream

        :type theDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :type theOStream: OCC.wrapper.Standard.Standard_OStream

        """
        return _PCDM.PCDM_Writer_Write(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _PCDM.PCDM_Writer_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _PCDM.PCDM_Writer_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.PCDM_Writer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _PCDM.delete_PCDM_Writer
PCDM_Writer_swigregister = _PCDM.PCDM_Writer_swigregister
PCDM_Writer_swigregister(PCDM_Writer)

def PCDM_Writer_get_type_name(*args):
    """
    PCDM_Writer_get_type_name() -> char const *

    :rtype: const char *

    """
    return _PCDM.PCDM_Writer_get_type_name(*args)

def PCDM_Writer_get_type_descriptor(*args):
    """
    PCDM_Writer_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _PCDM.PCDM_Writer_get_type_descriptor(*args)

class PCDM_StorageDriver(PCDM_Writer):
    """
    persistent implemention of storage.

    The  application  must redefine one the two Make()
    methods.  The first one, if  the application wants to
    put only one document in the storage file.

    The  second  method  should  be   redefined  to  put
    additional document  that   could  be  used by   the
    retrieval instead of the principal document, depending
    on the schema used during the retrieval.  For example,
    a    second     document   could   be     a   standard
    CDMShape_Document.    This  means   that a   client
    application will already be able to extract a CDMShape_Document
    of the file, if the Shape Schema remains unchanged.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_PCDM_StorageDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_PCDM_StorageDriver(self) 
            return h


    def Make(self, *args):
        """
        Make(PCDM_StorageDriver self, Handle_CDM_Document aDocument) -> Handle_PCDM_Document
        Make(PCDM_StorageDriver self, Handle_CDM_Document aDocument, NCollection_Sequence_Handle_PCDM_Document Documents)

        By default, puts  in the Sequence the  document returns
        by the previous Make method.

        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :type Documents: OCC.wrapper.PCDM.PCDM_SequenceOfDocument

        """
        return _PCDM.PCDM_StorageDriver_Make(self, *args)


    def Write(self, *args):
        """
        Write(PCDM_StorageDriver self, Handle_CDM_Document aDocument, TCollection_ExtendedString aFileName)
        Write(PCDM_StorageDriver self, Handle_CDM_Document theDocument, Standard_OStream & theOStream)

        Write <theDocument> to theOStream

        :type theDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :type theOStream: OCC.wrapper.Standard.Standard_OStream

        """
        return _PCDM.PCDM_StorageDriver_Write(self, *args)


    def SetFormat(self, *args):
        """
        SetFormat(PCDM_StorageDriver self, TCollection_ExtendedString aformat)

        :type aformat: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _PCDM.PCDM_StorageDriver_SetFormat(self, *args)


    def GetFormat(self, *args):
        """
        GetFormat(PCDM_StorageDriver self) -> TCollection_ExtendedString

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _PCDM.PCDM_StorageDriver_GetFormat(self, *args)


    def IsError(self, *args):
        """
        IsError(PCDM_StorageDriver self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PCDM.PCDM_StorageDriver_IsError(self, *args)


    def SetIsError(self, *args):
        """
        SetIsError(PCDM_StorageDriver self, Standard_Boolean const theIsError)

        :type theIsError: bool

        """
        return _PCDM.PCDM_StorageDriver_SetIsError(self, *args)


    def GetStoreStatus(self, *args):
        """
        GetStoreStatus(PCDM_StorageDriver self) -> PCDM_StoreStatus

        :rtype: OCC.wrapper.PCDM.PCDM_StoreStatus

        """
        return _PCDM.PCDM_StorageDriver_GetStoreStatus(self, *args)


    def SetStoreStatus(self, *args):
        """
        SetStoreStatus(PCDM_StorageDriver self, PCDM_StoreStatus const theStoreStatus)

        :type theStoreStatus: OCC.wrapper.PCDM.PCDM_StoreStatus

        """
        return _PCDM.PCDM_StorageDriver_SetStoreStatus(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _PCDM.PCDM_StorageDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _PCDM.PCDM_StorageDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.PCDM_StorageDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self):
        """
        persistent implemention of storage.

        The  application  must redefine one the two Make()
        methods.  The first one, if  the application wants to
        put only one document in the storage file.

        The  second  method  should  be   redefined  to  put
        additional document  that   could  be  used by   the
        retrieval instead of the principal document, depending
        on the schema used during the retrieval.  For example,
        a    second     document   could   be     a   standard
        CDMShape_Document.    This  means   that a   client
        application will already be able to extract a CDMShape_Document
        of the file, if the Shape Schema remains unchanged.
        """
        this = _PCDM.new_PCDM_StorageDriver()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle



    __swig_destroy__ = _PCDM.delete_PCDM_StorageDriver
PCDM_StorageDriver_swigregister = _PCDM.PCDM_StorageDriver_swigregister
PCDM_StorageDriver_swigregister(PCDM_StorageDriver)

def PCDM_StorageDriver_get_type_name(*args):
    """
    PCDM_StorageDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _PCDM.PCDM_StorageDriver_get_type_name(*args)

def PCDM_StorageDriver_get_type_descriptor(*args):
    """
    PCDM_StorageDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _PCDM.PCDM_StorageDriver_get_type_descriptor(*args)

class PCDM_Reader(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_PCDM_Reader
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_PCDM_Reader(self) 
            return h


    def CreateDocument(self, *args):
        """
        CreateDocument(PCDM_Reader self) -> Handle_CDM_Document

        this method is called by the framework before the read method.

        :rtype: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _PCDM.PCDM_Reader_CreateDocument(self, *args)


    def Read(self, *args):
        """
        Read(PCDM_Reader self, TCollection_ExtendedString aFileName, Handle_CDM_Document aNewDocument, Handle_CDM_Application anApplication)
        Read(PCDM_Reader self, Standard_IStream & theIStream, Handle_Storage_Data theStorageData, Handle_CDM_Document theDoc, Handle_CDM_Application theApplication)

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type theStorageData: OCC.wrapper.Storage.Handle_Storage_Data
        :type theDoc: OCC.wrapper.CDM.Handle_CDM_Document
        :type theApplication: OCC.wrapper.CDM.Handle_CDM_Application

        """
        return _PCDM.PCDM_Reader_Read(self, *args)


    def GetStatus(self, *args):
        """
        GetStatus(PCDM_Reader self) -> PCDM_ReaderStatus

        :rtype: OCC.wrapper.PCDM.PCDM_ReaderStatus

        """
        return _PCDM.PCDM_Reader_GetStatus(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _PCDM.PCDM_Reader_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _PCDM.PCDM_Reader_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.PCDM_Reader_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _PCDM.delete_PCDM_Reader
PCDM_Reader_swigregister = _PCDM.PCDM_Reader_swigregister
PCDM_Reader_swigregister(PCDM_Reader)

def PCDM_Reader_get_type_name(*args):
    """
    PCDM_Reader_get_type_name() -> char const *

    :rtype: const char *

    """
    return _PCDM.PCDM_Reader_get_type_name(*args)

def PCDM_Reader_get_type_descriptor(*args):
    """
    PCDM_Reader_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _PCDM.PCDM_Reader_get_type_descriptor(*args)

class PCDM_DriverError(Standard.Standard_Failure):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_PCDM_DriverError
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_PCDM_DriverError(self) 
            return h


    def __init__(self, *args):
        """
        __init__(PCDM_DriverError self) -> PCDM_DriverError
        __init__(PCDM_DriverError self, Standard_CString const theMessage) -> PCDM_DriverError

        :type theMessage: OCC.wrapper.Standard.Standard_CString

        """
        this = _PCDM.new_PCDM_DriverError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewInstance(*args):
        """
        NewInstance(Standard_CString const theMessage) -> Handle_PCDM_DriverError

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.PCDM.Handle_PCDM_DriverError

        """
        return _PCDM.PCDM_DriverError_NewInstance(*args)

    NewInstance = staticmethod(NewInstance)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _PCDM.PCDM_DriverError_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _PCDM.PCDM_DriverError_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.PCDM_DriverError_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _PCDM.delete_PCDM_DriverError
PCDM_DriverError_swigregister = _PCDM.PCDM_DriverError_swigregister
PCDM_DriverError_swigregister(PCDM_DriverError)

def PCDM_DriverError_NewInstance(*args):
    """
    PCDM_DriverError_NewInstance(Standard_CString const theMessage) -> Handle_PCDM_DriverError

    :type theMessage: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.PCDM.Handle_PCDM_DriverError

    """
    return _PCDM.PCDM_DriverError_NewInstance(*args)

def PCDM_DriverError_get_type_name(*args):
    """
    PCDM_DriverError_get_type_name() -> char const *

    :rtype: const char *

    """
    return _PCDM.PCDM_DriverError_get_type_name(*args)

def PCDM_DriverError_get_type_descriptor(*args):
    """
    PCDM_DriverError_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _PCDM.PCDM_DriverError_get_type_descriptor(*args)

class PCDM_Reference(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PCDM_Reference self) -> PCDM_Reference
        __init__(PCDM_Reference self, Standard_Integer const aReferenceIdentifier, TCollection_ExtendedString aFileName, Standard_Integer const aDocumentVersion) -> PCDM_Reference

        :type aReferenceIdentifier: int
        :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type aDocumentVersion: int

        """
        this = _PCDM.new_PCDM_Reference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReferenceIdentifier(self, *args):
        """
        ReferenceIdentifier(PCDM_Reference self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.PCDM_Reference_ReferenceIdentifier(self, *args)


    def FileName(self, *args):
        """
        FileName(PCDM_Reference self) -> TCollection_ExtendedString

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _PCDM.PCDM_Reference_FileName(self, *args)


    def DocumentVersion(self, *args):
        """
        DocumentVersion(PCDM_Reference self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.PCDM_Reference_DocumentVersion(self, *args)

    __swig_destroy__ = _PCDM.delete_PCDM_Reference
PCDM_Reference_swigregister = _PCDM.PCDM_Reference_swigregister
PCDM_Reference_swigregister(PCDM_Reference)

class PCDM_Document(Standard.Standard_Persistent):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_PCDM_Document
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_PCDM_Document(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _PCDM.PCDM_Document_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _PCDM.PCDM_Document_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.PCDM_Document_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __init__(self):
        this = _PCDM.new_PCDM_Document()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle



    __swig_destroy__ = _PCDM.delete_PCDM_Document
PCDM_Document_swigregister = _PCDM.PCDM_Document_swigregister
PCDM_Document_swigregister(PCDM_Document)

def PCDM_Document_get_type_name(*args):
    """
    PCDM_Document_get_type_name() -> char const *

    :rtype: const char *

    """
    return _PCDM.PCDM_Document_get_type_name(*args)

def PCDM_Document_get_type_descriptor(*args):
    """
    PCDM_Document_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _PCDM.PCDM_Document_get_type_descriptor(*args)

class PCDM_(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FileDriverType(*args):
        """
        FileDriverType(TCollection_AsciiString aFileName, PCDM_BaseDriverPointer & aBaseDriver) -> PCDM_TypeOfFileDriver
        FileDriverType(Standard_IStream & theIStream, PCDM_BaseDriverPointer & theBaseDriver) -> PCDM_TypeOfFileDriver

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type theBaseDriver: OCC.wrapper.PCDM.PCDM_BaseDriverPointer
        :rtype: OCC.wrapper.PCDM.PCDM_TypeOfFileDriver

        """
        return _PCDM.PCDM__FileDriverType(*args)

    FileDriverType = staticmethod(FileDriverType)

    def __init__(self):
        this = _PCDM.new_PCDM_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PCDM.delete_PCDM_
PCDM__swigregister = _PCDM.PCDM__swigregister
PCDM__swigregister(PCDM_)

def PCDM__FileDriverType(*args):
    """
    FileDriverType(TCollection_AsciiString aFileName, PCDM_BaseDriverPointer & aBaseDriver) -> PCDM_TypeOfFileDriver
    PCDM__FileDriverType(Standard_IStream & theIStream, PCDM_BaseDriverPointer & theBaseDriver) -> PCDM_TypeOfFileDriver

    :type theIStream: OCC.wrapper.Standard.Standard_IStream
    :type theBaseDriver: OCC.wrapper.PCDM.PCDM_BaseDriverPointer
    :rtype: OCC.wrapper.PCDM.PCDM_TypeOfFileDriver

    """
    return _PCDM.PCDM__FileDriverType(*args)

class Handle_PCDM_Writer(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_PCDM_Writer self)

        Nullify the handle


        """
        return _PCDM.Handle_PCDM_Writer_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_PCDM_Writer self) -> bool

        Check for being null

        :rtype: bool

        """
        return _PCDM.Handle_PCDM_Writer_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_PCDM_Writer self, PCDM_Writer thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _PCDM.Handle_PCDM_Writer_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_PCDM_Writer self, Handle_PCDM_Writer theHandle) -> Handle_PCDM_Writer
        assign(Handle_PCDM_Writer self, PCDM_Writer thePtr) -> Handle_PCDM_Writer
        assign(Handle_PCDM_Writer self, Handle_PCDM_Writer theHandle) -> Handle_PCDM_Writer

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _PCDM.Handle_PCDM_Writer_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_PCDM_Writer self) -> PCDM_Writer

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _PCDM.Handle_PCDM_Writer_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_PCDM_Writer self) -> PCDM_Writer

        Member access operator (note non-const)

        :rtype: T *

        """
        return _PCDM.Handle_PCDM_Writer___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_PCDM_Writer self) -> PCDM_Writer

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _PCDM.Handle_PCDM_Writer___ref__(self, *args)


    def __hash__(self):
        return _PCDM.Handle_PCDM_Writer___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _PCDM.Handle_PCDM_Writer___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _PCDM.new_Handle_PCDM_Writer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_PCDM.Handle_PCDM_Writer_DownCast)
    __swig_destroy__ = _PCDM.delete_Handle_PCDM_Writer

    def Write(self, *args):
        """
        Write(Handle_PCDM_Writer self, Handle_CDM_Document aDocument, TCollection_ExtendedString aFileName)
        Write(Handle_PCDM_Writer self, Handle_CDM_Document theDocument, Standard_OStream & theOStream)

        Write <theDocument> to theOStream

        :type theDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :type theOStream: OCC.wrapper.Standard.Standard_OStream

        """
        return _PCDM.Handle_PCDM_Writer_Write(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_PCDM_Writer self) -> char const *

        :rtype: const char *

        """
        return _PCDM.Handle_PCDM_Writer_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.Handle_PCDM_Writer_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.Handle_PCDM_Writer_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_PCDM_Writer self)

        Memory deallocator for transient classes


        """
        return _PCDM.Handle_PCDM_Writer_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_PCDM_Writer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_PCDM_Writer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PCDM.Handle_PCDM_Writer_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_PCDM_Writer self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_PCDM_Writer self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PCDM.Handle_PCDM_Writer_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_PCDM_Writer self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _PCDM.Handle_PCDM_Writer_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_PCDM_Writer self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.Handle_PCDM_Writer_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_PCDM_Writer self)

        Increments the reference counter of this object


        """
        return _PCDM.Handle_PCDM_Writer_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_PCDM_Writer self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.Handle_PCDM_Writer_DecrementRefCounter(self, *args)

Handle_PCDM_Writer_swigregister = _PCDM.Handle_PCDM_Writer_swigregister
Handle_PCDM_Writer_swigregister(Handle_PCDM_Writer)

def Handle_PCDM_Writer_DownCast(thing):
    return _PCDM.Handle_PCDM_Writer_DownCast(thing)
Handle_PCDM_Writer_DownCast = _PCDM.Handle_PCDM_Writer_DownCast

class Handle_PCDM_ReadWriter(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_PCDM_ReadWriter self)

        Nullify the handle


        """
        return _PCDM.Handle_PCDM_ReadWriter_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_PCDM_ReadWriter self) -> bool

        Check for being null

        :rtype: bool

        """
        return _PCDM.Handle_PCDM_ReadWriter_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_PCDM_ReadWriter self, PCDM_ReadWriter thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _PCDM.Handle_PCDM_ReadWriter_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_PCDM_ReadWriter self, Handle_PCDM_ReadWriter theHandle) -> Handle_PCDM_ReadWriter
        assign(Handle_PCDM_ReadWriter self, PCDM_ReadWriter thePtr) -> Handle_PCDM_ReadWriter
        assign(Handle_PCDM_ReadWriter self, Handle_PCDM_ReadWriter theHandle) -> Handle_PCDM_ReadWriter

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _PCDM.Handle_PCDM_ReadWriter_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_PCDM_ReadWriter self) -> PCDM_ReadWriter

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _PCDM.Handle_PCDM_ReadWriter_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_PCDM_ReadWriter self) -> PCDM_ReadWriter

        Member access operator (note non-const)

        :rtype: T *

        """
        return _PCDM.Handle_PCDM_ReadWriter___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_PCDM_ReadWriter self) -> PCDM_ReadWriter

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _PCDM.Handle_PCDM_ReadWriter___ref__(self, *args)


    def __hash__(self):
        return _PCDM.Handle_PCDM_ReadWriter___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _PCDM.Handle_PCDM_ReadWriter___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _PCDM.new_Handle_PCDM_ReadWriter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_PCDM.Handle_PCDM_ReadWriter_DownCast)
    __swig_destroy__ = _PCDM.delete_Handle_PCDM_ReadWriter

    def Version(self, *args):
        """
        Version(Handle_PCDM_ReadWriter self) -> TCollection_AsciiString

        returns PCDM_ReadWriter_1.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _PCDM.Handle_PCDM_ReadWriter_Version(self, *args)


    def WriteReferenceCounter(self, *args):
        """
        WriteReferenceCounter(Handle_PCDM_ReadWriter self, Handle_Storage_Data aData, Handle_CDM_Document aDocument)

        :type aData: OCC.wrapper.Storage.Handle_Storage_Data
        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _PCDM.Handle_PCDM_ReadWriter_WriteReferenceCounter(self, *args)


    def WriteReferences(self, *args):
        """
        WriteReferences(Handle_PCDM_ReadWriter self, Handle_Storage_Data aData, Handle_CDM_Document aDocument, TCollection_ExtendedString theReferencerFileName)

        :type aData: OCC.wrapper.Storage.Handle_Storage_Data
        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :type theReferencerFileName: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _PCDM.Handle_PCDM_ReadWriter_WriteReferences(self, *args)


    def WriteExtensions(self, *args):
        """
        WriteExtensions(Handle_PCDM_ReadWriter self, Handle_Storage_Data aData, Handle_CDM_Document aDocument)

        :type aData: OCC.wrapper.Storage.Handle_Storage_Data
        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _PCDM.Handle_PCDM_ReadWriter_WriteExtensions(self, *args)


    def WriteVersion(self, *args):
        """
        WriteVersion(Handle_PCDM_ReadWriter self, Handle_Storage_Data aData, Handle_CDM_Document aDocument)

        :type aData: OCC.wrapper.Storage.Handle_Storage_Data
        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _PCDM.Handle_PCDM_ReadWriter_WriteVersion(self, *args)


    def ReadReferenceCounter(self, *args):
        """
        ReadReferenceCounter(Handle_PCDM_ReadWriter self, TCollection_ExtendedString theFileName, Handle_Message_Messenger theMsgDriver) -> Standard_Integer

        :type theFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.Handle_PCDM_ReadWriter_ReadReferenceCounter(self, *args)


    def ReadReferences(self, *args):
        """
        ReadReferences(Handle_PCDM_ReadWriter self, TCollection_ExtendedString aFileName, NCollection_Sequence_PCDM_Reference theReferences, Handle_Message_Messenger theMsgDriver)

        :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theReferences: OCC.wrapper.PCDM.PCDM_SequenceOfReference
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _PCDM.Handle_PCDM_ReadWriter_ReadReferences(self, *args)


    def ReadExtensions(self, *args):
        """
        ReadExtensions(Handle_PCDM_ReadWriter self, TCollection_ExtendedString aFileName, NCollection_Sequence_TCollection_ExtendedString theExtensions, Handle_Message_Messenger theMsgDriver)

        :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theExtensions: OCC.wrapper.TColStd.TColStd_SequenceOfExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _PCDM.Handle_PCDM_ReadWriter_ReadExtensions(self, *args)


    def ReadDocumentVersion(self, *args):
        """
        ReadDocumentVersion(Handle_PCDM_ReadWriter self, TCollection_ExtendedString aFileName, Handle_Message_Messenger theMsgDriver) -> Standard_Integer

        :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.Handle_PCDM_ReadWriter_ReadDocumentVersion(self, *args)


    def Open(self, *args):
        """
        Open(Handle_PCDM_ReadWriter self, Storage_BaseDriver aDriver, TCollection_ExtendedString aFileName, Storage_OpenMode const anOpenMode)

        :type aDriver: OCC.wrapper.Storage.Storage_BaseDriver
        :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type anOpenMode: OCC.wrapper.Storage.Storage_OpenMode

        """
        return _PCDM.Handle_PCDM_ReadWriter_Open(self, *args)


    def Reader(self, *args):
        """
        Reader(Handle_PCDM_ReadWriter self, TCollection_ExtendedString aFileName) -> Handle_PCDM_ReadWriter

        returns the convenient Reader for a File.

        :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.PCDM.Handle_PCDM_ReadWriter

        """
        return _PCDM.Handle_PCDM_ReadWriter_Reader(self, *args)


    def Writer(self, *args):
        """
        Writer(Handle_PCDM_ReadWriter self) -> Handle_PCDM_ReadWriter

        :rtype: OCC.wrapper.PCDM.Handle_PCDM_ReadWriter

        """
        return _PCDM.Handle_PCDM_ReadWriter_Writer(self, *args)


    def WriteFileFormat(self, *args):
        """
        WriteFileFormat(Handle_PCDM_ReadWriter self, Handle_Storage_Data aData, Handle_CDM_Document aDocument)

        :type aData: OCC.wrapper.Storage.Handle_Storage_Data
        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _PCDM.Handle_PCDM_ReadWriter_WriteFileFormat(self, *args)


    def FileFormat(self, *args):
        """
        FileFormat(Handle_PCDM_ReadWriter self, TCollection_ExtendedString aFileName) -> TCollection_ExtendedString
        FileFormat(Handle_PCDM_ReadWriter self, Standard_IStream & theIStream, Handle_Storage_Data theData) -> TCollection_ExtendedString

        tries  to get a format  from the stream.  returns an empty
        string if the file could not be read or does not have
        a FileFormat information.

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type theData: OCC.wrapper.Storage.Handle_Storage_Data
        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _PCDM.Handle_PCDM_ReadWriter_FileFormat(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_PCDM_ReadWriter self) -> char const *

        :rtype: const char *

        """
        return _PCDM.Handle_PCDM_ReadWriter_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.Handle_PCDM_ReadWriter_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.Handle_PCDM_ReadWriter_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_PCDM_ReadWriter self)

        Memory deallocator for transient classes


        """
        return _PCDM.Handle_PCDM_ReadWriter_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_PCDM_ReadWriter self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_PCDM_ReadWriter self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PCDM.Handle_PCDM_ReadWriter_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_PCDM_ReadWriter self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_PCDM_ReadWriter self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PCDM.Handle_PCDM_ReadWriter_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_PCDM_ReadWriter self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _PCDM.Handle_PCDM_ReadWriter_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_PCDM_ReadWriter self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.Handle_PCDM_ReadWriter_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_PCDM_ReadWriter self)

        Increments the reference counter of this object


        """
        return _PCDM.Handle_PCDM_ReadWriter_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_PCDM_ReadWriter self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.Handle_PCDM_ReadWriter_DecrementRefCounter(self, *args)

Handle_PCDM_ReadWriter_swigregister = _PCDM.Handle_PCDM_ReadWriter_swigregister
Handle_PCDM_ReadWriter_swigregister(Handle_PCDM_ReadWriter)

def Handle_PCDM_ReadWriter_DownCast(thing):
    return _PCDM.Handle_PCDM_ReadWriter_DownCast(thing)
Handle_PCDM_ReadWriter_DownCast = _PCDM.Handle_PCDM_ReadWriter_DownCast

class Handle_PCDM_Reader(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_PCDM_Reader self)

        Nullify the handle


        """
        return _PCDM.Handle_PCDM_Reader_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_PCDM_Reader self) -> bool

        Check for being null

        :rtype: bool

        """
        return _PCDM.Handle_PCDM_Reader_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_PCDM_Reader self, PCDM_Reader thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _PCDM.Handle_PCDM_Reader_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_PCDM_Reader self, Handle_PCDM_Reader theHandle) -> Handle_PCDM_Reader
        assign(Handle_PCDM_Reader self, PCDM_Reader thePtr) -> Handle_PCDM_Reader
        assign(Handle_PCDM_Reader self, Handle_PCDM_Reader theHandle) -> Handle_PCDM_Reader

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _PCDM.Handle_PCDM_Reader_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_PCDM_Reader self) -> PCDM_Reader

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _PCDM.Handle_PCDM_Reader_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_PCDM_Reader self) -> PCDM_Reader

        Member access operator (note non-const)

        :rtype: T *

        """
        return _PCDM.Handle_PCDM_Reader___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_PCDM_Reader self) -> PCDM_Reader

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _PCDM.Handle_PCDM_Reader___ref__(self, *args)


    def __hash__(self):
        return _PCDM.Handle_PCDM_Reader___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _PCDM.Handle_PCDM_Reader___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _PCDM.new_Handle_PCDM_Reader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_PCDM.Handle_PCDM_Reader_DownCast)
    __swig_destroy__ = _PCDM.delete_Handle_PCDM_Reader

    def CreateDocument(self, *args):
        """
        CreateDocument(Handle_PCDM_Reader self) -> Handle_CDM_Document

        this method is called by the framework before the read method.

        :rtype: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _PCDM.Handle_PCDM_Reader_CreateDocument(self, *args)


    def Read(self, *args):
        """
        Read(Handle_PCDM_Reader self, TCollection_ExtendedString aFileName, Handle_CDM_Document aNewDocument, Handle_CDM_Application anApplication)
        Read(Handle_PCDM_Reader self, Standard_IStream & theIStream, Handle_Storage_Data theStorageData, Handle_CDM_Document theDoc, Handle_CDM_Application theApplication)

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type theStorageData: OCC.wrapper.Storage.Handle_Storage_Data
        :type theDoc: OCC.wrapper.CDM.Handle_CDM_Document
        :type theApplication: OCC.wrapper.CDM.Handle_CDM_Application

        """
        return _PCDM.Handle_PCDM_Reader_Read(self, *args)


    def GetStatus(self, *args):
        """
        GetStatus(Handle_PCDM_Reader self) -> PCDM_ReaderStatus

        :rtype: OCC.wrapper.PCDM.PCDM_ReaderStatus

        """
        return _PCDM.Handle_PCDM_Reader_GetStatus(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_PCDM_Reader self) -> char const *

        :rtype: const char *

        """
        return _PCDM.Handle_PCDM_Reader_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.Handle_PCDM_Reader_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.Handle_PCDM_Reader_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_PCDM_Reader self)

        Memory deallocator for transient classes


        """
        return _PCDM.Handle_PCDM_Reader_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_PCDM_Reader self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_PCDM_Reader self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PCDM.Handle_PCDM_Reader_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_PCDM_Reader self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_PCDM_Reader self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PCDM.Handle_PCDM_Reader_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_PCDM_Reader self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _PCDM.Handle_PCDM_Reader_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_PCDM_Reader self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.Handle_PCDM_Reader_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_PCDM_Reader self)

        Increments the reference counter of this object


        """
        return _PCDM.Handle_PCDM_Reader_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_PCDM_Reader self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.Handle_PCDM_Reader_DecrementRefCounter(self, *args)

Handle_PCDM_Reader_swigregister = _PCDM.Handle_PCDM_Reader_swigregister
Handle_PCDM_Reader_swigregister(Handle_PCDM_Reader)

def Handle_PCDM_Reader_DownCast(thing):
    return _PCDM.Handle_PCDM_Reader_DownCast(thing)
Handle_PCDM_Reader_DownCast = _PCDM.Handle_PCDM_Reader_DownCast

class Handle_PCDM_StorageDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_PCDM_StorageDriver self)

        Nullify the handle


        """
        return _PCDM.Handle_PCDM_StorageDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_PCDM_StorageDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _PCDM.Handle_PCDM_StorageDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_PCDM_StorageDriver self, PCDM_StorageDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _PCDM.Handle_PCDM_StorageDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_PCDM_StorageDriver self, Handle_PCDM_StorageDriver theHandle) -> Handle_PCDM_StorageDriver
        assign(Handle_PCDM_StorageDriver self, PCDM_StorageDriver thePtr) -> Handle_PCDM_StorageDriver
        assign(Handle_PCDM_StorageDriver self, Handle_PCDM_StorageDriver theHandle) -> Handle_PCDM_StorageDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _PCDM.Handle_PCDM_StorageDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_PCDM_StorageDriver self) -> PCDM_StorageDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _PCDM.Handle_PCDM_StorageDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_PCDM_StorageDriver self) -> PCDM_StorageDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _PCDM.Handle_PCDM_StorageDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_PCDM_StorageDriver self) -> PCDM_StorageDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _PCDM.Handle_PCDM_StorageDriver___ref__(self, *args)


    def __hash__(self):
        return _PCDM.Handle_PCDM_StorageDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _PCDM.Handle_PCDM_StorageDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _PCDM.new_Handle_PCDM_StorageDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_PCDM.Handle_PCDM_StorageDriver_DownCast)
    __swig_destroy__ = _PCDM.delete_Handle_PCDM_StorageDriver

    def Make(self, *args):
        """
        Make(Handle_PCDM_StorageDriver self, Handle_CDM_Document aDocument) -> Handle_PCDM_Document
        Make(Handle_PCDM_StorageDriver self, Handle_CDM_Document aDocument, NCollection_Sequence_Handle_PCDM_Document Documents)

        By default, puts  in the Sequence the  document returns
        by the previous Make method.

        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :type Documents: OCC.wrapper.PCDM.PCDM_SequenceOfDocument

        """
        return _PCDM.Handle_PCDM_StorageDriver_Make(self, *args)


    def Write(self, *args):
        """
        Write(Handle_PCDM_StorageDriver self, Handle_CDM_Document aDocument, TCollection_ExtendedString aFileName)
        Write(Handle_PCDM_StorageDriver self, Handle_CDM_Document theDocument, Standard_OStream & theOStream)

        Write <theDocument> to theOStream

        :type theDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :type theOStream: OCC.wrapper.Standard.Standard_OStream

        """
        return _PCDM.Handle_PCDM_StorageDriver_Write(self, *args)


    def SetFormat(self, *args):
        """
        SetFormat(Handle_PCDM_StorageDriver self, TCollection_ExtendedString aformat)

        :type aformat: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _PCDM.Handle_PCDM_StorageDriver_SetFormat(self, *args)


    def GetFormat(self, *args):
        """
        GetFormat(Handle_PCDM_StorageDriver self) -> TCollection_ExtendedString

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _PCDM.Handle_PCDM_StorageDriver_GetFormat(self, *args)


    def IsError(self, *args):
        """
        IsError(Handle_PCDM_StorageDriver self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PCDM.Handle_PCDM_StorageDriver_IsError(self, *args)


    def SetIsError(self, *args):
        """
        SetIsError(Handle_PCDM_StorageDriver self, Standard_Boolean const theIsError)

        :type theIsError: bool

        """
        return _PCDM.Handle_PCDM_StorageDriver_SetIsError(self, *args)


    def GetStoreStatus(self, *args):
        """
        GetStoreStatus(Handle_PCDM_StorageDriver self) -> PCDM_StoreStatus

        :rtype: OCC.wrapper.PCDM.PCDM_StoreStatus

        """
        return _PCDM.Handle_PCDM_StorageDriver_GetStoreStatus(self, *args)


    def SetStoreStatus(self, *args):
        """
        SetStoreStatus(Handle_PCDM_StorageDriver self, PCDM_StoreStatus const theStoreStatus)

        :type theStoreStatus: OCC.wrapper.PCDM.PCDM_StoreStatus

        """
        return _PCDM.Handle_PCDM_StorageDriver_SetStoreStatus(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_PCDM_StorageDriver self) -> char const *

        :rtype: const char *

        """
        return _PCDM.Handle_PCDM_StorageDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.Handle_PCDM_StorageDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.Handle_PCDM_StorageDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_PCDM_StorageDriver self)

        Memory deallocator for transient classes


        """
        return _PCDM.Handle_PCDM_StorageDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_PCDM_StorageDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_PCDM_StorageDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PCDM.Handle_PCDM_StorageDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_PCDM_StorageDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_PCDM_StorageDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PCDM.Handle_PCDM_StorageDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_PCDM_StorageDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _PCDM.Handle_PCDM_StorageDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_PCDM_StorageDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.Handle_PCDM_StorageDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_PCDM_StorageDriver self)

        Increments the reference counter of this object


        """
        return _PCDM.Handle_PCDM_StorageDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_PCDM_StorageDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.Handle_PCDM_StorageDriver_DecrementRefCounter(self, *args)

Handle_PCDM_StorageDriver_swigregister = _PCDM.Handle_PCDM_StorageDriver_swigregister
Handle_PCDM_StorageDriver_swigregister(Handle_PCDM_StorageDriver)

def Handle_PCDM_StorageDriver_DownCast(thing):
    return _PCDM.Handle_PCDM_StorageDriver_DownCast(thing)
Handle_PCDM_StorageDriver_DownCast = _PCDM.Handle_PCDM_StorageDriver_DownCast

class PCDM_ReadWriter_1(PCDM_ReadWriter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_PCDM_ReadWriter_1
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_PCDM_ReadWriter_1(self) 
            return h


    def __init__(self, *args):
        """__init__(PCDM_ReadWriter_1 self) -> PCDM_ReadWriter_1"""
        this = _PCDM.new_PCDM_ReadWriter_1(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Version(self, *args):
        """
        Version(PCDM_ReadWriter_1 self) -> TCollection_AsciiString

        returns PCDM_ReadWriter_1.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _PCDM.PCDM_ReadWriter_1_Version(self, *args)


    def WriteReferenceCounter(self, *args):
        """
        WriteReferenceCounter(PCDM_ReadWriter_1 self, Handle_Storage_Data aData, Handle_CDM_Document aDocument)

        :type aData: OCC.wrapper.Storage.Handle_Storage_Data
        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _PCDM.PCDM_ReadWriter_1_WriteReferenceCounter(self, *args)


    def WriteReferences(self, *args):
        """
        WriteReferences(PCDM_ReadWriter_1 self, Handle_Storage_Data aData, Handle_CDM_Document aDocument, TCollection_ExtendedString theReferencerFileName)

        :type aData: OCC.wrapper.Storage.Handle_Storage_Data
        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :type theReferencerFileName: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _PCDM.PCDM_ReadWriter_1_WriteReferences(self, *args)


    def WriteExtensions(self, *args):
        """
        WriteExtensions(PCDM_ReadWriter_1 self, Handle_Storage_Data aData, Handle_CDM_Document aDocument)

        :type aData: OCC.wrapper.Storage.Handle_Storage_Data
        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _PCDM.PCDM_ReadWriter_1_WriteExtensions(self, *args)


    def WriteVersion(self, *args):
        """
        WriteVersion(PCDM_ReadWriter_1 self, Handle_Storage_Data aData, Handle_CDM_Document aDocument)

        :type aData: OCC.wrapper.Storage.Handle_Storage_Data
        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _PCDM.PCDM_ReadWriter_1_WriteVersion(self, *args)


    def ReadReferenceCounter(self, *args):
        """
        ReadReferenceCounter(PCDM_ReadWriter_1 self, TCollection_ExtendedString aFileName, Handle_Message_Messenger theMsgDriver) -> Standard_Integer

        :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.PCDM_ReadWriter_1_ReadReferenceCounter(self, *args)


    def ReadReferences(self, *args):
        """
        ReadReferences(PCDM_ReadWriter_1 self, TCollection_ExtendedString aFileName, NCollection_Sequence_PCDM_Reference theReferences, Handle_Message_Messenger theMsgDriver)

        :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theReferences: OCC.wrapper.PCDM.PCDM_SequenceOfReference
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _PCDM.PCDM_ReadWriter_1_ReadReferences(self, *args)


    def ReadExtensions(self, *args):
        """
        ReadExtensions(PCDM_ReadWriter_1 self, TCollection_ExtendedString aFileName, NCollection_Sequence_TCollection_ExtendedString theExtensions, Handle_Message_Messenger theMsgDriver)

        :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theExtensions: OCC.wrapper.TColStd.TColStd_SequenceOfExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _PCDM.PCDM_ReadWriter_1_ReadExtensions(self, *args)


    def ReadDocumentVersion(self, *args):
        """
        ReadDocumentVersion(PCDM_ReadWriter_1 self, TCollection_ExtendedString aFileName, Handle_Message_Messenger theMsgDriver) -> Standard_Integer

        :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.PCDM_ReadWriter_1_ReadDocumentVersion(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _PCDM.PCDM_ReadWriter_1_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _PCDM.PCDM_ReadWriter_1_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.PCDM_ReadWriter_1_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _PCDM.delete_PCDM_ReadWriter_1
PCDM_ReadWriter_1_swigregister = _PCDM.PCDM_ReadWriter_1_swigregister
PCDM_ReadWriter_1_swigregister(PCDM_ReadWriter_1)

def PCDM_ReadWriter_1_get_type_name(*args):
    """
    PCDM_ReadWriter_1_get_type_name() -> char const *

    :rtype: const char *

    """
    return _PCDM.PCDM_ReadWriter_1_get_type_name(*args)

def PCDM_ReadWriter_1_get_type_descriptor(*args):
    """
    PCDM_ReadWriter_1_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _PCDM.PCDM_ReadWriter_1_get_type_descriptor(*args)

class PCDM_RetrievalDriver(PCDM_Reader):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_PCDM_RetrievalDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_PCDM_RetrievalDriver(self) 
            return h


    def DocumentVersion(*args):
        """
        DocumentVersion(TCollection_ExtendedString theFileName, Handle_Message_Messenger theMsgDriver) -> Standard_Integer

        :type theFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.PCDM_RetrievalDriver_DocumentVersion(*args)

    DocumentVersion = staticmethod(DocumentVersion)

    def ReferenceCounter(*args):
        """
        ReferenceCounter(TCollection_ExtendedString theFileName, Handle_Message_Messenger theMsgDriver) -> Standard_Integer

        :type theFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.PCDM_RetrievalDriver_ReferenceCounter(*args)

    ReferenceCounter = staticmethod(ReferenceCounter)

    def SetFormat(self, *args):
        """
        SetFormat(PCDM_RetrievalDriver self, TCollection_ExtendedString aformat)

        :type aformat: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _PCDM.PCDM_RetrievalDriver_SetFormat(self, *args)


    def GetFormat(self, *args):
        """
        GetFormat(PCDM_RetrievalDriver self) -> TCollection_ExtendedString

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _PCDM.PCDM_RetrievalDriver_GetFormat(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _PCDM.PCDM_RetrievalDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _PCDM.PCDM_RetrievalDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.PCDM_RetrievalDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _PCDM.delete_PCDM_RetrievalDriver
PCDM_RetrievalDriver_swigregister = _PCDM.PCDM_RetrievalDriver_swigregister
PCDM_RetrievalDriver_swigregister(PCDM_RetrievalDriver)

def PCDM_RetrievalDriver_DocumentVersion(*args):
    """
    PCDM_RetrievalDriver_DocumentVersion(TCollection_ExtendedString theFileName, Handle_Message_Messenger theMsgDriver) -> Standard_Integer

    :type theFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
    :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _PCDM.PCDM_RetrievalDriver_DocumentVersion(*args)

def PCDM_RetrievalDriver_ReferenceCounter(*args):
    """
    PCDM_RetrievalDriver_ReferenceCounter(TCollection_ExtendedString theFileName, Handle_Message_Messenger theMsgDriver) -> Standard_Integer

    :type theFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
    :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _PCDM.PCDM_RetrievalDriver_ReferenceCounter(*args)

def PCDM_RetrievalDriver_get_type_name(*args):
    """
    PCDM_RetrievalDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _PCDM.PCDM_RetrievalDriver_get_type_name(*args)

def PCDM_RetrievalDriver_get_type_descriptor(*args):
    """
    PCDM_RetrievalDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _PCDM.PCDM_RetrievalDriver_get_type_descriptor(*args)

class Handle_PCDM_DriverError(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_PCDM_DriverError self)

        Nullify the handle


        """
        return _PCDM.Handle_PCDM_DriverError_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_PCDM_DriverError self) -> bool

        Check for being null

        :rtype: bool

        """
        return _PCDM.Handle_PCDM_DriverError_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_PCDM_DriverError self, PCDM_DriverError thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _PCDM.Handle_PCDM_DriverError_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_PCDM_DriverError self, Handle_PCDM_DriverError theHandle) -> Handle_PCDM_DriverError
        assign(Handle_PCDM_DriverError self, PCDM_DriverError thePtr) -> Handle_PCDM_DriverError
        assign(Handle_PCDM_DriverError self, Handle_PCDM_DriverError theHandle) -> Handle_PCDM_DriverError

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _PCDM.Handle_PCDM_DriverError_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_PCDM_DriverError self) -> PCDM_DriverError

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _PCDM.Handle_PCDM_DriverError_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_PCDM_DriverError self) -> PCDM_DriverError

        Member access operator (note non-const)

        :rtype: T *

        """
        return _PCDM.Handle_PCDM_DriverError___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_PCDM_DriverError self) -> PCDM_DriverError

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _PCDM.Handle_PCDM_DriverError___ref__(self, *args)


    def __hash__(self):
        return _PCDM.Handle_PCDM_DriverError___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _PCDM.Handle_PCDM_DriverError___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _PCDM.new_Handle_PCDM_DriverError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_PCDM.Handle_PCDM_DriverError_DownCast)
    __swig_destroy__ = _PCDM.delete_Handle_PCDM_DriverError

    def NewInstance(self, *args):
        """
        NewInstance(Handle_PCDM_DriverError self, Standard_CString const theMessage) -> Handle_PCDM_DriverError

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.PCDM.Handle_PCDM_DriverError

        """
        return _PCDM.Handle_PCDM_DriverError_NewInstance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_PCDM_DriverError self) -> char const *

        :rtype: const char *

        """
        return _PCDM.Handle_PCDM_DriverError_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.Handle_PCDM_DriverError_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.Handle_PCDM_DriverError_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Print(self, *args):
        """
        Print(Handle_PCDM_DriverError self, Standard_OStream & s)

        Prints on the stream <s> the exception name followed by
        the error message.
        Level: Advanced
        Warning:
        The operator "OStream& operator<< (Standard_OStream&,
        Handle(Standard_Failure)&)"
        is implemented. (This operator uses the method Print)

        :type s: OCC.wrapper.Standard.Standard_OStream

        """
        return _PCDM.Handle_PCDM_DriverError_Print(self, *args)


    def GetMessageString(self, *args):
        """
        GetMessageString(Handle_PCDM_DriverError self) -> Standard_CString

        Returns error message

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _PCDM.Handle_PCDM_DriverError_GetMessageString(self, *args)


    def SetMessageString(self, *args):
        """
        SetMessageString(Handle_PCDM_DriverError self, Standard_CString const aMessage)

        Sets error message

        :type aMessage: OCC.wrapper.Standard.Standard_CString

        """
        return _PCDM.Handle_PCDM_DriverError_SetMessageString(self, *args)


    def Reraise(self, *args):
        """
        Reraise(Handle_PCDM_DriverError self)
        Reraise(Handle_PCDM_DriverError self, Standard_CString const aMessage)
        Reraise(Handle_PCDM_DriverError self, Standard_SStream const & aReason)

        Reraises a caught exception and changes its error message.

        :type aReason: OCC.wrapper.Standard.Standard_SStream

        """
        return _PCDM.Handle_PCDM_DriverError_Reraise(self, *args)


    def Jump(self, *args):
        """
        Jump(Handle_PCDM_DriverError self)

        Used to throw CASCADE exception from C signal handler.
        On platforms that do not allow throwing C++ exceptions
        from this handler (e.g. Linux), uses longjump to get to
        the current active signal handler, and only then is
        converted to C++ exception.


        """
        return _PCDM.Handle_PCDM_DriverError_Jump(self, *args)


    def Caught(self, *args):
        """
        Caught(Handle_PCDM_DriverError self) -> Handle_Standard_Failure

        Returns the last caught exception.
        Needed when exceptions are emulated by C longjumps,
        in other cases is also provided for compatibility.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Failure

        """
        return _PCDM.Handle_PCDM_DriverError_Caught(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_PCDM_DriverError self)

        Memory deallocator for transient classes


        """
        return _PCDM.Handle_PCDM_DriverError_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_PCDM_DriverError self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_PCDM_DriverError self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PCDM.Handle_PCDM_DriverError_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_PCDM_DriverError self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_PCDM_DriverError self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PCDM.Handle_PCDM_DriverError_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_PCDM_DriverError self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _PCDM.Handle_PCDM_DriverError_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_PCDM_DriverError self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.Handle_PCDM_DriverError_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_PCDM_DriverError self)

        Increments the reference counter of this object


        """
        return _PCDM.Handle_PCDM_DriverError_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_PCDM_DriverError self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.Handle_PCDM_DriverError_DecrementRefCounter(self, *args)

Handle_PCDM_DriverError_swigregister = _PCDM.Handle_PCDM_DriverError_swigregister
Handle_PCDM_DriverError_swigregister(Handle_PCDM_DriverError)

def Handle_PCDM_DriverError_DownCast(thing):
    return _PCDM.Handle_PCDM_DriverError_DownCast(thing)
Handle_PCDM_DriverError_DownCast = _PCDM.Handle_PCDM_DriverError_DownCast

class NCollection_Sequence_Handle_PCDM_Document(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_PCDM_Document self) -> NCollection_Sequence< opencascade::handle< PCDM_Document > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_PCDM_Document self) -> NCollection_Sequence< opencascade::handle< PCDM_Document > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_PCDM_Document self) -> NCollection_Sequence< opencascade::handle< PCDM_Document > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_PCDM_Document self) -> NCollection_Sequence< opencascade::handle< PCDM_Document > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _PCDM.new_NCollection_Sequence_Handle_PCDM_Document(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_PCDM_Document self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_PCDM_Document self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_PCDM_Document self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_PCDM_Document self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_PCDM_Document self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_PCDM_Document self)

        Reverse sequence


        """
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_PCDM_Document self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_PCDM_Document self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_PCDM_Document self, NCollection_Sequence_Handle_PCDM_Document theOther) -> NCollection_Sequence_Handle_PCDM_Document

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_PCDM_Document self, NCollection_Sequence_Handle_PCDM_Document theOther) -> NCollection_Sequence_Handle_PCDM_Document

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_PCDM_Document self, NCollection_Sequence< opencascade::handle< PCDM_Document > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_PCDM_Document self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_PCDM_Document self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_PCDM_Document self, Handle_PCDM_Document theItem)
        Append(NCollection_Sequence_Handle_PCDM_Document self, NCollection_Sequence_Handle_PCDM_Document theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_PCDM_Document self, Handle_PCDM_Document theItem)
        Prepend(NCollection_Sequence_Handle_PCDM_Document self, NCollection_Sequence_Handle_PCDM_Document theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_PCDM_Document self, Standard_Integer const theIndex, Handle_PCDM_Document theItem)
        InsertBefore(NCollection_Sequence_Handle_PCDM_Document self, Standard_Integer const theIndex, NCollection_Sequence_Handle_PCDM_Document theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_PCDM_Document self, NCollection_Sequence< opencascade::handle< PCDM_Document > >::Iterator & thePosition, Handle_PCDM_Document theItem)
        InsertAfter(NCollection_Sequence_Handle_PCDM_Document self, Standard_Integer const theIndex, NCollection_Sequence_Handle_PCDM_Document theSeq)
        InsertAfter(NCollection_Sequence_Handle_PCDM_Document self, Standard_Integer const theIndex, Handle_PCDM_Document theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_PCDM_Document self, Standard_Integer const theIndex, NCollection_Sequence_Handle_PCDM_Document theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _PCDM.NCollection_Sequence_Handle_PCDM_Document_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_PCDM_Document self) -> Handle_PCDM_Document

        First item access

        :rtype: TheItemType &

        """
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _PCDM.NCollection_Sequence_Handle_PCDM_Document_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_PCDM_Document self) -> Handle_PCDM_Document

        Last item access

        :rtype: TheItemType &

        """
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _PCDM.NCollection_Sequence_Handle_PCDM_Document_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_PCDM_Document self, Standard_Integer const theIndex) -> Handle_PCDM_Document

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _PCDM.NCollection_Sequence_Handle_PCDM_Document___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_PCDM_Document self, Standard_Integer const theIndex, Handle_PCDM_Document theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_SetValue(self, *args)


    def __iter__(self):
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document___iter__(self)
    __swig_destroy__ = _PCDM.delete_NCollection_Sequence_Handle_PCDM_Document
NCollection_Sequence_Handle_PCDM_Document_swigregister = _PCDM.NCollection_Sequence_Handle_PCDM_Document_swigregister
NCollection_Sequence_Handle_PCDM_Document_swigregister(NCollection_Sequence_Handle_PCDM_Document)

def NCollection_Sequence_Handle_PCDM_Document_delNode(*args):
    """
    NCollection_Sequence_Handle_PCDM_Document_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _PCDM.NCollection_Sequence_Handle_PCDM_Document_delNode(*args)

class NCollection_Sequence_Handle_PCDM_Document_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _PCDM.new_NCollection_Sequence_Handle_PCDM_Document_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PCDM.delete_NCollection_Sequence_Handle_PCDM_Document_IteratorHelper

    def __next__(self):
        return _PCDM.NCollection_Sequence_Handle_PCDM_Document_IteratorHelper___next__(self)
NCollection_Sequence_Handle_PCDM_Document_IteratorHelper_swigregister = _PCDM.NCollection_Sequence_Handle_PCDM_Document_IteratorHelper_swigregister
NCollection_Sequence_Handle_PCDM_Document_IteratorHelper_swigregister(NCollection_Sequence_Handle_PCDM_Document_IteratorHelper)


try:
	PCDM_SequenceOfDocument = NCollection_Sequence_Handle_PCDM_Document
except NameError:
	pass # does not exist, probably ignored

class PCDM_ReferenceIterator(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_PCDM_ReferenceIterator
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_PCDM_ReferenceIterator(self) 
            return h


    def __init__(self, *args):
        """
        __init__(PCDM_ReferenceIterator self, Handle_Message_Messenger theMessageDriver) -> PCDM_ReferenceIterator

        Warning! The constructor does not initialization.

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _PCDM.new_PCDM_ReferenceIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def LoadReferences(self, *args):
        """
        LoadReferences(PCDM_ReferenceIterator self, Handle_CDM_Document aDocument, Handle_CDM_MetaData aMetaData, Handle_CDM_Application anApplication, Standard_Boolean const UseStorageConfiguration)

        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :type aMetaData: OCC.wrapper.CDM.Handle_CDM_MetaData
        :type anApplication: OCC.wrapper.CDM.Handle_CDM_Application
        :type UseStorageConfiguration: bool

        """
        return _PCDM.PCDM_ReferenceIterator_LoadReferences(self, *args)


    def Init(self, *args):
        """
        Init(PCDM_ReferenceIterator self, Handle_CDM_MetaData aMetaData)

        :type aMetaData: OCC.wrapper.CDM.Handle_CDM_MetaData

        """
        return _PCDM.PCDM_ReferenceIterator_Init(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _PCDM.PCDM_ReferenceIterator_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _PCDM.PCDM_ReferenceIterator_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.PCDM_ReferenceIterator_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _PCDM.delete_PCDM_ReferenceIterator
PCDM_ReferenceIterator_swigregister = _PCDM.PCDM_ReferenceIterator_swigregister
PCDM_ReferenceIterator_swigregister(PCDM_ReferenceIterator)

def PCDM_ReferenceIterator_get_type_name(*args):
    """
    PCDM_ReferenceIterator_get_type_name() -> char const *

    :rtype: const char *

    """
    return _PCDM.PCDM_ReferenceIterator_get_type_name(*args)

def PCDM_ReferenceIterator_get_type_descriptor(*args):
    """
    PCDM_ReferenceIterator_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _PCDM.PCDM_ReferenceIterator_get_type_descriptor(*args)

class NCollection_Sequence_PCDM_Reference(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_PCDM_Reference self) -> NCollection_Sequence< PCDM_Reference >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _PCDM.NCollection_Sequence_PCDM_Reference_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_PCDM_Reference self) -> NCollection_Sequence< PCDM_Reference >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _PCDM.NCollection_Sequence_PCDM_Reference_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_PCDM_Reference self) -> NCollection_Sequence< PCDM_Reference >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _PCDM.NCollection_Sequence_PCDM_Reference_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_PCDM_Reference self) -> NCollection_Sequence< PCDM_Reference >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _PCDM.NCollection_Sequence_PCDM_Reference_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _PCDM.new_NCollection_Sequence_PCDM_Reference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_PCDM_Reference self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.NCollection_Sequence_PCDM_Reference_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_PCDM_Reference self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.NCollection_Sequence_PCDM_Reference_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_PCDM_Reference self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.NCollection_Sequence_PCDM_Reference_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_PCDM_Reference self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.NCollection_Sequence_PCDM_Reference_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_PCDM_Reference self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PCDM.NCollection_Sequence_PCDM_Reference_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_PCDM_Reference self)

        Reverse sequence


        """
        return _PCDM.NCollection_Sequence_PCDM_Reference_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_PCDM_Reference self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _PCDM.NCollection_Sequence_PCDM_Reference_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _PCDM.NCollection_Sequence_PCDM_Reference_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_PCDM_Reference self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _PCDM.NCollection_Sequence_PCDM_Reference_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_PCDM_Reference self, NCollection_Sequence_PCDM_Reference theOther) -> NCollection_Sequence_PCDM_Reference

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _PCDM.NCollection_Sequence_PCDM_Reference_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_PCDM_Reference self, NCollection_Sequence_PCDM_Reference theOther) -> NCollection_Sequence_PCDM_Reference

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _PCDM.NCollection_Sequence_PCDM_Reference_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_PCDM_Reference self, NCollection_Sequence< PCDM_Reference >::Iterator & thePosition)
        Remove(NCollection_Sequence_PCDM_Reference self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_PCDM_Reference self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _PCDM.NCollection_Sequence_PCDM_Reference_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_PCDM_Reference self, PCDM_Reference theItem)
        Append(NCollection_Sequence_PCDM_Reference self, NCollection_Sequence_PCDM_Reference theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _PCDM.NCollection_Sequence_PCDM_Reference_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_PCDM_Reference self, PCDM_Reference theItem)
        Prepend(NCollection_Sequence_PCDM_Reference self, NCollection_Sequence_PCDM_Reference theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _PCDM.NCollection_Sequence_PCDM_Reference_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_PCDM_Reference self, Standard_Integer const theIndex, PCDM_Reference theItem)
        InsertBefore(NCollection_Sequence_PCDM_Reference self, Standard_Integer const theIndex, NCollection_Sequence_PCDM_Reference theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _PCDM.NCollection_Sequence_PCDM_Reference_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_PCDM_Reference self, NCollection_Sequence< PCDM_Reference >::Iterator & thePosition, PCDM_Reference theItem)
        InsertAfter(NCollection_Sequence_PCDM_Reference self, Standard_Integer const theIndex, NCollection_Sequence_PCDM_Reference theSeq)
        InsertAfter(NCollection_Sequence_PCDM_Reference self, Standard_Integer const theIndex, PCDM_Reference theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _PCDM.NCollection_Sequence_PCDM_Reference_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_PCDM_Reference self, Standard_Integer const theIndex, NCollection_Sequence_PCDM_Reference theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _PCDM.NCollection_Sequence_PCDM_Reference_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _PCDM.NCollection_Sequence_PCDM_Reference_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_PCDM_Reference self) -> PCDM_Reference

        First item access

        :rtype: TheItemType &

        """
        return _PCDM.NCollection_Sequence_PCDM_Reference_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _PCDM.NCollection_Sequence_PCDM_Reference_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_PCDM_Reference self) -> PCDM_Reference

        Last item access

        :rtype: TheItemType &

        """
        return _PCDM.NCollection_Sequence_PCDM_Reference_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _PCDM.NCollection_Sequence_PCDM_Reference_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_PCDM_Reference self, Standard_Integer const theIndex) -> PCDM_Reference

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _PCDM.NCollection_Sequence_PCDM_Reference_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _PCDM.NCollection_Sequence_PCDM_Reference___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_PCDM_Reference self, Standard_Integer const theIndex, PCDM_Reference theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _PCDM.NCollection_Sequence_PCDM_Reference_SetValue(self, *args)


    def __iter__(self):
        return _PCDM.NCollection_Sequence_PCDM_Reference___iter__(self)
    __swig_destroy__ = _PCDM.delete_NCollection_Sequence_PCDM_Reference
NCollection_Sequence_PCDM_Reference_swigregister = _PCDM.NCollection_Sequence_PCDM_Reference_swigregister
NCollection_Sequence_PCDM_Reference_swigregister(NCollection_Sequence_PCDM_Reference)

def NCollection_Sequence_PCDM_Reference_delNode(*args):
    """
    NCollection_Sequence_PCDM_Reference_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _PCDM.NCollection_Sequence_PCDM_Reference_delNode(*args)

class NCollection_Sequence_PCDM_Reference_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _PCDM.new_NCollection_Sequence_PCDM_Reference_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PCDM.delete_NCollection_Sequence_PCDM_Reference_IteratorHelper

    def __next__(self):
        return _PCDM.NCollection_Sequence_PCDM_Reference_IteratorHelper___next__(self)
NCollection_Sequence_PCDM_Reference_IteratorHelper_swigregister = _PCDM.NCollection_Sequence_PCDM_Reference_IteratorHelper_swigregister
NCollection_Sequence_PCDM_Reference_IteratorHelper_swigregister(NCollection_Sequence_PCDM_Reference_IteratorHelper)


try:
	PCDM_SequenceOfReference = NCollection_Sequence_PCDM_Reference
except NameError:
	pass # does not exist, probably ignored

class Handle_PCDM_ReadWriter_1(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_PCDM_ReadWriter_1 self)

        Nullify the handle


        """
        return _PCDM.Handle_PCDM_ReadWriter_1_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_PCDM_ReadWriter_1 self) -> bool

        Check for being null

        :rtype: bool

        """
        return _PCDM.Handle_PCDM_ReadWriter_1_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_PCDM_ReadWriter_1 self, PCDM_ReadWriter_1 thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _PCDM.Handle_PCDM_ReadWriter_1_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_PCDM_ReadWriter_1 self, Handle_PCDM_ReadWriter_1 theHandle) -> Handle_PCDM_ReadWriter_1
        assign(Handle_PCDM_ReadWriter_1 self, PCDM_ReadWriter_1 thePtr) -> Handle_PCDM_ReadWriter_1
        assign(Handle_PCDM_ReadWriter_1 self, Handle_PCDM_ReadWriter_1 theHandle) -> Handle_PCDM_ReadWriter_1

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _PCDM.Handle_PCDM_ReadWriter_1_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_PCDM_ReadWriter_1 self) -> PCDM_ReadWriter_1

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _PCDM.Handle_PCDM_ReadWriter_1_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_PCDM_ReadWriter_1 self) -> PCDM_ReadWriter_1

        Member access operator (note non-const)

        :rtype: T *

        """
        return _PCDM.Handle_PCDM_ReadWriter_1___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_PCDM_ReadWriter_1 self) -> PCDM_ReadWriter_1

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _PCDM.Handle_PCDM_ReadWriter_1___ref__(self, *args)


    def __hash__(self):
        return _PCDM.Handle_PCDM_ReadWriter_1___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _PCDM.Handle_PCDM_ReadWriter_1___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _PCDM.new_Handle_PCDM_ReadWriter_1(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_PCDM.Handle_PCDM_ReadWriter_1_DownCast)
    __swig_destroy__ = _PCDM.delete_Handle_PCDM_ReadWriter_1

    def Version(self, *args):
        """
        Version(Handle_PCDM_ReadWriter_1 self) -> TCollection_AsciiString

        returns PCDM_ReadWriter_1.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _PCDM.Handle_PCDM_ReadWriter_1_Version(self, *args)


    def WriteReferenceCounter(self, *args):
        """
        WriteReferenceCounter(Handle_PCDM_ReadWriter_1 self, Handle_Storage_Data aData, Handle_CDM_Document aDocument)

        :type aData: OCC.wrapper.Storage.Handle_Storage_Data
        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _PCDM.Handle_PCDM_ReadWriter_1_WriteReferenceCounter(self, *args)


    def WriteReferences(self, *args):
        """
        WriteReferences(Handle_PCDM_ReadWriter_1 self, Handle_Storage_Data aData, Handle_CDM_Document aDocument, TCollection_ExtendedString theReferencerFileName)

        :type aData: OCC.wrapper.Storage.Handle_Storage_Data
        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :type theReferencerFileName: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _PCDM.Handle_PCDM_ReadWriter_1_WriteReferences(self, *args)


    def WriteExtensions(self, *args):
        """
        WriteExtensions(Handle_PCDM_ReadWriter_1 self, Handle_Storage_Data aData, Handle_CDM_Document aDocument)

        :type aData: OCC.wrapper.Storage.Handle_Storage_Data
        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _PCDM.Handle_PCDM_ReadWriter_1_WriteExtensions(self, *args)


    def WriteVersion(self, *args):
        """
        WriteVersion(Handle_PCDM_ReadWriter_1 self, Handle_Storage_Data aData, Handle_CDM_Document aDocument)

        :type aData: OCC.wrapper.Storage.Handle_Storage_Data
        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _PCDM.Handle_PCDM_ReadWriter_1_WriteVersion(self, *args)


    def ReadReferenceCounter(self, *args):
        """
        ReadReferenceCounter(Handle_PCDM_ReadWriter_1 self, TCollection_ExtendedString aFileName, Handle_Message_Messenger theMsgDriver) -> Standard_Integer

        :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.Handle_PCDM_ReadWriter_1_ReadReferenceCounter(self, *args)


    def ReadReferences(self, *args):
        """
        ReadReferences(Handle_PCDM_ReadWriter_1 self, TCollection_ExtendedString aFileName, NCollection_Sequence_PCDM_Reference theReferences, Handle_Message_Messenger theMsgDriver)

        :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theReferences: OCC.wrapper.PCDM.PCDM_SequenceOfReference
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _PCDM.Handle_PCDM_ReadWriter_1_ReadReferences(self, *args)


    def ReadExtensions(self, *args):
        """
        ReadExtensions(Handle_PCDM_ReadWriter_1 self, TCollection_ExtendedString aFileName, NCollection_Sequence_TCollection_ExtendedString theExtensions, Handle_Message_Messenger theMsgDriver)

        :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theExtensions: OCC.wrapper.TColStd.TColStd_SequenceOfExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _PCDM.Handle_PCDM_ReadWriter_1_ReadExtensions(self, *args)


    def ReadDocumentVersion(self, *args):
        """
        ReadDocumentVersion(Handle_PCDM_ReadWriter_1 self, TCollection_ExtendedString aFileName, Handle_Message_Messenger theMsgDriver) -> Standard_Integer

        :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.Handle_PCDM_ReadWriter_1_ReadDocumentVersion(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_PCDM_ReadWriter_1 self) -> char const *

        :rtype: const char *

        """
        return _PCDM.Handle_PCDM_ReadWriter_1_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.Handle_PCDM_ReadWriter_1_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.Handle_PCDM_ReadWriter_1_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Open(self, *args):
        """
        Open(Handle_PCDM_ReadWriter_1 self, Storage_BaseDriver aDriver, TCollection_ExtendedString aFileName, Storage_OpenMode const anOpenMode)

        :type aDriver: OCC.wrapper.Storage.Storage_BaseDriver
        :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type anOpenMode: OCC.wrapper.Storage.Storage_OpenMode

        """
        return _PCDM.Handle_PCDM_ReadWriter_1_Open(self, *args)


    def Reader(self, *args):
        """
        Reader(Handle_PCDM_ReadWriter_1 self, TCollection_ExtendedString aFileName) -> Handle_PCDM_ReadWriter

        returns the convenient Reader for a File.

        :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.PCDM.Handle_PCDM_ReadWriter

        """
        return _PCDM.Handle_PCDM_ReadWriter_1_Reader(self, *args)


    def Writer(self, *args):
        """
        Writer(Handle_PCDM_ReadWriter_1 self) -> Handle_PCDM_ReadWriter

        :rtype: OCC.wrapper.PCDM.Handle_PCDM_ReadWriter

        """
        return _PCDM.Handle_PCDM_ReadWriter_1_Writer(self, *args)


    def WriteFileFormat(self, *args):
        """
        WriteFileFormat(Handle_PCDM_ReadWriter_1 self, Handle_Storage_Data aData, Handle_CDM_Document aDocument)

        :type aData: OCC.wrapper.Storage.Handle_Storage_Data
        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _PCDM.Handle_PCDM_ReadWriter_1_WriteFileFormat(self, *args)


    def FileFormat(self, *args):
        """
        FileFormat(Handle_PCDM_ReadWriter_1 self, TCollection_ExtendedString aFileName) -> TCollection_ExtendedString
        FileFormat(Handle_PCDM_ReadWriter_1 self, Standard_IStream & theIStream, Handle_Storage_Data theData) -> TCollection_ExtendedString

        tries  to get a format  from the stream.  returns an empty
        string if the file could not be read or does not have
        a FileFormat information.

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type theData: OCC.wrapper.Storage.Handle_Storage_Data
        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _PCDM.Handle_PCDM_ReadWriter_1_FileFormat(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_PCDM_ReadWriter_1 self)

        Memory deallocator for transient classes


        """
        return _PCDM.Handle_PCDM_ReadWriter_1_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_PCDM_ReadWriter_1 self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_PCDM_ReadWriter_1 self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PCDM.Handle_PCDM_ReadWriter_1_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_PCDM_ReadWriter_1 self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_PCDM_ReadWriter_1 self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PCDM.Handle_PCDM_ReadWriter_1_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_PCDM_ReadWriter_1 self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _PCDM.Handle_PCDM_ReadWriter_1_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_PCDM_ReadWriter_1 self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.Handle_PCDM_ReadWriter_1_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_PCDM_ReadWriter_1 self)

        Increments the reference counter of this object


        """
        return _PCDM.Handle_PCDM_ReadWriter_1_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_PCDM_ReadWriter_1 self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.Handle_PCDM_ReadWriter_1_DecrementRefCounter(self, *args)

Handle_PCDM_ReadWriter_1_swigregister = _PCDM.Handle_PCDM_ReadWriter_1_swigregister
Handle_PCDM_ReadWriter_1_swigregister(Handle_PCDM_ReadWriter_1)

def Handle_PCDM_ReadWriter_1_DownCast(thing):
    return _PCDM.Handle_PCDM_ReadWriter_1_DownCast(thing)
Handle_PCDM_ReadWriter_1_DownCast = _PCDM.Handle_PCDM_ReadWriter_1_DownCast

class Handle_PCDM_ReferenceIterator(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_PCDM_ReferenceIterator self)

        Nullify the handle


        """
        return _PCDM.Handle_PCDM_ReferenceIterator_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_PCDM_ReferenceIterator self) -> bool

        Check for being null

        :rtype: bool

        """
        return _PCDM.Handle_PCDM_ReferenceIterator_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_PCDM_ReferenceIterator self, PCDM_ReferenceIterator thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _PCDM.Handle_PCDM_ReferenceIterator_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_PCDM_ReferenceIterator self, Handle_PCDM_ReferenceIterator theHandle) -> Handle_PCDM_ReferenceIterator
        assign(Handle_PCDM_ReferenceIterator self, PCDM_ReferenceIterator thePtr) -> Handle_PCDM_ReferenceIterator
        assign(Handle_PCDM_ReferenceIterator self, Handle_PCDM_ReferenceIterator theHandle) -> Handle_PCDM_ReferenceIterator

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _PCDM.Handle_PCDM_ReferenceIterator_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_PCDM_ReferenceIterator self) -> PCDM_ReferenceIterator

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _PCDM.Handle_PCDM_ReferenceIterator_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_PCDM_ReferenceIterator self) -> PCDM_ReferenceIterator

        Member access operator (note non-const)

        :rtype: T *

        """
        return _PCDM.Handle_PCDM_ReferenceIterator___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_PCDM_ReferenceIterator self) -> PCDM_ReferenceIterator

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _PCDM.Handle_PCDM_ReferenceIterator___ref__(self, *args)


    def __hash__(self):
        return _PCDM.Handle_PCDM_ReferenceIterator___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _PCDM.Handle_PCDM_ReferenceIterator___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _PCDM.new_Handle_PCDM_ReferenceIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_PCDM.Handle_PCDM_ReferenceIterator_DownCast)
    __swig_destroy__ = _PCDM.delete_Handle_PCDM_ReferenceIterator

    def LoadReferences(self, *args):
        """
        LoadReferences(Handle_PCDM_ReferenceIterator self, Handle_CDM_Document aDocument, Handle_CDM_MetaData aMetaData, Handle_CDM_Application anApplication, Standard_Boolean const UseStorageConfiguration)

        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :type aMetaData: OCC.wrapper.CDM.Handle_CDM_MetaData
        :type anApplication: OCC.wrapper.CDM.Handle_CDM_Application
        :type UseStorageConfiguration: bool

        """
        return _PCDM.Handle_PCDM_ReferenceIterator_LoadReferences(self, *args)


    def Init(self, *args):
        """
        Init(Handle_PCDM_ReferenceIterator self, Handle_CDM_MetaData aMetaData)

        :type aMetaData: OCC.wrapper.CDM.Handle_CDM_MetaData

        """
        return _PCDM.Handle_PCDM_ReferenceIterator_Init(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_PCDM_ReferenceIterator self) -> char const *

        :rtype: const char *

        """
        return _PCDM.Handle_PCDM_ReferenceIterator_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.Handle_PCDM_ReferenceIterator_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.Handle_PCDM_ReferenceIterator_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_PCDM_ReferenceIterator self)

        Memory deallocator for transient classes


        """
        return _PCDM.Handle_PCDM_ReferenceIterator_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_PCDM_ReferenceIterator self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_PCDM_ReferenceIterator self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PCDM.Handle_PCDM_ReferenceIterator_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_PCDM_ReferenceIterator self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_PCDM_ReferenceIterator self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PCDM.Handle_PCDM_ReferenceIterator_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_PCDM_ReferenceIterator self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _PCDM.Handle_PCDM_ReferenceIterator_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_PCDM_ReferenceIterator self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.Handle_PCDM_ReferenceIterator_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_PCDM_ReferenceIterator self)

        Increments the reference counter of this object


        """
        return _PCDM.Handle_PCDM_ReferenceIterator_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_PCDM_ReferenceIterator self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.Handle_PCDM_ReferenceIterator_DecrementRefCounter(self, *args)

Handle_PCDM_ReferenceIterator_swigregister = _PCDM.Handle_PCDM_ReferenceIterator_swigregister
Handle_PCDM_ReferenceIterator_swigregister(Handle_PCDM_ReferenceIterator)

def Handle_PCDM_ReferenceIterator_DownCast(thing):
    return _PCDM.Handle_PCDM_ReferenceIterator_DownCast(thing)
Handle_PCDM_ReferenceIterator_DownCast = _PCDM.Handle_PCDM_ReferenceIterator_DownCast

class Handle_PCDM_Document(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_PCDM_Document self)

        Nullify the handle


        """
        return _PCDM.Handle_PCDM_Document_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_PCDM_Document self) -> bool

        Check for being null

        :rtype: bool

        """
        return _PCDM.Handle_PCDM_Document_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_PCDM_Document self, PCDM_Document thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _PCDM.Handle_PCDM_Document_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_PCDM_Document self, Handle_PCDM_Document theHandle) -> Handle_PCDM_Document
        assign(Handle_PCDM_Document self, PCDM_Document thePtr) -> Handle_PCDM_Document
        assign(Handle_PCDM_Document self, Handle_PCDM_Document theHandle) -> Handle_PCDM_Document

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _PCDM.Handle_PCDM_Document_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_PCDM_Document self) -> PCDM_Document

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _PCDM.Handle_PCDM_Document_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_PCDM_Document self) -> PCDM_Document

        Member access operator (note non-const)

        :rtype: T *

        """
        return _PCDM.Handle_PCDM_Document___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_PCDM_Document self) -> PCDM_Document

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _PCDM.Handle_PCDM_Document___ref__(self, *args)


    def __hash__(self):
        return _PCDM.Handle_PCDM_Document___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _PCDM.Handle_PCDM_Document___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _PCDM.new_Handle_PCDM_Document(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_PCDM.Handle_PCDM_Document_DownCast)
    __swig_destroy__ = _PCDM.delete_Handle_PCDM_Document

    def get_type_name(self, *args):
        """
        get_type_name(Handle_PCDM_Document self) -> char const *

        :rtype: const char *

        """
        return _PCDM.Handle_PCDM_Document_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.Handle_PCDM_Document_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.Handle_PCDM_Document_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeNum(self, *args):
        """
        TypeNum(Handle_PCDM_Document self) -> Standard_Integer &

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.Handle_PCDM_Document_TypeNum(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_PCDM_Document self)

        Memory deallocator for transient classes


        """
        return _PCDM.Handle_PCDM_Document_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_PCDM_Document self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_PCDM_Document self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PCDM.Handle_PCDM_Document_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_PCDM_Document self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_PCDM_Document self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PCDM.Handle_PCDM_Document_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_PCDM_Document self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _PCDM.Handle_PCDM_Document_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_PCDM_Document self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.Handle_PCDM_Document_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_PCDM_Document self)

        Increments the reference counter of this object


        """
        return _PCDM.Handle_PCDM_Document_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_PCDM_Document self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.Handle_PCDM_Document_DecrementRefCounter(self, *args)

Handle_PCDM_Document_swigregister = _PCDM.Handle_PCDM_Document_swigregister
Handle_PCDM_Document_swigregister(Handle_PCDM_Document)

def Handle_PCDM_Document_DownCast(thing):
    return _PCDM.Handle_PCDM_Document_DownCast(thing)
Handle_PCDM_Document_DownCast = _PCDM.Handle_PCDM_Document_DownCast

class Handle_PCDM_RetrievalDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_PCDM_RetrievalDriver self)

        Nullify the handle


        """
        return _PCDM.Handle_PCDM_RetrievalDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_PCDM_RetrievalDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _PCDM.Handle_PCDM_RetrievalDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_PCDM_RetrievalDriver self, PCDM_RetrievalDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _PCDM.Handle_PCDM_RetrievalDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_PCDM_RetrievalDriver self, Handle_PCDM_RetrievalDriver theHandle) -> Handle_PCDM_RetrievalDriver
        assign(Handle_PCDM_RetrievalDriver self, PCDM_RetrievalDriver thePtr) -> Handle_PCDM_RetrievalDriver
        assign(Handle_PCDM_RetrievalDriver self, Handle_PCDM_RetrievalDriver theHandle) -> Handle_PCDM_RetrievalDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _PCDM.Handle_PCDM_RetrievalDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_PCDM_RetrievalDriver self) -> PCDM_RetrievalDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _PCDM.Handle_PCDM_RetrievalDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_PCDM_RetrievalDriver self) -> PCDM_RetrievalDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _PCDM.Handle_PCDM_RetrievalDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_PCDM_RetrievalDriver self) -> PCDM_RetrievalDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _PCDM.Handle_PCDM_RetrievalDriver___ref__(self, *args)


    def __hash__(self):
        return _PCDM.Handle_PCDM_RetrievalDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _PCDM.Handle_PCDM_RetrievalDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _PCDM.new_Handle_PCDM_RetrievalDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_PCDM.Handle_PCDM_RetrievalDriver_DownCast)
    __swig_destroy__ = _PCDM.delete_Handle_PCDM_RetrievalDriver

    def DocumentVersion(self, *args):
        """
        DocumentVersion(Handle_PCDM_RetrievalDriver self, TCollection_ExtendedString theFileName, Handle_Message_Messenger theMsgDriver) -> Standard_Integer

        :type theFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.Handle_PCDM_RetrievalDriver_DocumentVersion(self, *args)


    def ReferenceCounter(self, *args):
        """
        ReferenceCounter(Handle_PCDM_RetrievalDriver self, TCollection_ExtendedString theFileName, Handle_Message_Messenger theMsgDriver) -> Standard_Integer

        :type theFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.Handle_PCDM_RetrievalDriver_ReferenceCounter(self, *args)


    def SetFormat(self, *args):
        """
        SetFormat(Handle_PCDM_RetrievalDriver self, TCollection_ExtendedString aformat)

        :type aformat: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _PCDM.Handle_PCDM_RetrievalDriver_SetFormat(self, *args)


    def GetFormat(self, *args):
        """
        GetFormat(Handle_PCDM_RetrievalDriver self) -> TCollection_ExtendedString

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _PCDM.Handle_PCDM_RetrievalDriver_GetFormat(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_PCDM_RetrievalDriver self) -> char const *

        :rtype: const char *

        """
        return _PCDM.Handle_PCDM_RetrievalDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.Handle_PCDM_RetrievalDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _PCDM.Handle_PCDM_RetrievalDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CreateDocument(self, *args):
        """
        CreateDocument(Handle_PCDM_RetrievalDriver self) -> Handle_CDM_Document

        this method is called by the framework before the read method.

        :rtype: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _PCDM.Handle_PCDM_RetrievalDriver_CreateDocument(self, *args)


    def Read(self, *args):
        """
        Read(Handle_PCDM_RetrievalDriver self, TCollection_ExtendedString aFileName, Handle_CDM_Document aNewDocument, Handle_CDM_Application anApplication)
        Read(Handle_PCDM_RetrievalDriver self, Standard_IStream & theIStream, Handle_Storage_Data theStorageData, Handle_CDM_Document theDoc, Handle_CDM_Application theApplication)

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type theStorageData: OCC.wrapper.Storage.Handle_Storage_Data
        :type theDoc: OCC.wrapper.CDM.Handle_CDM_Document
        :type theApplication: OCC.wrapper.CDM.Handle_CDM_Application

        """
        return _PCDM.Handle_PCDM_RetrievalDriver_Read(self, *args)


    def GetStatus(self, *args):
        """
        GetStatus(Handle_PCDM_RetrievalDriver self) -> PCDM_ReaderStatus

        :rtype: OCC.wrapper.PCDM.PCDM_ReaderStatus

        """
        return _PCDM.Handle_PCDM_RetrievalDriver_GetStatus(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_PCDM_RetrievalDriver self)

        Memory deallocator for transient classes


        """
        return _PCDM.Handle_PCDM_RetrievalDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_PCDM_RetrievalDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_PCDM_RetrievalDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PCDM.Handle_PCDM_RetrievalDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_PCDM_RetrievalDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_PCDM_RetrievalDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _PCDM.Handle_PCDM_RetrievalDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_PCDM_RetrievalDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _PCDM.Handle_PCDM_RetrievalDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_PCDM_RetrievalDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.Handle_PCDM_RetrievalDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_PCDM_RetrievalDriver self)

        Increments the reference counter of this object


        """
        return _PCDM.Handle_PCDM_RetrievalDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_PCDM_RetrievalDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _PCDM.Handle_PCDM_RetrievalDriver_DecrementRefCounter(self, *args)

Handle_PCDM_RetrievalDriver_swigregister = _PCDM.Handle_PCDM_RetrievalDriver_swigregister
Handle_PCDM_RetrievalDriver_swigregister(Handle_PCDM_RetrievalDriver)

def Handle_PCDM_RetrievalDriver_DownCast(thing):
    return _PCDM.Handle_PCDM_RetrievalDriver_DownCast(thing)
Handle_PCDM_RetrievalDriver_DownCast = _PCDM.Handle_PCDM_RetrievalDriver_DownCast



