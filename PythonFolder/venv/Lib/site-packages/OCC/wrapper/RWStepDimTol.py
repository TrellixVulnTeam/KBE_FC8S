# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_RWStepDimTol')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_RWStepDimTol')
    _RWStepDimTol = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RWStepDimTol', [dirname(__file__)])
        except ImportError:
            import _RWStepDimTol
            return _RWStepDimTol
        try:
            _mod = imp.load_module('_RWStepDimTol', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _RWStepDimTol = swig_import_helper()
    del swig_import_helper
else:
    import _RWStepDimTol
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RWStepDimTol.delete_SwigPyIterator

    def value(self):
        return _RWStepDimTol.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _RWStepDimTol.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _RWStepDimTol.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _RWStepDimTol.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _RWStepDimTol.SwigPyIterator_equal(self, x)

    def copy(self):
        return _RWStepDimTol.SwigPyIterator_copy(self)

    def next(self):
        return _RWStepDimTol.SwigPyIterator_next(self)

    def __next__(self):
        return _RWStepDimTol.SwigPyIterator___next__(self)

    def previous(self):
        return _RWStepDimTol.SwigPyIterator_previous(self)

    def advance(self, n):
        return _RWStepDimTol.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _RWStepDimTol.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _RWStepDimTol.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _RWStepDimTol.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _RWStepDimTol.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _RWStepDimTol.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _RWStepDimTol.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _RWStepDimTol.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _RWStepDimTol.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_RWStepDimTol.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _RWStepDimTol.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _RWStepDimTol.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RWStepDimTol.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _RWStepDimTol.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _RWStepDimTol.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _RWStepDimTol.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _RWStepDimTol.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_RWStepDimTol.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _RWStepDimTol.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _RWStepDimTol.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RWStepDimTol.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _RWStepDimTol.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _RWStepDimTol.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _RWStepDimTol.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _RWStepDimTol.ptr_to_number(item)
ptr_to_number = _RWStepDimTol.ptr_to_number

def HashCode(*args):
    return _RWStepDimTol.HashCode(*args)
HashCode = _RWStepDimTol.HashCode

def ptr_equal(a, b):
    return _RWStepDimTol.ptr_equal(a, b)
ptr_equal = _RWStepDimTol.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepDimTol
else:
    import StepDimTol
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepBasic
else:
    import StepBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepData
else:
    import StepData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepShape
else:
    import StepShape
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepGeom
else:
    import StepGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepRepr
else:
    import StepRepr
del _swig_python_version_info
class RWStepDimTol_RWCylindricityTolerance(object):
    """Read & Write tool for CylindricityTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWCylindricityTolerance self) -> RWStepDimTol_RWCylindricityTolerance

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWCylindricityTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWCylindricityTolerance self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_CylindricityTolerance ent)

        Reads CylindricityTolerance

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_CylindricityTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWCylindricityTolerance_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWCylindricityTolerance self, StepData_StepWriter SW, Handle_StepDimTol_CylindricityTolerance ent)

        Writes CylindricityTolerance

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_CylindricityTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWCylindricityTolerance_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWCylindricityTolerance self, Handle_StepDimTol_CylindricityTolerance ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_CylindricityTolerance
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWCylindricityTolerance_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWCylindricityTolerance
RWStepDimTol_RWCylindricityTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWCylindricityTolerance_swigregister
RWStepDimTol_RWCylindricityTolerance_swigregister(RWStepDimTol_RWCylindricityTolerance)

class RWStepDimTol_RWLineProfileTolerance(object):
    """Read & Write tool for LineProfileTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWLineProfileTolerance self) -> RWStepDimTol_RWLineProfileTolerance

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWLineProfileTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWLineProfileTolerance self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_LineProfileTolerance ent)

        Reads LineProfileTolerance

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_LineProfileTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWLineProfileTolerance_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWLineProfileTolerance self, StepData_StepWriter SW, Handle_StepDimTol_LineProfileTolerance ent)

        Writes LineProfileTolerance

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_LineProfileTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWLineProfileTolerance_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWLineProfileTolerance self, Handle_StepDimTol_LineProfileTolerance ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_LineProfileTolerance
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWLineProfileTolerance_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWLineProfileTolerance
RWStepDimTol_RWLineProfileTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWLineProfileTolerance_swigregister
RWStepDimTol_RWLineProfileTolerance_swigregister(RWStepDimTol_RWLineProfileTolerance)

class RWStepDimTol_RWGeometricToleranceRelationship(object):
    """Read & Write tool for GeometricToleranceRelationship"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWGeometricToleranceRelationship self) -> RWStepDimTol_RWGeometricToleranceRelationship

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeometricToleranceRelationship(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWGeometricToleranceRelationship self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_GeometricToleranceRelationship ent)

        Reads GeometricToleranceRelationship

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceRelationship_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWGeometricToleranceRelationship self, StepData_StepWriter SW, Handle_StepDimTol_GeometricToleranceRelationship ent)

        Writes GeometricToleranceRelationship

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceRelationship_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWGeometricToleranceRelationship self, Handle_StepDimTol_GeometricToleranceRelationship ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceRelationship
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceRelationship_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeometricToleranceRelationship
RWStepDimTol_RWGeometricToleranceRelationship_swigregister = _RWStepDimTol.RWStepDimTol_RWGeometricToleranceRelationship_swigregister
RWStepDimTol_RWGeometricToleranceRelationship_swigregister(RWStepDimTol_RWGeometricToleranceRelationship)

class RWStepDimTol_RWDatumSystem(object):
    """Read & Write tool for DatumSystem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWDatumSystem self) -> RWStepDimTol_RWDatumSystem

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWDatumSystem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWDatumSystem self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_DatumSystem ent)

        Reads DatumSystem

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_DatumSystem

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumSystem_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWDatumSystem self, StepData_StepWriter SW, Handle_StepDimTol_DatumSystem ent)

        Writes DatumSystem

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_DatumSystem

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumSystem_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWDatumSystem self, Handle_StepDimTol_DatumSystem ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_DatumSystem
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumSystem_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWDatumSystem
RWStepDimTol_RWDatumSystem_swigregister = _RWStepDimTol.RWStepDimTol_RWDatumSystem_swigregister
RWStepDimTol_RWDatumSystem_swigregister(RWStepDimTol_RWDatumSystem)

class RWStepDimTol_RWTotalRunoutTolerance(object):
    """Read & Write tool for TotalRunoutTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWTotalRunoutTolerance self) -> RWStepDimTol_RWTotalRunoutTolerance

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWTotalRunoutTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWTotalRunoutTolerance self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_TotalRunoutTolerance ent)

        Reads TotalRunoutTolerance

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_TotalRunoutTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWTotalRunoutTolerance_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWTotalRunoutTolerance self, StepData_StepWriter SW, Handle_StepDimTol_TotalRunoutTolerance ent)

        Writes TotalRunoutTolerance

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_TotalRunoutTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWTotalRunoutTolerance_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWTotalRunoutTolerance self, Handle_StepDimTol_TotalRunoutTolerance ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_TotalRunoutTolerance
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWTotalRunoutTolerance_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWTotalRunoutTolerance
RWStepDimTol_RWTotalRunoutTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWTotalRunoutTolerance_swigregister
RWStepDimTol_RWTotalRunoutTolerance_swigregister(RWStepDimTol_RWTotalRunoutTolerance)

class RWStepDimTol_RWGeometricToleranceWithModifiers(object):
    """Read & Write tool for GeometricToleranceWithModifiers"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWGeometricToleranceWithModifiers self) -> RWStepDimTol_RWGeometricToleranceWithModifiers

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeometricToleranceWithModifiers(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWGeometricToleranceWithModifiers self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_GeometricToleranceWithModifiers ent)

        Reads GeometricToleranceWithModifiers

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithModifiers_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWGeometricToleranceWithModifiers self, StepData_StepWriter SW, Handle_StepDimTol_GeometricToleranceWithModifiers ent)

        Writes GeometricToleranceWithModifiers

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithModifiers_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWGeometricToleranceWithModifiers self, Handle_StepDimTol_GeometricToleranceWithModifiers ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithModifiers
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithModifiers_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeometricToleranceWithModifiers
RWStepDimTol_RWGeometricToleranceWithModifiers_swigregister = _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithModifiers_swigregister
RWStepDimTol_RWGeometricToleranceWithModifiers_swigregister(RWStepDimTol_RWGeometricToleranceWithModifiers)

class RWStepDimTol_RWDatumTarget(object):
    """Read & Write tool for DatumTarget"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWDatumTarget self) -> RWStepDimTol_RWDatumTarget

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWDatumTarget(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWDatumTarget self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_DatumTarget ent)

        Reads DatumTarget

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_DatumTarget

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumTarget_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWDatumTarget self, StepData_StepWriter SW, Handle_StepDimTol_DatumTarget ent)

        Writes DatumTarget

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_DatumTarget

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumTarget_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWDatumTarget self, Handle_StepDimTol_DatumTarget ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_DatumTarget
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumTarget_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWDatumTarget
RWStepDimTol_RWDatumTarget_swigregister = _RWStepDimTol.RWStepDimTol_RWDatumTarget_swigregister
RWStepDimTol_RWDatumTarget_swigregister(RWStepDimTol_RWDatumTarget)

class RWStepDimTol_RWCoaxialityTolerance(object):
    """Read & Write tool for CoaxialityTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWCoaxialityTolerance self) -> RWStepDimTol_RWCoaxialityTolerance

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWCoaxialityTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWCoaxialityTolerance self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_CoaxialityTolerance ent)

        Reads CoaxialityTolerance

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_CoaxialityTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWCoaxialityTolerance_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWCoaxialityTolerance self, StepData_StepWriter SW, Handle_StepDimTol_CoaxialityTolerance ent)

        Writes CoaxialityTolerance

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_CoaxialityTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWCoaxialityTolerance_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWCoaxialityTolerance self, Handle_StepDimTol_CoaxialityTolerance ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_CoaxialityTolerance
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWCoaxialityTolerance_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWCoaxialityTolerance
RWStepDimTol_RWCoaxialityTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWCoaxialityTolerance_swigregister
RWStepDimTol_RWCoaxialityTolerance_swigregister(RWStepDimTol_RWCoaxialityTolerance)

class RWStepDimTol_RWGeometricTolerance(object):
    """Read & Write tool for GeometricTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWGeometricTolerance self) -> RWStepDimTol_RWGeometricTolerance

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeometricTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWGeometricTolerance self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_GeometricTolerance ent)

        Reads GeometricTolerance

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricTolerance_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWGeometricTolerance self, StepData_StepWriter SW, Handle_StepDimTol_GeometricTolerance ent)

        Writes GeometricTolerance

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricTolerance_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWGeometricTolerance self, Handle_StepDimTol_GeometricTolerance ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricTolerance
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricTolerance_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeometricTolerance
RWStepDimTol_RWGeometricTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWGeometricTolerance_swigregister
RWStepDimTol_RWGeometricTolerance_swigregister(RWStepDimTol_RWGeometricTolerance)

class RWStepDimTol_RWToleranceZone(object):
    """Read & Write tool for ToleranceZone"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWToleranceZone self) -> RWStepDimTol_RWToleranceZone

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWToleranceZone(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWToleranceZone self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_ToleranceZone ent)

        Reads ToleranceZone

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZone

        """
        return _RWStepDimTol.RWStepDimTol_RWToleranceZone_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWToleranceZone self, StepData_StepWriter SW, Handle_StepDimTol_ToleranceZone ent)

        Writes ToleranceZone

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZone

        """
        return _RWStepDimTol.RWStepDimTol_RWToleranceZone_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWToleranceZone self, Handle_StepDimTol_ToleranceZone ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZone
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWToleranceZone_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWToleranceZone
RWStepDimTol_RWToleranceZone_swigregister = _RWStepDimTol.RWStepDimTol_RWToleranceZone_swigregister
RWStepDimTol_RWToleranceZone_swigregister(RWStepDimTol_RWToleranceZone)

class RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod(object):
    """Read & Write Module for GeoTolAndGeoTolWthDatRefAndGeoTolWthMod"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod self) -> RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod

        Read & Write Module for GeoTolAndGeoTolWthDatRefAndGeoTolWthMod
        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, StepData_StepWriter SW, Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod self, Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMod
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod
RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod_swigregister = _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod_swigregister
RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod_swigregister(RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMod)

class RWStepDimTol_RWRunoutZoneOrientation(object):
    """Read & Write tool for RunoutZoneOrientation"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWRunoutZoneOrientation self) -> RWStepDimTol_RWRunoutZoneOrientation

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWRunoutZoneOrientation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWRunoutZoneOrientation self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_RunoutZoneOrientation ent)

        Reads RunoutZoneOrientation

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_RunoutZoneOrientation

        """
        return _RWStepDimTol.RWStepDimTol_RWRunoutZoneOrientation_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWRunoutZoneOrientation self, StepData_StepWriter SW, Handle_StepDimTol_RunoutZoneOrientation ent)

        Writes RunoutZoneOrientation

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_RunoutZoneOrientation

        """
        return _RWStepDimTol.RWStepDimTol_RWRunoutZoneOrientation_WriteStep(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWRunoutZoneOrientation
RWStepDimTol_RWRunoutZoneOrientation_swigregister = _RWStepDimTol.RWStepDimTol_RWRunoutZoneOrientation_swigregister
RWStepDimTol_RWRunoutZoneOrientation_swigregister(RWStepDimTol_RWRunoutZoneOrientation)

class RWStepDimTol_RWCommonDatum(object):
    """Read & Write tool for CommonDatum"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWCommonDatum self) -> RWStepDimTol_RWCommonDatum

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWCommonDatum(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWCommonDatum self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_CommonDatum ent)

        Reads CommonDatum

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_CommonDatum

        """
        return _RWStepDimTol.RWStepDimTol_RWCommonDatum_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWCommonDatum self, StepData_StepWriter SW, Handle_StepDimTol_CommonDatum ent)

        Writes CommonDatum

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_CommonDatum

        """
        return _RWStepDimTol.RWStepDimTol_RWCommonDatum_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWCommonDatum self, Handle_StepDimTol_CommonDatum ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_CommonDatum
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWCommonDatum_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWCommonDatum
RWStepDimTol_RWCommonDatum_swigregister = _RWStepDimTol.RWStepDimTol_RWCommonDatum_swigregister
RWStepDimTol_RWCommonDatum_swigregister(RWStepDimTol_RWCommonDatum)

class RWStepDimTol_RWDatumFeature(object):
    """Read & Write tool for DatumFeature"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWDatumFeature self) -> RWStepDimTol_RWDatumFeature

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWDatumFeature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWDatumFeature self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_DatumFeature ent)

        Reads DatumFeature

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_DatumFeature

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumFeature_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWDatumFeature self, StepData_StepWriter SW, Handle_StepDimTol_DatumFeature ent)

        Writes DatumFeature

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_DatumFeature

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumFeature_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWDatumFeature self, Handle_StepDimTol_DatumFeature ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_DatumFeature
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumFeature_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWDatumFeature
RWStepDimTol_RWDatumFeature_swigregister = _RWStepDimTol.RWStepDimTol_RWDatumFeature_swigregister
RWStepDimTol_RWDatumFeature_swigregister(RWStepDimTol_RWDatumFeature)

class RWStepDimTol_RWGeoTolAndGeoTolWthMod(object):
    """Read & Write Module for GeoTolAndGeoTolWthMod"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWGeoTolAndGeoTolWthMod self) -> RWStepDimTol_RWGeoTolAndGeoTolWthMod

        Read & Write Module for GeoTolAndGeoTolWthMod
        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeoTolAndGeoTolWthMod(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWGeoTolAndGeoTolWthMod self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_GeoTolAndGeoTolWthMod ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthMod_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWGeoTolAndGeoTolWthMod self, StepData_StepWriter SW, Handle_StepDimTol_GeoTolAndGeoTolWthMod ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthMod_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWGeoTolAndGeoTolWthMod self, Handle_StepDimTol_GeoTolAndGeoTolWthMod ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMod
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthMod_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeoTolAndGeoTolWthMod
RWStepDimTol_RWGeoTolAndGeoTolWthMod_swigregister = _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthMod_swigregister
RWStepDimTol_RWGeoTolAndGeoTolWthMod_swigregister(RWStepDimTol_RWGeoTolAndGeoTolWthMod)

class RWStepDimTol_RWProjectedZoneDefinition(object):
    """Read & Write tool for ProjectedZoneDefinition"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWProjectedZoneDefinition self) -> RWStepDimTol_RWProjectedZoneDefinition

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWProjectedZoneDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWProjectedZoneDefinition self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_ProjectedZoneDefinition ent)

        Reads ProjectedZoneDefinition

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition

        """
        return _RWStepDimTol.RWStepDimTol_RWProjectedZoneDefinition_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWProjectedZoneDefinition self, StepData_StepWriter SW, Handle_StepDimTol_ProjectedZoneDefinition ent)

        Writes ProjectedZoneDefinition

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition

        """
        return _RWStepDimTol.RWStepDimTol_RWProjectedZoneDefinition_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWProjectedZoneDefinition self, Handle_StepDimTol_ProjectedZoneDefinition ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_ProjectedZoneDefinition
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWProjectedZoneDefinition_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWProjectedZoneDefinition
RWStepDimTol_RWProjectedZoneDefinition_swigregister = _RWStepDimTol.RWStepDimTol_RWProjectedZoneDefinition_swigregister
RWStepDimTol_RWProjectedZoneDefinition_swigregister(RWStepDimTol_RWProjectedZoneDefinition)

class RWStepDimTol_RWGeneralDatumReference(object):
    """Read & Write tool for GeneralDatumReference"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWGeneralDatumReference self) -> RWStepDimTol_RWGeneralDatumReference

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeneralDatumReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWGeneralDatumReference self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_GeneralDatumReference ent)

        Reads GeneralDatumReference

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeneralDatumReference

        """
        return _RWStepDimTol.RWStepDimTol_RWGeneralDatumReference_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWGeneralDatumReference self, StepData_StepWriter SW, Handle_StepDimTol_GeneralDatumReference ent)

        Writes GeneralDatumReference

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeneralDatumReference

        """
        return _RWStepDimTol.RWStepDimTol_RWGeneralDatumReference_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWGeneralDatumReference self, Handle_StepDimTol_GeneralDatumReference ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeneralDatumReference
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWGeneralDatumReference_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeneralDatumReference
RWStepDimTol_RWGeneralDatumReference_swigregister = _RWStepDimTol.RWStepDimTol_RWGeneralDatumReference_swigregister
RWStepDimTol_RWGeneralDatumReference_swigregister(RWStepDimTol_RWGeneralDatumReference)

class RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol(object):
    """Read & Write Module for GeoTolAndGeoTolWthMaxTol"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol self) -> RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol

        Read & Write Module for GeoTolAndGeoTolWthMaxTol
        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol self, StepData_StepWriter SW, Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol self, Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthMaxTol
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol
RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol_swigregister = _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol_swigregister
RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol_swigregister(RWStepDimTol_RWGeoTolAndGeoTolWthMaxTol)

class RWStepDimTol_RWNonUniformZoneDefinition(object):
    """Read & Write tool for NonUniformZoneDefinition"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWNonUniformZoneDefinition self) -> RWStepDimTol_RWNonUniformZoneDefinition

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWNonUniformZoneDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWNonUniformZoneDefinition self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_NonUniformZoneDefinition ent)

        Reads NonUniformZoneDefinition

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition

        """
        return _RWStepDimTol.RWStepDimTol_RWNonUniformZoneDefinition_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWNonUniformZoneDefinition self, StepData_StepWriter SW, Handle_StepDimTol_NonUniformZoneDefinition ent)

        Writes NonUniformZoneDefinition

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition

        """
        return _RWStepDimTol.RWStepDimTol_RWNonUniformZoneDefinition_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWNonUniformZoneDefinition self, Handle_StepDimTol_NonUniformZoneDefinition ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_NonUniformZoneDefinition
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWNonUniformZoneDefinition_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWNonUniformZoneDefinition
RWStepDimTol_RWNonUniformZoneDefinition_swigregister = _RWStepDimTol.RWStepDimTol_RWNonUniformZoneDefinition_swigregister
RWStepDimTol_RWNonUniformZoneDefinition_swigregister(RWStepDimTol_RWNonUniformZoneDefinition)

class RWStepDimTol_RWParallelismTolerance(object):
    """Read & Write tool for ParallelismTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWParallelismTolerance self) -> RWStepDimTol_RWParallelismTolerance

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWParallelismTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWParallelismTolerance self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_ParallelismTolerance ent)

        Reads ParallelismTolerance

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_ParallelismTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWParallelismTolerance_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWParallelismTolerance self, StepData_StepWriter SW, Handle_StepDimTol_ParallelismTolerance ent)

        Writes ParallelismTolerance

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_ParallelismTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWParallelismTolerance_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWParallelismTolerance self, Handle_StepDimTol_ParallelismTolerance ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_ParallelismTolerance
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWParallelismTolerance_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWParallelismTolerance
RWStepDimTol_RWParallelismTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWParallelismTolerance_swigregister
RWStepDimTol_RWParallelismTolerance_swigregister(RWStepDimTol_RWParallelismTolerance)

class RWStepDimTol_RWPerpendicularityTolerance(object):
    """Read & Write tool for PerpendicularityTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWPerpendicularityTolerance self) -> RWStepDimTol_RWPerpendicularityTolerance

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWPerpendicularityTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWPerpendicularityTolerance self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_PerpendicularityTolerance ent)

        Reads PerpendicularityTolerance

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_PerpendicularityTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWPerpendicularityTolerance_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWPerpendicularityTolerance self, StepData_StepWriter SW, Handle_StepDimTol_PerpendicularityTolerance ent)

        Writes PerpendicularityTolerance

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_PerpendicularityTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWPerpendicularityTolerance_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWPerpendicularityTolerance self, Handle_StepDimTol_PerpendicularityTolerance ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_PerpendicularityTolerance
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWPerpendicularityTolerance_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWPerpendicularityTolerance
RWStepDimTol_RWPerpendicularityTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWPerpendicularityTolerance_swigregister
RWStepDimTol_RWPerpendicularityTolerance_swigregister(RWStepDimTol_RWPerpendicularityTolerance)

class RWStepDimTol_RWGeometricToleranceWithMaximumTolerance(object):
    """Read & Write tool for GeometricToleranceWithMaximumTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWGeometricToleranceWithMaximumTolerance self) -> RWStepDimTol_RWGeometricToleranceWithMaximumTolerance

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeometricToleranceWithMaximumTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWGeometricToleranceWithMaximumTolerance self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_GeometricToleranceWithMaximumTolerance ent)

        Reads GeometricToleranceWithMaximumTolerance

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithMaximumTolerance_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWGeometricToleranceWithMaximumTolerance self, StepData_StepWriter SW, Handle_StepDimTol_GeometricToleranceWithMaximumTolerance ent)

        Writes GeometricToleranceWithMaximumTolerance

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithMaximumTolerance_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWGeometricToleranceWithMaximumTolerance self, Handle_StepDimTol_GeometricToleranceWithMaximumTolerance ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithMaximumTolerance
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithMaximumTolerance_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeometricToleranceWithMaximumTolerance
RWStepDimTol_RWGeometricToleranceWithMaximumTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithMaximumTolerance_swigregister
RWStepDimTol_RWGeometricToleranceWithMaximumTolerance_swigregister(RWStepDimTol_RWGeometricToleranceWithMaximumTolerance)

class RWStepDimTol_RWToleranceZoneDefinition(object):
    """Read & Write tool for ToleranceZoneDefinition"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWToleranceZoneDefinition self) -> RWStepDimTol_RWToleranceZoneDefinition

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWToleranceZoneDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWToleranceZoneDefinition self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_ToleranceZoneDefinition ent)

        Reads ToleranceZoneDefinition

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition

        """
        return _RWStepDimTol.RWStepDimTol_RWToleranceZoneDefinition_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWToleranceZoneDefinition self, StepData_StepWriter SW, Handle_StepDimTol_ToleranceZoneDefinition ent)

        Writes ToleranceZoneDefinition

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition

        """
        return _RWStepDimTol.RWStepDimTol_RWToleranceZoneDefinition_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWToleranceZoneDefinition self, Handle_StepDimTol_ToleranceZoneDefinition ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZoneDefinition
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWToleranceZoneDefinition_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWToleranceZoneDefinition
RWStepDimTol_RWToleranceZoneDefinition_swigregister = _RWStepDimTol.RWStepDimTol_RWToleranceZoneDefinition_swigregister
RWStepDimTol_RWToleranceZoneDefinition_swigregister(RWStepDimTol_RWToleranceZoneDefinition)

class RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol(object):
    """Read & Write Module for GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self) -> RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol

        Read & Write Module for GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol
        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self, StepData_StepWriter SW, Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol self, Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol
RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_swigregister = _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_swigregister
RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol_swigregister(RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndGeoTolWthMaxTol)

class RWStepDimTol_RWSymmetryTolerance(object):
    """Read & Write tool for SymmetryTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWSymmetryTolerance self) -> RWStepDimTol_RWSymmetryTolerance

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWSymmetryTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWSymmetryTolerance self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_SymmetryTolerance ent)

        Reads SymmetryTolerance

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_SymmetryTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWSymmetryTolerance_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWSymmetryTolerance self, StepData_StepWriter SW, Handle_StepDimTol_SymmetryTolerance ent)

        Writes SymmetryTolerance

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_SymmetryTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWSymmetryTolerance_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWSymmetryTolerance self, Handle_StepDimTol_SymmetryTolerance ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_SymmetryTolerance
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWSymmetryTolerance_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWSymmetryTolerance
RWStepDimTol_RWSymmetryTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWSymmetryTolerance_swigregister
RWStepDimTol_RWSymmetryTolerance_swigregister(RWStepDimTol_RWSymmetryTolerance)

class RWStepDimTol_RWConcentricityTolerance(object):
    """Read & Write tool for ConcentricityTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWConcentricityTolerance self) -> RWStepDimTol_RWConcentricityTolerance

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWConcentricityTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWConcentricityTolerance self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_ConcentricityTolerance ent)

        Reads ConcentricityTolerance

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_ConcentricityTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWConcentricityTolerance_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWConcentricityTolerance self, StepData_StepWriter SW, Handle_StepDimTol_ConcentricityTolerance ent)

        Writes ConcentricityTolerance

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_ConcentricityTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWConcentricityTolerance_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWConcentricityTolerance self, Handle_StepDimTol_ConcentricityTolerance ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_ConcentricityTolerance
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWConcentricityTolerance_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWConcentricityTolerance
RWStepDimTol_RWConcentricityTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWConcentricityTolerance_swigregister
RWStepDimTol_RWConcentricityTolerance_swigregister(RWStepDimTol_RWConcentricityTolerance)

class RWStepDimTol_RWDatumReferenceElement(object):
    """Read & Write tool for DatumReferenceElement"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWDatumReferenceElement self) -> RWStepDimTol_RWDatumReferenceElement

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWDatumReferenceElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWDatumReferenceElement self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_DatumReferenceElement ent)

        Reads DatumReferenceElement

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_DatumReferenceElement

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumReferenceElement_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWDatumReferenceElement self, StepData_StepWriter SW, Handle_StepDimTol_DatumReferenceElement ent)

        Writes DatumReferenceElement

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_DatumReferenceElement

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumReferenceElement_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWDatumReferenceElement self, Handle_StepDimTol_DatumReferenceElement ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_DatumReferenceElement
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumReferenceElement_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWDatumReferenceElement
RWStepDimTol_RWDatumReferenceElement_swigregister = _RWStepDimTol.RWStepDimTol_RWDatumReferenceElement_swigregister
RWStepDimTol_RWDatumReferenceElement_swigregister(RWStepDimTol_RWDatumReferenceElement)

class RWStepDimTol_RWSurfaceProfileTolerance(object):
    """Read & Write tool for SurfaceProfileTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWSurfaceProfileTolerance self) -> RWStepDimTol_RWSurfaceProfileTolerance

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWSurfaceProfileTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWSurfaceProfileTolerance self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_SurfaceProfileTolerance ent)

        Reads SurfaceProfileTolerance

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWSurfaceProfileTolerance_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWSurfaceProfileTolerance self, StepData_StepWriter SW, Handle_StepDimTol_SurfaceProfileTolerance ent)

        Writes SurfaceProfileTolerance

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWSurfaceProfileTolerance_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWSurfaceProfileTolerance self, Handle_StepDimTol_SurfaceProfileTolerance ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_SurfaceProfileTolerance
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWSurfaceProfileTolerance_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWSurfaceProfileTolerance
RWStepDimTol_RWSurfaceProfileTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWSurfaceProfileTolerance_swigregister
RWStepDimTol_RWSurfaceProfileTolerance_swigregister(RWStepDimTol_RWSurfaceProfileTolerance)

class RWStepDimTol_RWModifiedGeometricTolerance(object):
    """Read & Write tool for ModifiedGeometricTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWModifiedGeometricTolerance self) -> RWStepDimTol_RWModifiedGeometricTolerance

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWModifiedGeometricTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWModifiedGeometricTolerance self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_ModifiedGeometricTolerance ent)

        Reads ModifiedGeometricTolerance

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWModifiedGeometricTolerance_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWModifiedGeometricTolerance self, StepData_StepWriter SW, Handle_StepDimTol_ModifiedGeometricTolerance ent)

        Writes ModifiedGeometricTolerance

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWModifiedGeometricTolerance_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWModifiedGeometricTolerance self, Handle_StepDimTol_ModifiedGeometricTolerance ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_ModifiedGeometricTolerance
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWModifiedGeometricTolerance_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWModifiedGeometricTolerance
RWStepDimTol_RWModifiedGeometricTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWModifiedGeometricTolerance_swigregister
RWStepDimTol_RWModifiedGeometricTolerance_swigregister(RWStepDimTol_RWModifiedGeometricTolerance)

class RWStepDimTol_RWDatum(object):
    """Read & Write tool for Datum"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWDatum self) -> RWStepDimTol_RWDatum

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWDatum(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWDatum self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_Datum ent)

        Reads Datum

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_Datum

        """
        return _RWStepDimTol.RWStepDimTol_RWDatum_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWDatum self, StepData_StepWriter SW, Handle_StepDimTol_Datum ent)

        Writes Datum

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_Datum

        """
        return _RWStepDimTol.RWStepDimTol_RWDatum_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWDatum self, Handle_StepDimTol_Datum ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_Datum
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWDatum_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWDatum
RWStepDimTol_RWDatum_swigregister = _RWStepDimTol.RWStepDimTol_RWDatum_swigregister
RWStepDimTol_RWDatum_swigregister(RWStepDimTol_RWDatum)

class RWStepDimTol_RWDatumReferenceModifierWithValue(object):
    """Read & Write tool for DatumReferenceModifierWithValue"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWDatumReferenceModifierWithValue self) -> RWStepDimTol_RWDatumReferenceModifierWithValue

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWDatumReferenceModifierWithValue(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWDatumReferenceModifierWithValue self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_DatumReferenceModifierWithValue ent)

        Reads DatumReferenceModifierWithValue

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumReferenceModifierWithValue_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWDatumReferenceModifierWithValue self, StepData_StepWriter SW, Handle_StepDimTol_DatumReferenceModifierWithValue ent)

        Writes DatumReferenceModifierWithValue

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_DatumReferenceModifierWithValue

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumReferenceModifierWithValue_WriteStep(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWDatumReferenceModifierWithValue
RWStepDimTol_RWDatumReferenceModifierWithValue_swigregister = _RWStepDimTol.RWStepDimTol_RWDatumReferenceModifierWithValue_swigregister
RWStepDimTol_RWDatumReferenceModifierWithValue_swigregister(RWStepDimTol_RWDatumReferenceModifierWithValue)

class RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol(object):
    """Read & Write Module for GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self) -> RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol

        Read & Write Module for GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol
        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self, StepData_StepWriter SW, Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol self, Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndUneqDisGeoTol
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol
RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_swigregister = _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_swigregister
RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol_swigregister(RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndUneqDisGeoTol)

class RWStepDimTol_RWPositionTolerance(object):
    """Read & Write tool for PositionTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWPositionTolerance self) -> RWStepDimTol_RWPositionTolerance

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWPositionTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWPositionTolerance self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_PositionTolerance ent)

        Reads PositionTolerance

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_PositionTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWPositionTolerance_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWPositionTolerance self, StepData_StepWriter SW, Handle_StepDimTol_PositionTolerance ent)

        Writes PositionTolerance

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_PositionTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWPositionTolerance_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWPositionTolerance self, Handle_StepDimTol_PositionTolerance ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_PositionTolerance
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWPositionTolerance_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWPositionTolerance
RWStepDimTol_RWPositionTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWPositionTolerance_swigregister
RWStepDimTol_RWPositionTolerance_swigregister(RWStepDimTol_RWPositionTolerance)

class RWStepDimTol_RWToleranceZoneForm(object):
    """Read & Write tool for ToleranceZoneForm"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWToleranceZoneForm self) -> RWStepDimTol_RWToleranceZoneForm

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWToleranceZoneForm(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWToleranceZoneForm self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_ToleranceZoneForm ent)

        Reads ToleranceZoneForm

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZoneForm

        """
        return _RWStepDimTol.RWStepDimTol_RWToleranceZoneForm_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWToleranceZoneForm self, StepData_StepWriter SW, Handle_StepDimTol_ToleranceZoneForm ent)

        Writes ToleranceZoneForm

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_ToleranceZoneForm

        """
        return _RWStepDimTol.RWStepDimTol_RWToleranceZoneForm_WriteStep(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWToleranceZoneForm
RWStepDimTol_RWToleranceZoneForm_swigregister = _RWStepDimTol.RWStepDimTol_RWToleranceZoneForm_swigregister
RWStepDimTol_RWToleranceZoneForm_swigregister(RWStepDimTol_RWToleranceZoneForm)

class RWStepDimTol_RWCircularRunoutTolerance(object):
    """Read & Write tool for CircularRunoutTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWCircularRunoutTolerance self) -> RWStepDimTol_RWCircularRunoutTolerance

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWCircularRunoutTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWCircularRunoutTolerance self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_CircularRunoutTolerance ent)

        Reads CircularRunoutTolerance

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_CircularRunoutTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWCircularRunoutTolerance_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWCircularRunoutTolerance self, StepData_StepWriter SW, Handle_StepDimTol_CircularRunoutTolerance ent)

        Writes CircularRunoutTolerance

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_CircularRunoutTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWCircularRunoutTolerance_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWCircularRunoutTolerance self, Handle_StepDimTol_CircularRunoutTolerance ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_CircularRunoutTolerance
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWCircularRunoutTolerance_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWCircularRunoutTolerance
RWStepDimTol_RWCircularRunoutTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWCircularRunoutTolerance_swigregister
RWStepDimTol_RWCircularRunoutTolerance_swigregister(RWStepDimTol_RWCircularRunoutTolerance)

class RWStepDimTol_RWGeoTolAndGeoTolWthDatRef(object):
    """Read & Write Module for GeoTolAndGeoTolWthDatRef"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWGeoTolAndGeoTolWthDatRef self) -> RWStepDimTol_RWGeoTolAndGeoTolWthDatRef

        Read & Write Module for GeoTolAndGeoTolWthDatRef
        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeoTolAndGeoTolWthDatRef(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWGeoTolAndGeoTolWthDatRef self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_GeoTolAndGeoTolWthDatRef ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRef_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWGeoTolAndGeoTolWthDatRef self, StepData_StepWriter SW, Handle_StepDimTol_GeoTolAndGeoTolWthDatRef ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRef_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWGeoTolAndGeoTolWthDatRef self, Handle_StepDimTol_GeoTolAndGeoTolWthDatRef ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRef
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRef_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeoTolAndGeoTolWthDatRef
RWStepDimTol_RWGeoTolAndGeoTolWthDatRef_swigregister = _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRef_swigregister
RWStepDimTol_RWGeoTolAndGeoTolWthDatRef_swigregister(RWStepDimTol_RWGeoTolAndGeoTolWthDatRef)

class RWStepDimTol_RWDatumReferenceCompartment(object):
    """Read & Write tool for DatumReferenceElement"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWDatumReferenceCompartment self) -> RWStepDimTol_RWDatumReferenceCompartment

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWDatumReferenceCompartment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWDatumReferenceCompartment self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_DatumReferenceCompartment ent)

        Reads DatumReferenceElement

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_DatumReferenceCompartment

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumReferenceCompartment_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWDatumReferenceCompartment self, StepData_StepWriter SW, Handle_StepDimTol_DatumReferenceCompartment ent)

        Writes DatumReferenceElement

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_DatumReferenceCompartment

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumReferenceCompartment_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWDatumReferenceCompartment self, Handle_StepDimTol_DatumReferenceCompartment ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_DatumReferenceCompartment
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumReferenceCompartment_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWDatumReferenceCompartment
RWStepDimTol_RWDatumReferenceCompartment_swigregister = _RWStepDimTol.RWStepDimTol_RWDatumReferenceCompartment_swigregister
RWStepDimTol_RWDatumReferenceCompartment_swigregister(RWStepDimTol_RWDatumReferenceCompartment)

class RWStepDimTol_RWFlatnessTolerance(object):
    """Read & Write tool for FlatnessTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWFlatnessTolerance self) -> RWStepDimTol_RWFlatnessTolerance

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWFlatnessTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWFlatnessTolerance self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_FlatnessTolerance ent)

        Reads FlatnessTolerance

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_FlatnessTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWFlatnessTolerance_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWFlatnessTolerance self, StepData_StepWriter SW, Handle_StepDimTol_FlatnessTolerance ent)

        Writes FlatnessTolerance

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_FlatnessTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWFlatnessTolerance_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWFlatnessTolerance self, Handle_StepDimTol_FlatnessTolerance ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_FlatnessTolerance
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWFlatnessTolerance_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWFlatnessTolerance
RWStepDimTol_RWFlatnessTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWFlatnessTolerance_swigregister
RWStepDimTol_RWFlatnessTolerance_swigregister(RWStepDimTol_RWFlatnessTolerance)

class RWStepDimTol_RWStraightnessTolerance(object):
    """Read & Write tool for StraightnessTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWStraightnessTolerance self) -> RWStepDimTol_RWStraightnessTolerance

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWStraightnessTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWStraightnessTolerance self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_StraightnessTolerance ent)

        Reads StraightnessTolerance

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_StraightnessTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWStraightnessTolerance_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWStraightnessTolerance self, StepData_StepWriter SW, Handle_StepDimTol_StraightnessTolerance ent)

        Writes StraightnessTolerance

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_StraightnessTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWStraightnessTolerance_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWStraightnessTolerance self, Handle_StepDimTol_StraightnessTolerance ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_StraightnessTolerance
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWStraightnessTolerance_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWStraightnessTolerance
RWStepDimTol_RWStraightnessTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWStraightnessTolerance_swigregister
RWStepDimTol_RWStraightnessTolerance_swigregister(RWStepDimTol_RWStraightnessTolerance)

class RWStepDimTol_RWDatumReference(object):
    """Read & Write tool for DatumReference"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWDatumReference self) -> RWStepDimTol_RWDatumReference

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWDatumReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWDatumReference self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_DatumReference ent)

        Reads DatumReference

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_DatumReference

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumReference_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWDatumReference self, StepData_StepWriter SW, Handle_StepDimTol_DatumReference ent)

        Writes DatumReference

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_DatumReference

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumReference_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWDatumReference self, Handle_StepDimTol_DatumReference ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_DatumReference
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWDatumReference_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWDatumReference
RWStepDimTol_RWDatumReference_swigregister = _RWStepDimTol.RWStepDimTol_RWDatumReference_swigregister
RWStepDimTol_RWDatumReference_swigregister(RWStepDimTol_RWDatumReference)

class RWStepDimTol_RWRunoutZoneDefinition(object):
    """Read & Write tool for RunoutZoneDefinition"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWRunoutZoneDefinition self) -> RWStepDimTol_RWRunoutZoneDefinition

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWRunoutZoneDefinition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWRunoutZoneDefinition self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_RunoutZoneDefinition ent)

        Reads RunoutZoneDefinition

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_RunoutZoneDefinition

        """
        return _RWStepDimTol.RWStepDimTol_RWRunoutZoneDefinition_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWRunoutZoneDefinition self, StepData_StepWriter SW, Handle_StepDimTol_RunoutZoneDefinition ent)

        Writes RunoutZoneDefinition

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_RunoutZoneDefinition

        """
        return _RWStepDimTol.RWStepDimTol_RWRunoutZoneDefinition_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWRunoutZoneDefinition self, Handle_StepDimTol_RunoutZoneDefinition ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_RunoutZoneDefinition
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWRunoutZoneDefinition_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWRunoutZoneDefinition
RWStepDimTol_RWRunoutZoneDefinition_swigregister = _RWStepDimTol.RWStepDimTol_RWRunoutZoneDefinition_swigregister
RWStepDimTol_RWRunoutZoneDefinition_swigregister(RWStepDimTol_RWRunoutZoneDefinition)

class RWStepDimTol_RWGeometricToleranceWithDatumReference(object):
    """Read & Write tool for GeometricToleranceWithDatumReference"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWGeometricToleranceWithDatumReference self) -> RWStepDimTol_RWGeometricToleranceWithDatumReference

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeometricToleranceWithDatumReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWGeometricToleranceWithDatumReference self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_GeometricToleranceWithDatumReference ent)

        Reads GeometricToleranceWithDatumReference

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithDatumReference_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWGeometricToleranceWithDatumReference self, StepData_StepWriter SW, Handle_StepDimTol_GeometricToleranceWithDatumReference ent)

        Writes GeometricToleranceWithDatumReference

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithDatumReference_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWGeometricToleranceWithDatumReference self, Handle_StepDimTol_GeometricToleranceWithDatumReference ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDatumReference
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithDatumReference_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeometricToleranceWithDatumReference
RWStepDimTol_RWGeometricToleranceWithDatumReference_swigregister = _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithDatumReference_swigregister
RWStepDimTol_RWGeometricToleranceWithDatumReference_swigregister(RWStepDimTol_RWGeometricToleranceWithDatumReference)

class RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol(object):
    """Read & Write Module for ReprItemAndLengthMeasureWithUni"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self) -> RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol

        Read & Write Module for ReprItemAndLengthMeasureWithUni
        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol ent)

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, StepData_StepWriter SW, Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol ent)

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol self, Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol ent, Interface_EntityIterator iter)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol
RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_swigregister = _RWStepDimTol.RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_swigregister
RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol_swigregister(RWStepDimTol_RWGeoTolAndGeoTolWthDatRefAndModGeoTolAndPosTol)

class RWStepDimTol_RWGeometricToleranceWithDefinedUnit(object):
    """Read & Write tool for GeometricToleranceWithDefinedUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWGeometricToleranceWithDefinedUnit self) -> RWStepDimTol_RWGeometricToleranceWithDefinedUnit

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeometricToleranceWithDefinedUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWGeometricToleranceWithDefinedUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_GeometricToleranceWithDefinedUnit ent)

        Reads GeometricToleranceWithDefinedUnit

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithDefinedUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWGeometricToleranceWithDefinedUnit self, StepData_StepWriter SW, Handle_StepDimTol_GeometricToleranceWithDefinedUnit ent)

        Writes GeometricToleranceWithDefinedUnit

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithDefinedUnit_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWGeometricToleranceWithDefinedUnit self, Handle_StepDimTol_GeometricToleranceWithDefinedUnit ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedUnit
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithDefinedUnit_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeometricToleranceWithDefinedUnit
RWStepDimTol_RWGeometricToleranceWithDefinedUnit_swigregister = _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithDefinedUnit_swigregister
RWStepDimTol_RWGeometricToleranceWithDefinedUnit_swigregister(RWStepDimTol_RWGeometricToleranceWithDefinedUnit)

class RWStepDimTol_RWUnequallyDisposedGeometricTolerance(object):
    """Read & Write tool for UnequallyDisposedGeometricTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWUnequallyDisposedGeometricTolerance self) -> RWStepDimTol_RWUnequallyDisposedGeometricTolerance

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWUnequallyDisposedGeometricTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWUnequallyDisposedGeometricTolerance self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_UnequallyDisposedGeometricTolerance ent)

        Reads UnequallyDisposedGeometricTolerance

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWUnequallyDisposedGeometricTolerance_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWUnequallyDisposedGeometricTolerance self, StepData_StepWriter SW, Handle_StepDimTol_UnequallyDisposedGeometricTolerance ent)

        Writes UnequallyDisposedGeometricTolerance

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWUnequallyDisposedGeometricTolerance_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWUnequallyDisposedGeometricTolerance self, Handle_StepDimTol_UnequallyDisposedGeometricTolerance ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_UnequallyDisposedGeometricTolerance
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWUnequallyDisposedGeometricTolerance_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWUnequallyDisposedGeometricTolerance
RWStepDimTol_RWUnequallyDisposedGeometricTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWUnequallyDisposedGeometricTolerance_swigregister
RWStepDimTol_RWUnequallyDisposedGeometricTolerance_swigregister(RWStepDimTol_RWUnequallyDisposedGeometricTolerance)

class RWStepDimTol_RWPlacedDatumTargetFeature(object):
    """Read & Write tool for PlacedDatumTargetFeature"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWPlacedDatumTargetFeature self) -> RWStepDimTol_RWPlacedDatumTargetFeature

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWPlacedDatumTargetFeature(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWPlacedDatumTargetFeature self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_PlacedDatumTargetFeature ent)

        Reads PlacedDatumTargetFeature

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature

        """
        return _RWStepDimTol.RWStepDimTol_RWPlacedDatumTargetFeature_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWPlacedDatumTargetFeature self, StepData_StepWriter SW, Handle_StepDimTol_PlacedDatumTargetFeature ent)

        Writes PlacedDatumTargetFeature

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature

        """
        return _RWStepDimTol.RWStepDimTol_RWPlacedDatumTargetFeature_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWPlacedDatumTargetFeature self, Handle_StepDimTol_PlacedDatumTargetFeature ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_PlacedDatumTargetFeature
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWPlacedDatumTargetFeature_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWPlacedDatumTargetFeature
RWStepDimTol_RWPlacedDatumTargetFeature_swigregister = _RWStepDimTol.RWStepDimTol_RWPlacedDatumTargetFeature_swigregister
RWStepDimTol_RWPlacedDatumTargetFeature_swigregister(RWStepDimTol_RWPlacedDatumTargetFeature)

class RWStepDimTol_RWRoundnessTolerance(object):
    """Read & Write tool for RoundnessTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWRoundnessTolerance self) -> RWStepDimTol_RWRoundnessTolerance

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWRoundnessTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWRoundnessTolerance self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_RoundnessTolerance ent)

        Reads RoundnessTolerance

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_RoundnessTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWRoundnessTolerance_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWRoundnessTolerance self, StepData_StepWriter SW, Handle_StepDimTol_RoundnessTolerance ent)

        Writes RoundnessTolerance

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_RoundnessTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWRoundnessTolerance_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWRoundnessTolerance self, Handle_StepDimTol_RoundnessTolerance ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_RoundnessTolerance
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWRoundnessTolerance_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWRoundnessTolerance
RWStepDimTol_RWRoundnessTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWRoundnessTolerance_swigregister
RWStepDimTol_RWRoundnessTolerance_swigregister(RWStepDimTol_RWRoundnessTolerance)

class RWStepDimTol_RWAngularityTolerance(object):
    """Read & Write tool for AngularityTolerance"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWAngularityTolerance self) -> RWStepDimTol_RWAngularityTolerance

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWAngularityTolerance(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWAngularityTolerance self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_AngularityTolerance ent)

        Reads AngularityTolerance

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_AngularityTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWAngularityTolerance_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWAngularityTolerance self, StepData_StepWriter SW, Handle_StepDimTol_AngularityTolerance ent)

        Writes AngularityTolerance

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_AngularityTolerance

        """
        return _RWStepDimTol.RWStepDimTol_RWAngularityTolerance_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWAngularityTolerance self, Handle_StepDimTol_AngularityTolerance ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_AngularityTolerance
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWAngularityTolerance_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWAngularityTolerance
RWStepDimTol_RWAngularityTolerance_swigregister = _RWStepDimTol.RWStepDimTol_RWAngularityTolerance_swigregister
RWStepDimTol_RWAngularityTolerance_swigregister(RWStepDimTol_RWAngularityTolerance)

class RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit(object):
    """Read & Write tool for GeometricToleranceWithDefinedAreaUnit"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit self) -> RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit

        Empty constructor


        """
        this = _RWStepDimTol.new_RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ReadStep(self, *args):
        """
        ReadStep(RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit self, Handle_StepData_StepReaderData data, Standard_Integer const num, Handle_Interface_Check ach, Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit ent)

        Reads GeometricToleranceWithDefinedAreaUnit

        :type data: OCC.wrapper.StepData.Handle_StepData_StepReaderData
        :type num: int
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit_ReadStep(self, *args)


    def WriteStep(self, *args):
        """
        WriteStep(RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit self, StepData_StepWriter SW, Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit ent)

        Writes GeometricToleranceWithDefinedAreaUnit

        :type SW: OCC.wrapper.StepData.StepData_StepWriter
        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit_WriteStep(self, *args)


    def Share(self, *args):
        """
        Share(RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit self, Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit ent, Interface_EntityIterator iter)

        Fills data for graph (shared items)

        :type ent: OCC.wrapper.StepDimTol.Handle_StepDimTol_GeometricToleranceWithDefinedAreaUnit
        :type iter: OCC.wrapper.Interface.Interface_EntityIterator

        """
        return _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit_Share(self, *args)

    __swig_destroy__ = _RWStepDimTol.delete_RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit
RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit_swigregister = _RWStepDimTol.RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit_swigregister
RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit_swigregister(RWStepDimTol_RWGeometricToleranceWithDefinedAreaUnit)



