# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TransferBRep')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TransferBRep')
    _TransferBRep = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TransferBRep', [dirname(__file__)])
        except ImportError:
            import _TransferBRep
            return _TransferBRep
        try:
            _mod = imp.load_module('_TransferBRep', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TransferBRep = swig_import_helper()
    del swig_import_helper
else:
    import _TransferBRep
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TransferBRep.delete_SwigPyIterator

    def value(self):
        return _TransferBRep.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TransferBRep.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TransferBRep.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TransferBRep.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TransferBRep.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TransferBRep.SwigPyIterator_copy(self)

    def next(self):
        return _TransferBRep.SwigPyIterator_next(self)

    def __next__(self):
        return _TransferBRep.SwigPyIterator___next__(self)

    def previous(self):
        return _TransferBRep.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TransferBRep.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TransferBRep.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TransferBRep.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TransferBRep.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TransferBRep.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TransferBRep.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TransferBRep.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _TransferBRep.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TransferBRep.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_TransferBRep.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _TransferBRep.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TransferBRep.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TransferBRep.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _TransferBRep.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _TransferBRep.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _TransferBRep.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TransferBRep.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_TransferBRep.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _TransferBRep.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TransferBRep.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TransferBRep.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _TransferBRep.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _TransferBRep.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _TransferBRep.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _TransferBRep.ptr_to_number(item)
ptr_to_number = _TransferBRep.ptr_to_number

def HashCode(*args):
    return _TransferBRep.HashCode(*args)
HashCode = _TransferBRep.HashCode

def ptr_equal(a, b):
    return _TransferBRep.ptr_equal(a, b)
ptr_equal = _TransferBRep.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Transfer
else:
    import Transfer
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
class TransferBRep_HSequenceOfTransferResultInfo(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TransferBRep_HSequenceOfTransferResultInfo
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TransferBRep_HSequenceOfTransferResultInfo(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TransferBRep_HSequenceOfTransferResultInfo self) -> TransferBRep_HSequenceOfTransferResultInfo
        __init__(TransferBRep_HSequenceOfTransferResultInfo self, NCollection_Sequence_Handle_TransferBRep_TransferResultInfo theOther) -> TransferBRep_HSequenceOfTransferResultInfo

        :type theOther: OCC.wrapper.TransferBRep.TransferBRep_SequenceOfTransferResultInfo

        """
        this = _TransferBRep.new_TransferBRep_HSequenceOfTransferResultInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.TransferBRep.TransferBRep_SequenceOfTransferResultInfo

        """
        res = _TransferBRep.TransferBRep_HSequenceOfTransferResultInfo_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(TransferBRep_HSequenceOfTransferResultInfo self, Handle_TransferBRep_TransferResultInfo theItem)
        Append(TransferBRep_HSequenceOfTransferResultInfo self, NCollection_Sequence_Handle_TransferBRep_TransferResultInfo theSequence)

        :type theSequence: OCC.wrapper.TransferBRep.TransferBRep_SequenceOfTransferResultInfo

        """
        return _TransferBRep.TransferBRep_HSequenceOfTransferResultInfo_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(TransferBRep_HSequenceOfTransferResultInfo self) -> NCollection_Sequence_Handle_TransferBRep_TransferResultInfo

        :rtype: OCC.wrapper.TransferBRep.TransferBRep_SequenceOfTransferResultInfo

        """
        return _TransferBRep.TransferBRep_HSequenceOfTransferResultInfo_ChangeSequence(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TransferBRep.TransferBRep_HSequenceOfTransferResultInfo_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TransferBRep.TransferBRep_HSequenceOfTransferResultInfo_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TransferBRep.TransferBRep_HSequenceOfTransferResultInfo_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TransferBRep.delete_TransferBRep_HSequenceOfTransferResultInfo
TransferBRep_HSequenceOfTransferResultInfo_swigregister = _TransferBRep.TransferBRep_HSequenceOfTransferResultInfo_swigregister
TransferBRep_HSequenceOfTransferResultInfo_swigregister(TransferBRep_HSequenceOfTransferResultInfo)

def TransferBRep_HSequenceOfTransferResultInfo_get_type_name(*args):
    """
    TransferBRep_HSequenceOfTransferResultInfo_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TransferBRep.TransferBRep_HSequenceOfTransferResultInfo_get_type_name(*args)

def TransferBRep_HSequenceOfTransferResultInfo_get_type_descriptor(*args):
    """
    TransferBRep_HSequenceOfTransferResultInfo_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TransferBRep.TransferBRep_HSequenceOfTransferResultInfo_get_type_descriptor(*args)

class TransferBRep_TransferResultInfo(Standard.Standard_Transient):
    """
    Data structure for storing information on transfer result.
    At the moment it dispatches information for the following types:
    - result,
    - result + warning(s),
    - result + fail(s),
    - result + warning(s) + fail(s)
    - no result,
    - no result + warning(s),
    - no result + fail(s),
    - no result + warning(s) + fail(s),
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TransferBRep_TransferResultInfo
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TransferBRep_TransferResultInfo(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TransferBRep_TransferResultInfo self) -> TransferBRep_TransferResultInfo

        Creates object with all fields nullified.


        """
        this = _TransferBRep.new_TransferBRep_TransferResultInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Clear(self, *args):
        """
        Clear(TransferBRep_TransferResultInfo self)

        Resets all the fields.


        """
        return _TransferBRep.TransferBRep_TransferResultInfo_Clear(self, *args)


    def Result(self, *args):
        """
        Result(TransferBRep_TransferResultInfo self) -> Standard_Integer &

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.TransferBRep_TransferResultInfo_Result(self, *args)


    def ResultWarning(self, *args):
        """
        ResultWarning(TransferBRep_TransferResultInfo self) -> Standard_Integer &

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.TransferBRep_TransferResultInfo_ResultWarning(self, *args)


    def ResultFail(self, *args):
        """
        ResultFail(TransferBRep_TransferResultInfo self) -> Standard_Integer &

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.TransferBRep_TransferResultInfo_ResultFail(self, *args)


    def ResultWarningFail(self, *args):
        """
        ResultWarningFail(TransferBRep_TransferResultInfo self) -> Standard_Integer &

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.TransferBRep_TransferResultInfo_ResultWarningFail(self, *args)


    def NoResult(self, *args):
        """
        NoResult(TransferBRep_TransferResultInfo self) -> Standard_Integer &

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.TransferBRep_TransferResultInfo_NoResult(self, *args)


    def NoResultWarning(self, *args):
        """
        NoResultWarning(TransferBRep_TransferResultInfo self) -> Standard_Integer &

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.TransferBRep_TransferResultInfo_NoResultWarning(self, *args)


    def NoResultFail(self, *args):
        """
        NoResultFail(TransferBRep_TransferResultInfo self) -> Standard_Integer &

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.TransferBRep_TransferResultInfo_NoResultFail(self, *args)


    def NoResultWarningFail(self, *args):
        """
        NoResultWarningFail(TransferBRep_TransferResultInfo self) -> Standard_Integer &

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.TransferBRep_TransferResultInfo_NoResultWarningFail(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TransferBRep.TransferBRep_TransferResultInfo_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TransferBRep.TransferBRep_TransferResultInfo_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TransferBRep.TransferBRep_TransferResultInfo_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TransferBRep.delete_TransferBRep_TransferResultInfo
TransferBRep_TransferResultInfo_swigregister = _TransferBRep.TransferBRep_TransferResultInfo_swigregister
TransferBRep_TransferResultInfo_swigregister(TransferBRep_TransferResultInfo)

def TransferBRep_TransferResultInfo_get_type_name(*args):
    """
    TransferBRep_TransferResultInfo_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TransferBRep.TransferBRep_TransferResultInfo_get_type_name(*args)

def TransferBRep_TransferResultInfo_get_type_descriptor(*args):
    """
    TransferBRep_TransferResultInfo_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TransferBRep.TransferBRep_TransferResultInfo_get_type_descriptor(*args)

class TransferBRep_ShapeListBinder(Transfer.Transfer_Binder):
    """
    This binder binds several (a list of) shapes with a starting
    entity, when this entity itself corresponds to a simple list
    of shapes. Each part is not seen as a sub-result of an
    independant componant, but as an item of a built-in list
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TransferBRep_ShapeListBinder
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TransferBRep_ShapeListBinder(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TransferBRep_ShapeListBinder self) -> TransferBRep_ShapeListBinder
        __init__(TransferBRep_ShapeListBinder self, Handle_TopTools_HSequenceOfShape list) -> TransferBRep_ShapeListBinder

        :type list: OCC.wrapper.TopTools.Handle_TopTools_HSequenceOfShape

        """
        this = _TransferBRep.new_TransferBRep_ShapeListBinder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def IsMultiple(self, *args):
        """
        IsMultiple(TransferBRep_ShapeListBinder self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.TransferBRep_ShapeListBinder_IsMultiple(self, *args)


    def ResultType(self, *args):
        """
        ResultType(TransferBRep_ShapeListBinder self) -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TransferBRep.TransferBRep_ShapeListBinder_ResultType(self, *args)


    def ResultTypeName(self, *args):
        """
        ResultTypeName(TransferBRep_ShapeListBinder self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _TransferBRep.TransferBRep_ShapeListBinder_ResultTypeName(self, *args)


    def AddResult(self, *args):
        """
        AddResult(TransferBRep_ShapeListBinder self, TopoDS_Shape res)

        Adds an item to the result list

        :type res: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TransferBRep.TransferBRep_ShapeListBinder_AddResult(self, *args)


    def Result(self, *args):
        """
        Result(TransferBRep_ShapeListBinder self) -> Handle_TopTools_HSequenceOfShape

        :rtype: OCC.wrapper.TopTools.Handle_TopTools_HSequenceOfShape

        """
        return _TransferBRep.TransferBRep_ShapeListBinder_Result(self, *args)


    def SetResult(self, *args):
        """
        SetResult(TransferBRep_ShapeListBinder self, Standard_Integer const num, TopoDS_Shape res)

        Changes an already defined sub-result

        :type num: int
        :type res: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TransferBRep.TransferBRep_ShapeListBinder_SetResult(self, *args)


    def NbShapes(self, *args):
        """
        NbShapes(TransferBRep_ShapeListBinder self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.TransferBRep_ShapeListBinder_NbShapes(self, *args)


    def Shape(self, *args):
        """
        :type num: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TransferBRep.TransferBRep_ShapeListBinder_Shape(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ShapeType(self, *args):
        """
        ShapeType(TransferBRep_ShapeListBinder self, Standard_Integer const num) -> TopAbs_ShapeEnum

        :type num: int
        :rtype: OCC.wrapper.TopAbs.TopAbs_ShapeEnum

        """
        return _TransferBRep.TransferBRep_ShapeListBinder_ShapeType(self, *args)


    def Vertex(self, *args):
        """
        Vertex(TransferBRep_ShapeListBinder self, Standard_Integer const num) -> TopoDS_Vertex

        :type num: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _TransferBRep.TransferBRep_ShapeListBinder_Vertex(self, *args)


    def Edge(self, *args):
        """
        Edge(TransferBRep_ShapeListBinder self, Standard_Integer const num) -> TopoDS_Edge

        :type num: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _TransferBRep.TransferBRep_ShapeListBinder_Edge(self, *args)


    def Wire(self, *args):
        """
        Wire(TransferBRep_ShapeListBinder self, Standard_Integer const num) -> TopoDS_Wire

        :type num: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Wire

        """
        return _TransferBRep.TransferBRep_ShapeListBinder_Wire(self, *args)


    def Face(self, *args):
        """
        Face(TransferBRep_ShapeListBinder self, Standard_Integer const num) -> TopoDS_Face

        :type num: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _TransferBRep.TransferBRep_ShapeListBinder_Face(self, *args)


    def Shell(self, *args):
        """
        Shell(TransferBRep_ShapeListBinder self, Standard_Integer const num) -> TopoDS_Shell

        :type num: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shell

        """
        return _TransferBRep.TransferBRep_ShapeListBinder_Shell(self, *args)


    def Solid(self, *args):
        """
        Solid(TransferBRep_ShapeListBinder self, Standard_Integer const num) -> TopoDS_Solid

        :type num: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Solid

        """
        return _TransferBRep.TransferBRep_ShapeListBinder_Solid(self, *args)


    def CompSolid(self, *args):
        """
        CompSolid(TransferBRep_ShapeListBinder self, Standard_Integer const num) -> TopoDS_CompSolid

        :type num: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_CompSolid

        """
        return _TransferBRep.TransferBRep_ShapeListBinder_CompSolid(self, *args)


    def Compound(self, *args):
        """
        Compound(TransferBRep_ShapeListBinder self, Standard_Integer const num) -> TopoDS_Compound

        :type num: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Compound

        """
        return _TransferBRep.TransferBRep_ShapeListBinder_Compound(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TransferBRep.TransferBRep_ShapeListBinder_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TransferBRep.TransferBRep_ShapeListBinder_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TransferBRep.TransferBRep_ShapeListBinder_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TransferBRep.delete_TransferBRep_ShapeListBinder
TransferBRep_ShapeListBinder_swigregister = _TransferBRep.TransferBRep_ShapeListBinder_swigregister
TransferBRep_ShapeListBinder_swigregister(TransferBRep_ShapeListBinder)

def TransferBRep_ShapeListBinder_get_type_name(*args):
    """
    TransferBRep_ShapeListBinder_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TransferBRep.TransferBRep_ShapeListBinder_get_type_name(*args)

def TransferBRep_ShapeListBinder_get_type_descriptor(*args):
    """
    TransferBRep_ShapeListBinder_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TransferBRep.TransferBRep_ShapeListBinder_get_type_descriptor(*args)

class TransferBRep_BinderOfShape(Transfer.Transfer_Binder):
    """
    Allows direct binding between a starting Object and the Result
    of its transfer when it is Unique.
    The Result itself is defined as a formal parameter <Shape from TopoDS>
    Warning : While it is possible to instantiate BinderOfShape with any Type
    for the Result, it is not advisable to instantiate it with
    Transient Classes, because such Results are directly known and
    managed by TransferProcess & Co, through
    SimpleBinderOfTransient : this class looks like instantiation
    of BinderOfShape, but its method ResultType
    is adapted (reads DynamicType of the Result)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TransferBRep_BinderOfShape
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TransferBRep_BinderOfShape(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TransferBRep_BinderOfShape self) -> TransferBRep_BinderOfShape
        __init__(TransferBRep_BinderOfShape self, TopoDS_Shape res) -> TransferBRep_BinderOfShape

        constructor which in the same time defines the result
        Returns True if a starting object is bound with SEVERAL
        results : Here, returns allways False
        But it can have next results

        :type res: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        this = _TransferBRep.new_TransferBRep_BinderOfShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def ResultType(self, *args):
        """
        ResultType(TransferBRep_BinderOfShape self) -> Handle_Standard_Type

        Returns the Type permitted for the Result, i.e. the Type
        of the Parameter Class <Shape from TopoDS> (statically defined)

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TransferBRep.TransferBRep_BinderOfShape_ResultType(self, *args)


    def ResultTypeName(self, *args):
        """
        ResultTypeName(TransferBRep_BinderOfShape self) -> Standard_CString

        Returns the Type Name computed for the Result (dynamic)

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _TransferBRep.TransferBRep_BinderOfShape_ResultTypeName(self, *args)


    def SetResult(self, *args):
        """
        SetResult(TransferBRep_BinderOfShape self, TopoDS_Shape res)

        Defines the Result

        :type res: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TransferBRep.TransferBRep_BinderOfShape_SetResult(self, *args)


    def Result(self, *args):
        """
        Returns the defined Result, if there is one

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TransferBRep.TransferBRep_BinderOfShape_Result(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CResult(self, *args):
        """
        CResult(TransferBRep_BinderOfShape self) -> TopoDS_Shape

        Returns the defined Result, if there is one, and allows to
        change it (avoids Result + SetResult).
        Admits that Result can be not yet defined
        Warning : a call to CResult causes Result to be known as defined

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TransferBRep.TransferBRep_BinderOfShape_CResult(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TransferBRep.TransferBRep_BinderOfShape_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TransferBRep.TransferBRep_BinderOfShape_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TransferBRep.TransferBRep_BinderOfShape_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TransferBRep.delete_TransferBRep_BinderOfShape
TransferBRep_BinderOfShape_swigregister = _TransferBRep.TransferBRep_BinderOfShape_swigregister
TransferBRep_BinderOfShape_swigregister(TransferBRep_BinderOfShape)

def TransferBRep_BinderOfShape_get_type_name(*args):
    """
    TransferBRep_BinderOfShape_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TransferBRep.TransferBRep_BinderOfShape_get_type_name(*args)

def TransferBRep_BinderOfShape_get_type_descriptor(*args):
    """
    TransferBRep_BinderOfShape_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TransferBRep.TransferBRep_BinderOfShape_get_type_descriptor(*args)

class TransferBRep_(object):
    """
    This package gathers services to simply read files and convert
    them to Shapes from CasCade. IE. it can be used in conjunction
    with purely CasCade software
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ShapeResult(*args):
        """
        ShapeResult( binder) -> TopoDS_Shape
        ShapeResult(Handle_Transfer_TransientProcess TP, Handle_Standard_Transient ent) -> TopoDS_Shape

        Get the Shape recorded in a TransientProcess as result of the
        Transfer of an entity. I.E. in the binder bound to that Entity
        If no result or result not a single Shape, returns a Null Shape

        :type TP: OCC.wrapper.Transfer.Handle_Transfer_TransientProcess
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TransferBRep.TransferBRep__ShapeResult(*args)

    ShapeResult = staticmethod(ShapeResult)

    def SetShapeResult(*args):
        """
        SetShapeResult(Handle_Transfer_TransientProcess TP, Handle_Standard_Transient ent, TopoDS_Shape result)

        Sets a Shape as a result for a starting entity <ent>
        (reverse of ShapeResult)
        It simply creates a ShapeBinder then binds it to the entity

        :type TP: OCC.wrapper.Transfer.Handle_Transfer_TransientProcess
        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :type result: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TransferBRep.TransferBRep__SetShapeResult(*args)

    SetShapeResult = staticmethod(SetShapeResult)

    def Shapes(*args):
        """
        Shapes(Handle_Transfer_TransientProcess TP, Standard_Boolean const rootsonly) -> Handle_TopTools_HSequenceOfShape
        Shapes(Handle_Transfer_TransientProcess TP, Handle_TColStd_HSequenceOfTransient list) -> Handle_TopTools_HSequenceOfShape

        Gets the Shapes recorded in a TransientProcess as result of a
        Transfer, for a given list of starting entities, returns
        the shapes as a HSequence

        :type TP: OCC.wrapper.Transfer.Handle_Transfer_TransientProcess
        :type list: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfTransient
        :rtype: OCC.wrapper.TopTools.Handle_TopTools_HSequenceOfShape

        """
        return _TransferBRep.TransferBRep__Shapes(*args)

    Shapes = staticmethod(Shapes)

    def ShapeState(*args):
        """
        ShapeState(Handle_Transfer_FinderProcess FP, TopoDS_Shape shape) -> TopAbs_Orientation

        Returns a Status regarding a Shape in a FinderProcess
        - FORWARD means bound with SAME Orientation
        - REVERSED means bound with REVERSE Orientation
        - EXTERNAL means NOT BOUND
        - INTERNAL is not used

        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess
        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _TransferBRep.TransferBRep__ShapeState(*args)

    ShapeState = staticmethod(ShapeState)

    def ResultFromShape(*args):
        """
        ResultFromShape(Handle_Transfer_FinderProcess FP, TopoDS_Shape shape)

        Returns the result (as a Binder) attached to a given Shape
        Null if none

        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess
        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Transfer.Handle_Transfer_Binder

        """
        return _TransferBRep.TransferBRep__ResultFromShape(*args)

    ResultFromShape = staticmethod(ResultFromShape)

    def TransientFromShape(*args):
        """
        TransientFromShape(Handle_Transfer_FinderProcess FP, TopoDS_Shape shape) -> Handle_Standard_Transient

        Returns the result as pure Transient attached to a Shape
        first one if multiple result

        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess
        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _TransferBRep.TransferBRep__TransientFromShape(*args)

    TransientFromShape = staticmethod(TransientFromShape)

    def SetTransientFromShape(*args):
        """
        SetTransientFromShape(Handle_Transfer_FinderProcess FP, TopoDS_Shape shape, Handle_Standard_Transient result)

        Binds a Transient Result to a Shape in a FinderProcess
        (as first result if multiple : does not add it to existing one)

        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess
        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :type result: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _TransferBRep.TransferBRep__SetTransientFromShape(*args)

    SetTransientFromShape = staticmethod(SetTransientFromShape)

    def ShapeMapper(*args):
        """
        ShapeMapper(Handle_Transfer_FinderProcess FP, TopoDS_Shape shape) -> Handle_TransferBRep_ShapeMapper

        Returns a ShapeMapper for a given Shape (location included)
        Either <shape> is already mapped, then its Mapper is returned
        Or it is not, then a new one is created then returned, BUT
        it is not mapped here (use Bind or FindElseBind to do this)

        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess
        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TransferBRep.Handle_TransferBRep_ShapeMapper

        """
        return _TransferBRep.TransferBRep__ShapeMapper(*args)

    ShapeMapper = staticmethod(ShapeMapper)

    def TransferResultInfo(*args):
        """
        TransferResultInfo(Handle_Transfer_TransientProcess TP, Handle_TColStd_HSequenceOfTransient EntityTypes, Handle_TransferBRep_HSequenceOfTransferResultInfo InfoSeq)
        TransferResultInfo(Handle_Transfer_FinderProcess FP, Handle_TColStd_HSequenceOfInteger ShapeTypes, Handle_TransferBRep_HSequenceOfTransferResultInfo InfoSeq)

        Fills sequence of TransferResultInfo for each type of shape
        given in the ShapeTypes (which are in fact considered as
        TopAbs_ShapeEnum).
        The Finders in the FP are considered as ShapeMappers.

        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess
        :type ShapeTypes: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfInteger
        :type InfoSeq: OCC.wrapper.TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo

        """
        return _TransferBRep.TransferBRep__TransferResultInfo(*args)

    TransferResultInfo = staticmethod(TransferResultInfo)

    def PrintResultInfo(*args):
        """
        PrintResultInfo(Handle_Message_Printer Printer, Message_Msg Header, Handle_TransferBRep_TransferResultInfo ResultInfo, Standard_Boolean const printEmpty)

        Prints the results of transfer to given priner with given header.

        :type Printer: OCC.wrapper.Message.Handle_Message_Printer
        :type Header: OCC.wrapper.Message.Message_Msg
        :type ResultInfo: OCC.wrapper.TransferBRep.Handle_TransferBRep_TransferResultInfo
        :type printEmpty: bool

        """
        return _TransferBRep.TransferBRep__PrintResultInfo(*args)

    PrintResultInfo = staticmethod(PrintResultInfo)

    def ResultCheckList(*args):
        """
        ResultCheckList(Interface_CheckIterator chl, Handle_Transfer_FinderProcess FP, Handle_Interface_InterfaceModel model) -> Interface_CheckIterator

        Takes a starting CheckIterator which brings checks bound with
        starting objects (Shapes, Transient from an Imagine appli ...)
        and converts it to a CheckIterator in which checks are bound
        with results in an InterfaceModel
        Mapping is recorded in the FinderProcess
        Starting objects for which no individual result is recorded
        remain in their state

        :type chl: OCC.wrapper.Interface.Interface_CheckIterator
        :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess
        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Interface.Interface_CheckIterator

        """
        return _TransferBRep.TransferBRep__ResultCheckList(*args)

    ResultCheckList = staticmethod(ResultCheckList)

    def Checked(*args):
        """
        Checked(Interface_CheckIterator chl, Standard_Boolean const alsoshapes) -> Handle_TColStd_HSequenceOfTransient

        Returns the list of objects to which a non-empty Check is
        bound in a check-list. Objects are transients, they can then
        be either Imagine objects entities for an Interface Norm.
        <alsoshapes> commands Shapes to be returned too
        (as ShapeMapper), see also CheckedShapes

        :type chl: OCC.wrapper.Interface.Interface_CheckIterator
        :type alsoshapes: bool
        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfTransient

        """
        return _TransferBRep.TransferBRep__Checked(*args)

    Checked = staticmethod(Checked)

    def CheckedShapes(*args):
        """
        CheckedShapes(Interface_CheckIterator chl) -> Handle_TopTools_HSequenceOfShape

        Returns the list of shapes to which a non-empty Check is bound
        in a check-list

        :type chl: OCC.wrapper.Interface.Interface_CheckIterator
        :rtype: OCC.wrapper.TopTools.Handle_TopTools_HSequenceOfShape

        """
        return _TransferBRep.TransferBRep__CheckedShapes(*args)

    CheckedShapes = staticmethod(CheckedShapes)

    def CheckObject(*args):
        """
        CheckObject(Interface_CheckIterator chl, Handle_Standard_Transient obj) -> Interface_CheckIterator

        Returns the check-list bound to a given object, generally none
        (if OK) or one check. <obj> can be, either a true Transient
        object or entity, or a ShapeMapper, in that case the Shape is
        considered

        :type chl: OCC.wrapper.Interface.Interface_CheckIterator
        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Interface.Interface_CheckIterator

        """
        return _TransferBRep.TransferBRep__CheckObject(*args)

    CheckObject = staticmethod(CheckObject)

    def __init__(self):
        """
        This package gathers services to simply read files and convert
        them to Shapes from CasCade. IE. it can be used in conjunction
        with purely CasCade software
        """
        this = _TransferBRep.new_TransferBRep_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TransferBRep.delete_TransferBRep_
TransferBRep__swigregister = _TransferBRep.TransferBRep__swigregister
TransferBRep__swigregister(TransferBRep_)

def TransferBRep__ShapeResult(*args):
    """
    ShapeResult( binder) -> TopoDS_Shape
    TransferBRep__ShapeResult(Handle_Transfer_TransientProcess TP, Handle_Standard_Transient ent) -> TopoDS_Shape

    Get the Shape recorded in a TransientProcess as result of the
    Transfer of an entity. I.E. in the binder bound to that Entity
    If no result or result not a single Shape, returns a Null Shape

    :type TP: OCC.wrapper.Transfer.Handle_Transfer_TransientProcess
    :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
    :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

    """
    return _TransferBRep.TransferBRep__ShapeResult(*args)

def TransferBRep__SetShapeResult(*args):
    """
    TransferBRep__SetShapeResult(Handle_Transfer_TransientProcess TP, Handle_Standard_Transient ent, TopoDS_Shape result)

    Sets a Shape as a result for a starting entity <ent>
    (reverse of ShapeResult)
    It simply creates a ShapeBinder then binds it to the entity

    :type TP: OCC.wrapper.Transfer.Handle_Transfer_TransientProcess
    :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
    :type result: OCC.wrapper.TopoDS.TopoDS_Shape

    """
    return _TransferBRep.TransferBRep__SetShapeResult(*args)

def TransferBRep__Shapes(*args):
    """
    Shapes(Handle_Transfer_TransientProcess TP, Standard_Boolean const rootsonly) -> Handle_TopTools_HSequenceOfShape
    TransferBRep__Shapes(Handle_Transfer_TransientProcess TP, Handle_TColStd_HSequenceOfTransient list) -> Handle_TopTools_HSequenceOfShape

    Gets the Shapes recorded in a TransientProcess as result of a
    Transfer, for a given list of starting entities, returns
    the shapes as a HSequence

    :type TP: OCC.wrapper.Transfer.Handle_Transfer_TransientProcess
    :type list: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfTransient
    :rtype: OCC.wrapper.TopTools.Handle_TopTools_HSequenceOfShape

    """
    return _TransferBRep.TransferBRep__Shapes(*args)

def TransferBRep__ShapeState(*args):
    """
    TransferBRep__ShapeState(Handle_Transfer_FinderProcess FP, TopoDS_Shape shape) -> TopAbs_Orientation

    Returns a Status regarding a Shape in a FinderProcess
    - FORWARD means bound with SAME Orientation
    - REVERSED means bound with REVERSE Orientation
    - EXTERNAL means NOT BOUND
    - INTERNAL is not used

    :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess
    :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
    :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

    """
    return _TransferBRep.TransferBRep__ShapeState(*args)

def TransferBRep__ResultFromShape(*args):
    """
    TransferBRep__ResultFromShape(Handle_Transfer_FinderProcess FP, TopoDS_Shape shape)

    Returns the result (as a Binder) attached to a given Shape
    Null if none

    :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess
    :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
    :rtype: OCC.wrapper.Transfer.Handle_Transfer_Binder

    """
    return _TransferBRep.TransferBRep__ResultFromShape(*args)

def TransferBRep__TransientFromShape(*args):
    """
    TransferBRep__TransientFromShape(Handle_Transfer_FinderProcess FP, TopoDS_Shape shape) -> Handle_Standard_Transient

    Returns the result as pure Transient attached to a Shape
    first one if multiple result

    :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess
    :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
    :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

    """
    return _TransferBRep.TransferBRep__TransientFromShape(*args)

def TransferBRep__SetTransientFromShape(*args):
    """
    TransferBRep__SetTransientFromShape(Handle_Transfer_FinderProcess FP, TopoDS_Shape shape, Handle_Standard_Transient result)

    Binds a Transient Result to a Shape in a FinderProcess
    (as first result if multiple : does not add it to existing one)

    :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess
    :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
    :type result: OCC.wrapper.Standard.Handle_Standard_Transient

    """
    return _TransferBRep.TransferBRep__SetTransientFromShape(*args)

def TransferBRep__ShapeMapper(*args):
    """
    TransferBRep__ShapeMapper(Handle_Transfer_FinderProcess FP, TopoDS_Shape shape) -> Handle_TransferBRep_ShapeMapper

    Returns a ShapeMapper for a given Shape (location included)
    Either <shape> is already mapped, then its Mapper is returned
    Or it is not, then a new one is created then returned, BUT
    it is not mapped here (use Bind or FindElseBind to do this)

    :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess
    :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
    :rtype: OCC.wrapper.TransferBRep.Handle_TransferBRep_ShapeMapper

    """
    return _TransferBRep.TransferBRep__ShapeMapper(*args)

def TransferBRep__TransferResultInfo(*args):
    """
    TransferResultInfo(Handle_Transfer_TransientProcess TP, Handle_TColStd_HSequenceOfTransient EntityTypes, Handle_TransferBRep_HSequenceOfTransferResultInfo InfoSeq)
    TransferBRep__TransferResultInfo(Handle_Transfer_FinderProcess FP, Handle_TColStd_HSequenceOfInteger ShapeTypes, Handle_TransferBRep_HSequenceOfTransferResultInfo InfoSeq)

    Fills sequence of TransferResultInfo for each type of shape
    given in the ShapeTypes (which are in fact considered as
    TopAbs_ShapeEnum).
    The Finders in the FP are considered as ShapeMappers.

    :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess
    :type ShapeTypes: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfInteger
    :type InfoSeq: OCC.wrapper.TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo

    """
    return _TransferBRep.TransferBRep__TransferResultInfo(*args)

def TransferBRep__PrintResultInfo(*args):
    """
    TransferBRep__PrintResultInfo(Handle_Message_Printer Printer, Message_Msg Header, Handle_TransferBRep_TransferResultInfo ResultInfo, Standard_Boolean const printEmpty)

    Prints the results of transfer to given priner with given header.

    :type Printer: OCC.wrapper.Message.Handle_Message_Printer
    :type Header: OCC.wrapper.Message.Message_Msg
    :type ResultInfo: OCC.wrapper.TransferBRep.Handle_TransferBRep_TransferResultInfo
    :type printEmpty: bool

    """
    return _TransferBRep.TransferBRep__PrintResultInfo(*args)

def TransferBRep__ResultCheckList(*args):
    """
    TransferBRep__ResultCheckList(Interface_CheckIterator chl, Handle_Transfer_FinderProcess FP, Handle_Interface_InterfaceModel model) -> Interface_CheckIterator

    Takes a starting CheckIterator which brings checks bound with
    starting objects (Shapes, Transient from an Imagine appli ...)
    and converts it to a CheckIterator in which checks are bound
    with results in an InterfaceModel
    Mapping is recorded in the FinderProcess
    Starting objects for which no individual result is recorded
    remain in their state

    :type chl: OCC.wrapper.Interface.Interface_CheckIterator
    :type FP: OCC.wrapper.Transfer.Handle_Transfer_FinderProcess
    :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
    :rtype: OCC.wrapper.Interface.Interface_CheckIterator

    """
    return _TransferBRep.TransferBRep__ResultCheckList(*args)

def TransferBRep__Checked(*args):
    """
    TransferBRep__Checked(Interface_CheckIterator chl, Standard_Boolean const alsoshapes) -> Handle_TColStd_HSequenceOfTransient

    Returns the list of objects to which a non-empty Check is
    bound in a check-list. Objects are transients, they can then
    be either Imagine objects entities for an Interface Norm.
    <alsoshapes> commands Shapes to be returned too
    (as ShapeMapper), see also CheckedShapes

    :type chl: OCC.wrapper.Interface.Interface_CheckIterator
    :type alsoshapes: bool
    :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfTransient

    """
    return _TransferBRep.TransferBRep__Checked(*args)

def TransferBRep__CheckedShapes(*args):
    """
    TransferBRep__CheckedShapes(Interface_CheckIterator chl) -> Handle_TopTools_HSequenceOfShape

    Returns the list of shapes to which a non-empty Check is bound
    in a check-list

    :type chl: OCC.wrapper.Interface.Interface_CheckIterator
    :rtype: OCC.wrapper.TopTools.Handle_TopTools_HSequenceOfShape

    """
    return _TransferBRep.TransferBRep__CheckedShapes(*args)

def TransferBRep__CheckObject(*args):
    """
    TransferBRep__CheckObject(Interface_CheckIterator chl, Handle_Standard_Transient obj) -> Interface_CheckIterator

    Returns the check-list bound to a given object, generally none
    (if OK) or one check. <obj> can be, either a true Transient
    object or entity, or a ShapeMapper, in that case the Shape is
    considered

    :type chl: OCC.wrapper.Interface.Interface_CheckIterator
    :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
    :rtype: OCC.wrapper.Interface.Interface_CheckIterator

    """
    return _TransferBRep.TransferBRep__CheckObject(*args)

class TransferBRep_ShapeBinder(TransferBRep_BinderOfShape):
    """
    A ShapeBinder is a BinderOfShape with some additional services
    to cast the Result under various kinds of Shapes
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TransferBRep_ShapeBinder
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TransferBRep_ShapeBinder(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TransferBRep_ShapeBinder self) -> TransferBRep_ShapeBinder
        __init__(TransferBRep_ShapeBinder self, TopoDS_Shape res) -> TransferBRep_ShapeBinder

        Creates a ShapeBinder with a result

        :type res: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        this = _TransferBRep.new_TransferBRep_ShapeBinder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def ShapeType(self, *args):
        """
        ShapeType(TransferBRep_ShapeBinder self) -> TopAbs_ShapeEnum

        Returns the Type of the Shape Result (under TopAbs form)

        :rtype: OCC.wrapper.TopAbs.TopAbs_ShapeEnum

        """
        return _TransferBRep.TransferBRep_ShapeBinder_ShapeType(self, *args)


    def Vertex(self, *args):
        """
        Vertex(TransferBRep_ShapeBinder self) -> TopoDS_Vertex

        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _TransferBRep.TransferBRep_ShapeBinder_Vertex(self, *args)


    def Edge(self, *args):
        """
        Edge(TransferBRep_ShapeBinder self) -> TopoDS_Edge

        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _TransferBRep.TransferBRep_ShapeBinder_Edge(self, *args)


    def Wire(self, *args):
        """
        Wire(TransferBRep_ShapeBinder self) -> TopoDS_Wire

        :rtype: OCC.wrapper.TopoDS.TopoDS_Wire

        """
        return _TransferBRep.TransferBRep_ShapeBinder_Wire(self, *args)


    def Face(self, *args):
        """
        Face(TransferBRep_ShapeBinder self) -> TopoDS_Face

        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _TransferBRep.TransferBRep_ShapeBinder_Face(self, *args)


    def Shell(self, *args):
        """
        Shell(TransferBRep_ShapeBinder self) -> TopoDS_Shell

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shell

        """
        return _TransferBRep.TransferBRep_ShapeBinder_Shell(self, *args)


    def Solid(self, *args):
        """
        Solid(TransferBRep_ShapeBinder self) -> TopoDS_Solid

        :rtype: OCC.wrapper.TopoDS.TopoDS_Solid

        """
        return _TransferBRep.TransferBRep_ShapeBinder_Solid(self, *args)


    def CompSolid(self, *args):
        """
        CompSolid(TransferBRep_ShapeBinder self) -> TopoDS_CompSolid

        :rtype: OCC.wrapper.TopoDS.TopoDS_CompSolid

        """
        return _TransferBRep.TransferBRep_ShapeBinder_CompSolid(self, *args)


    def Compound(self, *args):
        """
        Compound(TransferBRep_ShapeBinder self) -> TopoDS_Compound

        :rtype: OCC.wrapper.TopoDS.TopoDS_Compound

        """
        return _TransferBRep.TransferBRep_ShapeBinder_Compound(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TransferBRep.TransferBRep_ShapeBinder_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TransferBRep.TransferBRep_ShapeBinder_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TransferBRep.TransferBRep_ShapeBinder_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TransferBRep.delete_TransferBRep_ShapeBinder
TransferBRep_ShapeBinder_swigregister = _TransferBRep.TransferBRep_ShapeBinder_swigregister
TransferBRep_ShapeBinder_swigregister(TransferBRep_ShapeBinder)

def TransferBRep_ShapeBinder_get_type_name(*args):
    """
    TransferBRep_ShapeBinder_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TransferBRep.TransferBRep_ShapeBinder_get_type_name(*args)

def TransferBRep_ShapeBinder_get_type_descriptor(*args):
    """
    TransferBRep_ShapeBinder_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TransferBRep.TransferBRep_ShapeBinder_get_type_descriptor(*args)

class Handle_TransferBRep_HSequenceOfTransferResultInfo(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TransferBRep_HSequenceOfTransferResultInfo self)

        Nullify the handle


        """
        return _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TransferBRep_HSequenceOfTransferResultInfo self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TransferBRep_HSequenceOfTransferResultInfo self, TransferBRep_HSequenceOfTransferResultInfo thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TransferBRep_HSequenceOfTransferResultInfo self, Handle_TransferBRep_HSequenceOfTransferResultInfo theHandle) -> Handle_TransferBRep_HSequenceOfTransferResultInfo
        assign(Handle_TransferBRep_HSequenceOfTransferResultInfo self, TransferBRep_HSequenceOfTransferResultInfo thePtr) -> Handle_TransferBRep_HSequenceOfTransferResultInfo
        assign(Handle_TransferBRep_HSequenceOfTransferResultInfo self, Handle_TransferBRep_HSequenceOfTransferResultInfo theHandle) -> Handle_TransferBRep_HSequenceOfTransferResultInfo

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TransferBRep_HSequenceOfTransferResultInfo self) -> TransferBRep_HSequenceOfTransferResultInfo

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TransferBRep_HSequenceOfTransferResultInfo self) -> TransferBRep_HSequenceOfTransferResultInfo

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TransferBRep_HSequenceOfTransferResultInfo self) -> TransferBRep_HSequenceOfTransferResultInfo

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo___ref__(self, *args)


    def __hash__(self):
        return _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TransferBRep.new_Handle_TransferBRep_HSequenceOfTransferResultInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_DownCast)
    __swig_destroy__ = _TransferBRep.delete_Handle_TransferBRep_HSequenceOfTransferResultInfo

    def Sequence(self, *args):
        """
        :rtype: OCC.wrapper.TransferBRep.TransferBRep_SequenceOfTransferResultInfo

        """
        res = _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_Sequence(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Append(self, *args):
        """
        Append(Handle_TransferBRep_HSequenceOfTransferResultInfo self, Handle_TransferBRep_TransferResultInfo theItem)
        Append(Handle_TransferBRep_HSequenceOfTransferResultInfo self, NCollection_Sequence_Handle_TransferBRep_TransferResultInfo theSequence)

        :type theSequence: OCC.wrapper.TransferBRep.TransferBRep_SequenceOfTransferResultInfo

        """
        return _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_Append(self, *args)


    def ChangeSequence(self, *args):
        """
        ChangeSequence(Handle_TransferBRep_HSequenceOfTransferResultInfo self) -> NCollection_Sequence_Handle_TransferBRep_TransferResultInfo

        :rtype: OCC.wrapper.TransferBRep.TransferBRep_SequenceOfTransferResultInfo

        """
        return _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_ChangeSequence(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TransferBRep_HSequenceOfTransferResultInfo self) -> char const *

        :rtype: const char *

        """
        return _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TransferBRep_HSequenceOfTransferResultInfo self)

        Memory deallocator for transient classes


        """
        return _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TransferBRep_HSequenceOfTransferResultInfo self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TransferBRep_HSequenceOfTransferResultInfo self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TransferBRep_HSequenceOfTransferResultInfo self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TransferBRep_HSequenceOfTransferResultInfo self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TransferBRep_HSequenceOfTransferResultInfo self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TransferBRep_HSequenceOfTransferResultInfo self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TransferBRep_HSequenceOfTransferResultInfo self)

        Increments the reference counter of this object


        """
        return _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TransferBRep_HSequenceOfTransferResultInfo self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_DecrementRefCounter(self, *args)

Handle_TransferBRep_HSequenceOfTransferResultInfo_swigregister = _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_swigregister
Handle_TransferBRep_HSequenceOfTransferResultInfo_swigregister(Handle_TransferBRep_HSequenceOfTransferResultInfo)

def Handle_TransferBRep_HSequenceOfTransferResultInfo_DownCast(thing):
    return _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_DownCast(thing)
Handle_TransferBRep_HSequenceOfTransferResultInfo_DownCast = _TransferBRep.Handle_TransferBRep_HSequenceOfTransferResultInfo_DownCast

class TransferBRep_OrientedShapeMapper(Transfer.Transfer_Finder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TransferBRep_OrientedShapeMapper
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TransferBRep_OrientedShapeMapper(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TransferBRep_OrientedShapeMapper self, TopoDS_Shape akey) -> TransferBRep_OrientedShapeMapper

        Creates a Mapper with a Value. This Value can then not be
        changed. It is used by the Hasher to compute the HashCode,
        which will then be stored for an immediate reading.

        :type akey: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        this = _TransferBRep.new_TransferBRep_OrientedShapeMapper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Value(self, *args):
        """
        Returns the contained value

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TransferBRep.TransferBRep_OrientedShapeMapper_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Equates(self, *args):
        """
        Equates(TransferBRep_OrientedShapeMapper self, Handle_Transfer_Finder other) -> Standard_Boolean

        Specific testof equallity : defined as False if <other> has
        not the same true Type, else contents are compared (by
        C++ operator ==)

        :type other: OCC.wrapper.Transfer.Handle_Transfer_Finder
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.TransferBRep_OrientedShapeMapper_Equates(self, *args)


    def ValueType(self, *args):
        """
        ValueType(TransferBRep_OrientedShapeMapper self) -> Handle_Standard_Type

        Returns the Type of the Value. By default, returns the
        DynamicType of <me>, but can be redefined

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TransferBRep.TransferBRep_OrientedShapeMapper_ValueType(self, *args)


    def ValueTypeName(self, *args):
        """
        ValueTypeName(TransferBRep_OrientedShapeMapper self) -> Standard_CString

        Returns the name of the Type of the Value. Default is name
        of ValueType, unless it is for a non-handled object

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _TransferBRep.TransferBRep_OrientedShapeMapper_ValueTypeName(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TransferBRep.TransferBRep_OrientedShapeMapper_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TransferBRep.TransferBRep_OrientedShapeMapper_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TransferBRep.TransferBRep_OrientedShapeMapper_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TransferBRep.delete_TransferBRep_OrientedShapeMapper
TransferBRep_OrientedShapeMapper_swigregister = _TransferBRep.TransferBRep_OrientedShapeMapper_swigregister
TransferBRep_OrientedShapeMapper_swigregister(TransferBRep_OrientedShapeMapper)

def TransferBRep_OrientedShapeMapper_get_type_name(*args):
    """
    TransferBRep_OrientedShapeMapper_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TransferBRep.TransferBRep_OrientedShapeMapper_get_type_name(*args)

def TransferBRep_OrientedShapeMapper_get_type_descriptor(*args):
    """
    TransferBRep_OrientedShapeMapper_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TransferBRep.TransferBRep_OrientedShapeMapper_get_type_descriptor(*args)

class Handle_TransferBRep_ShapeBinder(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TransferBRep_ShapeBinder self)

        Nullify the handle


        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TransferBRep_ShapeBinder self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TransferBRep_ShapeBinder self, TransferBRep_ShapeBinder thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TransferBRep_ShapeBinder self, Handle_TransferBRep_ShapeBinder theHandle) -> Handle_TransferBRep_ShapeBinder
        assign(Handle_TransferBRep_ShapeBinder self, TransferBRep_ShapeBinder thePtr) -> Handle_TransferBRep_ShapeBinder
        assign(Handle_TransferBRep_ShapeBinder self, Handle_TransferBRep_ShapeBinder theHandle) -> Handle_TransferBRep_ShapeBinder

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TransferBRep_ShapeBinder self) -> TransferBRep_ShapeBinder

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TransferBRep_ShapeBinder self) -> TransferBRep_ShapeBinder

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TransferBRep_ShapeBinder self) -> TransferBRep_ShapeBinder

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder___ref__(self, *args)


    def __hash__(self):
        return _TransferBRep.Handle_TransferBRep_ShapeBinder___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TransferBRep.Handle_TransferBRep_ShapeBinder___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TransferBRep.new_Handle_TransferBRep_ShapeBinder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TransferBRep.Handle_TransferBRep_ShapeBinder_DownCast)
    __swig_destroy__ = _TransferBRep.delete_Handle_TransferBRep_ShapeBinder

    def ShapeType(self, *args):
        """
        ShapeType(Handle_TransferBRep_ShapeBinder self) -> TopAbs_ShapeEnum

        Returns the Type of the Shape Result (under TopAbs form)

        :rtype: OCC.wrapper.TopAbs.TopAbs_ShapeEnum

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_ShapeType(self, *args)


    def Vertex(self, *args):
        """
        Vertex(Handle_TransferBRep_ShapeBinder self) -> TopoDS_Vertex

        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_Vertex(self, *args)


    def Edge(self, *args):
        """
        Edge(Handle_TransferBRep_ShapeBinder self) -> TopoDS_Edge

        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_Edge(self, *args)


    def Wire(self, *args):
        """
        Wire(Handle_TransferBRep_ShapeBinder self) -> TopoDS_Wire

        :rtype: OCC.wrapper.TopoDS.TopoDS_Wire

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_Wire(self, *args)


    def Face(self, *args):
        """
        Face(Handle_TransferBRep_ShapeBinder self) -> TopoDS_Face

        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_Face(self, *args)


    def Shell(self, *args):
        """
        Shell(Handle_TransferBRep_ShapeBinder self) -> TopoDS_Shell

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shell

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_Shell(self, *args)


    def Solid(self, *args):
        """
        Solid(Handle_TransferBRep_ShapeBinder self) -> TopoDS_Solid

        :rtype: OCC.wrapper.TopoDS.TopoDS_Solid

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_Solid(self, *args)


    def CompSolid(self, *args):
        """
        CompSolid(Handle_TransferBRep_ShapeBinder self) -> TopoDS_CompSolid

        :rtype: OCC.wrapper.TopoDS.TopoDS_CompSolid

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_CompSolid(self, *args)


    def Compound(self, *args):
        """
        Compound(Handle_TransferBRep_ShapeBinder self) -> TopoDS_Compound

        :rtype: OCC.wrapper.TopoDS.TopoDS_Compound

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_Compound(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TransferBRep_ShapeBinder self) -> char const *

        :rtype: const char *

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TransferBRep.Handle_TransferBRep_ShapeBinder_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TransferBRep.Handle_TransferBRep_ShapeBinder_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ResultType(self, *args):
        """
        ResultType(Handle_TransferBRep_ShapeBinder self) -> Handle_Standard_Type

        Returns the Type permitted for the Result, i.e. the Type
        of the Parameter Class <Shape from TopoDS> (statically defined)

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_ResultType(self, *args)


    def ResultTypeName(self, *args):
        """
        ResultTypeName(Handle_TransferBRep_ShapeBinder self) -> Standard_CString

        Returns the Type Name computed for the Result (dynamic)

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_ResultTypeName(self, *args)


    def SetResult(self, *args):
        """
        SetResult(Handle_TransferBRep_ShapeBinder self, TopoDS_Shape res)

        Defines the Result

        :type res: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_SetResult(self, *args)


    def Result(self, *args):
        """
        Returns the defined Result, if there is one

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TransferBRep.Handle_TransferBRep_ShapeBinder_Result(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CResult(self, *args):
        """
        CResult(Handle_TransferBRep_ShapeBinder self) -> TopoDS_Shape

        Returns the defined Result, if there is one, and allows to
        change it (avoids Result + SetResult).
        Admits that Result can be not yet defined
        Warning : a call to CResult causes Result to be known as defined

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_CResult(self, *args)


    def Merge(self, *args):
        """
        Merge(Handle_TransferBRep_ShapeBinder self,  other)

        Merges basic data (Check, ExecStatus) from another Binder but
        keeps its result. Used when a binder is replaced by another
        one, this allows to keep messages

        :type other: OCC.wrapper.Transfer.Handle_Transfer_Binder

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_Merge(self, *args)


    def IsMultiple(self, *args):
        """
        IsMultiple(Handle_TransferBRep_ShapeBinder self) -> Standard_Boolean

        Returns True if a Binder has several results, either by itself
        or because it has next results
        Can be defined by sub-classes.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_IsMultiple(self, *args)


    def AddResult(self, *args):
        """
        AddResult(Handle_TransferBRep_ShapeBinder self,  next)

        Adds a next result (at the end of the list)
        Remark : this information is not processed by Merge

        :type next: OCC.wrapper.Transfer.Handle_Transfer_Binder

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_AddResult(self, *args)


    def NextResult(self, *args):
        """
        NextResult(Handle_TransferBRep_ShapeBinder self)

        Returns the next result, Null if none

        :rtype: OCC.wrapper.Transfer.Handle_Transfer_Binder

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_NextResult(self, *args)


    def HasResult(self, *args):
        """
        HasResult(Handle_TransferBRep_ShapeBinder self) -> Standard_Boolean

        Returns True if a Result is available (StatusResult = Defined)
        A Unique Result will be gotten by Result (which must be
        defined in each sub-class according to result type)
        For a Multiple Result, see class MultipleBinder
        For other case, specific access has to be forecast

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_HasResult(self, *args)


    def SetAlreadyUsed(self, *args):
        """
        SetAlreadyUsed(Handle_TransferBRep_ShapeBinder self)

        Declares that result is now used by another one, it means that
        it cannot be modified (by Rebind)


        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_SetAlreadyUsed(self, *args)


    def Status(self, *args):
        """
        Status(Handle_TransferBRep_ShapeBinder self) -> Transfer_StatusResult

        Returns status, which can be Initial (not yet done), Made (a
        result is recorded, not yet shared), Used (it is shared and
        cannot be modified)

        :rtype: OCC.wrapper.Transfer.Transfer_StatusResult

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_Status(self, *args)


    def StatusExec(self, *args):
        """
        StatusExec(Handle_TransferBRep_ShapeBinder self) -> Transfer_StatusExec

        Returns execution status

        :rtype: OCC.wrapper.Transfer.Transfer_StatusExec

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_StatusExec(self, *args)


    def SetStatusExec(self, *args):
        """
        SetStatusExec(Handle_TransferBRep_ShapeBinder self, Transfer_StatusExec const stat)

        Modifies execution status; called by TransferProcess only
        (for StatusError, rather use SetError, below)

        :type stat: OCC.wrapper.Transfer.Transfer_StatusExec

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_SetStatusExec(self, *args)


    def AddFail(self, *args):
        """
        AddFail(Handle_TransferBRep_ShapeBinder self, Standard_CString const mess, Standard_CString const orig)

        Used to declare an individual transfer as beeing erroneous
        (Status is set to Void, StatusExec is set to Error, <errmess>
        is added to Check's list of Fails)
        It is possible to record several messages of error

        It has same effect for TransferProcess as raising an exception
        during the operation of Transfer, except the Transfer tries to
        continue (as if ErrorHandle had been set)

        :type mess: OCC.wrapper.Standard.Standard_CString
        :type orig: OCC.wrapper.Standard.Standard_CString

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_AddFail(self, *args)


    def AddWarning(self, *args):
        """
        AddWarning(Handle_TransferBRep_ShapeBinder self, Standard_CString const mess, Standard_CString const orig)

        Used to attach a Warning Message to an individual Transfer
        It has no effect on the Status

        :type mess: OCC.wrapper.Standard.Standard_CString
        :type orig: OCC.wrapper.Standard.Standard_CString

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_AddWarning(self, *args)


    def Check(self, *args):
        """
        Check(Handle_TransferBRep_ShapeBinder self) -> Handle_Interface_Check

        Returns Check which stores Fail messages
        Note that no Entity is associated in this Check

        :rtype: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_Check(self, *args)


    def CCheck(self, *args):
        """
        CCheck(Handle_TransferBRep_ShapeBinder self) -> Handle_Interface_Check

        Returns Check which stores Fail messages, in order to modify
        it (adding messages, or replacing it)

        :rtype: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_CCheck(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_TransferBRep_ShapeBinder self)

        Memory deallocator for transient classes


        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TransferBRep_ShapeBinder self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TransferBRep_ShapeBinder self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TransferBRep_ShapeBinder self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TransferBRep_ShapeBinder self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TransferBRep_ShapeBinder self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TransferBRep_ShapeBinder self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TransferBRep_ShapeBinder self)

        Increments the reference counter of this object


        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TransferBRep_ShapeBinder self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_ShapeBinder_DecrementRefCounter(self, *args)

Handle_TransferBRep_ShapeBinder_swigregister = _TransferBRep.Handle_TransferBRep_ShapeBinder_swigregister
Handle_TransferBRep_ShapeBinder_swigregister(Handle_TransferBRep_ShapeBinder)

def Handle_TransferBRep_ShapeBinder_DownCast(thing):
    return _TransferBRep.Handle_TransferBRep_ShapeBinder_DownCast(thing)
Handle_TransferBRep_ShapeBinder_DownCast = _TransferBRep.Handle_TransferBRep_ShapeBinder_DownCast

class Handle_TransferBRep_OrientedShapeMapper(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TransferBRep_OrientedShapeMapper self)

        Nullify the handle


        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TransferBRep_OrientedShapeMapper self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TransferBRep_OrientedShapeMapper self, TransferBRep_OrientedShapeMapper thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TransferBRep_OrientedShapeMapper self, Handle_TransferBRep_OrientedShapeMapper theHandle) -> Handle_TransferBRep_OrientedShapeMapper
        assign(Handle_TransferBRep_OrientedShapeMapper self, TransferBRep_OrientedShapeMapper thePtr) -> Handle_TransferBRep_OrientedShapeMapper
        assign(Handle_TransferBRep_OrientedShapeMapper self, Handle_TransferBRep_OrientedShapeMapper theHandle) -> Handle_TransferBRep_OrientedShapeMapper

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TransferBRep_OrientedShapeMapper self) -> TransferBRep_OrientedShapeMapper

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TransferBRep_OrientedShapeMapper self) -> TransferBRep_OrientedShapeMapper

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TransferBRep_OrientedShapeMapper self) -> TransferBRep_OrientedShapeMapper

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper___ref__(self, *args)


    def __hash__(self):
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TransferBRep.new_Handle_TransferBRep_OrientedShapeMapper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TransferBRep.Handle_TransferBRep_OrientedShapeMapper_DownCast)
    __swig_destroy__ = _TransferBRep.delete_Handle_TransferBRep_OrientedShapeMapper

    def Value(self, *args):
        """
        Returns the contained value

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Equates(self, *args):
        """
        Equates(Handle_TransferBRep_OrientedShapeMapper self, Handle_Transfer_Finder other) -> Standard_Boolean

        Specific testof equallity : defined as False if <other> has
        not the same true Type, else contents are compared (by
        C++ operator ==)

        :type other: OCC.wrapper.Transfer.Handle_Transfer_Finder
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_Equates(self, *args)


    def ValueType(self, *args):
        """
        ValueType(Handle_TransferBRep_OrientedShapeMapper self) -> Handle_Standard_Type

        Returns the Type of the Value. By default, returns the
        DynamicType of <me>, but can be redefined

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_ValueType(self, *args)


    def ValueTypeName(self, *args):
        """
        ValueTypeName(Handle_TransferBRep_OrientedShapeMapper self) -> Standard_CString

        Returns the name of the Type of the Value. Default is name
        of ValueType, unless it is for a non-handled object

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_ValueTypeName(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TransferBRep_OrientedShapeMapper self) -> char const *

        :rtype: const char *

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetHashCode(self, *args):
        """
        GetHashCode(Handle_TransferBRep_OrientedShapeMapper self) -> Standard_Integer

        Returns the HashCode which has been stored by SetHashCode
        (remark that HashCode could be deferred then be defined by
        sub-classes, the result is the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_GetHashCode(self, *args)


    def SetAttribute(self, *args):
        """
        SetAttribute(Handle_TransferBRep_OrientedShapeMapper self, Standard_CString const name, Handle_Standard_Transient val)

        Adds an attribute with a given name (replaces the former one
        with the same name if already exists)

        :type name: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_SetAttribute(self, *args)


    def RemoveAttribute(self, *args):
        """
        RemoveAttribute(Handle_TransferBRep_OrientedShapeMapper self, Standard_CString const name) -> Standard_Boolean

        Removes an attribute
        Returns True when done, False if this attribute did not exist

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_RemoveAttribute(self, *args)


    def GetAttribute(self, *args):
        """
        GetAttribute(Handle_TransferBRep_OrientedShapeMapper self, Standard_CString const name, Handle_Standard_Type type, Handle_Standard_Transient val) -> Standard_Boolean

        Returns an attribute from its name, filtered by a type
        If no attribute has this name, or if it is not kind of this
        type, <val> is Null and returned value is False
        Else, it is True

        :type name: OCC.wrapper.Standard.Standard_CString
        :type type: OCC.wrapper.Standard.Handle_Standard_Type
        :type val: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_GetAttribute(self, *args)


    def Attribute(self, *args):
        """
        Attribute(Handle_TransferBRep_OrientedShapeMapper self, Standard_CString const name) -> Handle_Standard_Transient

        Returns an attribute from its name. Null Handle if not recorded
        (whatever Transient, Integer, Real ...)

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_Attribute(self, *args)


    def AttributeType(self, *args):
        """
        AttributeType(Handle_TransferBRep_OrientedShapeMapper self, Standard_CString const name) -> Interface_ParamType

        Returns the type of an attribute :
        ParamInt , ParamReal , ParamText (String) , ParamIdent (any)
        or ParamVoid (not recorded)

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Interface.Interface_ParamType

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_AttributeType(self, *args)


    def SetIntegerAttribute(self, *args):
        """
        SetIntegerAttribute(Handle_TransferBRep_OrientedShapeMapper self, Standard_CString const name, Standard_Integer const val)

        Adds an integer value for an attribute

        :type name: OCC.wrapper.Standard.Standard_CString
        :type val: int

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_SetIntegerAttribute(self, *args)


    def GetIntegerAttribute(self, *args):
        """
        GetIntegerAttribute(Handle_TransferBRep_OrientedShapeMapper self, Standard_CString const name) -> Standard_Boolean

        Returns an attribute from its name, as integer
        If no attribute has this name, or not an integer,
        <val> is 0 and returned value is False
        Else, it is True

        :type name: OCC.wrapper.Standard.Standard_CString
        :type val: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_GetIntegerAttribute(self, *args)


    def IntegerAttribute(self, *args):
        """
        IntegerAttribute(Handle_TransferBRep_OrientedShapeMapper self, Standard_CString const name) -> Standard_Integer

        Returns an integer attribute from its name. 0 if not recorded

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_IntegerAttribute(self, *args)


    def SetRealAttribute(self, *args):
        """
        SetRealAttribute(Handle_TransferBRep_OrientedShapeMapper self, Standard_CString const name, Standard_Real const val)

        Adds a real value for an attribute

        :type name: OCC.wrapper.Standard.Standard_CString
        :type val: float

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_SetRealAttribute(self, *args)


    def GetRealAttribute(self, *args):
        """
        GetRealAttribute(Handle_TransferBRep_OrientedShapeMapper self, Standard_CString const name) -> Standard_Boolean

        Returns an attribute from its name, as real
        If no attribute has this name, or not a real
        <val> is 0.0 and returned value is False
        Else, it is True

        :type name: OCC.wrapper.Standard.Standard_CString
        :type val: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_GetRealAttribute(self, *args)


    def RealAttribute(self, *args):
        """
        RealAttribute(Handle_TransferBRep_OrientedShapeMapper self, Standard_CString const name) -> Standard_Real

        Returns a real attribute from its name. 0.0 if not recorded

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_RealAttribute(self, *args)


    def SetStringAttribute(self, *args):
        """
        SetStringAttribute(Handle_TransferBRep_OrientedShapeMapper self, Standard_CString const name, Standard_CString const val)

        Adds a String value for an attribute

        :type name: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.Standard.Standard_CString

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_SetStringAttribute(self, *args)


    def GetStringAttribute(self, *args):
        """
        GetStringAttribute(Handle_TransferBRep_OrientedShapeMapper self, Standard_CString const name, Standard_CString & val) -> Standard_Boolean

        Returns an attribute from its name, as String
        If no attribute has this name, or not a String
        <val> is 0.0 and returned value is False
        Else, it is True

        :type name: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_GetStringAttribute(self, *args)


    def StringAttribute(self, *args):
        """
        StringAttribute(Handle_TransferBRep_OrientedShapeMapper self, Standard_CString const name) -> Standard_CString

        Returns a String attribute from its name. "" if not recorded

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_StringAttribute(self, *args)


    def AttrList(self, *args):
        """
        AttrList(Handle_TransferBRep_OrientedShapeMapper self) -> NCollection_DataMap< TCollection_AsciiString,opencascade::handle< Standard_Transient > > &

        Returns the exhaustive list of attributes

        :rtype: OCC.wrapper.Transfer.NCollection_DataMap_TCollection_AsciiString_Handle_Standard_Transient

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_AttrList(self, *args)


    def SameAttributes(self, *args):
        """
        SameAttributes(Handle_TransferBRep_OrientedShapeMapper self, Handle_Transfer_Finder other)

        Gets the list of attributes from <other>, as such, i.e.
        not copied : attributes are shared, any attribute edited,
        added, or removed in <other> is also in <me> and vice versa
        The former list of attributes of <me> is dropped

        :type other: OCC.wrapper.Transfer.Handle_Transfer_Finder

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_SameAttributes(self, *args)


    def GetAttributes(self, *args):
        """
        GetAttributes(Handle_TransferBRep_OrientedShapeMapper self, Handle_Transfer_Finder other, Standard_CString const fromname, Standard_Boolean const copied)

        Gets the list of attributes from <other>, by copying it
        By default, considers all the attributes from <other>
        If <fromname> is given, considers only the attributes with
        name beginning by <fromname>

        For each attribute, if <copied> is True (D), its value is also
        copied if it is a basic type (Integer,Real,String), else it
        remains shared between <other> and <me>

        These new attributes are added to the existing ones in <me>,
        in case of same name, they replace the existing ones

        :type other: OCC.wrapper.Transfer.Handle_Transfer_Finder
        :type fromname: OCC.wrapper.Standard.Standard_CString
        :type copied: bool

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_GetAttributes(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_TransferBRep_OrientedShapeMapper self)

        Memory deallocator for transient classes


        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TransferBRep_OrientedShapeMapper self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TransferBRep_OrientedShapeMapper self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TransferBRep_OrientedShapeMapper self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TransferBRep_OrientedShapeMapper self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TransferBRep_OrientedShapeMapper self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TransferBRep_OrientedShapeMapper self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TransferBRep_OrientedShapeMapper self)

        Increments the reference counter of this object


        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TransferBRep_OrientedShapeMapper self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_DecrementRefCounter(self, *args)

Handle_TransferBRep_OrientedShapeMapper_swigregister = _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_swigregister
Handle_TransferBRep_OrientedShapeMapper_swigregister(Handle_TransferBRep_OrientedShapeMapper)

def Handle_TransferBRep_OrientedShapeMapper_DownCast(thing):
    return _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_DownCast(thing)
Handle_TransferBRep_OrientedShapeMapper_DownCast = _TransferBRep.Handle_TransferBRep_OrientedShapeMapper_DownCast

class Handle_TransferBRep_TransferResultInfo(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TransferBRep_TransferResultInfo self)

        Nullify the handle


        """
        return _TransferBRep.Handle_TransferBRep_TransferResultInfo_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TransferBRep_TransferResultInfo self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TransferBRep.Handle_TransferBRep_TransferResultInfo_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TransferBRep_TransferResultInfo self, TransferBRep_TransferResultInfo thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TransferBRep.Handle_TransferBRep_TransferResultInfo_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TransferBRep_TransferResultInfo self, Handle_TransferBRep_TransferResultInfo theHandle) -> Handle_TransferBRep_TransferResultInfo
        assign(Handle_TransferBRep_TransferResultInfo self, TransferBRep_TransferResultInfo thePtr) -> Handle_TransferBRep_TransferResultInfo
        assign(Handle_TransferBRep_TransferResultInfo self, Handle_TransferBRep_TransferResultInfo theHandle) -> Handle_TransferBRep_TransferResultInfo

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TransferBRep.Handle_TransferBRep_TransferResultInfo_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TransferBRep_TransferResultInfo self) -> TransferBRep_TransferResultInfo

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TransferBRep.Handle_TransferBRep_TransferResultInfo_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TransferBRep_TransferResultInfo self) -> TransferBRep_TransferResultInfo

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TransferBRep.Handle_TransferBRep_TransferResultInfo___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TransferBRep_TransferResultInfo self) -> TransferBRep_TransferResultInfo

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TransferBRep.Handle_TransferBRep_TransferResultInfo___ref__(self, *args)


    def __hash__(self):
        return _TransferBRep.Handle_TransferBRep_TransferResultInfo___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TransferBRep.Handle_TransferBRep_TransferResultInfo___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TransferBRep.new_Handle_TransferBRep_TransferResultInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TransferBRep.Handle_TransferBRep_TransferResultInfo_DownCast)
    __swig_destroy__ = _TransferBRep.delete_Handle_TransferBRep_TransferResultInfo

    def Clear(self, *args):
        """
        Clear(Handle_TransferBRep_TransferResultInfo self)

        Resets all the fields.


        """
        return _TransferBRep.Handle_TransferBRep_TransferResultInfo_Clear(self, *args)


    def Result(self, *args):
        """
        Result(Handle_TransferBRep_TransferResultInfo self) -> Standard_Integer &

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_TransferResultInfo_Result(self, *args)


    def ResultWarning(self, *args):
        """
        ResultWarning(Handle_TransferBRep_TransferResultInfo self) -> Standard_Integer &

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_TransferResultInfo_ResultWarning(self, *args)


    def ResultFail(self, *args):
        """
        ResultFail(Handle_TransferBRep_TransferResultInfo self) -> Standard_Integer &

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_TransferResultInfo_ResultFail(self, *args)


    def ResultWarningFail(self, *args):
        """
        ResultWarningFail(Handle_TransferBRep_TransferResultInfo self) -> Standard_Integer &

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_TransferResultInfo_ResultWarningFail(self, *args)


    def NoResult(self, *args):
        """
        NoResult(Handle_TransferBRep_TransferResultInfo self) -> Standard_Integer &

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_TransferResultInfo_NoResult(self, *args)


    def NoResultWarning(self, *args):
        """
        NoResultWarning(Handle_TransferBRep_TransferResultInfo self) -> Standard_Integer &

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_TransferResultInfo_NoResultWarning(self, *args)


    def NoResultFail(self, *args):
        """
        NoResultFail(Handle_TransferBRep_TransferResultInfo self) -> Standard_Integer &

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_TransferResultInfo_NoResultFail(self, *args)


    def NoResultWarningFail(self, *args):
        """
        NoResultWarningFail(Handle_TransferBRep_TransferResultInfo self) -> Standard_Integer &

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_TransferResultInfo_NoResultWarningFail(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TransferBRep_TransferResultInfo self) -> char const *

        :rtype: const char *

        """
        return _TransferBRep.Handle_TransferBRep_TransferResultInfo_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TransferBRep.Handle_TransferBRep_TransferResultInfo_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TransferBRep.Handle_TransferBRep_TransferResultInfo_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TransferBRep_TransferResultInfo self)

        Memory deallocator for transient classes


        """
        return _TransferBRep.Handle_TransferBRep_TransferResultInfo_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TransferBRep_TransferResultInfo self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TransferBRep_TransferResultInfo self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_TransferResultInfo_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TransferBRep_TransferResultInfo self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TransferBRep_TransferResultInfo self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_TransferResultInfo_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TransferBRep_TransferResultInfo self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TransferBRep.Handle_TransferBRep_TransferResultInfo_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TransferBRep_TransferResultInfo self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_TransferResultInfo_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TransferBRep_TransferResultInfo self)

        Increments the reference counter of this object


        """
        return _TransferBRep.Handle_TransferBRep_TransferResultInfo_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TransferBRep_TransferResultInfo self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_TransferResultInfo_DecrementRefCounter(self, *args)

Handle_TransferBRep_TransferResultInfo_swigregister = _TransferBRep.Handle_TransferBRep_TransferResultInfo_swigregister
Handle_TransferBRep_TransferResultInfo_swigregister(Handle_TransferBRep_TransferResultInfo)

def Handle_TransferBRep_TransferResultInfo_DownCast(thing):
    return _TransferBRep.Handle_TransferBRep_TransferResultInfo_DownCast(thing)
Handle_TransferBRep_TransferResultInfo_DownCast = _TransferBRep.Handle_TransferBRep_TransferResultInfo_DownCast

class TransferBRep_ShapeMapper(Transfer.Transfer_Finder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TransferBRep_ShapeMapper
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TransferBRep_ShapeMapper(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TransferBRep_ShapeMapper self, TopoDS_Shape akey) -> TransferBRep_ShapeMapper

        Creates a Mapper with a Value. This Value can then not be
        changed. It is used by the Hasher to compute the HashCode,
        which will then be stored for an immediate reading.

        :type akey: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        this = _TransferBRep.new_TransferBRep_ShapeMapper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Value(self, *args):
        """
        Returns the contained value

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TransferBRep.TransferBRep_ShapeMapper_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Equates(self, *args):
        """
        Equates(TransferBRep_ShapeMapper self, Handle_Transfer_Finder other) -> Standard_Boolean

        Specific testof equallity : defined as False if <other> has
        not the same true Type, else contents are compared (by
        C++ operator ==)

        :type other: OCC.wrapper.Transfer.Handle_Transfer_Finder
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.TransferBRep_ShapeMapper_Equates(self, *args)


    def ValueType(self, *args):
        """
        ValueType(TransferBRep_ShapeMapper self) -> Handle_Standard_Type

        Returns the Type of the Value. By default, returns the
        DynamicType of <me>, but can be redefined

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TransferBRep.TransferBRep_ShapeMapper_ValueType(self, *args)


    def ValueTypeName(self, *args):
        """
        ValueTypeName(TransferBRep_ShapeMapper self) -> Standard_CString

        Returns the name of the Type of the Value. Default is name
        of ValueType, unless it is for a non-handled object

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _TransferBRep.TransferBRep_ShapeMapper_ValueTypeName(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TransferBRep.TransferBRep_ShapeMapper_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TransferBRep.TransferBRep_ShapeMapper_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TransferBRep.TransferBRep_ShapeMapper_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TransferBRep.delete_TransferBRep_ShapeMapper
TransferBRep_ShapeMapper_swigregister = _TransferBRep.TransferBRep_ShapeMapper_swigregister
TransferBRep_ShapeMapper_swigregister(TransferBRep_ShapeMapper)

def TransferBRep_ShapeMapper_get_type_name(*args):
    """
    TransferBRep_ShapeMapper_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TransferBRep.TransferBRep_ShapeMapper_get_type_name(*args)

def TransferBRep_ShapeMapper_get_type_descriptor(*args):
    """
    TransferBRep_ShapeMapper_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TransferBRep.TransferBRep_ShapeMapper_get_type_descriptor(*args)

class Handle_TransferBRep_ShapeMapper(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TransferBRep_ShapeMapper self)

        Nullify the handle


        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TransferBRep_ShapeMapper self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TransferBRep_ShapeMapper self, TransferBRep_ShapeMapper thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TransferBRep_ShapeMapper self, Handle_TransferBRep_ShapeMapper theHandle) -> Handle_TransferBRep_ShapeMapper
        assign(Handle_TransferBRep_ShapeMapper self, TransferBRep_ShapeMapper thePtr) -> Handle_TransferBRep_ShapeMapper
        assign(Handle_TransferBRep_ShapeMapper self, Handle_TransferBRep_ShapeMapper theHandle) -> Handle_TransferBRep_ShapeMapper

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TransferBRep_ShapeMapper self) -> TransferBRep_ShapeMapper

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TransferBRep_ShapeMapper self) -> TransferBRep_ShapeMapper

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TransferBRep_ShapeMapper self) -> TransferBRep_ShapeMapper

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper___ref__(self, *args)


    def __hash__(self):
        return _TransferBRep.Handle_TransferBRep_ShapeMapper___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TransferBRep.Handle_TransferBRep_ShapeMapper___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TransferBRep.new_Handle_TransferBRep_ShapeMapper(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TransferBRep.Handle_TransferBRep_ShapeMapper_DownCast)
    __swig_destroy__ = _TransferBRep.delete_Handle_TransferBRep_ShapeMapper

    def Value(self, *args):
        """
        Returns the contained value

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TransferBRep.Handle_TransferBRep_ShapeMapper_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Equates(self, *args):
        """
        Equates(Handle_TransferBRep_ShapeMapper self, Handle_Transfer_Finder other) -> Standard_Boolean

        Specific testof equallity : defined as False if <other> has
        not the same true Type, else contents are compared (by
        C++ operator ==)

        :type other: OCC.wrapper.Transfer.Handle_Transfer_Finder
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_Equates(self, *args)


    def ValueType(self, *args):
        """
        ValueType(Handle_TransferBRep_ShapeMapper self) -> Handle_Standard_Type

        Returns the Type of the Value. By default, returns the
        DynamicType of <me>, but can be redefined

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_ValueType(self, *args)


    def ValueTypeName(self, *args):
        """
        ValueTypeName(Handle_TransferBRep_ShapeMapper self) -> Standard_CString

        Returns the name of the Type of the Value. Default is name
        of ValueType, unless it is for a non-handled object

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_ValueTypeName(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TransferBRep_ShapeMapper self) -> char const *

        :rtype: const char *

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TransferBRep.Handle_TransferBRep_ShapeMapper_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TransferBRep.Handle_TransferBRep_ShapeMapper_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetHashCode(self, *args):
        """
        GetHashCode(Handle_TransferBRep_ShapeMapper self) -> Standard_Integer

        Returns the HashCode which has been stored by SetHashCode
        (remark that HashCode could be deferred then be defined by
        sub-classes, the result is the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_GetHashCode(self, *args)


    def SetAttribute(self, *args):
        """
        SetAttribute(Handle_TransferBRep_ShapeMapper self, Standard_CString const name, Handle_Standard_Transient val)

        Adds an attribute with a given name (replaces the former one
        with the same name if already exists)

        :type name: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_SetAttribute(self, *args)


    def RemoveAttribute(self, *args):
        """
        RemoveAttribute(Handle_TransferBRep_ShapeMapper self, Standard_CString const name) -> Standard_Boolean

        Removes an attribute
        Returns True when done, False if this attribute did not exist

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_RemoveAttribute(self, *args)


    def GetAttribute(self, *args):
        """
        GetAttribute(Handle_TransferBRep_ShapeMapper self, Standard_CString const name, Handle_Standard_Type type, Handle_Standard_Transient val) -> Standard_Boolean

        Returns an attribute from its name, filtered by a type
        If no attribute has this name, or if it is not kind of this
        type, <val> is Null and returned value is False
        Else, it is True

        :type name: OCC.wrapper.Standard.Standard_CString
        :type type: OCC.wrapper.Standard.Handle_Standard_Type
        :type val: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_GetAttribute(self, *args)


    def Attribute(self, *args):
        """
        Attribute(Handle_TransferBRep_ShapeMapper self, Standard_CString const name) -> Handle_Standard_Transient

        Returns an attribute from its name. Null Handle if not recorded
        (whatever Transient, Integer, Real ...)

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_Attribute(self, *args)


    def AttributeType(self, *args):
        """
        AttributeType(Handle_TransferBRep_ShapeMapper self, Standard_CString const name) -> Interface_ParamType

        Returns the type of an attribute :
        ParamInt , ParamReal , ParamText (String) , ParamIdent (any)
        or ParamVoid (not recorded)

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Interface.Interface_ParamType

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_AttributeType(self, *args)


    def SetIntegerAttribute(self, *args):
        """
        SetIntegerAttribute(Handle_TransferBRep_ShapeMapper self, Standard_CString const name, Standard_Integer const val)

        Adds an integer value for an attribute

        :type name: OCC.wrapper.Standard.Standard_CString
        :type val: int

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_SetIntegerAttribute(self, *args)


    def GetIntegerAttribute(self, *args):
        """
        GetIntegerAttribute(Handle_TransferBRep_ShapeMapper self, Standard_CString const name) -> Standard_Boolean

        Returns an attribute from its name, as integer
        If no attribute has this name, or not an integer,
        <val> is 0 and returned value is False
        Else, it is True

        :type name: OCC.wrapper.Standard.Standard_CString
        :type val: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_GetIntegerAttribute(self, *args)


    def IntegerAttribute(self, *args):
        """
        IntegerAttribute(Handle_TransferBRep_ShapeMapper self, Standard_CString const name) -> Standard_Integer

        Returns an integer attribute from its name. 0 if not recorded

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_IntegerAttribute(self, *args)


    def SetRealAttribute(self, *args):
        """
        SetRealAttribute(Handle_TransferBRep_ShapeMapper self, Standard_CString const name, Standard_Real const val)

        Adds a real value for an attribute

        :type name: OCC.wrapper.Standard.Standard_CString
        :type val: float

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_SetRealAttribute(self, *args)


    def GetRealAttribute(self, *args):
        """
        GetRealAttribute(Handle_TransferBRep_ShapeMapper self, Standard_CString const name) -> Standard_Boolean

        Returns an attribute from its name, as real
        If no attribute has this name, or not a real
        <val> is 0.0 and returned value is False
        Else, it is True

        :type name: OCC.wrapper.Standard.Standard_CString
        :type val: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_GetRealAttribute(self, *args)


    def RealAttribute(self, *args):
        """
        RealAttribute(Handle_TransferBRep_ShapeMapper self, Standard_CString const name) -> Standard_Real

        Returns a real attribute from its name. 0.0 if not recorded

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_RealAttribute(self, *args)


    def SetStringAttribute(self, *args):
        """
        SetStringAttribute(Handle_TransferBRep_ShapeMapper self, Standard_CString const name, Standard_CString const val)

        Adds a String value for an attribute

        :type name: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.Standard.Standard_CString

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_SetStringAttribute(self, *args)


    def GetStringAttribute(self, *args):
        """
        GetStringAttribute(Handle_TransferBRep_ShapeMapper self, Standard_CString const name, Standard_CString & val) -> Standard_Boolean

        Returns an attribute from its name, as String
        If no attribute has this name, or not a String
        <val> is 0.0 and returned value is False
        Else, it is True

        :type name: OCC.wrapper.Standard.Standard_CString
        :type val: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_GetStringAttribute(self, *args)


    def StringAttribute(self, *args):
        """
        StringAttribute(Handle_TransferBRep_ShapeMapper self, Standard_CString const name) -> Standard_CString

        Returns a String attribute from its name. "" if not recorded

        :type name: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_StringAttribute(self, *args)


    def AttrList(self, *args):
        """
        AttrList(Handle_TransferBRep_ShapeMapper self) -> NCollection_DataMap< TCollection_AsciiString,opencascade::handle< Standard_Transient > > &

        Returns the exhaustive list of attributes

        :rtype: OCC.wrapper.Transfer.NCollection_DataMap_TCollection_AsciiString_Handle_Standard_Transient

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_AttrList(self, *args)


    def SameAttributes(self, *args):
        """
        SameAttributes(Handle_TransferBRep_ShapeMapper self, Handle_Transfer_Finder other)

        Gets the list of attributes from <other>, as such, i.e.
        not copied : attributes are shared, any attribute edited,
        added, or removed in <other> is also in <me> and vice versa
        The former list of attributes of <me> is dropped

        :type other: OCC.wrapper.Transfer.Handle_Transfer_Finder

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_SameAttributes(self, *args)


    def GetAttributes(self, *args):
        """
        GetAttributes(Handle_TransferBRep_ShapeMapper self, Handle_Transfer_Finder other, Standard_CString const fromname, Standard_Boolean const copied)

        Gets the list of attributes from <other>, by copying it
        By default, considers all the attributes from <other>
        If <fromname> is given, considers only the attributes with
        name beginning by <fromname>

        For each attribute, if <copied> is True (D), its value is also
        copied if it is a basic type (Integer,Real,String), else it
        remains shared between <other> and <me>

        These new attributes are added to the existing ones in <me>,
        in case of same name, they replace the existing ones

        :type other: OCC.wrapper.Transfer.Handle_Transfer_Finder
        :type fromname: OCC.wrapper.Standard.Standard_CString
        :type copied: bool

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_GetAttributes(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_TransferBRep_ShapeMapper self)

        Memory deallocator for transient classes


        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TransferBRep_ShapeMapper self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TransferBRep_ShapeMapper self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TransferBRep_ShapeMapper self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TransferBRep_ShapeMapper self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TransferBRep_ShapeMapper self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TransferBRep_ShapeMapper self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TransferBRep_ShapeMapper self)

        Increments the reference counter of this object


        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TransferBRep_ShapeMapper self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_ShapeMapper_DecrementRefCounter(self, *args)

Handle_TransferBRep_ShapeMapper_swigregister = _TransferBRep.Handle_TransferBRep_ShapeMapper_swigregister
Handle_TransferBRep_ShapeMapper_swigregister(Handle_TransferBRep_ShapeMapper)

def Handle_TransferBRep_ShapeMapper_DownCast(thing):
    return _TransferBRep.Handle_TransferBRep_ShapeMapper_DownCast(thing)
Handle_TransferBRep_ShapeMapper_DownCast = _TransferBRep.Handle_TransferBRep_ShapeMapper_DownCast

class Handle_TransferBRep_ShapeListBinder(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TransferBRep_ShapeListBinder self)

        Nullify the handle


        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TransferBRep_ShapeListBinder self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TransferBRep_ShapeListBinder self, TransferBRep_ShapeListBinder thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TransferBRep_ShapeListBinder self, Handle_TransferBRep_ShapeListBinder theHandle) -> Handle_TransferBRep_ShapeListBinder
        assign(Handle_TransferBRep_ShapeListBinder self, TransferBRep_ShapeListBinder thePtr) -> Handle_TransferBRep_ShapeListBinder
        assign(Handle_TransferBRep_ShapeListBinder self, Handle_TransferBRep_ShapeListBinder theHandle) -> Handle_TransferBRep_ShapeListBinder

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TransferBRep_ShapeListBinder self) -> TransferBRep_ShapeListBinder

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TransferBRep_ShapeListBinder self) -> TransferBRep_ShapeListBinder

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TransferBRep_ShapeListBinder self) -> TransferBRep_ShapeListBinder

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder___ref__(self, *args)


    def __hash__(self):
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TransferBRep.Handle_TransferBRep_ShapeListBinder___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TransferBRep.new_Handle_TransferBRep_ShapeListBinder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TransferBRep.Handle_TransferBRep_ShapeListBinder_DownCast)
    __swig_destroy__ = _TransferBRep.delete_Handle_TransferBRep_ShapeListBinder

    def IsMultiple(self, *args):
        """
        IsMultiple(Handle_TransferBRep_ShapeListBinder self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_IsMultiple(self, *args)


    def ResultType(self, *args):
        """
        ResultType(Handle_TransferBRep_ShapeListBinder self) -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_ResultType(self, *args)


    def ResultTypeName(self, *args):
        """
        ResultTypeName(Handle_TransferBRep_ShapeListBinder self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_ResultTypeName(self, *args)


    def AddResult(self, *args):
        """
        AddResult(Handle_TransferBRep_ShapeListBinder self, TopoDS_Shape res)

        Adds an item to the result list

        :type res: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_AddResult(self, *args)


    def Result(self, *args):
        """
        Result(Handle_TransferBRep_ShapeListBinder self) -> Handle_TopTools_HSequenceOfShape

        :rtype: OCC.wrapper.TopTools.Handle_TopTools_HSequenceOfShape

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_Result(self, *args)


    def SetResult(self, *args):
        """
        SetResult(Handle_TransferBRep_ShapeListBinder self, Standard_Integer const num, TopoDS_Shape res)

        Changes an already defined sub-result

        :type num: int
        :type res: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_SetResult(self, *args)


    def NbShapes(self, *args):
        """
        NbShapes(Handle_TransferBRep_ShapeListBinder self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_NbShapes(self, *args)


    def Shape(self, *args):
        """
        :type num: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TransferBRep.Handle_TransferBRep_ShapeListBinder_Shape(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ShapeType(self, *args):
        """
        ShapeType(Handle_TransferBRep_ShapeListBinder self, Standard_Integer const num) -> TopAbs_ShapeEnum

        :type num: int
        :rtype: OCC.wrapper.TopAbs.TopAbs_ShapeEnum

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_ShapeType(self, *args)


    def Vertex(self, *args):
        """
        Vertex(Handle_TransferBRep_ShapeListBinder self, Standard_Integer const num) -> TopoDS_Vertex

        :type num: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Vertex

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_Vertex(self, *args)


    def Edge(self, *args):
        """
        Edge(Handle_TransferBRep_ShapeListBinder self, Standard_Integer const num) -> TopoDS_Edge

        :type num: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_Edge(self, *args)


    def Wire(self, *args):
        """
        Wire(Handle_TransferBRep_ShapeListBinder self, Standard_Integer const num) -> TopoDS_Wire

        :type num: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Wire

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_Wire(self, *args)


    def Face(self, *args):
        """
        Face(Handle_TransferBRep_ShapeListBinder self, Standard_Integer const num) -> TopoDS_Face

        :type num: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_Face(self, *args)


    def Shell(self, *args):
        """
        Shell(Handle_TransferBRep_ShapeListBinder self, Standard_Integer const num) -> TopoDS_Shell

        :type num: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shell

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_Shell(self, *args)


    def Solid(self, *args):
        """
        Solid(Handle_TransferBRep_ShapeListBinder self, Standard_Integer const num) -> TopoDS_Solid

        :type num: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Solid

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_Solid(self, *args)


    def CompSolid(self, *args):
        """
        CompSolid(Handle_TransferBRep_ShapeListBinder self, Standard_Integer const num) -> TopoDS_CompSolid

        :type num: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_CompSolid

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_CompSolid(self, *args)


    def Compound(self, *args):
        """
        Compound(Handle_TransferBRep_ShapeListBinder self, Standard_Integer const num) -> TopoDS_Compound

        :type num: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Compound

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_Compound(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TransferBRep_ShapeListBinder self) -> char const *

        :rtype: const char *

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TransferBRep.Handle_TransferBRep_ShapeListBinder_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TransferBRep.Handle_TransferBRep_ShapeListBinder_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Merge(self, *args):
        """
        Merge(Handle_TransferBRep_ShapeListBinder self,  other)

        Merges basic data (Check, ExecStatus) from another Binder but
        keeps its result. Used when a binder is replaced by another
        one, this allows to keep messages

        :type other: OCC.wrapper.Transfer.Handle_Transfer_Binder

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_Merge(self, *args)


    def NextResult(self, *args):
        """
        NextResult(Handle_TransferBRep_ShapeListBinder self)

        Returns the next result, Null if none

        :rtype: OCC.wrapper.Transfer.Handle_Transfer_Binder

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_NextResult(self, *args)


    def HasResult(self, *args):
        """
        HasResult(Handle_TransferBRep_ShapeListBinder self) -> Standard_Boolean

        Returns True if a Result is available (StatusResult = Defined)
        A Unique Result will be gotten by Result (which must be
        defined in each sub-class according to result type)
        For a Multiple Result, see class MultipleBinder
        For other case, specific access has to be forecast

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_HasResult(self, *args)


    def SetAlreadyUsed(self, *args):
        """
        SetAlreadyUsed(Handle_TransferBRep_ShapeListBinder self)

        Declares that result is now used by another one, it means that
        it cannot be modified (by Rebind)


        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_SetAlreadyUsed(self, *args)


    def Status(self, *args):
        """
        Status(Handle_TransferBRep_ShapeListBinder self) -> Transfer_StatusResult

        Returns status, which can be Initial (not yet done), Made (a
        result is recorded, not yet shared), Used (it is shared and
        cannot be modified)

        :rtype: OCC.wrapper.Transfer.Transfer_StatusResult

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_Status(self, *args)


    def StatusExec(self, *args):
        """
        StatusExec(Handle_TransferBRep_ShapeListBinder self) -> Transfer_StatusExec

        Returns execution status

        :rtype: OCC.wrapper.Transfer.Transfer_StatusExec

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_StatusExec(self, *args)


    def SetStatusExec(self, *args):
        """
        SetStatusExec(Handle_TransferBRep_ShapeListBinder self, Transfer_StatusExec const stat)

        Modifies execution status; called by TransferProcess only
        (for StatusError, rather use SetError, below)

        :type stat: OCC.wrapper.Transfer.Transfer_StatusExec

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_SetStatusExec(self, *args)


    def AddFail(self, *args):
        """
        AddFail(Handle_TransferBRep_ShapeListBinder self, Standard_CString const mess, Standard_CString const orig)

        Used to declare an individual transfer as beeing erroneous
        (Status is set to Void, StatusExec is set to Error, <errmess>
        is added to Check's list of Fails)
        It is possible to record several messages of error

        It has same effect for TransferProcess as raising an exception
        during the operation of Transfer, except the Transfer tries to
        continue (as if ErrorHandle had been set)

        :type mess: OCC.wrapper.Standard.Standard_CString
        :type orig: OCC.wrapper.Standard.Standard_CString

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_AddFail(self, *args)


    def AddWarning(self, *args):
        """
        AddWarning(Handle_TransferBRep_ShapeListBinder self, Standard_CString const mess, Standard_CString const orig)

        Used to attach a Warning Message to an individual Transfer
        It has no effect on the Status

        :type mess: OCC.wrapper.Standard.Standard_CString
        :type orig: OCC.wrapper.Standard.Standard_CString

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_AddWarning(self, *args)


    def Check(self, *args):
        """
        Check(Handle_TransferBRep_ShapeListBinder self) -> Handle_Interface_Check

        Returns Check which stores Fail messages
        Note that no Entity is associated in this Check

        :rtype: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_Check(self, *args)


    def CCheck(self, *args):
        """
        CCheck(Handle_TransferBRep_ShapeListBinder self) -> Handle_Interface_Check

        Returns Check which stores Fail messages, in order to modify
        it (adding messages, or replacing it)

        :rtype: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_CCheck(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_TransferBRep_ShapeListBinder self)

        Memory deallocator for transient classes


        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TransferBRep_ShapeListBinder self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TransferBRep_ShapeListBinder self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TransferBRep_ShapeListBinder self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TransferBRep_ShapeListBinder self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TransferBRep_ShapeListBinder self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TransferBRep_ShapeListBinder self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TransferBRep_ShapeListBinder self)

        Increments the reference counter of this object


        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TransferBRep_ShapeListBinder self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_ShapeListBinder_DecrementRefCounter(self, *args)

Handle_TransferBRep_ShapeListBinder_swigregister = _TransferBRep.Handle_TransferBRep_ShapeListBinder_swigregister
Handle_TransferBRep_ShapeListBinder_swigregister(Handle_TransferBRep_ShapeListBinder)

def Handle_TransferBRep_ShapeListBinder_DownCast(thing):
    return _TransferBRep.Handle_TransferBRep_ShapeListBinder_DownCast(thing)
Handle_TransferBRep_ShapeListBinder_DownCast = _TransferBRep.Handle_TransferBRep_ShapeListBinder_DownCast

class Handle_TransferBRep_BinderOfShape(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TransferBRep_BinderOfShape self)

        Nullify the handle


        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TransferBRep_BinderOfShape self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TransferBRep_BinderOfShape self, TransferBRep_BinderOfShape thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TransferBRep_BinderOfShape self, Handle_TransferBRep_BinderOfShape theHandle) -> Handle_TransferBRep_BinderOfShape
        assign(Handle_TransferBRep_BinderOfShape self, TransferBRep_BinderOfShape thePtr) -> Handle_TransferBRep_BinderOfShape
        assign(Handle_TransferBRep_BinderOfShape self, Handle_TransferBRep_BinderOfShape theHandle) -> Handle_TransferBRep_BinderOfShape

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TransferBRep_BinderOfShape self) -> TransferBRep_BinderOfShape

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TransferBRep_BinderOfShape self) -> TransferBRep_BinderOfShape

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TransferBRep_BinderOfShape self) -> TransferBRep_BinderOfShape

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape___ref__(self, *args)


    def __hash__(self):
        return _TransferBRep.Handle_TransferBRep_BinderOfShape___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TransferBRep.Handle_TransferBRep_BinderOfShape___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TransferBRep.new_Handle_TransferBRep_BinderOfShape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TransferBRep.Handle_TransferBRep_BinderOfShape_DownCast)
    __swig_destroy__ = _TransferBRep.delete_Handle_TransferBRep_BinderOfShape

    def ResultType(self, *args):
        """
        ResultType(Handle_TransferBRep_BinderOfShape self) -> Handle_Standard_Type

        Returns the Type permitted for the Result, i.e. the Type
        of the Parameter Class <Shape from TopoDS> (statically defined)

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_ResultType(self, *args)


    def ResultTypeName(self, *args):
        """
        ResultTypeName(Handle_TransferBRep_BinderOfShape self) -> Standard_CString

        Returns the Type Name computed for the Result (dynamic)

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_ResultTypeName(self, *args)


    def SetResult(self, *args):
        """
        SetResult(Handle_TransferBRep_BinderOfShape self, TopoDS_Shape res)

        Defines the Result

        :type res: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_SetResult(self, *args)


    def Result(self, *args):
        """
        Returns the defined Result, if there is one

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TransferBRep.Handle_TransferBRep_BinderOfShape_Result(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CResult(self, *args):
        """
        CResult(Handle_TransferBRep_BinderOfShape self) -> TopoDS_Shape

        Returns the defined Result, if there is one, and allows to
        change it (avoids Result + SetResult).
        Admits that Result can be not yet defined
        Warning : a call to CResult causes Result to be known as defined

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_CResult(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TransferBRep_BinderOfShape self) -> char const *

        :rtype: const char *

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TransferBRep.Handle_TransferBRep_BinderOfShape_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TransferBRep.Handle_TransferBRep_BinderOfShape_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Merge(self, *args):
        """
        Merge(Handle_TransferBRep_BinderOfShape self,  other)

        Merges basic data (Check, ExecStatus) from another Binder but
        keeps its result. Used when a binder is replaced by another
        one, this allows to keep messages

        :type other: OCC.wrapper.Transfer.Handle_Transfer_Binder

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_Merge(self, *args)


    def IsMultiple(self, *args):
        """
        IsMultiple(Handle_TransferBRep_BinderOfShape self) -> Standard_Boolean

        Returns True if a Binder has several results, either by itself
        or because it has next results
        Can be defined by sub-classes.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_IsMultiple(self, *args)


    def AddResult(self, *args):
        """
        AddResult(Handle_TransferBRep_BinderOfShape self,  next)

        Adds a next result (at the end of the list)
        Remark : this information is not processed by Merge

        :type next: OCC.wrapper.Transfer.Handle_Transfer_Binder

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_AddResult(self, *args)


    def NextResult(self, *args):
        """
        NextResult(Handle_TransferBRep_BinderOfShape self)

        Returns the next result, Null if none

        :rtype: OCC.wrapper.Transfer.Handle_Transfer_Binder

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_NextResult(self, *args)


    def HasResult(self, *args):
        """
        HasResult(Handle_TransferBRep_BinderOfShape self) -> Standard_Boolean

        Returns True if a Result is available (StatusResult = Defined)
        A Unique Result will be gotten by Result (which must be
        defined in each sub-class according to result type)
        For a Multiple Result, see class MultipleBinder
        For other case, specific access has to be forecast

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_HasResult(self, *args)


    def SetAlreadyUsed(self, *args):
        """
        SetAlreadyUsed(Handle_TransferBRep_BinderOfShape self)

        Declares that result is now used by another one, it means that
        it cannot be modified (by Rebind)


        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_SetAlreadyUsed(self, *args)


    def Status(self, *args):
        """
        Status(Handle_TransferBRep_BinderOfShape self) -> Transfer_StatusResult

        Returns status, which can be Initial (not yet done), Made (a
        result is recorded, not yet shared), Used (it is shared and
        cannot be modified)

        :rtype: OCC.wrapper.Transfer.Transfer_StatusResult

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_Status(self, *args)


    def StatusExec(self, *args):
        """
        StatusExec(Handle_TransferBRep_BinderOfShape self) -> Transfer_StatusExec

        Returns execution status

        :rtype: OCC.wrapper.Transfer.Transfer_StatusExec

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_StatusExec(self, *args)


    def SetStatusExec(self, *args):
        """
        SetStatusExec(Handle_TransferBRep_BinderOfShape self, Transfer_StatusExec const stat)

        Modifies execution status; called by TransferProcess only
        (for StatusError, rather use SetError, below)

        :type stat: OCC.wrapper.Transfer.Transfer_StatusExec

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_SetStatusExec(self, *args)


    def AddFail(self, *args):
        """
        AddFail(Handle_TransferBRep_BinderOfShape self, Standard_CString const mess, Standard_CString const orig)

        Used to declare an individual transfer as beeing erroneous
        (Status is set to Void, StatusExec is set to Error, <errmess>
        is added to Check's list of Fails)
        It is possible to record several messages of error

        It has same effect for TransferProcess as raising an exception
        during the operation of Transfer, except the Transfer tries to
        continue (as if ErrorHandle had been set)

        :type mess: OCC.wrapper.Standard.Standard_CString
        :type orig: OCC.wrapper.Standard.Standard_CString

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_AddFail(self, *args)


    def AddWarning(self, *args):
        """
        AddWarning(Handle_TransferBRep_BinderOfShape self, Standard_CString const mess, Standard_CString const orig)

        Used to attach a Warning Message to an individual Transfer
        It has no effect on the Status

        :type mess: OCC.wrapper.Standard.Standard_CString
        :type orig: OCC.wrapper.Standard.Standard_CString

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_AddWarning(self, *args)


    def Check(self, *args):
        """
        Check(Handle_TransferBRep_BinderOfShape self) -> Handle_Interface_Check

        Returns Check which stores Fail messages
        Note that no Entity is associated in this Check

        :rtype: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_Check(self, *args)


    def CCheck(self, *args):
        """
        CCheck(Handle_TransferBRep_BinderOfShape self) -> Handle_Interface_Check

        Returns Check which stores Fail messages, in order to modify
        it (adding messages, or replacing it)

        :rtype: OCC.wrapper.Interface.Handle_Interface_Check

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_CCheck(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_TransferBRep_BinderOfShape self)

        Memory deallocator for transient classes


        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TransferBRep_BinderOfShape self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TransferBRep_BinderOfShape self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TransferBRep_BinderOfShape self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TransferBRep_BinderOfShape self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TransferBRep_BinderOfShape self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TransferBRep_BinderOfShape self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TransferBRep_BinderOfShape self)

        Increments the reference counter of this object


        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TransferBRep_BinderOfShape self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.Handle_TransferBRep_BinderOfShape_DecrementRefCounter(self, *args)

Handle_TransferBRep_BinderOfShape_swigregister = _TransferBRep.Handle_TransferBRep_BinderOfShape_swigregister
Handle_TransferBRep_BinderOfShape_swigregister(Handle_TransferBRep_BinderOfShape)

def Handle_TransferBRep_BinderOfShape_DownCast(thing):
    return _TransferBRep.Handle_TransferBRep_BinderOfShape_DownCast(thing)
Handle_TransferBRep_BinderOfShape_DownCast = _TransferBRep.Handle_TransferBRep_BinderOfShape_DownCast

class TransferBRep_ShapeInfo(object):
    """
    Gives informations on an object, see template DataInfo
    This class is for Shape
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Type(*args):
        """
        Type(TopoDS_Shape ent) -> Handle_Standard_Type

        Returns the Type attached to an object
        Here, TShape (Shape has no Dynamic Type)

        :type ent: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TransferBRep.TransferBRep_ShapeInfo_Type(*args)

    Type = staticmethod(Type)

    def TypeName(*args):
        """
        TypeName(TopoDS_Shape ent) -> Standard_CString

        Returns Type Name (string)
        Here, the true name of the Type of a Shape

        :type ent: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _TransferBRep.TransferBRep_ShapeInfo_TypeName(*args)

    TypeName = staticmethod(TypeName)

    def __init__(self):
        """
        Gives informations on an object, see template DataInfo
        This class is for Shape
        """
        this = _TransferBRep.new_TransferBRep_ShapeInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TransferBRep.delete_TransferBRep_ShapeInfo
TransferBRep_ShapeInfo_swigregister = _TransferBRep.TransferBRep_ShapeInfo_swigregister
TransferBRep_ShapeInfo_swigregister(TransferBRep_ShapeInfo)

def TransferBRep_ShapeInfo_Type(*args):
    """
    TransferBRep_ShapeInfo_Type(TopoDS_Shape ent) -> Handle_Standard_Type

    Returns the Type attached to an object
    Here, TShape (Shape has no Dynamic Type)

    :type ent: OCC.wrapper.TopoDS.TopoDS_Shape
    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TransferBRep.TransferBRep_ShapeInfo_Type(*args)

def TransferBRep_ShapeInfo_TypeName(*args):
    """
    TransferBRep_ShapeInfo_TypeName(TopoDS_Shape ent) -> Standard_CString

    Returns Type Name (string)
    Here, the true name of the Type of a Shape

    :type ent: OCC.wrapper.TopoDS.TopoDS_Shape
    :rtype: OCC.wrapper.Standard.Standard_CString

    """
    return _TransferBRep.TransferBRep_ShapeInfo_TypeName(*args)

class NCollection_Sequence_Handle_TransferBRep_TransferResultInfo(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self) -> NCollection_Sequence< opencascade::handle< TransferBRep_TransferResultInfo > >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self) -> NCollection_Sequence< opencascade::handle< TransferBRep_TransferResultInfo > >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self) -> NCollection_Sequence< opencascade::handle< TransferBRep_TransferResultInfo > >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self) -> NCollection_Sequence< opencascade::handle< TransferBRep_TransferResultInfo > >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _TransferBRep.new_NCollection_Sequence_Handle_TransferBRep_TransferResultInfo(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self)

        Reverse sequence


        """
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self, NCollection_Sequence_Handle_TransferBRep_TransferResultInfo theOther) -> NCollection_Sequence_Handle_TransferBRep_TransferResultInfo

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self, NCollection_Sequence_Handle_TransferBRep_TransferResultInfo theOther) -> NCollection_Sequence_Handle_TransferBRep_TransferResultInfo

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self, NCollection_Sequence< opencascade::handle< TransferBRep_TransferResultInfo > >::Iterator & thePosition)
        Remove(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self, Handle_TransferBRep_TransferResultInfo theItem)
        Append(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self, NCollection_Sequence_Handle_TransferBRep_TransferResultInfo theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self, Handle_TransferBRep_TransferResultInfo theItem)
        Prepend(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self, NCollection_Sequence_Handle_TransferBRep_TransferResultInfo theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self, Standard_Integer const theIndex, Handle_TransferBRep_TransferResultInfo theItem)
        InsertBefore(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self, Standard_Integer const theIndex, NCollection_Sequence_Handle_TransferBRep_TransferResultInfo theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self, NCollection_Sequence< opencascade::handle< TransferBRep_TransferResultInfo > >::Iterator & thePosition, Handle_TransferBRep_TransferResultInfo theItem)
        InsertAfter(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self, Standard_Integer const theIndex, NCollection_Sequence_Handle_TransferBRep_TransferResultInfo theSeq)
        InsertAfter(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self, Standard_Integer const theIndex, Handle_TransferBRep_TransferResultInfo theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self, Standard_Integer const theIndex, NCollection_Sequence_Handle_TransferBRep_TransferResultInfo theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self) -> Handle_TransferBRep_TransferResultInfo

        First item access

        :rtype: TheItemType &

        """
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self) -> Handle_TransferBRep_TransferResultInfo

        Last item access

        :rtype: TheItemType &

        """
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self, Standard_Integer const theIndex) -> Handle_TransferBRep_TransferResultInfo

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo self, Standard_Integer const theIndex, Handle_TransferBRep_TransferResultInfo theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_SetValue(self, *args)


    def __iter__(self):
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo___iter__(self)
    __swig_destroy__ = _TransferBRep.delete_NCollection_Sequence_Handle_TransferBRep_TransferResultInfo
NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_swigregister = _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_swigregister
NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_swigregister(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo)

def NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_delNode(*args):
    """
    NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_delNode(*args)

class NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _TransferBRep.new_NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TransferBRep.delete_NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_IteratorHelper

    def __next__(self):
        return _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_IteratorHelper___next__(self)
NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_IteratorHelper_swigregister = _TransferBRep.NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_IteratorHelper_swigregister
NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_IteratorHelper_swigregister(NCollection_Sequence_Handle_TransferBRep_TransferResultInfo_IteratorHelper)


try:
	TransferBRep_SequenceOfTransferResultInfo = NCollection_Sequence_Handle_TransferBRep_TransferResultInfo
except NameError:
	pass # does not exist, probably ignored

class TransferBRep_Reader(object):
    """
    This class offers a simple, easy to call, way of transferring
    data from interface files to Shapes from CasCade
    It must be specialized according to each norm/protocol, by :
    - defining how to read a file (specific method with protocol)
    - definig transfer, by providing an Actor
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TransferBRep_Reader self) -> TransferBRep_Reader

        Initializes a non-specialised Reader. Typically, for each norm
        or protocol, is will be required to define a specific Create
        to load a file and transfer it


        """
        this = _TransferBRep.new_TransferBRep_Reader(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def SetProtocol(self, *args):
        """
        SetProtocol(TransferBRep_Reader self, Handle_Interface_Protocol protocol)

        Records the protocol to be used for read and transfer roots

        :type protocol: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _TransferBRep.TransferBRep_Reader_SetProtocol(self, *args)


    def Protocol(self, *args):
        """
        Protocol(TransferBRep_Reader self) -> Handle_Interface_Protocol

        Returns the recorded Protocol

        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _TransferBRep.TransferBRep_Reader_Protocol(self, *args)


    def SetActor(self, *args):
        """
        SetActor(TransferBRep_Reader self, Handle_Transfer_ActorOfTransientProcess actor)

        Records the actor to be used for transfers

        :type actor: OCC.wrapper.Transfer.Handle_Transfer_ActorOfTransientProcess

        """
        return _TransferBRep.TransferBRep_Reader_SetActor(self, *args)


    def Actor(self, *args):
        """
        Actor(TransferBRep_Reader self) -> Handle_Transfer_ActorOfTransientProcess

        Returns the recorded Actor

        :rtype: OCC.wrapper.Transfer.Handle_Transfer_ActorOfTransientProcess

        """
        return _TransferBRep.TransferBRep_Reader_Actor(self, *args)


    def SetFileStatus(self, *args):
        """
        SetFileStatus(TransferBRep_Reader self, Standard_Integer const status)

        Sets File Status to be interpreted as follows :
        = 0 OK
        < 0 file not found
        > 0 read error, no Model could be created

        :type status: int

        """
        return _TransferBRep.TransferBRep_Reader_SetFileStatus(self, *args)


    def FileStatus(self, *args):
        """
        FileStatus(TransferBRep_Reader self) -> Standard_Integer

        Returns the File Status

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.TransferBRep_Reader_FileStatus(self, *args)


    def FileNotFound(self, *args):
        """
        FileNotFound(TransferBRep_Reader self) -> Standard_Boolean

        Returns True if FileStatus is for FileNotFound

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.TransferBRep_Reader_FileNotFound(self, *args)


    def SyntaxError(self, *args):
        """
        SyntaxError(TransferBRep_Reader self) -> Standard_Boolean

        Returns True if FileStatus is for Error during read
        (major error; for local error, see CheckModel)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.TransferBRep_Reader_SyntaxError(self, *args)


    def SetModel(self, *args):
        """
        SetModel(TransferBRep_Reader self, Handle_Interface_InterfaceModel model)

        Specifies a Model to work on
        Also clears the result and Done status

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _TransferBRep.TransferBRep_Reader_SetModel(self, *args)


    def Model(self, *args):
        """
        Model(TransferBRep_Reader self) -> Handle_Interface_InterfaceModel

        Returns the Model to be worked on

        :rtype: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _TransferBRep.TransferBRep_Reader_Model(self, *args)


    def Clear(self, *args):
        """
        Clear(TransferBRep_Reader self)

        clears the result and Done status. But not the Model.


        """
        return _TransferBRep.TransferBRep_Reader_Clear(self, *args)


    def CheckStatusModel(self, *args):
        """
        CheckStatusModel(TransferBRep_Reader self, Standard_Boolean const withprint) -> Standard_Boolean

        Checks the Model. Returns True if there is NO FAIL at all
        (regardless Warnings)
        If <withprint> is True, also sends Checks on standard output

        :type withprint: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.TransferBRep_Reader_CheckStatusModel(self, *args)


    def CheckListModel(self, *args):
        """
        CheckListModel(TransferBRep_Reader self) -> Interface_CheckIterator

        Checks the Model (complete : syntax + semantic) and returns
        the produced Check List

        :rtype: OCC.wrapper.Interface.Interface_CheckIterator

        """
        return _TransferBRep.TransferBRep_Reader_CheckListModel(self, *args)


    def ModeNewTransfer(self, *args):
        """
        ModeNewTransfer(TransferBRep_Reader self) -> Standard_Boolean &

        Returns (by Reference, hence can be changed) the Mode for new
        Transfer : True (D) means that each new Transfer produces a
        new TransferProcess. Else keeps the original one but each
        Transfer clears its (former results are not kept)

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.TransferBRep_Reader_ModeNewTransfer(self, *args)


    def BeginTransfer(self, *args):
        """
        BeginTransfer(TransferBRep_Reader self) -> Standard_Boolean

        Initializes the Reader for a Transfer (one,roots, or list)
        Also calls PrepareTransfer
        Returns True when done, False if could not be done

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.TransferBRep_Reader_BeginTransfer(self, *args)


    def EndTransfer(self, *args):
        """
        EndTransfer(TransferBRep_Reader self)

        Ebds a Transfer (one, roots or list) by recording its result


        """
        return _TransferBRep.TransferBRep_Reader_EndTransfer(self, *args)


    def PrepareTransfer(self, *args):
        """
        PrepareTransfer(TransferBRep_Reader self)

        Prepares the Transfer. Also can act on the Actor or change the
        TransientProcess if required.
        Should not set the Actor into the TransientProcess, it is done
        by caller. The provided default does nothing.


        """
        return _TransferBRep.TransferBRep_Reader_PrepareTransfer(self, *args)


    def TransferRoots(self, *args):
        """
        TransferRoots(TransferBRep_Reader self)

        Transfers all Root Entities which are recognized as Geom-Topol
        The result will be a list of Shapes.
        This method calls user redefinable PrepareTransfer
        Remark : former result is cleared


        """
        return _TransferBRep.TransferBRep_Reader_TransferRoots(self, *args)


    def Transfer(self, *args):
        """
        Transfer(TransferBRep_Reader self, Standard_Integer const num) -> Standard_Boolean

        Transfers an Entity given its rank in the Model (Root or not)
        Returns True if it is recognized as Geom-Topol.
        (But it can have failed : see IsDone)

        :type num: int
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.TransferBRep_Reader_Transfer(self, *args)


    def TransferList(self, *args):
        """
        TransferList(TransferBRep_Reader self, Handle_TColStd_HSequenceOfTransient list)

        Transfers a list of Entities (only the ones also in the Model)
        Remark : former result is cleared

        :type list: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfTransient

        """
        return _TransferBRep.TransferBRep_Reader_TransferList(self, *args)


    def IsDone(self, *args):
        """
        IsDone(TransferBRep_Reader self) -> Standard_Boolean

        Returns True if the LAST Transfer/TransferRoots was a success

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.TransferBRep_Reader_IsDone(self, *args)


    def NbShapes(self, *args):
        """
        NbShapes(TransferBRep_Reader self) -> Standard_Integer

        Returns the count of produced Shapes (roots)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.TransferBRep_Reader_NbShapes(self, *args)


    def Shapes(self, *args):
        """
        Shapes(TransferBRep_Reader self) -> Handle_TopTools_HSequenceOfShape

        Returns the complete list of produced Shapes

        :rtype: OCC.wrapper.TopTools.Handle_TopTools_HSequenceOfShape

        """
        return _TransferBRep.TransferBRep_Reader_Shapes(self, *args)


    def Shape(self, *args):
        """
        Returns a Shape given its rank, by default the first one

        :type num: int
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        res = _TransferBRep.TransferBRep_Reader_Shape(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ShapeResult(self, *args):
        """
        ShapeResult(TransferBRep_Reader self, Handle_Standard_Transient ent) -> TopoDS_Shape

        Returns a Shape produced from a given entity (if it was
        individually transferred or if an intermediate result is
        known). If no Shape is bound with <ent>, returns a Null Shape
        Warning : Runs on the last call to Transfer,TransferRoots,TransferList

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TransferBRep.TransferBRep_Reader_ShapeResult(self, *args)


    def OneShape(self, *args):
        """
        OneShape(TransferBRep_Reader self) -> TopoDS_Shape

        Returns a unique Shape for the result :
        - a void Shape (type = SHAPE) if result is empty
        - a simple Shape if result has only one : returns this one
        - a Compound if result has more than one Shape

        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TransferBRep.TransferBRep_Reader_OneShape(self, *args)


    def NbTransients(self, *args):
        """
        NbTransients(TransferBRep_Reader self) -> Standard_Integer

        Returns the count of produced Transient Results (roots)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TransferBRep.TransferBRep_Reader_NbTransients(self, *args)


    def Transients(self, *args):
        """
        Transients(TransferBRep_Reader self) -> Handle_TColStd_HSequenceOfTransient

        Returns the complete list of produced Transient Results

        :rtype: OCC.wrapper.TColStd.Handle_TColStd_HSequenceOfTransient

        """
        return _TransferBRep.TransferBRep_Reader_Transients(self, *args)


    def Transient(self, *args):
        """
        Transient(TransferBRep_Reader self, Standard_Integer const num=1) -> Handle_Standard_Transient

        Returns a Transient Root Result, given its rank (by default
        the first one)

        :type num: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _TransferBRep.TransferBRep_Reader_Transient(self, *args)


    def CheckStatusResult(self, *args):
        """
        CheckStatusResult(TransferBRep_Reader self, Standard_Boolean const withprints) -> Standard_Boolean

        Checks the Result of last Transfer (individual or roots, no
        cumulation on several transfers). Returns True if NO fail
        occured during Transfer (queries the TransientProcess)

        :type withprints: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TransferBRep.TransferBRep_Reader_CheckStatusResult(self, *args)


    def CheckListResult(self, *args):
        """
        CheckListResult(TransferBRep_Reader self) -> Interface_CheckIterator

        Checks the Result of last Transfer (individual or roots, no
        cumulation on several transfers) and returns the produced list

        :rtype: OCC.wrapper.Interface.Interface_CheckIterator

        """
        return _TransferBRep.TransferBRep_Reader_CheckListResult(self, *args)


    def TransientProcess(self, *args):
        """
        TransientProcess(TransferBRep_Reader self) -> Handle_Transfer_TransientProcess

        Returns the TransientProcess. It records informations about
        the very last transfer done. Null if no transfer yet done.
        Can be used for queries more accurate than the default ones.

        :rtype: OCC.wrapper.Transfer.Handle_Transfer_TransientProcess

        """
        return _TransferBRep.TransferBRep_Reader_TransientProcess(self, *args)

    __swig_destroy__ = _TransferBRep.delete_TransferBRep_Reader
TransferBRep_Reader_swigregister = _TransferBRep.TransferBRep_Reader_swigregister
TransferBRep_Reader_swigregister(TransferBRep_Reader)



