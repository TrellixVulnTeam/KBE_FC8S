# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BinLDrivers')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BinLDrivers')
    _BinLDrivers = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BinLDrivers', [dirname(__file__)])
        except ImportError:
            import _BinLDrivers
            return _BinLDrivers
        try:
            _mod = imp.load_module('_BinLDrivers', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BinLDrivers = swig_import_helper()
    del swig_import_helper
else:
    import _BinLDrivers
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BinLDrivers.delete_SwigPyIterator

    def value(self):
        return _BinLDrivers.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BinLDrivers.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BinLDrivers.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BinLDrivers.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BinLDrivers.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BinLDrivers.SwigPyIterator_copy(self)

    def next(self):
        return _BinLDrivers.SwigPyIterator_next(self)

    def __next__(self):
        return _BinLDrivers.SwigPyIterator___next__(self)

    def previous(self):
        return _BinLDrivers.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BinLDrivers.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BinLDrivers.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BinLDrivers.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BinLDrivers.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BinLDrivers.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BinLDrivers.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BinLDrivers.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BinLDrivers.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BinLDrivers.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_BinLDrivers.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _BinLDrivers.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BinLDrivers.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinLDrivers.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _BinLDrivers.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _BinLDrivers.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _BinLDrivers.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BinLDrivers.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_BinLDrivers.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _BinLDrivers.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BinLDrivers.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinLDrivers.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _BinLDrivers.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _BinLDrivers.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _BinLDrivers.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _BinLDrivers.ptr_to_number(item)
ptr_to_number = _BinLDrivers.ptr_to_number

def HashCode(*args):
    return _BinLDrivers.HashCode(*args)
HashCode = _BinLDrivers.HashCode

def ptr_equal(a, b):
    return _BinLDrivers.ptr_equal(a, b)
ptr_equal = _BinLDrivers.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDM
else:
    import CDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Resource
else:
    import Resource
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Storage
else:
    import Storage
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDocStd
else:
    import TDocStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import CDF
else:
    import CDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import PCDM
else:
    import PCDM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import LDOM
else:
    import LDOM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BinMDF
else:
    import BinMDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BinObjMgt
else:
    import BinObjMgt
del _swig_python_version_info
BinLDrivers_ENDATTRLIST = _BinLDrivers.BinLDrivers_ENDATTRLIST
BinLDrivers_ENDLABEL = _BinLDrivers.BinLDrivers_ENDLABEL
class BinLDrivers_DocumentStorageDriver(PCDM.PCDM_StorageDriver):
    """persistent implemention of storage a document in a binary file"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinLDrivers_DocumentStorageDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinLDrivers_DocumentStorageDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinLDrivers_DocumentStorageDriver self) -> BinLDrivers_DocumentStorageDriver

        Constructor


        """
        this = _BinLDrivers.new_BinLDrivers_DocumentStorageDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Write(self, *args):
        """
        Write(BinLDrivers_DocumentStorageDriver self, Handle_CDM_Document theDocument, TCollection_ExtendedString theFileName)
        Write(BinLDrivers_DocumentStorageDriver self, Handle_CDM_Document theDocument, Standard_OStream & theOStream)

        Write <theDocument> to theOStream

        :type theDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :type theOStream: OCC.wrapper.Standard.Standard_OStream

        """
        return _BinLDrivers.BinLDrivers_DocumentStorageDriver_Write(self, *args)


    def AttributeDrivers(self, *args):
        """
        AttributeDrivers(BinLDrivers_DocumentStorageDriver self, Handle_Message_Messenger theMsgDriver) -> Handle_BinMDF_ADriverTable

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.BinMDF.Handle_BinMDF_ADriverTable

        """
        return _BinLDrivers.BinLDrivers_DocumentStorageDriver_AttributeDrivers(self, *args)


    def AddSection(self, *args):
        """
        AddSection(BinLDrivers_DocumentStorageDriver self, TCollection_AsciiString theName, Standard_Boolean const isPostRead)

        Create a section that should be written after the OCAF data

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type isPostRead: bool

        """
        return _BinLDrivers.BinLDrivers_DocumentStorageDriver_AddSection(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinLDrivers.BinLDrivers_DocumentStorageDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinLDrivers.BinLDrivers_DocumentStorageDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinLDrivers.BinLDrivers_DocumentStorageDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinLDrivers.delete_BinLDrivers_DocumentStorageDriver
BinLDrivers_DocumentStorageDriver_swigregister = _BinLDrivers.BinLDrivers_DocumentStorageDriver_swigregister
BinLDrivers_DocumentStorageDriver_swigregister(BinLDrivers_DocumentStorageDriver)

def BinLDrivers_DocumentStorageDriver_get_type_name(*args):
    """
    BinLDrivers_DocumentStorageDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinLDrivers.BinLDrivers_DocumentStorageDriver_get_type_name(*args)

def BinLDrivers_DocumentStorageDriver_get_type_descriptor(*args):
    """
    BinLDrivers_DocumentStorageDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinLDrivers.BinLDrivers_DocumentStorageDriver_get_type_descriptor(*args)

class BinLDrivers_DocumentRetrievalDriver(PCDM.PCDM_RetrievalDriver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinLDrivers_DocumentRetrievalDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinLDrivers_DocumentRetrievalDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinLDrivers_DocumentRetrievalDriver self) -> BinLDrivers_DocumentRetrievalDriver

        Constructor


        """
        this = _BinLDrivers.new_BinLDrivers_DocumentRetrievalDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def CreateDocument(self, *args):
        """
        CreateDocument(BinLDrivers_DocumentRetrievalDriver self) -> Handle_CDM_Document

        pure virtual method definition

        :rtype: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _BinLDrivers.BinLDrivers_DocumentRetrievalDriver_CreateDocument(self, *args)


    def Read(self, *args):
        """
        Read(BinLDrivers_DocumentRetrievalDriver self, TCollection_ExtendedString theFileName, Handle_CDM_Document theNewDocument, Handle_CDM_Application theApplication)
        Read(BinLDrivers_DocumentRetrievalDriver self, Standard_IStream & theIStream, Handle_Storage_Data theStorageData, Handle_CDM_Document theDoc, Handle_CDM_Application theApplication)

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type theStorageData: OCC.wrapper.Storage.Handle_Storage_Data
        :type theDoc: OCC.wrapper.CDM.Handle_CDM_Document
        :type theApplication: OCC.wrapper.CDM.Handle_CDM_Application

        """
        return _BinLDrivers.BinLDrivers_DocumentRetrievalDriver_Read(self, *args)


    def AttributeDrivers(self, *args):
        """
        AttributeDrivers(BinLDrivers_DocumentRetrievalDriver self, Handle_Message_Messenger theMsgDriver) -> Handle_BinMDF_ADriverTable

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.BinMDF.Handle_BinMDF_ADriverTable

        """
        return _BinLDrivers.BinLDrivers_DocumentRetrievalDriver_AttributeDrivers(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinLDrivers.BinLDrivers_DocumentRetrievalDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinLDrivers.BinLDrivers_DocumentRetrievalDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinLDrivers.BinLDrivers_DocumentRetrievalDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinLDrivers.delete_BinLDrivers_DocumentRetrievalDriver
BinLDrivers_DocumentRetrievalDriver_swigregister = _BinLDrivers.BinLDrivers_DocumentRetrievalDriver_swigregister
BinLDrivers_DocumentRetrievalDriver_swigregister(BinLDrivers_DocumentRetrievalDriver)

def BinLDrivers_DocumentRetrievalDriver_get_type_name(*args):
    """
    BinLDrivers_DocumentRetrievalDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinLDrivers.BinLDrivers_DocumentRetrievalDriver_get_type_name(*args)

def BinLDrivers_DocumentRetrievalDriver_get_type_descriptor(*args):
    """
    BinLDrivers_DocumentRetrievalDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinLDrivers.BinLDrivers_DocumentRetrievalDriver_get_type_descriptor(*args)

class Handle_BinLDrivers_DocumentStorageDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinLDrivers_DocumentStorageDriver self)

        Nullify the handle


        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinLDrivers_DocumentStorageDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinLDrivers_DocumentStorageDriver self, BinLDrivers_DocumentStorageDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinLDrivers_DocumentStorageDriver self, Handle_BinLDrivers_DocumentStorageDriver theHandle) -> Handle_BinLDrivers_DocumentStorageDriver
        assign(Handle_BinLDrivers_DocumentStorageDriver self, BinLDrivers_DocumentStorageDriver thePtr) -> Handle_BinLDrivers_DocumentStorageDriver
        assign(Handle_BinLDrivers_DocumentStorageDriver self, Handle_BinLDrivers_DocumentStorageDriver theHandle) -> Handle_BinLDrivers_DocumentStorageDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinLDrivers_DocumentStorageDriver self) -> BinLDrivers_DocumentStorageDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinLDrivers_DocumentStorageDriver self) -> BinLDrivers_DocumentStorageDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinLDrivers_DocumentStorageDriver self) -> BinLDrivers_DocumentStorageDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver___ref__(self, *args)


    def __hash__(self):
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinLDrivers.new_Handle_BinLDrivers_DocumentStorageDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_DownCast)
    __swig_destroy__ = _BinLDrivers.delete_Handle_BinLDrivers_DocumentStorageDriver

    def Write(self, *args):
        """
        Write(Handle_BinLDrivers_DocumentStorageDriver self, Handle_CDM_Document theDocument, TCollection_ExtendedString theFileName)
        Write(Handle_BinLDrivers_DocumentStorageDriver self, Handle_CDM_Document theDocument, Standard_OStream & theOStream)

        Write <theDocument> to theOStream

        :type theDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :type theOStream: OCC.wrapper.Standard.Standard_OStream

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_Write(self, *args)


    def AttributeDrivers(self, *args):
        """
        AttributeDrivers(Handle_BinLDrivers_DocumentStorageDriver self, Handle_Message_Messenger theMsgDriver) -> Handle_BinMDF_ADriverTable

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.BinMDF.Handle_BinMDF_ADriverTable

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_AttributeDrivers(self, *args)


    def AddSection(self, *args):
        """
        AddSection(Handle_BinLDrivers_DocumentStorageDriver self, TCollection_AsciiString theName, Standard_Boolean const isPostRead)

        Create a section that should be written after the OCAF data

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type isPostRead: bool

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_AddSection(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinLDrivers_DocumentStorageDriver self) -> char const *

        :rtype: const char *

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Make(self, *args):
        """
        Make(Handle_BinLDrivers_DocumentStorageDriver self, Handle_CDM_Document aDocument) -> Handle_PCDM_Document
        Make(Handle_BinLDrivers_DocumentStorageDriver self, Handle_CDM_Document aDocument, NCollection_Sequence_Handle_PCDM_Document Documents)

        By default, puts  in the Sequence the  document returns
        by the previous Make method.

        :type aDocument: OCC.wrapper.CDM.Handle_CDM_Document
        :type Documents: OCC.wrapper.PCDM.PCDM_SequenceOfDocument

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_Make(self, *args)


    def SetFormat(self, *args):
        """
        SetFormat(Handle_BinLDrivers_DocumentStorageDriver self, TCollection_ExtendedString aformat)

        :type aformat: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_SetFormat(self, *args)


    def GetFormat(self, *args):
        """
        GetFormat(Handle_BinLDrivers_DocumentStorageDriver self) -> TCollection_ExtendedString

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_GetFormat(self, *args)


    def IsError(self, *args):
        """
        IsError(Handle_BinLDrivers_DocumentStorageDriver self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_IsError(self, *args)


    def SetIsError(self, *args):
        """
        SetIsError(Handle_BinLDrivers_DocumentStorageDriver self, Standard_Boolean const theIsError)

        :type theIsError: bool

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_SetIsError(self, *args)


    def GetStoreStatus(self, *args):
        """
        GetStoreStatus(Handle_BinLDrivers_DocumentStorageDriver self) -> PCDM_StoreStatus

        :rtype: OCC.wrapper.PCDM.PCDM_StoreStatus

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_GetStoreStatus(self, *args)


    def SetStoreStatus(self, *args):
        """
        SetStoreStatus(Handle_BinLDrivers_DocumentStorageDriver self, PCDM_StoreStatus const theStoreStatus)

        :type theStoreStatus: OCC.wrapper.PCDM.PCDM_StoreStatus

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_SetStoreStatus(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_BinLDrivers_DocumentStorageDriver self)

        Memory deallocator for transient classes


        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinLDrivers_DocumentStorageDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinLDrivers_DocumentStorageDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinLDrivers_DocumentStorageDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinLDrivers_DocumentStorageDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinLDrivers_DocumentStorageDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinLDrivers_DocumentStorageDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinLDrivers_DocumentStorageDriver self)

        Increments the reference counter of this object


        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinLDrivers_DocumentStorageDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_DecrementRefCounter(self, *args)

Handle_BinLDrivers_DocumentStorageDriver_swigregister = _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_swigregister
Handle_BinLDrivers_DocumentStorageDriver_swigregister(Handle_BinLDrivers_DocumentStorageDriver)

def Handle_BinLDrivers_DocumentStorageDriver_DownCast(thing):
    return _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_DownCast(thing)
Handle_BinLDrivers_DocumentStorageDriver_DownCast = _BinLDrivers.Handle_BinLDrivers_DocumentStorageDriver_DownCast

class Handle_BinLDrivers_DocumentRetrievalDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinLDrivers_DocumentRetrievalDriver self)

        Nullify the handle


        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinLDrivers_DocumentRetrievalDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinLDrivers_DocumentRetrievalDriver self, BinLDrivers_DocumentRetrievalDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinLDrivers_DocumentRetrievalDriver self, Handle_BinLDrivers_DocumentRetrievalDriver theHandle) -> Handle_BinLDrivers_DocumentRetrievalDriver
        assign(Handle_BinLDrivers_DocumentRetrievalDriver self, BinLDrivers_DocumentRetrievalDriver thePtr) -> Handle_BinLDrivers_DocumentRetrievalDriver
        assign(Handle_BinLDrivers_DocumentRetrievalDriver self, Handle_BinLDrivers_DocumentRetrievalDriver theHandle) -> Handle_BinLDrivers_DocumentRetrievalDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinLDrivers_DocumentRetrievalDriver self) -> BinLDrivers_DocumentRetrievalDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinLDrivers_DocumentRetrievalDriver self) -> BinLDrivers_DocumentRetrievalDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinLDrivers_DocumentRetrievalDriver self) -> BinLDrivers_DocumentRetrievalDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver___ref__(self, *args)


    def __hash__(self):
        return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinLDrivers.new_Handle_BinLDrivers_DocumentRetrievalDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_DownCast)
    __swig_destroy__ = _BinLDrivers.delete_Handle_BinLDrivers_DocumentRetrievalDriver

    def CreateDocument(self, *args):
        """
        CreateDocument(Handle_BinLDrivers_DocumentRetrievalDriver self) -> Handle_CDM_Document

        pure virtual method definition

        :rtype: OCC.wrapper.CDM.Handle_CDM_Document

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_CreateDocument(self, *args)


    def Read(self, *args):
        """
        Read(Handle_BinLDrivers_DocumentRetrievalDriver self, TCollection_ExtendedString theFileName, Handle_CDM_Document theNewDocument, Handle_CDM_Application theApplication)
        Read(Handle_BinLDrivers_DocumentRetrievalDriver self, Standard_IStream & theIStream, Handle_Storage_Data theStorageData, Handle_CDM_Document theDoc, Handle_CDM_Application theApplication)

        :type theIStream: OCC.wrapper.Standard.Standard_IStream
        :type theStorageData: OCC.wrapper.Storage.Handle_Storage_Data
        :type theDoc: OCC.wrapper.CDM.Handle_CDM_Document
        :type theApplication: OCC.wrapper.CDM.Handle_CDM_Application

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_Read(self, *args)


    def AttributeDrivers(self, *args):
        """
        AttributeDrivers(Handle_BinLDrivers_DocumentRetrievalDriver self, Handle_Message_Messenger theMsgDriver) -> Handle_BinMDF_ADriverTable

        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.BinMDF.Handle_BinMDF_ADriverTable

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_AttributeDrivers(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinLDrivers_DocumentRetrievalDriver self) -> char const *

        :rtype: const char *

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DocumentVersion(self, *args):
        """
        DocumentVersion(Handle_BinLDrivers_DocumentRetrievalDriver self, TCollection_ExtendedString theFileName, Handle_Message_Messenger theMsgDriver) -> Standard_Integer

        :type theFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_DocumentVersion(self, *args)


    def ReferenceCounter(self, *args):
        """
        ReferenceCounter(Handle_BinLDrivers_DocumentRetrievalDriver self, TCollection_ExtendedString theFileName, Handle_Message_Messenger theMsgDriver) -> Standard_Integer

        :type theFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type theMsgDriver: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_ReferenceCounter(self, *args)


    def SetFormat(self, *args):
        """
        SetFormat(Handle_BinLDrivers_DocumentRetrievalDriver self, TCollection_ExtendedString aformat)

        :type aformat: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_SetFormat(self, *args)


    def GetFormat(self, *args):
        """
        GetFormat(Handle_BinLDrivers_DocumentRetrievalDriver self) -> TCollection_ExtendedString

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_GetFormat(self, *args)


    def GetStatus(self, *args):
        """
        GetStatus(Handle_BinLDrivers_DocumentRetrievalDriver self) -> PCDM_ReaderStatus

        :rtype: OCC.wrapper.PCDM.PCDM_ReaderStatus

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_GetStatus(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_BinLDrivers_DocumentRetrievalDriver self)

        Memory deallocator for transient classes


        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinLDrivers_DocumentRetrievalDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinLDrivers_DocumentRetrievalDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinLDrivers_DocumentRetrievalDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinLDrivers_DocumentRetrievalDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinLDrivers_DocumentRetrievalDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinLDrivers_DocumentRetrievalDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinLDrivers_DocumentRetrievalDriver self)

        Increments the reference counter of this object


        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinLDrivers_DocumentRetrievalDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_DecrementRefCounter(self, *args)

Handle_BinLDrivers_DocumentRetrievalDriver_swigregister = _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_swigregister
Handle_BinLDrivers_DocumentRetrievalDriver_swigregister(Handle_BinLDrivers_DocumentRetrievalDriver)

def Handle_BinLDrivers_DocumentRetrievalDriver_DownCast(thing):
    return _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_DownCast(thing)
Handle_BinLDrivers_DocumentRetrievalDriver_DownCast = _BinLDrivers.Handle_BinLDrivers_DocumentRetrievalDriver_DownCast

class BinLDrivers_(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Factory(*args):
        """
        Factory(Standard_GUID theGUID) -> Handle_Standard_Transient

        :type theGUID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _BinLDrivers.BinLDrivers__Factory(*args)

    Factory = staticmethod(Factory)

    def DefineFormat(*args):
        """
        DefineFormat(Handle_TDocStd_Application theApp)

        Defines format "BinLOcaf" and registers its read and write drivers
        in the specified application

        :type theApp: OCC.wrapper.TDocStd.Handle_TDocStd_Application

        """
        return _BinLDrivers.BinLDrivers__DefineFormat(*args)

    DefineFormat = staticmethod(DefineFormat)

    def AttributeDrivers(*args):
        """
        AttributeDrivers(Handle_Message_Messenger MsgDrv) -> Handle_BinMDF_ADriverTable

        Creates a table of the supported drivers' types

        :type MsgDrv: OCC.wrapper.Message.Handle_Message_Messenger
        :rtype: OCC.wrapper.BinMDF.Handle_BinMDF_ADriverTable

        """
        return _BinLDrivers.BinLDrivers__AttributeDrivers(*args)

    AttributeDrivers = staticmethod(AttributeDrivers)

    def StorageVersion(*args):
        """
        StorageVersion() -> TCollection_AsciiString

        returns last storage version

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _BinLDrivers.BinLDrivers__StorageVersion(*args)

    StorageVersion = staticmethod(StorageVersion)

    def __init__(self):
        this = _BinLDrivers.new_BinLDrivers_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinLDrivers.delete_BinLDrivers_
BinLDrivers__swigregister = _BinLDrivers.BinLDrivers__swigregister
BinLDrivers__swigregister(BinLDrivers_)

def BinLDrivers__Factory(*args):
    """
    BinLDrivers__Factory(Standard_GUID theGUID) -> Handle_Standard_Transient

    :type theGUID: OCC.wrapper.Standard.Standard_GUID
    :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

    """
    return _BinLDrivers.BinLDrivers__Factory(*args)

def BinLDrivers__DefineFormat(*args):
    """
    BinLDrivers__DefineFormat(Handle_TDocStd_Application theApp)

    Defines format "BinLOcaf" and registers its read and write drivers
    in the specified application

    :type theApp: OCC.wrapper.TDocStd.Handle_TDocStd_Application

    """
    return _BinLDrivers.BinLDrivers__DefineFormat(*args)

def BinLDrivers__AttributeDrivers(*args):
    """
    BinLDrivers__AttributeDrivers(Handle_Message_Messenger MsgDrv) -> Handle_BinMDF_ADriverTable

    Creates a table of the supported drivers' types

    :type MsgDrv: OCC.wrapper.Message.Handle_Message_Messenger
    :rtype: OCC.wrapper.BinMDF.Handle_BinMDF_ADriverTable

    """
    return _BinLDrivers.BinLDrivers__AttributeDrivers(*args)

def BinLDrivers__StorageVersion(*args):
    """
    BinLDrivers__StorageVersion() -> TCollection_AsciiString

    returns last storage version

    :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

    """
    return _BinLDrivers.BinLDrivers__StorageVersion(*args)

class BinLDrivers_DocumentSection(object):
    """
    More or less independent part of the saved/restored document
    that is distinct from OCAF data themselves but may be referred
    by them.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BinLDrivers_DocumentSection self) -> BinLDrivers_DocumentSection
        __init__(BinLDrivers_DocumentSection self, TCollection_AsciiString theName, Standard_Boolean const isPostRead) -> BinLDrivers_DocumentSection

        Constructor

        :type theName: OCC.wrapper.TCollection.TCollection_AsciiString
        :type isPostRead: bool

        """
        this = _BinLDrivers.new_BinLDrivers_DocumentSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Name(self, *args):
        """
        Query the name of the section.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinLDrivers.BinLDrivers_DocumentSection_Name(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsPostRead(self, *args):
        """
        IsPostRead(BinLDrivers_DocumentSection self) -> Standard_Boolean

        Query the status: if the Section should be read after OCAF;
        False means that the Section is read before starting to
        read OCAF data.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinLDrivers.BinLDrivers_DocumentSection_IsPostRead(self, *args)


    def Offset(self, *args):
        """
        Offset(BinLDrivers_DocumentSection self) -> uint64_t

        Query the offset of the section in the persistent file

        :rtype: uint64_t

        """
        return _BinLDrivers.BinLDrivers_DocumentSection_Offset(self, *args)


    def SetOffset(self, *args):
        """
        SetOffset(BinLDrivers_DocumentSection self, uint64_t const theOffset)

        Set the offset of the section in the persistent file

        :type theOffset: uint64_t

        """
        return _BinLDrivers.BinLDrivers_DocumentSection_SetOffset(self, *args)


    def Length(self, *args):
        """
        Length(BinLDrivers_DocumentSection self) -> uint64_t

        Query the length of the section in the persistent file

        :rtype: uint64_t

        """
        return _BinLDrivers.BinLDrivers_DocumentSection_Length(self, *args)


    def SetLength(self, *args):
        """
        SetLength(BinLDrivers_DocumentSection self, uint64_t const theLength)

        Set the length of the section in the persistent file

        :type theLength: uint64_t

        """
        return _BinLDrivers.BinLDrivers_DocumentSection_SetLength(self, *args)


    def WriteTOC(self, *args):
        """
        WriteTOC(BinLDrivers_DocumentSection self, Standard_OStream & theOS)

        Create a Section entry in the Document TOC (list of sections)

        :type theOS: OCC.wrapper.Standard.Standard_OStream

        """
        return _BinLDrivers.BinLDrivers_DocumentSection_WriteTOC(self, *args)


    def Write(self, *args):
        """
        Write(BinLDrivers_DocumentSection self, Standard_OStream & theOS, uint64_t const theOffset)

        Save Offset and Length data into the Section entry
        in the Document TOC (list of sections)

        :type theOS: OCC.wrapper.Standard.Standard_OStream
        :type theOffset: uint64_t

        """
        return _BinLDrivers.BinLDrivers_DocumentSection_Write(self, *args)


    def ReadTOC(*args):
        """
        ReadTOC(BinLDrivers_DocumentSection theSection, Standard_IStream & theIS)

        Fill a DocumentSection instance from the data that are read
        from TOC.

        :type theSection: OCC.wrapper.BinLDrivers.BinLDrivers_DocumentSection
        :type theIS: OCC.wrapper.Standard.Standard_IStream

        """
        return _BinLDrivers.BinLDrivers_DocumentSection_ReadTOC(*args)

    ReadTOC = staticmethod(ReadTOC)
    __swig_destroy__ = _BinLDrivers.delete_BinLDrivers_DocumentSection
BinLDrivers_DocumentSection_swigregister = _BinLDrivers.BinLDrivers_DocumentSection_swigregister
BinLDrivers_DocumentSection_swigregister(BinLDrivers_DocumentSection)

def BinLDrivers_DocumentSection_ReadTOC(*args):
    """
    BinLDrivers_DocumentSection_ReadTOC(BinLDrivers_DocumentSection theSection, Standard_IStream & theIS)

    Fill a DocumentSection instance from the data that are read
    from TOC.

    :type theSection: OCC.wrapper.BinLDrivers.BinLDrivers_DocumentSection
    :type theIS: OCC.wrapper.Standard.Standard_IStream

    """
    return _BinLDrivers.BinLDrivers_DocumentSection_ReadTOC(*args)

class NCollection_Vector_BinLDrivers_DocumentSection(NCollection.NCollection_BaseVector):
    """
    Class NCollection_Vector (dynamic array of objects)

    This class is similar to NCollection_Array1  though the indices always start
    at 0 (in Array1 the first index must be specified)

    The Vector is always created with 0 length. It can be enlarged by two means:
    1. Calling the method Append (val) - then "val" is added to the end of the
    vector (the vector length is incremented)
    2. Calling the method SetValue (i, val)  - if "i" is greater than or equal
    to the current length of the vector,  the vector is enlarged to accomo-
    date this index

    The methods Append and SetValue return  a non-const reference  to the copied
    object  inside  the vector.  This reference  is guaranteed to be valid until
    the vector is destroyed. It can be used to access the vector member directly
    or to pass its address to other data structures.

    The vector iterator remembers the length of the vector  at the moment of the
    creation or initialisation of the iterator.   Therefore the iteration begins
    at index 0  and stops at the index equal to (remembered_length-1).  It is OK
    to enlarge the vector during the iteration.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Vector_BinLDrivers_DocumentSection self) -> NCollection_Vector< BinLDrivers_DocumentSection >::iterator

        Returns an iterator pointing to the first element in the vector.

        :rtype: iterator

        """
        return _BinLDrivers.NCollection_Vector_BinLDrivers_DocumentSection_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Vector_BinLDrivers_DocumentSection self) -> NCollection_Vector< BinLDrivers_DocumentSection >::iterator

        Returns an iterator referring to the past-the-end element in the vector.

        :rtype: iterator

        """
        return _BinLDrivers.NCollection_Vector_BinLDrivers_DocumentSection_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Vector_BinLDrivers_DocumentSection self) -> NCollection_Vector< BinLDrivers_DocumentSection >::const_iterator

        Returns a const iterator pointing to the first element in the vector.

        :rtype: const_iterator

        """
        return _BinLDrivers.NCollection_Vector_BinLDrivers_DocumentSection_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Vector_BinLDrivers_DocumentSection self) -> NCollection_Vector< BinLDrivers_DocumentSection >::const_iterator

        Returns a const iterator referring to the past-the-end element in the vector.

        :rtype: const_iterator

        """
        return _BinLDrivers.NCollection_Vector_BinLDrivers_DocumentSection_cend(self, *args)


    def __init__(self, *args):
        """
        Class NCollection_Vector (dynamic array of objects)

        This class is similar to NCollection_Array1  though the indices always start
        at 0 (in Array1 the first index must be specified)

        The Vector is always created with 0 length. It can be enlarged by two means:
        1. Calling the method Append (val) - then "val" is added to the end of the
        vector (the vector length is incremented)
        2. Calling the method SetValue (i, val)  - if "i" is greater than or equal
        to the current length of the vector,  the vector is enlarged to accomo-
        date this index

        The methods Append and SetValue return  a non-const reference  to the copied
        object  inside  the vector.  This reference  is guaranteed to be valid until
        the vector is destroyed. It can be used to access the vector member directly
        or to pass its address to other data structures.

        The vector iterator remembers the length of the vector  at the moment of the
        creation or initialisation of the iterator.   Therefore the iteration begins
        at index 0  and stops at the index equal to (remembered_length-1).  It is OK
        to enlarge the vector during the iteration.
        """
        this = _BinLDrivers.new_NCollection_Vector_BinLDrivers_DocumentSection(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Length(self, *args):
        """
        Length(NCollection_Vector_BinLDrivers_DocumentSection self) -> Standard_Integer

        Total number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinLDrivers.NCollection_Vector_BinLDrivers_DocumentSection_Length(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Vector_BinLDrivers_DocumentSection self) -> Standard_Integer

        Total number of items in the vector

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinLDrivers.NCollection_Vector_BinLDrivers_DocumentSection_Size(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Vector_BinLDrivers_DocumentSection self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinLDrivers.NCollection_Vector_BinLDrivers_DocumentSection_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Vector_BinLDrivers_DocumentSection self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinLDrivers.NCollection_Vector_BinLDrivers_DocumentSection_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Vector_BinLDrivers_DocumentSection self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinLDrivers.NCollection_Vector_BinLDrivers_DocumentSection_IsEmpty(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Vector_BinLDrivers_DocumentSection self, NCollection_Vector_BinLDrivers_DocumentSection theOther, Standard_Boolean const theOwnAllocator)

        Assignment to the collection of the same type

        :type theOther: OCC.wrapper.NCollection.NCollection_Vector
        :type theOwnAllocator: bool

        """
        return _BinLDrivers.NCollection_Vector_BinLDrivers_DocumentSection_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Vector_BinLDrivers_DocumentSection self, NCollection_Vector_BinLDrivers_DocumentSection theOther) -> NCollection_Vector_BinLDrivers_DocumentSection

        Assignment operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Vector
        :rtype: OCC.wrapper.NCollection.NCollection_Vector

        """
        return _BinLDrivers.NCollection_Vector_BinLDrivers_DocumentSection_assign(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Vector_BinLDrivers_DocumentSection self, BinLDrivers_DocumentSection theValue) -> BinLDrivers_DocumentSection

        Append

        :type theValue: const TheItemType &
        :rtype: TheItemType &

        """
        return _BinLDrivers.NCollection_Vector_BinLDrivers_DocumentSection_Append(self, *args)


    def Appended(self, *args):
        """
        Appended(NCollection_Vector_BinLDrivers_DocumentSection self) -> BinLDrivers_DocumentSection

        Appends an empty value and returns the reference to it

        :rtype: TheItemType &

        """
        return _BinLDrivers.NCollection_Vector_BinLDrivers_DocumentSection_Appended(self, *args)


    def Value(self, *args):
        """
        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _BinLDrivers.NCollection_Vector_BinLDrivers_DocumentSection_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _BinLDrivers.NCollection_Vector_BinLDrivers_DocumentSection_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Vector_BinLDrivers_DocumentSection self) -> BinLDrivers_DocumentSection

        @return first element

        :rtype: TheItemType &

        """
        return _BinLDrivers.NCollection_Vector_BinLDrivers_DocumentSection_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _BinLDrivers.NCollection_Vector_BinLDrivers_DocumentSection_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Vector_BinLDrivers_DocumentSection self) -> BinLDrivers_DocumentSection

        @return last element

        :rtype: TheItemType &

        """
        return _BinLDrivers.NCollection_Vector_BinLDrivers_DocumentSection_ChangeLast(self, *args)


    def __call__(self, *args):
        """
        Operator() - query the const value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _BinLDrivers.NCollection_Vector_BinLDrivers_DocumentSection___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        Operator[] - query the const value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _BinLDrivers.NCollection_Vector_BinLDrivers_DocumentSection_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Vector_BinLDrivers_DocumentSection self, Standard_Integer const theIndex) -> BinLDrivers_DocumentSection

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _BinLDrivers.NCollection_Vector_BinLDrivers_DocumentSection_ChangeValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(NCollection_Vector_BinLDrivers_DocumentSection self, Standard_Integer const theIndex, BinLDrivers_DocumentSection theValue) -> BinLDrivers_DocumentSection

        SetValue () - set or append a value

        :type theIndex: int
        :type theValue: const TheItemType &
        :rtype: TheItemType &

        """
        return _BinLDrivers.NCollection_Vector_BinLDrivers_DocumentSection_SetValue(self, *args)

    __swig_destroy__ = _BinLDrivers.delete_NCollection_Vector_BinLDrivers_DocumentSection
NCollection_Vector_BinLDrivers_DocumentSection_swigregister = _BinLDrivers.NCollection_Vector_BinLDrivers_DocumentSection_swigregister
NCollection_Vector_BinLDrivers_DocumentSection_swigregister(NCollection_Vector_BinLDrivers_DocumentSection)


try:
	BinLDrivers_VectorOfDocumentSection = NCollection_Vector_BinLDrivers_DocumentSection
except NameError:
	pass # does not exist, probably ignored



