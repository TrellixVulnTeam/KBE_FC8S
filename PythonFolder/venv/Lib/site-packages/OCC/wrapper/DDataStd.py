# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_DDataStd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_DDataStd')
    _DDataStd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_DDataStd', [dirname(__file__)])
        except ImportError:
            import _DDataStd
            return _DDataStd
        try:
            _mod = imp.load_module('_DDataStd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _DDataStd = swig_import_helper()
    del swig_import_helper
else:
    import _DDataStd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _DDataStd.delete_SwigPyIterator

    def value(self):
        return _DDataStd.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _DDataStd.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _DDataStd.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _DDataStd.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _DDataStd.SwigPyIterator_equal(self, x)

    def copy(self):
        return _DDataStd.SwigPyIterator_copy(self)

    def next(self):
        return _DDataStd.SwigPyIterator_next(self)

    def __next__(self):
        return _DDataStd.SwigPyIterator___next__(self)

    def previous(self):
        return _DDataStd.SwigPyIterator_previous(self)

    def advance(self, n):
        return _DDataStd.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _DDataStd.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _DDataStd.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _DDataStd.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _DDataStd.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _DDataStd.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _DDataStd.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _DDataStd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _DDataStd.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_DDataStd.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _DDataStd.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _DDataStd.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DDataStd.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _DDataStd.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _DDataStd.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _DDataStd.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _DDataStd.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_DDataStd.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _DDataStd.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _DDataStd.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DDataStd.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _DDataStd.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _DDataStd.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _DDataStd.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _DDataStd.ptr_to_number(item)
ptr_to_number = _DDataStd.ptr_to_number

def HashCode(*args):
    return _DDataStd.HashCode(*args)
HashCode = _DDataStd.HashCode

def ptr_equal(a, b):
    return _DDataStd.ptr_equal(a, b)
ptr_equal = _DDataStd.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Draw
else:
    import Draw
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDataXtd
else:
    import TDataXtd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TNaming
else:
    import TNaming
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDataStd
else:
    import TDataStd
del _swig_python_version_info
class DDataStd_DrawPresentation(TDF.TDF_Attribute):
    """draw presentaion of a label of a document"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DDataStd_DrawPresentation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DDataStd_DrawPresentation(self) 
            return h


    def HasPresentation(*args):
        """
        HasPresentation(TDF_Label L) -> Standard_Boolean

        api methods on draw presentation
        ================================

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDataStd.DDataStd_DrawPresentation_HasPresentation(*args)

    HasPresentation = staticmethod(HasPresentation)

    def Display(*args):
        """
        Display(TDF_Label L)

        :type L: OCC.wrapper.TDF.TDF_Label

        """
        return _DDataStd.DDataStd_DrawPresentation_Display(*args)

    Display = staticmethod(Display)

    def Erase(*args):
        """
        Erase(TDF_Label L)

        :type L: OCC.wrapper.TDF.TDF_Label

        """
        return _DDataStd.DDataStd_DrawPresentation_Erase(*args)

    Erase = staticmethod(Erase)

    def Update(*args):
        """
        Update(TDF_Label L)

        attribute implementation
        ========================

        :type L: OCC.wrapper.TDF.TDF_Label

        """
        return _DDataStd.DDataStd_DrawPresentation_Update(*args)

    Update = staticmethod(Update)

    def GetID(*args):
        """
        GetID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _DDataStd.DDataStd_DrawPresentation_GetID(*args)

    GetID = staticmethod(GetID)

    def __init__(self, *args):
        """
        __init__(DDataStd_DrawPresentation self) -> DDataStd_DrawPresentation

        draw presentaion of a label of a document
        """
        this = _DDataStd.new_DDataStd_DrawPresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetDisplayed(self, *args):
        """
        SetDisplayed(DDataStd_DrawPresentation self, Standard_Boolean const status)

        :type status: bool

        """
        return _DDataStd.DDataStd_DrawPresentation_SetDisplayed(self, *args)


    def IsDisplayed(self, *args):
        """
        IsDisplayed(DDataStd_DrawPresentation self, TDF_Label L) -> Standard_Boolean
        IsDisplayed(DDataStd_DrawPresentation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDataStd.DDataStd_DrawPresentation_IsDisplayed(self, *args)


    def SetDrawable(self, *args):
        """
        SetDrawable(DDataStd_DrawPresentation self, Handle_Draw_Drawable3D D)

        :type D: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DDataStd.DDataStd_DrawPresentation_SetDrawable(self, *args)


    def GetDrawable(self, *args):
        """
        GetDrawable(DDataStd_DrawPresentation self) -> Handle_Draw_Drawable3D

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DDataStd.DDataStd_DrawPresentation_GetDrawable(self, *args)


    def ID(self, *args):
        """
        Returns the ID of the attribute.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _DDataStd.DDataStd_DrawPresentation_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewEmpty(self, *args):
        """
        NewEmpty(DDataStd_DrawPresentation self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _DDataStd.DDataStd_DrawPresentation_NewEmpty(self, *args)


    def Restore(self, *args):
        """
        Restore(DDataStd_DrawPresentation self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _DDataStd.DDataStd_DrawPresentation_Restore(self, *args)


    def Paste(self, *args):
        """
        Paste(DDataStd_DrawPresentation self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        call backs for viewer updating
        ==============================

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _DDataStd.DDataStd_DrawPresentation_Paste(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(DDataStd_DrawPresentation self)

        Something to do after adding an Attribute to a label.


        """
        return _DDataStd.DDataStd_DrawPresentation_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(DDataStd_DrawPresentation self)

        Something to do before removing an Attribute from
        a label.


        """
        return _DDataStd.DDataStd_DrawPresentation_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(DDataStd_DrawPresentation self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _DDataStd.DDataStd_DrawPresentation_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(DDataStd_DrawPresentation self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _DDataStd.DDataStd_DrawPresentation_AfterResume(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(DDataStd_DrawPresentation self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDataStd.DDataStd_DrawPresentation_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(DDataStd_DrawPresentation self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        update draw viewer according to delta
        private methods
        ===============

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDataStd.DDataStd_DrawPresentation_AfterUndo(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DDataStd.DDataStd_DrawPresentation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DDataStd.DDataStd_DrawPresentation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DDataStd.DDataStd_DrawPresentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DDataStd.delete_DDataStd_DrawPresentation
DDataStd_DrawPresentation_swigregister = _DDataStd.DDataStd_DrawPresentation_swigregister
DDataStd_DrawPresentation_swigregister(DDataStd_DrawPresentation)

def DDataStd_DrawPresentation_HasPresentation(*args):
    """
    DDataStd_DrawPresentation_HasPresentation(TDF_Label L) -> Standard_Boolean

    api methods on draw presentation
    ================================

    :type L: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _DDataStd.DDataStd_DrawPresentation_HasPresentation(*args)

def DDataStd_DrawPresentation_Display(*args):
    """
    DDataStd_DrawPresentation_Display(TDF_Label L)

    :type L: OCC.wrapper.TDF.TDF_Label

    """
    return _DDataStd.DDataStd_DrawPresentation_Display(*args)

def DDataStd_DrawPresentation_Erase(*args):
    """
    DDataStd_DrawPresentation_Erase(TDF_Label L)

    :type L: OCC.wrapper.TDF.TDF_Label

    """
    return _DDataStd.DDataStd_DrawPresentation_Erase(*args)

def DDataStd_DrawPresentation_Update(*args):
    """
    DDataStd_DrawPresentation_Update(TDF_Label L)

    attribute implementation
    ========================

    :type L: OCC.wrapper.TDF.TDF_Label

    """
    return _DDataStd.DDataStd_DrawPresentation_Update(*args)

def DDataStd_DrawPresentation_GetID(*args):
    """
    DDataStd_DrawPresentation_GetID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _DDataStd.DDataStd_DrawPresentation_GetID(*args)

def DDataStd_DrawPresentation_get_type_name(*args):
    """
    DDataStd_DrawPresentation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DDataStd.DDataStd_DrawPresentation_get_type_name(*args)

def DDataStd_DrawPresentation_get_type_descriptor(*args):
    """
    DDataStd_DrawPresentation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DDataStd.DDataStd_DrawPresentation_get_type_descriptor(*args)

class DDataStd_DrawDriver(Standard.Standard_Transient):
    """
    Root class of drivers to build draw variables from TDF_Label.
    Priority rule to display standard attributes is :
    * 1 Constraint
    * 2 Object
    * 3 Datum      (Point,Axis,Plane)
    * 4 Geometry
    * 5 NamedShape
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DDataStd_DrawDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DDataStd_DrawDriver(self) 
            return h


    def Set(*args):
        """
        Set(Handle_DDataStd_DrawDriver DD)

        access to the current DrawDriver
        ================================

        :type DD: OCC.wrapper.DDataStd.Handle_DDataStd_DrawDriver

        """
        return _DDataStd.DDataStd_DrawDriver_Set(*args)

    Set = staticmethod(Set)

    def Get(*args):
        """
        Get() -> Handle_DDataStd_DrawDriver

        :rtype: OCC.wrapper.DDataStd.Handle_DDataStd_DrawDriver

        """
        return _DDataStd.DDataStd_DrawDriver_Get(*args)

    Get = staticmethod(Get)

    def __init__(self, *args):
        """
        __init__(DDataStd_DrawDriver self) -> DDataStd_DrawDriver

        next method is called by DrawPresentation (may be redefined)
        ============================================================


        """
        this = _DDataStd.new_DDataStd_DrawDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Drawable(self, *args):
        """
        Drawable(DDataStd_DrawDriver self, TDF_Label L) -> Handle_Draw_Drawable3D

        reusable methods (may used when redefined <Drawable>)
        =====================================================

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DDataStd.DDataStd_DrawDriver_Drawable(self, *args)


    def DrawableConstraint(self, *args):
        """
        DrawableConstraint(DDataStd_DrawDriver self, Handle_TDataXtd_Constraint C) -> Handle_Draw_Drawable3D

        :type C: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DDataStd.DDataStd_DrawDriver_DrawableConstraint(self, *args)


    def DrawableShape(*args):
        """
        DrawableShape(TDF_Label L, Draw_ColorKind const color, Standard_Boolean const current) -> Handle_Draw_Drawable3D
        DrawableShape(TopoDS_Shape s, Draw_ColorKind const color) -> Handle_Draw_Drawable3D

        May be used for temporary display of a shape

        :type s: OCC.wrapper.TopoDS.TopoDS_Shape
        :type color: OCC.wrapper.Draw.Draw_ColorKind
        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DDataStd.DDataStd_DrawDriver_DrawableShape(*args)

    DrawableShape = staticmethod(DrawableShape)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DDataStd.DDataStd_DrawDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DDataStd.DDataStd_DrawDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DDataStd.DDataStd_DrawDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DDataStd.delete_DDataStd_DrawDriver
DDataStd_DrawDriver_swigregister = _DDataStd.DDataStd_DrawDriver_swigregister
DDataStd_DrawDriver_swigregister(DDataStd_DrawDriver)

def DDataStd_DrawDriver_Set(*args):
    """
    DDataStd_DrawDriver_Set(Handle_DDataStd_DrawDriver DD)

    access to the current DrawDriver
    ================================

    :type DD: OCC.wrapper.DDataStd.Handle_DDataStd_DrawDriver

    """
    return _DDataStd.DDataStd_DrawDriver_Set(*args)

def DDataStd_DrawDriver_Get(*args):
    """
    DDataStd_DrawDriver_Get() -> Handle_DDataStd_DrawDriver

    :rtype: OCC.wrapper.DDataStd.Handle_DDataStd_DrawDriver

    """
    return _DDataStd.DDataStd_DrawDriver_Get(*args)

def DDataStd_DrawDriver_DrawableShape(*args):
    """
    DrawableShape(TDF_Label L, Draw_ColorKind const color, Standard_Boolean const current) -> Handle_Draw_Drawable3D
    DDataStd_DrawDriver_DrawableShape(TopoDS_Shape s, Draw_ColorKind const color) -> Handle_Draw_Drawable3D

    May be used for temporary display of a shape

    :type s: OCC.wrapper.TopoDS.TopoDS_Shape
    :type color: OCC.wrapper.Draw.Draw_ColorKind
    :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

    """
    return _DDataStd.DDataStd_DrawDriver_DrawableShape(*args)

def DDataStd_DrawDriver_get_type_name(*args):
    """
    DDataStd_DrawDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DDataStd.DDataStd_DrawDriver_get_type_name(*args)

def DDataStd_DrawDriver_get_type_descriptor(*args):
    """
    DDataStd_DrawDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DDataStd.DDataStd_DrawDriver_get_type_descriptor(*args)

class Handle_DDataStd_DrawDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DDataStd_DrawDriver self)

        Nullify the handle


        """
        return _DDataStd.Handle_DDataStd_DrawDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DDataStd_DrawDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DDataStd.Handle_DDataStd_DrawDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DDataStd_DrawDriver self, DDataStd_DrawDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DDataStd.Handle_DDataStd_DrawDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DDataStd_DrawDriver self, Handle_DDataStd_DrawDriver theHandle) -> Handle_DDataStd_DrawDriver
        assign(Handle_DDataStd_DrawDriver self, DDataStd_DrawDriver thePtr) -> Handle_DDataStd_DrawDriver
        assign(Handle_DDataStd_DrawDriver self, Handle_DDataStd_DrawDriver theHandle) -> Handle_DDataStd_DrawDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DDataStd.Handle_DDataStd_DrawDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DDataStd_DrawDriver self) -> DDataStd_DrawDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DDataStd.Handle_DDataStd_DrawDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DDataStd_DrawDriver self) -> DDataStd_DrawDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DDataStd.Handle_DDataStd_DrawDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DDataStd_DrawDriver self) -> DDataStd_DrawDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DDataStd.Handle_DDataStd_DrawDriver___ref__(self, *args)


    def __hash__(self):
        return _DDataStd.Handle_DDataStd_DrawDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DDataStd.Handle_DDataStd_DrawDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DDataStd.new_Handle_DDataStd_DrawDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DDataStd.Handle_DDataStd_DrawDriver_DownCast)
    __swig_destroy__ = _DDataStd.delete_Handle_DDataStd_DrawDriver

    def Set(self, *args):
        """
        Set(Handle_DDataStd_DrawDriver self, Handle_DDataStd_DrawDriver DD)

        access to the current DrawDriver
        ================================

        :type DD: OCC.wrapper.DDataStd.Handle_DDataStd_DrawDriver

        """
        return _DDataStd.Handle_DDataStd_DrawDriver_Set(self, *args)


    def Get(self, *args):
        """
        Get(Handle_DDataStd_DrawDriver self) -> Handle_DDataStd_DrawDriver

        :rtype: OCC.wrapper.DDataStd.Handle_DDataStd_DrawDriver

        """
        return _DDataStd.Handle_DDataStd_DrawDriver_Get(self, *args)


    def Drawable(self, *args):
        """
        Drawable(Handle_DDataStd_DrawDriver self, TDF_Label L) -> Handle_Draw_Drawable3D

        reusable methods (may used when redefined <Drawable>)
        =====================================================

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DDataStd.Handle_DDataStd_DrawDriver_Drawable(self, *args)


    def DrawableConstraint(self, *args):
        """
        DrawableConstraint(Handle_DDataStd_DrawDriver self, Handle_TDataXtd_Constraint C) -> Handle_Draw_Drawable3D

        :type C: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DDataStd.Handle_DDataStd_DrawDriver_DrawableConstraint(self, *args)


    def DrawableShape(self, *args):
        """
        DrawableShape(Handle_DDataStd_DrawDriver self, TDF_Label L, Draw_ColorKind const color, Standard_Boolean const current) -> Handle_Draw_Drawable3D
        DrawableShape(Handle_DDataStd_DrawDriver self, TopoDS_Shape s, Draw_ColorKind const color) -> Handle_Draw_Drawable3D

        May be used for temporary display of a shape

        :type s: OCC.wrapper.TopoDS.TopoDS_Shape
        :type color: OCC.wrapper.Draw.Draw_ColorKind
        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DDataStd.Handle_DDataStd_DrawDriver_DrawableShape(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DDataStd_DrawDriver self) -> char const *

        :rtype: const char *

        """
        return _DDataStd.Handle_DDataStd_DrawDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DDataStd.Handle_DDataStd_DrawDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DDataStd.Handle_DDataStd_DrawDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_DDataStd_DrawDriver self)

        Memory deallocator for transient classes


        """
        return _DDataStd.Handle_DDataStd_DrawDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DDataStd_DrawDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DDataStd_DrawDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDataStd.Handle_DDataStd_DrawDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DDataStd_DrawDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DDataStd_DrawDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDataStd.Handle_DDataStd_DrawDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DDataStd_DrawDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DDataStd.Handle_DDataStd_DrawDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DDataStd_DrawDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DDataStd.Handle_DDataStd_DrawDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DDataStd_DrawDriver self)

        Increments the reference counter of this object


        """
        return _DDataStd.Handle_DDataStd_DrawDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DDataStd_DrawDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DDataStd.Handle_DDataStd_DrawDriver_DecrementRefCounter(self, *args)

Handle_DDataStd_DrawDriver_swigregister = _DDataStd.Handle_DDataStd_DrawDriver_swigregister
Handle_DDataStd_DrawDriver_swigregister(Handle_DDataStd_DrawDriver)

def Handle_DDataStd_DrawDriver_DownCast(thing):
    return _DDataStd.Handle_DDataStd_DrawDriver_DownCast(thing)
Handle_DDataStd_DrawDriver_DownCast = _DDataStd.Handle_DDataStd_DrawDriver_DownCast

class DDataStd_(object):
    """
    commands for Standard Attributes.
    =================================
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AllCommands(*args):
        """
        AllCommands(Draw_Interpretor I)

        Used to browse tree nodes.
        commands
        ========
        command to set and get modeling attributes

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDataStd.DDataStd__AllCommands(*args)

    AllCommands = staticmethod(AllCommands)

    def NamedShapeCommands(*args):
        """
        NamedShapeCommands(Draw_Interpretor I)

        to set and get NamedShape

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDataStd.DDataStd__NamedShapeCommands(*args)

    NamedShapeCommands = staticmethod(NamedShapeCommands)

    def BasicCommands(*args):
        """
        BasicCommands(Draw_Interpretor I)

        to set and get Integer, Real,  Reference, Geometry

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDataStd.DDataStd__BasicCommands(*args)

    BasicCommands = staticmethod(BasicCommands)

    def DatumCommands(*args):
        """
        DatumCommands(Draw_Interpretor I)

        to set and get Datum attributes

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDataStd.DDataStd__DatumCommands(*args)

    DatumCommands = staticmethod(DatumCommands)

    def ConstraintCommands(*args):
        """
        ConstraintCommands(Draw_Interpretor I)

        to set and get Constraint and Constraint  attributes

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDataStd.DDataStd__ConstraintCommands(*args)

    ConstraintCommands = staticmethod(ConstraintCommands)

    def ObjectCommands(*args):
        """
        ObjectCommands(Draw_Interpretor I)

        to set and get Objects attributes

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDataStd.DDataStd__ObjectCommands(*args)

    ObjectCommands = staticmethod(ObjectCommands)

    def DrawDisplayCommands(*args):
        """
        DrawDisplayCommands(Draw_Interpretor I)

        to display standard attributes

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDataStd.DDataStd__DrawDisplayCommands(*args)

    DrawDisplayCommands = staticmethod(DrawDisplayCommands)

    def NameCommands(*args):
        """
        NameCommands(Draw_Interpretor I)

        to set and get Name attribute

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDataStd.DDataStd__NameCommands(*args)

    NameCommands = staticmethod(NameCommands)

    def TreeCommands(*args):
        """
        TreeCommands(Draw_Interpretor I)

        to build, edit and browse an explicit tree of labels
        package methods
        ===============

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDataStd.DDataStd__TreeCommands(*args)

    TreeCommands = staticmethod(TreeCommands)

    def DumpConstraint(*args):
        """
        DumpConstraint(Handle_TDataXtd_Constraint C, Standard_OStream & S)

        :type C: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DDataStd.DDataStd__DumpConstraint(*args)

    DumpConstraint = staticmethod(DumpConstraint)

    def __init__(self):
        """
        commands for Standard Attributes.
        =================================
        """
        this = _DDataStd.new_DDataStd_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DDataStd.delete_DDataStd_
DDataStd__swigregister = _DDataStd.DDataStd__swigregister
DDataStd__swigregister(DDataStd_)

def DDataStd__AllCommands(*args):
    """
    DDataStd__AllCommands(Draw_Interpretor I)

    Used to browse tree nodes.
    commands
    ========
    command to set and get modeling attributes

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DDataStd.DDataStd__AllCommands(*args)

def DDataStd__NamedShapeCommands(*args):
    """
    DDataStd__NamedShapeCommands(Draw_Interpretor I)

    to set and get NamedShape

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DDataStd.DDataStd__NamedShapeCommands(*args)

def DDataStd__BasicCommands(*args):
    """
    DDataStd__BasicCommands(Draw_Interpretor I)

    to set and get Integer, Real,  Reference, Geometry

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DDataStd.DDataStd__BasicCommands(*args)

def DDataStd__DatumCommands(*args):
    """
    DDataStd__DatumCommands(Draw_Interpretor I)

    to set and get Datum attributes

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DDataStd.DDataStd__DatumCommands(*args)

def DDataStd__ConstraintCommands(*args):
    """
    DDataStd__ConstraintCommands(Draw_Interpretor I)

    to set and get Constraint and Constraint  attributes

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DDataStd.DDataStd__ConstraintCommands(*args)

def DDataStd__ObjectCommands(*args):
    """
    DDataStd__ObjectCommands(Draw_Interpretor I)

    to set and get Objects attributes

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DDataStd.DDataStd__ObjectCommands(*args)

def DDataStd__DrawDisplayCommands(*args):
    """
    DDataStd__DrawDisplayCommands(Draw_Interpretor I)

    to display standard attributes

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DDataStd.DDataStd__DrawDisplayCommands(*args)

def DDataStd__NameCommands(*args):
    """
    DDataStd__NameCommands(Draw_Interpretor I)

    to set and get Name attribute

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DDataStd.DDataStd__NameCommands(*args)

def DDataStd__TreeCommands(*args):
    """
    DDataStd__TreeCommands(Draw_Interpretor I)

    to build, edit and browse an explicit tree of labels
    package methods
    ===============

    :type I: OCC.wrapper.Draw.Draw_Interpretor

    """
    return _DDataStd.DDataStd__TreeCommands(*args)

def DDataStd__DumpConstraint(*args):
    """
    DDataStd__DumpConstraint(Handle_TDataXtd_Constraint C, Standard_OStream & S)

    :type C: OCC.wrapper.TDataXtd.Handle_TDataXtd_Constraint
    :type S: OCC.wrapper.Standard.Standard_OStream

    """
    return _DDataStd.DDataStd__DumpConstraint(*args)

class Handle_DDataStd_DrawPresentation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DDataStd_DrawPresentation self)

        Nullify the handle


        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DDataStd_DrawPresentation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DDataStd_DrawPresentation self, DDataStd_DrawPresentation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DDataStd_DrawPresentation self, Handle_DDataStd_DrawPresentation theHandle) -> Handle_DDataStd_DrawPresentation
        assign(Handle_DDataStd_DrawPresentation self, DDataStd_DrawPresentation thePtr) -> Handle_DDataStd_DrawPresentation
        assign(Handle_DDataStd_DrawPresentation self, Handle_DDataStd_DrawPresentation theHandle) -> Handle_DDataStd_DrawPresentation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DDataStd_DrawPresentation self) -> DDataStd_DrawPresentation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DDataStd_DrawPresentation self) -> DDataStd_DrawPresentation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DDataStd_DrawPresentation self) -> DDataStd_DrawPresentation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation___ref__(self, *args)


    def __hash__(self):
        return _DDataStd.Handle_DDataStd_DrawPresentation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DDataStd.Handle_DDataStd_DrawPresentation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DDataStd.new_Handle_DDataStd_DrawPresentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DDataStd.Handle_DDataStd_DrawPresentation_DownCast)
    __swig_destroy__ = _DDataStd.delete_Handle_DDataStd_DrawPresentation

    def HasPresentation(self, *args):
        """
        HasPresentation(Handle_DDataStd_DrawPresentation self, TDF_Label L) -> Standard_Boolean

        api methods on draw presentation
        ================================

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_HasPresentation(self, *args)


    def IsDisplayed(self, *args):
        """
        IsDisplayed(Handle_DDataStd_DrawPresentation self, TDF_Label L) -> Standard_Boolean
        IsDisplayed(Handle_DDataStd_DrawPresentation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_IsDisplayed(self, *args)


    def Display(self, *args):
        """
        Display(Handle_DDataStd_DrawPresentation self, TDF_Label L)

        :type L: OCC.wrapper.TDF.TDF_Label

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_Display(self, *args)


    def Erase(self, *args):
        """
        Erase(Handle_DDataStd_DrawPresentation self, TDF_Label L)

        :type L: OCC.wrapper.TDF.TDF_Label

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_Erase(self, *args)


    def Update(self, *args):
        """
        Update(Handle_DDataStd_DrawPresentation self, TDF_Label L)

        attribute implementation
        ========================

        :type L: OCC.wrapper.TDF.TDF_Label

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_Update(self, *args)


    def GetID(self, *args):
        """
        GetID(Handle_DDataStd_DrawPresentation self) -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_GetID(self, *args)


    def SetDisplayed(self, *args):
        """
        SetDisplayed(Handle_DDataStd_DrawPresentation self, Standard_Boolean const status)

        :type status: bool

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_SetDisplayed(self, *args)


    def SetDrawable(self, *args):
        """
        SetDrawable(Handle_DDataStd_DrawPresentation self, Handle_Draw_Drawable3D D)

        :type D: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_SetDrawable(self, *args)


    def GetDrawable(self, *args):
        """
        GetDrawable(Handle_DDataStd_DrawPresentation self) -> Handle_Draw_Drawable3D

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_GetDrawable(self, *args)


    def ID(self, *args):
        """
        Returns the ID of the attribute.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _DDataStd.Handle_DDataStd_DrawPresentation_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_DDataStd_DrawPresentation self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_NewEmpty(self, *args)


    def Restore(self, *args):
        """
        Restore(Handle_DDataStd_DrawPresentation self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_Restore(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_DDataStd_DrawPresentation self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        call backs for viewer updating
        ==============================

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_Paste(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_DDataStd_DrawPresentation self)

        Something to do after adding an Attribute to a label.


        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_DDataStd_DrawPresentation self)

        Something to do before removing an Attribute from
        a label.


        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_DDataStd_DrawPresentation self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_DDataStd_DrawPresentation self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_AfterResume(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_DDataStd_DrawPresentation self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_DDataStd_DrawPresentation self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        update draw viewer according to delta
        private methods
        ===============

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_AfterUndo(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DDataStd_DrawPresentation self) -> char const *

        :rtype: const char *

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DDataStd.Handle_DDataStd_DrawPresentation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DDataStd.Handle_DDataStd_DrawPresentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_DDataStd_DrawPresentation self, Standard_GUID arg2)
        SetID(Handle_DDataStd_DrawPresentation self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_DDataStd_DrawPresentation self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_DDataStd_DrawPresentation self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_DDataStd_DrawPresentation self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_DDataStd_DrawPresentation self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_DDataStd_DrawPresentation self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_DDataStd_DrawPresentation self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_DDataStd_DrawPresentation self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_DDataStd_DrawPresentation self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_DDataStd_DrawPresentation self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_DDataStd_DrawPresentation self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_DDataStd_DrawPresentation self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_ForgetAllAttributes(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_DDataStd_DrawPresentation self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_AfterRetrieval(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_DDataStd_DrawPresentation self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_DDataStd_DrawPresentation self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_DDataStd_DrawPresentation self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_DDataStd_DrawPresentation self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_DDataStd_DrawPresentation self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_DDataStd_DrawPresentation self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_DDataStd_DrawPresentation self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_DDataStd_DrawPresentation self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_DDataStd_DrawPresentation self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_References(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DDataStd_DrawPresentation self, Standard_OStream & anOS) -> Standard_OStream &

        Dumps the minimum information about <me> on
        <aStream>.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_Dump(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_DDataStd_DrawPresentation self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_DDataStd_DrawPresentation self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_DDataStd_DrawPresentation self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DDataStd_DrawPresentation self)

        Memory deallocator for transient classes


        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DDataStd_DrawPresentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DDataStd_DrawPresentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DDataStd_DrawPresentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DDataStd_DrawPresentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DDataStd_DrawPresentation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DDataStd_DrawPresentation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DDataStd_DrawPresentation self)

        Increments the reference counter of this object


        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DDataStd_DrawPresentation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DDataStd.Handle_DDataStd_DrawPresentation_DecrementRefCounter(self, *args)

Handle_DDataStd_DrawPresentation_swigregister = _DDataStd.Handle_DDataStd_DrawPresentation_swigregister
Handle_DDataStd_DrawPresentation_swigregister(Handle_DDataStd_DrawPresentation)

def Handle_DDataStd_DrawPresentation_DownCast(thing):
    return _DDataStd.Handle_DDataStd_DrawPresentation_DownCast(thing)
Handle_DDataStd_DrawPresentation_DownCast = _DDataStd.Handle_DDataStd_DrawPresentation_DownCast

class DDataStd_TreeBrowser(Draw.Draw_Drawable3D):
    """
    Browses a TreeNode from TDataStd.
    =================================
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_DDataStd_TreeBrowser
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_DDataStd_TreeBrowser(self) 
            return h


    def __init__(self, *args):
        """
        __init__(DDataStd_TreeBrowser self, TDF_Label root) -> DDataStd_TreeBrowser

        :type root: OCC.wrapper.TDF.TDF_Label

        """
        this = _DDataStd.new_DDataStd_TreeBrowser(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def DrawOn(self, *args):
        """
        DrawOn(DDataStd_TreeBrowser self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DDataStd.DDataStd_TreeBrowser_DrawOn(self, *args)


    def Copy(self, *args):
        """
        Copy(DDataStd_TreeBrowser self) -> Handle_Draw_Drawable3D

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DDataStd.DDataStd_TreeBrowser_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(DDataStd_TreeBrowser self, Standard_OStream & S)

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DDataStd.DDataStd_TreeBrowser_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(DDataStd_TreeBrowser self, Draw_Interpretor I)

        Specific methods
        ================

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDataStd.DDataStd_TreeBrowser_Whatis(self, *args)


    def Label(self, *args):
        """
        Label(DDataStd_TreeBrowser self, TDF_Label root)
        Label(DDataStd_TreeBrowser self) -> TDF_Label

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _DDataStd.DDataStd_TreeBrowser_Label(self, *args)


    def OpenRoot(self, *args):
        """
        OpenRoot(DDataStd_TreeBrowser self) -> TCollection_AsciiString

        Returns   a   string composed with  the   TreeNode  of
        <myLabel>.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _DDataStd.DDataStd_TreeBrowser_OpenRoot(self, *args)


    def OpenNode(self, *args):
        """
        OpenNode(DDataStd_TreeBrowser self, TDF_Label L) -> TCollection_AsciiString

        Returns a string composed   with the sub-TreeNodes of
        <L>

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _DDataStd.DDataStd_TreeBrowser_OpenNode(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _DDataStd.DDataStd_TreeBrowser_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _DDataStd.DDataStd_TreeBrowser_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DDataStd.DDataStd_TreeBrowser_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _DDataStd.delete_DDataStd_TreeBrowser
DDataStd_TreeBrowser_swigregister = _DDataStd.DDataStd_TreeBrowser_swigregister
DDataStd_TreeBrowser_swigregister(DDataStd_TreeBrowser)

def DDataStd_TreeBrowser_get_type_name(*args):
    """
    DDataStd_TreeBrowser_get_type_name() -> char const *

    :rtype: const char *

    """
    return _DDataStd.DDataStd_TreeBrowser_get_type_name(*args)

def DDataStd_TreeBrowser_get_type_descriptor(*args):
    """
    DDataStd_TreeBrowser_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _DDataStd.DDataStd_TreeBrowser_get_type_descriptor(*args)

class Handle_DDataStd_TreeBrowser(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_DDataStd_TreeBrowser self)

        Nullify the handle


        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_DDataStd_TreeBrowser self) -> bool

        Check for being null

        :rtype: bool

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_DDataStd_TreeBrowser self, DDataStd_TreeBrowser thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_DDataStd_TreeBrowser self, Handle_DDataStd_TreeBrowser theHandle) -> Handle_DDataStd_TreeBrowser
        assign(Handle_DDataStd_TreeBrowser self, DDataStd_TreeBrowser thePtr) -> Handle_DDataStd_TreeBrowser
        assign(Handle_DDataStd_TreeBrowser self, Handle_DDataStd_TreeBrowser theHandle) -> Handle_DDataStd_TreeBrowser

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_DDataStd_TreeBrowser self) -> DDataStd_TreeBrowser

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_DDataStd_TreeBrowser self) -> DDataStd_TreeBrowser

        Member access operator (note non-const)

        :rtype: T *

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_DDataStd_TreeBrowser self) -> DDataStd_TreeBrowser

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser___ref__(self, *args)


    def __hash__(self):
        return _DDataStd.Handle_DDataStd_TreeBrowser___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _DDataStd.Handle_DDataStd_TreeBrowser___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _DDataStd.new_Handle_DDataStd_TreeBrowser(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_DDataStd.Handle_DDataStd_TreeBrowser_DownCast)
    __swig_destroy__ = _DDataStd.delete_Handle_DDataStd_TreeBrowser

    def DrawOn(self, *args):
        """
        DrawOn(Handle_DDataStd_TreeBrowser self, Draw_Display dis)

        :type dis: OCC.wrapper.Draw.Draw_Display

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_DrawOn(self, *args)


    def Copy(self, *args):
        """
        Copy(Handle_DDataStd_TreeBrowser self) -> Handle_Draw_Drawable3D

        :rtype: OCC.wrapper.Draw.Handle_Draw_Drawable3D

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_Copy(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_DDataStd_TreeBrowser self, Standard_OStream & S)

        :type S: OCC.wrapper.Standard.Standard_OStream

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_Dump(self, *args)


    def Whatis(self, *args):
        """
        Whatis(Handle_DDataStd_TreeBrowser self, Draw_Interpretor I)

        Specific methods
        ================

        :type I: OCC.wrapper.Draw.Draw_Interpretor

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_Whatis(self, *args)


    def Label(self, *args):
        """
        Label(Handle_DDataStd_TreeBrowser self, TDF_Label root)
        Label(Handle_DDataStd_TreeBrowser self) -> TDF_Label

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_Label(self, *args)


    def OpenRoot(self, *args):
        """
        OpenRoot(Handle_DDataStd_TreeBrowser self) -> TCollection_AsciiString

        Returns   a   string composed with  the   TreeNode  of
        <myLabel>.

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_OpenRoot(self, *args)


    def OpenNode(self, *args):
        """
        OpenNode(Handle_DDataStd_TreeBrowser self, TDF_Label L) -> TCollection_AsciiString

        Returns a string composed   with the sub-TreeNodes of
        <L>

        :type L: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_OpenNode(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_DDataStd_TreeBrowser self) -> char const *

        :rtype: const char *

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DDataStd.Handle_DDataStd_TreeBrowser_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _DDataStd.Handle_DDataStd_TreeBrowser_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PickReject(self, *args):
        """
        PickReject(Handle_DDataStd_TreeBrowser self, Standard_Real const X, Standard_Real const Y, Standard_Real const Prec) -> Standard_Boolean

        Returs True if the pick is outside the box

        :type X: float
        :type Y: float
        :type Prec: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_PickReject(self, *args)


    def Is3D(self, *args):
        """
        Is3D(Handle_DDataStd_TreeBrowser self) -> Standard_Boolean

        Is a 3D object. (Default True).

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_Is3D(self, *args)


    def SetBounds(self, *args):
        """
        SetBounds(Handle_DDataStd_TreeBrowser self, Standard_Real const xmin, Standard_Real const xmax, Standard_Real const ymin, Standard_Real const ymax)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_SetBounds(self, *args)


    def Bounds(self, *args):
        """
        Bounds(Handle_DDataStd_TreeBrowser self)

        :type xmin: float
        :type xmax: float
        :type ymin: float
        :type ymax: float

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_Bounds(self, *args)


    def Visible(self, *args):
        """
        Visible(Handle_DDataStd_TreeBrowser self) -> Standard_Boolean
        Visible(Handle_DDataStd_TreeBrowser self, Standard_Boolean const V)

        :type V: bool

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_Visible(self, *args)


    def Protected(self, *args):
        """
        Protected(Handle_DDataStd_TreeBrowser self) -> Standard_Boolean
        Protected(Handle_DDataStd_TreeBrowser self, Standard_Boolean const P)

        :type P: bool

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_Protected(self, *args)


    def Name(self, *args):
        """
        Name(Handle_DDataStd_TreeBrowser self) -> Standard_CString
        Name(Handle_DDataStd_TreeBrowser self, Standard_CString const N)

        :type N: OCC.wrapper.Standard.Standard_CString

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_Name(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_DDataStd_TreeBrowser self)

        Memory deallocator for transient classes


        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_DDataStd_TreeBrowser self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_DDataStd_TreeBrowser self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_DDataStd_TreeBrowser self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_DDataStd_TreeBrowser self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_DDataStd_TreeBrowser self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_DDataStd_TreeBrowser self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_DDataStd_TreeBrowser self)

        Increments the reference counter of this object


        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_DDataStd_TreeBrowser self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _DDataStd.Handle_DDataStd_TreeBrowser_DecrementRefCounter(self, *args)

Handle_DDataStd_TreeBrowser_swigregister = _DDataStd.Handle_DDataStd_TreeBrowser_swigregister
Handle_DDataStd_TreeBrowser_swigregister(Handle_DDataStd_TreeBrowser)

def Handle_DDataStd_TreeBrowser_DownCast(thing):
    return _DDataStd.Handle_DDataStd_TreeBrowser_DownCast(thing)
Handle_DDataStd_TreeBrowser_DownCast = _DDataStd.Handle_DDataStd_TreeBrowser_DownCast



