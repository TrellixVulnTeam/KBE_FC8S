# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_UTL')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_UTL')
    _UTL = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_UTL', [dirname(__file__)])
        except ImportError:
            import _UTL
            return _UTL
        try:
            _mod = imp.load_module('_UTL', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _UTL = swig_import_helper()
    del swig_import_helper
else:
    import _UTL
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _UTL.delete_SwigPyIterator

    def value(self):
        return _UTL.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _UTL.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _UTL.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _UTL.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _UTL.SwigPyIterator_equal(self, x)

    def copy(self):
        return _UTL.SwigPyIterator_copy(self)

    def next(self):
        return _UTL.SwigPyIterator_next(self)

    def __next__(self):
        return _UTL.SwigPyIterator___next__(self)

    def previous(self):
        return _UTL.SwigPyIterator_previous(self)

    def advance(self, n):
        return _UTL.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _UTL.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _UTL.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _UTL.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _UTL.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _UTL.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _UTL.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _UTL.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _UTL.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_UTL.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _UTL.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _UTL.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _UTL.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _UTL.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _UTL.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _UTL.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _UTL.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_UTL.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _UTL.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _UTL.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _UTL.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _UTL.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _UTL.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _UTL.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _UTL.ptr_to_number(item)
ptr_to_number = _UTL.ptr_to_number

def HashCode(*args):
    return _UTL.HashCode(*args)
HashCode = _UTL.HashCode

def ptr_equal(a, b):
    return _UTL.ptr_equal(a, b)
ptr_equal = _UTL.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Storage
else:
    import Storage
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Resource
else:
    import Resource
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
class UTL_(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def xgetenv(*args):
        """
        xgetenv(Standard_CString const aCString) -> TCollection_ExtendedString

        :type aCString: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _UTL.UTL__xgetenv(*args)

    xgetenv = staticmethod(xgetenv)

    def OpenFile(*args):
        """
        OpenFile(Storage_BaseDriver aFile, TCollection_ExtendedString aName, Storage_OpenMode const aMode) -> Storage_Error

        :type aFile: OCC.wrapper.Storage.Storage_BaseDriver
        :type aName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :type aMode: OCC.wrapper.Storage.Storage_OpenMode
        :rtype: OCC.wrapper.Storage.Storage_Error

        """
        return _UTL.UTL__OpenFile(*args)

    OpenFile = staticmethod(OpenFile)

    def AddToUserInfo(*args):
        """
        AddToUserInfo(Handle_Storage_Data aData, TCollection_ExtendedString anInfo)

        :type aData: OCC.wrapper.Storage.Handle_Storage_Data
        :type anInfo: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _UTL.UTL__AddToUserInfo(*args)

    AddToUserInfo = staticmethod(AddToUserInfo)

    def Path(*args):
        """
        Path(TCollection_ExtendedString aFileName) -> OSD_Path

        :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.OSD.OSD_Path

        """
        return _UTL.UTL__Path(*args)

    Path = staticmethod(Path)

    def Disk(*args):
        """
        Disk(OSD_Path aPath) -> TCollection_ExtendedString

        :type aPath: OCC.wrapper.OSD.OSD_Path
        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _UTL.UTL__Disk(*args)

    Disk = staticmethod(Disk)

    def Trek(*args):
        """
        Trek(OSD_Path aPath) -> TCollection_ExtendedString

        :type aPath: OCC.wrapper.OSD.OSD_Path
        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _UTL.UTL__Trek(*args)

    Trek = staticmethod(Trek)

    def Name(*args):
        """
        Name(OSD_Path aPath) -> TCollection_ExtendedString

        :type aPath: OCC.wrapper.OSD.OSD_Path
        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _UTL.UTL__Name(*args)

    Name = staticmethod(Name)

    def FileIterator(*args):
        """
        FileIterator(OSD_Path aPath, TCollection_ExtendedString aMask) -> OSD_FileIterator

        :type aPath: OCC.wrapper.OSD.OSD_Path
        :type aMask: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.OSD.OSD_FileIterator

        """
        return _UTL.UTL__FileIterator(*args)

    FileIterator = staticmethod(FileIterator)

    def Extension(*args):
        """
        Extension(OSD_Path aPath) -> TCollection_ExtendedString
        Extension(TCollection_ExtendedString aFileName) -> TCollection_ExtendedString

        :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _UTL.UTL__Extension(*args)

    Extension = staticmethod(Extension)

    def LocalHost(*args):
        """
        LocalHost() -> TCollection_ExtendedString

        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _UTL.UTL__LocalHost(*args)

    LocalHost = staticmethod(LocalHost)

    def ExtendedString(*args):
        """
        ExtendedString(TCollection_AsciiString anAsciiString) -> TCollection_ExtendedString

        :type anAsciiString: OCC.wrapper.TCollection.TCollection_AsciiString
        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _UTL.UTL__ExtendedString(*args)

    ExtendedString = staticmethod(ExtendedString)

    def GUID(*args):
        """
        GUID(TCollection_ExtendedString anXString) -> Standard_GUID

        :type anXString: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _UTL.UTL__GUID(*args)

    GUID = staticmethod(GUID)

    def Find(*args):
        """
        Find(Handle_Resource_Manager aResourceManager, TCollection_ExtendedString aResourceName) -> Standard_Boolean

        :type aResourceManager: OCC.wrapper.Resource.Handle_Resource_Manager
        :type aResourceName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _UTL.UTL__Find(*args)

    Find = staticmethod(Find)

    def Value(*args):
        """
        Value(Handle_Resource_Manager aResourceManager, TCollection_ExtendedString aResourceName) -> TCollection_ExtendedString

        :type aResourceManager: OCC.wrapper.Resource.Handle_Resource_Manager
        :type aResourceName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

        """
        return _UTL.UTL__Value(*args)

    Value = staticmethod(Value)

    def IntegerValue(*args):
        """
        IntegerValue(TCollection_ExtendedString anExtendedString) -> Standard_Integer

        :type anExtendedString: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _UTL.UTL__IntegerValue(*args)

    IntegerValue = staticmethod(IntegerValue)

    def CString(*args):
        """
        CString(TCollection_ExtendedString anExtendedString) -> Standard_CString

        :type anExtendedString: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _UTL.UTL__CString(*args)

    CString = staticmethod(CString)

    def IsReadOnly(*args):
        """
        IsReadOnly(TCollection_ExtendedString aFileName) -> Standard_Boolean

        :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _UTL.UTL__IsReadOnly(*args)

    IsReadOnly = staticmethod(IsReadOnly)

    def __init__(self):
        this = _UTL.new_UTL_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _UTL.delete_UTL_
UTL__swigregister = _UTL.UTL__swigregister
UTL__swigregister(UTL_)

def UTL__xgetenv(*args):
    """
    UTL__xgetenv(Standard_CString const aCString) -> TCollection_ExtendedString

    :type aCString: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

    """
    return _UTL.UTL__xgetenv(*args)

def UTL__OpenFile(*args):
    """
    UTL__OpenFile(Storage_BaseDriver aFile, TCollection_ExtendedString aName, Storage_OpenMode const aMode) -> Storage_Error

    :type aFile: OCC.wrapper.Storage.Storage_BaseDriver
    :type aName: OCC.wrapper.TCollection.TCollection_ExtendedString
    :type aMode: OCC.wrapper.Storage.Storage_OpenMode
    :rtype: OCC.wrapper.Storage.Storage_Error

    """
    return _UTL.UTL__OpenFile(*args)

def UTL__AddToUserInfo(*args):
    """
    UTL__AddToUserInfo(Handle_Storage_Data aData, TCollection_ExtendedString anInfo)

    :type aData: OCC.wrapper.Storage.Handle_Storage_Data
    :type anInfo: OCC.wrapper.TCollection.TCollection_ExtendedString

    """
    return _UTL.UTL__AddToUserInfo(*args)

def UTL__Path(*args):
    """
    UTL__Path(TCollection_ExtendedString aFileName) -> OSD_Path

    :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
    :rtype: OCC.wrapper.OSD.OSD_Path

    """
    return _UTL.UTL__Path(*args)

def UTL__Disk(*args):
    """
    UTL__Disk(OSD_Path aPath) -> TCollection_ExtendedString

    :type aPath: OCC.wrapper.OSD.OSD_Path
    :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

    """
    return _UTL.UTL__Disk(*args)

def UTL__Trek(*args):
    """
    UTL__Trek(OSD_Path aPath) -> TCollection_ExtendedString

    :type aPath: OCC.wrapper.OSD.OSD_Path
    :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

    """
    return _UTL.UTL__Trek(*args)

def UTL__Name(*args):
    """
    UTL__Name(OSD_Path aPath) -> TCollection_ExtendedString

    :type aPath: OCC.wrapper.OSD.OSD_Path
    :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

    """
    return _UTL.UTL__Name(*args)

def UTL__FileIterator(*args):
    """
    UTL__FileIterator(OSD_Path aPath, TCollection_ExtendedString aMask) -> OSD_FileIterator

    :type aPath: OCC.wrapper.OSD.OSD_Path
    :type aMask: OCC.wrapper.TCollection.TCollection_ExtendedString
    :rtype: OCC.wrapper.OSD.OSD_FileIterator

    """
    return _UTL.UTL__FileIterator(*args)

def UTL__Extension(*args):
    """
    Extension(OSD_Path aPath) -> TCollection_ExtendedString
    UTL__Extension(TCollection_ExtendedString aFileName) -> TCollection_ExtendedString

    :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
    :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

    """
    return _UTL.UTL__Extension(*args)

def UTL__LocalHost(*args):
    """
    UTL__LocalHost() -> TCollection_ExtendedString

    :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

    """
    return _UTL.UTL__LocalHost(*args)

def UTL__ExtendedString(*args):
    """
    UTL__ExtendedString(TCollection_AsciiString anAsciiString) -> TCollection_ExtendedString

    :type anAsciiString: OCC.wrapper.TCollection.TCollection_AsciiString
    :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

    """
    return _UTL.UTL__ExtendedString(*args)

def UTL__GUID(*args):
    """
    UTL__GUID(TCollection_ExtendedString anXString) -> Standard_GUID

    :type anXString: OCC.wrapper.TCollection.TCollection_ExtendedString
    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _UTL.UTL__GUID(*args)

def UTL__Find(*args):
    """
    UTL__Find(Handle_Resource_Manager aResourceManager, TCollection_ExtendedString aResourceName) -> Standard_Boolean

    :type aResourceManager: OCC.wrapper.Resource.Handle_Resource_Manager
    :type aResourceName: OCC.wrapper.TCollection.TCollection_ExtendedString
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _UTL.UTL__Find(*args)

def UTL__Value(*args):
    """
    UTL__Value(Handle_Resource_Manager aResourceManager, TCollection_ExtendedString aResourceName) -> TCollection_ExtendedString

    :type aResourceManager: OCC.wrapper.Resource.Handle_Resource_Manager
    :type aResourceName: OCC.wrapper.TCollection.TCollection_ExtendedString
    :rtype: OCC.wrapper.TCollection.TCollection_ExtendedString

    """
    return _UTL.UTL__Value(*args)

def UTL__IntegerValue(*args):
    """
    UTL__IntegerValue(TCollection_ExtendedString anExtendedString) -> Standard_Integer

    :type anExtendedString: OCC.wrapper.TCollection.TCollection_ExtendedString
    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _UTL.UTL__IntegerValue(*args)

def UTL__CString(*args):
    """
    UTL__CString(TCollection_ExtendedString anExtendedString) -> Standard_CString

    :type anExtendedString: OCC.wrapper.TCollection.TCollection_ExtendedString
    :rtype: OCC.wrapper.Standard.Standard_CString

    """
    return _UTL.UTL__CString(*args)

def UTL__IsReadOnly(*args):
    """
    UTL__IsReadOnly(TCollection_ExtendedString aFileName) -> Standard_Boolean

    :type aFileName: OCC.wrapper.TCollection.TCollection_ExtendedString
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _UTL.UTL__IsReadOnly(*args)



