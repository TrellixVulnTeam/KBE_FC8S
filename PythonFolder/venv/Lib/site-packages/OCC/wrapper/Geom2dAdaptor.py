# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Geom2dAdaptor')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Geom2dAdaptor')
    _Geom2dAdaptor = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Geom2dAdaptor', [dirname(__file__)])
        except ImportError:
            import _Geom2dAdaptor
            return _Geom2dAdaptor
        try:
            _mod = imp.load_module('_Geom2dAdaptor', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Geom2dAdaptor = swig_import_helper()
    del swig_import_helper
else:
    import _Geom2dAdaptor
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Geom2dAdaptor.delete_SwigPyIterator

    def value(self):
        return _Geom2dAdaptor.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Geom2dAdaptor.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Geom2dAdaptor.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Geom2dAdaptor.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Geom2dAdaptor.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Geom2dAdaptor.SwigPyIterator_copy(self)

    def next(self):
        return _Geom2dAdaptor.SwigPyIterator_next(self)

    def __next__(self):
        return _Geom2dAdaptor.SwigPyIterator___next__(self)

    def previous(self):
        return _Geom2dAdaptor.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Geom2dAdaptor.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Geom2dAdaptor.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Geom2dAdaptor.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Geom2dAdaptor.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Geom2dAdaptor.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Geom2dAdaptor.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Geom2dAdaptor.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Geom2dAdaptor.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Geom2dAdaptor.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_Geom2dAdaptor.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _Geom2dAdaptor.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Geom2dAdaptor.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geom2dAdaptor.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _Geom2dAdaptor.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _Geom2dAdaptor.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _Geom2dAdaptor.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _Geom2dAdaptor.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_Geom2dAdaptor.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _Geom2dAdaptor.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _Geom2dAdaptor.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geom2dAdaptor.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _Geom2dAdaptor.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _Geom2dAdaptor.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _Geom2dAdaptor.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _Geom2dAdaptor.ptr_to_number(item)
ptr_to_number = _Geom2dAdaptor.ptr_to_number

def HashCode(*args):
    return _Geom2dAdaptor.HashCode(*args)
HashCode = _Geom2dAdaptor.HashCode

def ptr_equal(a, b):
    return _Geom2dAdaptor.ptr_equal(a, b)
ptr_equal = _Geom2dAdaptor.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
class Geom2dAdaptor_GHCurve(Adaptor2d.Adaptor2d_HCurve2d):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Geom2dAdaptor_GHCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Geom2dAdaptor_GHCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Geom2dAdaptor_GHCurve self) -> Geom2dAdaptor_GHCurve
        __init__(Geom2dAdaptor_GHCurve self, Geom2dAdaptor_Curve C) -> Geom2dAdaptor_GHCurve

        Creates a GenHCurve2d from a Curve

        :type C: OCC.wrapper.Geom2dAdaptor.Geom2dAdaptor_Curve

        """
        this = _Geom2dAdaptor.new_Geom2dAdaptor_GHCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(self, *args):
        """
        Set(Geom2dAdaptor_GHCurve self, Geom2dAdaptor_Curve C)

        Sets the field of the GenHCurve2d.

        :type C: OCC.wrapper.Geom2dAdaptor.Geom2dAdaptor_Curve

        """
        return _Geom2dAdaptor.Geom2dAdaptor_GHCurve_Set(self, *args)


    def Curve2d(self, *args):
        """
        Returns the curve used to create the GenHCurve2d.
        This is redefined from HCurve2d, cannot be inline.

        :rtype: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d

        """
        res = _Geom2dAdaptor.Geom2dAdaptor_GHCurve_Curve2d(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeCurve2d(self, *args):
        """
        ChangeCurve2d(Geom2dAdaptor_GHCurve self) -> Geom2dAdaptor_Curve

        Returns the curve used to create the GenHCurve.

        :rtype: OCC.wrapper.Geom2dAdaptor.Geom2dAdaptor_Curve

        """
        return _Geom2dAdaptor.Geom2dAdaptor_GHCurve_ChangeCurve2d(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Geom2dAdaptor.Geom2dAdaptor_GHCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Geom2dAdaptor.Geom2dAdaptor_GHCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Geom2dAdaptor.Geom2dAdaptor_GHCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Geom2dAdaptor.delete_Geom2dAdaptor_GHCurve
Geom2dAdaptor_GHCurve_swigregister = _Geom2dAdaptor.Geom2dAdaptor_GHCurve_swigregister
Geom2dAdaptor_GHCurve_swigregister(Geom2dAdaptor_GHCurve)

def Geom2dAdaptor_GHCurve_get_type_name(*args):
    """
    Geom2dAdaptor_GHCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Geom2dAdaptor.Geom2dAdaptor_GHCurve_get_type_name(*args)

def Geom2dAdaptor_GHCurve_get_type_descriptor(*args):
    """
    Geom2dAdaptor_GHCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Geom2dAdaptor.Geom2dAdaptor_GHCurve_get_type_descriptor(*args)

class Geom2dAdaptor_HCurve(Geom2dAdaptor_GHCurve):
    """
    Provides an interface between the services provided by any
    curve from the package Geom2d and those required
    of the curve by algorithms, which use it.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_Geom2dAdaptor_HCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_Geom2dAdaptor_HCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(Geom2dAdaptor_HCurve self) -> Geom2dAdaptor_HCurve
        __init__(Geom2dAdaptor_HCurve self, Geom2dAdaptor_Curve AS) -> Geom2dAdaptor_HCurve
        __init__(Geom2dAdaptor_HCurve self, Handle_Geom2d_Curve S) -> Geom2dAdaptor_HCurve
        __init__(Geom2dAdaptor_HCurve self, Handle_Geom2d_Curve S, Standard_Real const UFirst, Standard_Real const ULast) -> Geom2dAdaptor_HCurve

        ConstructionError is raised if UFirst>ULast or VFirst>VLast

        :type S: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :type UFirst: float
        :type ULast: float

        """
        this = _Geom2dAdaptor.new_Geom2dAdaptor_HCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _Geom2dAdaptor.Geom2dAdaptor_HCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _Geom2dAdaptor.Geom2dAdaptor_HCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Geom2dAdaptor.Geom2dAdaptor_HCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _Geom2dAdaptor.delete_Geom2dAdaptor_HCurve
Geom2dAdaptor_HCurve_swigregister = _Geom2dAdaptor.Geom2dAdaptor_HCurve_swigregister
Geom2dAdaptor_HCurve_swigregister(Geom2dAdaptor_HCurve)

def Geom2dAdaptor_HCurve_get_type_name(*args):
    """
    Geom2dAdaptor_HCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _Geom2dAdaptor.Geom2dAdaptor_HCurve_get_type_name(*args)

def Geom2dAdaptor_HCurve_get_type_descriptor(*args):
    """
    Geom2dAdaptor_HCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _Geom2dAdaptor.Geom2dAdaptor_HCurve_get_type_descriptor(*args)

class Handle_Geom2dAdaptor_HCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Geom2dAdaptor_HCurve self)

        Nullify the handle


        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Geom2dAdaptor_HCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Geom2dAdaptor_HCurve self, Geom2dAdaptor_HCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Geom2dAdaptor_HCurve self, Handle_Geom2dAdaptor_HCurve theHandle) -> Handle_Geom2dAdaptor_HCurve
        assign(Handle_Geom2dAdaptor_HCurve self, Geom2dAdaptor_HCurve thePtr) -> Handle_Geom2dAdaptor_HCurve
        assign(Handle_Geom2dAdaptor_HCurve self, Handle_Geom2dAdaptor_HCurve theHandle) -> Handle_Geom2dAdaptor_HCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Geom2dAdaptor_HCurve self) -> Geom2dAdaptor_HCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Geom2dAdaptor_HCurve self) -> Geom2dAdaptor_HCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Geom2dAdaptor_HCurve self) -> Geom2dAdaptor_HCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve___ref__(self, *args)


    def __hash__(self):
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Geom2dAdaptor.new_Handle_Geom2dAdaptor_HCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_DownCast)
    __swig_destroy__ = _Geom2dAdaptor.delete_Handle_Geom2dAdaptor_HCurve

    def get_type_name(self, *args):
        """
        get_type_name(Handle_Geom2dAdaptor_HCurve self) -> char const *

        :rtype: const char *

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_Geom2dAdaptor_HCurve self, Geom2dAdaptor_Curve C)

        Sets the field of the GenHCurve2d.

        :type C: OCC.wrapper.Geom2dAdaptor.Geom2dAdaptor_Curve

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_Set(self, *args)


    def Curve2d(self, *args):
        """
        Returns the curve used to create the GenHCurve2d.
        This is redefined from HCurve2d, cannot be inline.

        :rtype: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d

        """
        res = _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_Curve2d(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeCurve2d(self, *args):
        """
        ChangeCurve2d(Handle_Geom2dAdaptor_HCurve self) -> Geom2dAdaptor_Curve

        Returns the curve used to create the GenHCurve.

        :rtype: OCC.wrapper.Geom2dAdaptor.Geom2dAdaptor_Curve

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_ChangeCurve2d(self, *args)


    def FirstParameter(self, *args):
        """
        FirstParameter(Handle_Geom2dAdaptor_HCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(Handle_Geom2dAdaptor_HCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(Handle_Geom2dAdaptor_HCurve self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(Handle_Geom2dAdaptor_HCurve self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(Handle_Geom2dAdaptor_HCurve self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(Handle_Geom2dAdaptor_HCurve self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor2d_HCurve2d

        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(Handle_Geom2dAdaptor_HCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(Handle_Geom2dAdaptor_HCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(Handle_Geom2dAdaptor_HCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_Period(self, *args)


    def Value(self, *args):
        """
        Value(Handle_Geom2dAdaptor_HCurve self, Standard_Real const U) -> gp_Pnt2d

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_Value(self, *args)


    def D0(self, *args):
        """
        D0(Handle_Geom2dAdaptor_HCurve self, Standard_Real const U, gp_Pnt2d P)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_Geom2dAdaptor_HCurve self, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_Geom2dAdaptor_HCurve self, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V1, gp_Vec2d V2)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V1: OCC.wrapper.gp.gp_Vec2d
        :type V2: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_Geom2dAdaptor_HCurve self, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V1, gp_Vec2d V2, gp_Vec2d V3)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V1: OCC.wrapper.gp.gp_Vec2d
        :type V2: OCC.wrapper.gp.gp_Vec2d
        :type V3: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_Geom2dAdaptor_HCurve self, Standard_Real const U, Standard_Integer const N) -> gp_Vec2d

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(Handle_Geom2dAdaptor_HCurve self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Handle_Geom2dAdaptor_HCurve self) -> GeomAbs_CurveType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_GetType(self, *args)


    def Line(self, *args):
        """
        Line(Handle_Geom2dAdaptor_HCurve self) -> gp_Lin2d

        :rtype: OCC.wrapper.gp.gp_Lin2d

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(Handle_Geom2dAdaptor_HCurve self) -> gp_Circ2d

        :rtype: OCC.wrapper.gp.gp_Circ2d

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Handle_Geom2dAdaptor_HCurve self) -> gp_Elips2d

        :rtype: OCC.wrapper.gp.gp_Elips2d

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(Handle_Geom2dAdaptor_HCurve self) -> gp_Hypr2d

        :rtype: OCC.wrapper.gp.gp_Hypr2d

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(Handle_Geom2dAdaptor_HCurve self) -> gp_Parab2d

        :rtype: OCC.wrapper.gp.gp_Parab2d

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_Geom2dAdaptor_HCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(Handle_Geom2dAdaptor_HCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(Handle_Geom2dAdaptor_HCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(Handle_Geom2dAdaptor_HCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Handle_Geom2dAdaptor_HCurve self) -> Handle_Geom2d_BezierCurve

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BezierCurve

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Handle_Geom2dAdaptor_HCurve self) -> Handle_Geom2d_BSplineCurve

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_BSpline(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Geom2dAdaptor_HCurve self)

        Memory deallocator for transient classes


        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Geom2dAdaptor_HCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Geom2dAdaptor_HCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Geom2dAdaptor_HCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Geom2dAdaptor_HCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Geom2dAdaptor_HCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Geom2dAdaptor_HCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Geom2dAdaptor_HCurve self)

        Increments the reference counter of this object


        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Geom2dAdaptor_HCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_DecrementRefCounter(self, *args)

Handle_Geom2dAdaptor_HCurve_swigregister = _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_swigregister
Handle_Geom2dAdaptor_HCurve_swigregister(Handle_Geom2dAdaptor_HCurve)

def Handle_Geom2dAdaptor_HCurve_DownCast(thing):
    return _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_DownCast(thing)
Handle_Geom2dAdaptor_HCurve_DownCast = _Geom2dAdaptor.Handle_Geom2dAdaptor_HCurve_DownCast

class Geom2dAdaptor_(object):
    """
    this package  contains the geometric definition of
    2d  curves compatible  with  the  Adaptor  package
    templates.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def MakeCurve(*args):
        """
        MakeCurve(Adaptor2d_Curve2d HC) -> Handle_Geom2d_Curve

        Inherited  from    GHCurve.   Provides a  curve
        handled by reference.
        Creates  a 2d  curve  from  a  HCurve2d.  This
        cannot process the OtherCurves.

        :type HC: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        return _Geom2dAdaptor.Geom2dAdaptor__MakeCurve(*args)

    MakeCurve = staticmethod(MakeCurve)

    def __init__(self):
        """
        this package  contains the geometric definition of
        2d  curves compatible  with  the  Adaptor  package
        templates.
        """
        this = _Geom2dAdaptor.new_Geom2dAdaptor_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _Geom2dAdaptor.delete_Geom2dAdaptor_
Geom2dAdaptor__swigregister = _Geom2dAdaptor.Geom2dAdaptor__swigregister
Geom2dAdaptor__swigregister(Geom2dAdaptor_)

def Geom2dAdaptor__MakeCurve(*args):
    """
    Geom2dAdaptor__MakeCurve(Adaptor2d_Curve2d HC) -> Handle_Geom2d_Curve

    Inherited  from    GHCurve.   Provides a  curve
    handled by reference.
    Creates  a 2d  curve  from  a  HCurve2d.  This
    cannot process the OtherCurves.

    :type HC: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d
    :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

    """
    return _Geom2dAdaptor.Geom2dAdaptor__MakeCurve(*args)

class Geom2dAdaptor_Curve(Adaptor2d.Adaptor2d_Curve2d):
    """
    An interface between the services provided by any
    curve from the package Geom2d and those required
    of the curve by algorithms which use it.

    Polynomial coefficients of BSpline curves used for their evaluation are
    cached for better performance. Therefore these evaluations are not
    thread-safe and parallel evaluations need to be prevented.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Geom2dAdaptor_Curve self) -> Geom2dAdaptor_Curve
        __init__(Geom2dAdaptor_Curve self, Handle_Geom2d_Curve C) -> Geom2dAdaptor_Curve
        __init__(Geom2dAdaptor_Curve self, Handle_Geom2d_Curve C, Standard_Real const UFirst, Standard_Real const ULast) -> Geom2dAdaptor_Curve

        ConstructionError is raised if Ufirst>Ulast

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :type UFirst: float
        :type ULast: float

        """
        this = _Geom2dAdaptor.new_Geom2dAdaptor_Curve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Load(self, *args):
        """
        Load(Geom2dAdaptor_Curve self, Handle_Geom2d_Curve C)
        Load(Geom2dAdaptor_Curve self, Handle_Geom2d_Curve C, Standard_Real const UFirst, Standard_Real const ULast)

        ConstructionError is raised if Ufirst>Ulast

        :type C: OCC.wrapper.Geom2d.Handle_Geom2d_Curve
        :type UFirst: float
        :type ULast: float

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_Load(self, *args)


    def Curve(self, *args):
        """
        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_Curve

        """
        res = _Geom2dAdaptor.Geom2dAdaptor_Curve_Curve(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstParameter(self, *args):
        """
        FirstParameter(Geom2dAdaptor_Curve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(Geom2dAdaptor_Curve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(Geom2dAdaptor_Curve self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(Geom2dAdaptor_Curve self, GeomAbs_Shape const S) -> Standard_Integer

        If necessary,  breaks the  curve in  intervals  of
        continuity  <S>.    And  returns   the number   of
        intervals.

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(Geom2dAdaptor_Curve self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        Stores in <T> the  parameters bounding the intervals
        of continuity <S>.

        The array must provide  enough room to  accomodate
        for the parameters. i.e. T.Length() > NbIntervals()

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(Geom2dAdaptor_Curve self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor2d_HCurve2d

        Returns    a  curve equivalent   of  <me>  between
        parameters <First>  and <Last>. <Tol>  is used  to
        test for 3d points confusion.
        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(Geom2dAdaptor_Curve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(Geom2dAdaptor_Curve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(Geom2dAdaptor_Curve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_Period(self, *args)


    def Value(self, *args):
        """
        Value(Geom2dAdaptor_Curve self, Standard_Real const U) -> gp_Pnt2d

        Computes the point of parameter U on the curve

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_Value(self, *args)


    def D0(self, *args):
        """
        D0(Geom2dAdaptor_Curve self, Standard_Real const U, gp_Pnt2d P)

        Computes the point of parameter U.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_D0(self, *args)


    def D1(self, *args):
        """
        D1(Geom2dAdaptor_Curve self, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V)

        Computes the point of parameter U on the curve with its
        first derivative.
        Raised if the continuity of the current interval
        is not C1.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_D1(self, *args)


    def D2(self, *args):
        """
        D2(Geom2dAdaptor_Curve self, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V1, gp_Vec2d V2)

        Returns the point P of parameter U, the first and second
        derivatives V1 and V2.
        Raised if the continuity of the current interval
        is not C2.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V1: OCC.wrapper.gp.gp_Vec2d
        :type V2: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_D2(self, *args)


    def D3(self, *args):
        """
        D3(Geom2dAdaptor_Curve self, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V1, gp_Vec2d V2, gp_Vec2d V3)

        Returns the point P of parameter U, the first, the second
        and the third derivative.
        Raised if the continuity of the current interval
        is not C3.

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V1: OCC.wrapper.gp.gp_Vec2d
        :type V2: OCC.wrapper.gp.gp_Vec2d
        :type V3: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_D3(self, *args)


    def DN(self, *args):
        """
        DN(Geom2dAdaptor_Curve self, Standard_Real const U, Standard_Integer const N) -> gp_Vec2d

        The returned vector gives the value of the derivative for the
        order of derivation N.
        Raised if the continuity of the current interval
        is not CN.
        Raised if N < 1.

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(Geom2dAdaptor_Curve self, Standard_Real const Ruv) -> Standard_Real

        returns the parametric resolution

        :type Ruv: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Geom2dAdaptor_Curve self) -> GeomAbs_CurveType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_GetType(self, *args)


    def Line(self, *args):
        """
        Line(Geom2dAdaptor_Curve self) -> gp_Lin2d

        :rtype: OCC.wrapper.gp.gp_Lin2d

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(Geom2dAdaptor_Curve self) -> gp_Circ2d

        :rtype: OCC.wrapper.gp.gp_Circ2d

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Geom2dAdaptor_Curve self) -> gp_Elips2d

        :rtype: OCC.wrapper.gp.gp_Elips2d

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(Geom2dAdaptor_Curve self) -> gp_Hypr2d

        :rtype: OCC.wrapper.gp.gp_Hypr2d

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(Geom2dAdaptor_Curve self) -> gp_Parab2d

        :rtype: OCC.wrapper.gp.gp_Parab2d

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(Geom2dAdaptor_Curve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(Geom2dAdaptor_Curve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(Geom2dAdaptor_Curve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(Geom2dAdaptor_Curve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_NbKnots(self, *args)


    def NbSamples(self, *args):
        """
        NbSamples(Geom2dAdaptor_Curve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_NbSamples(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Geom2dAdaptor_Curve self) -> Handle_Geom2d_BezierCurve

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BezierCurve

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Geom2dAdaptor_Curve self) -> Handle_Geom2d_BSplineCurve

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

        """
        return _Geom2dAdaptor.Geom2dAdaptor_Curve_BSpline(self, *args)

    __swig_destroy__ = _Geom2dAdaptor.delete_Geom2dAdaptor_Curve
Geom2dAdaptor_Curve_swigregister = _Geom2dAdaptor.Geom2dAdaptor_Curve_swigregister
Geom2dAdaptor_Curve_swigregister(Geom2dAdaptor_Curve)

class Handle_Geom2dAdaptor_GHCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_Geom2dAdaptor_GHCurve self)

        Nullify the handle


        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_Geom2dAdaptor_GHCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_Geom2dAdaptor_GHCurve self, Geom2dAdaptor_GHCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_Geom2dAdaptor_GHCurve self, Handle_Geom2dAdaptor_GHCurve theHandle) -> Handle_Geom2dAdaptor_GHCurve
        assign(Handle_Geom2dAdaptor_GHCurve self, Geom2dAdaptor_GHCurve thePtr) -> Handle_Geom2dAdaptor_GHCurve
        assign(Handle_Geom2dAdaptor_GHCurve self, Handle_Geom2dAdaptor_GHCurve theHandle) -> Handle_Geom2dAdaptor_GHCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_Geom2dAdaptor_GHCurve self) -> Geom2dAdaptor_GHCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_Geom2dAdaptor_GHCurve self) -> Geom2dAdaptor_GHCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_Geom2dAdaptor_GHCurve self) -> Geom2dAdaptor_GHCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve___ref__(self, *args)


    def __hash__(self):
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _Geom2dAdaptor.new_Handle_Geom2dAdaptor_GHCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_DownCast)
    __swig_destroy__ = _Geom2dAdaptor.delete_Handle_Geom2dAdaptor_GHCurve

    def Set(self, *args):
        """
        Set(Handle_Geom2dAdaptor_GHCurve self, Geom2dAdaptor_Curve C)

        Sets the field of the GenHCurve2d.

        :type C: OCC.wrapper.Geom2dAdaptor.Geom2dAdaptor_Curve

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_Set(self, *args)


    def Curve2d(self, *args):
        """
        Returns the curve used to create the GenHCurve2d.
        This is redefined from HCurve2d, cannot be inline.

        :rtype: OCC.wrapper.Adaptor2d.Adaptor2d_Curve2d

        """
        res = _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_Curve2d(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeCurve2d(self, *args):
        """
        ChangeCurve2d(Handle_Geom2dAdaptor_GHCurve self) -> Geom2dAdaptor_Curve

        Returns the curve used to create the GenHCurve.

        :rtype: OCC.wrapper.Geom2dAdaptor.Geom2dAdaptor_Curve

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_ChangeCurve2d(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_Geom2dAdaptor_GHCurve self) -> char const *

        :rtype: const char *

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def FirstParameter(self, *args):
        """
        FirstParameter(Handle_Geom2dAdaptor_GHCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_FirstParameter(self, *args)


    def LastParameter(self, *args):
        """
        LastParameter(Handle_Geom2dAdaptor_GHCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_LastParameter(self, *args)


    def Continuity(self, *args):
        """
        Continuity(Handle_Geom2dAdaptor_GHCurve self) -> GeomAbs_Shape

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_Continuity(self, *args)


    def NbIntervals(self, *args):
        """
        NbIntervals(Handle_Geom2dAdaptor_GHCurve self, GeomAbs_Shape const S) -> Standard_Integer

        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_NbIntervals(self, *args)


    def Intervals(self, *args):
        """
        Intervals(Handle_Geom2dAdaptor_GHCurve self, NCollection_Array1_Standard_Real T, GeomAbs_Shape const S)

        :type T: OCC.wrapper.TColStd.TColStd_Array1OfReal
        :type S: OCC.wrapper.GeomAbs.GeomAbs_Shape

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_Intervals(self, *args)


    def Trim(self, *args):
        """
        Trim(Handle_Geom2dAdaptor_GHCurve self, Standard_Real const First, Standard_Real const Last, Standard_Real const Tol) -> Handle_Adaptor2d_HCurve2d

        If <First> >= <Last>

        :type First: float
        :type Last: float
        :type Tol: float
        :rtype: OCC.wrapper.Adaptor2d.Handle_Adaptor2d_HCurve2d

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_Trim(self, *args)


    def IsClosed(self, *args):
        """
        IsClosed(Handle_Geom2dAdaptor_GHCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_IsClosed(self, *args)


    def IsPeriodic(self, *args):
        """
        IsPeriodic(Handle_Geom2dAdaptor_GHCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_IsPeriodic(self, *args)


    def Period(self, *args):
        """
        Period(Handle_Geom2dAdaptor_GHCurve self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_Period(self, *args)


    def Value(self, *args):
        """
        Value(Handle_Geom2dAdaptor_GHCurve self, Standard_Real const U) -> gp_Pnt2d

        :type U: float
        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_Value(self, *args)


    def D0(self, *args):
        """
        D0(Handle_Geom2dAdaptor_GHCurve self, Standard_Real const U, gp_Pnt2d P)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_Geom2dAdaptor_GHCurve self, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_Geom2dAdaptor_GHCurve self, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V1, gp_Vec2d V2)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V1: OCC.wrapper.gp.gp_Vec2d
        :type V2: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_Geom2dAdaptor_GHCurve self, Standard_Real const U, gp_Pnt2d P, gp_Vec2d V1, gp_Vec2d V2, gp_Vec2d V3)

        :type U: float
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type V1: OCC.wrapper.gp.gp_Vec2d
        :type V2: OCC.wrapper.gp.gp_Vec2d
        :type V3: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_Geom2dAdaptor_GHCurve self, Standard_Real const U, Standard_Integer const N) -> gp_Vec2d

        :type U: float
        :type N: int
        :rtype: OCC.wrapper.gp.gp_Vec2d

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_DN(self, *args)


    def Resolution(self, *args):
        """
        Resolution(Handle_Geom2dAdaptor_GHCurve self, Standard_Real const R3d) -> Standard_Real

        :type R3d: float
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_Resolution(self, *args)


    def GetType(self, *args):
        """
        GetType(Handle_Geom2dAdaptor_GHCurve self) -> GeomAbs_CurveType

        :rtype: OCC.wrapper.GeomAbs.GeomAbs_CurveType

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_GetType(self, *args)


    def Line(self, *args):
        """
        Line(Handle_Geom2dAdaptor_GHCurve self) -> gp_Lin2d

        :rtype: OCC.wrapper.gp.gp_Lin2d

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(Handle_Geom2dAdaptor_GHCurve self) -> gp_Circ2d

        :rtype: OCC.wrapper.gp.gp_Circ2d

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Handle_Geom2dAdaptor_GHCurve self) -> gp_Elips2d

        :rtype: OCC.wrapper.gp.gp_Elips2d

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_Ellipse(self, *args)


    def Hyperbola(self, *args):
        """
        Hyperbola(Handle_Geom2dAdaptor_GHCurve self) -> gp_Hypr2d

        :rtype: OCC.wrapper.gp.gp_Hypr2d

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_Hyperbola(self, *args)


    def Parabola(self, *args):
        """
        Parabola(Handle_Geom2dAdaptor_GHCurve self) -> gp_Parab2d

        :rtype: OCC.wrapper.gp.gp_Parab2d

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_Parabola(self, *args)


    def Degree(self, *args):
        """
        Degree(Handle_Geom2dAdaptor_GHCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_Degree(self, *args)


    def IsRational(self, *args):
        """
        IsRational(Handle_Geom2dAdaptor_GHCurve self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_IsRational(self, *args)


    def NbPoles(self, *args):
        """
        NbPoles(Handle_Geom2dAdaptor_GHCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_NbPoles(self, *args)


    def NbKnots(self, *args):
        """
        NbKnots(Handle_Geom2dAdaptor_GHCurve self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_NbKnots(self, *args)


    def Bezier(self, *args):
        """
        Bezier(Handle_Geom2dAdaptor_GHCurve self) -> Handle_Geom2d_BezierCurve

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BezierCurve

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_Bezier(self, *args)


    def BSpline(self, *args):
        """
        BSpline(Handle_Geom2dAdaptor_GHCurve self) -> Handle_Geom2d_BSplineCurve

        :rtype: OCC.wrapper.Geom2d.Handle_Geom2d_BSplineCurve

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_BSpline(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_Geom2dAdaptor_GHCurve self)

        Memory deallocator for transient classes


        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_Geom2dAdaptor_GHCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_Geom2dAdaptor_GHCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_Geom2dAdaptor_GHCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_Geom2dAdaptor_GHCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_Geom2dAdaptor_GHCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_Geom2dAdaptor_GHCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_Geom2dAdaptor_GHCurve self)

        Increments the reference counter of this object


        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_Geom2dAdaptor_GHCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_DecrementRefCounter(self, *args)

Handle_Geom2dAdaptor_GHCurve_swigregister = _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_swigregister
Handle_Geom2dAdaptor_GHCurve_swigregister(Handle_Geom2dAdaptor_GHCurve)

def Handle_Geom2dAdaptor_GHCurve_DownCast(thing):
    return _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_DownCast(thing)
Handle_Geom2dAdaptor_GHCurve_DownCast = _Geom2dAdaptor.Handle_Geom2dAdaptor_GHCurve_DownCast



