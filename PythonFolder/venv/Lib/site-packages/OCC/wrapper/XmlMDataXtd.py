# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_XmlMDataXtd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_XmlMDataXtd')
    _XmlMDataXtd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_XmlMDataXtd', [dirname(__file__)])
        except ImportError:
            import _XmlMDataXtd
            return _XmlMDataXtd
        try:
            _mod = imp.load_module('_XmlMDataXtd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _XmlMDataXtd = swig_import_helper()
    del swig_import_helper
else:
    import _XmlMDataXtd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _XmlMDataXtd.delete_SwigPyIterator

    def value(self):
        return _XmlMDataXtd.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _XmlMDataXtd.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _XmlMDataXtd.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _XmlMDataXtd.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _XmlMDataXtd.SwigPyIterator_equal(self, x)

    def copy(self):
        return _XmlMDataXtd.SwigPyIterator_copy(self)

    def next(self):
        return _XmlMDataXtd.SwigPyIterator_next(self)

    def __next__(self):
        return _XmlMDataXtd.SwigPyIterator___next__(self)

    def previous(self):
        return _XmlMDataXtd.SwigPyIterator_previous(self)

    def advance(self, n):
        return _XmlMDataXtd.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _XmlMDataXtd.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _XmlMDataXtd.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _XmlMDataXtd.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _XmlMDataXtd.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _XmlMDataXtd.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _XmlMDataXtd.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _XmlMDataXtd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XmlMDataXtd.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_XmlMDataXtd.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _XmlMDataXtd.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XmlMDataXtd.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlMDataXtd.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _XmlMDataXtd.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _XmlMDataXtd.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _XmlMDataXtd.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _XmlMDataXtd.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_XmlMDataXtd.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _XmlMDataXtd.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _XmlMDataXtd.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlMDataXtd.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _XmlMDataXtd.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _XmlMDataXtd.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _XmlMDataXtd.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _XmlMDataXtd.ptr_to_number(item)
ptr_to_number = _XmlMDataXtd.ptr_to_number

def HashCode(*args):
    return _XmlMDataXtd.HashCode(*args)
HashCode = _XmlMDataXtd.HashCode

def ptr_equal(a, b):
    return _XmlMDataXtd.ptr_equal(a, b)
ptr_equal = _XmlMDataXtd.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XmlObjMgt
else:
    import XmlObjMgt
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import LDOM
else:
    import LDOM
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import XmlMDF
else:
    import XmlMDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
class XmlMDataXtd_AxisDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataXtd_AxisDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataXtd_AxisDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataXtd_AxisDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataXtd_AxisDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataXtd.new_XmlMDataXtd_AxisDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataXtd_AxisDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataXtd.XmlMDataXtd_AxisDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataXtd_AxisDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataXtd_AxisDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataXtd.XmlMDataXtd_AxisDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataXtd.XmlMDataXtd_AxisDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataXtd.XmlMDataXtd_AxisDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.XmlMDataXtd_AxisDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataXtd.delete_XmlMDataXtd_AxisDriver
XmlMDataXtd_AxisDriver_swigregister = _XmlMDataXtd.XmlMDataXtd_AxisDriver_swigregister
XmlMDataXtd_AxisDriver_swigregister(XmlMDataXtd_AxisDriver)

def XmlMDataXtd_AxisDriver_get_type_name(*args):
    """
    XmlMDataXtd_AxisDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataXtd.XmlMDataXtd_AxisDriver_get_type_name(*args)

def XmlMDataXtd_AxisDriver_get_type_descriptor(*args):
    """
    XmlMDataXtd_AxisDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataXtd.XmlMDataXtd_AxisDriver_get_type_descriptor(*args)

class XmlMDataXtd_PlacementDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataXtd_PlacementDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataXtd_PlacementDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataXtd_PlacementDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataXtd_PlacementDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataXtd.new_XmlMDataXtd_PlacementDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataXtd_PlacementDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataXtd.XmlMDataXtd_PlacementDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataXtd_PlacementDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataXtd_PlacementDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataXtd.XmlMDataXtd_PlacementDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataXtd.XmlMDataXtd_PlacementDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataXtd.XmlMDataXtd_PlacementDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.XmlMDataXtd_PlacementDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataXtd.delete_XmlMDataXtd_PlacementDriver
XmlMDataXtd_PlacementDriver_swigregister = _XmlMDataXtd.XmlMDataXtd_PlacementDriver_swigregister
XmlMDataXtd_PlacementDriver_swigregister(XmlMDataXtd_PlacementDriver)

def XmlMDataXtd_PlacementDriver_get_type_name(*args):
    """
    XmlMDataXtd_PlacementDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataXtd.XmlMDataXtd_PlacementDriver_get_type_name(*args)

def XmlMDataXtd_PlacementDriver_get_type_descriptor(*args):
    """
    XmlMDataXtd_PlacementDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataXtd.XmlMDataXtd_PlacementDriver_get_type_descriptor(*args)

class XmlMDataXtd_PresentationDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataXtd_PresentationDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataXtd_PresentationDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataXtd_PresentationDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataXtd_PresentationDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataXtd.new_XmlMDataXtd_PresentationDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataXtd_PresentationDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataXtd.XmlMDataXtd_PresentationDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataXtd_PresentationDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataXtd_PresentationDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataXtd.XmlMDataXtd_PresentationDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataXtd.XmlMDataXtd_PresentationDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataXtd.XmlMDataXtd_PresentationDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.XmlMDataXtd_PresentationDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataXtd.delete_XmlMDataXtd_PresentationDriver
XmlMDataXtd_PresentationDriver_swigregister = _XmlMDataXtd.XmlMDataXtd_PresentationDriver_swigregister
XmlMDataXtd_PresentationDriver_swigregister(XmlMDataXtd_PresentationDriver)

def XmlMDataXtd_PresentationDriver_get_type_name(*args):
    """
    XmlMDataXtd_PresentationDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataXtd.XmlMDataXtd_PresentationDriver_get_type_name(*args)

def XmlMDataXtd_PresentationDriver_get_type_descriptor(*args):
    """
    XmlMDataXtd_PresentationDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataXtd.XmlMDataXtd_PresentationDriver_get_type_descriptor(*args)

class XmlMDataXtd_ShapeDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataXtd_ShapeDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataXtd_ShapeDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataXtd_ShapeDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataXtd_ShapeDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataXtd.new_XmlMDataXtd_ShapeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataXtd_ShapeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataXtd.XmlMDataXtd_ShapeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataXtd_ShapeDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataXtd_ShapeDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataXtd.XmlMDataXtd_ShapeDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataXtd.XmlMDataXtd_ShapeDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataXtd.XmlMDataXtd_ShapeDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.XmlMDataXtd_ShapeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataXtd.delete_XmlMDataXtd_ShapeDriver
XmlMDataXtd_ShapeDriver_swigregister = _XmlMDataXtd.XmlMDataXtd_ShapeDriver_swigregister
XmlMDataXtd_ShapeDriver_swigregister(XmlMDataXtd_ShapeDriver)

def XmlMDataXtd_ShapeDriver_get_type_name(*args):
    """
    XmlMDataXtd_ShapeDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataXtd.XmlMDataXtd_ShapeDriver_get_type_name(*args)

def XmlMDataXtd_ShapeDriver_get_type_descriptor(*args):
    """
    XmlMDataXtd_ShapeDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataXtd.XmlMDataXtd_ShapeDriver_get_type_descriptor(*args)

class Handle_XmlMDataXtd_PlacementDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataXtd_PlacementDriver self)

        Nullify the handle


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataXtd_PlacementDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataXtd_PlacementDriver self, XmlMDataXtd_PlacementDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataXtd_PlacementDriver self, Handle_XmlMDataXtd_PlacementDriver theHandle) -> Handle_XmlMDataXtd_PlacementDriver
        assign(Handle_XmlMDataXtd_PlacementDriver self, XmlMDataXtd_PlacementDriver thePtr) -> Handle_XmlMDataXtd_PlacementDriver
        assign(Handle_XmlMDataXtd_PlacementDriver self, Handle_XmlMDataXtd_PlacementDriver theHandle) -> Handle_XmlMDataXtd_PlacementDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataXtd_PlacementDriver self) -> XmlMDataXtd_PlacementDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataXtd_PlacementDriver self) -> XmlMDataXtd_PlacementDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataXtd_PlacementDriver self) -> XmlMDataXtd_PlacementDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataXtd.new_Handle_XmlMDataXtd_PlacementDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver_DownCast)
    __swig_destroy__ = _XmlMDataXtd.delete_Handle_XmlMDataXtd_PlacementDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataXtd_PlacementDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataXtd_PlacementDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataXtd_PlacementDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataXtd_PlacementDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataXtd_PlacementDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataXtd_PlacementDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataXtd_PlacementDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataXtd_PlacementDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataXtd_PlacementDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataXtd_PlacementDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataXtd_PlacementDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataXtd_PlacementDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataXtd_PlacementDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataXtd_PlacementDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataXtd_PlacementDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataXtd_PlacementDriver_swigregister = _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver_swigregister
Handle_XmlMDataXtd_PlacementDriver_swigregister(Handle_XmlMDataXtd_PlacementDriver)

def Handle_XmlMDataXtd_PlacementDriver_DownCast(thing):
    return _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver_DownCast(thing)
Handle_XmlMDataXtd_PlacementDriver_DownCast = _XmlMDataXtd.Handle_XmlMDataXtd_PlacementDriver_DownCast

class XmlMDataXtd_(object):
    """
    Storage and Retrieval drivers for modelling attributes.
    Transient attributes are defined in package TDataXtd.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddDrivers(*args):
        """
        AddDrivers(Handle_XmlMDF_ADriverTable aDriverTable, Handle_Message_Messenger anMsgDrv)

        Adds the attribute drivers to <aDriverTable>.

        :type aDriverTable: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable
        :type anMsgDrv: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _XmlMDataXtd.XmlMDataXtd__AddDrivers(*args)

    AddDrivers = staticmethod(AddDrivers)

    def SetDocumentVersion(*args):
        """
        SetDocumentVersion(Standard_Integer const DocVersion)

        :type DocVersion: int

        """
        return _XmlMDataXtd.XmlMDataXtd__SetDocumentVersion(*args)

    SetDocumentVersion = staticmethod(SetDocumentVersion)

    def DocumentVersion(*args):
        """
        DocumentVersion() -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.XmlMDataXtd__DocumentVersion(*args)

    DocumentVersion = staticmethod(DocumentVersion)

    def __init__(self):
        """
        Storage and Retrieval drivers for modelling attributes.
        Transient attributes are defined in package TDataXtd.
        """
        this = _XmlMDataXtd.new_XmlMDataXtd_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _XmlMDataXtd.delete_XmlMDataXtd_
XmlMDataXtd__swigregister = _XmlMDataXtd.XmlMDataXtd__swigregister
XmlMDataXtd__swigregister(XmlMDataXtd_)

def XmlMDataXtd__AddDrivers(*args):
    """
    XmlMDataXtd__AddDrivers(Handle_XmlMDF_ADriverTable aDriverTable, Handle_Message_Messenger anMsgDrv)

    Adds the attribute drivers to <aDriverTable>.

    :type aDriverTable: OCC.wrapper.XmlMDF.Handle_XmlMDF_ADriverTable
    :type anMsgDrv: OCC.wrapper.Message.Handle_Message_Messenger

    """
    return _XmlMDataXtd.XmlMDataXtd__AddDrivers(*args)

def XmlMDataXtd__SetDocumentVersion(*args):
    """
    XmlMDataXtd__SetDocumentVersion(Standard_Integer const DocVersion)

    :type DocVersion: int

    """
    return _XmlMDataXtd.XmlMDataXtd__SetDocumentVersion(*args)

def XmlMDataXtd__DocumentVersion(*args):
    """
    XmlMDataXtd__DocumentVersion() -> Standard_Integer

    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _XmlMDataXtd.XmlMDataXtd__DocumentVersion(*args)

class XmlMDataXtd_PatternStdDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataXtd_PatternStdDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataXtd_PatternStdDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataXtd_PatternStdDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataXtd_PatternStdDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataXtd.new_XmlMDataXtd_PatternStdDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataXtd_PatternStdDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataXtd.XmlMDataXtd_PatternStdDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataXtd_PatternStdDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataXtd_PatternStdDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataXtd.XmlMDataXtd_PatternStdDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataXtd.XmlMDataXtd_PatternStdDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataXtd.XmlMDataXtd_PatternStdDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.XmlMDataXtd_PatternStdDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataXtd.delete_XmlMDataXtd_PatternStdDriver
XmlMDataXtd_PatternStdDriver_swigregister = _XmlMDataXtd.XmlMDataXtd_PatternStdDriver_swigregister
XmlMDataXtd_PatternStdDriver_swigregister(XmlMDataXtd_PatternStdDriver)

def XmlMDataXtd_PatternStdDriver_get_type_name(*args):
    """
    XmlMDataXtd_PatternStdDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataXtd.XmlMDataXtd_PatternStdDriver_get_type_name(*args)

def XmlMDataXtd_PatternStdDriver_get_type_descriptor(*args):
    """
    XmlMDataXtd_PatternStdDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataXtd.XmlMDataXtd_PatternStdDriver_get_type_descriptor(*args)

class XmlMDataXtd_PlaneDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataXtd_PlaneDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataXtd_PlaneDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataXtd_PlaneDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataXtd_PlaneDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataXtd.new_XmlMDataXtd_PlaneDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataXtd_PlaneDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataXtd.XmlMDataXtd_PlaneDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataXtd_PlaneDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataXtd_PlaneDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataXtd.XmlMDataXtd_PlaneDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataXtd.XmlMDataXtd_PlaneDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataXtd.XmlMDataXtd_PlaneDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.XmlMDataXtd_PlaneDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataXtd.delete_XmlMDataXtd_PlaneDriver
XmlMDataXtd_PlaneDriver_swigregister = _XmlMDataXtd.XmlMDataXtd_PlaneDriver_swigregister
XmlMDataXtd_PlaneDriver_swigregister(XmlMDataXtd_PlaneDriver)

def XmlMDataXtd_PlaneDriver_get_type_name(*args):
    """
    XmlMDataXtd_PlaneDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataXtd.XmlMDataXtd_PlaneDriver_get_type_name(*args)

def XmlMDataXtd_PlaneDriver_get_type_descriptor(*args):
    """
    XmlMDataXtd_PlaneDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataXtd.XmlMDataXtd_PlaneDriver_get_type_descriptor(*args)

class XmlMDataXtd_PointDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataXtd_PointDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataXtd_PointDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataXtd_PointDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataXtd_PointDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataXtd.new_XmlMDataXtd_PointDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataXtd_PointDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataXtd.XmlMDataXtd_PointDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataXtd_PointDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataXtd_PointDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataXtd.XmlMDataXtd_PointDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataXtd.XmlMDataXtd_PointDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataXtd.XmlMDataXtd_PointDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.XmlMDataXtd_PointDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataXtd.delete_XmlMDataXtd_PointDriver
XmlMDataXtd_PointDriver_swigregister = _XmlMDataXtd.XmlMDataXtd_PointDriver_swigregister
XmlMDataXtd_PointDriver_swigregister(XmlMDataXtd_PointDriver)

def XmlMDataXtd_PointDriver_get_type_name(*args):
    """
    XmlMDataXtd_PointDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataXtd.XmlMDataXtd_PointDriver_get_type_name(*args)

def XmlMDataXtd_PointDriver_get_type_descriptor(*args):
    """
    XmlMDataXtd_PointDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataXtd.XmlMDataXtd_PointDriver_get_type_descriptor(*args)

class Handle_XmlMDataXtd_PresentationDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataXtd_PresentationDriver self)

        Nullify the handle


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataXtd_PresentationDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataXtd_PresentationDriver self, XmlMDataXtd_PresentationDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataXtd_PresentationDriver self, Handle_XmlMDataXtd_PresentationDriver theHandle) -> Handle_XmlMDataXtd_PresentationDriver
        assign(Handle_XmlMDataXtd_PresentationDriver self, XmlMDataXtd_PresentationDriver thePtr) -> Handle_XmlMDataXtd_PresentationDriver
        assign(Handle_XmlMDataXtd_PresentationDriver self, Handle_XmlMDataXtd_PresentationDriver theHandle) -> Handle_XmlMDataXtd_PresentationDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataXtd_PresentationDriver self) -> XmlMDataXtd_PresentationDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataXtd_PresentationDriver self) -> XmlMDataXtd_PresentationDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataXtd_PresentationDriver self) -> XmlMDataXtd_PresentationDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataXtd.new_Handle_XmlMDataXtd_PresentationDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_DownCast)
    __swig_destroy__ = _XmlMDataXtd.delete_Handle_XmlMDataXtd_PresentationDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataXtd_PresentationDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataXtd_PresentationDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataXtd_PresentationDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataXtd_PresentationDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataXtd_PresentationDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataXtd_PresentationDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataXtd_PresentationDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataXtd_PresentationDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataXtd_PresentationDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataXtd_PresentationDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataXtd_PresentationDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataXtd_PresentationDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataXtd_PresentationDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataXtd_PresentationDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataXtd_PresentationDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataXtd_PresentationDriver_swigregister = _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_swigregister
Handle_XmlMDataXtd_PresentationDriver_swigregister(Handle_XmlMDataXtd_PresentationDriver)

def Handle_XmlMDataXtd_PresentationDriver_DownCast(thing):
    return _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_DownCast(thing)
Handle_XmlMDataXtd_PresentationDriver_DownCast = _XmlMDataXtd.Handle_XmlMDataXtd_PresentationDriver_DownCast

class XmlMDataXtd_PositionDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataXtd_PositionDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataXtd_PositionDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataXtd_PositionDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataXtd_PositionDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataXtd.new_XmlMDataXtd_PositionDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataXtd_PositionDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataXtd.XmlMDataXtd_PositionDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataXtd_PositionDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataXtd_PositionDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataXtd.XmlMDataXtd_PositionDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataXtd.XmlMDataXtd_PositionDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataXtd.XmlMDataXtd_PositionDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.XmlMDataXtd_PositionDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataXtd.delete_XmlMDataXtd_PositionDriver
XmlMDataXtd_PositionDriver_swigregister = _XmlMDataXtd.XmlMDataXtd_PositionDriver_swigregister
XmlMDataXtd_PositionDriver_swigregister(XmlMDataXtd_PositionDriver)

def XmlMDataXtd_PositionDriver_get_type_name(*args):
    """
    XmlMDataXtd_PositionDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataXtd.XmlMDataXtd_PositionDriver_get_type_name(*args)

def XmlMDataXtd_PositionDriver_get_type_descriptor(*args):
    """
    XmlMDataXtd_PositionDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataXtd.XmlMDataXtd_PositionDriver_get_type_descriptor(*args)

class XmlMDataXtd_TriangulationDriver(XmlMDF.XmlMDF_ADriver):
    """TDataStd_Mesh attribute XML Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataXtd_TriangulationDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataXtd_TriangulationDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataXtd_TriangulationDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataXtd_TriangulationDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataXtd.new_XmlMDataXtd_TriangulationDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataXtd_TriangulationDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataXtd.XmlMDataXtd_TriangulationDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataXtd_TriangulationDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataXtd_TriangulationDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataXtd.XmlMDataXtd_TriangulationDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataXtd.XmlMDataXtd_TriangulationDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataXtd.XmlMDataXtd_TriangulationDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.XmlMDataXtd_TriangulationDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataXtd.delete_XmlMDataXtd_TriangulationDriver
XmlMDataXtd_TriangulationDriver_swigregister = _XmlMDataXtd.XmlMDataXtd_TriangulationDriver_swigregister
XmlMDataXtd_TriangulationDriver_swigregister(XmlMDataXtd_TriangulationDriver)

def XmlMDataXtd_TriangulationDriver_get_type_name(*args):
    """
    XmlMDataXtd_TriangulationDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataXtd.XmlMDataXtd_TriangulationDriver_get_type_name(*args)

def XmlMDataXtd_TriangulationDriver_get_type_descriptor(*args):
    """
    XmlMDataXtd_TriangulationDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataXtd.XmlMDataXtd_TriangulationDriver_get_type_descriptor(*args)

class Handle_XmlMDataXtd_PlaneDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataXtd_PlaneDriver self)

        Nullify the handle


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataXtd_PlaneDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataXtd_PlaneDriver self, XmlMDataXtd_PlaneDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataXtd_PlaneDriver self, Handle_XmlMDataXtd_PlaneDriver theHandle) -> Handle_XmlMDataXtd_PlaneDriver
        assign(Handle_XmlMDataXtd_PlaneDriver self, XmlMDataXtd_PlaneDriver thePtr) -> Handle_XmlMDataXtd_PlaneDriver
        assign(Handle_XmlMDataXtd_PlaneDriver self, Handle_XmlMDataXtd_PlaneDriver theHandle) -> Handle_XmlMDataXtd_PlaneDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataXtd_PlaneDriver self) -> XmlMDataXtd_PlaneDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataXtd_PlaneDriver self) -> XmlMDataXtd_PlaneDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataXtd_PlaneDriver self) -> XmlMDataXtd_PlaneDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataXtd.new_Handle_XmlMDataXtd_PlaneDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver_DownCast)
    __swig_destroy__ = _XmlMDataXtd.delete_Handle_XmlMDataXtd_PlaneDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataXtd_PlaneDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataXtd_PlaneDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataXtd_PlaneDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataXtd_PlaneDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataXtd_PlaneDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataXtd_PlaneDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataXtd_PlaneDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataXtd_PlaneDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataXtd_PlaneDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataXtd_PlaneDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataXtd_PlaneDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataXtd_PlaneDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataXtd_PlaneDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataXtd_PlaneDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataXtd_PlaneDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataXtd_PlaneDriver_swigregister = _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver_swigregister
Handle_XmlMDataXtd_PlaneDriver_swigregister(Handle_XmlMDataXtd_PlaneDriver)

def Handle_XmlMDataXtd_PlaneDriver_DownCast(thing):
    return _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver_DownCast(thing)
Handle_XmlMDataXtd_PlaneDriver_DownCast = _XmlMDataXtd.Handle_XmlMDataXtd_PlaneDriver_DownCast

class XmlMDataXtd_GeometryDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataXtd_GeometryDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataXtd_GeometryDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataXtd_GeometryDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataXtd_GeometryDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataXtd.new_XmlMDataXtd_GeometryDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataXtd_GeometryDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataXtd.XmlMDataXtd_GeometryDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataXtd_GeometryDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataXtd_GeometryDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataXtd.XmlMDataXtd_GeometryDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataXtd.XmlMDataXtd_GeometryDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataXtd.XmlMDataXtd_GeometryDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.XmlMDataXtd_GeometryDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataXtd.delete_XmlMDataXtd_GeometryDriver
XmlMDataXtd_GeometryDriver_swigregister = _XmlMDataXtd.XmlMDataXtd_GeometryDriver_swigregister
XmlMDataXtd_GeometryDriver_swigregister(XmlMDataXtd_GeometryDriver)

def XmlMDataXtd_GeometryDriver_get_type_name(*args):
    """
    XmlMDataXtd_GeometryDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataXtd.XmlMDataXtd_GeometryDriver_get_type_name(*args)

def XmlMDataXtd_GeometryDriver_get_type_descriptor(*args):
    """
    XmlMDataXtd_GeometryDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataXtd.XmlMDataXtd_GeometryDriver_get_type_descriptor(*args)

class Handle_XmlMDataXtd_AxisDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataXtd_AxisDriver self)

        Nullify the handle


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataXtd_AxisDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataXtd_AxisDriver self, XmlMDataXtd_AxisDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataXtd_AxisDriver self, Handle_XmlMDataXtd_AxisDriver theHandle) -> Handle_XmlMDataXtd_AxisDriver
        assign(Handle_XmlMDataXtd_AxisDriver self, XmlMDataXtd_AxisDriver thePtr) -> Handle_XmlMDataXtd_AxisDriver
        assign(Handle_XmlMDataXtd_AxisDriver self, Handle_XmlMDataXtd_AxisDriver theHandle) -> Handle_XmlMDataXtd_AxisDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataXtd_AxisDriver self) -> XmlMDataXtd_AxisDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataXtd_AxisDriver self) -> XmlMDataXtd_AxisDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataXtd_AxisDriver self) -> XmlMDataXtd_AxisDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataXtd.new_Handle_XmlMDataXtd_AxisDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver_DownCast)
    __swig_destroy__ = _XmlMDataXtd.delete_Handle_XmlMDataXtd_AxisDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataXtd_AxisDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataXtd_AxisDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataXtd_AxisDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataXtd_AxisDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataXtd_AxisDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataXtd_AxisDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataXtd_AxisDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataXtd_AxisDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataXtd_AxisDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataXtd_AxisDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataXtd_AxisDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataXtd_AxisDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataXtd_AxisDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataXtd_AxisDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataXtd_AxisDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataXtd_AxisDriver_swigregister = _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver_swigregister
Handle_XmlMDataXtd_AxisDriver_swigregister(Handle_XmlMDataXtd_AxisDriver)

def Handle_XmlMDataXtd_AxisDriver_DownCast(thing):
    return _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver_DownCast(thing)
Handle_XmlMDataXtd_AxisDriver_DownCast = _XmlMDataXtd.Handle_XmlMDataXtd_AxisDriver_DownCast

class Handle_XmlMDataXtd_PatternStdDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataXtd_PatternStdDriver self)

        Nullify the handle


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataXtd_PatternStdDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataXtd_PatternStdDriver self, XmlMDataXtd_PatternStdDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataXtd_PatternStdDriver self, Handle_XmlMDataXtd_PatternStdDriver theHandle) -> Handle_XmlMDataXtd_PatternStdDriver
        assign(Handle_XmlMDataXtd_PatternStdDriver self, XmlMDataXtd_PatternStdDriver thePtr) -> Handle_XmlMDataXtd_PatternStdDriver
        assign(Handle_XmlMDataXtd_PatternStdDriver self, Handle_XmlMDataXtd_PatternStdDriver theHandle) -> Handle_XmlMDataXtd_PatternStdDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataXtd_PatternStdDriver self) -> XmlMDataXtd_PatternStdDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataXtd_PatternStdDriver self) -> XmlMDataXtd_PatternStdDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataXtd_PatternStdDriver self) -> XmlMDataXtd_PatternStdDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataXtd.new_Handle_XmlMDataXtd_PatternStdDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_DownCast)
    __swig_destroy__ = _XmlMDataXtd.delete_Handle_XmlMDataXtd_PatternStdDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataXtd_PatternStdDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataXtd_PatternStdDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataXtd_PatternStdDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataXtd_PatternStdDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataXtd_PatternStdDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataXtd_PatternStdDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataXtd_PatternStdDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataXtd_PatternStdDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataXtd_PatternStdDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataXtd_PatternStdDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataXtd_PatternStdDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataXtd_PatternStdDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataXtd_PatternStdDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataXtd_PatternStdDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataXtd_PatternStdDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataXtd_PatternStdDriver_swigregister = _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_swigregister
Handle_XmlMDataXtd_PatternStdDriver_swigregister(Handle_XmlMDataXtd_PatternStdDriver)

def Handle_XmlMDataXtd_PatternStdDriver_DownCast(thing):
    return _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_DownCast(thing)
Handle_XmlMDataXtd_PatternStdDriver_DownCast = _XmlMDataXtd.Handle_XmlMDataXtd_PatternStdDriver_DownCast

class XmlMDataXtd_ConstraintDriver(XmlMDF.XmlMDF_ADriver):
    """Attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_XmlMDataXtd_ConstraintDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_XmlMDataXtd_ConstraintDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(XmlMDataXtd_ConstraintDriver self, Handle_Message_Messenger theMessageDriver) -> XmlMDataXtd_ConstraintDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _XmlMDataXtd.new_XmlMDataXtd_ConstraintDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(XmlMDataXtd_ConstraintDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataXtd.XmlMDataXtd_ConstraintDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(XmlMDataXtd_ConstraintDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(XmlMDataXtd_ConstraintDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataXtd.XmlMDataXtd_ConstraintDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _XmlMDataXtd.XmlMDataXtd_ConstraintDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataXtd.XmlMDataXtd_ConstraintDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.XmlMDataXtd_ConstraintDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _XmlMDataXtd.delete_XmlMDataXtd_ConstraintDriver
XmlMDataXtd_ConstraintDriver_swigregister = _XmlMDataXtd.XmlMDataXtd_ConstraintDriver_swigregister
XmlMDataXtd_ConstraintDriver_swigregister(XmlMDataXtd_ConstraintDriver)

def XmlMDataXtd_ConstraintDriver_get_type_name(*args):
    """
    XmlMDataXtd_ConstraintDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _XmlMDataXtd.XmlMDataXtd_ConstraintDriver_get_type_name(*args)

def XmlMDataXtd_ConstraintDriver_get_type_descriptor(*args):
    """
    XmlMDataXtd_ConstraintDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _XmlMDataXtd.XmlMDataXtd_ConstraintDriver_get_type_descriptor(*args)

class Handle_XmlMDataXtd_ShapeDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataXtd_ShapeDriver self)

        Nullify the handle


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataXtd_ShapeDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataXtd_ShapeDriver self, XmlMDataXtd_ShapeDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataXtd_ShapeDriver self, Handle_XmlMDataXtd_ShapeDriver theHandle) -> Handle_XmlMDataXtd_ShapeDriver
        assign(Handle_XmlMDataXtd_ShapeDriver self, XmlMDataXtd_ShapeDriver thePtr) -> Handle_XmlMDataXtd_ShapeDriver
        assign(Handle_XmlMDataXtd_ShapeDriver self, Handle_XmlMDataXtd_ShapeDriver theHandle) -> Handle_XmlMDataXtd_ShapeDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataXtd_ShapeDriver self) -> XmlMDataXtd_ShapeDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataXtd_ShapeDriver self) -> XmlMDataXtd_ShapeDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataXtd_ShapeDriver self) -> XmlMDataXtd_ShapeDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataXtd.new_Handle_XmlMDataXtd_ShapeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver_DownCast)
    __swig_destroy__ = _XmlMDataXtd.delete_Handle_XmlMDataXtd_ShapeDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataXtd_ShapeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataXtd_ShapeDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataXtd_ShapeDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataXtd_ShapeDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataXtd_ShapeDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataXtd_ShapeDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataXtd_ShapeDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataXtd_ShapeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataXtd_ShapeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataXtd_ShapeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataXtd_ShapeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataXtd_ShapeDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataXtd_ShapeDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataXtd_ShapeDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataXtd_ShapeDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataXtd_ShapeDriver_swigregister = _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver_swigregister
Handle_XmlMDataXtd_ShapeDriver_swigregister(Handle_XmlMDataXtd_ShapeDriver)

def Handle_XmlMDataXtd_ShapeDriver_DownCast(thing):
    return _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver_DownCast(thing)
Handle_XmlMDataXtd_ShapeDriver_DownCast = _XmlMDataXtd.Handle_XmlMDataXtd_ShapeDriver_DownCast

class Handle_XmlMDataXtd_ConstraintDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataXtd_ConstraintDriver self)

        Nullify the handle


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataXtd_ConstraintDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataXtd_ConstraintDriver self, XmlMDataXtd_ConstraintDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataXtd_ConstraintDriver self, Handle_XmlMDataXtd_ConstraintDriver theHandle) -> Handle_XmlMDataXtd_ConstraintDriver
        assign(Handle_XmlMDataXtd_ConstraintDriver self, XmlMDataXtd_ConstraintDriver thePtr) -> Handle_XmlMDataXtd_ConstraintDriver
        assign(Handle_XmlMDataXtd_ConstraintDriver self, Handle_XmlMDataXtd_ConstraintDriver theHandle) -> Handle_XmlMDataXtd_ConstraintDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataXtd_ConstraintDriver self) -> XmlMDataXtd_ConstraintDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataXtd_ConstraintDriver self) -> XmlMDataXtd_ConstraintDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataXtd_ConstraintDriver self) -> XmlMDataXtd_ConstraintDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataXtd.new_Handle_XmlMDataXtd_ConstraintDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_DownCast)
    __swig_destroy__ = _XmlMDataXtd.delete_Handle_XmlMDataXtd_ConstraintDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataXtd_ConstraintDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataXtd_ConstraintDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataXtd_ConstraintDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataXtd_ConstraintDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataXtd_ConstraintDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataXtd_ConstraintDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataXtd_ConstraintDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataXtd_ConstraintDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataXtd_ConstraintDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataXtd_ConstraintDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataXtd_ConstraintDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataXtd_ConstraintDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataXtd_ConstraintDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataXtd_ConstraintDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataXtd_ConstraintDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataXtd_ConstraintDriver_swigregister = _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_swigregister
Handle_XmlMDataXtd_ConstraintDriver_swigregister(Handle_XmlMDataXtd_ConstraintDriver)

def Handle_XmlMDataXtd_ConstraintDriver_DownCast(thing):
    return _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_DownCast(thing)
Handle_XmlMDataXtd_ConstraintDriver_DownCast = _XmlMDataXtd.Handle_XmlMDataXtd_ConstraintDriver_DownCast

class Handle_XmlMDataXtd_TriangulationDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataXtd_TriangulationDriver self)

        Nullify the handle


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataXtd_TriangulationDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataXtd_TriangulationDriver self, XmlMDataXtd_TriangulationDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataXtd_TriangulationDriver self, Handle_XmlMDataXtd_TriangulationDriver theHandle) -> Handle_XmlMDataXtd_TriangulationDriver
        assign(Handle_XmlMDataXtd_TriangulationDriver self, XmlMDataXtd_TriangulationDriver thePtr) -> Handle_XmlMDataXtd_TriangulationDriver
        assign(Handle_XmlMDataXtd_TriangulationDriver self, Handle_XmlMDataXtd_TriangulationDriver theHandle) -> Handle_XmlMDataXtd_TriangulationDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataXtd_TriangulationDriver self) -> XmlMDataXtd_TriangulationDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataXtd_TriangulationDriver self) -> XmlMDataXtd_TriangulationDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataXtd_TriangulationDriver self) -> XmlMDataXtd_TriangulationDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataXtd.new_Handle_XmlMDataXtd_TriangulationDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_DownCast)
    __swig_destroy__ = _XmlMDataXtd.delete_Handle_XmlMDataXtd_TriangulationDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataXtd_TriangulationDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataXtd_TriangulationDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataXtd_TriangulationDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataXtd_TriangulationDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataXtd_TriangulationDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataXtd_TriangulationDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataXtd_TriangulationDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataXtd_TriangulationDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataXtd_TriangulationDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataXtd_TriangulationDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataXtd_TriangulationDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataXtd_TriangulationDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataXtd_TriangulationDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataXtd_TriangulationDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataXtd_TriangulationDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataXtd_TriangulationDriver_swigregister = _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_swigregister
Handle_XmlMDataXtd_TriangulationDriver_swigregister(Handle_XmlMDataXtd_TriangulationDriver)

def Handle_XmlMDataXtd_TriangulationDriver_DownCast(thing):
    return _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_DownCast(thing)
Handle_XmlMDataXtd_TriangulationDriver_DownCast = _XmlMDataXtd.Handle_XmlMDataXtd_TriangulationDriver_DownCast

class Handle_XmlMDataXtd_GeometryDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataXtd_GeometryDriver self)

        Nullify the handle


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataXtd_GeometryDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataXtd_GeometryDriver self, XmlMDataXtd_GeometryDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataXtd_GeometryDriver self, Handle_XmlMDataXtd_GeometryDriver theHandle) -> Handle_XmlMDataXtd_GeometryDriver
        assign(Handle_XmlMDataXtd_GeometryDriver self, XmlMDataXtd_GeometryDriver thePtr) -> Handle_XmlMDataXtd_GeometryDriver
        assign(Handle_XmlMDataXtd_GeometryDriver self, Handle_XmlMDataXtd_GeometryDriver theHandle) -> Handle_XmlMDataXtd_GeometryDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataXtd_GeometryDriver self) -> XmlMDataXtd_GeometryDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataXtd_GeometryDriver self) -> XmlMDataXtd_GeometryDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataXtd_GeometryDriver self) -> XmlMDataXtd_GeometryDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataXtd.new_Handle_XmlMDataXtd_GeometryDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_DownCast)
    __swig_destroy__ = _XmlMDataXtd.delete_Handle_XmlMDataXtd_GeometryDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataXtd_GeometryDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataXtd_GeometryDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataXtd_GeometryDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataXtd_GeometryDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataXtd_GeometryDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataXtd_GeometryDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataXtd_GeometryDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataXtd_GeometryDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataXtd_GeometryDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataXtd_GeometryDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataXtd_GeometryDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataXtd_GeometryDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataXtd_GeometryDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataXtd_GeometryDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataXtd_GeometryDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataXtd_GeometryDriver_swigregister = _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_swigregister
Handle_XmlMDataXtd_GeometryDriver_swigregister(Handle_XmlMDataXtd_GeometryDriver)

def Handle_XmlMDataXtd_GeometryDriver_DownCast(thing):
    return _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_DownCast(thing)
Handle_XmlMDataXtd_GeometryDriver_DownCast = _XmlMDataXtd.Handle_XmlMDataXtd_GeometryDriver_DownCast

class Handle_XmlMDataXtd_PointDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataXtd_PointDriver self)

        Nullify the handle


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataXtd_PointDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataXtd_PointDriver self, XmlMDataXtd_PointDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataXtd_PointDriver self, Handle_XmlMDataXtd_PointDriver theHandle) -> Handle_XmlMDataXtd_PointDriver
        assign(Handle_XmlMDataXtd_PointDriver self, XmlMDataXtd_PointDriver thePtr) -> Handle_XmlMDataXtd_PointDriver
        assign(Handle_XmlMDataXtd_PointDriver self, Handle_XmlMDataXtd_PointDriver theHandle) -> Handle_XmlMDataXtd_PointDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataXtd_PointDriver self) -> XmlMDataXtd_PointDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataXtd_PointDriver self) -> XmlMDataXtd_PointDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataXtd_PointDriver self) -> XmlMDataXtd_PointDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataXtd.new_Handle_XmlMDataXtd_PointDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataXtd.Handle_XmlMDataXtd_PointDriver_DownCast)
    __swig_destroy__ = _XmlMDataXtd.delete_Handle_XmlMDataXtd_PointDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataXtd_PointDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataXtd_PointDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataXtd_PointDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataXtd_PointDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataXtd_PointDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataXtd_PointDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataXtd_PointDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataXtd_PointDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataXtd_PointDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataXtd_PointDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataXtd_PointDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataXtd_PointDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataXtd_PointDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataXtd_PointDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataXtd_PointDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataXtd_PointDriver_swigregister = _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver_swigregister
Handle_XmlMDataXtd_PointDriver_swigregister(Handle_XmlMDataXtd_PointDriver)

def Handle_XmlMDataXtd_PointDriver_DownCast(thing):
    return _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver_DownCast(thing)
Handle_XmlMDataXtd_PointDriver_DownCast = _XmlMDataXtd.Handle_XmlMDataXtd_PointDriver_DownCast

class Handle_XmlMDataXtd_PositionDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_XmlMDataXtd_PositionDriver self)

        Nullify the handle


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_XmlMDataXtd_PositionDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_XmlMDataXtd_PositionDriver self, XmlMDataXtd_PositionDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_XmlMDataXtd_PositionDriver self, Handle_XmlMDataXtd_PositionDriver theHandle) -> Handle_XmlMDataXtd_PositionDriver
        assign(Handle_XmlMDataXtd_PositionDriver self, XmlMDataXtd_PositionDriver thePtr) -> Handle_XmlMDataXtd_PositionDriver
        assign(Handle_XmlMDataXtd_PositionDriver self, Handle_XmlMDataXtd_PositionDriver theHandle) -> Handle_XmlMDataXtd_PositionDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_XmlMDataXtd_PositionDriver self) -> XmlMDataXtd_PositionDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_XmlMDataXtd_PositionDriver self) -> XmlMDataXtd_PositionDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_XmlMDataXtd_PositionDriver self) -> XmlMDataXtd_PositionDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver___ref__(self, *args)


    def __hash__(self):
        return _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _XmlMDataXtd.new_Handle_XmlMDataXtd_PositionDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_DownCast)
    __swig_destroy__ = _XmlMDataXtd.delete_Handle_XmlMDataXtd_PositionDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_XmlMDataXtd_PositionDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_XmlMDataXtd_PositionDriver self, XmlObjMgt_Persistent Source, Handle_TDF_Attribute Target, NCollection_DataMap_Standard_Integer_Handle_Standard_Transient_TColStd_MapIntegerHasher RelocTable) -> Standard_Boolean
        Paste(Handle_XmlMDataXtd_PositionDriver self, Handle_TDF_Attribute Source, XmlObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.XmlObjMgt.XmlObjMgt_Persistent
        :type RelocTable: OCC.wrapper.XmlObjMgt.XmlObjMgt_SRelocationTable

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_XmlMDataXtd_PositionDriver self) -> char const *

        :rtype: const char *

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def VersionNumber(self, *args):
        """
        VersionNumber(Handle_XmlMDataXtd_PositionDriver self) -> Standard_Integer

        Returns the version number from which the driver
        is available.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_VersionNumber(self, *args)


    def SourceType(self, *args):
        """
        SourceType(Handle_XmlMDataXtd_PositionDriver self) -> Handle_Standard_Type

        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_SourceType(self, *args)


    def TypeName(self, *args):
        """
        Returns the full XML tag name (including NS prefix)

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_XmlMDataXtd_PositionDriver self)

        Memory deallocator for transient classes


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_XmlMDataXtd_PositionDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_XmlMDataXtd_PositionDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_XmlMDataXtd_PositionDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_XmlMDataXtd_PositionDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_XmlMDataXtd_PositionDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_XmlMDataXtd_PositionDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_XmlMDataXtd_PositionDriver self)

        Increments the reference counter of this object


        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_XmlMDataXtd_PositionDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_DecrementRefCounter(self, *args)

Handle_XmlMDataXtd_PositionDriver_swigregister = _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_swigregister
Handle_XmlMDataXtd_PositionDriver_swigregister(Handle_XmlMDataXtd_PositionDriver)

def Handle_XmlMDataXtd_PositionDriver_DownCast(thing):
    return _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_DownCast(thing)
Handle_XmlMDataXtd_PositionDriver_DownCast = _XmlMDataXtd.Handle_XmlMDataXtd_PositionDriver_DownCast



