# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GeomEvaluator')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GeomEvaluator')
    _GeomEvaluator = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GeomEvaluator', [dirname(__file__)])
        except ImportError:
            import _GeomEvaluator
            return _GeomEvaluator
        try:
            _mod = imp.load_module('_GeomEvaluator', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GeomEvaluator = swig_import_helper()
    del swig_import_helper
else:
    import _GeomEvaluator
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomEvaluator.delete_SwigPyIterator

    def value(self):
        return _GeomEvaluator.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _GeomEvaluator.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _GeomEvaluator.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _GeomEvaluator.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _GeomEvaluator.SwigPyIterator_equal(self, x)

    def copy(self):
        return _GeomEvaluator.SwigPyIterator_copy(self)

    def next(self):
        return _GeomEvaluator.SwigPyIterator_next(self)

    def __next__(self):
        return _GeomEvaluator.SwigPyIterator___next__(self)

    def previous(self):
        return _GeomEvaluator.SwigPyIterator_previous(self)

    def advance(self, n):
        return _GeomEvaluator.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _GeomEvaluator.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _GeomEvaluator.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _GeomEvaluator.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _GeomEvaluator.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _GeomEvaluator.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _GeomEvaluator.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _GeomEvaluator.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _GeomEvaluator.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_GeomEvaluator.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _GeomEvaluator.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _GeomEvaluator.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomEvaluator.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _GeomEvaluator.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _GeomEvaluator.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _GeomEvaluator.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _GeomEvaluator.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_GeomEvaluator.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _GeomEvaluator.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _GeomEvaluator.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _GeomEvaluator.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _GeomEvaluator.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _GeomEvaluator.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _GeomEvaluator.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _GeomEvaluator.ptr_to_number(item)
ptr_to_number = _GeomEvaluator.ptr_to_number

def HashCode(*args):
    return _GeomEvaluator.HashCode(*args)
HashCode = _GeomEvaluator.HashCode

def ptr_equal(a, b):
    return _GeomEvaluator.ptr_equal(a, b)
ptr_equal = _GeomEvaluator.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAdaptor
else:
    import GeomAdaptor
del _swig_python_version_info
class GeomEvaluator_Surface(Standard.Standard_Transient):
    """
    Interface for calculation of values and derivatives for different kinds of surfaces.
    Works both with adaptors and surfaces.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GeomEvaluator_Surface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GeomEvaluator_Surface(self) 
            return h


    def D0(self, *args):
        """
        D0(GeomEvaluator_Surface self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue)

        Value of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomEvaluator.GeomEvaluator_Surface_D0(self, *args)


    def D1(self, *args):
        """
        D1(GeomEvaluator_Surface self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue, gp_Vec theD1U, gp_Vec theD1V)

        Value and first derivatives of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1U: OCC.wrapper.gp.gp_Vec
        :type theD1V: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_Surface_D1(self, *args)


    def D2(self, *args):
        """
        D2(GeomEvaluator_Surface self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue, gp_Vec theD1U, gp_Vec theD1V, gp_Vec theD2U, gp_Vec theD2V, gp_Vec theD2UV)

        Value, first and second derivatives of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1U: OCC.wrapper.gp.gp_Vec
        :type theD1V: OCC.wrapper.gp.gp_Vec
        :type theD2U: OCC.wrapper.gp.gp_Vec
        :type theD2V: OCC.wrapper.gp.gp_Vec
        :type theD2UV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_Surface_D2(self, *args)


    def D3(self, *args):
        """
        D3(GeomEvaluator_Surface self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue, gp_Vec theD1U, gp_Vec theD1V, gp_Vec theD2U, gp_Vec theD2V, gp_Vec theD2UV, gp_Vec theD3U, gp_Vec theD3V, gp_Vec theD3UUV, gp_Vec theD3UVV)

        Value, first, second and third derivatives of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1U: OCC.wrapper.gp.gp_Vec
        :type theD1V: OCC.wrapper.gp.gp_Vec
        :type theD2U: OCC.wrapper.gp.gp_Vec
        :type theD2V: OCC.wrapper.gp.gp_Vec
        :type theD2UV: OCC.wrapper.gp.gp_Vec
        :type theD3U: OCC.wrapper.gp.gp_Vec
        :type theD3V: OCC.wrapper.gp.gp_Vec
        :type theD3UUV: OCC.wrapper.gp.gp_Vec
        :type theD3UVV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_Surface_D3(self, *args)


    def DN(self, *args):
        """
        DN(GeomEvaluator_Surface self, Standard_Real const theU, Standard_Real const theV, Standard_Integer const theDerU, Standard_Integer const theDerV) -> gp_Vec

        Calculates N-th derivatives of surface, where N = theDerU + theDerV.

        Raises if N < 1 or theDerU < 0 or theDerV < 0

        :type theU: float
        :type theV: float
        :type theDerU: int
        :type theDerV: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_Surface_DN(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GeomEvaluator.GeomEvaluator_Surface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GeomEvaluator.GeomEvaluator_Surface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomEvaluator.GeomEvaluator_Surface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomEvaluator.delete_GeomEvaluator_Surface
GeomEvaluator_Surface_swigregister = _GeomEvaluator.GeomEvaluator_Surface_swigregister
GeomEvaluator_Surface_swigregister(GeomEvaluator_Surface)

def GeomEvaluator_Surface_get_type_name(*args):
    """
    GeomEvaluator_Surface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GeomEvaluator.GeomEvaluator_Surface_get_type_name(*args)

def GeomEvaluator_Surface_get_type_descriptor(*args):
    """
    GeomEvaluator_Surface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GeomEvaluator.GeomEvaluator_Surface_get_type_descriptor(*args)

class GeomEvaluator_SurfaceOfRevolution(GeomEvaluator_Surface):
    """Allows to calculate values and derivatives for surfaces of revolution"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GeomEvaluator_SurfaceOfRevolution
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GeomEvaluator_SurfaceOfRevolution(self) 
            return h


    def __init__(self, *args):
        """
        __init__(GeomEvaluator_SurfaceOfRevolution self, Handle_Geom_Curve theBase, gp_Dir theRevolDir, gp_Pnt theRevolLoc) -> GeomEvaluator_SurfaceOfRevolution
        __init__(GeomEvaluator_SurfaceOfRevolution self, Handle_Adaptor3d_HCurve theBase, gp_Dir theRevolDir, gp_Pnt theRevolLoc) -> GeomEvaluator_SurfaceOfRevolution

        Initialize evaluator by adaptor of the revolved curve, the axis of revolution and the location

        :type theBase: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve
        :type theRevolDir: OCC.wrapper.gp.gp_Dir
        :type theRevolLoc: OCC.wrapper.gp.gp_Pnt

        """
        this = _GeomEvaluator.new_GeomEvaluator_SurfaceOfRevolution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetDirection(self, *args):
        """
        SetDirection(GeomEvaluator_SurfaceOfRevolution self, gp_Dir theDirection)

        Change direction of the axis of revolution

        :type theDirection: OCC.wrapper.gp.gp_Dir

        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_SetDirection(self, *args)


    def SetLocation(self, *args):
        """
        SetLocation(GeomEvaluator_SurfaceOfRevolution self, gp_Pnt theLocation)

        Change location of the axis of revolution

        :type theLocation: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_SetLocation(self, *args)


    def SetAxis(self, *args):
        """
        SetAxis(GeomEvaluator_SurfaceOfRevolution self, gp_Ax1 theAxis)

        Change the axis of revolution

        :type theAxis: OCC.wrapper.gp.gp_Ax1

        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_SetAxis(self, *args)


    def D0(self, *args):
        """
        D0(GeomEvaluator_SurfaceOfRevolution self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue)

        Value of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_D0(self, *args)


    def D1(self, *args):
        """
        D1(GeomEvaluator_SurfaceOfRevolution self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue, gp_Vec theD1U, gp_Vec theD1V)

        Value and first derivatives of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1U: OCC.wrapper.gp.gp_Vec
        :type theD1V: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_D1(self, *args)


    def D2(self, *args):
        """
        D2(GeomEvaluator_SurfaceOfRevolution self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue, gp_Vec theD1U, gp_Vec theD1V, gp_Vec theD2U, gp_Vec theD2V, gp_Vec theD2UV)

        Value, first and second derivatives of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1U: OCC.wrapper.gp.gp_Vec
        :type theD1V: OCC.wrapper.gp.gp_Vec
        :type theD2U: OCC.wrapper.gp.gp_Vec
        :type theD2V: OCC.wrapper.gp.gp_Vec
        :type theD2UV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_D2(self, *args)


    def D3(self, *args):
        """
        D3(GeomEvaluator_SurfaceOfRevolution self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue, gp_Vec theD1U, gp_Vec theD1V, gp_Vec theD2U, gp_Vec theD2V, gp_Vec theD2UV, gp_Vec theD3U, gp_Vec theD3V, gp_Vec theD3UUV, gp_Vec theD3UVV)

        Value, first, second and third derivatives of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1U: OCC.wrapper.gp.gp_Vec
        :type theD1V: OCC.wrapper.gp.gp_Vec
        :type theD2U: OCC.wrapper.gp.gp_Vec
        :type theD2V: OCC.wrapper.gp.gp_Vec
        :type theD2UV: OCC.wrapper.gp.gp_Vec
        :type theD3U: OCC.wrapper.gp.gp_Vec
        :type theD3V: OCC.wrapper.gp.gp_Vec
        :type theD3UUV: OCC.wrapper.gp.gp_Vec
        :type theD3UVV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_D3(self, *args)


    def DN(self, *args):
        """
        DN(GeomEvaluator_SurfaceOfRevolution self, Standard_Real const theU, Standard_Real const theV, Standard_Integer const theDerU, Standard_Integer const theDerV) -> gp_Vec

        Calculates N-th derivatives of surface, where N = theDerU + theDerV.

        Raises if N < 1 or theDerU < 0 or theDerV < 0

        :type theU: float
        :type theV: float
        :type theDerU: int
        :type theDerV: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_DN(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomEvaluator.delete_GeomEvaluator_SurfaceOfRevolution
GeomEvaluator_SurfaceOfRevolution_swigregister = _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_swigregister
GeomEvaluator_SurfaceOfRevolution_swigregister(GeomEvaluator_SurfaceOfRevolution)

def GeomEvaluator_SurfaceOfRevolution_get_type_name(*args):
    """
    GeomEvaluator_SurfaceOfRevolution_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_get_type_name(*args)

def GeomEvaluator_SurfaceOfRevolution_get_type_descriptor(*args):
    """
    GeomEvaluator_SurfaceOfRevolution_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GeomEvaluator.GeomEvaluator_SurfaceOfRevolution_get_type_descriptor(*args)

class GeomEvaluator_OffsetSurface(GeomEvaluator_Surface):
    """Allows to calculate values and derivatives for offset surfaces"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GeomEvaluator_OffsetSurface
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GeomEvaluator_OffsetSurface(self) 
            return h


    def __init__(self, *args):
        """
        __init__(GeomEvaluator_OffsetSurface self, Handle_Geom_Surface theBase, Standard_Real const theOffset, Handle_Geom_OsculatingSurface theOscSurf) -> GeomEvaluator_OffsetSurface
        __init__(GeomEvaluator_OffsetSurface self, Handle_GeomAdaptor_HSurface theBase, Standard_Real const theOffset, Handle_Geom_OsculatingSurface theOscSurf) -> GeomEvaluator_OffsetSurface

        Initialize evaluator by surface adaptor

        :type theBase: OCC.wrapper.GeomAdaptor.Handle_GeomAdaptor_HSurface
        :type theOffset: float
        :type theOscSurf: OCC.wrapper.Geom.Handle_Geom_OsculatingSurface

        """
        this = _GeomEvaluator.new_GeomEvaluator_OffsetSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetOffsetValue(self, *args):
        """
        SetOffsetValue(GeomEvaluator_OffsetSurface self, Standard_Real theOffset)

        Change the offset value

        :type theOffset: float

        """
        return _GeomEvaluator.GeomEvaluator_OffsetSurface_SetOffsetValue(self, *args)


    def D0(self, *args):
        """
        D0(GeomEvaluator_OffsetSurface self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue)

        Value of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomEvaluator.GeomEvaluator_OffsetSurface_D0(self, *args)


    def D1(self, *args):
        """
        D1(GeomEvaluator_OffsetSurface self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue, gp_Vec theD1U, gp_Vec theD1V)

        Value and first derivatives of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1U: OCC.wrapper.gp.gp_Vec
        :type theD1V: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_OffsetSurface_D1(self, *args)


    def D2(self, *args):
        """
        D2(GeomEvaluator_OffsetSurface self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue, gp_Vec theD1U, gp_Vec theD1V, gp_Vec theD2U, gp_Vec theD2V, gp_Vec theD2UV)

        Value, first and second derivatives of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1U: OCC.wrapper.gp.gp_Vec
        :type theD1V: OCC.wrapper.gp.gp_Vec
        :type theD2U: OCC.wrapper.gp.gp_Vec
        :type theD2V: OCC.wrapper.gp.gp_Vec
        :type theD2UV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_OffsetSurface_D2(self, *args)


    def D3(self, *args):
        """
        D3(GeomEvaluator_OffsetSurface self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue, gp_Vec theD1U, gp_Vec theD1V, gp_Vec theD2U, gp_Vec theD2V, gp_Vec theD2UV, gp_Vec theD3U, gp_Vec theD3V, gp_Vec theD3UUV, gp_Vec theD3UVV)

        Value, first, second and third derivatives of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1U: OCC.wrapper.gp.gp_Vec
        :type theD1V: OCC.wrapper.gp.gp_Vec
        :type theD2U: OCC.wrapper.gp.gp_Vec
        :type theD2V: OCC.wrapper.gp.gp_Vec
        :type theD2UV: OCC.wrapper.gp.gp_Vec
        :type theD3U: OCC.wrapper.gp.gp_Vec
        :type theD3V: OCC.wrapper.gp.gp_Vec
        :type theD3UUV: OCC.wrapper.gp.gp_Vec
        :type theD3UVV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_OffsetSurface_D3(self, *args)


    def DN(self, *args):
        """
        DN(GeomEvaluator_OffsetSurface self, Standard_Real const theU, Standard_Real const theV, Standard_Integer const theDerU, Standard_Integer const theDerV) -> gp_Vec

        Calculates N-th derivatives of surface, where N = theDerU + theDerV.

        Raises if N < 1 or theDerU < 0 or theDerV < 0

        :type theU: float
        :type theV: float
        :type theDerU: int
        :type theDerV: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_OffsetSurface_DN(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GeomEvaluator.GeomEvaluator_OffsetSurface_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GeomEvaluator.GeomEvaluator_OffsetSurface_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomEvaluator.GeomEvaluator_OffsetSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomEvaluator.delete_GeomEvaluator_OffsetSurface
GeomEvaluator_OffsetSurface_swigregister = _GeomEvaluator.GeomEvaluator_OffsetSurface_swigregister
GeomEvaluator_OffsetSurface_swigregister(GeomEvaluator_OffsetSurface)

def GeomEvaluator_OffsetSurface_get_type_name(*args):
    """
    GeomEvaluator_OffsetSurface_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GeomEvaluator.GeomEvaluator_OffsetSurface_get_type_name(*args)

def GeomEvaluator_OffsetSurface_get_type_descriptor(*args):
    """
    GeomEvaluator_OffsetSurface_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GeomEvaluator.GeomEvaluator_OffsetSurface_get_type_descriptor(*args)

class GeomEvaluator_Curve(Standard.Standard_Transient):
    """
    Interface for calculation of values and derivatives for different kinds of curves in 3D.
    Works both with adaptors and curves.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GeomEvaluator_Curve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GeomEvaluator_Curve(self) 
            return h


    def D0(self, *args):
        """
        D0(GeomEvaluator_Curve self, Standard_Real const theU, gp_Pnt theValue)

        Value of 3D curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomEvaluator.GeomEvaluator_Curve_D0(self, *args)


    def D1(self, *args):
        """
        D1(GeomEvaluator_Curve self, Standard_Real const theU, gp_Pnt theValue, gp_Vec theD1)

        Value and first derivatives of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_Curve_D1(self, *args)


    def D2(self, *args):
        """
        D2(GeomEvaluator_Curve self, Standard_Real const theU, gp_Pnt theValue, gp_Vec theD1, gp_Vec theD2)

        Value, first and second derivatives of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1: OCC.wrapper.gp.gp_Vec
        :type theD2: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_Curve_D2(self, *args)


    def D3(self, *args):
        """
        D3(GeomEvaluator_Curve self, Standard_Real const theU, gp_Pnt theValue, gp_Vec theD1, gp_Vec theD2, gp_Vec theD3)

        Value, first, second and third derivatives of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1: OCC.wrapper.gp.gp_Vec
        :type theD2: OCC.wrapper.gp.gp_Vec
        :type theD3: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_Curve_D3(self, *args)


    def DN(self, *args):
        """
        DN(GeomEvaluator_Curve self, Standard_Real const theU, Standard_Integer const theDerU) -> gp_Vec

        Calculates N-th derivatives of curve, where N = theDerU. Raises if N < 1

        :type theU: float
        :type theDerU: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_Curve_DN(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GeomEvaluator.GeomEvaluator_Curve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GeomEvaluator.GeomEvaluator_Curve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomEvaluator.GeomEvaluator_Curve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomEvaluator.delete_GeomEvaluator_Curve
GeomEvaluator_Curve_swigregister = _GeomEvaluator.GeomEvaluator_Curve_swigregister
GeomEvaluator_Curve_swigregister(GeomEvaluator_Curve)

def GeomEvaluator_Curve_get_type_name(*args):
    """
    GeomEvaluator_Curve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GeomEvaluator.GeomEvaluator_Curve_get_type_name(*args)

def GeomEvaluator_Curve_get_type_descriptor(*args):
    """
    GeomEvaluator_Curve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GeomEvaluator.GeomEvaluator_Curve_get_type_descriptor(*args)

class GeomEvaluator_OffsetCurve(GeomEvaluator_Curve):
    """Allows to calculate values and derivatives for offset curves in 3D"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GeomEvaluator_OffsetCurve
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GeomEvaluator_OffsetCurve(self) 
            return h


    def __init__(self, *args):
        """
        __init__(GeomEvaluator_OffsetCurve self, Handle_Geom_Curve theBase, Standard_Real const theOffset, gp_Dir theDirection) -> GeomEvaluator_OffsetCurve
        __init__(GeomEvaluator_OffsetCurve self, Handle_GeomAdaptor_HCurve theBase, Standard_Real const theOffset, gp_Dir theDirection) -> GeomEvaluator_OffsetCurve

        Initialize evaluator by curve adaptor

        :type theBase: OCC.wrapper.GeomAdaptor.Handle_GeomAdaptor_HCurve
        :type theOffset: float
        :type theDirection: OCC.wrapper.gp.gp_Dir

        """
        this = _GeomEvaluator.new_GeomEvaluator_OffsetCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetOffsetValue(self, *args):
        """
        SetOffsetValue(GeomEvaluator_OffsetCurve self, Standard_Real theOffset)

        Change the offset value

        :type theOffset: float

        """
        return _GeomEvaluator.GeomEvaluator_OffsetCurve_SetOffsetValue(self, *args)


    def SetOffsetDirection(self, *args):
        """
        SetOffsetDirection(GeomEvaluator_OffsetCurve self, gp_Dir theDirection)

        :type theDirection: OCC.wrapper.gp.gp_Dir

        """
        return _GeomEvaluator.GeomEvaluator_OffsetCurve_SetOffsetDirection(self, *args)


    def D0(self, *args):
        """
        D0(GeomEvaluator_OffsetCurve self, Standard_Real const theU, gp_Pnt theValue)

        Value of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomEvaluator.GeomEvaluator_OffsetCurve_D0(self, *args)


    def D1(self, *args):
        """
        D1(GeomEvaluator_OffsetCurve self, Standard_Real const theU, gp_Pnt theValue, gp_Vec theD1)

        Value and first derivatives of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_OffsetCurve_D1(self, *args)


    def D2(self, *args):
        """
        D2(GeomEvaluator_OffsetCurve self, Standard_Real const theU, gp_Pnt theValue, gp_Vec theD1, gp_Vec theD2)

        Value, first and second derivatives of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1: OCC.wrapper.gp.gp_Vec
        :type theD2: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_OffsetCurve_D2(self, *args)


    def D3(self, *args):
        """
        D3(GeomEvaluator_OffsetCurve self, Standard_Real const theU, gp_Pnt theValue, gp_Vec theD1, gp_Vec theD2, gp_Vec theD3)

        Value, first, second and third derivatives of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1: OCC.wrapper.gp.gp_Vec
        :type theD2: OCC.wrapper.gp.gp_Vec
        :type theD3: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_OffsetCurve_D3(self, *args)


    def DN(self, *args):
        """
        DN(GeomEvaluator_OffsetCurve self, Standard_Real const theU, Standard_Integer const theDeriv) -> gp_Vec

        Calculates N-th derivatives of curve, where N = theDeriv. Raises if N < 1

        :type theU: float
        :type theDeriv: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_OffsetCurve_DN(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GeomEvaluator.GeomEvaluator_OffsetCurve_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GeomEvaluator.GeomEvaluator_OffsetCurve_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomEvaluator.GeomEvaluator_OffsetCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomEvaluator.delete_GeomEvaluator_OffsetCurve
GeomEvaluator_OffsetCurve_swigregister = _GeomEvaluator.GeomEvaluator_OffsetCurve_swigregister
GeomEvaluator_OffsetCurve_swigregister(GeomEvaluator_OffsetCurve)

def GeomEvaluator_OffsetCurve_get_type_name(*args):
    """
    GeomEvaluator_OffsetCurve_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GeomEvaluator.GeomEvaluator_OffsetCurve_get_type_name(*args)

def GeomEvaluator_OffsetCurve_get_type_descriptor(*args):
    """
    GeomEvaluator_OffsetCurve_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GeomEvaluator.GeomEvaluator_OffsetCurve_get_type_descriptor(*args)

class Handle_GeomEvaluator_Surface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GeomEvaluator_Surface self)

        Nullify the handle


        """
        return _GeomEvaluator.Handle_GeomEvaluator_Surface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GeomEvaluator_Surface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Surface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GeomEvaluator_Surface self, GeomEvaluator_Surface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Surface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GeomEvaluator_Surface self, Handle_GeomEvaluator_Surface theHandle) -> Handle_GeomEvaluator_Surface
        assign(Handle_GeomEvaluator_Surface self, GeomEvaluator_Surface thePtr) -> Handle_GeomEvaluator_Surface
        assign(Handle_GeomEvaluator_Surface self, Handle_GeomEvaluator_Surface theHandle) -> Handle_GeomEvaluator_Surface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Surface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GeomEvaluator_Surface self) -> GeomEvaluator_Surface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Surface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GeomEvaluator_Surface self) -> GeomEvaluator_Surface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Surface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GeomEvaluator_Surface self) -> GeomEvaluator_Surface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Surface___ref__(self, *args)


    def __hash__(self):
        return _GeomEvaluator.Handle_GeomEvaluator_Surface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GeomEvaluator.Handle_GeomEvaluator_Surface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GeomEvaluator.new_Handle_GeomEvaluator_Surface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GeomEvaluator.Handle_GeomEvaluator_Surface_DownCast)
    __swig_destroy__ = _GeomEvaluator.delete_Handle_GeomEvaluator_Surface

    def D0(self, *args):
        """
        D0(Handle_GeomEvaluator_Surface self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue)

        Value of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Surface_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_GeomEvaluator_Surface self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue, gp_Vec theD1U, gp_Vec theD1V)

        Value and first derivatives of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1U: OCC.wrapper.gp.gp_Vec
        :type theD1V: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Surface_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_GeomEvaluator_Surface self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue, gp_Vec theD1U, gp_Vec theD1V, gp_Vec theD2U, gp_Vec theD2V, gp_Vec theD2UV)

        Value, first and second derivatives of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1U: OCC.wrapper.gp.gp_Vec
        :type theD1V: OCC.wrapper.gp.gp_Vec
        :type theD2U: OCC.wrapper.gp.gp_Vec
        :type theD2V: OCC.wrapper.gp.gp_Vec
        :type theD2UV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Surface_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_GeomEvaluator_Surface self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue, gp_Vec theD1U, gp_Vec theD1V, gp_Vec theD2U, gp_Vec theD2V, gp_Vec theD2UV, gp_Vec theD3U, gp_Vec theD3V, gp_Vec theD3UUV, gp_Vec theD3UVV)

        Value, first, second and third derivatives of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1U: OCC.wrapper.gp.gp_Vec
        :type theD1V: OCC.wrapper.gp.gp_Vec
        :type theD2U: OCC.wrapper.gp.gp_Vec
        :type theD2V: OCC.wrapper.gp.gp_Vec
        :type theD2UV: OCC.wrapper.gp.gp_Vec
        :type theD3U: OCC.wrapper.gp.gp_Vec
        :type theD3V: OCC.wrapper.gp.gp_Vec
        :type theD3UUV: OCC.wrapper.gp.gp_Vec
        :type theD3UVV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Surface_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_GeomEvaluator_Surface self, Standard_Real const theU, Standard_Real const theV, Standard_Integer const theDerU, Standard_Integer const theDerV) -> gp_Vec

        Calculates N-th derivatives of surface, where N = theDerU + theDerV.

        Raises if N < 1 or theDerU < 0 or theDerV < 0

        :type theU: float
        :type theV: float
        :type theDerU: int
        :type theDerV: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Surface_DN(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GeomEvaluator_Surface self) -> char const *

        :rtype: const char *

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Surface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomEvaluator.Handle_GeomEvaluator_Surface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomEvaluator.Handle_GeomEvaluator_Surface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_GeomEvaluator_Surface self)

        Memory deallocator for transient classes


        """
        return _GeomEvaluator.Handle_GeomEvaluator_Surface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GeomEvaluator_Surface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GeomEvaluator_Surface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Surface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GeomEvaluator_Surface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GeomEvaluator_Surface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Surface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GeomEvaluator_Surface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Surface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GeomEvaluator_Surface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Surface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GeomEvaluator_Surface self)

        Increments the reference counter of this object


        """
        return _GeomEvaluator.Handle_GeomEvaluator_Surface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GeomEvaluator_Surface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Surface_DecrementRefCounter(self, *args)

Handle_GeomEvaluator_Surface_swigregister = _GeomEvaluator.Handle_GeomEvaluator_Surface_swigregister
Handle_GeomEvaluator_Surface_swigregister(Handle_GeomEvaluator_Surface)

def Handle_GeomEvaluator_Surface_DownCast(thing):
    return _GeomEvaluator.Handle_GeomEvaluator_Surface_DownCast(thing)
Handle_GeomEvaluator_Surface_DownCast = _GeomEvaluator.Handle_GeomEvaluator_Surface_DownCast

class Handle_GeomEvaluator_Curve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GeomEvaluator_Curve self)

        Nullify the handle


        """
        return _GeomEvaluator.Handle_GeomEvaluator_Curve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GeomEvaluator_Curve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Curve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GeomEvaluator_Curve self, GeomEvaluator_Curve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Curve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GeomEvaluator_Curve self, Handle_GeomEvaluator_Curve theHandle) -> Handle_GeomEvaluator_Curve
        assign(Handle_GeomEvaluator_Curve self, GeomEvaluator_Curve thePtr) -> Handle_GeomEvaluator_Curve
        assign(Handle_GeomEvaluator_Curve self, Handle_GeomEvaluator_Curve theHandle) -> Handle_GeomEvaluator_Curve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Curve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GeomEvaluator_Curve self) -> GeomEvaluator_Curve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Curve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GeomEvaluator_Curve self) -> GeomEvaluator_Curve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Curve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GeomEvaluator_Curve self) -> GeomEvaluator_Curve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Curve___ref__(self, *args)


    def __hash__(self):
        return _GeomEvaluator.Handle_GeomEvaluator_Curve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GeomEvaluator.Handle_GeomEvaluator_Curve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GeomEvaluator.new_Handle_GeomEvaluator_Curve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GeomEvaluator.Handle_GeomEvaluator_Curve_DownCast)
    __swig_destroy__ = _GeomEvaluator.delete_Handle_GeomEvaluator_Curve

    def D0(self, *args):
        """
        D0(Handle_GeomEvaluator_Curve self, Standard_Real const theU, gp_Pnt theValue)

        Value of 3D curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Curve_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_GeomEvaluator_Curve self, Standard_Real const theU, gp_Pnt theValue, gp_Vec theD1)

        Value and first derivatives of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Curve_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_GeomEvaluator_Curve self, Standard_Real const theU, gp_Pnt theValue, gp_Vec theD1, gp_Vec theD2)

        Value, first and second derivatives of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1: OCC.wrapper.gp.gp_Vec
        :type theD2: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Curve_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_GeomEvaluator_Curve self, Standard_Real const theU, gp_Pnt theValue, gp_Vec theD1, gp_Vec theD2, gp_Vec theD3)

        Value, first, second and third derivatives of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1: OCC.wrapper.gp.gp_Vec
        :type theD2: OCC.wrapper.gp.gp_Vec
        :type theD3: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Curve_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_GeomEvaluator_Curve self, Standard_Real const theU, Standard_Integer const theDerU) -> gp_Vec

        Calculates N-th derivatives of curve, where N = theDerU. Raises if N < 1

        :type theU: float
        :type theDerU: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Curve_DN(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GeomEvaluator_Curve self) -> char const *

        :rtype: const char *

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Curve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomEvaluator.Handle_GeomEvaluator_Curve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomEvaluator.Handle_GeomEvaluator_Curve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_GeomEvaluator_Curve self)

        Memory deallocator for transient classes


        """
        return _GeomEvaluator.Handle_GeomEvaluator_Curve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GeomEvaluator_Curve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GeomEvaluator_Curve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Curve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GeomEvaluator_Curve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GeomEvaluator_Curve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Curve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GeomEvaluator_Curve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Curve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GeomEvaluator_Curve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Curve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GeomEvaluator_Curve self)

        Increments the reference counter of this object


        """
        return _GeomEvaluator.Handle_GeomEvaluator_Curve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GeomEvaluator_Curve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomEvaluator.Handle_GeomEvaluator_Curve_DecrementRefCounter(self, *args)

Handle_GeomEvaluator_Curve_swigregister = _GeomEvaluator.Handle_GeomEvaluator_Curve_swigregister
Handle_GeomEvaluator_Curve_swigregister(Handle_GeomEvaluator_Curve)

def Handle_GeomEvaluator_Curve_DownCast(thing):
    return _GeomEvaluator.Handle_GeomEvaluator_Curve_DownCast(thing)
Handle_GeomEvaluator_Curve_DownCast = _GeomEvaluator.Handle_GeomEvaluator_Curve_DownCast

class Handle_GeomEvaluator_SurfaceOfRevolution(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GeomEvaluator_SurfaceOfRevolution self)

        Nullify the handle


        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GeomEvaluator_SurfaceOfRevolution self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GeomEvaluator_SurfaceOfRevolution self, GeomEvaluator_SurfaceOfRevolution thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GeomEvaluator_SurfaceOfRevolution self, Handle_GeomEvaluator_SurfaceOfRevolution theHandle) -> Handle_GeomEvaluator_SurfaceOfRevolution
        assign(Handle_GeomEvaluator_SurfaceOfRevolution self, GeomEvaluator_SurfaceOfRevolution thePtr) -> Handle_GeomEvaluator_SurfaceOfRevolution
        assign(Handle_GeomEvaluator_SurfaceOfRevolution self, Handle_GeomEvaluator_SurfaceOfRevolution theHandle) -> Handle_GeomEvaluator_SurfaceOfRevolution

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GeomEvaluator_SurfaceOfRevolution self) -> GeomEvaluator_SurfaceOfRevolution

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GeomEvaluator_SurfaceOfRevolution self) -> GeomEvaluator_SurfaceOfRevolution

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GeomEvaluator_SurfaceOfRevolution self) -> GeomEvaluator_SurfaceOfRevolution

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution___ref__(self, *args)


    def __hash__(self):
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GeomEvaluator.new_Handle_GeomEvaluator_SurfaceOfRevolution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_DownCast)
    __swig_destroy__ = _GeomEvaluator.delete_Handle_GeomEvaluator_SurfaceOfRevolution

    def SetDirection(self, *args):
        """
        SetDirection(Handle_GeomEvaluator_SurfaceOfRevolution self, gp_Dir theDirection)

        Change direction of the axis of revolution

        :type theDirection: OCC.wrapper.gp.gp_Dir

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_SetDirection(self, *args)


    def SetLocation(self, *args):
        """
        SetLocation(Handle_GeomEvaluator_SurfaceOfRevolution self, gp_Pnt theLocation)

        Change location of the axis of revolution

        :type theLocation: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_SetLocation(self, *args)


    def SetAxis(self, *args):
        """
        SetAxis(Handle_GeomEvaluator_SurfaceOfRevolution self, gp_Ax1 theAxis)

        Change the axis of revolution

        :type theAxis: OCC.wrapper.gp.gp_Ax1

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_SetAxis(self, *args)


    def D0(self, *args):
        """
        D0(Handle_GeomEvaluator_SurfaceOfRevolution self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue)

        Value of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_GeomEvaluator_SurfaceOfRevolution self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue, gp_Vec theD1U, gp_Vec theD1V)

        Value and first derivatives of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1U: OCC.wrapper.gp.gp_Vec
        :type theD1V: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_GeomEvaluator_SurfaceOfRevolution self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue, gp_Vec theD1U, gp_Vec theD1V, gp_Vec theD2U, gp_Vec theD2V, gp_Vec theD2UV)

        Value, first and second derivatives of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1U: OCC.wrapper.gp.gp_Vec
        :type theD1V: OCC.wrapper.gp.gp_Vec
        :type theD2U: OCC.wrapper.gp.gp_Vec
        :type theD2V: OCC.wrapper.gp.gp_Vec
        :type theD2UV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_GeomEvaluator_SurfaceOfRevolution self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue, gp_Vec theD1U, gp_Vec theD1V, gp_Vec theD2U, gp_Vec theD2V, gp_Vec theD2UV, gp_Vec theD3U, gp_Vec theD3V, gp_Vec theD3UUV, gp_Vec theD3UVV)

        Value, first, second and third derivatives of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1U: OCC.wrapper.gp.gp_Vec
        :type theD1V: OCC.wrapper.gp.gp_Vec
        :type theD2U: OCC.wrapper.gp.gp_Vec
        :type theD2V: OCC.wrapper.gp.gp_Vec
        :type theD2UV: OCC.wrapper.gp.gp_Vec
        :type theD3U: OCC.wrapper.gp.gp_Vec
        :type theD3V: OCC.wrapper.gp.gp_Vec
        :type theD3UUV: OCC.wrapper.gp.gp_Vec
        :type theD3UVV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_GeomEvaluator_SurfaceOfRevolution self, Standard_Real const theU, Standard_Real const theV, Standard_Integer const theDerU, Standard_Integer const theDerV) -> gp_Vec

        Calculates N-th derivatives of surface, where N = theDerU + theDerV.

        Raises if N < 1 or theDerU < 0 or theDerV < 0

        :type theU: float
        :type theV: float
        :type theDerU: int
        :type theDerV: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_DN(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GeomEvaluator_SurfaceOfRevolution self) -> char const *

        :rtype: const char *

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_GeomEvaluator_SurfaceOfRevolution self)

        Memory deallocator for transient classes


        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GeomEvaluator_SurfaceOfRevolution self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GeomEvaluator_SurfaceOfRevolution self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GeomEvaluator_SurfaceOfRevolution self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GeomEvaluator_SurfaceOfRevolution self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GeomEvaluator_SurfaceOfRevolution self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GeomEvaluator_SurfaceOfRevolution self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GeomEvaluator_SurfaceOfRevolution self)

        Increments the reference counter of this object


        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GeomEvaluator_SurfaceOfRevolution self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_DecrementRefCounter(self, *args)

Handle_GeomEvaluator_SurfaceOfRevolution_swigregister = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_swigregister
Handle_GeomEvaluator_SurfaceOfRevolution_swigregister(Handle_GeomEvaluator_SurfaceOfRevolution)

def Handle_GeomEvaluator_SurfaceOfRevolution_DownCast(thing):
    return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_DownCast(thing)
Handle_GeomEvaluator_SurfaceOfRevolution_DownCast = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfRevolution_DownCast

class Handle_GeomEvaluator_OffsetSurface(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GeomEvaluator_OffsetSurface self)

        Nullify the handle


        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GeomEvaluator_OffsetSurface self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GeomEvaluator_OffsetSurface self, GeomEvaluator_OffsetSurface thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GeomEvaluator_OffsetSurface self, Handle_GeomEvaluator_OffsetSurface theHandle) -> Handle_GeomEvaluator_OffsetSurface
        assign(Handle_GeomEvaluator_OffsetSurface self, GeomEvaluator_OffsetSurface thePtr) -> Handle_GeomEvaluator_OffsetSurface
        assign(Handle_GeomEvaluator_OffsetSurface self, Handle_GeomEvaluator_OffsetSurface theHandle) -> Handle_GeomEvaluator_OffsetSurface

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GeomEvaluator_OffsetSurface self) -> GeomEvaluator_OffsetSurface

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GeomEvaluator_OffsetSurface self) -> GeomEvaluator_OffsetSurface

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GeomEvaluator_OffsetSurface self) -> GeomEvaluator_OffsetSurface

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface___ref__(self, *args)


    def __hash__(self):
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GeomEvaluator.new_Handle_GeomEvaluator_OffsetSurface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_DownCast)
    __swig_destroy__ = _GeomEvaluator.delete_Handle_GeomEvaluator_OffsetSurface

    def SetOffsetValue(self, *args):
        """
        SetOffsetValue(Handle_GeomEvaluator_OffsetSurface self, Standard_Real theOffset)

        Change the offset value

        :type theOffset: float

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_SetOffsetValue(self, *args)


    def D0(self, *args):
        """
        D0(Handle_GeomEvaluator_OffsetSurface self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue)

        Value of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_GeomEvaluator_OffsetSurface self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue, gp_Vec theD1U, gp_Vec theD1V)

        Value and first derivatives of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1U: OCC.wrapper.gp.gp_Vec
        :type theD1V: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_GeomEvaluator_OffsetSurface self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue, gp_Vec theD1U, gp_Vec theD1V, gp_Vec theD2U, gp_Vec theD2V, gp_Vec theD2UV)

        Value, first and second derivatives of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1U: OCC.wrapper.gp.gp_Vec
        :type theD1V: OCC.wrapper.gp.gp_Vec
        :type theD2U: OCC.wrapper.gp.gp_Vec
        :type theD2V: OCC.wrapper.gp.gp_Vec
        :type theD2UV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_GeomEvaluator_OffsetSurface self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue, gp_Vec theD1U, gp_Vec theD1V, gp_Vec theD2U, gp_Vec theD2V, gp_Vec theD2UV, gp_Vec theD3U, gp_Vec theD3V, gp_Vec theD3UUV, gp_Vec theD3UVV)

        Value, first, second and third derivatives of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1U: OCC.wrapper.gp.gp_Vec
        :type theD1V: OCC.wrapper.gp.gp_Vec
        :type theD2U: OCC.wrapper.gp.gp_Vec
        :type theD2V: OCC.wrapper.gp.gp_Vec
        :type theD2UV: OCC.wrapper.gp.gp_Vec
        :type theD3U: OCC.wrapper.gp.gp_Vec
        :type theD3V: OCC.wrapper.gp.gp_Vec
        :type theD3UUV: OCC.wrapper.gp.gp_Vec
        :type theD3UVV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_GeomEvaluator_OffsetSurface self, Standard_Real const theU, Standard_Real const theV, Standard_Integer const theDerU, Standard_Integer const theDerV) -> gp_Vec

        Calculates N-th derivatives of surface, where N = theDerU + theDerV.

        Raises if N < 1 or theDerU < 0 or theDerV < 0

        :type theU: float
        :type theV: float
        :type theDerU: int
        :type theDerV: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_DN(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GeomEvaluator_OffsetSurface self) -> char const *

        :rtype: const char *

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_GeomEvaluator_OffsetSurface self)

        Memory deallocator for transient classes


        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GeomEvaluator_OffsetSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GeomEvaluator_OffsetSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GeomEvaluator_OffsetSurface self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GeomEvaluator_OffsetSurface self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GeomEvaluator_OffsetSurface self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GeomEvaluator_OffsetSurface self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GeomEvaluator_OffsetSurface self)

        Increments the reference counter of this object


        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GeomEvaluator_OffsetSurface self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_DecrementRefCounter(self, *args)

Handle_GeomEvaluator_OffsetSurface_swigregister = _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_swigregister
Handle_GeomEvaluator_OffsetSurface_swigregister(Handle_GeomEvaluator_OffsetSurface)

def Handle_GeomEvaluator_OffsetSurface_DownCast(thing):
    return _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_DownCast(thing)
Handle_GeomEvaluator_OffsetSurface_DownCast = _GeomEvaluator.Handle_GeomEvaluator_OffsetSurface_DownCast

class Handle_GeomEvaluator_OffsetCurve(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GeomEvaluator_OffsetCurve self)

        Nullify the handle


        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GeomEvaluator_OffsetCurve self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GeomEvaluator_OffsetCurve self, GeomEvaluator_OffsetCurve thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GeomEvaluator_OffsetCurve self, Handle_GeomEvaluator_OffsetCurve theHandle) -> Handle_GeomEvaluator_OffsetCurve
        assign(Handle_GeomEvaluator_OffsetCurve self, GeomEvaluator_OffsetCurve thePtr) -> Handle_GeomEvaluator_OffsetCurve
        assign(Handle_GeomEvaluator_OffsetCurve self, Handle_GeomEvaluator_OffsetCurve theHandle) -> Handle_GeomEvaluator_OffsetCurve

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GeomEvaluator_OffsetCurve self) -> GeomEvaluator_OffsetCurve

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GeomEvaluator_OffsetCurve self) -> GeomEvaluator_OffsetCurve

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GeomEvaluator_OffsetCurve self) -> GeomEvaluator_OffsetCurve

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve___ref__(self, *args)


    def __hash__(self):
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GeomEvaluator.new_Handle_GeomEvaluator_OffsetCurve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_DownCast)
    __swig_destroy__ = _GeomEvaluator.delete_Handle_GeomEvaluator_OffsetCurve

    def SetOffsetValue(self, *args):
        """
        SetOffsetValue(Handle_GeomEvaluator_OffsetCurve self, Standard_Real theOffset)

        Change the offset value

        :type theOffset: float

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_SetOffsetValue(self, *args)


    def SetOffsetDirection(self, *args):
        """
        SetOffsetDirection(Handle_GeomEvaluator_OffsetCurve self, gp_Dir theDirection)

        :type theDirection: OCC.wrapper.gp.gp_Dir

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_SetOffsetDirection(self, *args)


    def D0(self, *args):
        """
        D0(Handle_GeomEvaluator_OffsetCurve self, Standard_Real const theU, gp_Pnt theValue)

        Value of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_GeomEvaluator_OffsetCurve self, Standard_Real const theU, gp_Pnt theValue, gp_Vec theD1)

        Value and first derivatives of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_GeomEvaluator_OffsetCurve self, Standard_Real const theU, gp_Pnt theValue, gp_Vec theD1, gp_Vec theD2)

        Value, first and second derivatives of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1: OCC.wrapper.gp.gp_Vec
        :type theD2: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_GeomEvaluator_OffsetCurve self, Standard_Real const theU, gp_Pnt theValue, gp_Vec theD1, gp_Vec theD2, gp_Vec theD3)

        Value, first, second and third derivatives of curve

        :type theU: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1: OCC.wrapper.gp.gp_Vec
        :type theD2: OCC.wrapper.gp.gp_Vec
        :type theD3: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_GeomEvaluator_OffsetCurve self, Standard_Real const theU, Standard_Integer const theDeriv) -> gp_Vec

        Calculates N-th derivatives of curve, where N = theDeriv. Raises if N < 1

        :type theU: float
        :type theDeriv: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_DN(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GeomEvaluator_OffsetCurve self) -> char const *

        :rtype: const char *

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_GeomEvaluator_OffsetCurve self)

        Memory deallocator for transient classes


        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GeomEvaluator_OffsetCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GeomEvaluator_OffsetCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GeomEvaluator_OffsetCurve self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GeomEvaluator_OffsetCurve self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GeomEvaluator_OffsetCurve self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GeomEvaluator_OffsetCurve self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GeomEvaluator_OffsetCurve self)

        Increments the reference counter of this object


        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GeomEvaluator_OffsetCurve self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_DecrementRefCounter(self, *args)

Handle_GeomEvaluator_OffsetCurve_swigregister = _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_swigregister
Handle_GeomEvaluator_OffsetCurve_swigregister(Handle_GeomEvaluator_OffsetCurve)

def Handle_GeomEvaluator_OffsetCurve_DownCast(thing):
    return _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_DownCast(thing)
Handle_GeomEvaluator_OffsetCurve_DownCast = _GeomEvaluator.Handle_GeomEvaluator_OffsetCurve_DownCast

class GeomEvaluator_SurfaceOfExtrusion(GeomEvaluator_Surface):
    """Allows to calculate values and derivatives for surfaces of linear extrusion"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_GeomEvaluator_SurfaceOfExtrusion
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_GeomEvaluator_SurfaceOfExtrusion(self) 
            return h


    def __init__(self, *args):
        """
        __init__(GeomEvaluator_SurfaceOfExtrusion self, Handle_Geom_Curve theBase, gp_Dir theExtrusionDir) -> GeomEvaluator_SurfaceOfExtrusion
        __init__(GeomEvaluator_SurfaceOfExtrusion self, Handle_Adaptor3d_HCurve theBase, gp_Dir theExtrusionDir) -> GeomEvaluator_SurfaceOfExtrusion

        Initialize evaluator by surface adaptor

        :type theBase: OCC.wrapper.Adaptor3d.Handle_Adaptor3d_HCurve
        :type theExtrusionDir: OCC.wrapper.gp.gp_Dir

        """
        this = _GeomEvaluator.new_GeomEvaluator_SurfaceOfExtrusion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetDirection(self, *args):
        """
        SetDirection(GeomEvaluator_SurfaceOfExtrusion self, gp_Dir theDirection)

        ! Changes the direction of extrusion

        :type theDirection: OCC.wrapper.gp.gp_Dir

        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_SetDirection(self, *args)


    def D0(self, *args):
        """
        D0(GeomEvaluator_SurfaceOfExtrusion self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue)

        Value of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_D0(self, *args)


    def D1(self, *args):
        """
        D1(GeomEvaluator_SurfaceOfExtrusion self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue, gp_Vec theD1U, gp_Vec theD1V)

        Value and first derivatives of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1U: OCC.wrapper.gp.gp_Vec
        :type theD1V: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_D1(self, *args)


    def D2(self, *args):
        """
        D2(GeomEvaluator_SurfaceOfExtrusion self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue, gp_Vec theD1U, gp_Vec theD1V, gp_Vec theD2U, gp_Vec theD2V, gp_Vec theD2UV)

        Value, first and second derivatives of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1U: OCC.wrapper.gp.gp_Vec
        :type theD1V: OCC.wrapper.gp.gp_Vec
        :type theD2U: OCC.wrapper.gp.gp_Vec
        :type theD2V: OCC.wrapper.gp.gp_Vec
        :type theD2UV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_D2(self, *args)


    def D3(self, *args):
        """
        D3(GeomEvaluator_SurfaceOfExtrusion self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue, gp_Vec theD1U, gp_Vec theD1V, gp_Vec theD2U, gp_Vec theD2V, gp_Vec theD2UV, gp_Vec theD3U, gp_Vec theD3V, gp_Vec theD3UUV, gp_Vec theD3UVV)

        Value, first, second and third derivatives of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1U: OCC.wrapper.gp.gp_Vec
        :type theD1V: OCC.wrapper.gp.gp_Vec
        :type theD2U: OCC.wrapper.gp.gp_Vec
        :type theD2V: OCC.wrapper.gp.gp_Vec
        :type theD2UV: OCC.wrapper.gp.gp_Vec
        :type theD3U: OCC.wrapper.gp.gp_Vec
        :type theD3V: OCC.wrapper.gp.gp_Vec
        :type theD3UUV: OCC.wrapper.gp.gp_Vec
        :type theD3UVV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_D3(self, *args)


    def DN(self, *args):
        """
        DN(GeomEvaluator_SurfaceOfExtrusion self, Standard_Real const theU, Standard_Real const theV, Standard_Integer const theDerU, Standard_Integer const theDerV) -> gp_Vec

        Calculates N-th derivatives of surface, where N = theDerU + theDerV.

        Raises if N < 1 or theDerU < 0 or theDerV < 0

        :type theU: float
        :type theV: float
        :type theDerU: int
        :type theDerV: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_DN(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _GeomEvaluator.delete_GeomEvaluator_SurfaceOfExtrusion
GeomEvaluator_SurfaceOfExtrusion_swigregister = _GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_swigregister
GeomEvaluator_SurfaceOfExtrusion_swigregister(GeomEvaluator_SurfaceOfExtrusion)

def GeomEvaluator_SurfaceOfExtrusion_get_type_name(*args):
    """
    GeomEvaluator_SurfaceOfExtrusion_get_type_name() -> char const *

    :rtype: const char *

    """
    return _GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_get_type_name(*args)

def GeomEvaluator_SurfaceOfExtrusion_get_type_descriptor(*args):
    """
    GeomEvaluator_SurfaceOfExtrusion_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _GeomEvaluator.GeomEvaluator_SurfaceOfExtrusion_get_type_descriptor(*args)

class Handle_GeomEvaluator_SurfaceOfExtrusion(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_GeomEvaluator_SurfaceOfExtrusion self)

        Nullify the handle


        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_GeomEvaluator_SurfaceOfExtrusion self) -> bool

        Check for being null

        :rtype: bool

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_GeomEvaluator_SurfaceOfExtrusion self, GeomEvaluator_SurfaceOfExtrusion thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_GeomEvaluator_SurfaceOfExtrusion self, Handle_GeomEvaluator_SurfaceOfExtrusion theHandle) -> Handle_GeomEvaluator_SurfaceOfExtrusion
        assign(Handle_GeomEvaluator_SurfaceOfExtrusion self, GeomEvaluator_SurfaceOfExtrusion thePtr) -> Handle_GeomEvaluator_SurfaceOfExtrusion
        assign(Handle_GeomEvaluator_SurfaceOfExtrusion self, Handle_GeomEvaluator_SurfaceOfExtrusion theHandle) -> Handle_GeomEvaluator_SurfaceOfExtrusion

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_GeomEvaluator_SurfaceOfExtrusion self) -> GeomEvaluator_SurfaceOfExtrusion

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_GeomEvaluator_SurfaceOfExtrusion self) -> GeomEvaluator_SurfaceOfExtrusion

        Member access operator (note non-const)

        :rtype: T *

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_GeomEvaluator_SurfaceOfExtrusion self) -> GeomEvaluator_SurfaceOfExtrusion

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion___ref__(self, *args)


    def __hash__(self):
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _GeomEvaluator.new_Handle_GeomEvaluator_SurfaceOfExtrusion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_DownCast)
    __swig_destroy__ = _GeomEvaluator.delete_Handle_GeomEvaluator_SurfaceOfExtrusion

    def SetDirection(self, *args):
        """
        SetDirection(Handle_GeomEvaluator_SurfaceOfExtrusion self, gp_Dir theDirection)

        ! Changes the direction of extrusion

        :type theDirection: OCC.wrapper.gp.gp_Dir

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_SetDirection(self, *args)


    def D0(self, *args):
        """
        D0(Handle_GeomEvaluator_SurfaceOfExtrusion self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue)

        Value of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_D0(self, *args)


    def D1(self, *args):
        """
        D1(Handle_GeomEvaluator_SurfaceOfExtrusion self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue, gp_Vec theD1U, gp_Vec theD1V)

        Value and first derivatives of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1U: OCC.wrapper.gp.gp_Vec
        :type theD1V: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_D1(self, *args)


    def D2(self, *args):
        """
        D2(Handle_GeomEvaluator_SurfaceOfExtrusion self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue, gp_Vec theD1U, gp_Vec theD1V, gp_Vec theD2U, gp_Vec theD2V, gp_Vec theD2UV)

        Value, first and second derivatives of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1U: OCC.wrapper.gp.gp_Vec
        :type theD1V: OCC.wrapper.gp.gp_Vec
        :type theD2U: OCC.wrapper.gp.gp_Vec
        :type theD2V: OCC.wrapper.gp.gp_Vec
        :type theD2UV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_D2(self, *args)


    def D3(self, *args):
        """
        D3(Handle_GeomEvaluator_SurfaceOfExtrusion self, Standard_Real const theU, Standard_Real const theV, gp_Pnt theValue, gp_Vec theD1U, gp_Vec theD1V, gp_Vec theD2U, gp_Vec theD2V, gp_Vec theD2UV, gp_Vec theD3U, gp_Vec theD3V, gp_Vec theD3UUV, gp_Vec theD3UVV)

        Value, first, second and third derivatives of surface

        :type theU: float
        :type theV: float
        :type theValue: OCC.wrapper.gp.gp_Pnt
        :type theD1U: OCC.wrapper.gp.gp_Vec
        :type theD1V: OCC.wrapper.gp.gp_Vec
        :type theD2U: OCC.wrapper.gp.gp_Vec
        :type theD2V: OCC.wrapper.gp.gp_Vec
        :type theD2UV: OCC.wrapper.gp.gp_Vec
        :type theD3U: OCC.wrapper.gp.gp_Vec
        :type theD3V: OCC.wrapper.gp.gp_Vec
        :type theD3UUV: OCC.wrapper.gp.gp_Vec
        :type theD3UVV: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_D3(self, *args)


    def DN(self, *args):
        """
        DN(Handle_GeomEvaluator_SurfaceOfExtrusion self, Standard_Real const theU, Standard_Real const theV, Standard_Integer const theDerU, Standard_Integer const theDerV) -> gp_Vec

        Calculates N-th derivatives of surface, where N = theDerU + theDerV.

        Raises if N < 1 or theDerU < 0 or theDerV < 0

        :type theU: float
        :type theV: float
        :type theDerU: int
        :type theDerV: int
        :rtype: OCC.wrapper.gp.gp_Vec

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_DN(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_GeomEvaluator_SurfaceOfExtrusion self) -> char const *

        :rtype: const char *

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_GeomEvaluator_SurfaceOfExtrusion self)

        Memory deallocator for transient classes


        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_GeomEvaluator_SurfaceOfExtrusion self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_GeomEvaluator_SurfaceOfExtrusion self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_GeomEvaluator_SurfaceOfExtrusion self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_GeomEvaluator_SurfaceOfExtrusion self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_GeomEvaluator_SurfaceOfExtrusion self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_GeomEvaluator_SurfaceOfExtrusion self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_GeomEvaluator_SurfaceOfExtrusion self)

        Increments the reference counter of this object


        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_GeomEvaluator_SurfaceOfExtrusion self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_DecrementRefCounter(self, *args)

Handle_GeomEvaluator_SurfaceOfExtrusion_swigregister = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_swigregister
Handle_GeomEvaluator_SurfaceOfExtrusion_swigregister(Handle_GeomEvaluator_SurfaceOfExtrusion)

def Handle_GeomEvaluator_SurfaceOfExtrusion_DownCast(thing):
    return _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_DownCast(thing)
Handle_GeomEvaluator_SurfaceOfExtrusion_DownCast = _GeomEvaluator.Handle_GeomEvaluator_SurfaceOfExtrusion_DownCast



