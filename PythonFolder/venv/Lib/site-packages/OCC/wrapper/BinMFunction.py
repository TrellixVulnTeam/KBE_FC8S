# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BinMFunction')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BinMFunction')
    _BinMFunction = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BinMFunction', [dirname(__file__)])
        except ImportError:
            import _BinMFunction
            return _BinMFunction
        try:
            _mod = imp.load_module('_BinMFunction', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BinMFunction = swig_import_helper()
    del swig_import_helper
else:
    import _BinMFunction
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BinMFunction.delete_SwigPyIterator

    def value(self):
        return _BinMFunction.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BinMFunction.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BinMFunction.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BinMFunction.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BinMFunction.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BinMFunction.SwigPyIterator_copy(self)

    def next(self):
        return _BinMFunction.SwigPyIterator_next(self)

    def __next__(self):
        return _BinMFunction.SwigPyIterator___next__(self)

    def previous(self):
        return _BinMFunction.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BinMFunction.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BinMFunction.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BinMFunction.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BinMFunction.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BinMFunction.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BinMFunction.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BinMFunction.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BinMFunction.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BinMFunction.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_BinMFunction.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _BinMFunction.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BinMFunction.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinMFunction.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _BinMFunction.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _BinMFunction.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _BinMFunction.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BinMFunction.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_BinMFunction.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _BinMFunction.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BinMFunction.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinMFunction.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _BinMFunction.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _BinMFunction.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _BinMFunction.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _BinMFunction.ptr_to_number(item)
ptr_to_number = _BinMFunction.ptr_to_number

def HashCode(*args):
    return _BinMFunction.HashCode(*args)
HashCode = _BinMFunction.HashCode

def ptr_equal(a, b):
    return _BinMFunction.ptr_equal(a, b)
ptr_equal = _BinMFunction.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BinObjMgt
else:
    import BinObjMgt
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Storage
else:
    import Storage
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BinMDF
else:
    import BinMDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
class BinMFunction_GraphNodeDriver(BinMDF.BinMDF_ADriver):
    """GraphNode attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMFunction_GraphNodeDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMFunction_GraphNodeDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMFunction_GraphNodeDriver self, Handle_Message_Messenger theMessageDriver) -> BinMFunction_GraphNodeDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMFunction.new_BinMFunction_GraphNodeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMFunction_GraphNodeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMFunction.BinMFunction_GraphNodeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMFunction_GraphNodeDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMFunction_GraphNodeDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMFunction.BinMFunction_GraphNodeDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMFunction.BinMFunction_GraphNodeDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMFunction.BinMFunction_GraphNodeDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMFunction.BinMFunction_GraphNodeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMFunction.delete_BinMFunction_GraphNodeDriver
BinMFunction_GraphNodeDriver_swigregister = _BinMFunction.BinMFunction_GraphNodeDriver_swigregister
BinMFunction_GraphNodeDriver_swigregister(BinMFunction_GraphNodeDriver)

def BinMFunction_GraphNodeDriver_get_type_name(*args):
    """
    BinMFunction_GraphNodeDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMFunction.BinMFunction_GraphNodeDriver_get_type_name(*args)

def BinMFunction_GraphNodeDriver_get_type_descriptor(*args):
    """
    BinMFunction_GraphNodeDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMFunction.BinMFunction_GraphNodeDriver_get_type_descriptor(*args)

class BinMFunction_FunctionDriver(BinMDF.BinMDF_ADriver):
    """Function attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMFunction_FunctionDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMFunction_FunctionDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMFunction_FunctionDriver self, Handle_Message_Messenger theMessageDriver) -> BinMFunction_FunctionDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMFunction.new_BinMFunction_FunctionDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMFunction_FunctionDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMFunction.BinMFunction_FunctionDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMFunction_FunctionDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMFunction_FunctionDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMFunction.BinMFunction_FunctionDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMFunction.BinMFunction_FunctionDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMFunction.BinMFunction_FunctionDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMFunction.BinMFunction_FunctionDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMFunction.delete_BinMFunction_FunctionDriver
BinMFunction_FunctionDriver_swigregister = _BinMFunction.BinMFunction_FunctionDriver_swigregister
BinMFunction_FunctionDriver_swigregister(BinMFunction_FunctionDriver)

def BinMFunction_FunctionDriver_get_type_name(*args):
    """
    BinMFunction_FunctionDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMFunction.BinMFunction_FunctionDriver_get_type_name(*args)

def BinMFunction_FunctionDriver_get_type_descriptor(*args):
    """
    BinMFunction_FunctionDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMFunction.BinMFunction_FunctionDriver_get_type_descriptor(*args)

class BinMFunction_ScopeDriver(BinMDF.BinMDF_ADriver):
    """Scope attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMFunction_ScopeDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMFunction_ScopeDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMFunction_ScopeDriver self, Handle_Message_Messenger theMessageDriver) -> BinMFunction_ScopeDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMFunction.new_BinMFunction_ScopeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMFunction_ScopeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMFunction.BinMFunction_ScopeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMFunction_ScopeDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMFunction_ScopeDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMFunction.BinMFunction_ScopeDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMFunction.BinMFunction_ScopeDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMFunction.BinMFunction_ScopeDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMFunction.BinMFunction_ScopeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMFunction.delete_BinMFunction_ScopeDriver
BinMFunction_ScopeDriver_swigregister = _BinMFunction.BinMFunction_ScopeDriver_swigregister
BinMFunction_ScopeDriver_swigregister(BinMFunction_ScopeDriver)

def BinMFunction_ScopeDriver_get_type_name(*args):
    """
    BinMFunction_ScopeDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMFunction.BinMFunction_ScopeDriver_get_type_name(*args)

def BinMFunction_ScopeDriver_get_type_descriptor(*args):
    """
    BinMFunction_ScopeDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMFunction.BinMFunction_ScopeDriver_get_type_descriptor(*args)

class Handle_BinMFunction_ScopeDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMFunction_ScopeDriver self)

        Nullify the handle


        """
        return _BinMFunction.Handle_BinMFunction_ScopeDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMFunction_ScopeDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMFunction.Handle_BinMFunction_ScopeDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMFunction_ScopeDriver self, BinMFunction_ScopeDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMFunction.Handle_BinMFunction_ScopeDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMFunction_ScopeDriver self, Handle_BinMFunction_ScopeDriver theHandle) -> Handle_BinMFunction_ScopeDriver
        assign(Handle_BinMFunction_ScopeDriver self, BinMFunction_ScopeDriver thePtr) -> Handle_BinMFunction_ScopeDriver
        assign(Handle_BinMFunction_ScopeDriver self, Handle_BinMFunction_ScopeDriver theHandle) -> Handle_BinMFunction_ScopeDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMFunction.Handle_BinMFunction_ScopeDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMFunction_ScopeDriver self) -> BinMFunction_ScopeDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMFunction.Handle_BinMFunction_ScopeDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMFunction_ScopeDriver self) -> BinMFunction_ScopeDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMFunction.Handle_BinMFunction_ScopeDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMFunction_ScopeDriver self) -> BinMFunction_ScopeDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMFunction.Handle_BinMFunction_ScopeDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMFunction.Handle_BinMFunction_ScopeDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMFunction.Handle_BinMFunction_ScopeDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMFunction.new_Handle_BinMFunction_ScopeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMFunction.Handle_BinMFunction_ScopeDriver_DownCast)
    __swig_destroy__ = _BinMFunction.delete_Handle_BinMFunction_ScopeDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMFunction_ScopeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMFunction.Handle_BinMFunction_ScopeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMFunction_ScopeDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMFunction_ScopeDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMFunction.Handle_BinMFunction_ScopeDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMFunction_ScopeDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMFunction.Handle_BinMFunction_ScopeDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMFunction.Handle_BinMFunction_ScopeDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMFunction.Handle_BinMFunction_ScopeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMFunction.Handle_BinMFunction_ScopeDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMFunction.Handle_BinMFunction_ScopeDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMFunction_ScopeDriver self)

        Memory deallocator for transient classes


        """
        return _BinMFunction.Handle_BinMFunction_ScopeDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMFunction_ScopeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMFunction_ScopeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMFunction.Handle_BinMFunction_ScopeDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMFunction_ScopeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMFunction_ScopeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMFunction.Handle_BinMFunction_ScopeDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMFunction_ScopeDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMFunction.Handle_BinMFunction_ScopeDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMFunction_ScopeDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMFunction.Handle_BinMFunction_ScopeDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMFunction_ScopeDriver self)

        Increments the reference counter of this object


        """
        return _BinMFunction.Handle_BinMFunction_ScopeDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMFunction_ScopeDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMFunction.Handle_BinMFunction_ScopeDriver_DecrementRefCounter(self, *args)

Handle_BinMFunction_ScopeDriver_swigregister = _BinMFunction.Handle_BinMFunction_ScopeDriver_swigregister
Handle_BinMFunction_ScopeDriver_swigregister(Handle_BinMFunction_ScopeDriver)

def Handle_BinMFunction_ScopeDriver_DownCast(thing):
    return _BinMFunction.Handle_BinMFunction_ScopeDriver_DownCast(thing)
Handle_BinMFunction_ScopeDriver_DownCast = _BinMFunction.Handle_BinMFunction_ScopeDriver_DownCast

class Handle_BinMFunction_FunctionDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMFunction_FunctionDriver self)

        Nullify the handle


        """
        return _BinMFunction.Handle_BinMFunction_FunctionDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMFunction_FunctionDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMFunction.Handle_BinMFunction_FunctionDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMFunction_FunctionDriver self, BinMFunction_FunctionDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMFunction.Handle_BinMFunction_FunctionDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMFunction_FunctionDriver self, Handle_BinMFunction_FunctionDriver theHandle) -> Handle_BinMFunction_FunctionDriver
        assign(Handle_BinMFunction_FunctionDriver self, BinMFunction_FunctionDriver thePtr) -> Handle_BinMFunction_FunctionDriver
        assign(Handle_BinMFunction_FunctionDriver self, Handle_BinMFunction_FunctionDriver theHandle) -> Handle_BinMFunction_FunctionDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMFunction.Handle_BinMFunction_FunctionDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMFunction_FunctionDriver self) -> BinMFunction_FunctionDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMFunction.Handle_BinMFunction_FunctionDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMFunction_FunctionDriver self) -> BinMFunction_FunctionDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMFunction.Handle_BinMFunction_FunctionDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMFunction_FunctionDriver self) -> BinMFunction_FunctionDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMFunction.Handle_BinMFunction_FunctionDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMFunction.Handle_BinMFunction_FunctionDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMFunction.Handle_BinMFunction_FunctionDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMFunction.new_Handle_BinMFunction_FunctionDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMFunction.Handle_BinMFunction_FunctionDriver_DownCast)
    __swig_destroy__ = _BinMFunction.delete_Handle_BinMFunction_FunctionDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMFunction_FunctionDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMFunction.Handle_BinMFunction_FunctionDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMFunction_FunctionDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMFunction_FunctionDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMFunction.Handle_BinMFunction_FunctionDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMFunction_FunctionDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMFunction.Handle_BinMFunction_FunctionDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMFunction.Handle_BinMFunction_FunctionDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMFunction.Handle_BinMFunction_FunctionDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMFunction.Handle_BinMFunction_FunctionDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMFunction.Handle_BinMFunction_FunctionDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMFunction_FunctionDriver self)

        Memory deallocator for transient classes


        """
        return _BinMFunction.Handle_BinMFunction_FunctionDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMFunction_FunctionDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMFunction_FunctionDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMFunction.Handle_BinMFunction_FunctionDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMFunction_FunctionDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMFunction_FunctionDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMFunction.Handle_BinMFunction_FunctionDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMFunction_FunctionDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMFunction.Handle_BinMFunction_FunctionDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMFunction_FunctionDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMFunction.Handle_BinMFunction_FunctionDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMFunction_FunctionDriver self)

        Increments the reference counter of this object


        """
        return _BinMFunction.Handle_BinMFunction_FunctionDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMFunction_FunctionDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMFunction.Handle_BinMFunction_FunctionDriver_DecrementRefCounter(self, *args)

Handle_BinMFunction_FunctionDriver_swigregister = _BinMFunction.Handle_BinMFunction_FunctionDriver_swigregister
Handle_BinMFunction_FunctionDriver_swigregister(Handle_BinMFunction_FunctionDriver)

def Handle_BinMFunction_FunctionDriver_DownCast(thing):
    return _BinMFunction.Handle_BinMFunction_FunctionDriver_DownCast(thing)
Handle_BinMFunction_FunctionDriver_DownCast = _BinMFunction.Handle_BinMFunction_FunctionDriver_DownCast

class Handle_BinMFunction_GraphNodeDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMFunction_GraphNodeDriver self)

        Nullify the handle


        """
        return _BinMFunction.Handle_BinMFunction_GraphNodeDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMFunction_GraphNodeDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMFunction.Handle_BinMFunction_GraphNodeDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMFunction_GraphNodeDriver self, BinMFunction_GraphNodeDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMFunction.Handle_BinMFunction_GraphNodeDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMFunction_GraphNodeDriver self, Handle_BinMFunction_GraphNodeDriver theHandle) -> Handle_BinMFunction_GraphNodeDriver
        assign(Handle_BinMFunction_GraphNodeDriver self, BinMFunction_GraphNodeDriver thePtr) -> Handle_BinMFunction_GraphNodeDriver
        assign(Handle_BinMFunction_GraphNodeDriver self, Handle_BinMFunction_GraphNodeDriver theHandle) -> Handle_BinMFunction_GraphNodeDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMFunction.Handle_BinMFunction_GraphNodeDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMFunction_GraphNodeDriver self) -> BinMFunction_GraphNodeDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMFunction.Handle_BinMFunction_GraphNodeDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMFunction_GraphNodeDriver self) -> BinMFunction_GraphNodeDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMFunction.Handle_BinMFunction_GraphNodeDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMFunction_GraphNodeDriver self) -> BinMFunction_GraphNodeDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMFunction.Handle_BinMFunction_GraphNodeDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMFunction.Handle_BinMFunction_GraphNodeDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMFunction.Handle_BinMFunction_GraphNodeDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMFunction.new_Handle_BinMFunction_GraphNodeDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMFunction.Handle_BinMFunction_GraphNodeDriver_DownCast)
    __swig_destroy__ = _BinMFunction.delete_Handle_BinMFunction_GraphNodeDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMFunction_GraphNodeDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMFunction.Handle_BinMFunction_GraphNodeDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMFunction_GraphNodeDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMFunction_GraphNodeDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMFunction.Handle_BinMFunction_GraphNodeDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMFunction_GraphNodeDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMFunction.Handle_BinMFunction_GraphNodeDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMFunction.Handle_BinMFunction_GraphNodeDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMFunction.Handle_BinMFunction_GraphNodeDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMFunction.Handle_BinMFunction_GraphNodeDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMFunction.Handle_BinMFunction_GraphNodeDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMFunction_GraphNodeDriver self)

        Memory deallocator for transient classes


        """
        return _BinMFunction.Handle_BinMFunction_GraphNodeDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMFunction_GraphNodeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMFunction_GraphNodeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMFunction.Handle_BinMFunction_GraphNodeDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMFunction_GraphNodeDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMFunction_GraphNodeDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMFunction.Handle_BinMFunction_GraphNodeDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMFunction_GraphNodeDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMFunction.Handle_BinMFunction_GraphNodeDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMFunction_GraphNodeDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMFunction.Handle_BinMFunction_GraphNodeDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMFunction_GraphNodeDriver self)

        Increments the reference counter of this object


        """
        return _BinMFunction.Handle_BinMFunction_GraphNodeDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMFunction_GraphNodeDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMFunction.Handle_BinMFunction_GraphNodeDriver_DecrementRefCounter(self, *args)

Handle_BinMFunction_GraphNodeDriver_swigregister = _BinMFunction.Handle_BinMFunction_GraphNodeDriver_swigregister
Handle_BinMFunction_GraphNodeDriver_swigregister(Handle_BinMFunction_GraphNodeDriver)

def Handle_BinMFunction_GraphNodeDriver_DownCast(thing):
    return _BinMFunction.Handle_BinMFunction_GraphNodeDriver_DownCast(thing)
Handle_BinMFunction_GraphNodeDriver_DownCast = _BinMFunction.Handle_BinMFunction_GraphNodeDriver_DownCast

class BinMFunction_(object):
    """Storage and Retrieval drivers for TFunction modelling attributes."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddDrivers(*args):
        """
        AddDrivers(Handle_BinMDF_ADriverTable theDriverTable, Handle_Message_Messenger aMsgDrv)

        Adds the attribute drivers to <theDriverTable>.

        :type theDriverTable: OCC.wrapper.BinMDF.Handle_BinMDF_ADriverTable
        :type aMsgDrv: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _BinMFunction.BinMFunction__AddDrivers(*args)

    AddDrivers = staticmethod(AddDrivers)

    def __init__(self):
        """Storage and Retrieval drivers for TFunction modelling attributes."""
        this = _BinMFunction.new_BinMFunction_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinMFunction.delete_BinMFunction_
BinMFunction__swigregister = _BinMFunction.BinMFunction__swigregister
BinMFunction__swigregister(BinMFunction_)

def BinMFunction__AddDrivers(*args):
    """
    BinMFunction__AddDrivers(Handle_BinMDF_ADriverTable theDriverTable, Handle_Message_Messenger aMsgDrv)

    Adds the attribute drivers to <theDriverTable>.

    :type theDriverTable: OCC.wrapper.BinMDF.Handle_BinMDF_ADriverTable
    :type aMsgDrv: OCC.wrapper.Message.Handle_Message_Messenger

    """
    return _BinMFunction.BinMFunction__AddDrivers(*args)



