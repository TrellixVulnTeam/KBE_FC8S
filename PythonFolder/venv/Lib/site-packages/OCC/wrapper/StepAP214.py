# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StepAP214')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StepAP214')
    _StepAP214 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepAP214', [dirname(__file__)])
        except ImportError:
            import _StepAP214
            return _StepAP214
        try:
            _mod = imp.load_module('_StepAP214', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StepAP214 = swig_import_helper()
    del swig_import_helper
else:
    import _StepAP214
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepAP214.delete_SwigPyIterator

    def value(self):
        return _StepAP214.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _StepAP214.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _StepAP214.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _StepAP214.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _StepAP214.SwigPyIterator_equal(self, x)

    def copy(self):
        return _StepAP214.SwigPyIterator_copy(self)

    def next(self):
        return _StepAP214.SwigPyIterator_next(self)

    def __next__(self):
        return _StepAP214.SwigPyIterator___next__(self)

    def previous(self):
        return _StepAP214.SwigPyIterator_previous(self)

    def advance(self, n):
        return _StepAP214.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _StepAP214.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _StepAP214.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _StepAP214.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _StepAP214.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _StepAP214.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _StepAP214.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _StepAP214.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StepAP214.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_StepAP214.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _StepAP214.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StepAP214.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepAP214.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _StepAP214.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _StepAP214.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _StepAP214.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _StepAP214.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_StepAP214.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _StepAP214.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _StepAP214.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepAP214.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _StepAP214.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _StepAP214.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _StepAP214.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _StepAP214.ptr_to_number(item)
ptr_to_number = _StepAP214.ptr_to_number

def HashCode(*args):
    return _StepAP214.HashCode(*args)
HashCode = _StepAP214.HashCode

def ptr_equal(a, b):
    return _StepAP214.ptr_equal(a, b)
ptr_equal = _StepAP214.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepBasic
else:
    import StepBasic
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepData
else:
    import StepData
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Interface
else:
    import Interface
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import MoniTool
else:
    import MoniTool
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepShape
else:
    import StepShape
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepGeom
else:
    import StepGeom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepRepr
else:
    import StepRepr
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import StepVisual
else:
    import StepVisual
del _swig_python_version_info
class StepAP214_AppliedApprovalAssignment(StepBasic.StepBasic_ApprovalAssignment):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_AppliedApprovalAssignment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_AppliedApprovalAssignment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_AppliedApprovalAssignment self) -> StepAP214_AppliedApprovalAssignment

        Returns a AppliedApprovalAssignment


        """
        this = _StepAP214.new_StepAP214_AppliedApprovalAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP214_AppliedApprovalAssignment self, Handle_StepBasic_Approval aAssignedApproval, Handle_StepAP214_HArray1OfApprovalItem aItems)

        :type aAssignedApproval: OCC.wrapper.StepBasic.Handle_StepBasic_Approval
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfApprovalItem

        """
        return _StepAP214.StepAP214_AppliedApprovalAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP214_AppliedApprovalAssignment self, Handle_StepAP214_HArray1OfApprovalItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfApprovalItem

        """
        return _StepAP214.StepAP214_AppliedApprovalAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(StepAP214_AppliedApprovalAssignment self) -> Handle_StepAP214_HArray1OfApprovalItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfApprovalItem

        """
        return _StepAP214.StepAP214_AppliedApprovalAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(StepAP214_AppliedApprovalAssignment self, Standard_Integer const num) -> StepAP214_ApprovalItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_ApprovalItem

        """
        return _StepAP214.StepAP214_AppliedApprovalAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(StepAP214_AppliedApprovalAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AppliedApprovalAssignment_NbItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_AppliedApprovalAssignment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_AppliedApprovalAssignment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_AppliedApprovalAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_AppliedApprovalAssignment
StepAP214_AppliedApprovalAssignment_swigregister = _StepAP214.StepAP214_AppliedApprovalAssignment_swigregister
StepAP214_AppliedApprovalAssignment_swigregister(StepAP214_AppliedApprovalAssignment)

def StepAP214_AppliedApprovalAssignment_get_type_name(*args):
    """
    StepAP214_AppliedApprovalAssignment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_AppliedApprovalAssignment_get_type_name(*args)

def StepAP214_AppliedApprovalAssignment_get_type_descriptor(*args):
    """
    StepAP214_AppliedApprovalAssignment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_AppliedApprovalAssignment_get_type_descriptor(*args)

class StepAP214_AutoDesignActualDateAssignment(StepBasic.StepBasic_DateAssignment):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_AutoDesignActualDateAssignment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_AutoDesignActualDateAssignment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_AutoDesignActualDateAssignment self) -> StepAP214_AutoDesignActualDateAssignment

        Returns a AutoDesignActualDateAssignment


        """
        this = _StepAP214.new_StepAP214_AutoDesignActualDateAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP214_AutoDesignActualDateAssignment self, Handle_StepBasic_Date aAssignedDate, Handle_StepBasic_DateRole aRole, Handle_StepAP214_HArray1OfAutoDesignDatedItem aItems)

        :type aAssignedDate: OCC.wrapper.StepBasic.Handle_StepBasic_Date
        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_DateRole
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem

        """
        return _StepAP214.StepAP214_AutoDesignActualDateAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP214_AutoDesignActualDateAssignment self, Handle_StepAP214_HArray1OfAutoDesignDatedItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem

        """
        return _StepAP214.StepAP214_AutoDesignActualDateAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(StepAP214_AutoDesignActualDateAssignment self) -> Handle_StepAP214_HArray1OfAutoDesignDatedItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem

        """
        return _StepAP214.StepAP214_AutoDesignActualDateAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(StepAP214_AutoDesignActualDateAssignment self, Standard_Integer const num) -> StepAP214_AutoDesignDatedItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_AutoDesignDatedItem

        """
        return _StepAP214.StepAP214_AutoDesignActualDateAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(StepAP214_AutoDesignActualDateAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AutoDesignActualDateAssignment_NbItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_AutoDesignActualDateAssignment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_AutoDesignActualDateAssignment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_AutoDesignActualDateAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_AutoDesignActualDateAssignment
StepAP214_AutoDesignActualDateAssignment_swigregister = _StepAP214.StepAP214_AutoDesignActualDateAssignment_swigregister
StepAP214_AutoDesignActualDateAssignment_swigregister(StepAP214_AutoDesignActualDateAssignment)

def StepAP214_AutoDesignActualDateAssignment_get_type_name(*args):
    """
    StepAP214_AutoDesignActualDateAssignment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_AutoDesignActualDateAssignment_get_type_name(*args)

def StepAP214_AutoDesignActualDateAssignment_get_type_descriptor(*args):
    """
    StepAP214_AutoDesignActualDateAssignment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_AutoDesignActualDateAssignment_get_type_descriptor(*args)

class StepAP214_Protocol(StepData.StepData_Protocol):
    """
    Protocol for StepAP214 Entities
    It requires StepAP214 as a Resource
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_Protocol
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_Protocol(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_Protocol self) -> StepAP214_Protocol

        Protocol for StepAP214 Entities
        It requires StepAP214 as a Resource
        """
        this = _StepAP214.new_StepAP214_Protocol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def TypeNumber(self, *args):
        """
        TypeNumber(StepAP214_Protocol self, Handle_Standard_Type atype) -> Standard_Integer

        Returns a Case Number for each of the StepAP214 Entities

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_Protocol_TypeNumber(self, *args)


    def SchemaName(self, *args):
        """
        SchemaName(StepAP214_Protocol self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepAP214.StepAP214_Protocol_SchemaName(self, *args)


    def NbResources(self, *args):
        """
        NbResources(StepAP214_Protocol self) -> Standard_Integer

        Returns count of Protocol used as Resources (level one)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_Protocol_NbResources(self, *args)


    def Resource(self, *args):
        """
        Resource(StepAP214_Protocol self, Standard_Integer const num) -> Handle_Interface_Protocol

        Returns a Resource, given its rank (between 1 and NbResources)

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _StepAP214.StepAP214_Protocol_Resource(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_Protocol_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_Protocol_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_Protocol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_Protocol
StepAP214_Protocol_swigregister = _StepAP214.StepAP214_Protocol_swigregister
StepAP214_Protocol_swigregister(StepAP214_Protocol)

def StepAP214_Protocol_get_type_name(*args):
    """
    StepAP214_Protocol_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_Protocol_get_type_name(*args)

def StepAP214_Protocol_get_type_descriptor(*args):
    """
    StepAP214_Protocol_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_Protocol_get_type_descriptor(*args)

class StepAP214_AutoDesignGeneralOrgItem(StepData.StepData_SelectType):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP214_AutoDesignGeneralOrgItem self) -> StepAP214_AutoDesignGeneralOrgItem

        Returns a AutoDesignGeneralOrgItem SelectType


        """
        this = _StepAP214.new_StepAP214_AutoDesignGeneralOrgItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP214_AutoDesignGeneralOrgItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a AutoDesignGeneralOrgItem Kind Entity that is :
        1     Product from StepBasic,
        2     ProductDefinition from StepBasic,
        3     ProductDefinitionFormation from StepBasic,
        4     ProductDefinitionRelationship from StepBasic,
        5     ProductDefinitionWithAssociatedDocuments from StepBasic,
        6     Representation from StepRepr
        7     ExternallyDefinedRepresentation from StepRepr,
        8     AutoDesignDocumentReference from StepAP214,
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AutoDesignGeneralOrgItem_CaseNum(self, *args)


    def Product(self, *args):
        """
        Product(StepAP214_AutoDesignGeneralOrgItem self) -> Handle_StepBasic_Product

        returns Value as a Product (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Product

        """
        return _StepAP214.StepAP214_AutoDesignGeneralOrgItem_Product(self, *args)


    def ProductDefinition(self, *args):
        """
        ProductDefinition(StepAP214_AutoDesignGeneralOrgItem self) -> Handle_StepBasic_ProductDefinition

        returns Value as a ProductDefinition (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepAP214.StepAP214_AutoDesignGeneralOrgItem_ProductDefinition(self, *args)


    def ProductDefinitionFormation(self, *args):
        """
        ProductDefinitionFormation(StepAP214_AutoDesignGeneralOrgItem self) -> Handle_StepBasic_ProductDefinitionFormation

        returns Value as a ProductDefinitionFormation (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionFormation

        """
        return _StepAP214.StepAP214_AutoDesignGeneralOrgItem_ProductDefinitionFormation(self, *args)


    def ProductDefinitionRelationship(self, *args):
        """
        ProductDefinitionRelationship(StepAP214_AutoDesignGeneralOrgItem self) -> Handle_StepBasic_ProductDefinitionRelationship

        returns Value as a ProductDefinitionRelationship (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionRelationship

        """
        return _StepAP214.StepAP214_AutoDesignGeneralOrgItem_ProductDefinitionRelationship(self, *args)


    def ProductDefinitionWithAssociatedDocuments(self, *args):
        """
        ProductDefinitionWithAssociatedDocuments(StepAP214_AutoDesignGeneralOrgItem self) -> Handle_StepBasic_ProductDefinitionWithAssociatedDocuments

        returns Value as a ProductDefinitionWithAssociatedDocuments (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionWithAssociatedDocuments

        """
        return _StepAP214.StepAP214_AutoDesignGeneralOrgItem_ProductDefinitionWithAssociatedDocuments(self, *args)


    def Representation(self, *args):
        """
        Representation(StepAP214_AutoDesignGeneralOrgItem self) -> Handle_StepRepr_Representation

        returns Value as a Representation (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepAP214.StepAP214_AutoDesignGeneralOrgItem_Representation(self, *args)


    def ExternallyDefinedRepresentation(self, *args):
        """
        ExternallyDefinedRepresentation(StepAP214_AutoDesignGeneralOrgItem self) -> Handle_StepRepr_ExternallyDefinedRepresentation

        returns Value as a Representation (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation

        """
        return _StepAP214.StepAP214_AutoDesignGeneralOrgItem_ExternallyDefinedRepresentation(self, *args)


    def AutoDesignDocumentReference(self, *args):
        """
        AutoDesignDocumentReference(StepAP214_AutoDesignGeneralOrgItem self) -> Handle_StepAP214_AutoDesignDocumentReference

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignDocumentReference

        """
        return _StepAP214.StepAP214_AutoDesignGeneralOrgItem_AutoDesignDocumentReference(self, *args)

    __swig_destroy__ = _StepAP214.delete_StepAP214_AutoDesignGeneralOrgItem
StepAP214_AutoDesignGeneralOrgItem_swigregister = _StepAP214.StepAP214_AutoDesignGeneralOrgItem_swigregister
StepAP214_AutoDesignGeneralOrgItem_swigregister(StepAP214_AutoDesignGeneralOrgItem)

class StepAP214_HArray1OfAutoDesignDateAndPersonItem(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_HArray1OfAutoDesignDateAndPersonItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP214_HArray1OfAutoDesignDateAndPersonItem
        __init__(StepAP214_HArray1OfAutoDesignDateAndPersonItem self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP214_AutoDesignDateAndPersonItem theValue) -> StepAP214_HArray1OfAutoDesignDateAndPersonItem
        __init__(StepAP214_HArray1OfAutoDesignDateAndPersonItem self, NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem theOther) -> StepAP214_HArray1OfAutoDesignDateAndPersonItem

        :type theOther: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignDateAndPersonItem

        """
        this = _StepAP214.new_StepAP214_HArray1OfAutoDesignDateAndPersonItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignDateAndPersonItem

        """
        res = _StepAP214.StepAP214_HArray1OfAutoDesignDateAndPersonItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP214_HArray1OfAutoDesignDateAndPersonItem self) -> NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignDateAndPersonItem

        """
        return _StepAP214.StepAP214_HArray1OfAutoDesignDateAndPersonItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_HArray1OfAutoDesignDateAndPersonItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_HArray1OfAutoDesignDateAndPersonItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_HArray1OfAutoDesignDateAndPersonItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_HArray1OfAutoDesignDateAndPersonItem
StepAP214_HArray1OfAutoDesignDateAndPersonItem_swigregister = _StepAP214.StepAP214_HArray1OfAutoDesignDateAndPersonItem_swigregister
StepAP214_HArray1OfAutoDesignDateAndPersonItem_swigregister(StepAP214_HArray1OfAutoDesignDateAndPersonItem)

def StepAP214_HArray1OfAutoDesignDateAndPersonItem_get_type_name(*args):
    """
    StepAP214_HArray1OfAutoDesignDateAndPersonItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_HArray1OfAutoDesignDateAndPersonItem_get_type_name(*args)

def StepAP214_HArray1OfAutoDesignDateAndPersonItem_get_type_descriptor(*args):
    """
    StepAP214_HArray1OfAutoDesignDateAndPersonItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_HArray1OfAutoDesignDateAndPersonItem_get_type_descriptor(*args)

class StepAP214_AutoDesignDateAndPersonItem(StepData.StepData_SelectType):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP214_AutoDesignDateAndPersonItem self) -> StepAP214_AutoDesignDateAndPersonItem

        Returns a AutoDesignDateAndPersonItem SelectType


        """
        this = _StepAP214.new_StepAP214_AutoDesignDateAndPersonItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP214_AutoDesignDateAndPersonItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a AutoDesignDateAndPersonItem Kind Entity that is :
        1     AutoDesignOrganizationAssignment from StepAP214,
        2     Product from StepBasic,
        3     ProductDefinition from StepBasic,
        4     ProductDefinitionFormation from StepBasic,
        5     Representation from StepRepr,
        6     AutoDesignDocumentReference from StepAP214,
        7     ExternallyDefinedRepresentation from StepRepr,
        8     ProductDefinitionRelationship from StepBasic,
        9     ProductDefinitionWithAssociatedDocuments from StepBasic
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AutoDesignDateAndPersonItem_CaseNum(self, *args)


    def AutoDesignOrganizationAssignment(self, *args):
        """
        AutoDesignOrganizationAssignment(StepAP214_AutoDesignDateAndPersonItem self) -> Handle_StepAP214_AutoDesignOrganizationAssignment

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment

        """
        return _StepAP214.StepAP214_AutoDesignDateAndPersonItem_AutoDesignOrganizationAssignment(self, *args)


    def Product(self, *args):
        """
        Product(StepAP214_AutoDesignDateAndPersonItem self) -> Handle_StepBasic_Product

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Product

        """
        return _StepAP214.StepAP214_AutoDesignDateAndPersonItem_Product(self, *args)


    def ProductDefinition(self, *args):
        """
        ProductDefinition(StepAP214_AutoDesignDateAndPersonItem self) -> Handle_StepBasic_ProductDefinition

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepAP214.StepAP214_AutoDesignDateAndPersonItem_ProductDefinition(self, *args)


    def ProductDefinitionFormation(self, *args):
        """
        ProductDefinitionFormation(StepAP214_AutoDesignDateAndPersonItem self) -> Handle_StepBasic_ProductDefinitionFormation

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionFormation

        """
        return _StepAP214.StepAP214_AutoDesignDateAndPersonItem_ProductDefinitionFormation(self, *args)


    def Representation(self, *args):
        """
        Representation(StepAP214_AutoDesignDateAndPersonItem self) -> Handle_StepRepr_Representation

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepAP214.StepAP214_AutoDesignDateAndPersonItem_Representation(self, *args)


    def AutoDesignDocumentReference(self, *args):
        """
        AutoDesignDocumentReference(StepAP214_AutoDesignDateAndPersonItem self) -> Handle_StepAP214_AutoDesignDocumentReference

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignDocumentReference

        """
        return _StepAP214.StepAP214_AutoDesignDateAndPersonItem_AutoDesignDocumentReference(self, *args)


    def ExternallyDefinedRepresentation(self, *args):
        """
        ExternallyDefinedRepresentation(StepAP214_AutoDesignDateAndPersonItem self) -> Handle_StepRepr_ExternallyDefinedRepresentation

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation

        """
        return _StepAP214.StepAP214_AutoDesignDateAndPersonItem_ExternallyDefinedRepresentation(self, *args)


    def ProductDefinitionRelationship(self, *args):
        """
        ProductDefinitionRelationship(StepAP214_AutoDesignDateAndPersonItem self) -> Handle_StepBasic_ProductDefinitionRelationship

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionRelationship

        """
        return _StepAP214.StepAP214_AutoDesignDateAndPersonItem_ProductDefinitionRelationship(self, *args)


    def ProductDefinitionWithAssociatedDocuments(self, *args):
        """
        ProductDefinitionWithAssociatedDocuments(StepAP214_AutoDesignDateAndPersonItem self) -> Handle_StepBasic_ProductDefinitionWithAssociatedDocuments

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionWithAssociatedDocuments

        """
        return _StepAP214.StepAP214_AutoDesignDateAndPersonItem_ProductDefinitionWithAssociatedDocuments(self, *args)

    __swig_destroy__ = _StepAP214.delete_StepAP214_AutoDesignDateAndPersonItem
StepAP214_AutoDesignDateAndPersonItem_swigregister = _StepAP214.StepAP214_AutoDesignDateAndPersonItem_swigregister
StepAP214_AutoDesignDateAndPersonItem_swigregister(StepAP214_AutoDesignDateAndPersonItem)

class StepAP214_HArray1OfAutoDesignReferencingItem(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_HArray1OfAutoDesignReferencingItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_HArray1OfAutoDesignReferencingItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_HArray1OfAutoDesignReferencingItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP214_HArray1OfAutoDesignReferencingItem
        __init__(StepAP214_HArray1OfAutoDesignReferencingItem self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP214_AutoDesignReferencingItem theValue) -> StepAP214_HArray1OfAutoDesignReferencingItem
        __init__(StepAP214_HArray1OfAutoDesignReferencingItem self, NCollection_Array1_StepAP214_AutoDesignReferencingItem theOther) -> StepAP214_HArray1OfAutoDesignReferencingItem

        :type theOther: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignReferencingItem

        """
        this = _StepAP214.new_StepAP214_HArray1OfAutoDesignReferencingItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignReferencingItem

        """
        res = _StepAP214.StepAP214_HArray1OfAutoDesignReferencingItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP214_HArray1OfAutoDesignReferencingItem self) -> NCollection_Array1_StepAP214_AutoDesignReferencingItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignReferencingItem

        """
        return _StepAP214.StepAP214_HArray1OfAutoDesignReferencingItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_HArray1OfAutoDesignReferencingItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_HArray1OfAutoDesignReferencingItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_HArray1OfAutoDesignReferencingItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_HArray1OfAutoDesignReferencingItem
StepAP214_HArray1OfAutoDesignReferencingItem_swigregister = _StepAP214.StepAP214_HArray1OfAutoDesignReferencingItem_swigregister
StepAP214_HArray1OfAutoDesignReferencingItem_swigregister(StepAP214_HArray1OfAutoDesignReferencingItem)

def StepAP214_HArray1OfAutoDesignReferencingItem_get_type_name(*args):
    """
    StepAP214_HArray1OfAutoDesignReferencingItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_HArray1OfAutoDesignReferencingItem_get_type_name(*args)

def StepAP214_HArray1OfAutoDesignReferencingItem_get_type_descriptor(*args):
    """
    StepAP214_HArray1OfAutoDesignReferencingItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_HArray1OfAutoDesignReferencingItem_get_type_descriptor(*args)

class StepAP214_HArray1OfAutoDesignGroupedItem(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_HArray1OfAutoDesignGroupedItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_HArray1OfAutoDesignGroupedItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_HArray1OfAutoDesignGroupedItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP214_HArray1OfAutoDesignGroupedItem
        __init__(StepAP214_HArray1OfAutoDesignGroupedItem self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP214_AutoDesignGroupedItem theValue) -> StepAP214_HArray1OfAutoDesignGroupedItem
        __init__(StepAP214_HArray1OfAutoDesignGroupedItem self, NCollection_Array1_StepAP214_AutoDesignGroupedItem theOther) -> StepAP214_HArray1OfAutoDesignGroupedItem

        :type theOther: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignGroupedItem

        """
        this = _StepAP214.new_StepAP214_HArray1OfAutoDesignGroupedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignGroupedItem

        """
        res = _StepAP214.StepAP214_HArray1OfAutoDesignGroupedItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP214_HArray1OfAutoDesignGroupedItem self) -> NCollection_Array1_StepAP214_AutoDesignGroupedItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignGroupedItem

        """
        return _StepAP214.StepAP214_HArray1OfAutoDesignGroupedItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_HArray1OfAutoDesignGroupedItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_HArray1OfAutoDesignGroupedItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_HArray1OfAutoDesignGroupedItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_HArray1OfAutoDesignGroupedItem
StepAP214_HArray1OfAutoDesignGroupedItem_swigregister = _StepAP214.StepAP214_HArray1OfAutoDesignGroupedItem_swigregister
StepAP214_HArray1OfAutoDesignGroupedItem_swigregister(StepAP214_HArray1OfAutoDesignGroupedItem)

def StepAP214_HArray1OfAutoDesignGroupedItem_get_type_name(*args):
    """
    StepAP214_HArray1OfAutoDesignGroupedItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_HArray1OfAutoDesignGroupedItem_get_type_name(*args)

def StepAP214_HArray1OfAutoDesignGroupedItem_get_type_descriptor(*args):
    """
    StepAP214_HArray1OfAutoDesignGroupedItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_HArray1OfAutoDesignGroupedItem_get_type_descriptor(*args)

class StepAP214_Class(StepBasic.StepBasic_Group):
    """Representation of STEP entity Class"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_Class
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_Class(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_Class self) -> StepAP214_Class

        Empty constructor


        """
        this = _StepAP214.new_StepAP214_Class(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_Class_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_Class_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_Class_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_Class
StepAP214_Class_swigregister = _StepAP214.StepAP214_Class_swigregister
StepAP214_Class_swigregister(StepAP214_Class)

def StepAP214_Class_get_type_name(*args):
    """
    StepAP214_Class_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_Class_get_type_name(*args)

def StepAP214_Class_get_type_descriptor(*args):
    """
    StepAP214_Class_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_Class_get_type_descriptor(*args)

class StepAP214_GroupItem(StepData.StepData_SelectType):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP214_GroupItem self) -> StepAP214_GroupItem

        Returns a GroupItem SelectType


        """
        this = _StepAP214.new_StepAP214_GroupItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP214_GroupItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a GroupItem Kind Entity that is :
        1 ->  GeometricRepresentationItem
        2 ->  GroupRelationship
        3 ->  MappedItem
        4 ->  ProductDefinition
        5 ->  ProductDefinitionFormation
        6 ->  PropertyDefinitionRepresentation
        7 ->  Representation
        8 ->  RepresentationItem
        9 ->  RepresentationRelationshipWithTransformation
        10 -> ShapeAspect
        11 -> ShapeAspectRelationship
        12 -> ShapeRepresentationRelationship
        13 -> StyledItem
        14 -> TopologicalRepresentationItem
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_GroupItem_CaseNum(self, *args)


    def GeometricRepresentationItem(self, *args):
        """
        GeometricRepresentationItem(StepAP214_GroupItem self) -> Handle_StepGeom_GeometricRepresentationItem

        returns Value as a  GeometricRepresentationItem (Null if another type)

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_GeometricRepresentationItem

        """
        return _StepAP214.StepAP214_GroupItem_GeometricRepresentationItem(self, *args)


    def GroupRelationship(self, *args):
        """
        GroupRelationship(StepAP214_GroupItem self) -> Handle_StepBasic_GroupRelationship

        returns Value as a  GroupRelationship (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_GroupRelationship

        """
        return _StepAP214.StepAP214_GroupItem_GroupRelationship(self, *args)


    def MappedItem(self, *args):
        """
        MappedItem(StepAP214_GroupItem self) -> Handle_StepRepr_MappedItem

        returns Value as a  MappedItem (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_MappedItem

        """
        return _StepAP214.StepAP214_GroupItem_MappedItem(self, *args)


    def ProductDefinition(self, *args):
        """
        ProductDefinition(StepAP214_GroupItem self) -> Handle_StepBasic_ProductDefinition

        returns Value as a  ProductDefinition (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepAP214.StepAP214_GroupItem_ProductDefinition(self, *args)


    def ProductDefinitionFormation(self, *args):
        """
        ProductDefinitionFormation(StepAP214_GroupItem self) -> Handle_StepBasic_ProductDefinitionFormation

        returns Value as a  ProductDefinitionFormation (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionFormation

        """
        return _StepAP214.StepAP214_GroupItem_ProductDefinitionFormation(self, *args)


    def PropertyDefinitionRepresentation(self, *args):
        """
        PropertyDefinitionRepresentation(StepAP214_GroupItem self) -> Handle_StepRepr_PropertyDefinitionRepresentation

        returns Value as a  PropertyDefinitionRepresentation (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation

        """
        return _StepAP214.StepAP214_GroupItem_PropertyDefinitionRepresentation(self, *args)


    def Representation(self, *args):
        """
        Representation(StepAP214_GroupItem self) -> Handle_StepRepr_Representation

        returns Value as a  Representation (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepAP214.StepAP214_GroupItem_Representation(self, *args)


    def RepresentationItem(self, *args):
        """
        RepresentationItem(StepAP214_GroupItem self) -> Handle_StepRepr_RepresentationItem

        returns Value as a  RepresentationItem (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepAP214.StepAP214_GroupItem_RepresentationItem(self, *args)


    def RepresentationRelationshipWithTransformation(self, *args):
        """
        RepresentationRelationshipWithTransformation(StepAP214_GroupItem self) -> Handle_StepRepr_RepresentationRelationshipWithTransformation

        returns Value as a  RepresentationRelationshipWithTransformation (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationRelationshipWithTransformation

        """
        return _StepAP214.StepAP214_GroupItem_RepresentationRelationshipWithTransformation(self, *args)


    def ShapeAspect(self, *args):
        """
        ShapeAspect(StepAP214_GroupItem self) -> Handle_StepRepr_ShapeAspect

        returns Value as a  ShapeAspect (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepRepr_ShapeAspect

        """
        return _StepAP214.StepAP214_GroupItem_ShapeAspect(self, *args)


    def ShapeAspectRelationship(self, *args):
        """
        ShapeAspectRelationship(StepAP214_GroupItem self) -> Handle_StepRepr_ShapeAspectRelationship

        returns Value as a  ShapeAspectRelationship (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspectRelationship

        """
        return _StepAP214.StepAP214_GroupItem_ShapeAspectRelationship(self, *args)


    def ShapeRepresentationRelationship(self, *args):
        """
        ShapeRepresentationRelationship(StepAP214_GroupItem self) -> Handle_StepRepr_ShapeRepresentationRelationship

        returns Value as a  ShapeRepresentationRelationship (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepRepr_ShapeRepresentationRelationship

        """
        return _StepAP214.StepAP214_GroupItem_ShapeRepresentationRelationship(self, *args)


    def StyledItem(self, *args):
        """
        StyledItem(StepAP214_GroupItem self) -> Handle_StepVisual_StyledItem

        returns Value as a  StyledItem (Null if another type)

        :rtype: OCC.wrapper.StepVisual.Handle_StepVisual_StyledItem

        """
        return _StepAP214.StepAP214_GroupItem_StyledItem(self, *args)


    def TopologicalRepresentationItem(self, *args):
        """
        TopologicalRepresentationItem(StepAP214_GroupItem self) -> Handle_StepShape_TopologicalRepresentationItem

        returns Value as a  TopologicalRepresentationItem (Null if another type)

        :rtype: OCC.wrapper.StepShape.Handle_StepShape_TopologicalRepresentationItem

        """
        return _StepAP214.StepAP214_GroupItem_TopologicalRepresentationItem(self, *args)

    __swig_destroy__ = _StepAP214.delete_StepAP214_GroupItem
StepAP214_GroupItem_swigregister = _StepAP214.StepAP214_GroupItem_swigregister
StepAP214_GroupItem_swigregister(StepAP214_GroupItem)

class StepAP214_ApprovalItem(StepData.StepData_SelectType):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP214_ApprovalItem self) -> StepAP214_ApprovalItem

        Returns a ApprovalItem SelectType


        """
        this = _StepAP214.new_StepAP214_ApprovalItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP214_ApprovalItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a ApprovalItem Kind Entity that is :
        1 -> AssemblyComponentUsageSubstitute
        2 -> DocumentFile
        3 -> MaterialDesignation
        4 -> MechanicalDesignGeometricPresentationRepresentation
        5 -> PresentationArea
        6 -> Product
        7 -> ProductDefinition
        8 -> ProductDefinitionFormation
        9 -> ProductDefinitionRelationship
        10 -> PropertyDefinition
        11 -> ShapeRepresentation
        12 -> SecurityClassification
        13 -> ConfigurationItem
        14 -> Date
        15 -> Document
        16 -> Effectivity
        17 -> Group
        18 -> GroupRelationship
        19 -> ProductDefinitionFormationRelationship
        20 -> Representation
        21 -> ShapeAspectRelationship
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_ApprovalItem_CaseNum(self, *args)


    def AssemblyComponentUsageSubstitute(self, *args):
        """
        AssemblyComponentUsageSubstitute(StepAP214_ApprovalItem self) -> Handle_StepRepr_AssemblyComponentUsageSubstitute

        returns Value as a AssemblyComponentUsageSubstitute (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsageSubstitute

        """
        return _StepAP214.StepAP214_ApprovalItem_AssemblyComponentUsageSubstitute(self, *args)


    def DocumentFile(self, *args):
        """
        DocumentFile(StepAP214_ApprovalItem self) -> Handle_StepBasic_DocumentFile

        returns Value as a DocumentFile (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentFile

        """
        return _StepAP214.StepAP214_ApprovalItem_DocumentFile(self, *args)


    def MaterialDesignation(self, *args):
        """
        MaterialDesignation(StepAP214_ApprovalItem self) -> Handle_StepRepr_MaterialDesignation

        returns Value as a MaterialDesignation (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_MaterialDesignation

        """
        return _StepAP214.StepAP214_ApprovalItem_MaterialDesignation(self, *args)


    def MechanicalDesignGeometricPresentationRepresentation(self, *args):
        """
        MechanicalDesignGeometricPresentationRepresentation(StepAP214_ApprovalItem self) -> Handle_StepVisual_MechanicalDesignGeometricPresentationRepresentation

        returns Value as a MechanicalDesignGeometricPresentationRepresentation (Null if another type)

        :rtype: OCC.wrapper.StepVisual.Handle_StepVisual_MechanicalDesignGeometricPresentationRepresentation

        """
        return _StepAP214.StepAP214_ApprovalItem_MechanicalDesignGeometricPresentationRepresentation(self, *args)


    def PresentationArea(self, *args):
        """
        PresentationArea(StepAP214_ApprovalItem self) -> Handle_StepVisual_PresentationArea

        returns Value as a PresentationArea (Null if another type)

        :rtype: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationArea

        """
        return _StepAP214.StepAP214_ApprovalItem_PresentationArea(self, *args)


    def Product(self, *args):
        """
        Product(StepAP214_ApprovalItem self) -> Handle_StepBasic_Product

        returns Value as a Product (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Product

        """
        return _StepAP214.StepAP214_ApprovalItem_Product(self, *args)


    def ProductDefinition(self, *args):
        """
        ProductDefinition(StepAP214_ApprovalItem self) -> Handle_StepBasic_ProductDefinition

        returns Value as a ProductDefinition (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepAP214.StepAP214_ApprovalItem_ProductDefinition(self, *args)


    def ProductDefinitionFormation(self, *args):
        """
        ProductDefinitionFormation(StepAP214_ApprovalItem self) -> Handle_StepBasic_ProductDefinitionFormation

        returns Value as a ProductDefinitionFormation (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionFormation

        """
        return _StepAP214.StepAP214_ApprovalItem_ProductDefinitionFormation(self, *args)


    def ProductDefinitionRelationship(self, *args):
        """
        ProductDefinitionRelationship(StepAP214_ApprovalItem self) -> Handle_StepBasic_ProductDefinitionRelationship

        returns Value as aProductDefinitionRelationship (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionRelationship

        """
        return _StepAP214.StepAP214_ApprovalItem_ProductDefinitionRelationship(self, *args)


    def PropertyDefinition(self, *args):
        """
        PropertyDefinition(StepAP214_ApprovalItem self) -> Handle_StepRepr_PropertyDefinition

        returns Value as a PropertyDefinition (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinition

        """
        return _StepAP214.StepAP214_ApprovalItem_PropertyDefinition(self, *args)


    def ShapeRepresentation(self, *args):
        """
        ShapeRepresentation(StepAP214_ApprovalItem self) -> Handle_StepShape_ShapeRepresentation

        returns Value as a ShapeRepresentation  (Null if another type)

        :rtype: OCC.wrapper.StepShape.Handle_StepShape_ShapeRepresentation

        """
        return _StepAP214.StepAP214_ApprovalItem_ShapeRepresentation(self, *args)


    def SecurityClassification(self, *args):
        """
        SecurityClassification(StepAP214_ApprovalItem self) -> Handle_StepBasic_SecurityClassification

        returns Value as a SecurityClassification (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_SecurityClassification

        """
        return _StepAP214.StepAP214_ApprovalItem_SecurityClassification(self, *args)


    def ConfigurationItem(self, *args):
        """
        ConfigurationItem(StepAP214_ApprovalItem self) -> Handle_StepRepr_ConfigurationItem

        returns Value as a ConfigurationItem (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationItem

        """
        return _StepAP214.StepAP214_ApprovalItem_ConfigurationItem(self, *args)


    def Date(self, *args):
        """
        Date(StepAP214_ApprovalItem self) -> Handle_StepBasic_Date

        returns Value as a Date (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Date

        """
        return _StepAP214.StepAP214_ApprovalItem_Date(self, *args)


    def Document(self, *args):
        """
        Document(StepAP214_ApprovalItem self) -> Handle_StepBasic_Document

        returns Value as a Document (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Document

        """
        return _StepAP214.StepAP214_ApprovalItem_Document(self, *args)


    def Effectivity(self, *args):
        """
        Effectivity(StepAP214_ApprovalItem self) -> Handle_StepBasic_Effectivity

        returns Value as a Effectivity (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Effectivity

        """
        return _StepAP214.StepAP214_ApprovalItem_Effectivity(self, *args)


    def Group(self, *args):
        """
        Group(StepAP214_ApprovalItem self) -> Handle_StepBasic_Group

        returns Value as a Group (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Group

        """
        return _StepAP214.StepAP214_ApprovalItem_Group(self, *args)


    def GroupRelationship(self, *args):
        """
        GroupRelationship(StepAP214_ApprovalItem self) -> Handle_StepBasic_GroupRelationship

        returns Value as a GroupRelationship (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_GroupRelationship

        """
        return _StepAP214.StepAP214_ApprovalItem_GroupRelationship(self, *args)


    def ProductDefinitionFormationRelationship(self, *args):
        """
        ProductDefinitionFormationRelationship(StepAP214_ApprovalItem self) -> Handle_StepBasic_ProductDefinitionFormationRelationship

        returns Value as a ProductDefinitionFormationRelationship (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionFormationRelationship

        """
        return _StepAP214.StepAP214_ApprovalItem_ProductDefinitionFormationRelationship(self, *args)


    def Representation(self, *args):
        """
        Representation(StepAP214_ApprovalItem self) -> Handle_StepRepr_Representation

        returns Value as a Representation (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepAP214.StepAP214_ApprovalItem_Representation(self, *args)


    def ShapeAspectRelationship(self, *args):
        """
        ShapeAspectRelationship(StepAP214_ApprovalItem self) -> Handle_StepRepr_ShapeAspectRelationship

        returns Value as a ShapeAspectRelationship (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspectRelationship

        """
        return _StepAP214.StepAP214_ApprovalItem_ShapeAspectRelationship(self, *args)

    __swig_destroy__ = _StepAP214.delete_StepAP214_ApprovalItem
StepAP214_ApprovalItem_swigregister = _StepAP214.StepAP214_ApprovalItem_swigregister
StepAP214_ApprovalItem_swigregister(StepAP214_ApprovalItem)

class StepAP214_ExternallyDefinedGeneralProperty(StepBasic.StepBasic_GeneralProperty):
    """Representation of STEP entity ExternallyDefinedGeneralProperty"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_ExternallyDefinedGeneralProperty
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_ExternallyDefinedGeneralProperty(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_ExternallyDefinedGeneralProperty self) -> StepAP214_ExternallyDefinedGeneralProperty

        Empty constructor


        """
        this = _StepAP214.new_StepAP214_ExternallyDefinedGeneralProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP214_ExternallyDefinedGeneralProperty self, Handle_TCollection_HAsciiString aGeneralProperty_Id, Handle_TCollection_HAsciiString aGeneralProperty_Name, Standard_Boolean const hasGeneralProperty_Description, Handle_TCollection_HAsciiString aGeneralProperty_Description, StepBasic_SourceItem aExternallyDefinedItem_ItemId, Handle_StepBasic_ExternalSource aExternallyDefinedItem_Source)

        Initialize all fields (own and inherited)

        :type aGeneralProperty_Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aGeneralProperty_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasGeneralProperty_Description: bool
        :type aGeneralProperty_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aExternallyDefinedItem_ItemId: OCC.wrapper.StepBasic.StepBasic_SourceItem
        :type aExternallyDefinedItem_Source: OCC.wrapper.StepBasic.Handle_StepBasic_ExternalSource

        """
        return _StepAP214.StepAP214_ExternallyDefinedGeneralProperty_Init(self, *args)


    def ExternallyDefinedItem(self, *args):
        """
        ExternallyDefinedItem(StepAP214_ExternallyDefinedGeneralProperty self) -> Handle_StepBasic_ExternallyDefinedItem

        Returns data for supertype ExternallyDefinedItem

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ExternallyDefinedItem

        """
        return _StepAP214.StepAP214_ExternallyDefinedGeneralProperty_ExternallyDefinedItem(self, *args)


    def SetExternallyDefinedItem(self, *args):
        """
        SetExternallyDefinedItem(StepAP214_ExternallyDefinedGeneralProperty self, Handle_StepBasic_ExternallyDefinedItem ExternallyDefinedItem)

        Set data for supertype ExternallyDefinedItem

        :type ExternallyDefinedItem: OCC.wrapper.StepBasic.Handle_StepBasic_ExternallyDefinedItem

        """
        return _StepAP214.StepAP214_ExternallyDefinedGeneralProperty_SetExternallyDefinedItem(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_ExternallyDefinedGeneralProperty_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_ExternallyDefinedGeneralProperty_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_ExternallyDefinedGeneralProperty_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_ExternallyDefinedGeneralProperty
StepAP214_ExternallyDefinedGeneralProperty_swigregister = _StepAP214.StepAP214_ExternallyDefinedGeneralProperty_swigregister
StepAP214_ExternallyDefinedGeneralProperty_swigregister(StepAP214_ExternallyDefinedGeneralProperty)

def StepAP214_ExternallyDefinedGeneralProperty_get_type_name(*args):
    """
    StepAP214_ExternallyDefinedGeneralProperty_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_ExternallyDefinedGeneralProperty_get_type_name(*args)

def StepAP214_ExternallyDefinedGeneralProperty_get_type_descriptor(*args):
    """
    StepAP214_ExternallyDefinedGeneralProperty_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_ExternallyDefinedGeneralProperty_get_type_descriptor(*args)

class StepAP214_HArray1OfAutoDesignPresentedItemSelect(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_HArray1OfAutoDesignPresentedItemSelect self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP214_HArray1OfAutoDesignPresentedItemSelect
        __init__(StepAP214_HArray1OfAutoDesignPresentedItemSelect self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP214_AutoDesignPresentedItemSelect theValue) -> StepAP214_HArray1OfAutoDesignPresentedItemSelect
        __init__(StepAP214_HArray1OfAutoDesignPresentedItemSelect self, NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect theOther) -> StepAP214_HArray1OfAutoDesignPresentedItemSelect

        :type theOther: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignPresentedItemSelect

        """
        this = _StepAP214.new_StepAP214_HArray1OfAutoDesignPresentedItemSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignPresentedItemSelect

        """
        res = _StepAP214.StepAP214_HArray1OfAutoDesignPresentedItemSelect_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP214_HArray1OfAutoDesignPresentedItemSelect self) -> NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignPresentedItemSelect

        """
        return _StepAP214.StepAP214_HArray1OfAutoDesignPresentedItemSelect_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_HArray1OfAutoDesignPresentedItemSelect_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_HArray1OfAutoDesignPresentedItemSelect_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_HArray1OfAutoDesignPresentedItemSelect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_HArray1OfAutoDesignPresentedItemSelect
StepAP214_HArray1OfAutoDesignPresentedItemSelect_swigregister = _StepAP214.StepAP214_HArray1OfAutoDesignPresentedItemSelect_swigregister
StepAP214_HArray1OfAutoDesignPresentedItemSelect_swigregister(StepAP214_HArray1OfAutoDesignPresentedItemSelect)

def StepAP214_HArray1OfAutoDesignPresentedItemSelect_get_type_name(*args):
    """
    StepAP214_HArray1OfAutoDesignPresentedItemSelect_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_HArray1OfAutoDesignPresentedItemSelect_get_type_name(*args)

def StepAP214_HArray1OfAutoDesignPresentedItemSelect_get_type_descriptor(*args):
    """
    StepAP214_HArray1OfAutoDesignPresentedItemSelect_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_HArray1OfAutoDesignPresentedItemSelect_get_type_descriptor(*args)

class StepAP214_AppliedDateAndTimeAssignment(StepBasic.StepBasic_DateAndTimeAssignment):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_AppliedDateAndTimeAssignment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_AppliedDateAndTimeAssignment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_AppliedDateAndTimeAssignment self) -> StepAP214_AppliedDateAndTimeAssignment

        Returns a AppliedDateAndTimeAssignment


        """
        this = _StepAP214.new_StepAP214_AppliedDateAndTimeAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP214_AppliedDateAndTimeAssignment self, Handle_StepBasic_DateAndTime aAssignedDateAndTime, Handle_StepBasic_DateTimeRole aRole, Handle_StepAP214_HArray1OfDateAndTimeItem aItems)

        :type aAssignedDateAndTime: OCC.wrapper.StepBasic.Handle_StepBasic_DateAndTime
        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_DateTimeRole
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem

        """
        return _StepAP214.StepAP214_AppliedDateAndTimeAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP214_AppliedDateAndTimeAssignment self, Handle_StepAP214_HArray1OfDateAndTimeItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem

        """
        return _StepAP214.StepAP214_AppliedDateAndTimeAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(StepAP214_AppliedDateAndTimeAssignment self) -> Handle_StepAP214_HArray1OfDateAndTimeItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem

        """
        return _StepAP214.StepAP214_AppliedDateAndTimeAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(StepAP214_AppliedDateAndTimeAssignment self, Standard_Integer const num) -> StepAP214_DateAndTimeItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_DateAndTimeItem

        """
        return _StepAP214.StepAP214_AppliedDateAndTimeAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(StepAP214_AppliedDateAndTimeAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AppliedDateAndTimeAssignment_NbItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_AppliedDateAndTimeAssignment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_AppliedDateAndTimeAssignment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_AppliedDateAndTimeAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_AppliedDateAndTimeAssignment
StepAP214_AppliedDateAndTimeAssignment_swigregister = _StepAP214.StepAP214_AppliedDateAndTimeAssignment_swigregister
StepAP214_AppliedDateAndTimeAssignment_swigregister(StepAP214_AppliedDateAndTimeAssignment)

def StepAP214_AppliedDateAndTimeAssignment_get_type_name(*args):
    """
    StepAP214_AppliedDateAndTimeAssignment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_AppliedDateAndTimeAssignment_get_type_name(*args)

def StepAP214_AppliedDateAndTimeAssignment_get_type_descriptor(*args):
    """
    StepAP214_AppliedDateAndTimeAssignment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_AppliedDateAndTimeAssignment_get_type_descriptor(*args)

class StepAP214_PersonAndOrganizationItem(StepAP214_ApprovalItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP214_PersonAndOrganizationItem self) -> StepAP214_PersonAndOrganizationItem

        Returns a PersonAndOrganizationItem SelectType


        """
        this = _StepAP214.new_StepAP214_PersonAndOrganizationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP214_PersonAndOrganizationItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a APersonAndOrganizationItem Kind Entity that is :
        1 -> AppliedOrganizationAssignment
        2 -> AssemblyComponentUsageSubstitute
        3 -> DocumentFile
        4 -> MaterialDesignation
        5 -> MechanicalDesignGeometricPresentationRepresentation
        6 -> PresentationArea
        7 -> Product
        8 -> ProductDefinition
        9 -> ProductDefinitionFormation
        10 -> ProductDefinitionRelationship
        11 -> PropertyDefinition
        12 -> ShapeRepresentation
        13 -> SecurityClassification
        14 -> AppliedSecurityClassificationAssignment
        15 -> Approval
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_PersonAndOrganizationItem_CaseNum(self, *args)


    def AppliedOrganizationAssignment(self, *args):
        """
        AppliedOrganizationAssignment(StepAP214_PersonAndOrganizationItem self) -> Handle_StepAP214_AppliedOrganizationAssignment

        returns Value as a AppliedOrganizationAssignment (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedOrganizationAssignment

        """
        return _StepAP214.StepAP214_PersonAndOrganizationItem_AppliedOrganizationAssignment(self, *args)


    def AppliedSecurityClassificationAssignment(self, *args):
        """
        AppliedSecurityClassificationAssignment(StepAP214_PersonAndOrganizationItem self) -> Handle_StepAP214_AppliedSecurityClassificationAssignment

        returns Value as a AppliedSecurityClassificationAssignment (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment

        """
        return _StepAP214.StepAP214_PersonAndOrganizationItem_AppliedSecurityClassificationAssignment(self, *args)


    def Approval(self, *args):
        """
        Approval(StepAP214_PersonAndOrganizationItem self) -> Handle_StepBasic_Approval

        returns Value as a Approval (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Approval

        """
        return _StepAP214.StepAP214_PersonAndOrganizationItem_Approval(self, *args)

    __swig_destroy__ = _StepAP214.delete_StepAP214_PersonAndOrganizationItem
StepAP214_PersonAndOrganizationItem_swigregister = _StepAP214.StepAP214_PersonAndOrganizationItem_swigregister
StepAP214_PersonAndOrganizationItem_swigregister(StepAP214_PersonAndOrganizationItem)

class StepAP214_AutoDesignDateAndTimeItem(StepData.StepData_SelectType):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP214_AutoDesignDateAndTimeItem self) -> StepAP214_AutoDesignDateAndTimeItem

        Returns a AutoDesignDateAndTimeItem SelectType


        """
        this = _StepAP214.new_StepAP214_AutoDesignDateAndTimeItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP214_AutoDesignDateAndTimeItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a AutoDesignDateAndTimeItem Kind Entity that is :
        1 -> ApprovalPersonOrganization
        2 -> AutoDesignDateAndPersonAssignment
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AutoDesignDateAndTimeItem_CaseNum(self, *args)


    def ApprovalPersonOrganization(self, *args):
        """
        ApprovalPersonOrganization(StepAP214_AutoDesignDateAndTimeItem self) -> Handle_StepBasic_ApprovalPersonOrganization

        returns Value as a ApprovalPersonOrganization (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ApprovalPersonOrganization

        """
        return _StepAP214.StepAP214_AutoDesignDateAndTimeItem_ApprovalPersonOrganization(self, *args)


    def AutoDesignDateAndPersonAssignment(self, *args):
        """
        AutoDesignDateAndPersonAssignment(StepAP214_AutoDesignDateAndTimeItem self) -> Handle_StepAP214_AutoDesignDateAndPersonAssignment

        returns Value as a AutoDesignDateAndPersonAssignment (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment

        """
        return _StepAP214.StepAP214_AutoDesignDateAndTimeItem_AutoDesignDateAndPersonAssignment(self, *args)


    def ProductDefinitionEffectivity(self, *args):
        """
        ProductDefinitionEffectivity(StepAP214_AutoDesignDateAndTimeItem self) -> Handle_StepBasic_ProductDefinitionEffectivity

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionEffectivity

        """
        return _StepAP214.StepAP214_AutoDesignDateAndTimeItem_ProductDefinitionEffectivity(self, *args)

    __swig_destroy__ = _StepAP214.delete_StepAP214_AutoDesignDateAndTimeItem
StepAP214_AutoDesignDateAndTimeItem_swigregister = _StepAP214.StepAP214_AutoDesignDateAndTimeItem_swigregister
StepAP214_AutoDesignDateAndTimeItem_swigregister(StepAP214_AutoDesignDateAndTimeItem)

class StepAP214_AppliedOrganizationAssignment(StepBasic.StepBasic_OrganizationAssignment):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_AppliedOrganizationAssignment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_AppliedOrganizationAssignment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_AppliedOrganizationAssignment self) -> StepAP214_AppliedOrganizationAssignment

        Returns a AppliedOrganizationAssignment


        """
        this = _StepAP214.new_StepAP214_AppliedOrganizationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP214_AppliedOrganizationAssignment self, Handle_StepBasic_Organization aAssignedOrganization, Handle_StepBasic_OrganizationRole aRole, Handle_StepAP214_HArray1OfOrganizationItem aItems)

        :type aAssignedOrganization: OCC.wrapper.StepBasic.Handle_StepBasic_Organization
        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_OrganizationRole
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfOrganizationItem

        """
        return _StepAP214.StepAP214_AppliedOrganizationAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP214_AppliedOrganizationAssignment self, Handle_StepAP214_HArray1OfOrganizationItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfOrganizationItem

        """
        return _StepAP214.StepAP214_AppliedOrganizationAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(StepAP214_AppliedOrganizationAssignment self) -> Handle_StepAP214_HArray1OfOrganizationItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfOrganizationItem

        """
        return _StepAP214.StepAP214_AppliedOrganizationAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(StepAP214_AppliedOrganizationAssignment self, Standard_Integer const num) -> StepAP214_OrganizationItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_OrganizationItem

        """
        return _StepAP214.StepAP214_AppliedOrganizationAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(StepAP214_AppliedOrganizationAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AppliedOrganizationAssignment_NbItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_AppliedOrganizationAssignment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_AppliedOrganizationAssignment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_AppliedOrganizationAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_AppliedOrganizationAssignment
StepAP214_AppliedOrganizationAssignment_swigregister = _StepAP214.StepAP214_AppliedOrganizationAssignment_swigregister
StepAP214_AppliedOrganizationAssignment_swigregister(StepAP214_AppliedOrganizationAssignment)

def StepAP214_AppliedOrganizationAssignment_get_type_name(*args):
    """
    StepAP214_AppliedOrganizationAssignment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_AppliedOrganizationAssignment_get_type_name(*args)

def StepAP214_AppliedOrganizationAssignment_get_type_descriptor(*args):
    """
    StepAP214_AppliedOrganizationAssignment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_AppliedOrganizationAssignment_get_type_descriptor(*args)

class StepAP214_AutoDesignReferencingItem(StepData.StepData_SelectType):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP214_AutoDesignReferencingItem self) -> StepAP214_AutoDesignReferencingItem

        Returns a AutoDesignReferencingItem SelectType


        """
        this = _StepAP214.new_StepAP214_AutoDesignReferencingItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP214_AutoDesignReferencingItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a AutoDesignReferencingItem Kind Entity that is :
        1     Approval from StepBasic,
        2     DocumentRelationship from StepBasic,
        3     ExternallyDefinedRepresentation from StepRepr,
        4     MappedItem from StepRepr,
        5     MaterialDesignation from StepRepr,
        6     PresentationArea from StepVisual,
        7     PresentationView from StepVisual,
        8     ProductCategory from StepBasic,
        9     ProductDefinition from StepBasic,
        10     ProductDefinitionRelationship from StepBasic,
        11     PropertyDefinition from StepBasic,
        12     Representation from StepRepr,
        13     RepresentationRelationship from StepRepr,
        14     ShapeAspect from StepRepr
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AutoDesignReferencingItem_CaseNum(self, *args)


    def Approval(self, *args):
        """
        Approval(StepAP214_AutoDesignReferencingItem self) -> Handle_StepBasic_Approval

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Approval

        """
        return _StepAP214.StepAP214_AutoDesignReferencingItem_Approval(self, *args)


    def DocumentRelationship(self, *args):
        """
        DocumentRelationship(StepAP214_AutoDesignReferencingItem self) -> Handle_StepBasic_DocumentRelationship

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentRelationship

        """
        return _StepAP214.StepAP214_AutoDesignReferencingItem_DocumentRelationship(self, *args)


    def ExternallyDefinedRepresentation(self, *args):
        """
        ExternallyDefinedRepresentation(StepAP214_AutoDesignReferencingItem self) -> Handle_StepRepr_ExternallyDefinedRepresentation

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ExternallyDefinedRepresentation

        """
        return _StepAP214.StepAP214_AutoDesignReferencingItem_ExternallyDefinedRepresentation(self, *args)


    def MappedItem(self, *args):
        """
        MappedItem(StepAP214_AutoDesignReferencingItem self) -> Handle_StepRepr_MappedItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_MappedItem

        """
        return _StepAP214.StepAP214_AutoDesignReferencingItem_MappedItem(self, *args)


    def MaterialDesignation(self, *args):
        """
        MaterialDesignation(StepAP214_AutoDesignReferencingItem self) -> Handle_StepRepr_MaterialDesignation

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_MaterialDesignation

        """
        return _StepAP214.StepAP214_AutoDesignReferencingItem_MaterialDesignation(self, *args)


    def PresentationArea(self, *args):
        """
        PresentationArea(StepAP214_AutoDesignReferencingItem self) -> Handle_StepVisual_PresentationArea

        :rtype: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationArea

        """
        return _StepAP214.StepAP214_AutoDesignReferencingItem_PresentationArea(self, *args)


    def PresentationView(self, *args):
        """
        PresentationView(StepAP214_AutoDesignReferencingItem self) -> Handle_StepVisual_PresentationView

        :rtype: OCC.wrapper.StepVisual.Handle_StepVisual_PresentationView

        """
        return _StepAP214.StepAP214_AutoDesignReferencingItem_PresentationView(self, *args)


    def ProductCategory(self, *args):
        """
        ProductCategory(StepAP214_AutoDesignReferencingItem self) -> Handle_StepBasic_ProductCategory

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductCategory

        """
        return _StepAP214.StepAP214_AutoDesignReferencingItem_ProductCategory(self, *args)


    def ProductDefinition(self, *args):
        """
        ProductDefinition(StepAP214_AutoDesignReferencingItem self) -> Handle_StepBasic_ProductDefinition

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepAP214.StepAP214_AutoDesignReferencingItem_ProductDefinition(self, *args)


    def ProductDefinitionRelationship(self, *args):
        """
        ProductDefinitionRelationship(StepAP214_AutoDesignReferencingItem self) -> Handle_StepBasic_ProductDefinitionRelationship

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionRelationship

        """
        return _StepAP214.StepAP214_AutoDesignReferencingItem_ProductDefinitionRelationship(self, *args)


    def PropertyDefinition(self, *args):
        """
        PropertyDefinition(StepAP214_AutoDesignReferencingItem self) -> Handle_StepRepr_PropertyDefinition

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinition

        """
        return _StepAP214.StepAP214_AutoDesignReferencingItem_PropertyDefinition(self, *args)


    def Representation(self, *args):
        """
        Representation(StepAP214_AutoDesignReferencingItem self) -> Handle_StepRepr_Representation

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepAP214.StepAP214_AutoDesignReferencingItem_Representation(self, *args)


    def RepresentationRelationship(self, *args):
        """
        RepresentationRelationship(StepAP214_AutoDesignReferencingItem self) -> Handle_StepRepr_RepresentationRelationship

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationRelationship

        """
        return _StepAP214.StepAP214_AutoDesignReferencingItem_RepresentationRelationship(self, *args)


    def ShapeAspect(self, *args):
        """
        ShapeAspect(StepAP214_AutoDesignReferencingItem self) -> Handle_StepRepr_ShapeAspect

        :rtype: OCC.wrapper.StepAP214.Handle_StepRepr_ShapeAspect

        """
        return _StepAP214.StepAP214_AutoDesignReferencingItem_ShapeAspect(self, *args)

    __swig_destroy__ = _StepAP214.delete_StepAP214_AutoDesignReferencingItem
StepAP214_AutoDesignReferencingItem_swigregister = _StepAP214.StepAP214_AutoDesignReferencingItem_swigregister
StepAP214_AutoDesignReferencingItem_swigregister(StepAP214_AutoDesignReferencingItem)

class StepAP214_AppliedPresentedItem(StepVisual.StepVisual_PresentedItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_AppliedPresentedItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_AppliedPresentedItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_AppliedPresentedItem self) -> StepAP214_AppliedPresentedItem

        Returns a AutoDesignPresentedItem


        """
        this = _StepAP214.new_StepAP214_AppliedPresentedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP214_AppliedPresentedItem self, Handle_StepAP214_HArray1OfPresentedItemSelect aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect

        """
        return _StepAP214.StepAP214_AppliedPresentedItem_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP214_AppliedPresentedItem self, Handle_StepAP214_HArray1OfPresentedItemSelect aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect

        """
        return _StepAP214.StepAP214_AppliedPresentedItem_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(StepAP214_AppliedPresentedItem self) -> Handle_StepAP214_HArray1OfPresentedItemSelect

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect

        """
        return _StepAP214.StepAP214_AppliedPresentedItem_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(StepAP214_AppliedPresentedItem self, Standard_Integer const num) -> StepAP214_PresentedItemSelect

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_PresentedItemSelect

        """
        return _StepAP214.StepAP214_AppliedPresentedItem_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(StepAP214_AppliedPresentedItem self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AppliedPresentedItem_NbItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_AppliedPresentedItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_AppliedPresentedItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_AppliedPresentedItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_AppliedPresentedItem
StepAP214_AppliedPresentedItem_swigregister = _StepAP214.StepAP214_AppliedPresentedItem_swigregister
StepAP214_AppliedPresentedItem_swigregister(StepAP214_AppliedPresentedItem)

def StepAP214_AppliedPresentedItem_get_type_name(*args):
    """
    StepAP214_AppliedPresentedItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_AppliedPresentedItem_get_type_name(*args)

def StepAP214_AppliedPresentedItem_get_type_descriptor(*args):
    """
    StepAP214_AppliedPresentedItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_AppliedPresentedItem_get_type_descriptor(*args)

class StepAP214_AutoDesignPresentedItem(StepVisual.StepVisual_PresentedItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_AutoDesignPresentedItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_AutoDesignPresentedItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_AutoDesignPresentedItem self) -> StepAP214_AutoDesignPresentedItem

        Returns a AutoDesignPresentedItem


        """
        this = _StepAP214.new_StepAP214_AutoDesignPresentedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP214_AutoDesignPresentedItem self, Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect

        """
        return _StepAP214.StepAP214_AutoDesignPresentedItem_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP214_AutoDesignPresentedItem self, Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect

        """
        return _StepAP214.StepAP214_AutoDesignPresentedItem_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(StepAP214_AutoDesignPresentedItem self) -> Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect

        """
        return _StepAP214.StepAP214_AutoDesignPresentedItem_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(StepAP214_AutoDesignPresentedItem self, Standard_Integer const num) -> StepAP214_AutoDesignPresentedItemSelect

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_AutoDesignPresentedItemSelect

        """
        return _StepAP214.StepAP214_AutoDesignPresentedItem_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(StepAP214_AutoDesignPresentedItem self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AutoDesignPresentedItem_NbItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_AutoDesignPresentedItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_AutoDesignPresentedItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_AutoDesignPresentedItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_AutoDesignPresentedItem
StepAP214_AutoDesignPresentedItem_swigregister = _StepAP214.StepAP214_AutoDesignPresentedItem_swigregister
StepAP214_AutoDesignPresentedItem_swigregister(StepAP214_AutoDesignPresentedItem)

def StepAP214_AutoDesignPresentedItem_get_type_name(*args):
    """
    StepAP214_AutoDesignPresentedItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_AutoDesignPresentedItem_get_type_name(*args)

def StepAP214_AutoDesignPresentedItem_get_type_descriptor(*args):
    """
    StepAP214_AutoDesignPresentedItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_AutoDesignPresentedItem_get_type_descriptor(*args)

class StepAP214_AutoDesignApprovalAssignment(StepBasic.StepBasic_ApprovalAssignment):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_AutoDesignApprovalAssignment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_AutoDesignApprovalAssignment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_AutoDesignApprovalAssignment self) -> StepAP214_AutoDesignApprovalAssignment

        Returns a AutoDesignApprovalAssignment


        """
        this = _StepAP214.new_StepAP214_AutoDesignApprovalAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP214_AutoDesignApprovalAssignment self, Handle_StepBasic_Approval aAssignedApproval, Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem aItems)

        :type aAssignedApproval: OCC.wrapper.StepBasic.Handle_StepBasic_Approval
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

        """
        return _StepAP214.StepAP214_AutoDesignApprovalAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP214_AutoDesignApprovalAssignment self, Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

        """
        return _StepAP214.StepAP214_AutoDesignApprovalAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(StepAP214_AutoDesignApprovalAssignment self) -> Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

        """
        return _StepAP214.StepAP214_AutoDesignApprovalAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(StepAP214_AutoDesignApprovalAssignment self, Standard_Integer const num) -> StepAP214_AutoDesignGeneralOrgItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_AutoDesignGeneralOrgItem

        """
        return _StepAP214.StepAP214_AutoDesignApprovalAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(StepAP214_AutoDesignApprovalAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AutoDesignApprovalAssignment_NbItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_AutoDesignApprovalAssignment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_AutoDesignApprovalAssignment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_AutoDesignApprovalAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_AutoDesignApprovalAssignment
StepAP214_AutoDesignApprovalAssignment_swigregister = _StepAP214.StepAP214_AutoDesignApprovalAssignment_swigregister
StepAP214_AutoDesignApprovalAssignment_swigregister(StepAP214_AutoDesignApprovalAssignment)

def StepAP214_AutoDesignApprovalAssignment_get_type_name(*args):
    """
    StepAP214_AutoDesignApprovalAssignment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_AutoDesignApprovalAssignment_get_type_name(*args)

def StepAP214_AutoDesignApprovalAssignment_get_type_descriptor(*args):
    """
    StepAP214_AutoDesignApprovalAssignment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_AutoDesignApprovalAssignment_get_type_descriptor(*args)

class StepAP214_DocumentReferenceItem(StepData.StepData_SelectType):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP214_DocumentReferenceItem self) -> StepAP214_DocumentReferenceItem

        Returns a DocumentReferenceItem SelectType


        """
        this = _StepAP214.new_StepAP214_DocumentReferenceItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP214_DocumentReferenceItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a DocumentReferenceItem Kind Entity that is :

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_DocumentReferenceItem_CaseNum(self, *args)


    def Approval(self, *args):
        """
        Approval(StepAP214_DocumentReferenceItem self) -> Handle_StepBasic_Approval

        returns Value as a Approval (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Approval

        """
        return _StepAP214.StepAP214_DocumentReferenceItem_Approval(self, *args)


    def DescriptiveRepresentationItem(self, *args):
        """
        DescriptiveRepresentationItem(StepAP214_DocumentReferenceItem self) -> Handle_StepRepr_DescriptiveRepresentationItem

        returns Value as a  (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepRepr_DescriptiveRepresentationItem

        """
        return _StepAP214.StepAP214_DocumentReferenceItem_DescriptiveRepresentationItem(self, *args)


    def MaterialDesignation(self, *args):
        """
        MaterialDesignation(StepAP214_DocumentReferenceItem self) -> Handle_StepRepr_MaterialDesignation

        returns Value as a MaterialDesignation (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_MaterialDesignation

        """
        return _StepAP214.StepAP214_DocumentReferenceItem_MaterialDesignation(self, *args)


    def ProductDefinition(self, *args):
        """
        ProductDefinition(StepAP214_DocumentReferenceItem self) -> Handle_StepBasic_ProductDefinition

        returns Value as a ProductDefinition (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepAP214.StepAP214_DocumentReferenceItem_ProductDefinition(self, *args)


    def ProductDefinitionRelationship(self, *args):
        """
        ProductDefinitionRelationship(StepAP214_DocumentReferenceItem self) -> Handle_StepBasic_ProductDefinitionRelationship

        returns Value as aProductDefinitionRelationship (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionRelationship

        """
        return _StepAP214.StepAP214_DocumentReferenceItem_ProductDefinitionRelationship(self, *args)


    def PropertyDefinition(self, *args):
        """
        PropertyDefinition(StepAP214_DocumentReferenceItem self) -> Handle_StepRepr_PropertyDefinition

        returns Value as a PropertyDefinition (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_PropertyDefinition

        """
        return _StepAP214.StepAP214_DocumentReferenceItem_PropertyDefinition(self, *args)


    def Representation(self, *args):
        """
        Representation(StepAP214_DocumentReferenceItem self) -> Handle_StepRepr_Representation

        returns Value as a Representation (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepAP214.StepAP214_DocumentReferenceItem_Representation(self, *args)


    def ShapeAspect(self, *args):
        """
        ShapeAspect(StepAP214_DocumentReferenceItem self) -> Handle_StepRepr_ShapeAspect

        returns Value as a ShapeAspect (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepRepr_ShapeAspect

        """
        return _StepAP214.StepAP214_DocumentReferenceItem_ShapeAspect(self, *args)


    def ShapeAspectRelationship(self, *args):
        """
        ShapeAspectRelationship(StepAP214_DocumentReferenceItem self) -> Handle_StepRepr_ShapeAspectRelationship

        returns Value as a ShapeAspectRelationship (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ShapeAspectRelationship

        """
        return _StepAP214.StepAP214_DocumentReferenceItem_ShapeAspectRelationship(self, *args)


    def AppliedExternalIdentificationAssignment(self, *args):
        """
        AppliedExternalIdentificationAssignment(StepAP214_DocumentReferenceItem self) -> Handle_StepAP214_AppliedExternalIdentificationAssignment

        returns Value as a AppliedExternalIdentificationAssignment (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment

        """
        return _StepAP214.StepAP214_DocumentReferenceItem_AppliedExternalIdentificationAssignment(self, *args)


    def AssemblyComponentUsage(self, *args):
        """
        AssemblyComponentUsage(StepAP214_DocumentReferenceItem self) -> Handle_StepRepr_AssemblyComponentUsage

        returns Value as a AssemblyComponentUsage (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsage

        """
        return _StepAP214.StepAP214_DocumentReferenceItem_AssemblyComponentUsage(self, *args)


    def CharacterizedObject(self, *args):
        """
        CharacterizedObject(StepAP214_DocumentReferenceItem self) -> Handle_StepBasic_CharacterizedObject

        returns Value as a CharacterizedObject (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_CharacterizedObject

        """
        return _StepAP214.StepAP214_DocumentReferenceItem_CharacterizedObject(self, *args)


    def DimensionalSize(self, *args):
        """
        DimensionalSize(StepAP214_DocumentReferenceItem self) -> Handle_StepShape_DimensionalSize

        returns Value as a DimensionalSize (Null if another type)

        :rtype: OCC.wrapper.StepShape.Handle_StepShape_DimensionalSize

        """
        return _StepAP214.StepAP214_DocumentReferenceItem_DimensionalSize(self, *args)


    def ExternallyDefinedItem(self, *args):
        """
        ExternallyDefinedItem(StepAP214_DocumentReferenceItem self) -> Handle_StepBasic_ExternallyDefinedItem

        returns Value as a ExternallyDefinedItem (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ExternallyDefinedItem

        """
        return _StepAP214.StepAP214_DocumentReferenceItem_ExternallyDefinedItem(self, *args)


    def Group(self, *args):
        """
        Group(StepAP214_DocumentReferenceItem self) -> Handle_StepBasic_Group

        returns Value as a Group (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Group

        """
        return _StepAP214.StepAP214_DocumentReferenceItem_Group(self, *args)


    def GroupRelationship(self, *args):
        """
        GroupRelationship(StepAP214_DocumentReferenceItem self) -> Handle_StepBasic_GroupRelationship

        returns Value as a GroupRelationship (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_GroupRelationship

        """
        return _StepAP214.StepAP214_DocumentReferenceItem_GroupRelationship(self, *args)


    def MeasureRepresentationItem(self, *args):
        """
        MeasureRepresentationItem(StepAP214_DocumentReferenceItem self) -> Handle_StepRepr_MeasureRepresentationItem

        returns Value as a MeasureRepresentationItem (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepRepr_MeasureRepresentationItem

        """
        return _StepAP214.StepAP214_DocumentReferenceItem_MeasureRepresentationItem(self, *args)


    def ProductCategory(self, *args):
        """
        ProductCategory(StepAP214_DocumentReferenceItem self) -> Handle_StepBasic_ProductCategory

        returns Value as a ProductCategory (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductCategory

        """
        return _StepAP214.StepAP214_DocumentReferenceItem_ProductCategory(self, *args)


    def ProductDefinitionContext(self, *args):
        """
        ProductDefinitionContext(StepAP214_DocumentReferenceItem self) -> Handle_StepBasic_ProductDefinitionContext

        returns Value as a ProductDefinitionContext (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionContext

        """
        return _StepAP214.StepAP214_DocumentReferenceItem_ProductDefinitionContext(self, *args)


    def RepresentationItem(self, *args):
        """
        RepresentationItem(StepAP214_DocumentReferenceItem self) -> Handle_StepRepr_RepresentationItem

        returns Value as a RepresentationItem (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepAP214.StepAP214_DocumentReferenceItem_RepresentationItem(self, *args)

    __swig_destroy__ = _StepAP214.delete_StepAP214_DocumentReferenceItem
StepAP214_DocumentReferenceItem_swigregister = _StepAP214.StepAP214_DocumentReferenceItem_swigregister
StepAP214_DocumentReferenceItem_swigregister(StepAP214_DocumentReferenceItem)

class StepAP214_HArray1OfExternalIdentificationItem(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_HArray1OfExternalIdentificationItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_HArray1OfExternalIdentificationItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_HArray1OfExternalIdentificationItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP214_HArray1OfExternalIdentificationItem
        __init__(StepAP214_HArray1OfExternalIdentificationItem self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP214_ExternalIdentificationItem theValue) -> StepAP214_HArray1OfExternalIdentificationItem
        __init__(StepAP214_HArray1OfExternalIdentificationItem self, NCollection_Array1_StepAP214_ExternalIdentificationItem theOther) -> StepAP214_HArray1OfExternalIdentificationItem

        :type theOther: OCC.wrapper.StepAP214.StepAP214_Array1OfExternalIdentificationItem

        """
        this = _StepAP214.new_StepAP214_HArray1OfExternalIdentificationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfExternalIdentificationItem

        """
        res = _StepAP214.StepAP214_HArray1OfExternalIdentificationItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP214_HArray1OfExternalIdentificationItem self) -> NCollection_Array1_StepAP214_ExternalIdentificationItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfExternalIdentificationItem

        """
        return _StepAP214.StepAP214_HArray1OfExternalIdentificationItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_HArray1OfExternalIdentificationItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_HArray1OfExternalIdentificationItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_HArray1OfExternalIdentificationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_HArray1OfExternalIdentificationItem
StepAP214_HArray1OfExternalIdentificationItem_swigregister = _StepAP214.StepAP214_HArray1OfExternalIdentificationItem_swigregister
StepAP214_HArray1OfExternalIdentificationItem_swigregister(StepAP214_HArray1OfExternalIdentificationItem)

def StepAP214_HArray1OfExternalIdentificationItem_get_type_name(*args):
    """
    StepAP214_HArray1OfExternalIdentificationItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_HArray1OfExternalIdentificationItem_get_type_name(*args)

def StepAP214_HArray1OfExternalIdentificationItem_get_type_descriptor(*args):
    """
    StepAP214_HArray1OfExternalIdentificationItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_HArray1OfExternalIdentificationItem_get_type_descriptor(*args)

class StepAP214_ExternalIdentificationItem(StepData.StepData_SelectType):
    """Representation of STEP SELECT type ExternalIdentificationItem"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP214_ExternalIdentificationItem self) -> StepAP214_ExternalIdentificationItem

        Empty constructor


        """
        this = _StepAP214.new_StepAP214_ExternalIdentificationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP214_ExternalIdentificationItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a kind of ExternalIdentificationItem select type
        1 -> DocumentFile from StepBasic
        2 -> ExternallyDefinedClass from StepAP214
        3 -> ExternallyDefinedGeneralProperty from StepAP214
        4 -> ProductDefinition from StepBasic
        5 -> AppliedOrganizationAssignment from AP214
        6 -> AppliedPersonAndOrganizationAssignment from AP214
        7 -> Approval from StepBasic
        8 -> ApprovalStatus from StepBasic
        9 -> ExternalSource from StepBasic
        10 -> OrganizationalAddress from StepBasic
        11 -> SecurityClassification from StepBasic
        12 -> TrimmedCurve from StepGeom
        13 -> VersionedActionRequest from StepBasic
        14 -> DateAndTimeAssignment from StepBasic
        15 -> DateAssignment from StepBasic
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_ExternalIdentificationItem_CaseNum(self, *args)


    def DocumentFile(self, *args):
        """
        DocumentFile(StepAP214_ExternalIdentificationItem self) -> Handle_StepBasic_DocumentFile

        Returns Value as DocumentFile (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentFile

        """
        return _StepAP214.StepAP214_ExternalIdentificationItem_DocumentFile(self, *args)


    def ExternallyDefinedClass(self, *args):
        """
        ExternallyDefinedClass(StepAP214_ExternalIdentificationItem self) -> Handle_StepAP214_ExternallyDefinedClass

        Returns Value as ExternallyDefinedClass (or Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_ExternallyDefinedClass

        """
        return _StepAP214.StepAP214_ExternalIdentificationItem_ExternallyDefinedClass(self, *args)


    def ExternallyDefinedGeneralProperty(self, *args):
        """
        ExternallyDefinedGeneralProperty(StepAP214_ExternalIdentificationItem self) -> Handle_StepAP214_ExternallyDefinedGeneralProperty

        Returns Value as ExternallyDefinedGeneralProperty (or Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty

        """
        return _StepAP214.StepAP214_ExternalIdentificationItem_ExternallyDefinedGeneralProperty(self, *args)


    def ProductDefinition(self, *args):
        """
        ProductDefinition(StepAP214_ExternalIdentificationItem self) -> Handle_StepBasic_ProductDefinition

        Returns Value as ProductDefinition (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepAP214.StepAP214_ExternalIdentificationItem_ProductDefinition(self, *args)


    def AppliedOrganizationAssignment(self, *args):
        """
        AppliedOrganizationAssignment(StepAP214_ExternalIdentificationItem self) -> Handle_StepAP214_AppliedOrganizationAssignment

        Returns Value as AppliedOrganizationAssignment (or Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedOrganizationAssignment

        """
        return _StepAP214.StepAP214_ExternalIdentificationItem_AppliedOrganizationAssignment(self, *args)


    def AppliedPersonAndOrganizationAssignment(self, *args):
        """
        AppliedPersonAndOrganizationAssignment(StepAP214_ExternalIdentificationItem self) -> Handle_StepAP214_AppliedPersonAndOrganizationAssignment

        Returns Value as AppliedPersonAndOrganizationAssignment (or Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment

        """
        return _StepAP214.StepAP214_ExternalIdentificationItem_AppliedPersonAndOrganizationAssignment(self, *args)


    def Approval(self, *args):
        """
        Approval(StepAP214_ExternalIdentificationItem self) -> Handle_StepBasic_Approval

        Returns Value as Approval (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Approval

        """
        return _StepAP214.StepAP214_ExternalIdentificationItem_Approval(self, *args)


    def ApprovalStatus(self, *args):
        """
        ApprovalStatus(StepAP214_ExternalIdentificationItem self) -> Handle_StepBasic_ApprovalStatus

        Returns Value as ApprovalStatus (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ApprovalStatus

        """
        return _StepAP214.StepAP214_ExternalIdentificationItem_ApprovalStatus(self, *args)


    def ExternalSource(self, *args):
        """
        ExternalSource(StepAP214_ExternalIdentificationItem self) -> Handle_StepBasic_ExternalSource

        Returns Value as ExternalSource (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ExternalSource

        """
        return _StepAP214.StepAP214_ExternalIdentificationItem_ExternalSource(self, *args)


    def OrganizationalAddress(self, *args):
        """
        OrganizationalAddress(StepAP214_ExternalIdentificationItem self) -> Handle_StepBasic_OrganizationalAddress

        Returns Value as OrganizationalAddress (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_OrganizationalAddress

        """
        return _StepAP214.StepAP214_ExternalIdentificationItem_OrganizationalAddress(self, *args)


    def SecurityClassification(self, *args):
        """
        SecurityClassification(StepAP214_ExternalIdentificationItem self) -> Handle_StepBasic_SecurityClassification

        Returns Value as SecurityClassification (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_SecurityClassification

        """
        return _StepAP214.StepAP214_ExternalIdentificationItem_SecurityClassification(self, *args)


    def TrimmedCurve(self, *args):
        """
        TrimmedCurve(StepAP214_ExternalIdentificationItem self) -> Handle_StepGeom_TrimmedCurve

        Returns Value as TrimmedCurve (or Null if another type)

        :rtype: OCC.wrapper.StepGeom.Handle_StepGeom_TrimmedCurve

        """
        return _StepAP214.StepAP214_ExternalIdentificationItem_TrimmedCurve(self, *args)


    def VersionedActionRequest(self, *args):
        """
        VersionedActionRequest(StepAP214_ExternalIdentificationItem self) -> Handle_StepBasic_VersionedActionRequest

        Returns Value as VersionedActionRequest (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_VersionedActionRequest

        """
        return _StepAP214.StepAP214_ExternalIdentificationItem_VersionedActionRequest(self, *args)


    def DateAndTimeAssignment(self, *args):
        """
        DateAndTimeAssignment(StepAP214_ExternalIdentificationItem self) -> Handle_StepBasic_DateAndTimeAssignment

        Returns Value as DateAndTimeAssignment (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_DateAndTimeAssignment

        """
        return _StepAP214.StepAP214_ExternalIdentificationItem_DateAndTimeAssignment(self, *args)


    def DateAssignment(self, *args):
        """
        DateAssignment(StepAP214_ExternalIdentificationItem self) -> Handle_StepBasic_DateAssignment

        Returns Value as DateAssignment (or Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_DateAssignment

        """
        return _StepAP214.StepAP214_ExternalIdentificationItem_DateAssignment(self, *args)

    __swig_destroy__ = _StepAP214.delete_StepAP214_ExternalIdentificationItem
StepAP214_ExternalIdentificationItem_swigregister = _StepAP214.StepAP214_ExternalIdentificationItem_swigregister
StepAP214_ExternalIdentificationItem_swigregister(StepAP214_ExternalIdentificationItem)

class StepAP214_AppliedSecurityClassificationAssignment(StepBasic.StepBasic_SecurityClassificationAssignment):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_AppliedSecurityClassificationAssignment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_AppliedSecurityClassificationAssignment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_AppliedSecurityClassificationAssignment self) -> StepAP214_AppliedSecurityClassificationAssignment

        Returns a AppliedSecurityClassificationAssignment


        """
        this = _StepAP214.new_StepAP214_AppliedSecurityClassificationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP214_AppliedSecurityClassificationAssignment self, Handle_StepBasic_SecurityClassification aAssignedSecurityClassification, Handle_StepAP214_HArray1OfSecurityClassificationItem aItems)

        :type aAssignedSecurityClassification: OCC.wrapper.StepBasic.Handle_StepBasic_SecurityClassification
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem

        """
        return _StepAP214.StepAP214_AppliedSecurityClassificationAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP214_AppliedSecurityClassificationAssignment self, Handle_StepAP214_HArray1OfSecurityClassificationItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem

        """
        return _StepAP214.StepAP214_AppliedSecurityClassificationAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(StepAP214_AppliedSecurityClassificationAssignment self) -> Handle_StepAP214_HArray1OfSecurityClassificationItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem

        """
        return _StepAP214.StepAP214_AppliedSecurityClassificationAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_SecurityClassificationItem

        """
        res = _StepAP214.StepAP214_AppliedSecurityClassificationAssignment_ItemsValue(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NbItems(self, *args):
        """
        NbItems(StepAP214_AppliedSecurityClassificationAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AppliedSecurityClassificationAssignment_NbItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_AppliedSecurityClassificationAssignment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_AppliedSecurityClassificationAssignment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_AppliedSecurityClassificationAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_AppliedSecurityClassificationAssignment
StepAP214_AppliedSecurityClassificationAssignment_swigregister = _StepAP214.StepAP214_AppliedSecurityClassificationAssignment_swigregister
StepAP214_AppliedSecurityClassificationAssignment_swigregister(StepAP214_AppliedSecurityClassificationAssignment)

def StepAP214_AppliedSecurityClassificationAssignment_get_type_name(*args):
    """
    StepAP214_AppliedSecurityClassificationAssignment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_AppliedSecurityClassificationAssignment_get_type_name(*args)

def StepAP214_AppliedSecurityClassificationAssignment_get_type_descriptor(*args):
    """
    StepAP214_AppliedSecurityClassificationAssignment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_AppliedSecurityClassificationAssignment_get_type_descriptor(*args)

class StepAP214_HArray1OfGroupItem(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_HArray1OfGroupItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_HArray1OfGroupItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_HArray1OfGroupItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP214_HArray1OfGroupItem
        __init__(StepAP214_HArray1OfGroupItem self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP214_GroupItem theValue) -> StepAP214_HArray1OfGroupItem
        __init__(StepAP214_HArray1OfGroupItem self, NCollection_Array1_StepAP214_GroupItem theOther) -> StepAP214_HArray1OfGroupItem

        :type theOther: OCC.wrapper.StepAP214.StepAP214_Array1OfGroupItem

        """
        this = _StepAP214.new_StepAP214_HArray1OfGroupItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfGroupItem

        """
        res = _StepAP214.StepAP214_HArray1OfGroupItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP214_HArray1OfGroupItem self) -> NCollection_Array1_StepAP214_GroupItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfGroupItem

        """
        return _StepAP214.StepAP214_HArray1OfGroupItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_HArray1OfGroupItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_HArray1OfGroupItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_HArray1OfGroupItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_HArray1OfGroupItem
StepAP214_HArray1OfGroupItem_swigregister = _StepAP214.StepAP214_HArray1OfGroupItem_swigregister
StepAP214_HArray1OfGroupItem_swigregister(StepAP214_HArray1OfGroupItem)

def StepAP214_HArray1OfGroupItem_get_type_name(*args):
    """
    StepAP214_HArray1OfGroupItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_HArray1OfGroupItem_get_type_name(*args)

def StepAP214_HArray1OfGroupItem_get_type_descriptor(*args):
    """
    StepAP214_HArray1OfGroupItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_HArray1OfGroupItem_get_type_descriptor(*args)

class StepAP214_AutoDesignPresentedItemSelect(StepData.StepData_SelectType):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP214_AutoDesignPresentedItemSelect self) -> StepAP214_AutoDesignPresentedItemSelect

        Returns a AutoDesignPresentedItemSelect SelectType


        """
        this = _StepAP214.new_StepAP214_AutoDesignPresentedItemSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP214_AutoDesignPresentedItemSelect self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a AutoDesignPresentedItemSelect Kind Entity that is :
        1 -> ProductDefinition,
        2 -> ProductDefinitionRelationship,
        3 -> ProductDefinitionShape
        4 -> RepresentationRelationship
        5 -> ShapeAspect
        6 -> DocumentRelationship,
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AutoDesignPresentedItemSelect_CaseNum(self, *args)


    def ProductDefinitionRelationship(self, *args):
        """
        ProductDefinitionRelationship(StepAP214_AutoDesignPresentedItemSelect self) -> Handle_StepBasic_ProductDefinitionRelationship

        returns Value as a ProductDefinitionRelationship (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionRelationship

        """
        return _StepAP214.StepAP214_AutoDesignPresentedItemSelect_ProductDefinitionRelationship(self, *args)


    def ProductDefinition(self, *args):
        """
        ProductDefinition(StepAP214_AutoDesignPresentedItemSelect self) -> Handle_StepBasic_ProductDefinition

        returns Value as a ProductDefinition (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepAP214.StepAP214_AutoDesignPresentedItemSelect_ProductDefinition(self, *args)


    def ProductDefinitionShape(self, *args):
        """
        ProductDefinitionShape(StepAP214_AutoDesignPresentedItemSelect self) -> Handle_StepRepr_ProductDefinitionShape

        returns Value as a ProductDefinitionShape (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepRepr_ProductDefinitionShape

        """
        return _StepAP214.StepAP214_AutoDesignPresentedItemSelect_ProductDefinitionShape(self, *args)


    def RepresentationRelationship(self, *args):
        """
        RepresentationRelationship(StepAP214_AutoDesignPresentedItemSelect self) -> Handle_StepRepr_RepresentationRelationship

        returns Value as a RepresentationRelationship (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationRelationship

        """
        return _StepAP214.StepAP214_AutoDesignPresentedItemSelect_RepresentationRelationship(self, *args)


    def ShapeAspect(self, *args):
        """
        ShapeAspect(StepAP214_AutoDesignPresentedItemSelect self) -> Handle_StepRepr_ShapeAspect

        returns Value as a ShapeAspect (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepRepr_ShapeAspect

        """
        return _StepAP214.StepAP214_AutoDesignPresentedItemSelect_ShapeAspect(self, *args)


    def DocumentRelationship(self, *args):
        """
        DocumentRelationship(StepAP214_AutoDesignPresentedItemSelect self) -> Handle_StepBasic_DocumentRelationship

        returns Value as a DocumentRelationship (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_DocumentRelationship

        """
        return _StepAP214.StepAP214_AutoDesignPresentedItemSelect_DocumentRelationship(self, *args)

    __swig_destroy__ = _StepAP214.delete_StepAP214_AutoDesignPresentedItemSelect
StepAP214_AutoDesignPresentedItemSelect_swigregister = _StepAP214.StepAP214_AutoDesignPresentedItemSelect_swigregister
StepAP214_AutoDesignPresentedItemSelect_swigregister(StepAP214_AutoDesignPresentedItemSelect)

class StepAP214_DateItem(StepAP214_ApprovalItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP214_DateItem self) -> StepAP214_DateItem

        Returns a DateItem SelectType


        """
        this = _StepAP214.new_StepAP214_DateItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP214_DateItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a DateItem Kind Entity that is :
        1 -> ApprovalPersonOrganization
        2 -> AppliedDateAndPersonAssignment
        3 -> AppliedOrganizationAssignment
        4 -> AssemblyComponentUsageSubstitute
        5 -> DocumentFile
        6 -> Effectivity
        7 -> MaterialDesignation
        8 -> MechanicalDesignGeometricPresentationRepresentation
        9 -> PresentationArea
        10 -> Product
        11 -> ProductDefinition
        12 -> ProductDefinitionFormation
        13 -> ProductDefinitionRelationship
        14 -> PropertyDefinition
        15 -> ShapeRepresentation
        16 -> AppliedSecurityClassificationAssignment
        17 -> Document
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_DateItem_CaseNum(self, *args)


    def ApprovalPersonOrganization(self, *args):
        """
        ApprovalPersonOrganization(StepAP214_DateItem self) -> Handle_StepBasic_ApprovalPersonOrganization

        returns Value as a ApprovalPersonOrganization (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ApprovalPersonOrganization

        """
        return _StepAP214.StepAP214_DateItem_ApprovalPersonOrganization(self, *args)


    def AppliedPersonAndOrganizationAssignment(self, *args):
        """
        AppliedPersonAndOrganizationAssignment(StepAP214_DateItem self) -> Handle_StepAP214_AppliedPersonAndOrganizationAssignment

        returns Value as a AppliedDateAndPersonAssignment (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment

        """
        return _StepAP214.StepAP214_DateItem_AppliedPersonAndOrganizationAssignment(self, *args)


    def AppliedOrganizationAssignment(self, *args):
        """
        AppliedOrganizationAssignment(StepAP214_DateItem self) -> Handle_StepAP214_AppliedOrganizationAssignment

        returns Value as a AppliedOrganizationAssignment (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedOrganizationAssignment

        """
        return _StepAP214.StepAP214_DateItem_AppliedOrganizationAssignment(self, *args)


    def AppliedSecurityClassificationAssignment(self, *args):
        """
        AppliedSecurityClassificationAssignment(StepAP214_DateItem self) -> Handle_StepAP214_AppliedSecurityClassificationAssignment

        returns Value as a AppliedSecurityClassificationAssignment (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment

        """
        return _StepAP214.StepAP214_DateItem_AppliedSecurityClassificationAssignment(self, *args)

    __swig_destroy__ = _StepAP214.delete_StepAP214_DateItem
StepAP214_DateItem_swigregister = _StepAP214.StepAP214_DateItem_swigregister
StepAP214_DateItem_swigregister(StepAP214_DateItem)

class StepAP214_AppliedPersonAndOrganizationAssignment(StepBasic.StepBasic_PersonAndOrganizationAssignment):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_AppliedPersonAndOrganizationAssignment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_AppliedPersonAndOrganizationAssignment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_AppliedPersonAndOrganizationAssignment self) -> StepAP214_AppliedPersonAndOrganizationAssignment

        Returns a AutoDesignDateAndPersonAssignment


        """
        this = _StepAP214.new_StepAP214_AppliedPersonAndOrganizationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP214_AppliedPersonAndOrganizationAssignment self, Handle_StepBasic_PersonAndOrganization aAssignedPersonAndOrganization, Handle_StepBasic_PersonAndOrganizationRole aRole, Handle_StepAP214_HArray1OfPersonAndOrganizationItem aItems)

        :type aAssignedPersonAndOrganization: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganization
        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganizationRole
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem

        """
        return _StepAP214.StepAP214_AppliedPersonAndOrganizationAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP214_AppliedPersonAndOrganizationAssignment self, Handle_StepAP214_HArray1OfPersonAndOrganizationItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem

        """
        return _StepAP214.StepAP214_AppliedPersonAndOrganizationAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(StepAP214_AppliedPersonAndOrganizationAssignment self) -> Handle_StepAP214_HArray1OfPersonAndOrganizationItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem

        """
        return _StepAP214.StepAP214_AppliedPersonAndOrganizationAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(StepAP214_AppliedPersonAndOrganizationAssignment self, Standard_Integer const num) -> StepAP214_PersonAndOrganizationItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_PersonAndOrganizationItem

        """
        return _StepAP214.StepAP214_AppliedPersonAndOrganizationAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(StepAP214_AppliedPersonAndOrganizationAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AppliedPersonAndOrganizationAssignment_NbItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_AppliedPersonAndOrganizationAssignment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_AppliedPersonAndOrganizationAssignment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_AppliedPersonAndOrganizationAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_AppliedPersonAndOrganizationAssignment
StepAP214_AppliedPersonAndOrganizationAssignment_swigregister = _StepAP214.StepAP214_AppliedPersonAndOrganizationAssignment_swigregister
StepAP214_AppliedPersonAndOrganizationAssignment_swigregister(StepAP214_AppliedPersonAndOrganizationAssignment)

def StepAP214_AppliedPersonAndOrganizationAssignment_get_type_name(*args):
    """
    StepAP214_AppliedPersonAndOrganizationAssignment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_AppliedPersonAndOrganizationAssignment_get_type_name(*args)

def StepAP214_AppliedPersonAndOrganizationAssignment_get_type_descriptor(*args):
    """
    StepAP214_AppliedPersonAndOrganizationAssignment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_AppliedPersonAndOrganizationAssignment_get_type_descriptor(*args)

class StepAP214_AutoDesignGroupedItem(StepData.StepData_SelectType):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP214_AutoDesignGroupedItem self) -> StepAP214_AutoDesignGroupedItem

        Returns a AutoDesignGroupedItem SelectType


        """
        this = _StepAP214.new_StepAP214_AutoDesignGroupedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP214_AutoDesignGroupedItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a AutoDesignGroupedItem Kind Entity that is :
        1 -> AdvancedBrepShapeRepresentation
        2 -> CsgShapeRepresentation
        3 -> FacetedBrepShapeRepresentation
        4 -> GeometricallyBoundedSurfaceShapeRepresentation
        5 -> GeometricallyBoundedWireframeShapeRepresentation
        6 -> ManifoldSurfaceShapeRepresentation
        7 -> Representation
        8 -> RepresentationItem
        9 -> ShapeAspect
        10 -> ShapeRepresentation
        11 -> TemplateInstance
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AutoDesignGroupedItem_CaseNum(self, *args)


    def AdvancedBrepShapeRepresentation(self, *args):
        """
        AdvancedBrepShapeRepresentation(StepAP214_AutoDesignGroupedItem self) -> Handle_StepShape_AdvancedBrepShapeRepresentation

        returns Value as a AdvancedBrepShapeRepresentation (Null if another type)

        :rtype: OCC.wrapper.StepShape.Handle_StepShape_AdvancedBrepShapeRepresentation

        """
        return _StepAP214.StepAP214_AutoDesignGroupedItem_AdvancedBrepShapeRepresentation(self, *args)


    def CsgShapeRepresentation(self, *args):
        """
        CsgShapeRepresentation(StepAP214_AutoDesignGroupedItem self) -> Handle_StepShape_CsgShapeRepresentation

        returns Value as a CsgShapeRepresentation (Null if another type)

        :rtype: OCC.wrapper.StepShape.Handle_StepShape_CsgShapeRepresentation

        """
        return _StepAP214.StepAP214_AutoDesignGroupedItem_CsgShapeRepresentation(self, *args)


    def FacetedBrepShapeRepresentation(self, *args):
        """
        FacetedBrepShapeRepresentation(StepAP214_AutoDesignGroupedItem self) -> Handle_StepShape_FacetedBrepShapeRepresentation

        returns Value as a FacetedBrepShapeRepresentation (Null if another type)

        :rtype: OCC.wrapper.StepShape.Handle_StepShape_FacetedBrepShapeRepresentation

        """
        return _StepAP214.StepAP214_AutoDesignGroupedItem_FacetedBrepShapeRepresentation(self, *args)


    def GeometricallyBoundedSurfaceShapeRepresentation(self, *args):
        """
        GeometricallyBoundedSurfaceShapeRepresentation(StepAP214_AutoDesignGroupedItem self) -> Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation

        returns Value as a GeometricallyBoundedSurfaceShapeRepresentation (Null if another type)

        :rtype: OCC.wrapper.StepShape.Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation

        """
        return _StepAP214.StepAP214_AutoDesignGroupedItem_GeometricallyBoundedSurfaceShapeRepresentation(self, *args)


    def GeometricallyBoundedWireframeShapeRepresentation(self, *args):
        """
        GeometricallyBoundedWireframeShapeRepresentation(StepAP214_AutoDesignGroupedItem self) -> Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation

        returns Value as a GeometricallyBoundedWireframeShapeRepresentation (Null if another type)

        :rtype: OCC.wrapper.StepShape.Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation

        """
        return _StepAP214.StepAP214_AutoDesignGroupedItem_GeometricallyBoundedWireframeShapeRepresentation(self, *args)


    def ManifoldSurfaceShapeRepresentation(self, *args):
        """
        ManifoldSurfaceShapeRepresentation(StepAP214_AutoDesignGroupedItem self) -> Handle_StepShape_ManifoldSurfaceShapeRepresentation

        returns Value as a ManifoldSurfaceShapeRepresentation (Null if another type)

        :rtype: OCC.wrapper.StepShape.Handle_StepShape_ManifoldSurfaceShapeRepresentation

        """
        return _StepAP214.StepAP214_AutoDesignGroupedItem_ManifoldSurfaceShapeRepresentation(self, *args)


    def Representation(self, *args):
        """
        Representation(StepAP214_AutoDesignGroupedItem self) -> Handle_StepRepr_Representation

        returns Value as a Representation (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_Representation

        """
        return _StepAP214.StepAP214_AutoDesignGroupedItem_Representation(self, *args)


    def RepresentationItem(self, *args):
        """
        RepresentationItem(StepAP214_AutoDesignGroupedItem self) -> Handle_StepRepr_RepresentationItem

        returns Value as a RepresentationItem (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepAP214.StepAP214_AutoDesignGroupedItem_RepresentationItem(self, *args)


    def ShapeAspect(self, *args):
        """
        ShapeAspect(StepAP214_AutoDesignGroupedItem self) -> Handle_StepRepr_ShapeAspect

        returns Value as a ShapeAspect (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepRepr_ShapeAspect

        """
        return _StepAP214.StepAP214_AutoDesignGroupedItem_ShapeAspect(self, *args)


    def ShapeRepresentation(self, *args):
        """
        ShapeRepresentation(StepAP214_AutoDesignGroupedItem self) -> Handle_StepShape_ShapeRepresentation

        returns Value as a ShapeRepresentation (Null if another type)

        :rtype: OCC.wrapper.StepShape.Handle_StepShape_ShapeRepresentation

        """
        return _StepAP214.StepAP214_AutoDesignGroupedItem_ShapeRepresentation(self, *args)


    def TemplateInstance(self, *args):
        """
        TemplateInstance(StepAP214_AutoDesignGroupedItem self) -> Handle_StepVisual_TemplateInstance

        returns Value as a TemplateInstance (Null if another type)

        :rtype: OCC.wrapper.StepVisual.Handle_StepVisual_TemplateInstance

        """
        return _StepAP214.StepAP214_AutoDesignGroupedItem_TemplateInstance(self, *args)

    __swig_destroy__ = _StepAP214.delete_StepAP214_AutoDesignGroupedItem
StepAP214_AutoDesignGroupedItem_swigregister = _StepAP214.StepAP214_AutoDesignGroupedItem_swigregister
StepAP214_AutoDesignGroupedItem_swigregister(StepAP214_AutoDesignGroupedItem)

class StepAP214_AppliedDateAssignment(StepBasic.StepBasic_DateAssignment):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_AppliedDateAssignment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_AppliedDateAssignment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_AppliedDateAssignment self) -> StepAP214_AppliedDateAssignment

        Returns a AppliedDateAssignment


        """
        this = _StepAP214.new_StepAP214_AppliedDateAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP214_AppliedDateAssignment self, Handle_StepBasic_Date aAssignedDate, Handle_StepBasic_DateRole aRole, Handle_StepAP214_HArray1OfDateItem aItems)

        :type aAssignedDate: OCC.wrapper.StepBasic.Handle_StepBasic_Date
        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_DateRole
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfDateItem

        """
        return _StepAP214.StepAP214_AppliedDateAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP214_AppliedDateAssignment self, Handle_StepAP214_HArray1OfDateItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfDateItem

        """
        return _StepAP214.StepAP214_AppliedDateAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(StepAP214_AppliedDateAssignment self) -> Handle_StepAP214_HArray1OfDateItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfDateItem

        """
        return _StepAP214.StepAP214_AppliedDateAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(StepAP214_AppliedDateAssignment self, Standard_Integer const num) -> StepAP214_DateItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_DateItem

        """
        return _StepAP214.StepAP214_AppliedDateAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(StepAP214_AppliedDateAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AppliedDateAssignment_NbItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_AppliedDateAssignment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_AppliedDateAssignment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_AppliedDateAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_AppliedDateAssignment
StepAP214_AppliedDateAssignment_swigregister = _StepAP214.StepAP214_AppliedDateAssignment_swigregister
StepAP214_AppliedDateAssignment_swigregister(StepAP214_AppliedDateAssignment)

def StepAP214_AppliedDateAssignment_get_type_name(*args):
    """
    StepAP214_AppliedDateAssignment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_AppliedDateAssignment_get_type_name(*args)

def StepAP214_AppliedDateAssignment_get_type_descriptor(*args):
    """
    StepAP214_AppliedDateAssignment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_AppliedDateAssignment_get_type_descriptor(*args)

class StepAP214_AutoDesignNominalDateAssignment(StepBasic.StepBasic_DateAssignment):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_AutoDesignNominalDateAssignment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_AutoDesignNominalDateAssignment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_AutoDesignNominalDateAssignment self) -> StepAP214_AutoDesignNominalDateAssignment

        Returns a AutoDesignNominalDateAssignment


        """
        this = _StepAP214.new_StepAP214_AutoDesignNominalDateAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP214_AutoDesignNominalDateAssignment self, Handle_StepBasic_Date aAssignedDate, Handle_StepBasic_DateRole aRole, Handle_StepAP214_HArray1OfAutoDesignDatedItem aItems)

        :type aAssignedDate: OCC.wrapper.StepBasic.Handle_StepBasic_Date
        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_DateRole
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem

        """
        return _StepAP214.StepAP214_AutoDesignNominalDateAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP214_AutoDesignNominalDateAssignment self, Handle_StepAP214_HArray1OfAutoDesignDatedItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem

        """
        return _StepAP214.StepAP214_AutoDesignNominalDateAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(StepAP214_AutoDesignNominalDateAssignment self) -> Handle_StepAP214_HArray1OfAutoDesignDatedItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem

        """
        return _StepAP214.StepAP214_AutoDesignNominalDateAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(StepAP214_AutoDesignNominalDateAssignment self, Standard_Integer const num) -> StepAP214_AutoDesignDatedItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_AutoDesignDatedItem

        """
        return _StepAP214.StepAP214_AutoDesignNominalDateAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(StepAP214_AutoDesignNominalDateAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AutoDesignNominalDateAssignment_NbItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_AutoDesignNominalDateAssignment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_AutoDesignNominalDateAssignment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_AutoDesignNominalDateAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_AutoDesignNominalDateAssignment
StepAP214_AutoDesignNominalDateAssignment_swigregister = _StepAP214.StepAP214_AutoDesignNominalDateAssignment_swigregister
StepAP214_AutoDesignNominalDateAssignment_swigregister(StepAP214_AutoDesignNominalDateAssignment)

def StepAP214_AutoDesignNominalDateAssignment_get_type_name(*args):
    """
    StepAP214_AutoDesignNominalDateAssignment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_AutoDesignNominalDateAssignment_get_type_name(*args)

def StepAP214_AutoDesignNominalDateAssignment_get_type_descriptor(*args):
    """
    StepAP214_AutoDesignNominalDateAssignment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_AutoDesignNominalDateAssignment_get_type_descriptor(*args)

class StepAP214_AutoDesignGroupAssignment(StepBasic.StepBasic_GroupAssignment):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_AutoDesignGroupAssignment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_AutoDesignGroupAssignment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_AutoDesignGroupAssignment self) -> StepAP214_AutoDesignGroupAssignment

        Returns a AutoDesignGroupAssignment


        """
        this = _StepAP214.new_StepAP214_AutoDesignGroupAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP214_AutoDesignGroupAssignment self, Handle_StepBasic_Group aAssignedGroup, Handle_StepAP214_HArray1OfAutoDesignGroupedItem aItems)

        :type aAssignedGroup: OCC.wrapper.StepBasic.Handle_StepBasic_Group
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem

        """
        return _StepAP214.StepAP214_AutoDesignGroupAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP214_AutoDesignGroupAssignment self, Handle_StepAP214_HArray1OfAutoDesignGroupedItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem

        """
        return _StepAP214.StepAP214_AutoDesignGroupAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(StepAP214_AutoDesignGroupAssignment self) -> Handle_StepAP214_HArray1OfAutoDesignGroupedItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem

        """
        return _StepAP214.StepAP214_AutoDesignGroupAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(StepAP214_AutoDesignGroupAssignment self, Standard_Integer const num) -> StepAP214_AutoDesignGroupedItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_AutoDesignGroupedItem

        """
        return _StepAP214.StepAP214_AutoDesignGroupAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(StepAP214_AutoDesignGroupAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AutoDesignGroupAssignment_NbItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_AutoDesignGroupAssignment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_AutoDesignGroupAssignment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_AutoDesignGroupAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_AutoDesignGroupAssignment
StepAP214_AutoDesignGroupAssignment_swigregister = _StepAP214.StepAP214_AutoDesignGroupAssignment_swigregister
StepAP214_AutoDesignGroupAssignment_swigregister(StepAP214_AutoDesignGroupAssignment)

def StepAP214_AutoDesignGroupAssignment_get_type_name(*args):
    """
    StepAP214_AutoDesignGroupAssignment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_AutoDesignGroupAssignment_get_type_name(*args)

def StepAP214_AutoDesignGroupAssignment_get_type_descriptor(*args):
    """
    StepAP214_AutoDesignGroupAssignment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_AutoDesignGroupAssignment_get_type_descriptor(*args)

class StepAP214_AppliedDocumentReference(StepBasic.StepBasic_DocumentReference):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_AppliedDocumentReference
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_AppliedDocumentReference(self) 
            return h


    def __init__(self, *args):
        """__init__(StepAP214_AppliedDocumentReference self) -> StepAP214_AppliedDocumentReference"""
        this = _StepAP214.new_StepAP214_AppliedDocumentReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP214_AppliedDocumentReference self, Handle_StepBasic_Document aAssignedDocument, Handle_TCollection_HAsciiString aSource, Handle_StepAP214_HArray1OfDocumentReferenceItem aItems)

        :type aAssignedDocument: OCC.wrapper.StepBasic.Handle_StepBasic_Document
        :type aSource: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem

        """
        return _StepAP214.StepAP214_AppliedDocumentReference_Init(self, *args)


    def Items(self, *args):
        """
        Items(StepAP214_AppliedDocumentReference self) -> Handle_StepAP214_HArray1OfDocumentReferenceItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem

        """
        return _StepAP214.StepAP214_AppliedDocumentReference_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP214_AppliedDocumentReference self, Handle_StepAP214_HArray1OfDocumentReferenceItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem

        """
        return _StepAP214.StepAP214_AppliedDocumentReference_SetItems(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(StepAP214_AppliedDocumentReference self, Standard_Integer const num) -> StepAP214_DocumentReferenceItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_DocumentReferenceItem

        """
        return _StepAP214.StepAP214_AppliedDocumentReference_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(StepAP214_AppliedDocumentReference self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AppliedDocumentReference_NbItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_AppliedDocumentReference_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_AppliedDocumentReference_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_AppliedDocumentReference_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_AppliedDocumentReference
StepAP214_AppliedDocumentReference_swigregister = _StepAP214.StepAP214_AppliedDocumentReference_swigregister
StepAP214_AppliedDocumentReference_swigregister(StepAP214_AppliedDocumentReference)

def StepAP214_AppliedDocumentReference_get_type_name(*args):
    """
    StepAP214_AppliedDocumentReference_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_AppliedDocumentReference_get_type_name(*args)

def StepAP214_AppliedDocumentReference_get_type_descriptor(*args):
    """
    StepAP214_AppliedDocumentReference_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_AppliedDocumentReference_get_type_descriptor(*args)

class StepAP214_HArray1OfOrganizationItem(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_HArray1OfOrganizationItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_HArray1OfOrganizationItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_HArray1OfOrganizationItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP214_HArray1OfOrganizationItem
        __init__(StepAP214_HArray1OfOrganizationItem self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP214_OrganizationItem theValue) -> StepAP214_HArray1OfOrganizationItem
        __init__(StepAP214_HArray1OfOrganizationItem self, NCollection_Array1_StepAP214_OrganizationItem theOther) -> StepAP214_HArray1OfOrganizationItem

        :type theOther: OCC.wrapper.StepAP214.StepAP214_Array1OfOrganizationItem

        """
        this = _StepAP214.new_StepAP214_HArray1OfOrganizationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfOrganizationItem

        """
        res = _StepAP214.StepAP214_HArray1OfOrganizationItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP214_HArray1OfOrganizationItem self) -> NCollection_Array1_StepAP214_OrganizationItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfOrganizationItem

        """
        return _StepAP214.StepAP214_HArray1OfOrganizationItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_HArray1OfOrganizationItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_HArray1OfOrganizationItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_HArray1OfOrganizationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_HArray1OfOrganizationItem
StepAP214_HArray1OfOrganizationItem_swigregister = _StepAP214.StepAP214_HArray1OfOrganizationItem_swigregister
StepAP214_HArray1OfOrganizationItem_swigregister(StepAP214_HArray1OfOrganizationItem)

def StepAP214_HArray1OfOrganizationItem_get_type_name(*args):
    """
    StepAP214_HArray1OfOrganizationItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_HArray1OfOrganizationItem_get_type_name(*args)

def StepAP214_HArray1OfOrganizationItem_get_type_descriptor(*args):
    """
    StepAP214_HArray1OfOrganizationItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_HArray1OfOrganizationItem_get_type_descriptor(*args)

class StepAP214_DateAndTimeItem(StepAP214_ApprovalItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP214_DateAndTimeItem self) -> StepAP214_DateAndTimeItem

        Returns a DateAndTimeItem SelectType


        """
        this = _StepAP214.new_StepAP214_DateAndTimeItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP214_DateAndTimeItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a DateAndTimeItem Kind Entity that is :
        1 -> ApprovalPersonOrganization
        2 -> AppliedDateAndPersonAssignment
        3 -> AppliedOrganizationAssignment
        4 -> AssemblyComponentUsageSubstitute
        5 -> DocumentFile
        6 -> Effectivity
        7 -> MaterialDesignation
        8 -> MechanicalDesignGeometricPresentationRepresentation
        9 -> PresentationArea
        10 -> Product
        11 -> ProductDefinition
        12 -> ProductDefinitionFormation
        13 -> ProductDefinitionRelationship
        14 -> PropertyDefinition
        15 -> ShapeRepresentation
        16 -> SecurityClassification
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_DateAndTimeItem_CaseNum(self, *args)


    def ApprovalPersonOrganization(self, *args):
        """
        ApprovalPersonOrganization(StepAP214_DateAndTimeItem self) -> Handle_StepBasic_ApprovalPersonOrganization

        returns Value as a ApprovalPersonOrganization (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ApprovalPersonOrganization

        """
        return _StepAP214.StepAP214_DateAndTimeItem_ApprovalPersonOrganization(self, *args)


    def AppliedPersonAndOrganizationAssignment(self, *args):
        """
        AppliedPersonAndOrganizationAssignment(StepAP214_DateAndTimeItem self) -> Handle_StepAP214_AppliedPersonAndOrganizationAssignment

        returns Value as a AppliedDateAndPersonAssignment (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment

        """
        return _StepAP214.StepAP214_DateAndTimeItem_AppliedPersonAndOrganizationAssignment(self, *args)


    def AppliedOrganizationAssignment(self, *args):
        """
        AppliedOrganizationAssignment(StepAP214_DateAndTimeItem self) -> Handle_StepAP214_AppliedOrganizationAssignment

        returns Value as a AppliedOrganizationAssignment (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedOrganizationAssignment

        """
        return _StepAP214.StepAP214_DateAndTimeItem_AppliedOrganizationAssignment(self, *args)

    __swig_destroy__ = _StepAP214.delete_StepAP214_DateAndTimeItem
StepAP214_DateAndTimeItem_swigregister = _StepAP214.StepAP214_DateAndTimeItem_swigregister
StepAP214_DateAndTimeItem_swigregister(StepAP214_DateAndTimeItem)

class StepAP214_HArray1OfDateAndTimeItem(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_HArray1OfDateAndTimeItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_HArray1OfDateAndTimeItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_HArray1OfDateAndTimeItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP214_HArray1OfDateAndTimeItem
        __init__(StepAP214_HArray1OfDateAndTimeItem self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP214_DateAndTimeItem theValue) -> StepAP214_HArray1OfDateAndTimeItem
        __init__(StepAP214_HArray1OfDateAndTimeItem self, NCollection_Array1_StepAP214_DateAndTimeItem theOther) -> StepAP214_HArray1OfDateAndTimeItem

        :type theOther: OCC.wrapper.StepAP214.StepAP214_Array1OfDateAndTimeItem

        """
        this = _StepAP214.new_StepAP214_HArray1OfDateAndTimeItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfDateAndTimeItem

        """
        res = _StepAP214.StepAP214_HArray1OfDateAndTimeItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP214_HArray1OfDateAndTimeItem self) -> NCollection_Array1_StepAP214_DateAndTimeItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfDateAndTimeItem

        """
        return _StepAP214.StepAP214_HArray1OfDateAndTimeItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_HArray1OfDateAndTimeItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_HArray1OfDateAndTimeItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_HArray1OfDateAndTimeItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_HArray1OfDateAndTimeItem
StepAP214_HArray1OfDateAndTimeItem_swigregister = _StepAP214.StepAP214_HArray1OfDateAndTimeItem_swigregister
StepAP214_HArray1OfDateAndTimeItem_swigregister(StepAP214_HArray1OfDateAndTimeItem)

def StepAP214_HArray1OfDateAndTimeItem_get_type_name(*args):
    """
    StepAP214_HArray1OfDateAndTimeItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_HArray1OfDateAndTimeItem_get_type_name(*args)

def StepAP214_HArray1OfDateAndTimeItem_get_type_descriptor(*args):
    """
    StepAP214_HArray1OfDateAndTimeItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_HArray1OfDateAndTimeItem_get_type_descriptor(*args)

class StepAP214_HArray1OfApprovalItem(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_HArray1OfApprovalItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_HArray1OfApprovalItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_HArray1OfApprovalItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP214_HArray1OfApprovalItem
        __init__(StepAP214_HArray1OfApprovalItem self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP214_ApprovalItem theValue) -> StepAP214_HArray1OfApprovalItem
        __init__(StepAP214_HArray1OfApprovalItem self, NCollection_Array1_StepAP214_ApprovalItem theOther) -> StepAP214_HArray1OfApprovalItem

        :type theOther: OCC.wrapper.StepAP214.StepAP214_Array1OfApprovalItem

        """
        this = _StepAP214.new_StepAP214_HArray1OfApprovalItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfApprovalItem

        """
        res = _StepAP214.StepAP214_HArray1OfApprovalItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP214_HArray1OfApprovalItem self) -> NCollection_Array1_StepAP214_ApprovalItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfApprovalItem

        """
        return _StepAP214.StepAP214_HArray1OfApprovalItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_HArray1OfApprovalItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_HArray1OfApprovalItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_HArray1OfApprovalItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_HArray1OfApprovalItem
StepAP214_HArray1OfApprovalItem_swigregister = _StepAP214.StepAP214_HArray1OfApprovalItem_swigregister
StepAP214_HArray1OfApprovalItem_swigregister(StepAP214_HArray1OfApprovalItem)

def StepAP214_HArray1OfApprovalItem_get_type_name(*args):
    """
    StepAP214_HArray1OfApprovalItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_HArray1OfApprovalItem_get_type_name(*args)

def StepAP214_HArray1OfApprovalItem_get_type_descriptor(*args):
    """
    StepAP214_HArray1OfApprovalItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_HArray1OfApprovalItem_get_type_descriptor(*args)

class StepAP214_AutoDesignDocumentReference(StepBasic.StepBasic_DocumentReference):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_AutoDesignDocumentReference
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_AutoDesignDocumentReference(self) 
            return h


    def __init__(self, *args):
        """__init__(StepAP214_AutoDesignDocumentReference self) -> StepAP214_AutoDesignDocumentReference"""
        this = _StepAP214.new_StepAP214_AutoDesignDocumentReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP214_AutoDesignDocumentReference self, Handle_StepBasic_Document aAssignedDocument, Handle_TCollection_HAsciiString aSource, Handle_StepAP214_HArray1OfAutoDesignReferencingItem aItems)

        :type aAssignedDocument: OCC.wrapper.StepBasic.Handle_StepBasic_Document
        :type aSource: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem

        """
        return _StepAP214.StepAP214_AutoDesignDocumentReference_Init(self, *args)


    def Items(self, *args):
        """
        Items(StepAP214_AutoDesignDocumentReference self) -> Handle_StepAP214_HArray1OfAutoDesignReferencingItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem

        """
        return _StepAP214.StepAP214_AutoDesignDocumentReference_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP214_AutoDesignDocumentReference self, Handle_StepAP214_HArray1OfAutoDesignReferencingItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem

        """
        return _StepAP214.StepAP214_AutoDesignDocumentReference_SetItems(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(StepAP214_AutoDesignDocumentReference self, Standard_Integer const num) -> StepAP214_AutoDesignReferencingItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_AutoDesignReferencingItem

        """
        return _StepAP214.StepAP214_AutoDesignDocumentReference_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(StepAP214_AutoDesignDocumentReference self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AutoDesignDocumentReference_NbItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_AutoDesignDocumentReference_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_AutoDesignDocumentReference_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_AutoDesignDocumentReference_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_AutoDesignDocumentReference
StepAP214_AutoDesignDocumentReference_swigregister = _StepAP214.StepAP214_AutoDesignDocumentReference_swigregister
StepAP214_AutoDesignDocumentReference_swigregister(StepAP214_AutoDesignDocumentReference)

def StepAP214_AutoDesignDocumentReference_get_type_name(*args):
    """
    StepAP214_AutoDesignDocumentReference_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_AutoDesignDocumentReference_get_type_name(*args)

def StepAP214_AutoDesignDocumentReference_get_type_descriptor(*args):
    """
    StepAP214_AutoDesignDocumentReference_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_AutoDesignDocumentReference_get_type_descriptor(*args)

class Handle_StepAP214_ExternallyDefinedGeneralProperty(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_ExternallyDefinedGeneralProperty self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_ExternallyDefinedGeneralProperty self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_ExternallyDefinedGeneralProperty self, StepAP214_ExternallyDefinedGeneralProperty thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_ExternallyDefinedGeneralProperty self, Handle_StepAP214_ExternallyDefinedGeneralProperty theHandle) -> Handle_StepAP214_ExternallyDefinedGeneralProperty
        assign(Handle_StepAP214_ExternallyDefinedGeneralProperty self, StepAP214_ExternallyDefinedGeneralProperty thePtr) -> Handle_StepAP214_ExternallyDefinedGeneralProperty
        assign(Handle_StepAP214_ExternallyDefinedGeneralProperty self, Handle_StepAP214_ExternallyDefinedGeneralProperty theHandle) -> Handle_StepAP214_ExternallyDefinedGeneralProperty

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_ExternallyDefinedGeneralProperty self) -> StepAP214_ExternallyDefinedGeneralProperty

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_ExternallyDefinedGeneralProperty self) -> StepAP214_ExternallyDefinedGeneralProperty

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_ExternallyDefinedGeneralProperty self) -> StepAP214_ExternallyDefinedGeneralProperty

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_ExternallyDefinedGeneralProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_ExternallyDefinedGeneralProperty

    def Init(self, *args):
        """
        Init(Handle_StepAP214_ExternallyDefinedGeneralProperty self, Handle_TCollection_HAsciiString aGeneralProperty_Id, Handle_TCollection_HAsciiString aGeneralProperty_Name, Standard_Boolean const hasGeneralProperty_Description, Handle_TCollection_HAsciiString aGeneralProperty_Description, StepBasic_SourceItem aExternallyDefinedItem_ItemId, Handle_StepBasic_ExternalSource aExternallyDefinedItem_Source)

        Initialize all fields (own and inherited)

        :type aGeneralProperty_Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aGeneralProperty_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasGeneralProperty_Description: bool
        :type aGeneralProperty_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aExternallyDefinedItem_ItemId: OCC.wrapper.StepBasic.StepBasic_SourceItem
        :type aExternallyDefinedItem_Source: OCC.wrapper.StepBasic.Handle_StepBasic_ExternalSource

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_Init(self, *args)


    def ExternallyDefinedItem(self, *args):
        """
        ExternallyDefinedItem(Handle_StepAP214_ExternallyDefinedGeneralProperty self) -> Handle_StepBasic_ExternallyDefinedItem

        Returns data for supertype ExternallyDefinedItem

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ExternallyDefinedItem

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_ExternallyDefinedItem(self, *args)


    def SetExternallyDefinedItem(self, *args):
        """
        SetExternallyDefinedItem(Handle_StepAP214_ExternallyDefinedGeneralProperty self, Handle_StepBasic_ExternallyDefinedItem ExternallyDefinedItem)

        Set data for supertype ExternallyDefinedItem

        :type ExternallyDefinedItem: OCC.wrapper.StepBasic.Handle_StepBasic_ExternallyDefinedItem

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_SetExternallyDefinedItem(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_ExternallyDefinedGeneralProperty self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Id(self, *args):
        """
        Id(Handle_StepAP214_ExternallyDefinedGeneralProperty self) -> Handle_TCollection_HAsciiString

        Returns field Id

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_Id(self, *args)


    def SetId(self, *args):
        """
        SetId(Handle_StepAP214_ExternallyDefinedGeneralProperty self, Handle_TCollection_HAsciiString Id)

        Set field Id

        :type Id: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_SetId(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepAP214_ExternallyDefinedGeneralProperty self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepAP214_ExternallyDefinedGeneralProperty self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepAP214_ExternallyDefinedGeneralProperty self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepAP214_ExternallyDefinedGeneralProperty self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        HasDescription(Handle_StepAP214_ExternallyDefinedGeneralProperty self) -> Standard_Boolean

        Returns True if optional field Description is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_HasDescription(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_ExternallyDefinedGeneralProperty self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_ExternallyDefinedGeneralProperty self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_ExternallyDefinedGeneralProperty self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_ExternallyDefinedGeneralProperty self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_ExternallyDefinedGeneralProperty self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_ExternallyDefinedGeneralProperty self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_ExternallyDefinedGeneralProperty self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_ExternallyDefinedGeneralProperty self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_ExternallyDefinedGeneralProperty self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_DecrementRefCounter(self, *args)

Handle_StepAP214_ExternallyDefinedGeneralProperty_swigregister = _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_swigregister
Handle_StepAP214_ExternallyDefinedGeneralProperty_swigregister(Handle_StepAP214_ExternallyDefinedGeneralProperty)

def Handle_StepAP214_ExternallyDefinedGeneralProperty_DownCast(thing):
    return _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_DownCast(thing)
Handle_StepAP214_ExternallyDefinedGeneralProperty_DownCast = _StepAP214.Handle_StepAP214_ExternallyDefinedGeneralProperty_DownCast

class Handle_StepAP214_HArray1OfApprovalItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_HArray1OfApprovalItem self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_HArray1OfApprovalItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_HArray1OfApprovalItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_HArray1OfApprovalItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_HArray1OfApprovalItem self, StepAP214_HArray1OfApprovalItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfApprovalItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_HArray1OfApprovalItem self, Handle_StepAP214_HArray1OfApprovalItem theHandle) -> Handle_StepAP214_HArray1OfApprovalItem
        assign(Handle_StepAP214_HArray1OfApprovalItem self, StepAP214_HArray1OfApprovalItem thePtr) -> Handle_StepAP214_HArray1OfApprovalItem
        assign(Handle_StepAP214_HArray1OfApprovalItem self, Handle_StepAP214_HArray1OfApprovalItem theHandle) -> Handle_StepAP214_HArray1OfApprovalItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_HArray1OfApprovalItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_HArray1OfApprovalItem self) -> StepAP214_HArray1OfApprovalItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfApprovalItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_HArray1OfApprovalItem self) -> StepAP214_HArray1OfApprovalItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfApprovalItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_HArray1OfApprovalItem self) -> StepAP214_HArray1OfApprovalItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfApprovalItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_HArray1OfApprovalItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_HArray1OfApprovalItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_HArray1OfApprovalItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_HArray1OfApprovalItem_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_HArray1OfApprovalItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfApprovalItem

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfApprovalItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP214_HArray1OfApprovalItem self) -> NCollection_Array1_StepAP214_ApprovalItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfApprovalItem

        """
        return _StepAP214.Handle_StepAP214_HArray1OfApprovalItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_HArray1OfApprovalItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfApprovalItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfApprovalItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfApprovalItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_HArray1OfApprovalItem self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_HArray1OfApprovalItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_HArray1OfApprovalItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_HArray1OfApprovalItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfApprovalItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_HArray1OfApprovalItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_HArray1OfApprovalItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfApprovalItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_HArray1OfApprovalItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_HArray1OfApprovalItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_HArray1OfApprovalItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfApprovalItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_HArray1OfApprovalItem self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_HArray1OfApprovalItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_HArray1OfApprovalItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfApprovalItem_DecrementRefCounter(self, *args)

Handle_StepAP214_HArray1OfApprovalItem_swigregister = _StepAP214.Handle_StepAP214_HArray1OfApprovalItem_swigregister
Handle_StepAP214_HArray1OfApprovalItem_swigregister(Handle_StepAP214_HArray1OfApprovalItem)

def Handle_StepAP214_HArray1OfApprovalItem_DownCast(thing):
    return _StepAP214.Handle_StepAP214_HArray1OfApprovalItem_DownCast(thing)
Handle_StepAP214_HArray1OfApprovalItem_DownCast = _StepAP214.Handle_StepAP214_HArray1OfApprovalItem_DownCast

class StepAP214_HArray1OfPersonAndOrganizationItem(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_HArray1OfPersonAndOrganizationItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_HArray1OfPersonAndOrganizationItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_HArray1OfPersonAndOrganizationItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP214_HArray1OfPersonAndOrganizationItem
        __init__(StepAP214_HArray1OfPersonAndOrganizationItem self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP214_PersonAndOrganizationItem theValue) -> StepAP214_HArray1OfPersonAndOrganizationItem
        __init__(StepAP214_HArray1OfPersonAndOrganizationItem self, NCollection_Array1_StepAP214_PersonAndOrganizationItem theOther) -> StepAP214_HArray1OfPersonAndOrganizationItem

        :type theOther: OCC.wrapper.StepAP214.StepAP214_Array1OfPersonAndOrganizationItem

        """
        this = _StepAP214.new_StepAP214_HArray1OfPersonAndOrganizationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfPersonAndOrganizationItem

        """
        res = _StepAP214.StepAP214_HArray1OfPersonAndOrganizationItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP214_HArray1OfPersonAndOrganizationItem self) -> NCollection_Array1_StepAP214_PersonAndOrganizationItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfPersonAndOrganizationItem

        """
        return _StepAP214.StepAP214_HArray1OfPersonAndOrganizationItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_HArray1OfPersonAndOrganizationItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_HArray1OfPersonAndOrganizationItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_HArray1OfPersonAndOrganizationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_HArray1OfPersonAndOrganizationItem
StepAP214_HArray1OfPersonAndOrganizationItem_swigregister = _StepAP214.StepAP214_HArray1OfPersonAndOrganizationItem_swigregister
StepAP214_HArray1OfPersonAndOrganizationItem_swigregister(StepAP214_HArray1OfPersonAndOrganizationItem)

def StepAP214_HArray1OfPersonAndOrganizationItem_get_type_name(*args):
    """
    StepAP214_HArray1OfPersonAndOrganizationItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_HArray1OfPersonAndOrganizationItem_get_type_name(*args)

def StepAP214_HArray1OfPersonAndOrganizationItem_get_type_descriptor(*args):
    """
    StepAP214_HArray1OfPersonAndOrganizationItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_HArray1OfPersonAndOrganizationItem_get_type_descriptor(*args)

class Handle_StepAP214_Protocol(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_Protocol self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_Protocol_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_Protocol self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_Protocol_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_Protocol self, StepAP214_Protocol thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_Protocol_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_Protocol self, Handle_StepAP214_Protocol theHandle) -> Handle_StepAP214_Protocol
        assign(Handle_StepAP214_Protocol self, StepAP214_Protocol thePtr) -> Handle_StepAP214_Protocol
        assign(Handle_StepAP214_Protocol self, Handle_StepAP214_Protocol theHandle) -> Handle_StepAP214_Protocol

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_Protocol_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_Protocol self) -> StepAP214_Protocol

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_Protocol_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_Protocol self) -> StepAP214_Protocol

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_Protocol___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_Protocol self) -> StepAP214_Protocol

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_Protocol___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_Protocol___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_Protocol___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_Protocol(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_Protocol_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_Protocol

    def TypeNumber(self, *args):
        """
        TypeNumber(Handle_StepAP214_Protocol self, Handle_Standard_Type atype) -> Standard_Integer

        Returns a Case Number for each of the StepAP214 Entities

        :type atype: OCC.wrapper.Standard.Handle_Standard_Type
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_Protocol_TypeNumber(self, *args)


    def SchemaName(self, *args):
        """
        SchemaName(Handle_StepAP214_Protocol self) -> Standard_CString

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _StepAP214.Handle_StepAP214_Protocol_SchemaName(self, *args)


    def NbResources(self, *args):
        """
        NbResources(Handle_StepAP214_Protocol self) -> Standard_Integer

        Returns count of Protocol used as Resources (level one)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_Protocol_NbResources(self, *args)


    def Resource(self, *args):
        """
        Resource(Handle_StepAP214_Protocol self, Standard_Integer const num) -> Handle_Interface_Protocol

        Returns a Resource, given its rank (between 1 and NbResources)

        :type num: int
        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _StepAP214.Handle_StepAP214_Protocol_Resource(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_Protocol self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_Protocol_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_Protocol_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_Protocol_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def CaseNumber(self, *args):
        """
        CaseNumber(Handle_StepAP214_Protocol self, Handle_Standard_Transient obj) -> Standard_Integer

        Returns a unique positive number for any recognized entity
        Redefined to work by calling both TypeNumber and, for a
        Described Entity (late binding) DescrNumber

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_Protocol_CaseNumber(self, *args)


    def NewModel(self, *args):
        """
        NewModel(Handle_StepAP214_Protocol self) -> Handle_Interface_InterfaceModel

        Creates an empty Model for Step Norm

        :rtype: OCC.wrapper.Interface.Handle_Interface_InterfaceModel

        """
        return _StepAP214.Handle_StepAP214_Protocol_NewModel(self, *args)


    def IsSuitableModel(self, *args):
        """
        IsSuitableModel(Handle_StepAP214_Protocol self, Handle_Interface_InterfaceModel model) -> Standard_Boolean

        Returns True if <model> is a Model of Step Norm

        :type model: OCC.wrapper.Interface.Handle_Interface_InterfaceModel
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_Protocol_IsSuitableModel(self, *args)


    def UnknownEntity(self, *args):
        """
        UnknownEntity(Handle_StepAP214_Protocol self) -> Handle_Standard_Transient

        Creates a new Unknown Entity for Step (UndefinedEntity)

        :rtype: OCC.wrapper.Standard.Handle_Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_Protocol_UnknownEntity(self, *args)


    def IsUnknownEntity(self, *args):
        """
        IsUnknownEntity(Handle_StepAP214_Protocol self, Handle_Standard_Transient ent) -> Standard_Boolean

        Returns True if <ent> is an Unknown Entity for the Norm, i.e.
        Type UndefinedEntity, status Unknown

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_Protocol_IsUnknownEntity(self, *args)


    def DescrNumber(self, *args):
        """
        DescrNumber(Handle_StepAP214_Protocol self, Handle_StepData_EDescr adescr) -> Standard_Integer

        Returns a unique positive CaseNumber for types described by
        an EDescr (late binding)
        Warning : TypeNumber and DescrNumber must give together a unique
        positive case number for each distinct case, type or descr

        :type adescr: OCC.wrapper.StepData.Handle_StepData_EDescr
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_Protocol_DescrNumber(self, *args)


    def AddDescr(self, *args):
        """
        AddDescr(Handle_StepAP214_Protocol self, Handle_StepData_EDescr adescr, Standard_Integer const CN)

        Records an EDescr with its case number
        Also records its name for an ESDescr (simple type): an ESDescr
        is then used, for case number, or for type name

        :type adescr: OCC.wrapper.StepData.Handle_StepData_EDescr
        :type CN: int

        """
        return _StepAP214.Handle_StepAP214_Protocol_AddDescr(self, *args)


    def HasDescr(self, *args):
        """
        HasDescr(Handle_StepAP214_Protocol self) -> Standard_Boolean

        Tells if a Protocol brings at least one ESDescr, i.e. if it
        defines at least one entity description by ESDescr mechanism

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_Protocol_HasDescr(self, *args)


    def Descr(self, *args):
        """
        Descr(Handle_StepAP214_Protocol self, Standard_Integer const num) -> Handle_StepData_EDescr
        Descr(Handle_StepAP214_Protocol self, Standard_CString const name, Standard_Boolean const anylevel) -> Handle_StepData_EDescr

        Returns a description according to its name
        <anylevel> True (D) : for <me> and its resources
        <anylevel> False : for <me> only

        :type name: OCC.wrapper.Standard.Standard_CString
        :type anylevel: bool
        :rtype: OCC.wrapper.StepData.Handle_StepData_EDescr

        """
        return _StepAP214.Handle_StepAP214_Protocol_Descr(self, *args)


    def ESDescr(self, *args):
        """
        ESDescr(Handle_StepAP214_Protocol self, Standard_CString const name, Standard_Boolean const anylevel) -> Handle_StepData_ESDescr

        Idem as Descr but cast to simple description

        :type name: OCC.wrapper.Standard.Standard_CString
        :type anylevel: bool
        :rtype: OCC.wrapper.StepData.Handle_StepData_ESDescr

        """
        return _StepAP214.Handle_StepAP214_Protocol_ESDescr(self, *args)


    def ECDescr(self, *args):
        """
        ECDescr(Handle_StepAP214_Protocol self, NCollection_Sequence_TCollection_AsciiString names, Standard_Boolean const anylevel) -> Handle_StepData_ECDescr

        Returns a complex description according to list of names
        <anylevel> True (D) : for <me> and its resources
        <anylevel> False : for <me> only

        :type names: OCC.wrapper.TColStd.TColStd_SequenceOfAsciiString
        :type anylevel: bool
        :rtype: OCC.wrapper.StepData.Handle_StepData_ECDescr

        """
        return _StepAP214.Handle_StepAP214_Protocol_ECDescr(self, *args)


    def AddPDescr(self, *args):
        """
        AddPDescr(Handle_StepAP214_Protocol self, Handle_StepData_PDescr pdescr)

        Records an PDescr

        :type pdescr: OCC.wrapper.StepData.Handle_StepData_PDescr

        """
        return _StepAP214.Handle_StepAP214_Protocol_AddPDescr(self, *args)


    def PDescr(self, *args):
        """
        PDescr(Handle_StepAP214_Protocol self, Standard_CString const name, Standard_Boolean const anylevel) -> Handle_StepData_PDescr

        Returns a parameter description according to its name
        <anylevel> True (D) : for <me> and its resources
        <anylevel> False : for <me> only

        :type name: OCC.wrapper.Standard.Standard_CString
        :type anylevel: bool
        :rtype: OCC.wrapper.StepData.Handle_StepData_PDescr

        """
        return _StepAP214.Handle_StepAP214_Protocol_PDescr(self, *args)


    def AddBasicDescr(self, *args):
        """
        AddBasicDescr(Handle_StepAP214_Protocol self, Handle_StepData_ESDescr esdescr)

        Records an ESDescr, intended to build complex descriptions

        :type esdescr: OCC.wrapper.StepData.Handle_StepData_ESDescr

        """
        return _StepAP214.Handle_StepAP214_Protocol_AddBasicDescr(self, *args)


    def BasicDescr(self, *args):
        """
        BasicDescr(Handle_StepAP214_Protocol self, Standard_CString const name, Standard_Boolean const anylevel) -> Handle_StepData_EDescr

        Returns a basic description according to its name
        <anylevel> True (D) : for <me> and its resources
        <anylevel> False : for <me> only

        :type name: OCC.wrapper.Standard.Standard_CString
        :type anylevel: bool
        :rtype: OCC.wrapper.StepData.Handle_StepData_EDescr

        """
        return _StepAP214.Handle_StepAP214_Protocol_BasicDescr(self, *args)


    def Active(self, *args):
        """
        Active(Handle_StepAP214_Protocol self) -> Handle_Interface_Protocol

        Returns the Active Protocol, if defined (else, returns a
        Null Handle, which means "no defined active protocol")

        :rtype: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _StepAP214.Handle_StepAP214_Protocol_Active(self, *args)


    def SetActive(self, *args):
        """
        SetActive(Handle_StepAP214_Protocol self, Handle_Interface_Protocol aprotocol)

        Sets a given Protocol to be the Active one (for the users of
        Active, see just above). Applies to every sub-type of Protocol

        :type aprotocol: OCC.wrapper.Interface.Handle_Interface_Protocol

        """
        return _StepAP214.Handle_StepAP214_Protocol_SetActive(self, *args)


    def ClearActive(self, *args):
        """
        ClearActive(Handle_StepAP214_Protocol self)

        Erases the Active Protocol (hence it becomes undefined)


        """
        return _StepAP214.Handle_StepAP214_Protocol_ClearActive(self, *args)


    def IsDynamicType(self, *args):
        """
        IsDynamicType(Handle_StepAP214_Protocol self, Handle_Standard_Transient obj) -> Standard_Boolean

        Returns True if type of <obj> is that defined from CDL
        This is the default but it may change according implementation

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_Protocol_IsDynamicType(self, *args)


    def NbTypes(self, *args):
        """
        NbTypes(Handle_StepAP214_Protocol self, Handle_Standard_Transient obj) -> Standard_Integer

        Returns the count of DISTINCT types under which an entity may
        be processed. Each one is candidate to be recognized by
        TypeNumber, <obj> is then processed according it
        By default, returns 1 (the DynamicType)

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_Protocol_NbTypes(self, *args)


    def Type(self, *args):
        """
        Type(Handle_StepAP214_Protocol self, Handle_Standard_Transient obj, Standard_Integer const nt=1) -> Handle_Standard_Type

        Returns a type under which <obj> can be recognized and
        processed, according its rank in its definition list (see
        NbTypes).
        By default, returns DynamicType

        :type obj: OCC.wrapper.Standard.Handle_Standard_Transient
        :type nt: int
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.Handle_StepAP214_Protocol_Type(self, *args)


    def GlobalCheck(self, *args):
        """
        GlobalCheck(Handle_StepAP214_Protocol self, Interface_Graph G, Handle_Interface_Check ach) -> Standard_Boolean

        Evaluates a Global Check for a model (with its Graph)
        Returns True when done, False if data in model do not apply

        Very specific of each norm, i.e. of each protocol : the
        uppest level Protocol assumes it, it can call GlobalCheck of
        its ressources only if it is necessary

        Default does nothing, can be redefined

        :type G: OCC.wrapper.Interface.Interface_Graph
        :type ach: OCC.wrapper.Interface.Handle_Interface_Check
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_Protocol_GlobalCheck(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_Protocol self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_Protocol_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_Protocol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_Protocol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_Protocol_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_Protocol self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_Protocol self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_Protocol_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_Protocol self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_Protocol_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_Protocol self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_Protocol_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_Protocol self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_Protocol_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_Protocol self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_Protocol_DecrementRefCounter(self, *args)

Handle_StepAP214_Protocol_swigregister = _StepAP214.Handle_StepAP214_Protocol_swigregister
Handle_StepAP214_Protocol_swigregister(Handle_StepAP214_Protocol)

def Handle_StepAP214_Protocol_DownCast(thing):
    return _StepAP214.Handle_StepAP214_Protocol_DownCast(thing)
Handle_StepAP214_Protocol_DownCast = _StepAP214.Handle_StepAP214_Protocol_DownCast

class NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem self) -> NCollection_Array1< StepAP214_AutoDesignDateAndPersonItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem self) -> NCollection_Array1< StepAP214_AutoDesignDateAndPersonItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem self) -> NCollection_Array1< StepAP214_AutoDesignDateAndPersonItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem self) -> NCollection_Array1< StepAP214_AutoDesignDateAndPersonItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP214.new_NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem self, StepAP214_AutoDesignDateAndPersonItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem self, NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem theOther) -> NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem self, NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem theOther) -> NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem self, NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem theOther) -> NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem
        assign(NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem self, NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem theOther) -> NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem self) -> StepAP214_AutoDesignDateAndPersonItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem self) -> StepAP214_AutoDesignDateAndPersonItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem self, Standard_Integer const theIndex) -> StepAP214_AutoDesignDateAndPersonItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem self, Standard_Integer const theIndex, StepAP214_AutoDesignDateAndPersonItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_Resize(self, *args)

    __swig_destroy__ = _StepAP214.delete_NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem
NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_swigregister = _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_swigregister
NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem_swigregister(NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem)


try:
	StepAP214_Array1OfAutoDesignDateAndPersonItem = NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem
except NameError:
	pass # does not exist, probably ignored

class Handle_StepAP214_AppliedApprovalAssignment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_AppliedApprovalAssignment self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_AppliedApprovalAssignment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_AppliedApprovalAssignment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_AppliedApprovalAssignment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_AppliedApprovalAssignment self, StepAP214_AppliedApprovalAssignment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedApprovalAssignment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_AppliedApprovalAssignment self, Handle_StepAP214_AppliedApprovalAssignment theHandle) -> Handle_StepAP214_AppliedApprovalAssignment
        assign(Handle_StepAP214_AppliedApprovalAssignment self, StepAP214_AppliedApprovalAssignment thePtr) -> Handle_StepAP214_AppliedApprovalAssignment
        assign(Handle_StepAP214_AppliedApprovalAssignment self, Handle_StepAP214_AppliedApprovalAssignment theHandle) -> Handle_StepAP214_AppliedApprovalAssignment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_AppliedApprovalAssignment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_AppliedApprovalAssignment self) -> StepAP214_AppliedApprovalAssignment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedApprovalAssignment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_AppliedApprovalAssignment self) -> StepAP214_AppliedApprovalAssignment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedApprovalAssignment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_AppliedApprovalAssignment self) -> StepAP214_AppliedApprovalAssignment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_AppliedApprovalAssignment___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_AppliedApprovalAssignment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_AppliedApprovalAssignment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_AppliedApprovalAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_AppliedApprovalAssignment_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_AppliedApprovalAssignment

    def Init(self, *args):
        """
        Init(Handle_StepAP214_AppliedApprovalAssignment self, Handle_StepBasic_Approval aAssignedApproval, Handle_StepAP214_HArray1OfApprovalItem aItems)

        :type aAssignedApproval: OCC.wrapper.StepBasic.Handle_StepBasic_Approval
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfApprovalItem

        """
        return _StepAP214.Handle_StepAP214_AppliedApprovalAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP214_AppliedApprovalAssignment self, Handle_StepAP214_HArray1OfApprovalItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfApprovalItem

        """
        return _StepAP214.Handle_StepAP214_AppliedApprovalAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP214_AppliedApprovalAssignment self) -> Handle_StepAP214_HArray1OfApprovalItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfApprovalItem

        """
        return _StepAP214.Handle_StepAP214_AppliedApprovalAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(Handle_StepAP214_AppliedApprovalAssignment self, Standard_Integer const num) -> StepAP214_ApprovalItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_ApprovalItem

        """
        return _StepAP214.Handle_StepAP214_AppliedApprovalAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(Handle_StepAP214_AppliedApprovalAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedApprovalAssignment_NbItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_AppliedApprovalAssignment self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_AppliedApprovalAssignment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AppliedApprovalAssignment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AppliedApprovalAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAssignedApproval(self, *args):
        """
        SetAssignedApproval(Handle_StepAP214_AppliedApprovalAssignment self, Handle_StepBasic_Approval aAssignedApproval)

        :type aAssignedApproval: OCC.wrapper.StepBasic.Handle_StepBasic_Approval

        """
        return _StepAP214.Handle_StepAP214_AppliedApprovalAssignment_SetAssignedApproval(self, *args)


    def AssignedApproval(self, *args):
        """
        AssignedApproval(Handle_StepAP214_AppliedApprovalAssignment self) -> Handle_StepBasic_Approval

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Approval

        """
        return _StepAP214.Handle_StepAP214_AppliedApprovalAssignment_AssignedApproval(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_AppliedApprovalAssignment self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_AppliedApprovalAssignment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_AppliedApprovalAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_AppliedApprovalAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AppliedApprovalAssignment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_AppliedApprovalAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_AppliedApprovalAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AppliedApprovalAssignment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_AppliedApprovalAssignment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_AppliedApprovalAssignment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_AppliedApprovalAssignment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedApprovalAssignment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_AppliedApprovalAssignment self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_AppliedApprovalAssignment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_AppliedApprovalAssignment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedApprovalAssignment_DecrementRefCounter(self, *args)

Handle_StepAP214_AppliedApprovalAssignment_swigregister = _StepAP214.Handle_StepAP214_AppliedApprovalAssignment_swigregister
Handle_StepAP214_AppliedApprovalAssignment_swigregister(Handle_StepAP214_AppliedApprovalAssignment)

def Handle_StepAP214_AppliedApprovalAssignment_DownCast(thing):
    return _StepAP214.Handle_StepAP214_AppliedApprovalAssignment_DownCast(thing)
Handle_StepAP214_AppliedApprovalAssignment_DownCast = _StepAP214.Handle_StepAP214_AppliedApprovalAssignment_DownCast

class NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem self) -> NCollection_Array1< StepAP214_AutoDesignDateAndTimeItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem self) -> NCollection_Array1< StepAP214_AutoDesignDateAndTimeItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem self) -> NCollection_Array1< StepAP214_AutoDesignDateAndTimeItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem self) -> NCollection_Array1< StepAP214_AutoDesignDateAndTimeItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP214.new_NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem self, StepAP214_AutoDesignDateAndTimeItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem self, NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem theOther) -> NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem self, NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem theOther) -> NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem self, NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem theOther) -> NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem
        assign(NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem self, NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem theOther) -> NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem self) -> StepAP214_AutoDesignDateAndTimeItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem self) -> StepAP214_AutoDesignDateAndTimeItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem self, Standard_Integer const theIndex) -> StepAP214_AutoDesignDateAndTimeItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem self, Standard_Integer const theIndex, StepAP214_AutoDesignDateAndTimeItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_Resize(self, *args)

    __swig_destroy__ = _StepAP214.delete_NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem
NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_swigregister = _StepAP214.NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_swigregister
NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem_swigregister(NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem)


try:
	StepAP214_Array1OfAutoDesignDateAndTimeItem = NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem
except NameError:
	pass # does not exist, probably ignored

class Handle_StepAP214_AutoDesignActualDateAssignment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_AutoDesignActualDateAssignment self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_AutoDesignActualDateAssignment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_AutoDesignActualDateAssignment self, StepAP214_AutoDesignActualDateAssignment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_AutoDesignActualDateAssignment self, Handle_StepAP214_AutoDesignActualDateAssignment theHandle) -> Handle_StepAP214_AutoDesignActualDateAssignment
        assign(Handle_StepAP214_AutoDesignActualDateAssignment self, StepAP214_AutoDesignActualDateAssignment thePtr) -> Handle_StepAP214_AutoDesignActualDateAssignment
        assign(Handle_StepAP214_AutoDesignActualDateAssignment self, Handle_StepAP214_AutoDesignActualDateAssignment theHandle) -> Handle_StepAP214_AutoDesignActualDateAssignment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_AutoDesignActualDateAssignment self) -> StepAP214_AutoDesignActualDateAssignment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_AutoDesignActualDateAssignment self) -> StepAP214_AutoDesignActualDateAssignment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_AutoDesignActualDateAssignment self) -> StepAP214_AutoDesignActualDateAssignment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_AutoDesignActualDateAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_AutoDesignActualDateAssignment

    def Init(self, *args):
        """
        Init(Handle_StepAP214_AutoDesignActualDateAssignment self, Handle_StepBasic_Date aAssignedDate, Handle_StepBasic_DateRole aRole, Handle_StepAP214_HArray1OfAutoDesignDatedItem aItems)

        :type aAssignedDate: OCC.wrapper.StepBasic.Handle_StepBasic_Date
        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_DateRole
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP214_AutoDesignActualDateAssignment self, Handle_StepAP214_HArray1OfAutoDesignDatedItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP214_AutoDesignActualDateAssignment self) -> Handle_StepAP214_HArray1OfAutoDesignDatedItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(Handle_StepAP214_AutoDesignActualDateAssignment self, Standard_Integer const num) -> StepAP214_AutoDesignDatedItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_AutoDesignDatedItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(Handle_StepAP214_AutoDesignActualDateAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_NbItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_AutoDesignActualDateAssignment self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAssignedDate(self, *args):
        """
        SetAssignedDate(Handle_StepAP214_AutoDesignActualDateAssignment self, Handle_StepBasic_Date aAssignedDate)

        :type aAssignedDate: OCC.wrapper.StepBasic.Handle_StepBasic_Date

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_SetAssignedDate(self, *args)


    def AssignedDate(self, *args):
        """
        AssignedDate(Handle_StepAP214_AutoDesignActualDateAssignment self) -> Handle_StepBasic_Date

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Date

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_AssignedDate(self, *args)


    def SetRole(self, *args):
        """
        SetRole(Handle_StepAP214_AutoDesignActualDateAssignment self, Handle_StepBasic_DateRole aRole)

        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_DateRole

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_SetRole(self, *args)


    def Role(self, *args):
        """
        Role(Handle_StepAP214_AutoDesignActualDateAssignment self) -> Handle_StepBasic_DateRole

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_DateRole

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_Role(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_AutoDesignActualDateAssignment self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_AutoDesignActualDateAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_AutoDesignActualDateAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_AutoDesignActualDateAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_AutoDesignActualDateAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_AutoDesignActualDateAssignment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_AutoDesignActualDateAssignment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_AutoDesignActualDateAssignment self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_AutoDesignActualDateAssignment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_DecrementRefCounter(self, *args)

Handle_StepAP214_AutoDesignActualDateAssignment_swigregister = _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_swigregister
Handle_StepAP214_AutoDesignActualDateAssignment_swigregister(Handle_StepAP214_AutoDesignActualDateAssignment)

def Handle_StepAP214_AutoDesignActualDateAssignment_DownCast(thing):
    return _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_DownCast(thing)
Handle_StepAP214_AutoDesignActualDateAssignment_DownCast = _StepAP214.Handle_StepAP214_AutoDesignActualDateAssignment_DownCast

class NCollection_Array1_StepAP214_GroupItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP214_GroupItem self) -> NCollection_Array1< StepAP214_GroupItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_GroupItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP214_GroupItem self) -> NCollection_Array1< StepAP214_GroupItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_GroupItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP214_GroupItem self) -> NCollection_Array1< StepAP214_GroupItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_GroupItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP214_GroupItem self) -> NCollection_Array1< StepAP214_GroupItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_GroupItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP214.new_NCollection_Array1_StepAP214_GroupItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP214_GroupItem self, StepAP214_GroupItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_GroupItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP214_GroupItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_GroupItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP214_GroupItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_GroupItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP214_GroupItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_GroupItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP214_GroupItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_GroupItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP214_GroupItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_GroupItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP214_GroupItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_GroupItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP214_GroupItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_GroupItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP214_GroupItem self, NCollection_Array1_StepAP214_GroupItem theOther) -> NCollection_Array1_StepAP214_GroupItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_GroupItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP214_GroupItem self, NCollection_Array1_StepAP214_GroupItem theOther) -> NCollection_Array1_StepAP214_GroupItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_GroupItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP214_GroupItem self, NCollection_Array1_StepAP214_GroupItem theOther) -> NCollection_Array1_StepAP214_GroupItem
        assign(NCollection_Array1_StepAP214_GroupItem self, NCollection_Array1_StepAP214_GroupItem theOther) -> NCollection_Array1_StepAP214_GroupItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_GroupItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_GroupItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP214_GroupItem self) -> StepAP214_GroupItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_GroupItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_GroupItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP214_GroupItem self) -> StepAP214_GroupItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_GroupItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_GroupItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP214_GroupItem self, Standard_Integer const theIndex) -> StepAP214_GroupItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_GroupItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_GroupItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_GroupItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP214_GroupItem self, Standard_Integer const theIndex, StepAP214_GroupItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_GroupItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP214_GroupItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP214.NCollection_Array1_StepAP214_GroupItem_Resize(self, *args)

    __swig_destroy__ = _StepAP214.delete_NCollection_Array1_StepAP214_GroupItem
NCollection_Array1_StepAP214_GroupItem_swigregister = _StepAP214.NCollection_Array1_StepAP214_GroupItem_swigregister
NCollection_Array1_StepAP214_GroupItem_swigregister(NCollection_Array1_StepAP214_GroupItem)


try:
	StepAP214_Array1OfGroupItem = NCollection_Array1_StepAP214_GroupItem
except NameError:
	pass # does not exist, probably ignored

class Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem self, StepAP214_HArray1OfAutoDesignDateAndPersonItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem self, Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem theHandle) -> Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem
        assign(Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem self, StepAP214_HArray1OfAutoDesignDateAndPersonItem thePtr) -> Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem
        assign(Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem self, Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem theHandle) -> Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem self) -> StepAP214_HArray1OfAutoDesignDateAndPersonItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem self) -> StepAP214_HArray1OfAutoDesignDateAndPersonItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem self) -> StepAP214_HArray1OfAutoDesignDateAndPersonItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignDateAndPersonItem

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem self) -> NCollection_Array1_StepAP214_AutoDesignDateAndPersonItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignDateAndPersonItem

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem_DecrementRefCounter(self, *args)

Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem_swigregister = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem_swigregister
Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem_swigregister(Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem)

def Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem_DownCast(thing):
    return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem_DownCast(thing)
Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem_DownCast = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem_DownCast

class NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem self) -> NCollection_Array1< StepAP214_AutoDesignGeneralOrgItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem self) -> NCollection_Array1< StepAP214_AutoDesignGeneralOrgItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem self) -> NCollection_Array1< StepAP214_AutoDesignGeneralOrgItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem self) -> NCollection_Array1< StepAP214_AutoDesignGeneralOrgItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP214.new_NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem self, StepAP214_AutoDesignGeneralOrgItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem self, NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem theOther) -> NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem self, NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem theOther) -> NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem self, NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem theOther) -> NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem
        assign(NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem self, NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem theOther) -> NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem self) -> StepAP214_AutoDesignGeneralOrgItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem self) -> StepAP214_AutoDesignGeneralOrgItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem self, Standard_Integer const theIndex) -> StepAP214_AutoDesignGeneralOrgItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem self, Standard_Integer const theIndex, StepAP214_AutoDesignGeneralOrgItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_Resize(self, *args)

    __swig_destroy__ = _StepAP214.delete_NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem
NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_swigregister = _StepAP214.NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_swigregister
NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem_swigregister(NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem)


try:
	StepAP214_Array1OfAutoDesignGeneralOrgItem = NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem
except NameError:
	pass # does not exist, probably ignored

class StepAP214_(object):
    """
    Complete AP214 CC1 , Revision 4
    Upgrading from Revision 2 to Revision 4 : 26 Mar 1997
    Splitting in sub-schemas : 5 Nov 1997
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Protocol(*args):
        """
        Protocol() -> Handle_StepAP214_Protocol

        creates a Protocol

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_Protocol

        """
        return _StepAP214.StepAP214__Protocol(*args)

    Protocol = staticmethod(Protocol)

    def __init__(self):
        """
        Complete AP214 CC1 , Revision 4
        Upgrading from Revision 2 to Revision 4 : 26 Mar 1997
        Splitting in sub-schemas : 5 Nov 1997
        """
        this = _StepAP214.new_StepAP214_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _StepAP214.delete_StepAP214_
StepAP214__swigregister = _StepAP214.StepAP214__swigregister
StepAP214__swigregister(StepAP214_)

def StepAP214__Protocol(*args):
    """
    StepAP214__Protocol() -> Handle_StepAP214_Protocol

    creates a Protocol

    :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_Protocol

    """
    return _StepAP214.StepAP214__Protocol(*args)

class StepAP214_RepItemGroup(StepBasic.StepBasic_Group):
    """Representation of STEP entity RepItemGroup"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_RepItemGroup
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_RepItemGroup(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_RepItemGroup self) -> StepAP214_RepItemGroup

        Empty constructor


        """
        this = _StepAP214.new_StepAP214_RepItemGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP214_RepItemGroup self, Handle_TCollection_HAsciiString aGroup_Name, Standard_Boolean const hasGroup_Description, Handle_TCollection_HAsciiString aGroup_Description, Handle_TCollection_HAsciiString aRepresentationItem_Name)

        Initialize all fields (own and inherited)

        :type aGroup_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasGroup_Description: bool
        :type aGroup_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aRepresentationItem_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.StepAP214_RepItemGroup_Init(self, *args)


    def RepresentationItem(self, *args):
        """
        RepresentationItem(StepAP214_RepItemGroup self) -> Handle_StepRepr_RepresentationItem

        Returns data for supertype RepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepAP214.StepAP214_RepItemGroup_RepresentationItem(self, *args)


    def SetRepresentationItem(self, *args):
        """
        SetRepresentationItem(StepAP214_RepItemGroup self, Handle_StepRepr_RepresentationItem RepresentationItem)

        Set data for supertype RepresentationItem

        :type RepresentationItem: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepAP214.StepAP214_RepItemGroup_SetRepresentationItem(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_RepItemGroup_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_RepItemGroup_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_RepItemGroup_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_RepItemGroup
StepAP214_RepItemGroup_swigregister = _StepAP214.StepAP214_RepItemGroup_swigregister
StepAP214_RepItemGroup_swigregister(StepAP214_RepItemGroup)

def StepAP214_RepItemGroup_get_type_name(*args):
    """
    StepAP214_RepItemGroup_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_RepItemGroup_get_type_name(*args)

def StepAP214_RepItemGroup_get_type_descriptor(*args):
    """
    StepAP214_RepItemGroup_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_RepItemGroup_get_type_descriptor(*args)

class Handle_StepAP214_HArray1OfAutoDesignGroupedItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_HArray1OfAutoDesignGroupedItem self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_HArray1OfAutoDesignGroupedItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_HArray1OfAutoDesignGroupedItem self, StepAP214_HArray1OfAutoDesignGroupedItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_HArray1OfAutoDesignGroupedItem self, Handle_StepAP214_HArray1OfAutoDesignGroupedItem theHandle) -> Handle_StepAP214_HArray1OfAutoDesignGroupedItem
        assign(Handle_StepAP214_HArray1OfAutoDesignGroupedItem self, StepAP214_HArray1OfAutoDesignGroupedItem thePtr) -> Handle_StepAP214_HArray1OfAutoDesignGroupedItem
        assign(Handle_StepAP214_HArray1OfAutoDesignGroupedItem self, Handle_StepAP214_HArray1OfAutoDesignGroupedItem theHandle) -> Handle_StepAP214_HArray1OfAutoDesignGroupedItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_HArray1OfAutoDesignGroupedItem self) -> StepAP214_HArray1OfAutoDesignGroupedItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_HArray1OfAutoDesignGroupedItem self) -> StepAP214_HArray1OfAutoDesignGroupedItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_HArray1OfAutoDesignGroupedItem self) -> StepAP214_HArray1OfAutoDesignGroupedItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_HArray1OfAutoDesignGroupedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_HArray1OfAutoDesignGroupedItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignGroupedItem

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP214_HArray1OfAutoDesignGroupedItem self) -> NCollection_Array1_StepAP214_AutoDesignGroupedItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignGroupedItem

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_HArray1OfAutoDesignGroupedItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_HArray1OfAutoDesignGroupedItem self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_HArray1OfAutoDesignGroupedItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_HArray1OfAutoDesignGroupedItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_HArray1OfAutoDesignGroupedItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_HArray1OfAutoDesignGroupedItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_HArray1OfAutoDesignGroupedItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_HArray1OfAutoDesignGroupedItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_HArray1OfAutoDesignGroupedItem self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_HArray1OfAutoDesignGroupedItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem_DecrementRefCounter(self, *args)

Handle_StepAP214_HArray1OfAutoDesignGroupedItem_swigregister = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem_swigregister
Handle_StepAP214_HArray1OfAutoDesignGroupedItem_swigregister(Handle_StepAP214_HArray1OfAutoDesignGroupedItem)

def Handle_StepAP214_HArray1OfAutoDesignGroupedItem_DownCast(thing):
    return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem_DownCast(thing)
Handle_StepAP214_HArray1OfAutoDesignGroupedItem_DownCast = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem_DownCast

class StepAP214_AutoDesignPersonAndOrganizationAssignment(StepBasic.StepBasic_PersonAndOrganizationAssignment):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_AutoDesignPersonAndOrganizationAssignment self) -> StepAP214_AutoDesignPersonAndOrganizationAssignment

        Returns a AutoDesignPersonAndOrganizationAssignment


        """
        this = _StepAP214.new_StepAP214_AutoDesignPersonAndOrganizationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP214_AutoDesignPersonAndOrganizationAssignment self, Handle_StepBasic_PersonAndOrganization aAssignedPersonAndOrganization, Handle_StepBasic_PersonAndOrganizationRole aRole, Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem aItems)

        :type aAssignedPersonAndOrganization: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganization
        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganizationRole
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

        """
        return _StepAP214.StepAP214_AutoDesignPersonAndOrganizationAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP214_AutoDesignPersonAndOrganizationAssignment self, Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

        """
        return _StepAP214.StepAP214_AutoDesignPersonAndOrganizationAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(StepAP214_AutoDesignPersonAndOrganizationAssignment self) -> Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

        """
        return _StepAP214.StepAP214_AutoDesignPersonAndOrganizationAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(StepAP214_AutoDesignPersonAndOrganizationAssignment self, Standard_Integer const num) -> StepAP214_AutoDesignGeneralOrgItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_AutoDesignGeneralOrgItem

        """
        return _StepAP214.StepAP214_AutoDesignPersonAndOrganizationAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(StepAP214_AutoDesignPersonAndOrganizationAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AutoDesignPersonAndOrganizationAssignment_NbItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_AutoDesignPersonAndOrganizationAssignment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_AutoDesignPersonAndOrganizationAssignment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_AutoDesignPersonAndOrganizationAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_AutoDesignPersonAndOrganizationAssignment
StepAP214_AutoDesignPersonAndOrganizationAssignment_swigregister = _StepAP214.StepAP214_AutoDesignPersonAndOrganizationAssignment_swigregister
StepAP214_AutoDesignPersonAndOrganizationAssignment_swigregister(StepAP214_AutoDesignPersonAndOrganizationAssignment)

def StepAP214_AutoDesignPersonAndOrganizationAssignment_get_type_name(*args):
    """
    StepAP214_AutoDesignPersonAndOrganizationAssignment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_AutoDesignPersonAndOrganizationAssignment_get_type_name(*args)

def StepAP214_AutoDesignPersonAndOrganizationAssignment_get_type_descriptor(*args):
    """
    StepAP214_AutoDesignPersonAndOrganizationAssignment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_AutoDesignPersonAndOrganizationAssignment_get_type_descriptor(*args)

class Handle_StepAP214_AppliedDateAndTimeAssignment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_AppliedDateAndTimeAssignment self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_AppliedDateAndTimeAssignment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_AppliedDateAndTimeAssignment self, StepAP214_AppliedDateAndTimeAssignment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_AppliedDateAndTimeAssignment self, Handle_StepAP214_AppliedDateAndTimeAssignment theHandle) -> Handle_StepAP214_AppliedDateAndTimeAssignment
        assign(Handle_StepAP214_AppliedDateAndTimeAssignment self, StepAP214_AppliedDateAndTimeAssignment thePtr) -> Handle_StepAP214_AppliedDateAndTimeAssignment
        assign(Handle_StepAP214_AppliedDateAndTimeAssignment self, Handle_StepAP214_AppliedDateAndTimeAssignment theHandle) -> Handle_StepAP214_AppliedDateAndTimeAssignment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_AppliedDateAndTimeAssignment self) -> StepAP214_AppliedDateAndTimeAssignment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_AppliedDateAndTimeAssignment self) -> StepAP214_AppliedDateAndTimeAssignment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_AppliedDateAndTimeAssignment self) -> StepAP214_AppliedDateAndTimeAssignment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_AppliedDateAndTimeAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_AppliedDateAndTimeAssignment

    def Init(self, *args):
        """
        Init(Handle_StepAP214_AppliedDateAndTimeAssignment self, Handle_StepBasic_DateAndTime aAssignedDateAndTime, Handle_StepBasic_DateTimeRole aRole, Handle_StepAP214_HArray1OfDateAndTimeItem aItems)

        :type aAssignedDateAndTime: OCC.wrapper.StepBasic.Handle_StepBasic_DateAndTime
        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_DateTimeRole
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP214_AppliedDateAndTimeAssignment self, Handle_StepAP214_HArray1OfDateAndTimeItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP214_AppliedDateAndTimeAssignment self) -> Handle_StepAP214_HArray1OfDateAndTimeItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(Handle_StepAP214_AppliedDateAndTimeAssignment self, Standard_Integer const num) -> StepAP214_DateAndTimeItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_DateAndTimeItem

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(Handle_StepAP214_AppliedDateAndTimeAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_NbItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_AppliedDateAndTimeAssignment self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAssignedDateAndTime(self, *args):
        """
        SetAssignedDateAndTime(Handle_StepAP214_AppliedDateAndTimeAssignment self, Handle_StepBasic_DateAndTime aAssignedDateAndTime)

        :type aAssignedDateAndTime: OCC.wrapper.StepBasic.Handle_StepBasic_DateAndTime

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_SetAssignedDateAndTime(self, *args)


    def AssignedDateAndTime(self, *args):
        """
        AssignedDateAndTime(Handle_StepAP214_AppliedDateAndTimeAssignment self) -> Handle_StepBasic_DateAndTime

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_DateAndTime

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_AssignedDateAndTime(self, *args)


    def SetRole(self, *args):
        """
        SetRole(Handle_StepAP214_AppliedDateAndTimeAssignment self, Handle_StepBasic_DateTimeRole aRole)

        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_DateTimeRole

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_SetRole(self, *args)


    def Role(self, *args):
        """
        Role(Handle_StepAP214_AppliedDateAndTimeAssignment self) -> Handle_StepBasic_DateTimeRole

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_DateTimeRole

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_Role(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_AppliedDateAndTimeAssignment self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_AppliedDateAndTimeAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_AppliedDateAndTimeAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_AppliedDateAndTimeAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_AppliedDateAndTimeAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_AppliedDateAndTimeAssignment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_AppliedDateAndTimeAssignment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_AppliedDateAndTimeAssignment self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_AppliedDateAndTimeAssignment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_DecrementRefCounter(self, *args)

Handle_StepAP214_AppliedDateAndTimeAssignment_swigregister = _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_swigregister
Handle_StepAP214_AppliedDateAndTimeAssignment_swigregister(Handle_StepAP214_AppliedDateAndTimeAssignment)

def Handle_StepAP214_AppliedDateAndTimeAssignment_DownCast(thing):
    return _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_DownCast(thing)
Handle_StepAP214_AppliedDateAndTimeAssignment_DownCast = _StepAP214.Handle_StepAP214_AppliedDateAndTimeAssignment_DownCast

class NCollection_Array1_StepAP214_DateItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP214_DateItem self) -> NCollection_Array1< StepAP214_DateItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP214_DateItem self) -> NCollection_Array1< StepAP214_DateItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP214_DateItem self) -> NCollection_Array1< StepAP214_DateItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP214_DateItem self) -> NCollection_Array1< StepAP214_DateItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP214.new_NCollection_Array1_StepAP214_DateItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP214_DateItem self, StepAP214_DateItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP214_DateItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP214_DateItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP214_DateItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP214_DateItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP214_DateItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP214_DateItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP214_DateItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP214_DateItem self, NCollection_Array1_StepAP214_DateItem theOther) -> NCollection_Array1_StepAP214_DateItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP214_DateItem self, NCollection_Array1_StepAP214_DateItem theOther) -> NCollection_Array1_StepAP214_DateItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP214_DateItem self, NCollection_Array1_StepAP214_DateItem theOther) -> NCollection_Array1_StepAP214_DateItem
        assign(NCollection_Array1_StepAP214_DateItem self, NCollection_Array1_StepAP214_DateItem theOther) -> NCollection_Array1_StepAP214_DateItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_DateItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP214_DateItem self) -> StepAP214_DateItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_DateItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP214_DateItem self) -> StepAP214_DateItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_DateItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP214_DateItem self, Standard_Integer const theIndex) -> StepAP214_DateItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_DateItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_DateItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP214_DateItem self, Standard_Integer const theIndex, StepAP214_DateItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP214_DateItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateItem_Resize(self, *args)

    __swig_destroy__ = _StepAP214.delete_NCollection_Array1_StepAP214_DateItem
NCollection_Array1_StepAP214_DateItem_swigregister = _StepAP214.NCollection_Array1_StepAP214_DateItem_swigregister
NCollection_Array1_StepAP214_DateItem_swigregister(NCollection_Array1_StepAP214_DateItem)


try:
	StepAP214_Array1OfDateItem = NCollection_Array1_StepAP214_DateItem
except NameError:
	pass # does not exist, probably ignored

class Handle_StepAP214_AppliedDocumentReference(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_AppliedDocumentReference self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_AppliedDocumentReference self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_AppliedDocumentReference self, StepAP214_AppliedDocumentReference thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_AppliedDocumentReference self, Handle_StepAP214_AppliedDocumentReference theHandle) -> Handle_StepAP214_AppliedDocumentReference
        assign(Handle_StepAP214_AppliedDocumentReference self, StepAP214_AppliedDocumentReference thePtr) -> Handle_StepAP214_AppliedDocumentReference
        assign(Handle_StepAP214_AppliedDocumentReference self, Handle_StepAP214_AppliedDocumentReference theHandle) -> Handle_StepAP214_AppliedDocumentReference

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_AppliedDocumentReference self) -> StepAP214_AppliedDocumentReference

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_AppliedDocumentReference self) -> StepAP214_AppliedDocumentReference

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_AppliedDocumentReference self) -> StepAP214_AppliedDocumentReference

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_AppliedDocumentReference___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_AppliedDocumentReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_AppliedDocumentReference_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_AppliedDocumentReference

    def Init(self, *args):
        """
        Init(Handle_StepAP214_AppliedDocumentReference self, Handle_StepBasic_Document aAssignedDocument, Handle_TCollection_HAsciiString aSource, Handle_StepAP214_HArray1OfDocumentReferenceItem aItems)

        :type aAssignedDocument: OCC.wrapper.StepBasic.Handle_StepBasic_Document
        :type aSource: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem

        """
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference_Init(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP214_AppliedDocumentReference self) -> Handle_StepAP214_HArray1OfDocumentReferenceItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem

        """
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP214_AppliedDocumentReference self, Handle_StepAP214_HArray1OfDocumentReferenceItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem

        """
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference_SetItems(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(Handle_StepAP214_AppliedDocumentReference self, Standard_Integer const num) -> StepAP214_DocumentReferenceItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_DocumentReferenceItem

        """
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(Handle_StepAP214_AppliedDocumentReference self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference_NbItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_AppliedDocumentReference self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AppliedDocumentReference_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AppliedDocumentReference_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init0(self, *args):
        """
        Init0(Handle_StepAP214_AppliedDocumentReference self, Handle_StepBasic_Document aAssignedDocument, Handle_TCollection_HAsciiString aSource)

        :type aAssignedDocument: OCC.wrapper.StepBasic.Handle_StepBasic_Document
        :type aSource: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference_Init0(self, *args)


    def AssignedDocument(self, *args):
        """
        AssignedDocument(Handle_StepAP214_AppliedDocumentReference self) -> Handle_StepBasic_Document

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Document

        """
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference_AssignedDocument(self, *args)


    def SetAssignedDocument(self, *args):
        """
        SetAssignedDocument(Handle_StepAP214_AppliedDocumentReference self, Handle_StepBasic_Document aAssignedDocument)

        :type aAssignedDocument: OCC.wrapper.StepBasic.Handle_StepBasic_Document

        """
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference_SetAssignedDocument(self, *args)


    def Source(self, *args):
        """
        Source(Handle_StepAP214_AppliedDocumentReference self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference_Source(self, *args)


    def SetSource(self, *args):
        """
        SetSource(Handle_StepAP214_AppliedDocumentReference self, Handle_TCollection_HAsciiString aSource)

        :type aSource: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference_SetSource(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_AppliedDocumentReference self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_AppliedDocumentReference self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_AppliedDocumentReference self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_AppliedDocumentReference self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_AppliedDocumentReference self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_AppliedDocumentReference self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_AppliedDocumentReference self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_AppliedDocumentReference self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_AppliedDocumentReference self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedDocumentReference_DecrementRefCounter(self, *args)

Handle_StepAP214_AppliedDocumentReference_swigregister = _StepAP214.Handle_StepAP214_AppliedDocumentReference_swigregister
Handle_StepAP214_AppliedDocumentReference_swigregister(Handle_StepAP214_AppliedDocumentReference)

def Handle_StepAP214_AppliedDocumentReference_DownCast(thing):
    return _StepAP214.Handle_StepAP214_AppliedDocumentReference_DownCast(thing)
Handle_StepAP214_AppliedDocumentReference_DownCast = _StepAP214.Handle_StepAP214_AppliedDocumentReference_DownCast

class StepAP214_HArray1OfAutoDesignDatedItem(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_HArray1OfAutoDesignDatedItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_HArray1OfAutoDesignDatedItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_HArray1OfAutoDesignDatedItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP214_HArray1OfAutoDesignDatedItem
        __init__(StepAP214_HArray1OfAutoDesignDatedItem self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP214_AutoDesignDatedItem theValue) -> StepAP214_HArray1OfAutoDesignDatedItem
        __init__(StepAP214_HArray1OfAutoDesignDatedItem self, NCollection_Array1_StepAP214_AutoDesignDatedItem theOther) -> StepAP214_HArray1OfAutoDesignDatedItem

        :type theOther: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignDatedItem

        """
        this = _StepAP214.new_StepAP214_HArray1OfAutoDesignDatedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignDatedItem

        """
        res = _StepAP214.StepAP214_HArray1OfAutoDesignDatedItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP214_HArray1OfAutoDesignDatedItem self) -> NCollection_Array1_StepAP214_AutoDesignDatedItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignDatedItem

        """
        return _StepAP214.StepAP214_HArray1OfAutoDesignDatedItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_HArray1OfAutoDesignDatedItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_HArray1OfAutoDesignDatedItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_HArray1OfAutoDesignDatedItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_HArray1OfAutoDesignDatedItem
StepAP214_HArray1OfAutoDesignDatedItem_swigregister = _StepAP214.StepAP214_HArray1OfAutoDesignDatedItem_swigregister
StepAP214_HArray1OfAutoDesignDatedItem_swigregister(StepAP214_HArray1OfAutoDesignDatedItem)

def StepAP214_HArray1OfAutoDesignDatedItem_get_type_name(*args):
    """
    StepAP214_HArray1OfAutoDesignDatedItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_HArray1OfAutoDesignDatedItem_get_type_name(*args)

def StepAP214_HArray1OfAutoDesignDatedItem_get_type_descriptor(*args):
    """
    StepAP214_HArray1OfAutoDesignDatedItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_HArray1OfAutoDesignDatedItem_get_type_descriptor(*args)

class Handle_StepAP214_AutoDesignPresentedItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_AutoDesignPresentedItem self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_AutoDesignPresentedItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_AutoDesignPresentedItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPresentedItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_AutoDesignPresentedItem self, StepAP214_AutoDesignPresentedItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPresentedItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_AutoDesignPresentedItem self, Handle_StepAP214_AutoDesignPresentedItem theHandle) -> Handle_StepAP214_AutoDesignPresentedItem
        assign(Handle_StepAP214_AutoDesignPresentedItem self, StepAP214_AutoDesignPresentedItem thePtr) -> Handle_StepAP214_AutoDesignPresentedItem
        assign(Handle_StepAP214_AutoDesignPresentedItem self, Handle_StepAP214_AutoDesignPresentedItem theHandle) -> Handle_StepAP214_AutoDesignPresentedItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPresentedItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_AutoDesignPresentedItem self) -> StepAP214_AutoDesignPresentedItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPresentedItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_AutoDesignPresentedItem self) -> StepAP214_AutoDesignPresentedItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPresentedItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_AutoDesignPresentedItem self) -> StepAP214_AutoDesignPresentedItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPresentedItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_AutoDesignPresentedItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_AutoDesignPresentedItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_AutoDesignPresentedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_AutoDesignPresentedItem_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_AutoDesignPresentedItem

    def Init(self, *args):
        """
        Init(Handle_StepAP214_AutoDesignPresentedItem self, Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPresentedItem_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP214_AutoDesignPresentedItem self, Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPresentedItem_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP214_AutoDesignPresentedItem self) -> Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPresentedItem_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(Handle_StepAP214_AutoDesignPresentedItem self, Standard_Integer const num) -> StepAP214_AutoDesignPresentedItemSelect

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_AutoDesignPresentedItemSelect

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPresentedItem_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(Handle_StepAP214_AutoDesignPresentedItem self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPresentedItem_NbItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_AutoDesignPresentedItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPresentedItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AutoDesignPresentedItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AutoDesignPresentedItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_AutoDesignPresentedItem self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_AutoDesignPresentedItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_AutoDesignPresentedItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_AutoDesignPresentedItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPresentedItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_AutoDesignPresentedItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_AutoDesignPresentedItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPresentedItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_AutoDesignPresentedItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPresentedItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_AutoDesignPresentedItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPresentedItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_AutoDesignPresentedItem self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_AutoDesignPresentedItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_AutoDesignPresentedItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPresentedItem_DecrementRefCounter(self, *args)

Handle_StepAP214_AutoDesignPresentedItem_swigregister = _StepAP214.Handle_StepAP214_AutoDesignPresentedItem_swigregister
Handle_StepAP214_AutoDesignPresentedItem_swigregister(Handle_StepAP214_AutoDesignPresentedItem)

def Handle_StepAP214_AutoDesignPresentedItem_DownCast(thing):
    return _StepAP214.Handle_StepAP214_AutoDesignPresentedItem_DownCast(thing)
Handle_StepAP214_AutoDesignPresentedItem_DownCast = _StepAP214.Handle_StepAP214_AutoDesignPresentedItem_DownCast

class StepAP214_AutoDesignActualDateAndTimeAssignment(StepBasic.StepBasic_DateAndTimeAssignment):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_AutoDesignActualDateAndTimeAssignment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_AutoDesignActualDateAndTimeAssignment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_AutoDesignActualDateAndTimeAssignment self) -> StepAP214_AutoDesignActualDateAndTimeAssignment

        Returns a AutoDesignActualDateAndTimeAssignment


        """
        this = _StepAP214.new_StepAP214_AutoDesignActualDateAndTimeAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP214_AutoDesignActualDateAndTimeAssignment self, Handle_StepBasic_DateAndTime aAssignedDateAndTime, Handle_StepBasic_DateTimeRole aRole, Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem aItems)

        :type aAssignedDateAndTime: OCC.wrapper.StepBasic.Handle_StepBasic_DateAndTime
        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_DateTimeRole
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem

        """
        return _StepAP214.StepAP214_AutoDesignActualDateAndTimeAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP214_AutoDesignActualDateAndTimeAssignment self, Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem

        """
        return _StepAP214.StepAP214_AutoDesignActualDateAndTimeAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(StepAP214_AutoDesignActualDateAndTimeAssignment self) -> Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem

        """
        return _StepAP214.StepAP214_AutoDesignActualDateAndTimeAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(StepAP214_AutoDesignActualDateAndTimeAssignment self, Standard_Integer const num) -> StepAP214_AutoDesignDateAndTimeItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_AutoDesignDateAndTimeItem

        """
        return _StepAP214.StepAP214_AutoDesignActualDateAndTimeAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(StepAP214_AutoDesignActualDateAndTimeAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AutoDesignActualDateAndTimeAssignment_NbItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_AutoDesignActualDateAndTimeAssignment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_AutoDesignActualDateAndTimeAssignment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_AutoDesignActualDateAndTimeAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_AutoDesignActualDateAndTimeAssignment
StepAP214_AutoDesignActualDateAndTimeAssignment_swigregister = _StepAP214.StepAP214_AutoDesignActualDateAndTimeAssignment_swigregister
StepAP214_AutoDesignActualDateAndTimeAssignment_swigregister(StepAP214_AutoDesignActualDateAndTimeAssignment)

def StepAP214_AutoDesignActualDateAndTimeAssignment_get_type_name(*args):
    """
    StepAP214_AutoDesignActualDateAndTimeAssignment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_AutoDesignActualDateAndTimeAssignment_get_type_name(*args)

def StepAP214_AutoDesignActualDateAndTimeAssignment_get_type_descriptor(*args):
    """
    StepAP214_AutoDesignActualDateAndTimeAssignment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_AutoDesignActualDateAndTimeAssignment_get_type_descriptor(*args)

class NCollection_Array1_StepAP214_AutoDesignGroupedItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP214_AutoDesignGroupedItem self) -> NCollection_Array1< StepAP214_AutoDesignGroupedItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP214_AutoDesignGroupedItem self) -> NCollection_Array1< StepAP214_AutoDesignGroupedItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP214_AutoDesignGroupedItem self) -> NCollection_Array1< StepAP214_AutoDesignGroupedItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP214_AutoDesignGroupedItem self) -> NCollection_Array1< StepAP214_AutoDesignGroupedItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP214.new_NCollection_Array1_StepAP214_AutoDesignGroupedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP214_AutoDesignGroupedItem self, StepAP214_AutoDesignGroupedItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP214_AutoDesignGroupedItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP214_AutoDesignGroupedItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP214_AutoDesignGroupedItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP214_AutoDesignGroupedItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP214_AutoDesignGroupedItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP214_AutoDesignGroupedItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP214_AutoDesignGroupedItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP214_AutoDesignGroupedItem self, NCollection_Array1_StepAP214_AutoDesignGroupedItem theOther) -> NCollection_Array1_StepAP214_AutoDesignGroupedItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP214_AutoDesignGroupedItem self, NCollection_Array1_StepAP214_AutoDesignGroupedItem theOther) -> NCollection_Array1_StepAP214_AutoDesignGroupedItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP214_AutoDesignGroupedItem self, NCollection_Array1_StepAP214_AutoDesignGroupedItem theOther) -> NCollection_Array1_StepAP214_AutoDesignGroupedItem
        assign(NCollection_Array1_StepAP214_AutoDesignGroupedItem self, NCollection_Array1_StepAP214_AutoDesignGroupedItem theOther) -> NCollection_Array1_StepAP214_AutoDesignGroupedItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP214_AutoDesignGroupedItem self) -> StepAP214_AutoDesignGroupedItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP214_AutoDesignGroupedItem self) -> StepAP214_AutoDesignGroupedItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP214_AutoDesignGroupedItem self, Standard_Integer const theIndex) -> StepAP214_AutoDesignGroupedItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP214_AutoDesignGroupedItem self, Standard_Integer const theIndex, StepAP214_AutoDesignGroupedItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP214_AutoDesignGroupedItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem_Resize(self, *args)

    __swig_destroy__ = _StepAP214.delete_NCollection_Array1_StepAP214_AutoDesignGroupedItem
NCollection_Array1_StepAP214_AutoDesignGroupedItem_swigregister = _StepAP214.NCollection_Array1_StepAP214_AutoDesignGroupedItem_swigregister
NCollection_Array1_StepAP214_AutoDesignGroupedItem_swigregister(NCollection_Array1_StepAP214_AutoDesignGroupedItem)


try:
	StepAP214_Array1OfAutoDesignGroupedItem = NCollection_Array1_StepAP214_AutoDesignGroupedItem
except NameError:
	pass # does not exist, probably ignored

class StepAP214_HArray1OfPresentedItemSelect(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_HArray1OfPresentedItemSelect
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_HArray1OfPresentedItemSelect(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_HArray1OfPresentedItemSelect self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP214_HArray1OfPresentedItemSelect
        __init__(StepAP214_HArray1OfPresentedItemSelect self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP214_PresentedItemSelect theValue) -> StepAP214_HArray1OfPresentedItemSelect
        __init__(StepAP214_HArray1OfPresentedItemSelect self, NCollection_Array1_StepAP214_PresentedItemSelect theOther) -> StepAP214_HArray1OfPresentedItemSelect

        :type theOther: OCC.wrapper.StepAP214.StepAP214_Array1OfPresentedItemSelect

        """
        this = _StepAP214.new_StepAP214_HArray1OfPresentedItemSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfPresentedItemSelect

        """
        res = _StepAP214.StepAP214_HArray1OfPresentedItemSelect_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP214_HArray1OfPresentedItemSelect self) -> NCollection_Array1_StepAP214_PresentedItemSelect

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfPresentedItemSelect

        """
        return _StepAP214.StepAP214_HArray1OfPresentedItemSelect_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_HArray1OfPresentedItemSelect_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_HArray1OfPresentedItemSelect_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_HArray1OfPresentedItemSelect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_HArray1OfPresentedItemSelect
StepAP214_HArray1OfPresentedItemSelect_swigregister = _StepAP214.StepAP214_HArray1OfPresentedItemSelect_swigregister
StepAP214_HArray1OfPresentedItemSelect_swigregister(StepAP214_HArray1OfPresentedItemSelect)

def StepAP214_HArray1OfPresentedItemSelect_get_type_name(*args):
    """
    StepAP214_HArray1OfPresentedItemSelect_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_HArray1OfPresentedItemSelect_get_type_name(*args)

def StepAP214_HArray1OfPresentedItemSelect_get_type_descriptor(*args):
    """
    StepAP214_HArray1OfPresentedItemSelect_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_HArray1OfPresentedItemSelect_get_type_descriptor(*args)

class StepAP214_ExternallyDefinedClass(StepAP214_Class):
    """Representation of STEP entity ExternallyDefinedClass"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_ExternallyDefinedClass
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_ExternallyDefinedClass(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_ExternallyDefinedClass self) -> StepAP214_ExternallyDefinedClass

        Empty constructor


        """
        this = _StepAP214.new_StepAP214_ExternallyDefinedClass(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP214_ExternallyDefinedClass self, Handle_TCollection_HAsciiString aGroup_Name, Standard_Boolean const hasGroup_Description, Handle_TCollection_HAsciiString aGroup_Description, StepBasic_SourceItem aExternallyDefinedItem_ItemId, Handle_StepBasic_ExternalSource aExternallyDefinedItem_Source)

        Initialize all fields (own and inherited)

        :type aGroup_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasGroup_Description: bool
        :type aGroup_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aExternallyDefinedItem_ItemId: OCC.wrapper.StepBasic.StepBasic_SourceItem
        :type aExternallyDefinedItem_Source: OCC.wrapper.StepBasic.Handle_StepBasic_ExternalSource

        """
        return _StepAP214.StepAP214_ExternallyDefinedClass_Init(self, *args)


    def ExternallyDefinedItem(self, *args):
        """
        ExternallyDefinedItem(StepAP214_ExternallyDefinedClass self) -> Handle_StepBasic_ExternallyDefinedItem

        Returns data for supertype ExternallyDefinedItem

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ExternallyDefinedItem

        """
        return _StepAP214.StepAP214_ExternallyDefinedClass_ExternallyDefinedItem(self, *args)


    def SetExternallyDefinedItem(self, *args):
        """
        SetExternallyDefinedItem(StepAP214_ExternallyDefinedClass self, Handle_StepBasic_ExternallyDefinedItem ExternallyDefinedItem)

        Set data for supertype ExternallyDefinedItem

        :type ExternallyDefinedItem: OCC.wrapper.StepBasic.Handle_StepBasic_ExternallyDefinedItem

        """
        return _StepAP214.StepAP214_ExternallyDefinedClass_SetExternallyDefinedItem(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_ExternallyDefinedClass_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_ExternallyDefinedClass_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_ExternallyDefinedClass_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_ExternallyDefinedClass
StepAP214_ExternallyDefinedClass_swigregister = _StepAP214.StepAP214_ExternallyDefinedClass_swigregister
StepAP214_ExternallyDefinedClass_swigregister(StepAP214_ExternallyDefinedClass)

def StepAP214_ExternallyDefinedClass_get_type_name(*args):
    """
    StepAP214_ExternallyDefinedClass_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_ExternallyDefinedClass_get_type_name(*args)

def StepAP214_ExternallyDefinedClass_get_type_descriptor(*args):
    """
    StepAP214_ExternallyDefinedClass_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_ExternallyDefinedClass_get_type_descriptor(*args)

class Handle_StepAP214_AppliedDateAssignment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_AppliedDateAssignment self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_AppliedDateAssignment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_AppliedDateAssignment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAssignment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_AppliedDateAssignment self, StepAP214_AppliedDateAssignment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAssignment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_AppliedDateAssignment self, Handle_StepAP214_AppliedDateAssignment theHandle) -> Handle_StepAP214_AppliedDateAssignment
        assign(Handle_StepAP214_AppliedDateAssignment self, StepAP214_AppliedDateAssignment thePtr) -> Handle_StepAP214_AppliedDateAssignment
        assign(Handle_StepAP214_AppliedDateAssignment self, Handle_StepAP214_AppliedDateAssignment theHandle) -> Handle_StepAP214_AppliedDateAssignment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAssignment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_AppliedDateAssignment self) -> StepAP214_AppliedDateAssignment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAssignment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_AppliedDateAssignment self) -> StepAP214_AppliedDateAssignment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAssignment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_AppliedDateAssignment self) -> StepAP214_AppliedDateAssignment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAssignment___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_AppliedDateAssignment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_AppliedDateAssignment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_AppliedDateAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_AppliedDateAssignment_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_AppliedDateAssignment

    def Init(self, *args):
        """
        Init(Handle_StepAP214_AppliedDateAssignment self, Handle_StepBasic_Date aAssignedDate, Handle_StepBasic_DateRole aRole, Handle_StepAP214_HArray1OfDateItem aItems)

        :type aAssignedDate: OCC.wrapper.StepBasic.Handle_StepBasic_Date
        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_DateRole
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfDateItem

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP214_AppliedDateAssignment self, Handle_StepAP214_HArray1OfDateItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfDateItem

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP214_AppliedDateAssignment self) -> Handle_StepAP214_HArray1OfDateItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfDateItem

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(Handle_StepAP214_AppliedDateAssignment self, Standard_Integer const num) -> StepAP214_DateItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_DateItem

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(Handle_StepAP214_AppliedDateAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAssignment_NbItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_AppliedDateAssignment self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAssignment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AppliedDateAssignment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AppliedDateAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAssignedDate(self, *args):
        """
        SetAssignedDate(Handle_StepAP214_AppliedDateAssignment self, Handle_StepBasic_Date aAssignedDate)

        :type aAssignedDate: OCC.wrapper.StepBasic.Handle_StepBasic_Date

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAssignment_SetAssignedDate(self, *args)


    def AssignedDate(self, *args):
        """
        AssignedDate(Handle_StepAP214_AppliedDateAssignment self) -> Handle_StepBasic_Date

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Date

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAssignment_AssignedDate(self, *args)


    def SetRole(self, *args):
        """
        SetRole(Handle_StepAP214_AppliedDateAssignment self, Handle_StepBasic_DateRole aRole)

        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_DateRole

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAssignment_SetRole(self, *args)


    def Role(self, *args):
        """
        Role(Handle_StepAP214_AppliedDateAssignment self) -> Handle_StepBasic_DateRole

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_DateRole

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAssignment_Role(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_AppliedDateAssignment self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_AppliedDateAssignment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_AppliedDateAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_AppliedDateAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAssignment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_AppliedDateAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_AppliedDateAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAssignment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_AppliedDateAssignment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAssignment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_AppliedDateAssignment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAssignment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_AppliedDateAssignment self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_AppliedDateAssignment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_AppliedDateAssignment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedDateAssignment_DecrementRefCounter(self, *args)

Handle_StepAP214_AppliedDateAssignment_swigregister = _StepAP214.Handle_StepAP214_AppliedDateAssignment_swigregister
Handle_StepAP214_AppliedDateAssignment_swigregister(Handle_StepAP214_AppliedDateAssignment)

def Handle_StepAP214_AppliedDateAssignment_DownCast(thing):
    return _StepAP214.Handle_StepAP214_AppliedDateAssignment_DownCast(thing)
Handle_StepAP214_AppliedDateAssignment_DownCast = _StepAP214.Handle_StepAP214_AppliedDateAssignment_DownCast

class Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect self, StepAP214_HArray1OfAutoDesignPresentedItemSelect thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect self, Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect theHandle) -> Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect
        assign(Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect self, StepAP214_HArray1OfAutoDesignPresentedItemSelect thePtr) -> Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect
        assign(Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect self, Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect theHandle) -> Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect self) -> StepAP214_HArray1OfAutoDesignPresentedItemSelect

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect self) -> StepAP214_HArray1OfAutoDesignPresentedItemSelect

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect self) -> StepAP214_HArray1OfAutoDesignPresentedItemSelect

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignPresentedItemSelect

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect self) -> NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignPresentedItemSelect

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect_DecrementRefCounter(self, *args)

Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect_swigregister = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect_swigregister
Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect_swigregister(Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect)

def Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect_DownCast(thing):
    return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect_DownCast(thing)
Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect_DownCast = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignPresentedItemSelect_DownCast

class Handle_StepAP214_HArray1OfAutoDesignReferencingItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_HArray1OfAutoDesignReferencingItem self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_HArray1OfAutoDesignReferencingItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_HArray1OfAutoDesignReferencingItem self, StepAP214_HArray1OfAutoDesignReferencingItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_HArray1OfAutoDesignReferencingItem self, Handle_StepAP214_HArray1OfAutoDesignReferencingItem theHandle) -> Handle_StepAP214_HArray1OfAutoDesignReferencingItem
        assign(Handle_StepAP214_HArray1OfAutoDesignReferencingItem self, StepAP214_HArray1OfAutoDesignReferencingItem thePtr) -> Handle_StepAP214_HArray1OfAutoDesignReferencingItem
        assign(Handle_StepAP214_HArray1OfAutoDesignReferencingItem self, Handle_StepAP214_HArray1OfAutoDesignReferencingItem theHandle) -> Handle_StepAP214_HArray1OfAutoDesignReferencingItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_HArray1OfAutoDesignReferencingItem self) -> StepAP214_HArray1OfAutoDesignReferencingItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_HArray1OfAutoDesignReferencingItem self) -> StepAP214_HArray1OfAutoDesignReferencingItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_HArray1OfAutoDesignReferencingItem self) -> StepAP214_HArray1OfAutoDesignReferencingItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_HArray1OfAutoDesignReferencingItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_HArray1OfAutoDesignReferencingItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignReferencingItem

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP214_HArray1OfAutoDesignReferencingItem self) -> NCollection_Array1_StepAP214_AutoDesignReferencingItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignReferencingItem

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_HArray1OfAutoDesignReferencingItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_HArray1OfAutoDesignReferencingItem self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_HArray1OfAutoDesignReferencingItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_HArray1OfAutoDesignReferencingItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_HArray1OfAutoDesignReferencingItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_HArray1OfAutoDesignReferencingItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_HArray1OfAutoDesignReferencingItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_HArray1OfAutoDesignReferencingItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_HArray1OfAutoDesignReferencingItem self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_HArray1OfAutoDesignReferencingItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem_DecrementRefCounter(self, *args)

Handle_StepAP214_HArray1OfAutoDesignReferencingItem_swigregister = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem_swigregister
Handle_StepAP214_HArray1OfAutoDesignReferencingItem_swigregister(Handle_StepAP214_HArray1OfAutoDesignReferencingItem)

def Handle_StepAP214_HArray1OfAutoDesignReferencingItem_DownCast(thing):
    return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem_DownCast(thing)
Handle_StepAP214_HArray1OfAutoDesignReferencingItem_DownCast = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem_DownCast

class NCollection_Array1_StepAP214_AutoDesignReferencingItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP214_AutoDesignReferencingItem self) -> NCollection_Array1< StepAP214_AutoDesignReferencingItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP214_AutoDesignReferencingItem self) -> NCollection_Array1< StepAP214_AutoDesignReferencingItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP214_AutoDesignReferencingItem self) -> NCollection_Array1< StepAP214_AutoDesignReferencingItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP214_AutoDesignReferencingItem self) -> NCollection_Array1< StepAP214_AutoDesignReferencingItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP214.new_NCollection_Array1_StepAP214_AutoDesignReferencingItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP214_AutoDesignReferencingItem self, StepAP214_AutoDesignReferencingItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP214_AutoDesignReferencingItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP214_AutoDesignReferencingItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP214_AutoDesignReferencingItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP214_AutoDesignReferencingItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP214_AutoDesignReferencingItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP214_AutoDesignReferencingItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP214_AutoDesignReferencingItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP214_AutoDesignReferencingItem self, NCollection_Array1_StepAP214_AutoDesignReferencingItem theOther) -> NCollection_Array1_StepAP214_AutoDesignReferencingItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP214_AutoDesignReferencingItem self, NCollection_Array1_StepAP214_AutoDesignReferencingItem theOther) -> NCollection_Array1_StepAP214_AutoDesignReferencingItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP214_AutoDesignReferencingItem self, NCollection_Array1_StepAP214_AutoDesignReferencingItem theOther) -> NCollection_Array1_StepAP214_AutoDesignReferencingItem
        assign(NCollection_Array1_StepAP214_AutoDesignReferencingItem self, NCollection_Array1_StepAP214_AutoDesignReferencingItem theOther) -> NCollection_Array1_StepAP214_AutoDesignReferencingItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP214_AutoDesignReferencingItem self) -> StepAP214_AutoDesignReferencingItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP214_AutoDesignReferencingItem self) -> StepAP214_AutoDesignReferencingItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP214_AutoDesignReferencingItem self, Standard_Integer const theIndex) -> StepAP214_AutoDesignReferencingItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP214_AutoDesignReferencingItem self, Standard_Integer const theIndex, StepAP214_AutoDesignReferencingItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP214_AutoDesignReferencingItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem_Resize(self, *args)

    __swig_destroy__ = _StepAP214.delete_NCollection_Array1_StepAP214_AutoDesignReferencingItem
NCollection_Array1_StepAP214_AutoDesignReferencingItem_swigregister = _StepAP214.NCollection_Array1_StepAP214_AutoDesignReferencingItem_swigregister
NCollection_Array1_StepAP214_AutoDesignReferencingItem_swigregister(NCollection_Array1_StepAP214_AutoDesignReferencingItem)


try:
	StepAP214_Array1OfAutoDesignReferencingItem = NCollection_Array1_StepAP214_AutoDesignReferencingItem
except NameError:
	pass # does not exist, probably ignored

class StepAP214_AutoDesignNominalDateAndTimeAssignment(StepBasic.StepBasic_DateAndTimeAssignment):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_AutoDesignNominalDateAndTimeAssignment self) -> StepAP214_AutoDesignNominalDateAndTimeAssignment

        Returns a AutoDesignNominalDateAndTimeAssignment


        """
        this = _StepAP214.new_StepAP214_AutoDesignNominalDateAndTimeAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP214_AutoDesignNominalDateAndTimeAssignment self, Handle_StepBasic_DateAndTime aAssignedDateAndTime, Handle_StepBasic_DateTimeRole aRole, Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem aItems)

        :type aAssignedDateAndTime: OCC.wrapper.StepBasic.Handle_StepBasic_DateAndTime
        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_DateTimeRole
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem

        """
        return _StepAP214.StepAP214_AutoDesignNominalDateAndTimeAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP214_AutoDesignNominalDateAndTimeAssignment self, Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem

        """
        return _StepAP214.StepAP214_AutoDesignNominalDateAndTimeAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(StepAP214_AutoDesignNominalDateAndTimeAssignment self) -> Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem

        """
        return _StepAP214.StepAP214_AutoDesignNominalDateAndTimeAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(StepAP214_AutoDesignNominalDateAndTimeAssignment self, Standard_Integer const num) -> StepAP214_AutoDesignDateAndTimeItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_AutoDesignDateAndTimeItem

        """
        return _StepAP214.StepAP214_AutoDesignNominalDateAndTimeAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(StepAP214_AutoDesignNominalDateAndTimeAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AutoDesignNominalDateAndTimeAssignment_NbItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_AutoDesignNominalDateAndTimeAssignment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_AutoDesignNominalDateAndTimeAssignment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_AutoDesignNominalDateAndTimeAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_AutoDesignNominalDateAndTimeAssignment
StepAP214_AutoDesignNominalDateAndTimeAssignment_swigregister = _StepAP214.StepAP214_AutoDesignNominalDateAndTimeAssignment_swigregister
StepAP214_AutoDesignNominalDateAndTimeAssignment_swigregister(StepAP214_AutoDesignNominalDateAndTimeAssignment)

def StepAP214_AutoDesignNominalDateAndTimeAssignment_get_type_name(*args):
    """
    StepAP214_AutoDesignNominalDateAndTimeAssignment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_AutoDesignNominalDateAndTimeAssignment_get_type_name(*args)

def StepAP214_AutoDesignNominalDateAndTimeAssignment_get_type_descriptor(*args):
    """
    StepAP214_AutoDesignNominalDateAndTimeAssignment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_AutoDesignNominalDateAndTimeAssignment_get_type_descriptor(*args)

class Handle_StepAP214_AppliedOrganizationAssignment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_AppliedOrganizationAssignment self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_AppliedOrganizationAssignment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_AppliedOrganizationAssignment self, StepAP214_AppliedOrganizationAssignment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_AppliedOrganizationAssignment self, Handle_StepAP214_AppliedOrganizationAssignment theHandle) -> Handle_StepAP214_AppliedOrganizationAssignment
        assign(Handle_StepAP214_AppliedOrganizationAssignment self, StepAP214_AppliedOrganizationAssignment thePtr) -> Handle_StepAP214_AppliedOrganizationAssignment
        assign(Handle_StepAP214_AppliedOrganizationAssignment self, Handle_StepAP214_AppliedOrganizationAssignment theHandle) -> Handle_StepAP214_AppliedOrganizationAssignment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_AppliedOrganizationAssignment self) -> StepAP214_AppliedOrganizationAssignment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_AppliedOrganizationAssignment self) -> StepAP214_AppliedOrganizationAssignment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_AppliedOrganizationAssignment self) -> StepAP214_AppliedOrganizationAssignment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_AppliedOrganizationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_AppliedOrganizationAssignment

    def Init(self, *args):
        """
        Init(Handle_StepAP214_AppliedOrganizationAssignment self, Handle_StepBasic_Organization aAssignedOrganization, Handle_StepBasic_OrganizationRole aRole, Handle_StepAP214_HArray1OfOrganizationItem aItems)

        :type aAssignedOrganization: OCC.wrapper.StepBasic.Handle_StepBasic_Organization
        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_OrganizationRole
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfOrganizationItem

        """
        return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP214_AppliedOrganizationAssignment self, Handle_StepAP214_HArray1OfOrganizationItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfOrganizationItem

        """
        return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP214_AppliedOrganizationAssignment self) -> Handle_StepAP214_HArray1OfOrganizationItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfOrganizationItem

        """
        return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(Handle_StepAP214_AppliedOrganizationAssignment self, Standard_Integer const num) -> StepAP214_OrganizationItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_OrganizationItem

        """
        return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(Handle_StepAP214_AppliedOrganizationAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_NbItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_AppliedOrganizationAssignment self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAssignedOrganization(self, *args):
        """
        SetAssignedOrganization(Handle_StepAP214_AppliedOrganizationAssignment self, Handle_StepBasic_Organization aAssignedOrganization)

        :type aAssignedOrganization: OCC.wrapper.StepBasic.Handle_StepBasic_Organization

        """
        return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_SetAssignedOrganization(self, *args)


    def AssignedOrganization(self, *args):
        """
        AssignedOrganization(Handle_StepAP214_AppliedOrganizationAssignment self) -> Handle_StepBasic_Organization

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Organization

        """
        return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_AssignedOrganization(self, *args)


    def SetRole(self, *args):
        """
        SetRole(Handle_StepAP214_AppliedOrganizationAssignment self, Handle_StepBasic_OrganizationRole aRole)

        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_OrganizationRole

        """
        return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_SetRole(self, *args)


    def Role(self, *args):
        """
        Role(Handle_StepAP214_AppliedOrganizationAssignment self) -> Handle_StepBasic_OrganizationRole

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_OrganizationRole

        """
        return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_Role(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_AppliedOrganizationAssignment self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_AppliedOrganizationAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_AppliedOrganizationAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_AppliedOrganizationAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_AppliedOrganizationAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_AppliedOrganizationAssignment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_AppliedOrganizationAssignment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_AppliedOrganizationAssignment self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_AppliedOrganizationAssignment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_DecrementRefCounter(self, *args)

Handle_StepAP214_AppliedOrganizationAssignment_swigregister = _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_swigregister
Handle_StepAP214_AppliedOrganizationAssignment_swigregister(Handle_StepAP214_AppliedOrganizationAssignment)

def Handle_StepAP214_AppliedOrganizationAssignment_DownCast(thing):
    return _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_DownCast(thing)
Handle_StepAP214_AppliedOrganizationAssignment_DownCast = _StepAP214.Handle_StepAP214_AppliedOrganizationAssignment_DownCast

class StepAP214_HArray1OfAutoDesignDateAndTimeItem(NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem, Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_HArray1OfAutoDesignDateAndTimeItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP214_HArray1OfAutoDesignDateAndTimeItem
        __init__(StepAP214_HArray1OfAutoDesignDateAndTimeItem self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP214_AutoDesignDateAndTimeItem theValue) -> StepAP214_HArray1OfAutoDesignDateAndTimeItem
        __init__(StepAP214_HArray1OfAutoDesignDateAndTimeItem self, NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem theOther) -> StepAP214_HArray1OfAutoDesignDateAndTimeItem

        :type theOther: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignDateAndTimeItem

        """
        this = _StepAP214.new_StepAP214_HArray1OfAutoDesignDateAndTimeItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignDateAndTimeItem

        """
        res = _StepAP214.StepAP214_HArray1OfAutoDesignDateAndTimeItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP214_HArray1OfAutoDesignDateAndTimeItem self) -> NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignDateAndTimeItem

        """
        return _StepAP214.StepAP214_HArray1OfAutoDesignDateAndTimeItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_HArray1OfAutoDesignDateAndTimeItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_HArray1OfAutoDesignDateAndTimeItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_HArray1OfAutoDesignDateAndTimeItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_HArray1OfAutoDesignDateAndTimeItem
StepAP214_HArray1OfAutoDesignDateAndTimeItem_swigregister = _StepAP214.StepAP214_HArray1OfAutoDesignDateAndTimeItem_swigregister
StepAP214_HArray1OfAutoDesignDateAndTimeItem_swigregister(StepAP214_HArray1OfAutoDesignDateAndTimeItem)

def StepAP214_HArray1OfAutoDesignDateAndTimeItem_get_type_name(*args):
    """
    StepAP214_HArray1OfAutoDesignDateAndTimeItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_HArray1OfAutoDesignDateAndTimeItem_get_type_name(*args)

def StepAP214_HArray1OfAutoDesignDateAndTimeItem_get_type_descriptor(*args):
    """
    StepAP214_HArray1OfAutoDesignDateAndTimeItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_HArray1OfAutoDesignDateAndTimeItem_get_type_descriptor(*args)

class StepAP214_AppliedExternalIdentificationAssignment(StepBasic.StepBasic_ExternalIdentificationAssignment):
    """Representation of STEP entity AppliedExternalIdentificationAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_AppliedExternalIdentificationAssignment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_AppliedExternalIdentificationAssignment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_AppliedExternalIdentificationAssignment self) -> StepAP214_AppliedExternalIdentificationAssignment

        Empty constructor


        """
        this = _StepAP214.new_StepAP214_AppliedExternalIdentificationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP214_AppliedExternalIdentificationAssignment self, Handle_TCollection_HAsciiString aIdentificationAssignment_AssignedId, Handle_StepBasic_IdentificationRole aIdentificationAssignment_Role, Handle_StepBasic_ExternalSource aExternalIdentificationAssignment_Source, Handle_StepAP214_HArray1OfExternalIdentificationItem aItems)

        Initialize all fields (own and inherited)

        :type aIdentificationAssignment_AssignedId: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aIdentificationAssignment_Role: OCC.wrapper.StepBasic.Handle_StepBasic_IdentificationRole
        :type aExternalIdentificationAssignment_Source: OCC.wrapper.StepBasic.Handle_StepBasic_ExternalSource
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem

        """
        return _StepAP214.StepAP214_AppliedExternalIdentificationAssignment_Init(self, *args)


    def Items(self, *args):
        """
        Items(StepAP214_AppliedExternalIdentificationAssignment self) -> Handle_StepAP214_HArray1OfExternalIdentificationItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem

        """
        return _StepAP214.StepAP214_AppliedExternalIdentificationAssignment_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP214_AppliedExternalIdentificationAssignment self, Handle_StepAP214_HArray1OfExternalIdentificationItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem

        """
        return _StepAP214.StepAP214_AppliedExternalIdentificationAssignment_SetItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_AppliedExternalIdentificationAssignment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_AppliedExternalIdentificationAssignment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_AppliedExternalIdentificationAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_AppliedExternalIdentificationAssignment
StepAP214_AppliedExternalIdentificationAssignment_swigregister = _StepAP214.StepAP214_AppliedExternalIdentificationAssignment_swigregister
StepAP214_AppliedExternalIdentificationAssignment_swigregister(StepAP214_AppliedExternalIdentificationAssignment)

def StepAP214_AppliedExternalIdentificationAssignment_get_type_name(*args):
    """
    StepAP214_AppliedExternalIdentificationAssignment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_AppliedExternalIdentificationAssignment_get_type_name(*args)

def StepAP214_AppliedExternalIdentificationAssignment_get_type_descriptor(*args):
    """
    StepAP214_AppliedExternalIdentificationAssignment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_AppliedExternalIdentificationAssignment_get_type_descriptor(*args)

class Handle_StepAP214_AutoDesignActualDateAndTimeAssignment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self, StepAP214_AutoDesignActualDateAndTimeAssignment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self, Handle_StepAP214_AutoDesignActualDateAndTimeAssignment theHandle) -> Handle_StepAP214_AutoDesignActualDateAndTimeAssignment
        assign(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self, StepAP214_AutoDesignActualDateAndTimeAssignment thePtr) -> Handle_StepAP214_AutoDesignActualDateAndTimeAssignment
        assign(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self, Handle_StepAP214_AutoDesignActualDateAndTimeAssignment theHandle) -> Handle_StepAP214_AutoDesignActualDateAndTimeAssignment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self) -> StepAP214_AutoDesignActualDateAndTimeAssignment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self) -> StepAP214_AutoDesignActualDateAndTimeAssignment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self) -> StepAP214_AutoDesignActualDateAndTimeAssignment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_AutoDesignActualDateAndTimeAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_AutoDesignActualDateAndTimeAssignment

    def Init(self, *args):
        """
        Init(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self, Handle_StepBasic_DateAndTime aAssignedDateAndTime, Handle_StepBasic_DateTimeRole aRole, Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem aItems)

        :type aAssignedDateAndTime: OCC.wrapper.StepBasic.Handle_StepBasic_DateAndTime
        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_DateTimeRole
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self, Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self) -> Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self, Standard_Integer const num) -> StepAP214_AutoDesignDateAndTimeItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_AutoDesignDateAndTimeItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_NbItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAssignedDateAndTime(self, *args):
        """
        SetAssignedDateAndTime(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self, Handle_StepBasic_DateAndTime aAssignedDateAndTime)

        :type aAssignedDateAndTime: OCC.wrapper.StepBasic.Handle_StepBasic_DateAndTime

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_SetAssignedDateAndTime(self, *args)


    def AssignedDateAndTime(self, *args):
        """
        AssignedDateAndTime(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self) -> Handle_StepBasic_DateAndTime

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_DateAndTime

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_AssignedDateAndTime(self, *args)


    def SetRole(self, *args):
        """
        SetRole(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self, Handle_StepBasic_DateTimeRole aRole)

        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_DateTimeRole

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_SetRole(self, *args)


    def Role(self, *args):
        """
        Role(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self) -> Handle_StepBasic_DateTimeRole

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_DateTimeRole

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_Role(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_DecrementRefCounter(self, *args)

Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_swigregister = _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_swigregister
Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_swigregister(Handle_StepAP214_AutoDesignActualDateAndTimeAssignment)

def Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_DownCast(thing):
    return _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_DownCast(thing)
Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_DownCast = _StepAP214.Handle_StepAP214_AutoDesignActualDateAndTimeAssignment_DownCast

class Handle_StepAP214_HArray1OfAutoDesignDatedItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_HArray1OfAutoDesignDatedItem self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_HArray1OfAutoDesignDatedItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_HArray1OfAutoDesignDatedItem self, StepAP214_HArray1OfAutoDesignDatedItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_HArray1OfAutoDesignDatedItem self, Handle_StepAP214_HArray1OfAutoDesignDatedItem theHandle) -> Handle_StepAP214_HArray1OfAutoDesignDatedItem
        assign(Handle_StepAP214_HArray1OfAutoDesignDatedItem self, StepAP214_HArray1OfAutoDesignDatedItem thePtr) -> Handle_StepAP214_HArray1OfAutoDesignDatedItem
        assign(Handle_StepAP214_HArray1OfAutoDesignDatedItem self, Handle_StepAP214_HArray1OfAutoDesignDatedItem theHandle) -> Handle_StepAP214_HArray1OfAutoDesignDatedItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_HArray1OfAutoDesignDatedItem self) -> StepAP214_HArray1OfAutoDesignDatedItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_HArray1OfAutoDesignDatedItem self) -> StepAP214_HArray1OfAutoDesignDatedItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_HArray1OfAutoDesignDatedItem self) -> StepAP214_HArray1OfAutoDesignDatedItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_HArray1OfAutoDesignDatedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_HArray1OfAutoDesignDatedItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignDatedItem

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP214_HArray1OfAutoDesignDatedItem self) -> NCollection_Array1_StepAP214_AutoDesignDatedItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignDatedItem

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_HArray1OfAutoDesignDatedItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_HArray1OfAutoDesignDatedItem self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_HArray1OfAutoDesignDatedItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_HArray1OfAutoDesignDatedItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_HArray1OfAutoDesignDatedItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_HArray1OfAutoDesignDatedItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_HArray1OfAutoDesignDatedItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_HArray1OfAutoDesignDatedItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_HArray1OfAutoDesignDatedItem self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_HArray1OfAutoDesignDatedItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem_DecrementRefCounter(self, *args)

Handle_StepAP214_HArray1OfAutoDesignDatedItem_swigregister = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem_swigregister
Handle_StepAP214_HArray1OfAutoDesignDatedItem_swigregister(Handle_StepAP214_HArray1OfAutoDesignDatedItem)

def Handle_StepAP214_HArray1OfAutoDesignDatedItem_DownCast(thing):
    return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem_DownCast(thing)
Handle_StepAP214_HArray1OfAutoDesignDatedItem_DownCast = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem_DownCast

class Handle_StepAP214_AppliedExternalIdentificationAssignment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_AppliedExternalIdentificationAssignment self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_AppliedExternalIdentificationAssignment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_AppliedExternalIdentificationAssignment self, StepAP214_AppliedExternalIdentificationAssignment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_AppliedExternalIdentificationAssignment self, Handle_StepAP214_AppliedExternalIdentificationAssignment theHandle) -> Handle_StepAP214_AppliedExternalIdentificationAssignment
        assign(Handle_StepAP214_AppliedExternalIdentificationAssignment self, StepAP214_AppliedExternalIdentificationAssignment thePtr) -> Handle_StepAP214_AppliedExternalIdentificationAssignment
        assign(Handle_StepAP214_AppliedExternalIdentificationAssignment self, Handle_StepAP214_AppliedExternalIdentificationAssignment theHandle) -> Handle_StepAP214_AppliedExternalIdentificationAssignment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_AppliedExternalIdentificationAssignment self) -> StepAP214_AppliedExternalIdentificationAssignment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_AppliedExternalIdentificationAssignment self) -> StepAP214_AppliedExternalIdentificationAssignment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_AppliedExternalIdentificationAssignment self) -> StepAP214_AppliedExternalIdentificationAssignment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_AppliedExternalIdentificationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_AppliedExternalIdentificationAssignment

    def Init(self, *args):
        """
        Init(Handle_StepAP214_AppliedExternalIdentificationAssignment self, Handle_TCollection_HAsciiString aIdentificationAssignment_AssignedId, Handle_StepBasic_IdentificationRole aIdentificationAssignment_Role, Handle_StepBasic_ExternalSource aExternalIdentificationAssignment_Source, Handle_StepAP214_HArray1OfExternalIdentificationItem aItems)

        Initialize all fields (own and inherited)

        :type aIdentificationAssignment_AssignedId: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aIdentificationAssignment_Role: OCC.wrapper.StepBasic.Handle_StepBasic_IdentificationRole
        :type aExternalIdentificationAssignment_Source: OCC.wrapper.StepBasic.Handle_StepBasic_ExternalSource
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem

        """
        return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_Init(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP214_AppliedExternalIdentificationAssignment self) -> Handle_StepAP214_HArray1OfExternalIdentificationItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem

        """
        return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP214_AppliedExternalIdentificationAssignment self, Handle_StepAP214_HArray1OfExternalIdentificationItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem

        """
        return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_SetItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_AppliedExternalIdentificationAssignment self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Source(self, *args):
        """
        Source(Handle_StepAP214_AppliedExternalIdentificationAssignment self) -> Handle_StepBasic_ExternalSource

        Returns field Source

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ExternalSource

        """
        return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_Source(self, *args)


    def SetSource(self, *args):
        """
        SetSource(Handle_StepAP214_AppliedExternalIdentificationAssignment self, Handle_StepBasic_ExternalSource Source)

        Set field Source

        :type Source: OCC.wrapper.StepBasic.Handle_StepBasic_ExternalSource

        """
        return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_SetSource(self, *args)


    def AssignedId(self, *args):
        """
        AssignedId(Handle_StepAP214_AppliedExternalIdentificationAssignment self) -> Handle_TCollection_HAsciiString

        Returns field AssignedId

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_AssignedId(self, *args)


    def SetAssignedId(self, *args):
        """
        SetAssignedId(Handle_StepAP214_AppliedExternalIdentificationAssignment self, Handle_TCollection_HAsciiString AssignedId)

        Set field AssignedId

        :type AssignedId: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_SetAssignedId(self, *args)


    def Role(self, *args):
        """
        Role(Handle_StepAP214_AppliedExternalIdentificationAssignment self) -> Handle_StepBasic_IdentificationRole

        Returns field Role

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_IdentificationRole

        """
        return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_Role(self, *args)


    def SetRole(self, *args):
        """
        SetRole(Handle_StepAP214_AppliedExternalIdentificationAssignment self, Handle_StepBasic_IdentificationRole Role)

        Set field Role

        :type Role: OCC.wrapper.StepBasic.Handle_StepBasic_IdentificationRole

        """
        return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_SetRole(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_AppliedExternalIdentificationAssignment self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_AppliedExternalIdentificationAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_AppliedExternalIdentificationAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_AppliedExternalIdentificationAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_AppliedExternalIdentificationAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_AppliedExternalIdentificationAssignment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_AppliedExternalIdentificationAssignment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_AppliedExternalIdentificationAssignment self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_AppliedExternalIdentificationAssignment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_DecrementRefCounter(self, *args)

Handle_StepAP214_AppliedExternalIdentificationAssignment_swigregister = _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_swigregister
Handle_StepAP214_AppliedExternalIdentificationAssignment_swigregister(Handle_StepAP214_AppliedExternalIdentificationAssignment)

def Handle_StepAP214_AppliedExternalIdentificationAssignment_DownCast(thing):
    return _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_DownCast(thing)
Handle_StepAP214_AppliedExternalIdentificationAssignment_DownCast = _StepAP214.Handle_StepAP214_AppliedExternalIdentificationAssignment_DownCast

class Handle_StepAP214_Class(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_Class self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_Class_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_Class self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_Class_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_Class self, StepAP214_Class thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_Class_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_Class self, Handle_StepAP214_Class theHandle) -> Handle_StepAP214_Class
        assign(Handle_StepAP214_Class self, StepAP214_Class thePtr) -> Handle_StepAP214_Class
        assign(Handle_StepAP214_Class self, Handle_StepAP214_Class theHandle) -> Handle_StepAP214_Class

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_Class_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_Class self) -> StepAP214_Class

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_Class_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_Class self) -> StepAP214_Class

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_Class___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_Class self) -> StepAP214_Class

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_Class___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_Class___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_Class___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_Class(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_Class_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_Class

    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_Class self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_Class_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_Class_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_Class_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init(self, *args):
        """
        Init(Handle_StepAP214_Class self, Handle_TCollection_HAsciiString aName, Standard_Boolean const hasDescription, Handle_TCollection_HAsciiString aDescription)

        Initialize all fields (own and inherited)

        :type aName: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasDescription: bool
        :type aDescription: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_Class_Init(self, *args)


    def Name(self, *args):
        """
        Name(Handle_StepAP214_Class self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_Class_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepAP214_Class self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_Class_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepAP214_Class self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_Class_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepAP214_Class self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_Class_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        HasDescription(Handle_StepAP214_Class self) -> Standard_Boolean

        Returns True if optional field Description is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_Class_HasDescription(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_Class self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_Class_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_Class self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_Class self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_Class_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_Class self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_Class self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_Class_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_Class self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_Class_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_Class self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_Class_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_Class self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_Class_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_Class self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_Class_DecrementRefCounter(self, *args)

Handle_StepAP214_Class_swigregister = _StepAP214.Handle_StepAP214_Class_swigregister
Handle_StepAP214_Class_swigregister(Handle_StepAP214_Class)

def Handle_StepAP214_Class_DownCast(thing):
    return _StepAP214.Handle_StepAP214_Class_DownCast(thing)
Handle_StepAP214_Class_DownCast = _StepAP214.Handle_StepAP214_Class_DownCast

class StepAP214_HArray1OfAutoDesignGeneralOrgItem(NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem, Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_HArray1OfAutoDesignGeneralOrgItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP214_HArray1OfAutoDesignGeneralOrgItem
        __init__(StepAP214_HArray1OfAutoDesignGeneralOrgItem self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP214_AutoDesignGeneralOrgItem theValue) -> StepAP214_HArray1OfAutoDesignGeneralOrgItem
        __init__(StepAP214_HArray1OfAutoDesignGeneralOrgItem self, NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem theOther) -> StepAP214_HArray1OfAutoDesignGeneralOrgItem

        :type theOther: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignGeneralOrgItem

        """
        this = _StepAP214.new_StepAP214_HArray1OfAutoDesignGeneralOrgItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignGeneralOrgItem

        """
        res = _StepAP214.StepAP214_HArray1OfAutoDesignGeneralOrgItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP214_HArray1OfAutoDesignGeneralOrgItem self) -> NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignGeneralOrgItem

        """
        return _StepAP214.StepAP214_HArray1OfAutoDesignGeneralOrgItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_HArray1OfAutoDesignGeneralOrgItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_HArray1OfAutoDesignGeneralOrgItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_HArray1OfAutoDesignGeneralOrgItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_HArray1OfAutoDesignGeneralOrgItem
StepAP214_HArray1OfAutoDesignGeneralOrgItem_swigregister = _StepAP214.StepAP214_HArray1OfAutoDesignGeneralOrgItem_swigregister
StepAP214_HArray1OfAutoDesignGeneralOrgItem_swigregister(StepAP214_HArray1OfAutoDesignGeneralOrgItem)

def StepAP214_HArray1OfAutoDesignGeneralOrgItem_get_type_name(*args):
    """
    StepAP214_HArray1OfAutoDesignGeneralOrgItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_HArray1OfAutoDesignGeneralOrgItem_get_type_name(*args)

def StepAP214_HArray1OfAutoDesignGeneralOrgItem_get_type_descriptor(*args):
    """
    StepAP214_HArray1OfAutoDesignGeneralOrgItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_HArray1OfAutoDesignGeneralOrgItem_get_type_descriptor(*args)

class Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self, StepAP214_HArray1OfAutoDesignDateAndTimeItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self, Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem theHandle) -> Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem
        assign(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self, StepAP214_HArray1OfAutoDesignDateAndTimeItem thePtr) -> Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem
        assign(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self, Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem theHandle) -> Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self) -> StepAP214_HArray1OfAutoDesignDateAndTimeItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self) -> StepAP214_HArray1OfAutoDesignDateAndTimeItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self) -> StepAP214_HArray1OfAutoDesignDateAndTimeItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignDateAndTimeItem

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self) -> NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignDateAndTimeItem

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def begin(self, *args):
        """
        begin(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self) -> NCollection_Array1< StepAP214_AutoDesignDateAndTimeItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_begin(self, *args)


    def end(self, *args):
        """
        end(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self) -> NCollection_Array1< StepAP214_AutoDesignDateAndTimeItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self) -> NCollection_Array1< StepAP214_AutoDesignDateAndTimeItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self) -> NCollection_Array1< StepAP214_AutoDesignDateAndTimeItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_cend(self, *args)


    def Init(self, *args):
        """
        Init(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self, StepAP214_AutoDesignDateAndTimeItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self, NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem theOther) -> NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self, NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem theOther) -> NCollection_Array1_StepAP214_AutoDesignDateAndTimeItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_Move(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self) -> StepAP214_AutoDesignDateAndTimeItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self) -> StepAP214_AutoDesignDateAndTimeItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self, Standard_Integer const theIndex) -> StepAP214_AutoDesignDateAndTimeItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_ChangeValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self, Standard_Integer const theIndex, StepAP214_AutoDesignDateAndTimeItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_Resize(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_DecrementRefCounter(self, *args)

Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_swigregister = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_swigregister
Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_swigregister(Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem)

def Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_DownCast(thing):
    return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_DownCast(thing)
Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_DownCast = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem_DownCast

class Handle_StepAP214_RepItemGroup(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_RepItemGroup self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_RepItemGroup_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_RepItemGroup self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_RepItemGroup_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_RepItemGroup self, StepAP214_RepItemGroup thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_RepItemGroup_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_RepItemGroup self, Handle_StepAP214_RepItemGroup theHandle) -> Handle_StepAP214_RepItemGroup
        assign(Handle_StepAP214_RepItemGroup self, StepAP214_RepItemGroup thePtr) -> Handle_StepAP214_RepItemGroup
        assign(Handle_StepAP214_RepItemGroup self, Handle_StepAP214_RepItemGroup theHandle) -> Handle_StepAP214_RepItemGroup

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_RepItemGroup_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_RepItemGroup self) -> StepAP214_RepItemGroup

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_RepItemGroup_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_RepItemGroup self) -> StepAP214_RepItemGroup

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_RepItemGroup___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_RepItemGroup self) -> StepAP214_RepItemGroup

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_RepItemGroup___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_RepItemGroup___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_RepItemGroup___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_RepItemGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_RepItemGroup_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_RepItemGroup

    def Init(self, *args):
        """
        Init(Handle_StepAP214_RepItemGroup self, Handle_TCollection_HAsciiString aGroup_Name, Standard_Boolean const hasGroup_Description, Handle_TCollection_HAsciiString aGroup_Description, Handle_TCollection_HAsciiString aRepresentationItem_Name)

        Initialize all fields (own and inherited)

        :type aGroup_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasGroup_Description: bool
        :type aGroup_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aRepresentationItem_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_RepItemGroup_Init(self, *args)


    def RepresentationItem(self, *args):
        """
        RepresentationItem(Handle_StepAP214_RepItemGroup self) -> Handle_StepRepr_RepresentationItem

        Returns data for supertype RepresentationItem

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepAP214.Handle_StepAP214_RepItemGroup_RepresentationItem(self, *args)


    def SetRepresentationItem(self, *args):
        """
        SetRepresentationItem(Handle_StepAP214_RepItemGroup self, Handle_StepRepr_RepresentationItem RepresentationItem)

        Set data for supertype RepresentationItem

        :type RepresentationItem: OCC.wrapper.StepRepr.Handle_StepRepr_RepresentationItem

        """
        return _StepAP214.Handle_StepAP214_RepItemGroup_SetRepresentationItem(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_RepItemGroup self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_RepItemGroup_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_RepItemGroup_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_RepItemGroup_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Name(self, *args):
        """
        Name(Handle_StepAP214_RepItemGroup self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_RepItemGroup_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepAP214_RepItemGroup self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_RepItemGroup_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepAP214_RepItemGroup self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_RepItemGroup_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepAP214_RepItemGroup self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_RepItemGroup_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        HasDescription(Handle_StepAP214_RepItemGroup self) -> Standard_Boolean

        Returns True if optional field Description is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_RepItemGroup_HasDescription(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_RepItemGroup self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_RepItemGroup_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_RepItemGroup self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_RepItemGroup self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_RepItemGroup_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_RepItemGroup self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_RepItemGroup self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_RepItemGroup_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_RepItemGroup self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_RepItemGroup_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_RepItemGroup self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_RepItemGroup_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_RepItemGroup self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_RepItemGroup_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_RepItemGroup self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_RepItemGroup_DecrementRefCounter(self, *args)

Handle_StepAP214_RepItemGroup_swigregister = _StepAP214.Handle_StepAP214_RepItemGroup_swigregister
Handle_StepAP214_RepItemGroup_swigregister(Handle_StepAP214_RepItemGroup)

def Handle_StepAP214_RepItemGroup_DownCast(thing):
    return _StepAP214.Handle_StepAP214_RepItemGroup_DownCast(thing)
Handle_StepAP214_RepItemGroup_DownCast = _StepAP214.Handle_StepAP214_RepItemGroup_DownCast

class StepAP214_AppliedGroupAssignment(StepBasic.StepBasic_GroupAssignment):
    """Representation of STEP entity AppliedGroupAssignment"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_AppliedGroupAssignment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_AppliedGroupAssignment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_AppliedGroupAssignment self) -> StepAP214_AppliedGroupAssignment

        Empty constructor


        """
        this = _StepAP214.new_StepAP214_AppliedGroupAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP214_AppliedGroupAssignment self, Handle_StepBasic_Group aGroupAssignment_AssignedGroup, Handle_StepAP214_HArray1OfGroupItem aItems)

        Initialize all fields (own and inherited)

        :type aGroupAssignment_AssignedGroup: OCC.wrapper.StepBasic.Handle_StepBasic_Group
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfGroupItem

        """
        return _StepAP214.StepAP214_AppliedGroupAssignment_Init(self, *args)


    def Items(self, *args):
        """
        Items(StepAP214_AppliedGroupAssignment self) -> Handle_StepAP214_HArray1OfGroupItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfGroupItem

        """
        return _StepAP214.StepAP214_AppliedGroupAssignment_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP214_AppliedGroupAssignment self, Handle_StepAP214_HArray1OfGroupItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfGroupItem

        """
        return _StepAP214.StepAP214_AppliedGroupAssignment_SetItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_AppliedGroupAssignment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_AppliedGroupAssignment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_AppliedGroupAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_AppliedGroupAssignment
StepAP214_AppliedGroupAssignment_swigregister = _StepAP214.StepAP214_AppliedGroupAssignment_swigregister
StepAP214_AppliedGroupAssignment_swigregister(StepAP214_AppliedGroupAssignment)

def StepAP214_AppliedGroupAssignment_get_type_name(*args):
    """
    StepAP214_AppliedGroupAssignment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_AppliedGroupAssignment_get_type_name(*args)

def StepAP214_AppliedGroupAssignment_get_type_descriptor(*args):
    """
    StepAP214_AppliedGroupAssignment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_AppliedGroupAssignment_get_type_descriptor(*args)

class NCollection_Array1_StepAP214_PersonAndOrganizationItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP214_PersonAndOrganizationItem self) -> NCollection_Array1< StepAP214_PersonAndOrganizationItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP214_PersonAndOrganizationItem self) -> NCollection_Array1< StepAP214_PersonAndOrganizationItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP214_PersonAndOrganizationItem self) -> NCollection_Array1< StepAP214_PersonAndOrganizationItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP214_PersonAndOrganizationItem self) -> NCollection_Array1< StepAP214_PersonAndOrganizationItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP214.new_NCollection_Array1_StepAP214_PersonAndOrganizationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP214_PersonAndOrganizationItem self, StepAP214_PersonAndOrganizationItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP214_PersonAndOrganizationItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP214_PersonAndOrganizationItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP214_PersonAndOrganizationItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP214_PersonAndOrganizationItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP214_PersonAndOrganizationItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP214_PersonAndOrganizationItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP214_PersonAndOrganizationItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP214_PersonAndOrganizationItem self, NCollection_Array1_StepAP214_PersonAndOrganizationItem theOther) -> NCollection_Array1_StepAP214_PersonAndOrganizationItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP214_PersonAndOrganizationItem self, NCollection_Array1_StepAP214_PersonAndOrganizationItem theOther) -> NCollection_Array1_StepAP214_PersonAndOrganizationItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP214_PersonAndOrganizationItem self, NCollection_Array1_StepAP214_PersonAndOrganizationItem theOther) -> NCollection_Array1_StepAP214_PersonAndOrganizationItem
        assign(NCollection_Array1_StepAP214_PersonAndOrganizationItem self, NCollection_Array1_StepAP214_PersonAndOrganizationItem theOther) -> NCollection_Array1_StepAP214_PersonAndOrganizationItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP214_PersonAndOrganizationItem self) -> StepAP214_PersonAndOrganizationItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP214_PersonAndOrganizationItem self) -> StepAP214_PersonAndOrganizationItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP214_PersonAndOrganizationItem self, Standard_Integer const theIndex) -> StepAP214_PersonAndOrganizationItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP214_PersonAndOrganizationItem self, Standard_Integer const theIndex, StepAP214_PersonAndOrganizationItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP214_PersonAndOrganizationItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem_Resize(self, *args)

    __swig_destroy__ = _StepAP214.delete_NCollection_Array1_StepAP214_PersonAndOrganizationItem
NCollection_Array1_StepAP214_PersonAndOrganizationItem_swigregister = _StepAP214.NCollection_Array1_StepAP214_PersonAndOrganizationItem_swigregister
NCollection_Array1_StepAP214_PersonAndOrganizationItem_swigregister(NCollection_Array1_StepAP214_PersonAndOrganizationItem)


try:
	StepAP214_Array1OfPersonAndOrganizationItem = NCollection_Array1_StepAP214_PersonAndOrganizationItem
except NameError:
	pass # does not exist, probably ignored

class NCollection_Array1_StepAP214_DocumentReferenceItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP214_DocumentReferenceItem self) -> NCollection_Array1< StepAP214_DocumentReferenceItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP214_DocumentReferenceItem self) -> NCollection_Array1< StepAP214_DocumentReferenceItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP214_DocumentReferenceItem self) -> NCollection_Array1< StepAP214_DocumentReferenceItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP214_DocumentReferenceItem self) -> NCollection_Array1< StepAP214_DocumentReferenceItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP214.new_NCollection_Array1_StepAP214_DocumentReferenceItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP214_DocumentReferenceItem self, StepAP214_DocumentReferenceItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP214_DocumentReferenceItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP214_DocumentReferenceItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP214_DocumentReferenceItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP214_DocumentReferenceItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP214_DocumentReferenceItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP214_DocumentReferenceItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP214_DocumentReferenceItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP214_DocumentReferenceItem self, NCollection_Array1_StepAP214_DocumentReferenceItem theOther) -> NCollection_Array1_StepAP214_DocumentReferenceItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP214_DocumentReferenceItem self, NCollection_Array1_StepAP214_DocumentReferenceItem theOther) -> NCollection_Array1_StepAP214_DocumentReferenceItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP214_DocumentReferenceItem self, NCollection_Array1_StepAP214_DocumentReferenceItem theOther) -> NCollection_Array1_StepAP214_DocumentReferenceItem
        assign(NCollection_Array1_StepAP214_DocumentReferenceItem self, NCollection_Array1_StepAP214_DocumentReferenceItem theOther) -> NCollection_Array1_StepAP214_DocumentReferenceItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP214_DocumentReferenceItem self) -> StepAP214_DocumentReferenceItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP214_DocumentReferenceItem self) -> StepAP214_DocumentReferenceItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP214_DocumentReferenceItem self, Standard_Integer const theIndex) -> StepAP214_DocumentReferenceItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP214_DocumentReferenceItem self, Standard_Integer const theIndex, StepAP214_DocumentReferenceItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP214_DocumentReferenceItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem_Resize(self, *args)

    __swig_destroy__ = _StepAP214.delete_NCollection_Array1_StepAP214_DocumentReferenceItem
NCollection_Array1_StepAP214_DocumentReferenceItem_swigregister = _StepAP214.NCollection_Array1_StepAP214_DocumentReferenceItem_swigregister
NCollection_Array1_StepAP214_DocumentReferenceItem_swigregister(NCollection_Array1_StepAP214_DocumentReferenceItem)


try:
	StepAP214_Array1OfDocumentReferenceItem = NCollection_Array1_StepAP214_DocumentReferenceItem
except NameError:
	pass # does not exist, probably ignored

class StepAP214_AutoDesignOrganizationAssignment(StepBasic.StepBasic_OrganizationAssignment):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_AutoDesignOrganizationAssignment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_AutoDesignOrganizationAssignment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_AutoDesignOrganizationAssignment self) -> StepAP214_AutoDesignOrganizationAssignment

        Returns a AutoDesignOrganizationAssignment


        """
        this = _StepAP214.new_StepAP214_AutoDesignOrganizationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP214_AutoDesignOrganizationAssignment self, Handle_StepBasic_Organization aAssignedOrganization, Handle_StepBasic_OrganizationRole aRole, Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem aItems)

        :type aAssignedOrganization: OCC.wrapper.StepBasic.Handle_StepBasic_Organization
        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_OrganizationRole
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

        """
        return _StepAP214.StepAP214_AutoDesignOrganizationAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP214_AutoDesignOrganizationAssignment self, Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

        """
        return _StepAP214.StepAP214_AutoDesignOrganizationAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(StepAP214_AutoDesignOrganizationAssignment self) -> Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

        """
        return _StepAP214.StepAP214_AutoDesignOrganizationAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(StepAP214_AutoDesignOrganizationAssignment self, Standard_Integer const num) -> StepAP214_AutoDesignGeneralOrgItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_AutoDesignGeneralOrgItem

        """
        return _StepAP214.StepAP214_AutoDesignOrganizationAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(StepAP214_AutoDesignOrganizationAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AutoDesignOrganizationAssignment_NbItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_AutoDesignOrganizationAssignment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_AutoDesignOrganizationAssignment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_AutoDesignOrganizationAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_AutoDesignOrganizationAssignment
StepAP214_AutoDesignOrganizationAssignment_swigregister = _StepAP214.StepAP214_AutoDesignOrganizationAssignment_swigregister
StepAP214_AutoDesignOrganizationAssignment_swigregister(StepAP214_AutoDesignOrganizationAssignment)

def StepAP214_AutoDesignOrganizationAssignment_get_type_name(*args):
    """
    StepAP214_AutoDesignOrganizationAssignment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_AutoDesignOrganizationAssignment_get_type_name(*args)

def StepAP214_AutoDesignOrganizationAssignment_get_type_descriptor(*args):
    """
    StepAP214_AutoDesignOrganizationAssignment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_AutoDesignOrganizationAssignment_get_type_descriptor(*args)

class StepAP214_HArray1OfDateItem(NCollection_Array1_StepAP214_DateItem, Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_HArray1OfDateItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_HArray1OfDateItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_HArray1OfDateItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP214_HArray1OfDateItem
        __init__(StepAP214_HArray1OfDateItem self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP214_DateItem theValue) -> StepAP214_HArray1OfDateItem
        __init__(StepAP214_HArray1OfDateItem self, NCollection_Array1_StepAP214_DateItem theOther) -> StepAP214_HArray1OfDateItem

        :type theOther: OCC.wrapper.StepAP214.StepAP214_Array1OfDateItem

        """
        this = _StepAP214.new_StepAP214_HArray1OfDateItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfDateItem

        """
        res = _StepAP214.StepAP214_HArray1OfDateItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP214_HArray1OfDateItem self) -> NCollection_Array1_StepAP214_DateItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfDateItem

        """
        return _StepAP214.StepAP214_HArray1OfDateItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_HArray1OfDateItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_HArray1OfDateItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_HArray1OfDateItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_HArray1OfDateItem
StepAP214_HArray1OfDateItem_swigregister = _StepAP214.StepAP214_HArray1OfDateItem_swigregister
StepAP214_HArray1OfDateItem_swigregister(StepAP214_HArray1OfDateItem)

def StepAP214_HArray1OfDateItem_get_type_name(*args):
    """
    StepAP214_HArray1OfDateItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_HArray1OfDateItem_get_type_name(*args)

def StepAP214_HArray1OfDateItem_get_type_descriptor(*args):
    """
    StepAP214_HArray1OfDateItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_HArray1OfDateItem_get_type_descriptor(*args)

class Handle_StepAP214_HArray1OfOrganizationItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_HArray1OfOrganizationItem self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_HArray1OfOrganizationItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_HArray1OfOrganizationItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_HArray1OfOrganizationItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_HArray1OfOrganizationItem self, StepAP214_HArray1OfOrganizationItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfOrganizationItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_HArray1OfOrganizationItem self, Handle_StepAP214_HArray1OfOrganizationItem theHandle) -> Handle_StepAP214_HArray1OfOrganizationItem
        assign(Handle_StepAP214_HArray1OfOrganizationItem self, StepAP214_HArray1OfOrganizationItem thePtr) -> Handle_StepAP214_HArray1OfOrganizationItem
        assign(Handle_StepAP214_HArray1OfOrganizationItem self, Handle_StepAP214_HArray1OfOrganizationItem theHandle) -> Handle_StepAP214_HArray1OfOrganizationItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_HArray1OfOrganizationItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_HArray1OfOrganizationItem self) -> StepAP214_HArray1OfOrganizationItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfOrganizationItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_HArray1OfOrganizationItem self) -> StepAP214_HArray1OfOrganizationItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfOrganizationItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_HArray1OfOrganizationItem self) -> StepAP214_HArray1OfOrganizationItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfOrganizationItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_HArray1OfOrganizationItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_HArray1OfOrganizationItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_HArray1OfOrganizationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_HArray1OfOrganizationItem_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_HArray1OfOrganizationItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfOrganizationItem

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfOrganizationItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP214_HArray1OfOrganizationItem self) -> NCollection_Array1_StepAP214_OrganizationItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfOrganizationItem

        """
        return _StepAP214.Handle_StepAP214_HArray1OfOrganizationItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_HArray1OfOrganizationItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfOrganizationItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfOrganizationItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfOrganizationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_HArray1OfOrganizationItem self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_HArray1OfOrganizationItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_HArray1OfOrganizationItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_HArray1OfOrganizationItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfOrganizationItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_HArray1OfOrganizationItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_HArray1OfOrganizationItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfOrganizationItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_HArray1OfOrganizationItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_HArray1OfOrganizationItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_HArray1OfOrganizationItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfOrganizationItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_HArray1OfOrganizationItem self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_HArray1OfOrganizationItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_HArray1OfOrganizationItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfOrganizationItem_DecrementRefCounter(self, *args)

Handle_StepAP214_HArray1OfOrganizationItem_swigregister = _StepAP214.Handle_StepAP214_HArray1OfOrganizationItem_swigregister
Handle_StepAP214_HArray1OfOrganizationItem_swigregister(Handle_StepAP214_HArray1OfOrganizationItem)

def Handle_StepAP214_HArray1OfOrganizationItem_DownCast(thing):
    return _StepAP214.Handle_StepAP214_HArray1OfOrganizationItem_DownCast(thing)
Handle_StepAP214_HArray1OfOrganizationItem_DownCast = _StepAP214.Handle_StepAP214_HArray1OfOrganizationItem_DownCast

class StepAP214_AutoDesignDateAndPersonAssignment(StepBasic.StepBasic_PersonAndOrganizationAssignment):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_AutoDesignDateAndPersonAssignment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_AutoDesignDateAndPersonAssignment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_AutoDesignDateAndPersonAssignment self) -> StepAP214_AutoDesignDateAndPersonAssignment

        Returns a AutoDesignDateAndPersonAssignment


        """
        this = _StepAP214.new_StepAP214_AutoDesignDateAndPersonAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP214_AutoDesignDateAndPersonAssignment self, Handle_StepBasic_PersonAndOrganization aAssignedPersonAndOrganization, Handle_StepBasic_PersonAndOrganizationRole aRole, Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem aItems)

        :type aAssignedPersonAndOrganization: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganization
        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganizationRole
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem

        """
        return _StepAP214.StepAP214_AutoDesignDateAndPersonAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP214_AutoDesignDateAndPersonAssignment self, Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem

        """
        return _StepAP214.StepAP214_AutoDesignDateAndPersonAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(StepAP214_AutoDesignDateAndPersonAssignment self) -> Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem

        """
        return _StepAP214.StepAP214_AutoDesignDateAndPersonAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(StepAP214_AutoDesignDateAndPersonAssignment self, Standard_Integer const num) -> StepAP214_AutoDesignDateAndPersonItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_AutoDesignDateAndPersonItem

        """
        return _StepAP214.StepAP214_AutoDesignDateAndPersonAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(StepAP214_AutoDesignDateAndPersonAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AutoDesignDateAndPersonAssignment_NbItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_AutoDesignDateAndPersonAssignment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_AutoDesignDateAndPersonAssignment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_AutoDesignDateAndPersonAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_AutoDesignDateAndPersonAssignment
StepAP214_AutoDesignDateAndPersonAssignment_swigregister = _StepAP214.StepAP214_AutoDesignDateAndPersonAssignment_swigregister
StepAP214_AutoDesignDateAndPersonAssignment_swigregister(StepAP214_AutoDesignDateAndPersonAssignment)

def StepAP214_AutoDesignDateAndPersonAssignment_get_type_name(*args):
    """
    StepAP214_AutoDesignDateAndPersonAssignment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_AutoDesignDateAndPersonAssignment_get_type_name(*args)

def StepAP214_AutoDesignDateAndPersonAssignment_get_type_descriptor(*args):
    """
    StepAP214_AutoDesignDateAndPersonAssignment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_AutoDesignDateAndPersonAssignment_get_type_descriptor(*args)

class Handle_StepAP214_HArray1OfGroupItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_HArray1OfGroupItem self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_HArray1OfGroupItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_HArray1OfGroupItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_HArray1OfGroupItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_HArray1OfGroupItem self, StepAP214_HArray1OfGroupItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfGroupItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_HArray1OfGroupItem self, Handle_StepAP214_HArray1OfGroupItem theHandle) -> Handle_StepAP214_HArray1OfGroupItem
        assign(Handle_StepAP214_HArray1OfGroupItem self, StepAP214_HArray1OfGroupItem thePtr) -> Handle_StepAP214_HArray1OfGroupItem
        assign(Handle_StepAP214_HArray1OfGroupItem self, Handle_StepAP214_HArray1OfGroupItem theHandle) -> Handle_StepAP214_HArray1OfGroupItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_HArray1OfGroupItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_HArray1OfGroupItem self) -> StepAP214_HArray1OfGroupItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfGroupItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_HArray1OfGroupItem self) -> StepAP214_HArray1OfGroupItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfGroupItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_HArray1OfGroupItem self) -> StepAP214_HArray1OfGroupItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfGroupItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_HArray1OfGroupItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_HArray1OfGroupItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_HArray1OfGroupItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_HArray1OfGroupItem_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_HArray1OfGroupItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfGroupItem

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfGroupItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP214_HArray1OfGroupItem self) -> NCollection_Array1_StepAP214_GroupItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfGroupItem

        """
        return _StepAP214.Handle_StepAP214_HArray1OfGroupItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_HArray1OfGroupItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfGroupItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfGroupItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfGroupItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_HArray1OfGroupItem self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_HArray1OfGroupItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_HArray1OfGroupItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_HArray1OfGroupItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfGroupItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_HArray1OfGroupItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_HArray1OfGroupItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfGroupItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_HArray1OfGroupItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_HArray1OfGroupItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_HArray1OfGroupItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfGroupItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_HArray1OfGroupItem self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_HArray1OfGroupItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_HArray1OfGroupItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfGroupItem_DecrementRefCounter(self, *args)

Handle_StepAP214_HArray1OfGroupItem_swigregister = _StepAP214.Handle_StepAP214_HArray1OfGroupItem_swigregister
Handle_StepAP214_HArray1OfGroupItem_swigregister(Handle_StepAP214_HArray1OfGroupItem)

def Handle_StepAP214_HArray1OfGroupItem_DownCast(thing):
    return _StepAP214.Handle_StepAP214_HArray1OfGroupItem_DownCast(thing)
Handle_StepAP214_HArray1OfGroupItem_DownCast = _StepAP214.Handle_StepAP214_HArray1OfGroupItem_DownCast

class Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self, StepAP214_HArray1OfAutoDesignGeneralOrgItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self, Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem theHandle) -> Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem
        assign(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self, StepAP214_HArray1OfAutoDesignGeneralOrgItem thePtr) -> Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem
        assign(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self, Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem theHandle) -> Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self) -> StepAP214_HArray1OfAutoDesignGeneralOrgItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self) -> StepAP214_HArray1OfAutoDesignGeneralOrgItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self) -> StepAP214_HArray1OfAutoDesignGeneralOrgItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignGeneralOrgItem

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self) -> NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfAutoDesignGeneralOrgItem

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def begin(self, *args):
        """
        begin(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self) -> NCollection_Array1< StepAP214_AutoDesignGeneralOrgItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_begin(self, *args)


    def end(self, *args):
        """
        end(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self) -> NCollection_Array1< StepAP214_AutoDesignGeneralOrgItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self) -> NCollection_Array1< StepAP214_AutoDesignGeneralOrgItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self) -> NCollection_Array1< StepAP214_AutoDesignGeneralOrgItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_cend(self, *args)


    def Init(self, *args):
        """
        Init(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self, StepAP214_AutoDesignGeneralOrgItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self, NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem theOther) -> NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self, NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem theOther) -> NCollection_Array1_StepAP214_AutoDesignGeneralOrgItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_Move(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self) -> StepAP214_AutoDesignGeneralOrgItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self) -> StepAP214_AutoDesignGeneralOrgItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self, Standard_Integer const theIndex) -> StepAP214_AutoDesignGeneralOrgItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_ChangeValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self, Standard_Integer const theIndex, StepAP214_AutoDesignGeneralOrgItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_Resize(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_DecrementRefCounter(self, *args)

Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_swigregister = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_swigregister
Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_swigregister(Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem)

def Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_DownCast(thing):
    return _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_DownCast(thing)
Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_DownCast = _StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem_DownCast

class Handle_StepAP214_HArray1OfDateItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_HArray1OfDateItem self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_HArray1OfDateItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_HArray1OfDateItem self, StepAP214_HArray1OfDateItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_HArray1OfDateItem self, Handle_StepAP214_HArray1OfDateItem theHandle) -> Handle_StepAP214_HArray1OfDateItem
        assign(Handle_StepAP214_HArray1OfDateItem self, StepAP214_HArray1OfDateItem thePtr) -> Handle_StepAP214_HArray1OfDateItem
        assign(Handle_StepAP214_HArray1OfDateItem self, Handle_StepAP214_HArray1OfDateItem theHandle) -> Handle_StepAP214_HArray1OfDateItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_HArray1OfDateItem self) -> StepAP214_HArray1OfDateItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_HArray1OfDateItem self) -> StepAP214_HArray1OfDateItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_HArray1OfDateItem self) -> StepAP214_HArray1OfDateItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_HArray1OfDateItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_HArray1OfDateItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_HArray1OfDateItem_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_HArray1OfDateItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfDateItem

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfDateItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP214_HArray1OfDateItem self) -> NCollection_Array1_StepAP214_DateItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfDateItem

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_HArray1OfDateItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfDateItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfDateItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def begin(self, *args):
        """
        begin(Handle_StepAP214_HArray1OfDateItem self) -> NCollection_Array1< StepAP214_DateItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_begin(self, *args)


    def end(self, *args):
        """
        end(Handle_StepAP214_HArray1OfDateItem self) -> NCollection_Array1< StepAP214_DateItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(Handle_StepAP214_HArray1OfDateItem self) -> NCollection_Array1< StepAP214_DateItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(Handle_StepAP214_HArray1OfDateItem self) -> NCollection_Array1< StepAP214_DateItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_cend(self, *args)


    def Init(self, *args):
        """
        Init(Handle_StepAP214_HArray1OfDateItem self, StepAP214_DateItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(Handle_StepAP214_HArray1OfDateItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(Handle_StepAP214_HArray1OfDateItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_StepAP214_HArray1OfDateItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(Handle_StepAP214_HArray1OfDateItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(Handle_StepAP214_HArray1OfDateItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(Handle_StepAP214_HArray1OfDateItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(Handle_StepAP214_HArray1OfDateItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(Handle_StepAP214_HArray1OfDateItem self, NCollection_Array1_StepAP214_DateItem theOther) -> NCollection_Array1_StepAP214_DateItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(Handle_StepAP214_HArray1OfDateItem self, NCollection_Array1_StepAP214_DateItem theOther) -> NCollection_Array1_StepAP214_DateItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_Move(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfDateItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(Handle_StepAP214_HArray1OfDateItem self) -> StepAP214_DateItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfDateItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(Handle_StepAP214_HArray1OfDateItem self) -> StepAP214_DateItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfDateItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfDateItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfDateItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(Handle_StepAP214_HArray1OfDateItem self, Standard_Integer const theIndex) -> StepAP214_DateItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_ChangeValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_StepAP214_HArray1OfDateItem self, Standard_Integer const theIndex, StepAP214_DateItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(Handle_StepAP214_HArray1OfDateItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_Resize(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_HArray1OfDateItem self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_HArray1OfDateItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_HArray1OfDateItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_HArray1OfDateItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_HArray1OfDateItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_HArray1OfDateItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_HArray1OfDateItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_HArray1OfDateItem self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_HArray1OfDateItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateItem_DecrementRefCounter(self, *args)

Handle_StepAP214_HArray1OfDateItem_swigregister = _StepAP214.Handle_StepAP214_HArray1OfDateItem_swigregister
Handle_StepAP214_HArray1OfDateItem_swigregister(Handle_StepAP214_HArray1OfDateItem)

def Handle_StepAP214_HArray1OfDateItem_DownCast(thing):
    return _StepAP214.Handle_StepAP214_HArray1OfDateItem_DownCast(thing)
Handle_StepAP214_HArray1OfDateItem_DownCast = _StepAP214.Handle_StepAP214_HArray1OfDateItem_DownCast

class Handle_StepAP214_AppliedPresentedItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_AppliedPresentedItem self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_AppliedPresentedItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_AppliedPresentedItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_AppliedPresentedItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_AppliedPresentedItem self, StepAP214_AppliedPresentedItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedPresentedItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_AppliedPresentedItem self, Handle_StepAP214_AppliedPresentedItem theHandle) -> Handle_StepAP214_AppliedPresentedItem
        assign(Handle_StepAP214_AppliedPresentedItem self, StepAP214_AppliedPresentedItem thePtr) -> Handle_StepAP214_AppliedPresentedItem
        assign(Handle_StepAP214_AppliedPresentedItem self, Handle_StepAP214_AppliedPresentedItem theHandle) -> Handle_StepAP214_AppliedPresentedItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_AppliedPresentedItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_AppliedPresentedItem self) -> StepAP214_AppliedPresentedItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedPresentedItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_AppliedPresentedItem self) -> StepAP214_AppliedPresentedItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedPresentedItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_AppliedPresentedItem self) -> StepAP214_AppliedPresentedItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_AppliedPresentedItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_AppliedPresentedItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_AppliedPresentedItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_AppliedPresentedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_AppliedPresentedItem_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_AppliedPresentedItem

    def Init(self, *args):
        """
        Init(Handle_StepAP214_AppliedPresentedItem self, Handle_StepAP214_HArray1OfPresentedItemSelect aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect

        """
        return _StepAP214.Handle_StepAP214_AppliedPresentedItem_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP214_AppliedPresentedItem self, Handle_StepAP214_HArray1OfPresentedItemSelect aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect

        """
        return _StepAP214.Handle_StepAP214_AppliedPresentedItem_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP214_AppliedPresentedItem self) -> Handle_StepAP214_HArray1OfPresentedItemSelect

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect

        """
        return _StepAP214.Handle_StepAP214_AppliedPresentedItem_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(Handle_StepAP214_AppliedPresentedItem self, Standard_Integer const num) -> StepAP214_PresentedItemSelect

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_PresentedItemSelect

        """
        return _StepAP214.Handle_StepAP214_AppliedPresentedItem_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(Handle_StepAP214_AppliedPresentedItem self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedPresentedItem_NbItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_AppliedPresentedItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_AppliedPresentedItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AppliedPresentedItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AppliedPresentedItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_AppliedPresentedItem self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_AppliedPresentedItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_AppliedPresentedItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_AppliedPresentedItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AppliedPresentedItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_AppliedPresentedItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_AppliedPresentedItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AppliedPresentedItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_AppliedPresentedItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_AppliedPresentedItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_AppliedPresentedItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedPresentedItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_AppliedPresentedItem self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_AppliedPresentedItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_AppliedPresentedItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedPresentedItem_DecrementRefCounter(self, *args)

Handle_StepAP214_AppliedPresentedItem_swigregister = _StepAP214.Handle_StepAP214_AppliedPresentedItem_swigregister
Handle_StepAP214_AppliedPresentedItem_swigregister(Handle_StepAP214_AppliedPresentedItem)

def Handle_StepAP214_AppliedPresentedItem_DownCast(thing):
    return _StepAP214.Handle_StepAP214_AppliedPresentedItem_DownCast(thing)
Handle_StepAP214_AppliedPresentedItem_DownCast = _StepAP214.Handle_StepAP214_AppliedPresentedItem_DownCast

class Handle_StepAP214_AppliedSecurityClassificationAssignment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_AppliedSecurityClassificationAssignment self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_AppliedSecurityClassificationAssignment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_AppliedSecurityClassificationAssignment self, StepAP214_AppliedSecurityClassificationAssignment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_AppliedSecurityClassificationAssignment self, Handle_StepAP214_AppliedSecurityClassificationAssignment theHandle) -> Handle_StepAP214_AppliedSecurityClassificationAssignment
        assign(Handle_StepAP214_AppliedSecurityClassificationAssignment self, StepAP214_AppliedSecurityClassificationAssignment thePtr) -> Handle_StepAP214_AppliedSecurityClassificationAssignment
        assign(Handle_StepAP214_AppliedSecurityClassificationAssignment self, Handle_StepAP214_AppliedSecurityClassificationAssignment theHandle) -> Handle_StepAP214_AppliedSecurityClassificationAssignment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_AppliedSecurityClassificationAssignment self) -> StepAP214_AppliedSecurityClassificationAssignment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_AppliedSecurityClassificationAssignment self) -> StepAP214_AppliedSecurityClassificationAssignment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_AppliedSecurityClassificationAssignment self) -> StepAP214_AppliedSecurityClassificationAssignment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_AppliedSecurityClassificationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_AppliedSecurityClassificationAssignment

    def Init(self, *args):
        """
        Init(Handle_StepAP214_AppliedSecurityClassificationAssignment self, Handle_StepBasic_SecurityClassification aAssignedSecurityClassification, Handle_StepAP214_HArray1OfSecurityClassificationItem aItems)

        :type aAssignedSecurityClassification: OCC.wrapper.StepBasic.Handle_StepBasic_SecurityClassification
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem

        """
        return _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP214_AppliedSecurityClassificationAssignment self, Handle_StepAP214_HArray1OfSecurityClassificationItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem

        """
        return _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP214_AppliedSecurityClassificationAssignment self) -> Handle_StepAP214_HArray1OfSecurityClassificationItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem

        """
        return _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_SecurityClassificationItem

        """
        res = _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_ItemsValue(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NbItems(self, *args):
        """
        NbItems(Handle_StepAP214_AppliedSecurityClassificationAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_NbItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_AppliedSecurityClassificationAssignment self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAssignedSecurityClassification(self, *args):
        """
        SetAssignedSecurityClassification(Handle_StepAP214_AppliedSecurityClassificationAssignment self, Handle_StepBasic_SecurityClassification aAssignedSecurityClassification)

        :type aAssignedSecurityClassification: OCC.wrapper.StepBasic.Handle_StepBasic_SecurityClassification

        """
        return _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_SetAssignedSecurityClassification(self, *args)


    def AssignedSecurityClassification(self, *args):
        """
        AssignedSecurityClassification(Handle_StepAP214_AppliedSecurityClassificationAssignment self) -> Handle_StepBasic_SecurityClassification

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_SecurityClassification

        """
        return _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_AssignedSecurityClassification(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_AppliedSecurityClassificationAssignment self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_AppliedSecurityClassificationAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_AppliedSecurityClassificationAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_AppliedSecurityClassificationAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_AppliedSecurityClassificationAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_AppliedSecurityClassificationAssignment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_AppliedSecurityClassificationAssignment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_AppliedSecurityClassificationAssignment self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_AppliedSecurityClassificationAssignment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_DecrementRefCounter(self, *args)

Handle_StepAP214_AppliedSecurityClassificationAssignment_swigregister = _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_swigregister
Handle_StepAP214_AppliedSecurityClassificationAssignment_swigregister(Handle_StepAP214_AppliedSecurityClassificationAssignment)

def Handle_StepAP214_AppliedSecurityClassificationAssignment_DownCast(thing):
    return _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_DownCast(thing)
Handle_StepAP214_AppliedSecurityClassificationAssignment_DownCast = _StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment_DownCast

class Handle_StepAP214_AppliedGroupAssignment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_AppliedGroupAssignment self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_AppliedGroupAssignment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_AppliedGroupAssignment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_AppliedGroupAssignment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_AppliedGroupAssignment self, StepAP214_AppliedGroupAssignment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedGroupAssignment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_AppliedGroupAssignment self, Handle_StepAP214_AppliedGroupAssignment theHandle) -> Handle_StepAP214_AppliedGroupAssignment
        assign(Handle_StepAP214_AppliedGroupAssignment self, StepAP214_AppliedGroupAssignment thePtr) -> Handle_StepAP214_AppliedGroupAssignment
        assign(Handle_StepAP214_AppliedGroupAssignment self, Handle_StepAP214_AppliedGroupAssignment theHandle) -> Handle_StepAP214_AppliedGroupAssignment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_AppliedGroupAssignment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_AppliedGroupAssignment self) -> StepAP214_AppliedGroupAssignment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedGroupAssignment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_AppliedGroupAssignment self) -> StepAP214_AppliedGroupAssignment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedGroupAssignment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_AppliedGroupAssignment self) -> StepAP214_AppliedGroupAssignment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_AppliedGroupAssignment___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_AppliedGroupAssignment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_AppliedGroupAssignment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_AppliedGroupAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_AppliedGroupAssignment_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_AppliedGroupAssignment

    def Init(self, *args):
        """
        Init(Handle_StepAP214_AppliedGroupAssignment self, Handle_StepBasic_Group aGroupAssignment_AssignedGroup, Handle_StepAP214_HArray1OfGroupItem aItems)

        Initialize all fields (own and inherited)

        :type aGroupAssignment_AssignedGroup: OCC.wrapper.StepBasic.Handle_StepBasic_Group
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfGroupItem

        """
        return _StepAP214.Handle_StepAP214_AppliedGroupAssignment_Init(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP214_AppliedGroupAssignment self) -> Handle_StepAP214_HArray1OfGroupItem

        Returns field Items

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfGroupItem

        """
        return _StepAP214.Handle_StepAP214_AppliedGroupAssignment_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP214_AppliedGroupAssignment self, Handle_StepAP214_HArray1OfGroupItem Items)

        Set field Items

        :type Items: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfGroupItem

        """
        return _StepAP214.Handle_StepAP214_AppliedGroupAssignment_SetItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_AppliedGroupAssignment self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_AppliedGroupAssignment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AppliedGroupAssignment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AppliedGroupAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def AssignedGroup(self, *args):
        """
        AssignedGroup(Handle_StepAP214_AppliedGroupAssignment self) -> Handle_StepBasic_Group

        Returns field AssignedGroup

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Group

        """
        return _StepAP214.Handle_StepAP214_AppliedGroupAssignment_AssignedGroup(self, *args)


    def SetAssignedGroup(self, *args):
        """
        SetAssignedGroup(Handle_StepAP214_AppliedGroupAssignment self, Handle_StepBasic_Group AssignedGroup)

        Set field AssignedGroup

        :type AssignedGroup: OCC.wrapper.StepBasic.Handle_StepBasic_Group

        """
        return _StepAP214.Handle_StepAP214_AppliedGroupAssignment_SetAssignedGroup(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_AppliedGroupAssignment self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_AppliedGroupAssignment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_AppliedGroupAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_AppliedGroupAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AppliedGroupAssignment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_AppliedGroupAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_AppliedGroupAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AppliedGroupAssignment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_AppliedGroupAssignment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_AppliedGroupAssignment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_AppliedGroupAssignment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedGroupAssignment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_AppliedGroupAssignment self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_AppliedGroupAssignment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_AppliedGroupAssignment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedGroupAssignment_DecrementRefCounter(self, *args)

Handle_StepAP214_AppliedGroupAssignment_swigregister = _StepAP214.Handle_StepAP214_AppliedGroupAssignment_swigregister
Handle_StepAP214_AppliedGroupAssignment_swigregister(Handle_StepAP214_AppliedGroupAssignment)

def Handle_StepAP214_AppliedGroupAssignment_DownCast(thing):
    return _StepAP214.Handle_StepAP214_AppliedGroupAssignment_DownCast(thing)
Handle_StepAP214_AppliedGroupAssignment_DownCast = _StepAP214.Handle_StepAP214_AppliedGroupAssignment_DownCast

class Handle_StepAP214_AutoDesignOrganizationAssignment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_AutoDesignOrganizationAssignment self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_AutoDesignOrganizationAssignment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_AutoDesignOrganizationAssignment self, StepAP214_AutoDesignOrganizationAssignment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_AutoDesignOrganizationAssignment self, Handle_StepAP214_AutoDesignOrganizationAssignment theHandle) -> Handle_StepAP214_AutoDesignOrganizationAssignment
        assign(Handle_StepAP214_AutoDesignOrganizationAssignment self, StepAP214_AutoDesignOrganizationAssignment thePtr) -> Handle_StepAP214_AutoDesignOrganizationAssignment
        assign(Handle_StepAP214_AutoDesignOrganizationAssignment self, Handle_StepAP214_AutoDesignOrganizationAssignment theHandle) -> Handle_StepAP214_AutoDesignOrganizationAssignment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_AutoDesignOrganizationAssignment self) -> StepAP214_AutoDesignOrganizationAssignment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_AutoDesignOrganizationAssignment self) -> StepAP214_AutoDesignOrganizationAssignment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_AutoDesignOrganizationAssignment self) -> StepAP214_AutoDesignOrganizationAssignment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_AutoDesignOrganizationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_AutoDesignOrganizationAssignment

    def Init(self, *args):
        """
        Init(Handle_StepAP214_AutoDesignOrganizationAssignment self, Handle_StepBasic_Organization aAssignedOrganization, Handle_StepBasic_OrganizationRole aRole, Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem aItems)

        :type aAssignedOrganization: OCC.wrapper.StepBasic.Handle_StepBasic_Organization
        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_OrganizationRole
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP214_AutoDesignOrganizationAssignment self, Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP214_AutoDesignOrganizationAssignment self) -> Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(Handle_StepAP214_AutoDesignOrganizationAssignment self, Standard_Integer const num) -> StepAP214_AutoDesignGeneralOrgItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_AutoDesignGeneralOrgItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(Handle_StepAP214_AutoDesignOrganizationAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_NbItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_AutoDesignOrganizationAssignment self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAssignedOrganization(self, *args):
        """
        SetAssignedOrganization(Handle_StepAP214_AutoDesignOrganizationAssignment self, Handle_StepBasic_Organization aAssignedOrganization)

        :type aAssignedOrganization: OCC.wrapper.StepBasic.Handle_StepBasic_Organization

        """
        return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_SetAssignedOrganization(self, *args)


    def AssignedOrganization(self, *args):
        """
        AssignedOrganization(Handle_StepAP214_AutoDesignOrganizationAssignment self) -> Handle_StepBasic_Organization

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Organization

        """
        return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_AssignedOrganization(self, *args)


    def SetRole(self, *args):
        """
        SetRole(Handle_StepAP214_AutoDesignOrganizationAssignment self, Handle_StepBasic_OrganizationRole aRole)

        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_OrganizationRole

        """
        return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_SetRole(self, *args)


    def Role(self, *args):
        """
        Role(Handle_StepAP214_AutoDesignOrganizationAssignment self) -> Handle_StepBasic_OrganizationRole

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_OrganizationRole

        """
        return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_Role(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_AutoDesignOrganizationAssignment self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_AutoDesignOrganizationAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_AutoDesignOrganizationAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_AutoDesignOrganizationAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_AutoDesignOrganizationAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_AutoDesignOrganizationAssignment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_AutoDesignOrganizationAssignment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_AutoDesignOrganizationAssignment self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_AutoDesignOrganizationAssignment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_DecrementRefCounter(self, *args)

Handle_StepAP214_AutoDesignOrganizationAssignment_swigregister = _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_swigregister
Handle_StepAP214_AutoDesignOrganizationAssignment_swigregister(Handle_StepAP214_AutoDesignOrganizationAssignment)

def Handle_StepAP214_AutoDesignOrganizationAssignment_DownCast(thing):
    return _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_DownCast(thing)
Handle_StepAP214_AutoDesignOrganizationAssignment_DownCast = _StepAP214.Handle_StepAP214_AutoDesignOrganizationAssignment_DownCast

class Handle_StepAP214_HArray1OfPresentedItemSelect(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_HArray1OfPresentedItemSelect self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_HArray1OfPresentedItemSelect self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_HArray1OfPresentedItemSelect self, StepAP214_HArray1OfPresentedItemSelect thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_HArray1OfPresentedItemSelect self, Handle_StepAP214_HArray1OfPresentedItemSelect theHandle) -> Handle_StepAP214_HArray1OfPresentedItemSelect
        assign(Handle_StepAP214_HArray1OfPresentedItemSelect self, StepAP214_HArray1OfPresentedItemSelect thePtr) -> Handle_StepAP214_HArray1OfPresentedItemSelect
        assign(Handle_StepAP214_HArray1OfPresentedItemSelect self, Handle_StepAP214_HArray1OfPresentedItemSelect theHandle) -> Handle_StepAP214_HArray1OfPresentedItemSelect

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_HArray1OfPresentedItemSelect self) -> StepAP214_HArray1OfPresentedItemSelect

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_HArray1OfPresentedItemSelect self) -> StepAP214_HArray1OfPresentedItemSelect

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_HArray1OfPresentedItemSelect self) -> StepAP214_HArray1OfPresentedItemSelect

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_HArray1OfPresentedItemSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_HArray1OfPresentedItemSelect

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfPresentedItemSelect

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP214_HArray1OfPresentedItemSelect self) -> NCollection_Array1_StepAP214_PresentedItemSelect

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfPresentedItemSelect

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_HArray1OfPresentedItemSelect self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_HArray1OfPresentedItemSelect self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_HArray1OfPresentedItemSelect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_HArray1OfPresentedItemSelect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_HArray1OfPresentedItemSelect self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_HArray1OfPresentedItemSelect self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_HArray1OfPresentedItemSelect self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_HArray1OfPresentedItemSelect self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_HArray1OfPresentedItemSelect self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_HArray1OfPresentedItemSelect self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect_DecrementRefCounter(self, *args)

Handle_StepAP214_HArray1OfPresentedItemSelect_swigregister = _StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect_swigregister
Handle_StepAP214_HArray1OfPresentedItemSelect_swigregister(Handle_StepAP214_HArray1OfPresentedItemSelect)

def Handle_StepAP214_HArray1OfPresentedItemSelect_DownCast(thing):
    return _StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect_DownCast(thing)
Handle_StepAP214_HArray1OfPresentedItemSelect_DownCast = _StepAP214.Handle_StepAP214_HArray1OfPresentedItemSelect_DownCast

class StepAP214_HArray1OfSecurityClassificationItem(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_HArray1OfSecurityClassificationItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_HArray1OfSecurityClassificationItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_HArray1OfSecurityClassificationItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP214_HArray1OfSecurityClassificationItem
        __init__(StepAP214_HArray1OfSecurityClassificationItem self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP214_SecurityClassificationItem theValue) -> StepAP214_HArray1OfSecurityClassificationItem
        __init__(StepAP214_HArray1OfSecurityClassificationItem self, NCollection_Array1_StepAP214_SecurityClassificationItem theOther) -> StepAP214_HArray1OfSecurityClassificationItem

        :type theOther: OCC.wrapper.StepAP214.StepAP214_Array1OfSecurityClassificationItem

        """
        this = _StepAP214.new_StepAP214_HArray1OfSecurityClassificationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfSecurityClassificationItem

        """
        res = _StepAP214.StepAP214_HArray1OfSecurityClassificationItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP214_HArray1OfSecurityClassificationItem self) -> NCollection_Array1_StepAP214_SecurityClassificationItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfSecurityClassificationItem

        """
        return _StepAP214.StepAP214_HArray1OfSecurityClassificationItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_HArray1OfSecurityClassificationItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_HArray1OfSecurityClassificationItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_HArray1OfSecurityClassificationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_HArray1OfSecurityClassificationItem
StepAP214_HArray1OfSecurityClassificationItem_swigregister = _StepAP214.StepAP214_HArray1OfSecurityClassificationItem_swigregister
StepAP214_HArray1OfSecurityClassificationItem_swigregister(StepAP214_HArray1OfSecurityClassificationItem)

def StepAP214_HArray1OfSecurityClassificationItem_get_type_name(*args):
    """
    StepAP214_HArray1OfSecurityClassificationItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_HArray1OfSecurityClassificationItem_get_type_name(*args)

def StepAP214_HArray1OfSecurityClassificationItem_get_type_descriptor(*args):
    """
    StepAP214_HArray1OfSecurityClassificationItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_HArray1OfSecurityClassificationItem_get_type_descriptor(*args)

class StepAP214_AutoDesignSecurityClassificationAssignment(StepBasic.StepBasic_SecurityClassificationAssignment):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_AutoDesignSecurityClassificationAssignment
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_AutoDesignSecurityClassificationAssignment(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_AutoDesignSecurityClassificationAssignment self) -> StepAP214_AutoDesignSecurityClassificationAssignment

        Returns a AutoDesignSecurityClassificationAssignment


        """
        this = _StepAP214.new_StepAP214_AutoDesignSecurityClassificationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Init(self, *args):
        """
        Init(StepAP214_AutoDesignSecurityClassificationAssignment self, Handle_StepBasic_SecurityClassification aAssignedSecurityClassification, Handle_StepBasic_HArray1OfApproval aItems)

        :type aAssignedSecurityClassification: OCC.wrapper.StepBasic.Handle_StepBasic_SecurityClassification
        :type aItems: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfApproval

        """
        return _StepAP214.StepAP214_AutoDesignSecurityClassificationAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(StepAP214_AutoDesignSecurityClassificationAssignment self, Handle_StepBasic_HArray1OfApproval aItems)

        :type aItems: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfApproval

        """
        return _StepAP214.StepAP214_AutoDesignSecurityClassificationAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(StepAP214_AutoDesignSecurityClassificationAssignment self) -> Handle_StepBasic_HArray1OfApproval

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfApproval

        """
        return _StepAP214.StepAP214_AutoDesignSecurityClassificationAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(StepAP214_AutoDesignSecurityClassificationAssignment self, Standard_Integer const num) -> Handle_StepBasic_Approval

        :type num: int
        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Approval

        """
        return _StepAP214.StepAP214_AutoDesignSecurityClassificationAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(StepAP214_AutoDesignSecurityClassificationAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AutoDesignSecurityClassificationAssignment_NbItems(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_AutoDesignSecurityClassificationAssignment_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_AutoDesignSecurityClassificationAssignment_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_AutoDesignSecurityClassificationAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_AutoDesignSecurityClassificationAssignment
StepAP214_AutoDesignSecurityClassificationAssignment_swigregister = _StepAP214.StepAP214_AutoDesignSecurityClassificationAssignment_swigregister
StepAP214_AutoDesignSecurityClassificationAssignment_swigregister(StepAP214_AutoDesignSecurityClassificationAssignment)

def StepAP214_AutoDesignSecurityClassificationAssignment_get_type_name(*args):
    """
    StepAP214_AutoDesignSecurityClassificationAssignment_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_AutoDesignSecurityClassificationAssignment_get_type_name(*args)

def StepAP214_AutoDesignSecurityClassificationAssignment_get_type_descriptor(*args):
    """
    StepAP214_AutoDesignSecurityClassificationAssignment_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_AutoDesignSecurityClassificationAssignment_get_type_descriptor(*args)

class StepAP214_SecurityClassificationItem(StepAP214_ApprovalItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP214_SecurityClassificationItem self) -> StepAP214_SecurityClassificationItem

        Returns a SecurityClassificationItem SelectType


        """
        this = _StepAP214.new_StepAP214_SecurityClassificationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP214_SecurityClassificationItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a SecurityClassificationItem Kind Entity that is :
        1 -> Action
        2 -> AssemblyComponentUsage
        3 -> AssemblyComponentUsageSubstitute
        4 -> ConfigurationDesign
        5 -> ConfigurationEffectivity
        6 -> Document
        7 -> DocumentFile
        8 -> DraughtingModel
        9 -> GeneralProperty
        10 -> MakeFromUsageOption
        11 -> MaterialDesignation
        12 -> MechanicalDesignGeometricPresentationRepresentation
        13 -> PresentationArea
        14 -> Product
        15 -> ProductConcept
        16 -> ProductDefinition
        17 -> ProductDefinitionFormation
        18 -> ProductDefinitionRelationship
        19 -> ProductDefinitionUsage
        20 -> PropertyDefinition
        21 -> ShapeRepresentation
        22 -> VersionedActionRequest
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_SecurityClassificationItem_CaseNum(self, *args)


    def Action(self, *args):
        """
        Action(StepAP214_SecurityClassificationItem self) -> Handle_StepBasic_Action

        returns Value as a Action (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Action

        """
        return _StepAP214.StepAP214_SecurityClassificationItem_Action(self, *args)


    def AssemblyComponentUsage(self, *args):
        """
        AssemblyComponentUsage(StepAP214_SecurityClassificationItem self) -> Handle_StepRepr_AssemblyComponentUsage

        returns Value as a AssemblyComponentUsage (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_AssemblyComponentUsage

        """
        return _StepAP214.StepAP214_SecurityClassificationItem_AssemblyComponentUsage(self, *args)


    def ConfigurationDesign(self, *args):
        """
        ConfigurationDesign(StepAP214_SecurityClassificationItem self) -> Handle_StepRepr_ConfigurationDesign

        returns Value as a ConfigurationDesign (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationDesign

        """
        return _StepAP214.StepAP214_SecurityClassificationItem_ConfigurationDesign(self, *args)


    def ConfigurationEffectivity(self, *args):
        """
        ConfigurationEffectivity(StepAP214_SecurityClassificationItem self) -> Handle_StepRepr_ConfigurationEffectivity

        returns Value as a ConfigurationEffectivity (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ConfigurationEffectivity

        """
        return _StepAP214.StepAP214_SecurityClassificationItem_ConfigurationEffectivity(self, *args)


    def DraughtingModel(self, *args):
        """
        DraughtingModel(StepAP214_SecurityClassificationItem self) -> Handle_StepVisual_DraughtingModel

        returns Value as a DraughtingModel (Null if another type)

        :rtype: OCC.wrapper.StepVisual.Handle_StepVisual_DraughtingModel

        """
        return _StepAP214.StepAP214_SecurityClassificationItem_DraughtingModel(self, *args)


    def GeneralProperty(self, *args):
        """
        GeneralProperty(StepAP214_SecurityClassificationItem self) -> Handle_StepBasic_GeneralProperty

        returns Value as a GeneralProperty (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_GeneralProperty

        """
        return _StepAP214.StepAP214_SecurityClassificationItem_GeneralProperty(self, *args)


    def MakeFromUsageOption(self, *args):
        """
        MakeFromUsageOption(StepAP214_SecurityClassificationItem self) -> Handle_StepRepr_MakeFromUsageOption

        returns Value as a MakeFromUsageOption (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_MakeFromUsageOption

        """
        return _StepAP214.StepAP214_SecurityClassificationItem_MakeFromUsageOption(self, *args)


    def ProductConcept(self, *args):
        """
        ProductConcept(StepAP214_SecurityClassificationItem self) -> Handle_StepRepr_ProductConcept

        returns Value as a ProductConcept (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductConcept

        """
        return _StepAP214.StepAP214_SecurityClassificationItem_ProductConcept(self, *args)


    def ProductDefinitionUsage(self, *args):
        """
        ProductDefinitionUsage(StepAP214_SecurityClassificationItem self) -> Handle_StepRepr_ProductDefinitionUsage

        returns Value as a ProductDefinitionUsage (Null if another type)

        :rtype: OCC.wrapper.StepRepr.Handle_StepRepr_ProductDefinitionUsage

        """
        return _StepAP214.StepAP214_SecurityClassificationItem_ProductDefinitionUsage(self, *args)


    def VersionedActionRequest(self, *args):
        """
        VersionedActionRequest(StepAP214_SecurityClassificationItem self) -> Handle_StepBasic_VersionedActionRequest

        returns Value as a VersionedActionRequest (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_VersionedActionRequest

        """
        return _StepAP214.StepAP214_SecurityClassificationItem_VersionedActionRequest(self, *args)

    __swig_destroy__ = _StepAP214.delete_StepAP214_SecurityClassificationItem
StepAP214_SecurityClassificationItem_swigregister = _StepAP214.StepAP214_SecurityClassificationItem_swigregister
StepAP214_SecurityClassificationItem_swigregister(StepAP214_SecurityClassificationItem)

class NCollection_Array1_StepAP214_ExternalIdentificationItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP214_ExternalIdentificationItem self) -> NCollection_Array1< StepAP214_ExternalIdentificationItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP214_ExternalIdentificationItem self) -> NCollection_Array1< StepAP214_ExternalIdentificationItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP214_ExternalIdentificationItem self) -> NCollection_Array1< StepAP214_ExternalIdentificationItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP214_ExternalIdentificationItem self) -> NCollection_Array1< StepAP214_ExternalIdentificationItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP214.new_NCollection_Array1_StepAP214_ExternalIdentificationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP214_ExternalIdentificationItem self, StepAP214_ExternalIdentificationItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP214_ExternalIdentificationItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP214_ExternalIdentificationItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP214_ExternalIdentificationItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP214_ExternalIdentificationItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP214_ExternalIdentificationItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP214_ExternalIdentificationItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP214_ExternalIdentificationItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP214_ExternalIdentificationItem self, NCollection_Array1_StepAP214_ExternalIdentificationItem theOther) -> NCollection_Array1_StepAP214_ExternalIdentificationItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP214_ExternalIdentificationItem self, NCollection_Array1_StepAP214_ExternalIdentificationItem theOther) -> NCollection_Array1_StepAP214_ExternalIdentificationItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP214_ExternalIdentificationItem self, NCollection_Array1_StepAP214_ExternalIdentificationItem theOther) -> NCollection_Array1_StepAP214_ExternalIdentificationItem
        assign(NCollection_Array1_StepAP214_ExternalIdentificationItem self, NCollection_Array1_StepAP214_ExternalIdentificationItem theOther) -> NCollection_Array1_StepAP214_ExternalIdentificationItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP214_ExternalIdentificationItem self) -> StepAP214_ExternalIdentificationItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP214_ExternalIdentificationItem self) -> StepAP214_ExternalIdentificationItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP214_ExternalIdentificationItem self, Standard_Integer const theIndex) -> StepAP214_ExternalIdentificationItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP214_ExternalIdentificationItem self, Standard_Integer const theIndex, StepAP214_ExternalIdentificationItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP214_ExternalIdentificationItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem_Resize(self, *args)

    __swig_destroy__ = _StepAP214.delete_NCollection_Array1_StepAP214_ExternalIdentificationItem
NCollection_Array1_StepAP214_ExternalIdentificationItem_swigregister = _StepAP214.NCollection_Array1_StepAP214_ExternalIdentificationItem_swigregister
NCollection_Array1_StepAP214_ExternalIdentificationItem_swigregister(NCollection_Array1_StepAP214_ExternalIdentificationItem)


try:
	StepAP214_Array1OfExternalIdentificationItem = NCollection_Array1_StepAP214_ExternalIdentificationItem
except NameError:
	pass # does not exist, probably ignored

class Handle_StepAP214_AppliedPersonAndOrganizationAssignment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self, StepAP214_AppliedPersonAndOrganizationAssignment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self, Handle_StepAP214_AppliedPersonAndOrganizationAssignment theHandle) -> Handle_StepAP214_AppliedPersonAndOrganizationAssignment
        assign(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self, StepAP214_AppliedPersonAndOrganizationAssignment thePtr) -> Handle_StepAP214_AppliedPersonAndOrganizationAssignment
        assign(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self, Handle_StepAP214_AppliedPersonAndOrganizationAssignment theHandle) -> Handle_StepAP214_AppliedPersonAndOrganizationAssignment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self) -> StepAP214_AppliedPersonAndOrganizationAssignment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self) -> StepAP214_AppliedPersonAndOrganizationAssignment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self) -> StepAP214_AppliedPersonAndOrganizationAssignment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_AppliedPersonAndOrganizationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_AppliedPersonAndOrganizationAssignment

    def Init(self, *args):
        """
        Init(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self, Handle_StepBasic_PersonAndOrganization aAssignedPersonAndOrganization, Handle_StepBasic_PersonAndOrganizationRole aRole, Handle_StepAP214_HArray1OfPersonAndOrganizationItem aItems)

        :type aAssignedPersonAndOrganization: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganization
        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganizationRole
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem

        """
        return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self, Handle_StepAP214_HArray1OfPersonAndOrganizationItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem

        """
        return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self) -> Handle_StepAP214_HArray1OfPersonAndOrganizationItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem

        """
        return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self, Standard_Integer const num) -> StepAP214_PersonAndOrganizationItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_PersonAndOrganizationItem

        """
        return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_NbItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAssignedPersonAndOrganization(self, *args):
        """
        SetAssignedPersonAndOrganization(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self, Handle_StepBasic_PersonAndOrganization aAssignedPersonAndOrganization)

        :type aAssignedPersonAndOrganization: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganization

        """
        return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_SetAssignedPersonAndOrganization(self, *args)


    def AssignedPersonAndOrganization(self, *args):
        """
        AssignedPersonAndOrganization(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self) -> Handle_StepBasic_PersonAndOrganization

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganization

        """
        return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_AssignedPersonAndOrganization(self, *args)


    def SetRole(self, *args):
        """
        SetRole(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self, Handle_StepBasic_PersonAndOrganizationRole aRole)

        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganizationRole

        """
        return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_SetRole(self, *args)


    def Role(self, *args):
        """
        Role(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self) -> Handle_StepBasic_PersonAndOrganizationRole

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganizationRole

        """
        return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_Role(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_AppliedPersonAndOrganizationAssignment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_DecrementRefCounter(self, *args)

Handle_StepAP214_AppliedPersonAndOrganizationAssignment_swigregister = _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_swigregister
Handle_StepAP214_AppliedPersonAndOrganizationAssignment_swigregister(Handle_StepAP214_AppliedPersonAndOrganizationAssignment)

def Handle_StepAP214_AppliedPersonAndOrganizationAssignment_DownCast(thing):
    return _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_DownCast(thing)
Handle_StepAP214_AppliedPersonAndOrganizationAssignment_DownCast = _StepAP214.Handle_StepAP214_AppliedPersonAndOrganizationAssignment_DownCast

class StepAP214_AutoDesignDatedItem(StepData.StepData_SelectType):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP214_AutoDesignDatedItem self) -> StepAP214_AutoDesignDatedItem

        Returns a AutoDesignDatedItem SelectType


        """
        this = _StepAP214.new_StepAP214_AutoDesignDatedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP214_AutoDesignDatedItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a AutoDesignDatedItem Kind Entity that is :
        1 -> ApprovalPersonOrganization
        2 -> AutoDesignDateAndPersonAssignment
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AutoDesignDatedItem_CaseNum(self, *args)


    def ApprovalPersonOrganization(self, *args):
        """
        ApprovalPersonOrganization(StepAP214_AutoDesignDatedItem self) -> Handle_StepBasic_ApprovalPersonOrganization

        returns Value as a ApprovalPersonOrganization (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ApprovalPersonOrganization

        """
        return _StepAP214.StepAP214_AutoDesignDatedItem_ApprovalPersonOrganization(self, *args)


    def AutoDesignDateAndPersonAssignment(self, *args):
        """
        AutoDesignDateAndPersonAssignment(StepAP214_AutoDesignDatedItem self) -> Handle_StepAP214_AutoDesignDateAndPersonAssignment

        returns Value as a AutoDesignDateAndPersonAssignment (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment

        """
        return _StepAP214.StepAP214_AutoDesignDatedItem_AutoDesignDateAndPersonAssignment(self, *args)


    def ProductDefinitionEffectivity(self, *args):
        """
        ProductDefinitionEffectivity(StepAP214_AutoDesignDatedItem self) -> Handle_StepBasic_ProductDefinitionEffectivity

        returns Value as a ProductDefinitionEffectivity

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionEffectivity

        """
        return _StepAP214.StepAP214_AutoDesignDatedItem_ProductDefinitionEffectivity(self, *args)

    __swig_destroy__ = _StepAP214.delete_StepAP214_AutoDesignDatedItem
StepAP214_AutoDesignDatedItem_swigregister = _StepAP214.StepAP214_AutoDesignDatedItem_swigregister
StepAP214_AutoDesignDatedItem_swigregister(StepAP214_AutoDesignDatedItem)

class Handle_StepAP214_AutoDesignDateAndPersonAssignment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_AutoDesignDateAndPersonAssignment self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_AutoDesignDateAndPersonAssignment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_AutoDesignDateAndPersonAssignment self, StepAP214_AutoDesignDateAndPersonAssignment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_AutoDesignDateAndPersonAssignment self, Handle_StepAP214_AutoDesignDateAndPersonAssignment theHandle) -> Handle_StepAP214_AutoDesignDateAndPersonAssignment
        assign(Handle_StepAP214_AutoDesignDateAndPersonAssignment self, StepAP214_AutoDesignDateAndPersonAssignment thePtr) -> Handle_StepAP214_AutoDesignDateAndPersonAssignment
        assign(Handle_StepAP214_AutoDesignDateAndPersonAssignment self, Handle_StepAP214_AutoDesignDateAndPersonAssignment theHandle) -> Handle_StepAP214_AutoDesignDateAndPersonAssignment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_AutoDesignDateAndPersonAssignment self) -> StepAP214_AutoDesignDateAndPersonAssignment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_AutoDesignDateAndPersonAssignment self) -> StepAP214_AutoDesignDateAndPersonAssignment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_AutoDesignDateAndPersonAssignment self) -> StepAP214_AutoDesignDateAndPersonAssignment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_AutoDesignDateAndPersonAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_AutoDesignDateAndPersonAssignment

    def Init(self, *args):
        """
        Init(Handle_StepAP214_AutoDesignDateAndPersonAssignment self, Handle_StepBasic_PersonAndOrganization aAssignedPersonAndOrganization, Handle_StepBasic_PersonAndOrganizationRole aRole, Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem aItems)

        :type aAssignedPersonAndOrganization: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganization
        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganizationRole
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP214_AutoDesignDateAndPersonAssignment self, Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP214_AutoDesignDateAndPersonAssignment self) -> Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndPersonItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(Handle_StepAP214_AutoDesignDateAndPersonAssignment self, Standard_Integer const num) -> StepAP214_AutoDesignDateAndPersonItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_AutoDesignDateAndPersonItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(Handle_StepAP214_AutoDesignDateAndPersonAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_NbItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_AutoDesignDateAndPersonAssignment self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAssignedPersonAndOrganization(self, *args):
        """
        SetAssignedPersonAndOrganization(Handle_StepAP214_AutoDesignDateAndPersonAssignment self, Handle_StepBasic_PersonAndOrganization aAssignedPersonAndOrganization)

        :type aAssignedPersonAndOrganization: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganization

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_SetAssignedPersonAndOrganization(self, *args)


    def AssignedPersonAndOrganization(self, *args):
        """
        AssignedPersonAndOrganization(Handle_StepAP214_AutoDesignDateAndPersonAssignment self) -> Handle_StepBasic_PersonAndOrganization

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganization

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_AssignedPersonAndOrganization(self, *args)


    def SetRole(self, *args):
        """
        SetRole(Handle_StepAP214_AutoDesignDateAndPersonAssignment self, Handle_StepBasic_PersonAndOrganizationRole aRole)

        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganizationRole

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_SetRole(self, *args)


    def Role(self, *args):
        """
        Role(Handle_StepAP214_AutoDesignDateAndPersonAssignment self) -> Handle_StepBasic_PersonAndOrganizationRole

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganizationRole

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_Role(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_AutoDesignDateAndPersonAssignment self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_AutoDesignDateAndPersonAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_AutoDesignDateAndPersonAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_AutoDesignDateAndPersonAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_AutoDesignDateAndPersonAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_AutoDesignDateAndPersonAssignment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_AutoDesignDateAndPersonAssignment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_AutoDesignDateAndPersonAssignment self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_AutoDesignDateAndPersonAssignment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_DecrementRefCounter(self, *args)

Handle_StepAP214_AutoDesignDateAndPersonAssignment_swigregister = _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_swigregister
Handle_StepAP214_AutoDesignDateAndPersonAssignment_swigregister(Handle_StepAP214_AutoDesignDateAndPersonAssignment)

def Handle_StepAP214_AutoDesignDateAndPersonAssignment_DownCast(thing):
    return _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_DownCast(thing)
Handle_StepAP214_AutoDesignDateAndPersonAssignment_DownCast = _StepAP214.Handle_StepAP214_AutoDesignDateAndPersonAssignment_DownCast

class Handle_StepAP214_HArray1OfPersonAndOrganizationItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_HArray1OfPersonAndOrganizationItem self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_HArray1OfPersonAndOrganizationItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_HArray1OfPersonAndOrganizationItem self, StepAP214_HArray1OfPersonAndOrganizationItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_HArray1OfPersonAndOrganizationItem self, Handle_StepAP214_HArray1OfPersonAndOrganizationItem theHandle) -> Handle_StepAP214_HArray1OfPersonAndOrganizationItem
        assign(Handle_StepAP214_HArray1OfPersonAndOrganizationItem self, StepAP214_HArray1OfPersonAndOrganizationItem thePtr) -> Handle_StepAP214_HArray1OfPersonAndOrganizationItem
        assign(Handle_StepAP214_HArray1OfPersonAndOrganizationItem self, Handle_StepAP214_HArray1OfPersonAndOrganizationItem theHandle) -> Handle_StepAP214_HArray1OfPersonAndOrganizationItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_HArray1OfPersonAndOrganizationItem self) -> StepAP214_HArray1OfPersonAndOrganizationItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_HArray1OfPersonAndOrganizationItem self) -> StepAP214_HArray1OfPersonAndOrganizationItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_HArray1OfPersonAndOrganizationItem self) -> StepAP214_HArray1OfPersonAndOrganizationItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_HArray1OfPersonAndOrganizationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_HArray1OfPersonAndOrganizationItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfPersonAndOrganizationItem

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP214_HArray1OfPersonAndOrganizationItem self) -> NCollection_Array1_StepAP214_PersonAndOrganizationItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfPersonAndOrganizationItem

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_HArray1OfPersonAndOrganizationItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_HArray1OfPersonAndOrganizationItem self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_HArray1OfPersonAndOrganizationItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_HArray1OfPersonAndOrganizationItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_HArray1OfPersonAndOrganizationItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_HArray1OfPersonAndOrganizationItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_HArray1OfPersonAndOrganizationItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_HArray1OfPersonAndOrganizationItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_HArray1OfPersonAndOrganizationItem self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_HArray1OfPersonAndOrganizationItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem_DecrementRefCounter(self, *args)

Handle_StepAP214_HArray1OfPersonAndOrganizationItem_swigregister = _StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem_swigregister
Handle_StepAP214_HArray1OfPersonAndOrganizationItem_swigregister(Handle_StepAP214_HArray1OfPersonAndOrganizationItem)

def Handle_StepAP214_HArray1OfPersonAndOrganizationItem_DownCast(thing):
    return _StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem_DownCast(thing)
Handle_StepAP214_HArray1OfPersonAndOrganizationItem_DownCast = _StepAP214.Handle_StepAP214_HArray1OfPersonAndOrganizationItem_DownCast

class StepAP214_OrganizationItem(StepAP214_ApprovalItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP214_OrganizationItem self) -> StepAP214_OrganizationItem

        Returns a OrganizationItem SelectType


        """
        this = _StepAP214.new_StepAP214_OrganizationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP214_OrganizationItem self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a OrganizationItem Kind Entity that is :

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_OrganizationItem_CaseNum(self, *args)


    def AppliedOrganizationAssignment(self, *args):
        """
        AppliedOrganizationAssignment(StepAP214_OrganizationItem self) -> Handle_StepAP214_AppliedOrganizationAssignment

        returns Value as a AppliedOrganizationAssignment (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedOrganizationAssignment

        """
        return _StepAP214.StepAP214_OrganizationItem_AppliedOrganizationAssignment(self, *args)


    def Approval(self, *args):
        """
        Approval(StepAP214_OrganizationItem self) -> Handle_StepBasic_Approval

        returns Value as a Approval (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Approval

        """
        return _StepAP214.StepAP214_OrganizationItem_Approval(self, *args)


    def AppliedSecurityClassificationAssignment(self, *args):
        """
        AppliedSecurityClassificationAssignment(StepAP214_OrganizationItem self) -> Handle_StepAP214_AppliedSecurityClassificationAssignment

        returns Value as a AppliedSecurityClassificationAssignment (Null if another type)

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_AppliedSecurityClassificationAssignment

        """
        return _StepAP214.StepAP214_OrganizationItem_AppliedSecurityClassificationAssignment(self, *args)

    __swig_destroy__ = _StepAP214.delete_StepAP214_OrganizationItem
StepAP214_OrganizationItem_swigregister = _StepAP214.StepAP214_OrganizationItem_swigregister
StepAP214_OrganizationItem_swigregister(StepAP214_OrganizationItem)

class Handle_StepAP214_HArray1OfDateAndTimeItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_HArray1OfDateAndTimeItem self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_HArray1OfDateAndTimeItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_HArray1OfDateAndTimeItem self, StepAP214_HArray1OfDateAndTimeItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_HArray1OfDateAndTimeItem self, Handle_StepAP214_HArray1OfDateAndTimeItem theHandle) -> Handle_StepAP214_HArray1OfDateAndTimeItem
        assign(Handle_StepAP214_HArray1OfDateAndTimeItem self, StepAP214_HArray1OfDateAndTimeItem thePtr) -> Handle_StepAP214_HArray1OfDateAndTimeItem
        assign(Handle_StepAP214_HArray1OfDateAndTimeItem self, Handle_StepAP214_HArray1OfDateAndTimeItem theHandle) -> Handle_StepAP214_HArray1OfDateAndTimeItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_HArray1OfDateAndTimeItem self) -> StepAP214_HArray1OfDateAndTimeItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_HArray1OfDateAndTimeItem self) -> StepAP214_HArray1OfDateAndTimeItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_HArray1OfDateAndTimeItem self) -> StepAP214_HArray1OfDateAndTimeItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_HArray1OfDateAndTimeItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_HArray1OfDateAndTimeItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfDateAndTimeItem

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP214_HArray1OfDateAndTimeItem self) -> NCollection_Array1_StepAP214_DateAndTimeItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfDateAndTimeItem

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_HArray1OfDateAndTimeItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_HArray1OfDateAndTimeItem self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_HArray1OfDateAndTimeItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_HArray1OfDateAndTimeItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_HArray1OfDateAndTimeItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_HArray1OfDateAndTimeItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_HArray1OfDateAndTimeItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_HArray1OfDateAndTimeItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_HArray1OfDateAndTimeItem self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_HArray1OfDateAndTimeItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem_DecrementRefCounter(self, *args)

Handle_StepAP214_HArray1OfDateAndTimeItem_swigregister = _StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem_swigregister
Handle_StepAP214_HArray1OfDateAndTimeItem_swigregister(Handle_StepAP214_HArray1OfDateAndTimeItem)

def Handle_StepAP214_HArray1OfDateAndTimeItem_DownCast(thing):
    return _StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem_DownCast(thing)
Handle_StepAP214_HArray1OfDateAndTimeItem_DownCast = _StepAP214.Handle_StepAP214_HArray1OfDateAndTimeItem_DownCast

class StepAP214_PresentedItemSelect(StepData.StepData_SelectType):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(StepAP214_PresentedItemSelect self) -> StepAP214_PresentedItemSelect

        Returns a PresentedItemSelect SelectType


        """
        this = _StepAP214.new_StepAP214_PresentedItemSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP214_PresentedItemSelect self, Handle_Standard_Transient ent) -> Standard_Integer

        Recognizes a PresentedItemSelect Kind Entity that is :
        1 -> ProductDefinition,
        2 -> ProductDefinitionRelationship,
        0 else

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_PresentedItemSelect_CaseNum(self, *args)


    def ProductDefinitionRelationship(self, *args):
        """
        ProductDefinitionRelationship(StepAP214_PresentedItemSelect self) -> Handle_StepBasic_ProductDefinitionRelationship

        returns Value as a ProductDefinitionRelationship (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinitionRelationship

        """
        return _StepAP214.StepAP214_PresentedItemSelect_ProductDefinitionRelationship(self, *args)


    def ProductDefinition(self, *args):
        """
        ProductDefinition(StepAP214_PresentedItemSelect self) -> Handle_StepBasic_ProductDefinition

        returns Value as a ProductDefinition (Null if another type)

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ProductDefinition

        """
        return _StepAP214.StepAP214_PresentedItemSelect_ProductDefinition(self, *args)

    __swig_destroy__ = _StepAP214.delete_StepAP214_PresentedItemSelect
StepAP214_PresentedItemSelect_swigregister = _StepAP214.StepAP214_PresentedItemSelect_swigregister
StepAP214_PresentedItemSelect_swigregister(StepAP214_PresentedItemSelect)

class StepAP214_AutoDesignOrganizationItem(StepAP214_AutoDesignGeneralOrgItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """__init__(StepAP214_AutoDesignOrganizationItem self) -> StepAP214_AutoDesignOrganizationItem"""
        this = _StepAP214.new_StepAP214_AutoDesignOrganizationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CaseNum(self, *args):
        """
        CaseNum(StepAP214_AutoDesignOrganizationItem self, Handle_Standard_Transient ent) -> Standard_Integer

        :type ent: OCC.wrapper.Standard.Handle_Standard_Transient
        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.StepAP214_AutoDesignOrganizationItem_CaseNum(self, *args)


    def Document(self, *args):
        """
        Document(StepAP214_AutoDesignOrganizationItem self) -> Handle_StepBasic_Document

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Document

        """
        return _StepAP214.StepAP214_AutoDesignOrganizationItem_Document(self, *args)


    def PhysicallyModeledProductDefinition(self, *args):
        """
        PhysicallyModeledProductDefinition(StepAP214_AutoDesignOrganizationItem self) -> Handle_StepBasic_PhysicallyModeledProductDefinition

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_PhysicallyModeledProductDefinition

        """
        return _StepAP214.StepAP214_AutoDesignOrganizationItem_PhysicallyModeledProductDefinition(self, *args)

    __swig_destroy__ = _StepAP214.delete_StepAP214_AutoDesignOrganizationItem
StepAP214_AutoDesignOrganizationItem_swigregister = _StepAP214.StepAP214_AutoDesignOrganizationItem_swigregister
StepAP214_AutoDesignOrganizationItem_swigregister(StepAP214_AutoDesignOrganizationItem)

class Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self, StepAP214_AutoDesignNominalDateAndTimeAssignment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self, Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment theHandle) -> Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment
        assign(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self, StepAP214_AutoDesignNominalDateAndTimeAssignment thePtr) -> Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment
        assign(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self, Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment theHandle) -> Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self) -> StepAP214_AutoDesignNominalDateAndTimeAssignment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self) -> StepAP214_AutoDesignNominalDateAndTimeAssignment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self) -> StepAP214_AutoDesignNominalDateAndTimeAssignment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment

    def Init(self, *args):
        """
        Init(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self, Handle_StepBasic_DateAndTime aAssignedDateAndTime, Handle_StepBasic_DateTimeRole aRole, Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem aItems)

        :type aAssignedDateAndTime: OCC.wrapper.StepBasic.Handle_StepBasic_DateAndTime
        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_DateTimeRole
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self, Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self) -> Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDateAndTimeItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self, Standard_Integer const num) -> StepAP214_AutoDesignDateAndTimeItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_AutoDesignDateAndTimeItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_NbItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAssignedDateAndTime(self, *args):
        """
        SetAssignedDateAndTime(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self, Handle_StepBasic_DateAndTime aAssignedDateAndTime)

        :type aAssignedDateAndTime: OCC.wrapper.StepBasic.Handle_StepBasic_DateAndTime

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_SetAssignedDateAndTime(self, *args)


    def AssignedDateAndTime(self, *args):
        """
        AssignedDateAndTime(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self) -> Handle_StepBasic_DateAndTime

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_DateAndTime

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_AssignedDateAndTime(self, *args)


    def SetRole(self, *args):
        """
        SetRole(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self, Handle_StepBasic_DateTimeRole aRole)

        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_DateTimeRole

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_SetRole(self, *args)


    def Role(self, *args):
        """
        Role(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self) -> Handle_StepBasic_DateTimeRole

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_DateTimeRole

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_Role(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_DecrementRefCounter(self, *args)

Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_swigregister = _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_swigregister
Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_swigregister(Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment)

def Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_DownCast(thing):
    return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_DownCast(thing)
Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_DownCast = _StepAP214.Handle_StepAP214_AutoDesignNominalDateAndTimeAssignment_DownCast

class Handle_StepAP214_HArray1OfExternalIdentificationItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_HArray1OfExternalIdentificationItem self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_HArray1OfExternalIdentificationItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_HArray1OfExternalIdentificationItem self, StepAP214_HArray1OfExternalIdentificationItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_HArray1OfExternalIdentificationItem self, Handle_StepAP214_HArray1OfExternalIdentificationItem theHandle) -> Handle_StepAP214_HArray1OfExternalIdentificationItem
        assign(Handle_StepAP214_HArray1OfExternalIdentificationItem self, StepAP214_HArray1OfExternalIdentificationItem thePtr) -> Handle_StepAP214_HArray1OfExternalIdentificationItem
        assign(Handle_StepAP214_HArray1OfExternalIdentificationItem self, Handle_StepAP214_HArray1OfExternalIdentificationItem theHandle) -> Handle_StepAP214_HArray1OfExternalIdentificationItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_HArray1OfExternalIdentificationItem self) -> StepAP214_HArray1OfExternalIdentificationItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_HArray1OfExternalIdentificationItem self) -> StepAP214_HArray1OfExternalIdentificationItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_HArray1OfExternalIdentificationItem self) -> StepAP214_HArray1OfExternalIdentificationItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_HArray1OfExternalIdentificationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_HArray1OfExternalIdentificationItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfExternalIdentificationItem

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP214_HArray1OfExternalIdentificationItem self) -> NCollection_Array1_StepAP214_ExternalIdentificationItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfExternalIdentificationItem

        """
        return _StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_HArray1OfExternalIdentificationItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_HArray1OfExternalIdentificationItem self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_HArray1OfExternalIdentificationItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_HArray1OfExternalIdentificationItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_HArray1OfExternalIdentificationItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_HArray1OfExternalIdentificationItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_HArray1OfExternalIdentificationItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_HArray1OfExternalIdentificationItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_HArray1OfExternalIdentificationItem self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_HArray1OfExternalIdentificationItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem_DecrementRefCounter(self, *args)

Handle_StepAP214_HArray1OfExternalIdentificationItem_swigregister = _StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem_swigregister
Handle_StepAP214_HArray1OfExternalIdentificationItem_swigregister(Handle_StepAP214_HArray1OfExternalIdentificationItem)

def Handle_StepAP214_HArray1OfExternalIdentificationItem_DownCast(thing):
    return _StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem_DownCast(thing)
Handle_StepAP214_HArray1OfExternalIdentificationItem_DownCast = _StepAP214.Handle_StepAP214_HArray1OfExternalIdentificationItem_DownCast

class StepAP214_HArray1OfDocumentReferenceItem(NCollection_Array1_StepAP214_DocumentReferenceItem, Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_StepAP214_HArray1OfDocumentReferenceItem
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_StepAP214_HArray1OfDocumentReferenceItem(self) 
            return h


    def __init__(self, *args):
        """
        __init__(StepAP214_HArray1OfDocumentReferenceItem self, Standard_Integer const theLower, Standard_Integer const theUpper) -> StepAP214_HArray1OfDocumentReferenceItem
        __init__(StepAP214_HArray1OfDocumentReferenceItem self, Standard_Integer const theLower, Standard_Integer const theUpper, StepAP214_DocumentReferenceItem theValue) -> StepAP214_HArray1OfDocumentReferenceItem
        __init__(StepAP214_HArray1OfDocumentReferenceItem self, NCollection_Array1_StepAP214_DocumentReferenceItem theOther) -> StepAP214_HArray1OfDocumentReferenceItem

        :type theOther: OCC.wrapper.StepAP214.StepAP214_Array1OfDocumentReferenceItem

        """
        this = _StepAP214.new_StepAP214_HArray1OfDocumentReferenceItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfDocumentReferenceItem

        """
        res = _StepAP214.StepAP214_HArray1OfDocumentReferenceItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(StepAP214_HArray1OfDocumentReferenceItem self) -> NCollection_Array1_StepAP214_DocumentReferenceItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfDocumentReferenceItem

        """
        return _StepAP214.StepAP214_HArray1OfDocumentReferenceItem_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _StepAP214.StepAP214_HArray1OfDocumentReferenceItem_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _StepAP214.StepAP214_HArray1OfDocumentReferenceItem_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.StepAP214_HArray1OfDocumentReferenceItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _StepAP214.delete_StepAP214_HArray1OfDocumentReferenceItem
StepAP214_HArray1OfDocumentReferenceItem_swigregister = _StepAP214.StepAP214_HArray1OfDocumentReferenceItem_swigregister
StepAP214_HArray1OfDocumentReferenceItem_swigregister(StepAP214_HArray1OfDocumentReferenceItem)

def StepAP214_HArray1OfDocumentReferenceItem_get_type_name(*args):
    """
    StepAP214_HArray1OfDocumentReferenceItem_get_type_name() -> char const *

    :rtype: const char *

    """
    return _StepAP214.StepAP214_HArray1OfDocumentReferenceItem_get_type_name(*args)

def StepAP214_HArray1OfDocumentReferenceItem_get_type_descriptor(*args):
    """
    StepAP214_HArray1OfDocumentReferenceItem_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _StepAP214.StepAP214_HArray1OfDocumentReferenceItem_get_type_descriptor(*args)

class NCollection_Array1_StepAP214_DateAndTimeItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP214_DateAndTimeItem self) -> NCollection_Array1< StepAP214_DateAndTimeItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP214_DateAndTimeItem self) -> NCollection_Array1< StepAP214_DateAndTimeItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP214_DateAndTimeItem self) -> NCollection_Array1< StepAP214_DateAndTimeItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP214_DateAndTimeItem self) -> NCollection_Array1< StepAP214_DateAndTimeItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP214.new_NCollection_Array1_StepAP214_DateAndTimeItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP214_DateAndTimeItem self, StepAP214_DateAndTimeItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP214_DateAndTimeItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP214_DateAndTimeItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP214_DateAndTimeItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP214_DateAndTimeItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP214_DateAndTimeItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP214_DateAndTimeItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP214_DateAndTimeItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP214_DateAndTimeItem self, NCollection_Array1_StepAP214_DateAndTimeItem theOther) -> NCollection_Array1_StepAP214_DateAndTimeItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP214_DateAndTimeItem self, NCollection_Array1_StepAP214_DateAndTimeItem theOther) -> NCollection_Array1_StepAP214_DateAndTimeItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP214_DateAndTimeItem self, NCollection_Array1_StepAP214_DateAndTimeItem theOther) -> NCollection_Array1_StepAP214_DateAndTimeItem
        assign(NCollection_Array1_StepAP214_DateAndTimeItem self, NCollection_Array1_StepAP214_DateAndTimeItem theOther) -> NCollection_Array1_StepAP214_DateAndTimeItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP214_DateAndTimeItem self) -> StepAP214_DateAndTimeItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP214_DateAndTimeItem self) -> StepAP214_DateAndTimeItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP214_DateAndTimeItem self, Standard_Integer const theIndex) -> StepAP214_DateAndTimeItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP214_DateAndTimeItem self, Standard_Integer const theIndex, StepAP214_DateAndTimeItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP214_DateAndTimeItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem_Resize(self, *args)

    __swig_destroy__ = _StepAP214.delete_NCollection_Array1_StepAP214_DateAndTimeItem
NCollection_Array1_StepAP214_DateAndTimeItem_swigregister = _StepAP214.NCollection_Array1_StepAP214_DateAndTimeItem_swigregister
NCollection_Array1_StepAP214_DateAndTimeItem_swigregister(NCollection_Array1_StepAP214_DateAndTimeItem)


try:
	StepAP214_Array1OfDateAndTimeItem = NCollection_Array1_StepAP214_DateAndTimeItem
except NameError:
	pass # does not exist, probably ignored

class Handle_StepAP214_AutoDesignApprovalAssignment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_AutoDesignApprovalAssignment self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_AutoDesignApprovalAssignment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_AutoDesignApprovalAssignment self, StepAP214_AutoDesignApprovalAssignment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_AutoDesignApprovalAssignment self, Handle_StepAP214_AutoDesignApprovalAssignment theHandle) -> Handle_StepAP214_AutoDesignApprovalAssignment
        assign(Handle_StepAP214_AutoDesignApprovalAssignment self, StepAP214_AutoDesignApprovalAssignment thePtr) -> Handle_StepAP214_AutoDesignApprovalAssignment
        assign(Handle_StepAP214_AutoDesignApprovalAssignment self, Handle_StepAP214_AutoDesignApprovalAssignment theHandle) -> Handle_StepAP214_AutoDesignApprovalAssignment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_AutoDesignApprovalAssignment self) -> StepAP214_AutoDesignApprovalAssignment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_AutoDesignApprovalAssignment self) -> StepAP214_AutoDesignApprovalAssignment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_AutoDesignApprovalAssignment self) -> StepAP214_AutoDesignApprovalAssignment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_AutoDesignApprovalAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_AutoDesignApprovalAssignment

    def Init(self, *args):
        """
        Init(Handle_StepAP214_AutoDesignApprovalAssignment self, Handle_StepBasic_Approval aAssignedApproval, Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem aItems)

        :type aAssignedApproval: OCC.wrapper.StepBasic.Handle_StepBasic_Approval
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP214_AutoDesignApprovalAssignment self, Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP214_AutoDesignApprovalAssignment self) -> Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(Handle_StepAP214_AutoDesignApprovalAssignment self, Standard_Integer const num) -> StepAP214_AutoDesignGeneralOrgItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_AutoDesignGeneralOrgItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(Handle_StepAP214_AutoDesignApprovalAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_NbItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_AutoDesignApprovalAssignment self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAssignedApproval(self, *args):
        """
        SetAssignedApproval(Handle_StepAP214_AutoDesignApprovalAssignment self, Handle_StepBasic_Approval aAssignedApproval)

        :type aAssignedApproval: OCC.wrapper.StepBasic.Handle_StepBasic_Approval

        """
        return _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_SetAssignedApproval(self, *args)


    def AssignedApproval(self, *args):
        """
        AssignedApproval(Handle_StepAP214_AutoDesignApprovalAssignment self) -> Handle_StepBasic_Approval

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Approval

        """
        return _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_AssignedApproval(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_AutoDesignApprovalAssignment self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_AutoDesignApprovalAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_AutoDesignApprovalAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_AutoDesignApprovalAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_AutoDesignApprovalAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_AutoDesignApprovalAssignment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_AutoDesignApprovalAssignment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_AutoDesignApprovalAssignment self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_AutoDesignApprovalAssignment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_DecrementRefCounter(self, *args)

Handle_StepAP214_AutoDesignApprovalAssignment_swigregister = _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_swigregister
Handle_StepAP214_AutoDesignApprovalAssignment_swigregister(Handle_StepAP214_AutoDesignApprovalAssignment)

def Handle_StepAP214_AutoDesignApprovalAssignment_DownCast(thing):
    return _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_DownCast(thing)
Handle_StepAP214_AutoDesignApprovalAssignment_DownCast = _StepAP214.Handle_StepAP214_AutoDesignApprovalAssignment_DownCast

class NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect self) -> NCollection_Array1< StepAP214_AutoDesignPresentedItemSelect >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect self) -> NCollection_Array1< StepAP214_AutoDesignPresentedItemSelect >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect self) -> NCollection_Array1< StepAP214_AutoDesignPresentedItemSelect >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect self) -> NCollection_Array1< StepAP214_AutoDesignPresentedItemSelect >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP214.new_NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect self, StepAP214_AutoDesignPresentedItemSelect theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect self, NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect theOther) -> NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect self, NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect theOther) -> NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect self, NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect theOther) -> NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect
        assign(NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect self, NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect theOther) -> NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect self) -> StepAP214_AutoDesignPresentedItemSelect

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect self) -> StepAP214_AutoDesignPresentedItemSelect

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect self, Standard_Integer const theIndex) -> StepAP214_AutoDesignPresentedItemSelect

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect self, Standard_Integer const theIndex, StepAP214_AutoDesignPresentedItemSelect theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_Resize(self, *args)

    __swig_destroy__ = _StepAP214.delete_NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect
NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_swigregister = _StepAP214.NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_swigregister
NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect_swigregister(NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect)


try:
	StepAP214_Array1OfAutoDesignPresentedItemSelect = NCollection_Array1_StepAP214_AutoDesignPresentedItemSelect
except NameError:
	pass # does not exist, probably ignored

class Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self, StepAP214_AutoDesignPersonAndOrganizationAssignment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self, Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment theHandle) -> Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment
        assign(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self, StepAP214_AutoDesignPersonAndOrganizationAssignment thePtr) -> Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment
        assign(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self, Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment theHandle) -> Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self) -> StepAP214_AutoDesignPersonAndOrganizationAssignment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self) -> StepAP214_AutoDesignPersonAndOrganizationAssignment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self) -> StepAP214_AutoDesignPersonAndOrganizationAssignment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment

    def Init(self, *args):
        """
        Init(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self, Handle_StepBasic_PersonAndOrganization aAssignedPersonAndOrganization, Handle_StepBasic_PersonAndOrganizationRole aRole, Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem aItems)

        :type aAssignedPersonAndOrganization: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganization
        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganizationRole
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self, Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self) -> Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignGeneralOrgItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self, Standard_Integer const num) -> StepAP214_AutoDesignGeneralOrgItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_AutoDesignGeneralOrgItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_NbItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAssignedPersonAndOrganization(self, *args):
        """
        SetAssignedPersonAndOrganization(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self, Handle_StepBasic_PersonAndOrganization aAssignedPersonAndOrganization)

        :type aAssignedPersonAndOrganization: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganization

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_SetAssignedPersonAndOrganization(self, *args)


    def AssignedPersonAndOrganization(self, *args):
        """
        AssignedPersonAndOrganization(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self) -> Handle_StepBasic_PersonAndOrganization

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganization

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_AssignedPersonAndOrganization(self, *args)


    def SetRole(self, *args):
        """
        SetRole(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self, Handle_StepBasic_PersonAndOrganizationRole aRole)

        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganizationRole

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_SetRole(self, *args)


    def Role(self, *args):
        """
        Role(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self) -> Handle_StepBasic_PersonAndOrganizationRole

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_PersonAndOrganizationRole

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_Role(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_DecrementRefCounter(self, *args)

Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_swigregister = _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_swigregister
Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_swigregister(Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment)

def Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_DownCast(thing):
    return _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_DownCast(thing)
Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_DownCast = _StepAP214.Handle_StepAP214_AutoDesignPersonAndOrganizationAssignment_DownCast

class Handle_StepAP214_ExternallyDefinedClass(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_ExternallyDefinedClass self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedClass_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_ExternallyDefinedClass self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedClass_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_ExternallyDefinedClass self, StepAP214_ExternallyDefinedClass thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedClass_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_ExternallyDefinedClass self, Handle_StepAP214_ExternallyDefinedClass theHandle) -> Handle_StepAP214_ExternallyDefinedClass
        assign(Handle_StepAP214_ExternallyDefinedClass self, StepAP214_ExternallyDefinedClass thePtr) -> Handle_StepAP214_ExternallyDefinedClass
        assign(Handle_StepAP214_ExternallyDefinedClass self, Handle_StepAP214_ExternallyDefinedClass theHandle) -> Handle_StepAP214_ExternallyDefinedClass

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedClass_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_ExternallyDefinedClass self) -> StepAP214_ExternallyDefinedClass

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedClass_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_ExternallyDefinedClass self) -> StepAP214_ExternallyDefinedClass

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedClass___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_ExternallyDefinedClass self) -> StepAP214_ExternallyDefinedClass

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedClass___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_ExternallyDefinedClass___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_ExternallyDefinedClass___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_ExternallyDefinedClass(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_ExternallyDefinedClass_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_ExternallyDefinedClass

    def Init(self, *args):
        """
        Init(Handle_StepAP214_ExternallyDefinedClass self, Handle_TCollection_HAsciiString aGroup_Name, Standard_Boolean const hasGroup_Description, Handle_TCollection_HAsciiString aGroup_Description, StepBasic_SourceItem aExternallyDefinedItem_ItemId, Handle_StepBasic_ExternalSource aExternallyDefinedItem_Source)

        Initialize all fields (own and inherited)

        :type aGroup_Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type hasGroup_Description: bool
        :type aGroup_Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aExternallyDefinedItem_ItemId: OCC.wrapper.StepBasic.StepBasic_SourceItem
        :type aExternallyDefinedItem_Source: OCC.wrapper.StepBasic.Handle_StepBasic_ExternalSource

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedClass_Init(self, *args)


    def ExternallyDefinedItem(self, *args):
        """
        ExternallyDefinedItem(Handle_StepAP214_ExternallyDefinedClass self) -> Handle_StepBasic_ExternallyDefinedItem

        Returns data for supertype ExternallyDefinedItem

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_ExternallyDefinedItem

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedClass_ExternallyDefinedItem(self, *args)


    def SetExternallyDefinedItem(self, *args):
        """
        SetExternallyDefinedItem(Handle_StepAP214_ExternallyDefinedClass self, Handle_StepBasic_ExternallyDefinedItem ExternallyDefinedItem)

        Set data for supertype ExternallyDefinedItem

        :type ExternallyDefinedItem: OCC.wrapper.StepBasic.Handle_StepBasic_ExternallyDefinedItem

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedClass_SetExternallyDefinedItem(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_ExternallyDefinedClass self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedClass_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_ExternallyDefinedClass_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_ExternallyDefinedClass_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Name(self, *args):
        """
        Name(Handle_StepAP214_ExternallyDefinedClass self) -> Handle_TCollection_HAsciiString

        Returns field Name

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedClass_Name(self, *args)


    def SetName(self, *args):
        """
        SetName(Handle_StepAP214_ExternallyDefinedClass self, Handle_TCollection_HAsciiString Name)

        Set field Name

        :type Name: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedClass_SetName(self, *args)


    def Description(self, *args):
        """
        Description(Handle_StepAP214_ExternallyDefinedClass self) -> Handle_TCollection_HAsciiString

        Returns field Description

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedClass_Description(self, *args)


    def SetDescription(self, *args):
        """
        SetDescription(Handle_StepAP214_ExternallyDefinedClass self, Handle_TCollection_HAsciiString Description)

        Set field Description

        :type Description: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedClass_SetDescription(self, *args)


    def HasDescription(self, *args):
        """
        HasDescription(Handle_StepAP214_ExternallyDefinedClass self) -> Standard_Boolean

        Returns True if optional field Description is defined

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedClass_HasDescription(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_ExternallyDefinedClass self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedClass_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_ExternallyDefinedClass self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_ExternallyDefinedClass self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedClass_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_ExternallyDefinedClass self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_ExternallyDefinedClass self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedClass_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_ExternallyDefinedClass self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedClass_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_ExternallyDefinedClass self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedClass_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_ExternallyDefinedClass self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedClass_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_ExternallyDefinedClass self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_ExternallyDefinedClass_DecrementRefCounter(self, *args)

Handle_StepAP214_ExternallyDefinedClass_swigregister = _StepAP214.Handle_StepAP214_ExternallyDefinedClass_swigregister
Handle_StepAP214_ExternallyDefinedClass_swigregister(Handle_StepAP214_ExternallyDefinedClass)

def Handle_StepAP214_ExternallyDefinedClass_DownCast(thing):
    return _StepAP214.Handle_StepAP214_ExternallyDefinedClass_DownCast(thing)
Handle_StepAP214_ExternallyDefinedClass_DownCast = _StepAP214.Handle_StepAP214_ExternallyDefinedClass_DownCast

class NCollection_Array1_StepAP214_PresentedItemSelect(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP214_PresentedItemSelect self) -> NCollection_Array1< StepAP214_PresentedItemSelect >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP214_PresentedItemSelect self) -> NCollection_Array1< StepAP214_PresentedItemSelect >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP214_PresentedItemSelect self) -> NCollection_Array1< StepAP214_PresentedItemSelect >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP214_PresentedItemSelect self) -> NCollection_Array1< StepAP214_PresentedItemSelect >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP214.new_NCollection_Array1_StepAP214_PresentedItemSelect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP214_PresentedItemSelect self, StepAP214_PresentedItemSelect theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP214_PresentedItemSelect self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP214_PresentedItemSelect self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP214_PresentedItemSelect self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP214_PresentedItemSelect self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP214_PresentedItemSelect self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP214_PresentedItemSelect self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP214_PresentedItemSelect self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP214_PresentedItemSelect self, NCollection_Array1_StepAP214_PresentedItemSelect theOther) -> NCollection_Array1_StepAP214_PresentedItemSelect

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP214_PresentedItemSelect self, NCollection_Array1_StepAP214_PresentedItemSelect theOther) -> NCollection_Array1_StepAP214_PresentedItemSelect

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP214_PresentedItemSelect self, NCollection_Array1_StepAP214_PresentedItemSelect theOther) -> NCollection_Array1_StepAP214_PresentedItemSelect
        assign(NCollection_Array1_StepAP214_PresentedItemSelect self, NCollection_Array1_StepAP214_PresentedItemSelect theOther) -> NCollection_Array1_StepAP214_PresentedItemSelect

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP214_PresentedItemSelect self) -> StepAP214_PresentedItemSelect

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP214_PresentedItemSelect self) -> StepAP214_PresentedItemSelect

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP214_PresentedItemSelect self, Standard_Integer const theIndex) -> StepAP214_PresentedItemSelect

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP214_PresentedItemSelect self, Standard_Integer const theIndex, StepAP214_PresentedItemSelect theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP214_PresentedItemSelect self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect_Resize(self, *args)

    __swig_destroy__ = _StepAP214.delete_NCollection_Array1_StepAP214_PresentedItemSelect
NCollection_Array1_StepAP214_PresentedItemSelect_swigregister = _StepAP214.NCollection_Array1_StepAP214_PresentedItemSelect_swigregister
NCollection_Array1_StepAP214_PresentedItemSelect_swigregister(NCollection_Array1_StepAP214_PresentedItemSelect)


try:
	StepAP214_Array1OfPresentedItemSelect = NCollection_Array1_StepAP214_PresentedItemSelect
except NameError:
	pass # does not exist, probably ignored

class NCollection_Array1_StepAP214_ApprovalItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP214_ApprovalItem self) -> NCollection_Array1< StepAP214_ApprovalItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_ApprovalItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP214_ApprovalItem self) -> NCollection_Array1< StepAP214_ApprovalItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_ApprovalItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP214_ApprovalItem self) -> NCollection_Array1< StepAP214_ApprovalItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_ApprovalItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP214_ApprovalItem self) -> NCollection_Array1< StepAP214_ApprovalItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_ApprovalItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP214.new_NCollection_Array1_StepAP214_ApprovalItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP214_ApprovalItem self, StepAP214_ApprovalItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_ApprovalItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP214_ApprovalItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_ApprovalItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP214_ApprovalItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_ApprovalItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP214_ApprovalItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_ApprovalItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP214_ApprovalItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_ApprovalItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP214_ApprovalItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_ApprovalItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP214_ApprovalItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_ApprovalItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP214_ApprovalItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_ApprovalItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP214_ApprovalItem self, NCollection_Array1_StepAP214_ApprovalItem theOther) -> NCollection_Array1_StepAP214_ApprovalItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_ApprovalItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP214_ApprovalItem self, NCollection_Array1_StepAP214_ApprovalItem theOther) -> NCollection_Array1_StepAP214_ApprovalItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_ApprovalItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP214_ApprovalItem self, NCollection_Array1_StepAP214_ApprovalItem theOther) -> NCollection_Array1_StepAP214_ApprovalItem
        assign(NCollection_Array1_StepAP214_ApprovalItem self, NCollection_Array1_StepAP214_ApprovalItem theOther) -> NCollection_Array1_StepAP214_ApprovalItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_ApprovalItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_ApprovalItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP214_ApprovalItem self) -> StepAP214_ApprovalItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_ApprovalItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_ApprovalItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP214_ApprovalItem self) -> StepAP214_ApprovalItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_ApprovalItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_ApprovalItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP214_ApprovalItem self, Standard_Integer const theIndex) -> StepAP214_ApprovalItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_ApprovalItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_ApprovalItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_ApprovalItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP214_ApprovalItem self, Standard_Integer const theIndex, StepAP214_ApprovalItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_ApprovalItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP214_ApprovalItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP214.NCollection_Array1_StepAP214_ApprovalItem_Resize(self, *args)

    __swig_destroy__ = _StepAP214.delete_NCollection_Array1_StepAP214_ApprovalItem
NCollection_Array1_StepAP214_ApprovalItem_swigregister = _StepAP214.NCollection_Array1_StepAP214_ApprovalItem_swigregister
NCollection_Array1_StepAP214_ApprovalItem_swigregister(NCollection_Array1_StepAP214_ApprovalItem)


try:
	StepAP214_Array1OfApprovalItem = NCollection_Array1_StepAP214_ApprovalItem
except NameError:
	pass # does not exist, probably ignored

class NCollection_Array1_StepAP214_SecurityClassificationItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP214_SecurityClassificationItem self) -> NCollection_Array1< StepAP214_SecurityClassificationItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP214_SecurityClassificationItem self) -> NCollection_Array1< StepAP214_SecurityClassificationItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP214_SecurityClassificationItem self) -> NCollection_Array1< StepAP214_SecurityClassificationItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP214_SecurityClassificationItem self) -> NCollection_Array1< StepAP214_SecurityClassificationItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP214.new_NCollection_Array1_StepAP214_SecurityClassificationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP214_SecurityClassificationItem self, StepAP214_SecurityClassificationItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP214_SecurityClassificationItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP214_SecurityClassificationItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP214_SecurityClassificationItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP214_SecurityClassificationItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP214_SecurityClassificationItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP214_SecurityClassificationItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP214_SecurityClassificationItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP214_SecurityClassificationItem self, NCollection_Array1_StepAP214_SecurityClassificationItem theOther) -> NCollection_Array1_StepAP214_SecurityClassificationItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP214_SecurityClassificationItem self, NCollection_Array1_StepAP214_SecurityClassificationItem theOther) -> NCollection_Array1_StepAP214_SecurityClassificationItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP214_SecurityClassificationItem self, NCollection_Array1_StepAP214_SecurityClassificationItem theOther) -> NCollection_Array1_StepAP214_SecurityClassificationItem
        assign(NCollection_Array1_StepAP214_SecurityClassificationItem self, NCollection_Array1_StepAP214_SecurityClassificationItem theOther) -> NCollection_Array1_StepAP214_SecurityClassificationItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP214_SecurityClassificationItem self) -> StepAP214_SecurityClassificationItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP214_SecurityClassificationItem self) -> StepAP214_SecurityClassificationItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP214_SecurityClassificationItem self, Standard_Integer const theIndex) -> StepAP214_SecurityClassificationItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP214_SecurityClassificationItem self, Standard_Integer const theIndex, StepAP214_SecurityClassificationItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP214_SecurityClassificationItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem_Resize(self, *args)

    __swig_destroy__ = _StepAP214.delete_NCollection_Array1_StepAP214_SecurityClassificationItem
NCollection_Array1_StepAP214_SecurityClassificationItem_swigregister = _StepAP214.NCollection_Array1_StepAP214_SecurityClassificationItem_swigregister
NCollection_Array1_StepAP214_SecurityClassificationItem_swigregister(NCollection_Array1_StepAP214_SecurityClassificationItem)


try:
	StepAP214_Array1OfSecurityClassificationItem = NCollection_Array1_StepAP214_SecurityClassificationItem
except NameError:
	pass # does not exist, probably ignored

class Handle_StepAP214_AutoDesignSecurityClassificationAssignment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self, StepAP214_AutoDesignSecurityClassificationAssignment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self, Handle_StepAP214_AutoDesignSecurityClassificationAssignment theHandle) -> Handle_StepAP214_AutoDesignSecurityClassificationAssignment
        assign(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self, StepAP214_AutoDesignSecurityClassificationAssignment thePtr) -> Handle_StepAP214_AutoDesignSecurityClassificationAssignment
        assign(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self, Handle_StepAP214_AutoDesignSecurityClassificationAssignment theHandle) -> Handle_StepAP214_AutoDesignSecurityClassificationAssignment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self) -> StepAP214_AutoDesignSecurityClassificationAssignment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self) -> StepAP214_AutoDesignSecurityClassificationAssignment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self) -> StepAP214_AutoDesignSecurityClassificationAssignment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_AutoDesignSecurityClassificationAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_AutoDesignSecurityClassificationAssignment

    def Init(self, *args):
        """
        Init(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self, Handle_StepBasic_SecurityClassification aAssignedSecurityClassification, Handle_StepBasic_HArray1OfApproval aItems)

        :type aAssignedSecurityClassification: OCC.wrapper.StepBasic.Handle_StepBasic_SecurityClassification
        :type aItems: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfApproval

        """
        return _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self, Handle_StepBasic_HArray1OfApproval aItems)

        :type aItems: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfApproval

        """
        return _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self) -> Handle_StepBasic_HArray1OfApproval

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_HArray1OfApproval

        """
        return _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self, Standard_Integer const num) -> Handle_StepBasic_Approval

        :type num: int
        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Approval

        """
        return _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_NbItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAssignedSecurityClassification(self, *args):
        """
        SetAssignedSecurityClassification(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self, Handle_StepBasic_SecurityClassification aAssignedSecurityClassification)

        :type aAssignedSecurityClassification: OCC.wrapper.StepBasic.Handle_StepBasic_SecurityClassification

        """
        return _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_SetAssignedSecurityClassification(self, *args)


    def AssignedSecurityClassification(self, *args):
        """
        AssignedSecurityClassification(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self) -> Handle_StepBasic_SecurityClassification

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_SecurityClassification

        """
        return _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_AssignedSecurityClassification(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_AutoDesignSecurityClassificationAssignment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_DecrementRefCounter(self, *args)

Handle_StepAP214_AutoDesignSecurityClassificationAssignment_swigregister = _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_swigregister
Handle_StepAP214_AutoDesignSecurityClassificationAssignment_swigregister(Handle_StepAP214_AutoDesignSecurityClassificationAssignment)

def Handle_StepAP214_AutoDesignSecurityClassificationAssignment_DownCast(thing):
    return _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_DownCast(thing)
Handle_StepAP214_AutoDesignSecurityClassificationAssignment_DownCast = _StepAP214.Handle_StepAP214_AutoDesignSecurityClassificationAssignment_DownCast

class Handle_StepAP214_AutoDesignNominalDateAssignment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_AutoDesignNominalDateAssignment self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_AutoDesignNominalDateAssignment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_AutoDesignNominalDateAssignment self, StepAP214_AutoDesignNominalDateAssignment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_AutoDesignNominalDateAssignment self, Handle_StepAP214_AutoDesignNominalDateAssignment theHandle) -> Handle_StepAP214_AutoDesignNominalDateAssignment
        assign(Handle_StepAP214_AutoDesignNominalDateAssignment self, StepAP214_AutoDesignNominalDateAssignment thePtr) -> Handle_StepAP214_AutoDesignNominalDateAssignment
        assign(Handle_StepAP214_AutoDesignNominalDateAssignment self, Handle_StepAP214_AutoDesignNominalDateAssignment theHandle) -> Handle_StepAP214_AutoDesignNominalDateAssignment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_AutoDesignNominalDateAssignment self) -> StepAP214_AutoDesignNominalDateAssignment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_AutoDesignNominalDateAssignment self) -> StepAP214_AutoDesignNominalDateAssignment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_AutoDesignNominalDateAssignment self) -> StepAP214_AutoDesignNominalDateAssignment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_AutoDesignNominalDateAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_AutoDesignNominalDateAssignment

    def Init(self, *args):
        """
        Init(Handle_StepAP214_AutoDesignNominalDateAssignment self, Handle_StepBasic_Date aAssignedDate, Handle_StepBasic_DateRole aRole, Handle_StepAP214_HArray1OfAutoDesignDatedItem aItems)

        :type aAssignedDate: OCC.wrapper.StepBasic.Handle_StepBasic_Date
        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_DateRole
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP214_AutoDesignNominalDateAssignment self, Handle_StepAP214_HArray1OfAutoDesignDatedItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP214_AutoDesignNominalDateAssignment self) -> Handle_StepAP214_HArray1OfAutoDesignDatedItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignDatedItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(Handle_StepAP214_AutoDesignNominalDateAssignment self, Standard_Integer const num) -> StepAP214_AutoDesignDatedItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_AutoDesignDatedItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(Handle_StepAP214_AutoDesignNominalDateAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_NbItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_AutoDesignNominalDateAssignment self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetAssignedDate(self, *args):
        """
        SetAssignedDate(Handle_StepAP214_AutoDesignNominalDateAssignment self, Handle_StepBasic_Date aAssignedDate)

        :type aAssignedDate: OCC.wrapper.StepBasic.Handle_StepBasic_Date

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_SetAssignedDate(self, *args)


    def AssignedDate(self, *args):
        """
        AssignedDate(Handle_StepAP214_AutoDesignNominalDateAssignment self) -> Handle_StepBasic_Date

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Date

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_AssignedDate(self, *args)


    def SetRole(self, *args):
        """
        SetRole(Handle_StepAP214_AutoDesignNominalDateAssignment self, Handle_StepBasic_DateRole aRole)

        :type aRole: OCC.wrapper.StepBasic.Handle_StepBasic_DateRole

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_SetRole(self, *args)


    def Role(self, *args):
        """
        Role(Handle_StepAP214_AutoDesignNominalDateAssignment self) -> Handle_StepBasic_DateRole

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_DateRole

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_Role(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_AutoDesignNominalDateAssignment self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_AutoDesignNominalDateAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_AutoDesignNominalDateAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_AutoDesignNominalDateAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_AutoDesignNominalDateAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_AutoDesignNominalDateAssignment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_AutoDesignNominalDateAssignment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_AutoDesignNominalDateAssignment self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_AutoDesignNominalDateAssignment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_DecrementRefCounter(self, *args)

Handle_StepAP214_AutoDesignNominalDateAssignment_swigregister = _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_swigregister
Handle_StepAP214_AutoDesignNominalDateAssignment_swigregister(Handle_StepAP214_AutoDesignNominalDateAssignment)

def Handle_StepAP214_AutoDesignNominalDateAssignment_DownCast(thing):
    return _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_DownCast(thing)
Handle_StepAP214_AutoDesignNominalDateAssignment_DownCast = _StepAP214.Handle_StepAP214_AutoDesignNominalDateAssignment_DownCast

class Handle_StepAP214_AutoDesignGroupAssignment(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_AutoDesignGroupAssignment self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_AutoDesignGroupAssignment self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_AutoDesignGroupAssignment self, StepAP214_AutoDesignGroupAssignment thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_AutoDesignGroupAssignment self, Handle_StepAP214_AutoDesignGroupAssignment theHandle) -> Handle_StepAP214_AutoDesignGroupAssignment
        assign(Handle_StepAP214_AutoDesignGroupAssignment self, StepAP214_AutoDesignGroupAssignment thePtr) -> Handle_StepAP214_AutoDesignGroupAssignment
        assign(Handle_StepAP214_AutoDesignGroupAssignment self, Handle_StepAP214_AutoDesignGroupAssignment theHandle) -> Handle_StepAP214_AutoDesignGroupAssignment

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_AutoDesignGroupAssignment self) -> StepAP214_AutoDesignGroupAssignment

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_AutoDesignGroupAssignment self) -> StepAP214_AutoDesignGroupAssignment

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_AutoDesignGroupAssignment self) -> StepAP214_AutoDesignGroupAssignment

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_AutoDesignGroupAssignment(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_AutoDesignGroupAssignment

    def Init(self, *args):
        """
        Init(Handle_StepAP214_AutoDesignGroupAssignment self, Handle_StepBasic_Group aAssignedGroup, Handle_StepAP214_HArray1OfAutoDesignGroupedItem aItems)

        :type aAssignedGroup: OCC.wrapper.StepBasic.Handle_StepBasic_Group
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_Init(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP214_AutoDesignGroupAssignment self, Handle_StepAP214_HArray1OfAutoDesignGroupedItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_SetItems(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP214_AutoDesignGroupAssignment self) -> Handle_StepAP214_HArray1OfAutoDesignGroupedItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignGroupedItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_Items(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(Handle_StepAP214_AutoDesignGroupAssignment self, Standard_Integer const num) -> StepAP214_AutoDesignGroupedItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_AutoDesignGroupedItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(Handle_StepAP214_AutoDesignGroupAssignment self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_NbItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_AutoDesignGroupAssignment self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def AssignedGroup(self, *args):
        """
        AssignedGroup(Handle_StepAP214_AutoDesignGroupAssignment self) -> Handle_StepBasic_Group

        Returns field AssignedGroup

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Group

        """
        return _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_AssignedGroup(self, *args)


    def SetAssignedGroup(self, *args):
        """
        SetAssignedGroup(Handle_StepAP214_AutoDesignGroupAssignment self, Handle_StepBasic_Group AssignedGroup)

        Set field AssignedGroup

        :type AssignedGroup: OCC.wrapper.StepBasic.Handle_StepBasic_Group

        """
        return _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_SetAssignedGroup(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_AutoDesignGroupAssignment self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_AutoDesignGroupAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_AutoDesignGroupAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_AutoDesignGroupAssignment self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_AutoDesignGroupAssignment self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_AutoDesignGroupAssignment self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_AutoDesignGroupAssignment self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_AutoDesignGroupAssignment self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_AutoDesignGroupAssignment self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_DecrementRefCounter(self, *args)

Handle_StepAP214_AutoDesignGroupAssignment_swigregister = _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_swigregister
Handle_StepAP214_AutoDesignGroupAssignment_swigregister(Handle_StepAP214_AutoDesignGroupAssignment)

def Handle_StepAP214_AutoDesignGroupAssignment_DownCast(thing):
    return _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_DownCast(thing)
Handle_StepAP214_AutoDesignGroupAssignment_DownCast = _StepAP214.Handle_StepAP214_AutoDesignGroupAssignment_DownCast

class Handle_StepAP214_HArray1OfSecurityClassificationItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_HArray1OfSecurityClassificationItem self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_HArray1OfSecurityClassificationItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_HArray1OfSecurityClassificationItem self, StepAP214_HArray1OfSecurityClassificationItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_HArray1OfSecurityClassificationItem self, Handle_StepAP214_HArray1OfSecurityClassificationItem theHandle) -> Handle_StepAP214_HArray1OfSecurityClassificationItem
        assign(Handle_StepAP214_HArray1OfSecurityClassificationItem self, StepAP214_HArray1OfSecurityClassificationItem thePtr) -> Handle_StepAP214_HArray1OfSecurityClassificationItem
        assign(Handle_StepAP214_HArray1OfSecurityClassificationItem self, Handle_StepAP214_HArray1OfSecurityClassificationItem theHandle) -> Handle_StepAP214_HArray1OfSecurityClassificationItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_HArray1OfSecurityClassificationItem self) -> StepAP214_HArray1OfSecurityClassificationItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_HArray1OfSecurityClassificationItem self) -> StepAP214_HArray1OfSecurityClassificationItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_HArray1OfSecurityClassificationItem self) -> StepAP214_HArray1OfSecurityClassificationItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_HArray1OfSecurityClassificationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_HArray1OfSecurityClassificationItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfSecurityClassificationItem

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP214_HArray1OfSecurityClassificationItem self) -> NCollection_Array1_StepAP214_SecurityClassificationItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfSecurityClassificationItem

        """
        return _StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_HArray1OfSecurityClassificationItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_HArray1OfSecurityClassificationItem self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_HArray1OfSecurityClassificationItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_HArray1OfSecurityClassificationItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_HArray1OfSecurityClassificationItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_HArray1OfSecurityClassificationItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_HArray1OfSecurityClassificationItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_HArray1OfSecurityClassificationItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_HArray1OfSecurityClassificationItem self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_HArray1OfSecurityClassificationItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem_DecrementRefCounter(self, *args)

Handle_StepAP214_HArray1OfSecurityClassificationItem_swigregister = _StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem_swigregister
Handle_StepAP214_HArray1OfSecurityClassificationItem_swigregister(Handle_StepAP214_HArray1OfSecurityClassificationItem)

def Handle_StepAP214_HArray1OfSecurityClassificationItem_DownCast(thing):
    return _StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem_DownCast(thing)
Handle_StepAP214_HArray1OfSecurityClassificationItem_DownCast = _StepAP214.Handle_StepAP214_HArray1OfSecurityClassificationItem_DownCast

class NCollection_Array1_StepAP214_OrganizationItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP214_OrganizationItem self) -> NCollection_Array1< StepAP214_OrganizationItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_OrganizationItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP214_OrganizationItem self) -> NCollection_Array1< StepAP214_OrganizationItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_OrganizationItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP214_OrganizationItem self) -> NCollection_Array1< StepAP214_OrganizationItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_OrganizationItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP214_OrganizationItem self) -> NCollection_Array1< StepAP214_OrganizationItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_OrganizationItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP214.new_NCollection_Array1_StepAP214_OrganizationItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP214_OrganizationItem self, StepAP214_OrganizationItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_OrganizationItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP214_OrganizationItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_OrganizationItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP214_OrganizationItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_OrganizationItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP214_OrganizationItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_OrganizationItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP214_OrganizationItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_OrganizationItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP214_OrganizationItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_OrganizationItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP214_OrganizationItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_OrganizationItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP214_OrganizationItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_OrganizationItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP214_OrganizationItem self, NCollection_Array1_StepAP214_OrganizationItem theOther) -> NCollection_Array1_StepAP214_OrganizationItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_OrganizationItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP214_OrganizationItem self, NCollection_Array1_StepAP214_OrganizationItem theOther) -> NCollection_Array1_StepAP214_OrganizationItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_OrganizationItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP214_OrganizationItem self, NCollection_Array1_StepAP214_OrganizationItem theOther) -> NCollection_Array1_StepAP214_OrganizationItem
        assign(NCollection_Array1_StepAP214_OrganizationItem self, NCollection_Array1_StepAP214_OrganizationItem theOther) -> NCollection_Array1_StepAP214_OrganizationItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_OrganizationItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_OrganizationItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP214_OrganizationItem self) -> StepAP214_OrganizationItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_OrganizationItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_OrganizationItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP214_OrganizationItem self) -> StepAP214_OrganizationItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_OrganizationItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_OrganizationItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP214_OrganizationItem self, Standard_Integer const theIndex) -> StepAP214_OrganizationItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_OrganizationItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_OrganizationItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_OrganizationItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP214_OrganizationItem self, Standard_Integer const theIndex, StepAP214_OrganizationItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_OrganizationItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP214_OrganizationItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP214.NCollection_Array1_StepAP214_OrganizationItem_Resize(self, *args)

    __swig_destroy__ = _StepAP214.delete_NCollection_Array1_StepAP214_OrganizationItem
NCollection_Array1_StepAP214_OrganizationItem_swigregister = _StepAP214.NCollection_Array1_StepAP214_OrganizationItem_swigregister
NCollection_Array1_StepAP214_OrganizationItem_swigregister(NCollection_Array1_StepAP214_OrganizationItem)


try:
	StepAP214_Array1OfOrganizationItem = NCollection_Array1_StepAP214_OrganizationItem
except NameError:
	pass # does not exist, probably ignored

class NCollection_Array1_StepAP214_AutoDesignDatedItem(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_StepAP214_AutoDesignDatedItem self) -> NCollection_Array1< StepAP214_AutoDesignDatedItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_StepAP214_AutoDesignDatedItem self) -> NCollection_Array1< StepAP214_AutoDesignDatedItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_StepAP214_AutoDesignDatedItem self) -> NCollection_Array1< StepAP214_AutoDesignDatedItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_StepAP214_AutoDesignDatedItem self) -> NCollection_Array1< StepAP214_AutoDesignDatedItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _StepAP214.new_NCollection_Array1_StepAP214_AutoDesignDatedItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_StepAP214_AutoDesignDatedItem self, StepAP214_AutoDesignDatedItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_StepAP214_AutoDesignDatedItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_StepAP214_AutoDesignDatedItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_StepAP214_AutoDesignDatedItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_StepAP214_AutoDesignDatedItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_StepAP214_AutoDesignDatedItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_StepAP214_AutoDesignDatedItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_StepAP214_AutoDesignDatedItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_StepAP214_AutoDesignDatedItem self, NCollection_Array1_StepAP214_AutoDesignDatedItem theOther) -> NCollection_Array1_StepAP214_AutoDesignDatedItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_StepAP214_AutoDesignDatedItem self, NCollection_Array1_StepAP214_AutoDesignDatedItem theOther) -> NCollection_Array1_StepAP214_AutoDesignDatedItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_StepAP214_AutoDesignDatedItem self, NCollection_Array1_StepAP214_AutoDesignDatedItem theOther) -> NCollection_Array1_StepAP214_AutoDesignDatedItem
        assign(NCollection_Array1_StepAP214_AutoDesignDatedItem self, NCollection_Array1_StepAP214_AutoDesignDatedItem theOther) -> NCollection_Array1_StepAP214_AutoDesignDatedItem

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_StepAP214_AutoDesignDatedItem self) -> StepAP214_AutoDesignDatedItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_StepAP214_AutoDesignDatedItem self) -> StepAP214_AutoDesignDatedItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_StepAP214_AutoDesignDatedItem self, Standard_Integer const theIndex) -> StepAP214_AutoDesignDatedItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_StepAP214_AutoDesignDatedItem self, Standard_Integer const theIndex, StepAP214_AutoDesignDatedItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_StepAP214_AutoDesignDatedItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem_Resize(self, *args)

    __swig_destroy__ = _StepAP214.delete_NCollection_Array1_StepAP214_AutoDesignDatedItem
NCollection_Array1_StepAP214_AutoDesignDatedItem_swigregister = _StepAP214.NCollection_Array1_StepAP214_AutoDesignDatedItem_swigregister
NCollection_Array1_StepAP214_AutoDesignDatedItem_swigregister(NCollection_Array1_StepAP214_AutoDesignDatedItem)


try:
	StepAP214_Array1OfAutoDesignDatedItem = NCollection_Array1_StepAP214_AutoDesignDatedItem
except NameError:
	pass # does not exist, probably ignored

class Handle_StepAP214_HArray1OfDocumentReferenceItem(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_HArray1OfDocumentReferenceItem self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_HArray1OfDocumentReferenceItem self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_HArray1OfDocumentReferenceItem self, StepAP214_HArray1OfDocumentReferenceItem thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_HArray1OfDocumentReferenceItem self, Handle_StepAP214_HArray1OfDocumentReferenceItem theHandle) -> Handle_StepAP214_HArray1OfDocumentReferenceItem
        assign(Handle_StepAP214_HArray1OfDocumentReferenceItem self, StepAP214_HArray1OfDocumentReferenceItem thePtr) -> Handle_StepAP214_HArray1OfDocumentReferenceItem
        assign(Handle_StepAP214_HArray1OfDocumentReferenceItem self, Handle_StepAP214_HArray1OfDocumentReferenceItem theHandle) -> Handle_StepAP214_HArray1OfDocumentReferenceItem

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_HArray1OfDocumentReferenceItem self) -> StepAP214_HArray1OfDocumentReferenceItem

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_HArray1OfDocumentReferenceItem self) -> StepAP214_HArray1OfDocumentReferenceItem

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_HArray1OfDocumentReferenceItem self) -> StepAP214_HArray1OfDocumentReferenceItem

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_HArray1OfDocumentReferenceItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_HArray1OfDocumentReferenceItem

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfDocumentReferenceItem

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_StepAP214_HArray1OfDocumentReferenceItem self) -> NCollection_Array1_StepAP214_DocumentReferenceItem

        :rtype: OCC.wrapper.StepAP214.StepAP214_Array1OfDocumentReferenceItem

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_HArray1OfDocumentReferenceItem self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def begin(self, *args):
        """
        begin(Handle_StepAP214_HArray1OfDocumentReferenceItem self) -> NCollection_Array1< StepAP214_DocumentReferenceItem >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_begin(self, *args)


    def end(self, *args):
        """
        end(Handle_StepAP214_HArray1OfDocumentReferenceItem self) -> NCollection_Array1< StepAP214_DocumentReferenceItem >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(Handle_StepAP214_HArray1OfDocumentReferenceItem self) -> NCollection_Array1< StepAP214_DocumentReferenceItem >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(Handle_StepAP214_HArray1OfDocumentReferenceItem self) -> NCollection_Array1< StepAP214_DocumentReferenceItem >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_cend(self, *args)


    def Init(self, *args):
        """
        Init(Handle_StepAP214_HArray1OfDocumentReferenceItem self, StepAP214_DocumentReferenceItem theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_Init(self, *args)


    def Size(self, *args):
        """
        Size(Handle_StepAP214_HArray1OfDocumentReferenceItem self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_Size(self, *args)


    def Length(self, *args):
        """
        Length(Handle_StepAP214_HArray1OfDocumentReferenceItem self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(Handle_StepAP214_HArray1OfDocumentReferenceItem self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(Handle_StepAP214_HArray1OfDocumentReferenceItem self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(Handle_StepAP214_HArray1OfDocumentReferenceItem self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(Handle_StepAP214_HArray1OfDocumentReferenceItem self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(Handle_StepAP214_HArray1OfDocumentReferenceItem self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(Handle_StepAP214_HArray1OfDocumentReferenceItem self, NCollection_Array1_StepAP214_DocumentReferenceItem theOther) -> NCollection_Array1_StepAP214_DocumentReferenceItem

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_Assign(self, *args)


    def Move(self, *args):
        """
        Move(Handle_StepAP214_HArray1OfDocumentReferenceItem self, NCollection_Array1_StepAP214_DocumentReferenceItem theOther) -> NCollection_Array1_StepAP214_DocumentReferenceItem

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_Move(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(Handle_StepAP214_HArray1OfDocumentReferenceItem self) -> StepAP214_DocumentReferenceItem

        @return first element

        :rtype: TheItemType &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(Handle_StepAP214_HArray1OfDocumentReferenceItem self) -> StepAP214_DocumentReferenceItem

        @return last element

        :rtype: TheItemType &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(Handle_StepAP214_HArray1OfDocumentReferenceItem self, Standard_Integer const theIndex) -> StepAP214_DocumentReferenceItem

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_ChangeValue(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_StepAP214_HArray1OfDocumentReferenceItem self, Standard_Integer const theIndex, StepAP214_DocumentReferenceItem theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(Handle_StepAP214_HArray1OfDocumentReferenceItem self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_Resize(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_HArray1OfDocumentReferenceItem self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_HArray1OfDocumentReferenceItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_HArray1OfDocumentReferenceItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_HArray1OfDocumentReferenceItem self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_HArray1OfDocumentReferenceItem self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_HArray1OfDocumentReferenceItem self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_HArray1OfDocumentReferenceItem self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_HArray1OfDocumentReferenceItem self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_HArray1OfDocumentReferenceItem self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_DecrementRefCounter(self, *args)

Handle_StepAP214_HArray1OfDocumentReferenceItem_swigregister = _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_swigregister
Handle_StepAP214_HArray1OfDocumentReferenceItem_swigregister(Handle_StepAP214_HArray1OfDocumentReferenceItem)

def Handle_StepAP214_HArray1OfDocumentReferenceItem_DownCast(thing):
    return _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_DownCast(thing)
Handle_StepAP214_HArray1OfDocumentReferenceItem_DownCast = _StepAP214.Handle_StepAP214_HArray1OfDocumentReferenceItem_DownCast

class Handle_StepAP214_AutoDesignDocumentReference(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_StepAP214_AutoDesignDocumentReference self)

        Nullify the handle


        """
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_StepAP214_AutoDesignDocumentReference self) -> bool

        Check for being null

        :rtype: bool

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_StepAP214_AutoDesignDocumentReference self, StepAP214_AutoDesignDocumentReference thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_StepAP214_AutoDesignDocumentReference self, Handle_StepAP214_AutoDesignDocumentReference theHandle) -> Handle_StepAP214_AutoDesignDocumentReference
        assign(Handle_StepAP214_AutoDesignDocumentReference self, StepAP214_AutoDesignDocumentReference thePtr) -> Handle_StepAP214_AutoDesignDocumentReference
        assign(Handle_StepAP214_AutoDesignDocumentReference self, Handle_StepAP214_AutoDesignDocumentReference theHandle) -> Handle_StepAP214_AutoDesignDocumentReference

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_StepAP214_AutoDesignDocumentReference self) -> StepAP214_AutoDesignDocumentReference

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_StepAP214_AutoDesignDocumentReference self) -> StepAP214_AutoDesignDocumentReference

        Member access operator (note non-const)

        :rtype: T *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_StepAP214_AutoDesignDocumentReference self) -> StepAP214_AutoDesignDocumentReference

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference___ref__(self, *args)


    def __hash__(self):
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _StepAP214.new_Handle_StepAP214_AutoDesignDocumentReference(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_StepAP214.Handle_StepAP214_AutoDesignDocumentReference_DownCast)
    __swig_destroy__ = _StepAP214.delete_Handle_StepAP214_AutoDesignDocumentReference

    def Init(self, *args):
        """
        Init(Handle_StepAP214_AutoDesignDocumentReference self, Handle_StepBasic_Document aAssignedDocument, Handle_TCollection_HAsciiString aSource, Handle_StepAP214_HArray1OfAutoDesignReferencingItem aItems)

        :type aAssignedDocument: OCC.wrapper.StepBasic.Handle_StepBasic_Document
        :type aSource: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString
        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_Init(self, *args)


    def Items(self, *args):
        """
        Items(Handle_StepAP214_AutoDesignDocumentReference self) -> Handle_StepAP214_HArray1OfAutoDesignReferencingItem

        :rtype: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_Items(self, *args)


    def SetItems(self, *args):
        """
        SetItems(Handle_StepAP214_AutoDesignDocumentReference self, Handle_StepAP214_HArray1OfAutoDesignReferencingItem aItems)

        :type aItems: OCC.wrapper.StepAP214.Handle_StepAP214_HArray1OfAutoDesignReferencingItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_SetItems(self, *args)


    def ItemsValue(self, *args):
        """
        ItemsValue(Handle_StepAP214_AutoDesignDocumentReference self, Standard_Integer const num) -> StepAP214_AutoDesignReferencingItem

        :type num: int
        :rtype: OCC.wrapper.StepAP214.StepAP214_AutoDesignReferencingItem

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_ItemsValue(self, *args)


    def NbItems(self, *args):
        """
        NbItems(Handle_StepAP214_AutoDesignDocumentReference self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_NbItems(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_StepAP214_AutoDesignDocumentReference self) -> char const *

        :rtype: const char *

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Init0(self, *args):
        """
        Init0(Handle_StepAP214_AutoDesignDocumentReference self, Handle_StepBasic_Document aAssignedDocument, Handle_TCollection_HAsciiString aSource)

        :type aAssignedDocument: OCC.wrapper.StepBasic.Handle_StepBasic_Document
        :type aSource: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_Init0(self, *args)


    def AssignedDocument(self, *args):
        """
        AssignedDocument(Handle_StepAP214_AutoDesignDocumentReference self) -> Handle_StepBasic_Document

        :rtype: OCC.wrapper.StepBasic.Handle_StepBasic_Document

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_AssignedDocument(self, *args)


    def SetAssignedDocument(self, *args):
        """
        SetAssignedDocument(Handle_StepAP214_AutoDesignDocumentReference self, Handle_StepBasic_Document aAssignedDocument)

        :type aAssignedDocument: OCC.wrapper.StepBasic.Handle_StepBasic_Document

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_SetAssignedDocument(self, *args)


    def Source(self, *args):
        """
        Source(Handle_StepAP214_AutoDesignDocumentReference self) -> Handle_TCollection_HAsciiString

        :rtype: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_Source(self, *args)


    def SetSource(self, *args):
        """
        SetSource(Handle_StepAP214_AutoDesignDocumentReference self, Handle_TCollection_HAsciiString aSource)

        :type aSource: OCC.wrapper.TCollection.Handle_TCollection_HAsciiString

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_SetSource(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_StepAP214_AutoDesignDocumentReference self)

        Memory deallocator for transient classes


        """
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_StepAP214_AutoDesignDocumentReference self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_StepAP214_AutoDesignDocumentReference self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_StepAP214_AutoDesignDocumentReference self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_StepAP214_AutoDesignDocumentReference self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_StepAP214_AutoDesignDocumentReference self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_StepAP214_AutoDesignDocumentReference self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_StepAP214_AutoDesignDocumentReference self)

        Increments the reference counter of this object


        """
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_StepAP214_AutoDesignDocumentReference self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_DecrementRefCounter(self, *args)

Handle_StepAP214_AutoDesignDocumentReference_swigregister = _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_swigregister
Handle_StepAP214_AutoDesignDocumentReference_swigregister(Handle_StepAP214_AutoDesignDocumentReference)

def Handle_StepAP214_AutoDesignDocumentReference_DownCast(thing):
    return _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_DownCast(thing)
Handle_StepAP214_AutoDesignDocumentReference_DownCast = _StepAP214.Handle_StepAP214_AutoDesignDocumentReference_DownCast



