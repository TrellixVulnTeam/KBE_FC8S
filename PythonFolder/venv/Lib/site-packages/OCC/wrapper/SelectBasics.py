# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_SelectBasics')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_SelectBasics')
    _SelectBasics = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SelectBasics', [dirname(__file__)])
        except ImportError:
            import _SelectBasics
            return _SelectBasics
        try:
            _mod = imp.load_module('_SelectBasics', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _SelectBasics = swig_import_helper()
    del swig_import_helper
else:
    import _SelectBasics
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SelectBasics.delete_SwigPyIterator

    def value(self):
        return _SelectBasics.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SelectBasics.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SelectBasics.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SelectBasics.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SelectBasics.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SelectBasics.SwigPyIterator_copy(self)

    def next(self):
        return _SelectBasics.SwigPyIterator_next(self)

    def __next__(self):
        return _SelectBasics.SwigPyIterator___next__(self)

    def previous(self):
        return _SelectBasics.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SelectBasics.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SelectBasics.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SelectBasics.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SelectBasics.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SelectBasics.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SelectBasics.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SelectBasics.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _SelectBasics.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _SelectBasics.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_SelectBasics.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _SelectBasics.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _SelectBasics.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SelectBasics.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _SelectBasics.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _SelectBasics.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _SelectBasics.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _SelectBasics.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_SelectBasics.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _SelectBasics.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _SelectBasics.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SelectBasics.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _SelectBasics.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _SelectBasics.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _SelectBasics.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _SelectBasics.ptr_to_number(item)
ptr_to_number = _SelectBasics.ptr_to_number

def HashCode(*args):
    return _SelectBasics.HashCode(*args)
HashCode = _SelectBasics.HashCode

def ptr_equal(a, b):
    return _SelectBasics.ptr_equal(a, b)
ptr_equal = _SelectBasics.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BVH
else:
    import BVH
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Graphic3d
else:
    import Graphic3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Image
else:
    import Image
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Aspect
else:
    import Aspect
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Font
else:
    import Font
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import OSD
else:
    import OSD
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
class SelectBasics_EntityOwner(Standard.Standard_Transient):
    """
    defines an abstract owner of sensitive primitives.
    Owners are typically used to establish a connection
    between sensitive entities and high-level objects (e.g. presentations).

    Priority : It's possible to give a priority:
    the scale : [0-9] ; the default priority is 0
    it allows the predominance of one selected object upon
    another one if many objects are selected at the same time

    example : Selection of shapes : the owners are
    selectable objects (presentations)

    a user can give vertex priority [3], edges [2] faces [1] shape [0],
    so that if during selection one vertex one edge and one face are
    simultaneously detected, the vertex will only be hilighted.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_SelectBasics_EntityOwner
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_SelectBasics_EntityOwner(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _SelectBasics.SelectBasics_EntityOwner_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _SelectBasics.SelectBasics_EntityOwner_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _SelectBasics.SelectBasics_EntityOwner_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPriority(self, *args):
        """
        SetPriority(SelectBasics_EntityOwner self, Standard_Integer const thePriority)

        sets the selectable priority of the owner

        :type thePriority: int

        """
        return _SelectBasics.SelectBasics_EntityOwner_SetPriority(self, *args)


    def Priority(self, *args):
        """
        Priority(SelectBasics_EntityOwner self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _SelectBasics.SelectBasics_EntityOwner_Priority(self, *args)


    def HasLocation(self, *args):
        """
        HasLocation(SelectBasics_EntityOwner self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _SelectBasics.SelectBasics_EntityOwner_HasLocation(self, *args)


    def SetLocation(self, *args):
        """
        SetLocation(SelectBasics_EntityOwner self, TopLoc_Location aLoc)

        :type aLoc: OCC.wrapper.TopLoc.TopLoc_Location

        """
        return _SelectBasics.SelectBasics_EntityOwner_SetLocation(self, *args)


    def ResetLocation(self, *args):
        """ResetLocation(SelectBasics_EntityOwner self)"""
        return _SelectBasics.SelectBasics_EntityOwner_ResetLocation(self, *args)


    def Location(self, *args):
        """
        Location(SelectBasics_EntityOwner self) -> TopLoc_Location

        :rtype: OCC.wrapper.TopLoc.TopLoc_Location

        """
        return _SelectBasics.SelectBasics_EntityOwner_Location(self, *args)


    def Set(self, *args):
        """
        Set(SelectBasics_EntityOwner self, Standard_Integer const thePriority)

        sets the selectable priority of the owner

        :type thePriority: int

        """
        return _SelectBasics.SelectBasics_EntityOwner_Set(self, *args)

    __swig_destroy__ = _SelectBasics.delete_SelectBasics_EntityOwner
SelectBasics_EntityOwner_swigregister = _SelectBasics.SelectBasics_EntityOwner_swigregister
SelectBasics_EntityOwner_swigregister(SelectBasics_EntityOwner)

def SelectBasics_EntityOwner_get_type_name(*args):
    """
    SelectBasics_EntityOwner_get_type_name() -> char const *

    :rtype: const char *

    """
    return _SelectBasics.SelectBasics_EntityOwner_get_type_name(*args)

def SelectBasics_EntityOwner_get_type_descriptor(*args):
    """
    SelectBasics_EntityOwner_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _SelectBasics.SelectBasics_EntityOwner_get_type_descriptor(*args)

class SelectBasics_SensitiveEntity(Standard.Standard_Transient):
    """
    root class; the inheriting classes will be able to give
    sensitive Areas for the dynamic selection algorithms
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_SelectBasics_SensitiveEntity
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_SelectBasics_SensitiveEntity(self) 
            return h


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _SelectBasics.SelectBasics_SensitiveEntity_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _SelectBasics.SelectBasics_SensitiveEntity_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _SelectBasics.SelectBasics_SensitiveEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(SelectBasics_SensitiveEntity self, Handle_SelectBasics_EntityOwner theOwnerId)

        Sets owner of the entity

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        return _SelectBasics.SelectBasics_SensitiveEntity_Set(self, *args)


    def OwnerId(self, *args):
        """
        Returns pointer to owner of the entity

        :rtype: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        res = _SelectBasics.SelectBasics_SensitiveEntity_OwnerId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Matches(self, *args):
        """
        Matches(SelectBasics_SensitiveEntity self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether the sensitive entity is overlapped by
        current selecting volume

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _SelectBasics.SelectBasics_SensitiveEntity_Matches(self, *args)


    def SensitivityFactor(self, *args):
        """
        SensitivityFactor(SelectBasics_SensitiveEntity self) -> Standard_Integer

        allows a better sensitivity for
        a specific entity in selection algorithms
        useful for small sized entities.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _SelectBasics.SelectBasics_SensitiveEntity_SensitivityFactor(self, *args)


    def SetSensitivityFactor(self, *args):
        """
        SetSensitivityFactor(SelectBasics_SensitiveEntity self, Standard_Integer const theNewSens)

        Allows to manage sensitivity of a particular sensitive entity

        :type theNewSens: int

        """
        return _SelectBasics.SelectBasics_SensitiveEntity_SetSensitivityFactor(self, *args)


    def NbSubElements(self, *args):
        """
        NbSubElements(SelectBasics_SensitiveEntity self) -> Standard_Integer

        Returns the number of sub-entities or elements in
        sensitive entity. Is used to determine if entity is
        complex and needs to pre-build BVH at the creation of
        sensitive entity step or is light-weighted so the tree
        can be build on demand with unnoticeable delay

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _SelectBasics.SelectBasics_SensitiveEntity_NbSubElements(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(SelectBasics_SensitiveEntity self) -> BVH_Box_Standard_Real_

        Returns bounding box of sensitive entity

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        from sys import version_info as _swig_python_version_info
        if _swig_python_version_info >= (2, 7, 0):
            from . import Select3D
        else:
            import Select3D
        del _swig_python_version_info
        return _SelectBasics.SelectBasics_SensitiveEntity_BoundingBox(self, *args)


    def BVH(self, *args):
        """
        BVH(SelectBasics_SensitiveEntity self)

        Builds BVH tree for sensitive if it is needed


        """
        return _SelectBasics.SelectBasics_SensitiveEntity_BVH(self, *args)


    def Clear(self, *args):
        """
        Clear(SelectBasics_SensitiveEntity self)

        Clears up all the resources and memory allocated


        """
        return _SelectBasics.SelectBasics_SensitiveEntity_Clear(self, *args)


    def HasInitLocation(self, *args):
        """
        HasInitLocation(SelectBasics_SensitiveEntity self) -> Standard_Boolean

        Returns true if the shape corresponding to the entity has init location

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _SelectBasics.SelectBasics_SensitiveEntity_HasInitLocation(self, *args)


    def InvInitLocation(self, *args):
        """
        InvInitLocation(SelectBasics_SensitiveEntity self) -> gp_GTrsf

        Returns inversed location transformation matrix if the shape corresponding
        to this entity has init location set. Otherwise, returns identity matrix.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _SelectBasics.SelectBasics_SensitiveEntity_InvInitLocation(self, *args)

    __swig_destroy__ = _SelectBasics.delete_SelectBasics_SensitiveEntity
SelectBasics_SensitiveEntity_swigregister = _SelectBasics.SelectBasics_SensitiveEntity_swigregister
SelectBasics_SensitiveEntity_swigregister(SelectBasics_SensitiveEntity)

def SelectBasics_SensitiveEntity_get_type_name(*args):
    """
    SelectBasics_SensitiveEntity_get_type_name() -> char const *

    :rtype: const char *

    """
    return _SelectBasics.SelectBasics_SensitiveEntity_get_type_name(*args)

def SelectBasics_SensitiveEntity_get_type_descriptor(*args):
    """
    SelectBasics_SensitiveEntity_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _SelectBasics.SelectBasics_SensitiveEntity_get_type_descriptor(*args)

class SelectBasics_(object):
    """interface class for dynamic selection"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def MaxOwnerPriority(*args):
        """
        MaxOwnerPriority() -> Standard_Integer

        Structure to provide all-in-one result of selection of sensitive
        for "Matches" method of SelectBasics_SensitiveEntity.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _SelectBasics.SelectBasics__MaxOwnerPriority(*args)

    MaxOwnerPriority = staticmethod(MaxOwnerPriority)

    def MinOwnerPriority(*args):
        """
        MinOwnerPriority() -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _SelectBasics.SelectBasics__MinOwnerPriority(*args)

    MinOwnerPriority = staticmethod(MinOwnerPriority)

    def __init__(self):
        """interface class for dynamic selection"""
        this = _SelectBasics.new_SelectBasics_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _SelectBasics.delete_SelectBasics_
SelectBasics__swigregister = _SelectBasics.SelectBasics__swigregister
SelectBasics__swigregister(SelectBasics_)

def SelectBasics__MaxOwnerPriority(*args):
    """
    SelectBasics__MaxOwnerPriority() -> Standard_Integer

    Structure to provide all-in-one result of selection of sensitive
    for "Matches" method of SelectBasics_SensitiveEntity.

    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _SelectBasics.SelectBasics__MaxOwnerPriority(*args)

def SelectBasics__MinOwnerPriority(*args):
    """
    SelectBasics__MinOwnerPriority() -> Standard_Integer

    :rtype: OCC.wrapper.Standard.Standard_Integer

    """
    return _SelectBasics.SelectBasics__MinOwnerPriority(*args)

class Handle_SelectBasics_SensitiveEntity(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_SelectBasics_SensitiveEntity self)

        Nullify the handle


        """
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_SelectBasics_SensitiveEntity self) -> bool

        Check for being null

        :rtype: bool

        """
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_SelectBasics_SensitiveEntity self, SelectBasics_SensitiveEntity thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_SelectBasics_SensitiveEntity self, Handle_SelectBasics_SensitiveEntity theHandle) -> Handle_SelectBasics_SensitiveEntity
        assign(Handle_SelectBasics_SensitiveEntity self, SelectBasics_SensitiveEntity thePtr) -> Handle_SelectBasics_SensitiveEntity
        assign(Handle_SelectBasics_SensitiveEntity self, Handle_SelectBasics_SensitiveEntity theHandle) -> Handle_SelectBasics_SensitiveEntity

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_SelectBasics_SensitiveEntity self) -> SelectBasics_SensitiveEntity

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_SelectBasics_SensitiveEntity self) -> SelectBasics_SensitiveEntity

        Member access operator (note non-const)

        :rtype: T *

        """
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_SelectBasics_SensitiveEntity self) -> SelectBasics_SensitiveEntity

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity___ref__(self, *args)


    def __hash__(self):
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _SelectBasics.Handle_SelectBasics_SensitiveEntity___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _SelectBasics.new_Handle_SelectBasics_SensitiveEntity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_SelectBasics.Handle_SelectBasics_SensitiveEntity_DownCast)
    __swig_destroy__ = _SelectBasics.delete_Handle_SelectBasics_SensitiveEntity

    def get_type_name(self, *args):
        """
        get_type_name(Handle_SelectBasics_SensitiveEntity self) -> char const *

        :rtype: const char *

        """
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _SelectBasics.Handle_SelectBasics_SensitiveEntity_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _SelectBasics.Handle_SelectBasics_SensitiveEntity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_SelectBasics_SensitiveEntity self, Handle_SelectBasics_EntityOwner theOwnerId)

        Sets owner of the entity

        :type theOwnerId: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity_Set(self, *args)


    def OwnerId(self, *args):
        """
        Returns pointer to owner of the entity

        :rtype: OCC.wrapper.SelectBasics.Handle_SelectBasics_EntityOwner

        """
        res = _SelectBasics.Handle_SelectBasics_SensitiveEntity_OwnerId(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Matches(self, *args):
        """
        Matches(Handle_SelectBasics_SensitiveEntity self, SelectBasics_SelectingVolumeManager theMgr, SelectBasics_PickResult & thePickResult) -> Standard_Boolean

        Checks whether the sensitive entity is overlapped by
        current selecting volume

        :type theMgr: OCC.wrapper.SelectBasics.SelectBasics_SelectingVolumeManager
        :type thePickResult: OCC.wrapper.SelectBasics.SelectBasics_PickResult
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity_Matches(self, *args)


    def SensitivityFactor(self, *args):
        """
        SensitivityFactor(Handle_SelectBasics_SensitiveEntity self) -> Standard_Integer

        allows a better sensitivity for
        a specific entity in selection algorithms
        useful for small sized entities.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity_SensitivityFactor(self, *args)


    def SetSensitivityFactor(self, *args):
        """
        SetSensitivityFactor(Handle_SelectBasics_SensitiveEntity self, Standard_Integer const theNewSens)

        Allows to manage sensitivity of a particular sensitive entity

        :type theNewSens: int

        """
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity_SetSensitivityFactor(self, *args)


    def NbSubElements(self, *args):
        """
        NbSubElements(Handle_SelectBasics_SensitiveEntity self) -> Standard_Integer

        Returns the number of sub-entities or elements in
        sensitive entity. Is used to determine if entity is
        complex and needs to pre-build BVH at the creation of
        sensitive entity step or is light-weighted so the tree
        can be build on demand with unnoticeable delay

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity_NbSubElements(self, *args)


    def BoundingBox(self, *args):
        """
        BoundingBox(Handle_SelectBasics_SensitiveEntity self) -> BVH_Box_Standard_Real_

        Returns bounding box of sensitive entity

        :rtype: OCC.wrapper.Select3D.Select3D_BndBox3d

        """
        from sys import version_info as _swig_python_version_info
        if _swig_python_version_info >= (2, 7, 0):
            from . import Select3D
        else:
            import Select3D
        del _swig_python_version_info
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity_BoundingBox(self, *args)


    def BVH(self, *args):
        """
        BVH(Handle_SelectBasics_SensitiveEntity self)

        Builds BVH tree for sensitive if it is needed


        """
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity_BVH(self, *args)


    def Clear(self, *args):
        """
        Clear(Handle_SelectBasics_SensitiveEntity self)

        Clears up all the resources and memory allocated


        """
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity_Clear(self, *args)


    def HasInitLocation(self, *args):
        """
        HasInitLocation(Handle_SelectBasics_SensitiveEntity self) -> Standard_Boolean

        Returns true if the shape corresponding to the entity has init location

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity_HasInitLocation(self, *args)


    def InvInitLocation(self, *args):
        """
        InvInitLocation(Handle_SelectBasics_SensitiveEntity self) -> gp_GTrsf

        Returns inversed location transformation matrix if the shape corresponding
        to this entity has init location set. Otherwise, returns identity matrix.

        :rtype: OCC.wrapper.gp.gp_GTrsf

        """
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity_InvInitLocation(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_SelectBasics_SensitiveEntity self)

        Memory deallocator for transient classes


        """
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_SelectBasics_SensitiveEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_SelectBasics_SensitiveEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_SelectBasics_SensitiveEntity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_SelectBasics_SensitiveEntity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_SelectBasics_SensitiveEntity self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_SelectBasics_SensitiveEntity self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_SelectBasics_SensitiveEntity self)

        Increments the reference counter of this object


        """
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_SelectBasics_SensitiveEntity self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _SelectBasics.Handle_SelectBasics_SensitiveEntity_DecrementRefCounter(self, *args)

Handle_SelectBasics_SensitiveEntity_swigregister = _SelectBasics.Handle_SelectBasics_SensitiveEntity_swigregister
Handle_SelectBasics_SensitiveEntity_swigregister(Handle_SelectBasics_SensitiveEntity)

def Handle_SelectBasics_SensitiveEntity_DownCast(thing):
    return _SelectBasics.Handle_SelectBasics_SensitiveEntity_DownCast(thing)
Handle_SelectBasics_SensitiveEntity_DownCast = _SelectBasics.Handle_SelectBasics_SensitiveEntity_DownCast

class SelectBasics_SelectingVolumeManager(object):
    """
    This class provides an interface for selecting volume manager,
    which is responsible for all overlap detection methods and
    calculation of minimum depth, distance to center of geometry
    and detected closest point on entity.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Point = _SelectBasics.SelectBasics_SelectingVolumeManager_Point
    Box = _SelectBasics.SelectBasics_SelectingVolumeManager_Box
    Polyline = _SelectBasics.SelectBasics_SelectingVolumeManager_Polyline
    Unknown = _SelectBasics.SelectBasics_SelectingVolumeManager_Unknown

    def GetActiveSelectionType(self, *args):
        """
        GetActiveSelectionType(SelectBasics_SelectingVolumeManager self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _SelectBasics.SelectBasics_SelectingVolumeManager_GetActiveSelectionType(self, *args)


    def Overlaps(self, *args):
        """
        Overlaps(SelectBasics_SelectingVolumeManager self, NCollection_Vec3_Standard_Real theBoxMin, NCollection_Vec3_Standard_Real theBoxMax) -> Standard_Boolean
        Overlaps(SelectBasics_SelectingVolumeManager self, NCollection_Vec3_Standard_Real theBoxMin, NCollection_Vec3_Standard_Real theBoxMax, Standard_Boolean * theInside=None) -> Standard_Boolean
        Overlaps(SelectBasics_SelectingVolumeManager self, gp_Pnt thePnt) -> Standard_Boolean
        Overlaps(SelectBasics_SelectingVolumeManager self, gp_Pnt thePnt) -> Standard_Boolean
        Overlaps(SelectBasics_SelectingVolumeManager self, Handle_TColgp_HArray1OfPnt theArrayOfPts, Standard_Integer theSensType) -> Standard_Boolean
        Overlaps(SelectBasics_SelectingVolumeManager self, NCollection_Array1_gp_Pnt theArrayOfPts, Standard_Integer theSensType) -> Standard_Boolean
        Overlaps(SelectBasics_SelectingVolumeManager self, gp_Pnt thePt1, gp_Pnt thePt2) -> Standard_Boolean
        Overlaps(SelectBasics_SelectingVolumeManager self, gp_Pnt thePt1, gp_Pnt thePt2, gp_Pnt thePt3, Standard_Integer theSensType) -> Standard_Boolean

        Returns true if selecting volume is overlapped by triangle with vertices thePt1,
        thePt2 and thePt3, taking into account sensitivity type theSensType

        :type thePt1: OCC.wrapper.gp.gp_Pnt
        :type thePt2: OCC.wrapper.gp.gp_Pnt
        :type thePt3: OCC.wrapper.gp.gp_Pnt
        :type theSensType: int
        :type theDepth: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _SelectBasics.SelectBasics_SelectingVolumeManager_Overlaps(self, *args)


    def DistToGeometryCenter(self, *args):
        """
        DistToGeometryCenter(SelectBasics_SelectingVolumeManager self, gp_Pnt theCOG) -> Standard_Real

        Calculates distance from 3d projection of user-defined selection point
        to the given point theCOG

        :type theCOG: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _SelectBasics.SelectBasics_SelectingVolumeManager_DistToGeometryCenter(self, *args)


    def DetectedPoint(self, *args):
        """
        DetectedPoint(SelectBasics_SelectingVolumeManager self, Standard_Real const theDepth) -> gp_Pnt

        :type theDepth: float
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _SelectBasics.SelectBasics_SelectingVolumeManager_DetectedPoint(self, *args)


    def IsOverlapAllowed(self, *args):
        """
        IsOverlapAllowed(SelectBasics_SelectingVolumeManager self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _SelectBasics.SelectBasics_SelectingVolumeManager_IsOverlapAllowed(self, *args)


    def GetNearPickedPnt(self, *args):
        """
        GetNearPickedPnt(SelectBasics_SelectingVolumeManager self) -> gp_Pnt

        Valid only for point and rectangular selection.
        Returns projection of 2d mouse picked point or projection
        of center of 2d rectangle (for point and rectangular selection
        correspondingly) onto near view frustum plane

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _SelectBasics.SelectBasics_SelectingVolumeManager_GetNearPickedPnt(self, *args)


    def GetFarPickedPnt(self, *args):
        """
        GetFarPickedPnt(SelectBasics_SelectingVolumeManager self) -> gp_Pnt

        Valid only for point and rectangular selection.
        Returns projection of 2d mouse picked point or projection
        of center of 2d rectangle (for point and rectangular selection
        correspondingly) onto far view frustum plane

        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        return _SelectBasics.SelectBasics_SelectingVolumeManager_GetFarPickedPnt(self, *args)


    def GetPlanes(self, *args):
        """
        GetPlanes(SelectBasics_SelectingVolumeManager self, NCollection_Vector< NCollection_Vec4< Standard_Real > > & thePlaneEquations)

        Stores plane equation coefficients (in the following form:
        Ax + By + Cz + D = 0) to the given vector

        :type thePlaneEquations: OCC.wrapper.SelectBasics.NCollection_Vector_NCollection_Vec4_Standard_Real

        """
        return _SelectBasics.SelectBasics_SelectingVolumeManager_GetPlanes(self, *args)

    __swig_destroy__ = _SelectBasics.delete_SelectBasics_SelectingVolumeManager
SelectBasics_SelectingVolumeManager_swigregister = _SelectBasics.SelectBasics_SelectingVolumeManager_swigregister
SelectBasics_SelectingVolumeManager_swigregister(SelectBasics_SelectingVolumeManager)

class Handle_SelectBasics_EntityOwner(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_SelectBasics_EntityOwner self)

        Nullify the handle


        """
        return _SelectBasics.Handle_SelectBasics_EntityOwner_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_SelectBasics_EntityOwner self) -> bool

        Check for being null

        :rtype: bool

        """
        return _SelectBasics.Handle_SelectBasics_EntityOwner_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_SelectBasics_EntityOwner self, SelectBasics_EntityOwner thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _SelectBasics.Handle_SelectBasics_EntityOwner_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_SelectBasics_EntityOwner self, Handle_SelectBasics_EntityOwner theHandle) -> Handle_SelectBasics_EntityOwner
        assign(Handle_SelectBasics_EntityOwner self, SelectBasics_EntityOwner thePtr) -> Handle_SelectBasics_EntityOwner
        assign(Handle_SelectBasics_EntityOwner self, Handle_SelectBasics_EntityOwner theHandle) -> Handle_SelectBasics_EntityOwner

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _SelectBasics.Handle_SelectBasics_EntityOwner_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_SelectBasics_EntityOwner self) -> SelectBasics_EntityOwner

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _SelectBasics.Handle_SelectBasics_EntityOwner_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_SelectBasics_EntityOwner self) -> SelectBasics_EntityOwner

        Member access operator (note non-const)

        :rtype: T *

        """
        return _SelectBasics.Handle_SelectBasics_EntityOwner___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_SelectBasics_EntityOwner self) -> SelectBasics_EntityOwner

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _SelectBasics.Handle_SelectBasics_EntityOwner___ref__(self, *args)


    def __hash__(self):
        return _SelectBasics.Handle_SelectBasics_EntityOwner___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _SelectBasics.Handle_SelectBasics_EntityOwner___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _SelectBasics.new_Handle_SelectBasics_EntityOwner(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_SelectBasics.Handle_SelectBasics_EntityOwner_DownCast)
    __swig_destroy__ = _SelectBasics.delete_Handle_SelectBasics_EntityOwner

    def get_type_name(self, *args):
        """
        get_type_name(Handle_SelectBasics_EntityOwner self) -> char const *

        :rtype: const char *

        """
        return _SelectBasics.Handle_SelectBasics_EntityOwner_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _SelectBasics.Handle_SelectBasics_EntityOwner_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _SelectBasics.Handle_SelectBasics_EntityOwner_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPriority(self, *args):
        """
        SetPriority(Handle_SelectBasics_EntityOwner self, Standard_Integer const thePriority)

        sets the selectable priority of the owner

        :type thePriority: int

        """
        return _SelectBasics.Handle_SelectBasics_EntityOwner_SetPriority(self, *args)


    def Priority(self, *args):
        """
        Priority(Handle_SelectBasics_EntityOwner self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _SelectBasics.Handle_SelectBasics_EntityOwner_Priority(self, *args)


    def HasLocation(self, *args):
        """
        HasLocation(Handle_SelectBasics_EntityOwner self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _SelectBasics.Handle_SelectBasics_EntityOwner_HasLocation(self, *args)


    def SetLocation(self, *args):
        """
        SetLocation(Handle_SelectBasics_EntityOwner self, TopLoc_Location aLoc)

        :type aLoc: OCC.wrapper.TopLoc.TopLoc_Location

        """
        return _SelectBasics.Handle_SelectBasics_EntityOwner_SetLocation(self, *args)


    def ResetLocation(self, *args):
        """ResetLocation(Handle_SelectBasics_EntityOwner self)"""
        return _SelectBasics.Handle_SelectBasics_EntityOwner_ResetLocation(self, *args)


    def Location(self, *args):
        """
        Location(Handle_SelectBasics_EntityOwner self) -> TopLoc_Location

        :rtype: OCC.wrapper.TopLoc.TopLoc_Location

        """
        return _SelectBasics.Handle_SelectBasics_EntityOwner_Location(self, *args)


    def Set(self, *args):
        """
        Set(Handle_SelectBasics_EntityOwner self, Standard_Integer const thePriority)

        sets the selectable priority of the owner

        :type thePriority: int

        """
        return _SelectBasics.Handle_SelectBasics_EntityOwner_Set(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_SelectBasics_EntityOwner self)

        Memory deallocator for transient classes


        """
        return _SelectBasics.Handle_SelectBasics_EntityOwner_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_SelectBasics_EntityOwner self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_SelectBasics_EntityOwner self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _SelectBasics.Handle_SelectBasics_EntityOwner_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_SelectBasics_EntityOwner self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_SelectBasics_EntityOwner self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _SelectBasics.Handle_SelectBasics_EntityOwner_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_SelectBasics_EntityOwner self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _SelectBasics.Handle_SelectBasics_EntityOwner_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_SelectBasics_EntityOwner self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _SelectBasics.Handle_SelectBasics_EntityOwner_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_SelectBasics_EntityOwner self)

        Increments the reference counter of this object


        """
        return _SelectBasics.Handle_SelectBasics_EntityOwner_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_SelectBasics_EntityOwner self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _SelectBasics.Handle_SelectBasics_EntityOwner_DecrementRefCounter(self, *args)

Handle_SelectBasics_EntityOwner_swigregister = _SelectBasics.Handle_SelectBasics_EntityOwner_swigregister
Handle_SelectBasics_EntityOwner_swigregister(Handle_SelectBasics_EntityOwner)

def Handle_SelectBasics_EntityOwner_DownCast(thing):
    return _SelectBasics.Handle_SelectBasics_EntityOwner_DownCast(thing)
Handle_SelectBasics_EntityOwner_DownCast = _SelectBasics.Handle_SelectBasics_EntityOwner_DownCast



