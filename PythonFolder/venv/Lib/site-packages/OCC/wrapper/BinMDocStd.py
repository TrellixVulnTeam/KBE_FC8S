# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BinMDocStd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BinMDocStd')
    _BinMDocStd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BinMDocStd', [dirname(__file__)])
        except ImportError:
            import _BinMDocStd
            return _BinMDocStd
        try:
            _mod = imp.load_module('_BinMDocStd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BinMDocStd = swig_import_helper()
    del swig_import_helper
else:
    import _BinMDocStd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BinMDocStd.delete_SwigPyIterator

    def value(self):
        return _BinMDocStd.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BinMDocStd.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BinMDocStd.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BinMDocStd.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BinMDocStd.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BinMDocStd.SwigPyIterator_copy(self)

    def next(self):
        return _BinMDocStd.SwigPyIterator_next(self)

    def __next__(self):
        return _BinMDocStd.SwigPyIterator___next__(self)

    def previous(self):
        return _BinMDocStd.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BinMDocStd.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BinMDocStd.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BinMDocStd.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BinMDocStd.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BinMDocStd.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BinMDocStd.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BinMDocStd.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BinMDocStd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BinMDocStd.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_BinMDocStd.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _BinMDocStd.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BinMDocStd.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinMDocStd.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _BinMDocStd.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _BinMDocStd.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _BinMDocStd.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BinMDocStd.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_BinMDocStd.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _BinMDocStd.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BinMDocStd.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinMDocStd.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _BinMDocStd.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _BinMDocStd.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _BinMDocStd.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _BinMDocStd.ptr_to_number(item)
ptr_to_number = _BinMDocStd.ptr_to_number

def HashCode(*args):
    return _BinMDocStd.HashCode(*args)
HashCode = _BinMDocStd.HashCode

def ptr_equal(a, b):
    return _BinMDocStd.ptr_equal(a, b)
ptr_equal = _BinMDocStd.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BinObjMgt
else:
    import BinObjMgt
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Storage
else:
    import Storage
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import BinMDF
else:
    import BinMDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
class BinMDocStd_XLinkDriver(BinMDF.BinMDF_ADriver):
    """XLink attribute Driver."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_BinMDocStd_XLinkDriver
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_BinMDocStd_XLinkDriver(self) 
            return h


    def __init__(self, *args):
        """
        __init__(BinMDocStd_XLinkDriver self, Handle_Message_Messenger theMessageDriver) -> BinMDocStd_XLinkDriver

        :type theMessageDriver: OCC.wrapper.Message.Handle_Message_Messenger

        """
        this = _BinMDocStd.new_BinMDocStd_XLinkDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewEmpty(self, *args):
        """
        NewEmpty(BinMDocStd_XLinkDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDocStd.BinMDocStd_XLinkDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(BinMDocStd_XLinkDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(BinMDocStd_XLinkDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDocStd.BinMDocStd_XLinkDriver_Paste(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _BinMDocStd.BinMDocStd_XLinkDriver_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _BinMDocStd.BinMDocStd_XLinkDriver_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDocStd.BinMDocStd_XLinkDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BinMDocStd.delete_BinMDocStd_XLinkDriver
BinMDocStd_XLinkDriver_swigregister = _BinMDocStd.BinMDocStd_XLinkDriver_swigregister
BinMDocStd_XLinkDriver_swigregister(BinMDocStd_XLinkDriver)

def BinMDocStd_XLinkDriver_get_type_name(*args):
    """
    BinMDocStd_XLinkDriver_get_type_name() -> char const *

    :rtype: const char *

    """
    return _BinMDocStd.BinMDocStd_XLinkDriver_get_type_name(*args)

def BinMDocStd_XLinkDriver_get_type_descriptor(*args):
    """
    BinMDocStd_XLinkDriver_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _BinMDocStd.BinMDocStd_XLinkDriver_get_type_descriptor(*args)

class Handle_BinMDocStd_XLinkDriver(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_BinMDocStd_XLinkDriver self)

        Nullify the handle


        """
        return _BinMDocStd.Handle_BinMDocStd_XLinkDriver_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_BinMDocStd_XLinkDriver self) -> bool

        Check for being null

        :rtype: bool

        """
        return _BinMDocStd.Handle_BinMDocStd_XLinkDriver_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_BinMDocStd_XLinkDriver self, BinMDocStd_XLinkDriver thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _BinMDocStd.Handle_BinMDocStd_XLinkDriver_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_BinMDocStd_XLinkDriver self, Handle_BinMDocStd_XLinkDriver theHandle) -> Handle_BinMDocStd_XLinkDriver
        assign(Handle_BinMDocStd_XLinkDriver self, BinMDocStd_XLinkDriver thePtr) -> Handle_BinMDocStd_XLinkDriver
        assign(Handle_BinMDocStd_XLinkDriver self, Handle_BinMDocStd_XLinkDriver theHandle) -> Handle_BinMDocStd_XLinkDriver

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _BinMDocStd.Handle_BinMDocStd_XLinkDriver_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_BinMDocStd_XLinkDriver self) -> BinMDocStd_XLinkDriver

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _BinMDocStd.Handle_BinMDocStd_XLinkDriver_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_BinMDocStd_XLinkDriver self) -> BinMDocStd_XLinkDriver

        Member access operator (note non-const)

        :rtype: T *

        """
        return _BinMDocStd.Handle_BinMDocStd_XLinkDriver___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_BinMDocStd_XLinkDriver self) -> BinMDocStd_XLinkDriver

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _BinMDocStd.Handle_BinMDocStd_XLinkDriver___ref__(self, *args)


    def __hash__(self):
        return _BinMDocStd.Handle_BinMDocStd_XLinkDriver___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _BinMDocStd.Handle_BinMDocStd_XLinkDriver___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _BinMDocStd.new_Handle_BinMDocStd_XLinkDriver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_BinMDocStd.Handle_BinMDocStd_XLinkDriver_DownCast)
    __swig_destroy__ = _BinMDocStd.delete_Handle_BinMDocStd_XLinkDriver

    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_BinMDocStd_XLinkDriver self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _BinMDocStd.Handle_BinMDocStd_XLinkDriver_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_BinMDocStd_XLinkDriver self, BinObjMgt_Persistent Source, Handle_TDF_Attribute Target, BinObjMgt_RRelocationTable RelocTable) -> Standard_Boolean
        Paste(Handle_BinMDocStd_XLinkDriver self, Handle_TDF_Attribute Source, BinObjMgt_Persistent Target, NCollection_IndexedMap_Handle_Standard_Transient_TColStd_MapTransientHasher RelocTable)

        :type Source: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type Target: OCC.wrapper.BinObjMgt.BinObjMgt_Persistent
        :type RelocTable: OCC.wrapper.BinObjMgt.BinObjMgt_SRelocationTable

        """
        return _BinMDocStd.Handle_BinMDocStd_XLinkDriver_Paste(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_BinMDocStd_XLinkDriver self) -> char const *

        :rtype: const char *

        """
        return _BinMDocStd.Handle_BinMDocStd_XLinkDriver_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDocStd.Handle_BinMDocStd_XLinkDriver_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDocStd.Handle_BinMDocStd_XLinkDriver_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SourceType(self, *args):
        """
        Returns the type of source object,
        inheriting from Attribute from TDF.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _BinMDocStd.Handle_BinMDocStd_XLinkDriver_SourceType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def TypeName(self, *args):
        """
        Returns the type name of the attribute object

        :rtype: OCC.wrapper.TCollection.TCollection_AsciiString

        """
        res = _BinMDocStd.Handle_BinMDocStd_XLinkDriver_TypeName(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_BinMDocStd_XLinkDriver self)

        Memory deallocator for transient classes


        """
        return _BinMDocStd.Handle_BinMDocStd_XLinkDriver_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_BinMDocStd_XLinkDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_BinMDocStd_XLinkDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDocStd.Handle_BinMDocStd_XLinkDriver_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_BinMDocStd_XLinkDriver self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_BinMDocStd_XLinkDriver self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BinMDocStd.Handle_BinMDocStd_XLinkDriver_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_BinMDocStd_XLinkDriver self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _BinMDocStd.Handle_BinMDocStd_XLinkDriver_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_BinMDocStd_XLinkDriver self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDocStd.Handle_BinMDocStd_XLinkDriver_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_BinMDocStd_XLinkDriver self)

        Increments the reference counter of this object


        """
        return _BinMDocStd.Handle_BinMDocStd_XLinkDriver_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_BinMDocStd_XLinkDriver self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BinMDocStd.Handle_BinMDocStd_XLinkDriver_DecrementRefCounter(self, *args)

Handle_BinMDocStd_XLinkDriver_swigregister = _BinMDocStd.Handle_BinMDocStd_XLinkDriver_swigregister
Handle_BinMDocStd_XLinkDriver_swigregister(Handle_BinMDocStd_XLinkDriver)

def Handle_BinMDocStd_XLinkDriver_DownCast(thing):
    return _BinMDocStd.Handle_BinMDocStd_XLinkDriver_DownCast(thing)
Handle_BinMDocStd_XLinkDriver_DownCast = _BinMDocStd.Handle_BinMDocStd_XLinkDriver_DownCast

class BinMDocStd_(object):
    """Storage and Retrieval drivers for TDocStd modelling attributes."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AddDrivers(*args):
        """
        AddDrivers(Handle_BinMDF_ADriverTable theDriverTable, Handle_Message_Messenger aMsgDrv)

        Adds the attribute drivers to <theDriverTable>.

        :type theDriverTable: OCC.wrapper.BinMDF.Handle_BinMDF_ADriverTable
        :type aMsgDrv: OCC.wrapper.Message.Handle_Message_Messenger

        """
        return _BinMDocStd.BinMDocStd__AddDrivers(*args)

    AddDrivers = staticmethod(AddDrivers)

    def __init__(self):
        """Storage and Retrieval drivers for TDocStd modelling attributes."""
        this = _BinMDocStd.new_BinMDocStd_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BinMDocStd.delete_BinMDocStd_
BinMDocStd__swigregister = _BinMDocStd.BinMDocStd__swigregister
BinMDocStd__swigregister(BinMDocStd_)

def BinMDocStd__AddDrivers(*args):
    """
    BinMDocStd__AddDrivers(Handle_BinMDF_ADriverTable theDriverTable, Handle_Message_Messenger aMsgDrv)

    Adds the attribute drivers to <theDriverTable>.

    :type theDriverTable: OCC.wrapper.BinMDF.Handle_BinMDF_ADriverTable
    :type aMsgDrv: OCC.wrapper.Message.Handle_Message_Messenger

    """
    return _BinMDocStd.BinMDocStd__AddDrivers(*args)



