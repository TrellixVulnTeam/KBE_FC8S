# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TopCnx')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TopCnx')
    _TopCnx = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TopCnx', [dirname(__file__)])
        except ImportError:
            import _TopCnx
            return _TopCnx
        try:
            _mod = imp.load_module('_TopCnx', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TopCnx = swig_import_helper()
    del swig_import_helper
else:
    import _TopCnx
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopCnx.delete_SwigPyIterator

    def value(self):
        return _TopCnx.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TopCnx.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TopCnx.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TopCnx.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TopCnx.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TopCnx.SwigPyIterator_copy(self)

    def next(self):
        return _TopCnx.SwigPyIterator_next(self)

    def __next__(self):
        return _TopCnx.SwigPyIterator___next__(self)

    def previous(self):
        return _TopCnx.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TopCnx.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TopCnx.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TopCnx.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TopCnx.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TopCnx.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TopCnx.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TopCnx.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _TopCnx.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TopCnx.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_TopCnx.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _TopCnx.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TopCnx.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopCnx.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _TopCnx.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _TopCnx.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _TopCnx.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TopCnx.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_TopCnx.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _TopCnx.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TopCnx.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TopCnx.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _TopCnx.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _TopCnx.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _TopCnx.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _TopCnx.ptr_to_number(item)
ptr_to_number = _TopCnx.ptr_to_number

def HashCode(*args):
    return _TopCnx.HashCode(*args)
HashCode = _TopCnx.HashCode

def ptr_equal(a, b):
    return _TopCnx.ptr_equal(a, b)
ptr_equal = _TopCnx.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
class TopCnx_EdgeFaceTransition(object):
    """
    TheEdgeFaceTransition is an algorithm to   compute
    the  cumulated  transition for interferences on an
    edge.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TopCnx_EdgeFaceTransition self) -> TopCnx_EdgeFaceTransition

        Creates an empty algorithm.


        """
        this = _TopCnx.new_TopCnx_EdgeFaceTransition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Reset(self, *args):
        """
        Reset(TopCnx_EdgeFaceTransition self, gp_Dir Tgt, gp_Dir Norm, Standard_Real const Curv)
        Reset(TopCnx_EdgeFaceTransition self, gp_Dir Tgt)

        Initialize the algorithm with a linear Edge.

        :type Tgt: OCC.wrapper.gp.gp_Dir

        """
        return _TopCnx.TopCnx_EdgeFaceTransition_Reset(self, *args)


    def AddInterference(self, *args):
        """
        AddInterference(TopCnx_EdgeFaceTransition self, Standard_Real const Tole, gp_Dir Tang, gp_Dir Norm, Standard_Real const Curv, TopAbs_Orientation const Or, TopAbs_Orientation const Tr, TopAbs_Orientation const BTr)

        Add a curve  element to the  boundary.  Or  is the
        orientation of   the interference on  the boundary
        curve. Tr is  the transition  of the interference.
        BTr     is   the    boundary  transition    of the
        interference.

        :type Tole: float
        :type Tang: OCC.wrapper.gp.gp_Dir
        :type Norm: OCC.wrapper.gp.gp_Dir
        :type Curv: float
        :type Or: OCC.wrapper.TopAbs.TopAbs_Orientation
        :type Tr: OCC.wrapper.TopAbs.TopAbs_Orientation
        :type BTr: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _TopCnx.TopCnx_EdgeFaceTransition_AddInterference(self, *args)


    def Transition(self, *args):
        """
        Transition(TopCnx_EdgeFaceTransition self) -> TopAbs_Orientation

        Returns the current cumulated transition.

        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _TopCnx.TopCnx_EdgeFaceTransition_Transition(self, *args)


    def BoundaryTransition(self, *args):
        """
        BoundaryTransition(TopCnx_EdgeFaceTransition self) -> TopAbs_Orientation

        Returns the current cumulated BoundaryTransition.

        :rtype: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _TopCnx.TopCnx_EdgeFaceTransition_BoundaryTransition(self, *args)

    __swig_destroy__ = _TopCnx.delete_TopCnx_EdgeFaceTransition
TopCnx_EdgeFaceTransition_swigregister = _TopCnx.TopCnx_EdgeFaceTransition_swigregister
TopCnx_EdgeFaceTransition_swigregister(TopCnx_EdgeFaceTransition)



