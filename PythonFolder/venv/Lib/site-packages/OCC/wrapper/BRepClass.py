# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepClass')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepClass')
    _BRepClass = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepClass', [dirname(__file__)])
        except ImportError:
            import _BRepClass
            return _BRepClass
        try:
            _mod = imp.load_module('_BRepClass', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepClass = swig_import_helper()
    del swig_import_helper
else:
    import _BRepClass
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepClass.delete_SwigPyIterator

    def value(self):
        return _BRepClass.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BRepClass.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BRepClass.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BRepClass.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BRepClass.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BRepClass.SwigPyIterator_copy(self)

    def next(self):
        return _BRepClass.SwigPyIterator_next(self)

    def __next__(self):
        return _BRepClass.SwigPyIterator___next__(self)

    def previous(self):
        return _BRepClass.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BRepClass.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BRepClass.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BRepClass.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BRepClass.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BRepClass.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BRepClass.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BRepClass.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _BRepClass.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BRepClass.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_BRepClass.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _BRepClass.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BRepClass.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BRepClass.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _BRepClass.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _BRepClass.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _BRepClass.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _BRepClass.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_BRepClass.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _BRepClass.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _BRepClass.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _BRepClass.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _BRepClass.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _BRepClass.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _BRepClass.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _BRepClass.ptr_to_number(item)
ptr_to_number = _BRepClass.ptr_to_number

def HashCode(*args):
    return _BRepClass.HashCode(*args)
HashCode = _BRepClass.HashCode

def ptr_equal(a, b):
    return _BRepClass.ptr_equal(a, b)
ptr_equal = _BRepClass.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2dInt
else:
    import Geom2dInt
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Intf
else:
    import Intf
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntCurve
else:
    import IntCurve
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import IntRes2d
else:
    import IntRes2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import math
else:
    import math
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor2d
else:
    import Adaptor2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom2d
else:
    import Geom2d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Extrema
else:
    import Extrema
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAdaptor
else:
    import GeomAdaptor
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Geom
else:
    import Geom
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Adaptor3d
else:
    import Adaptor3d
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
class BRepClass_FClassifier(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepClass_FClassifier self) -> BRepClass_FClassifier
        __init__(BRepClass_FClassifier self, BRepClass_FaceExplorer F, gp_Pnt2d P, Standard_Real const Tol) -> BRepClass_FClassifier

        Creates an algorithm to classify the Point  P with
        Tolerance <T> on the face described by <F>.

        :type F: OCC.wrapper.BRepClass.BRepClass_FaceExplorer
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type Tol: float

        """
        this = _BRepClass.new_BRepClass_FClassifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Perform(self, *args):
        """
        Perform(BRepClass_FClassifier self, BRepClass_FaceExplorer F, gp_Pnt2d P, Standard_Real const Tol)

        Classify  the Point  P  with  Tolerance <T> on the
        face described by <F>.

        :type F: OCC.wrapper.BRepClass.BRepClass_FaceExplorer
        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type Tol: float

        """
        return _BRepClass.BRepClass_FClassifier_Perform(self, *args)


    def State(self, *args):
        """
        State(BRepClass_FClassifier self) -> TopAbs_State

        Returns the result of the classification.

        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _BRepClass.BRepClass_FClassifier_State(self, *args)


    def Rejected(self, *args):
        """
        Rejected(BRepClass_FClassifier self) -> Standard_Boolean

        Returns  True when  the   state was computed by  a
        rejection. The state is OUT.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepClass.BRepClass_FClassifier_Rejected(self, *args)


    def NoWires(self, *args):
        """
        NoWires(BRepClass_FClassifier self) -> Standard_Boolean

        Returns True if  the face  contains  no wire.  The
        state is IN.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepClass.BRepClass_FClassifier_NoWires(self, *args)


    def Edge(self, *args):
        """
        Returns   the    Edge  used   to    determine  the
        classification. When the State is ON  this  is the
        Edge containing the point.

        :rtype: OCC.wrapper.BRepClass.BRepClass_Edge

        """
        res = _BRepClass.BRepClass_FClassifier_Edge(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def EdgeParameter(self, *args):
        """
        EdgeParameter(BRepClass_FClassifier self) -> Standard_Real

        Returns the parameter on Edge() used to determine  the
        classification.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepClass.BRepClass_FClassifier_EdgeParameter(self, *args)


    def Position(self, *args):
        """
        Position(BRepClass_FClassifier self) -> IntRes2d_Position

        Returns the  position of  the   point on the  edge
        returned by Edge.

        :rtype: OCC.wrapper.IntRes2d.IntRes2d_Position

        """
        return _BRepClass.BRepClass_FClassifier_Position(self, *args)

    __swig_destroy__ = _BRepClass.delete_BRepClass_FClassifier
BRepClass_FClassifier_swigregister = _BRepClass.BRepClass_FClassifier_swigregister
BRepClass_FClassifier_swigregister(BRepClass_FClassifier)

class BRepClass_FaceClassifier(BRepClass_FClassifier):
    """Provides Constructors with a Face."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepClass_FaceClassifier self) -> BRepClass_FaceClassifier
        __init__(BRepClass_FaceClassifier self, BRepClass_FaceExplorer F, gp_Pnt2d P, Standard_Real const Tol) -> BRepClass_FaceClassifier
        __init__(BRepClass_FaceClassifier self, TopoDS_Face F, gp_Pnt2d P, Standard_Real const Tol) -> BRepClass_FaceClassifier
        __init__(BRepClass_FaceClassifier self, TopoDS_Face F, gp_Pnt P, Standard_Real const Tol) -> BRepClass_FaceClassifier

        Creates an algorithm to classify the Point  P with
        Tolerance <T> on the face <F>.

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :type P: OCC.wrapper.gp.gp_Pnt
        :type Tol: float

        """
        this = _BRepClass.new_BRepClass_FaceClassifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Perform(self, *args):
        """
        Perform(BRepClass_FaceClassifier self, TopoDS_Face F, gp_Pnt2d P, Standard_Real const Tol)
        Perform(BRepClass_FaceClassifier self, TopoDS_Face F, gp_Pnt P, Standard_Real const Tol)

        Classify  the Point  P  with  Tolerance <T> on the
        face described by <F>.

        :type F: OCC.wrapper.TopoDS.TopoDS_Face
        :type P: OCC.wrapper.gp.gp_Pnt
        :type Tol: float

        """
        return _BRepClass.BRepClass_FaceClassifier_Perform(self, *args)

    __swig_destroy__ = _BRepClass.delete_BRepClass_FaceClassifier
BRepClass_FaceClassifier_swigregister = _BRepClass.BRepClass_FaceClassifier_swigregister
BRepClass_FaceClassifier_swigregister(BRepClass_FaceClassifier)

class BRepClass_FClass2dOfFClassifier(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepClass_FClass2dOfFClassifier self) -> BRepClass_FClass2dOfFClassifier

        Creates an undefined classifier.


        """
        this = _BRepClass.new_BRepClass_FClass2dOfFClassifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Reset(self, *args):
        """
        Reset(BRepClass_FClass2dOfFClassifier self, gp_Lin2d L, Standard_Real const P, Standard_Real const Tol)

        Starts  a  classification process.   The  point to
        classify is the origin of  the  line <L>.  <P>  is
        the original length of the segment on <L>  used to
        compute  intersections.   <Tol> is the   tolerance
        attached to the line segment in intersections.

        :type L: OCC.wrapper.gp.gp_Lin2d
        :type P: float
        :type Tol: float

        """
        return _BRepClass.BRepClass_FClass2dOfFClassifier_Reset(self, *args)


    def Compare(self, *args):
        """
        Compare(BRepClass_FClass2dOfFClassifier self, BRepClass_Edge E, TopAbs_Orientation const Or)

        Updates  the classification process with  the edge
        <E> from the boundary.

        :type E: OCC.wrapper.BRepClass.BRepClass_Edge
        :type Or: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _BRepClass.BRepClass_FClass2dOfFClassifier_Compare(self, *args)


    def Parameter(self, *args):
        """
        Parameter(BRepClass_FClass2dOfFClassifier self) -> Standard_Real

        Returns the current value of the parameter.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepClass.BRepClass_FClass2dOfFClassifier_Parameter(self, *args)


    def Intersector(self, *args):
        """
        Intersector(BRepClass_FClass2dOfFClassifier self) -> BRepClass_Intersector

        Returns the intersecting algorithm.

        :rtype: OCC.wrapper.BRepClass.BRepClass_Intersector

        """
        return _BRepClass.BRepClass_FClass2dOfFClassifier_Intersector(self, *args)


    def ClosestIntersection(self, *args):
        """
        ClosestIntersection(BRepClass_FClass2dOfFClassifier self) -> Standard_Integer

        Returns  0  if  the   last  compared   edge had no
        relevant intersection.  Else returns  the index of
        this   intersection  in the    last   intersection
        algorithm.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepClass.BRepClass_FClass2dOfFClassifier_ClosestIntersection(self, *args)


    def State(self, *args):
        """
        State(BRepClass_FClass2dOfFClassifier self) -> TopAbs_State

        Returns the current state of the point.

        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _BRepClass.BRepClass_FClass2dOfFClassifier_State(self, *args)


    def IsHeadOrEnd(self, *args):
        """
        IsHeadOrEnd(BRepClass_FClass2dOfFClassifier self) -> Standard_Boolean

        Returns the Standard_True if the closest intersection point
        represents head or end of the edge. Returns Standard_False
        otherwise.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepClass.BRepClass_FClass2dOfFClassifier_IsHeadOrEnd(self, *args)

    __swig_destroy__ = _BRepClass.delete_BRepClass_FClass2dOfFClassifier
BRepClass_FClass2dOfFClassifier_swigregister = _BRepClass.BRepClass_FClass2dOfFClassifier_swigregister
BRepClass_FClass2dOfFClassifier_swigregister(BRepClass_FClass2dOfFClassifier)

class BRepClass_Edge(object):
    """
    This class  is used to send  the  description of an
    Edge to the classifier. It  contains  an Edge and a
    Face. So the PCurve of the Edge can be found.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepClass_Edge self) -> BRepClass_Edge
        __init__(BRepClass_Edge self, TopoDS_Edge E, TopoDS_Face F) -> BRepClass_Edge

        :type E: OCC.wrapper.TopoDS.TopoDS_Edge
        :type F: OCC.wrapper.TopoDS.TopoDS_Face

        """
        this = _BRepClass.new_BRepClass_Edge(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Edge(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Edge

        """
        res = _BRepClass.BRepClass_Edge_Edge(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Face(self, *args):
        """
        :rtype: OCC.wrapper.TopoDS.TopoDS_Face

        """
        res = _BRepClass.BRepClass_Edge_Face(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _BRepClass.delete_BRepClass_Edge
BRepClass_Edge_swigregister = _BRepClass.BRepClass_Edge_swigregister
BRepClass_Edge_swigregister(BRepClass_Edge)

class BRepClass_FaceExplorer(object):
    """
    Provide an   exploration of a  BRep Face   for the
    classification. Return UV edges.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepClass_FaceExplorer self, TopoDS_Face F) -> BRepClass_FaceExplorer

        :type F: OCC.wrapper.TopoDS.TopoDS_Face

        """
        this = _BRepClass.new_BRepClass_FaceExplorer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def CheckPoint(self, *args):
        """
        CheckPoint(BRepClass_FaceExplorer self, gp_Pnt2d thePoint) -> Standard_Boolean

        Checks the point and change its coords if it is located too far
        from the bounding box of the face. New Coordinates of the point 
        will be on the line between the point and the center of the 
        bounding box. Returns True if point was not changed.

        :type thePoint: OCC.wrapper.gp.gp_Pnt2d
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepClass.BRepClass_FaceExplorer_CheckPoint(self, *args)


    def Reject(self, *args):
        """
        Reject(BRepClass_FaceExplorer self, gp_Pnt2d P) -> Standard_Boolean

        Should  return  True  if the  point  is  outside a
        bounding volume of the face.

        :type P: OCC.wrapper.gp.gp_Pnt2d
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepClass.BRepClass_FaceExplorer_Reject(self, *args)


    def Segment(self, *args):
        """
        Segment(BRepClass_FaceExplorer self, gp_Pnt2d P, gp_Lin2d L) -> Standard_Boolean

        Returns  in <L>, <Par>  a segment having at least
        one  intersection  with  the   face  boundary  to
        compute  intersections.

        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type L: OCC.wrapper.gp.gp_Lin2d
        :type Par: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepClass.BRepClass_FaceExplorer_Segment(self, *args)


    def OtherSegment(self, *args):
        """
        OtherSegment(BRepClass_FaceExplorer self, gp_Pnt2d P, gp_Lin2d L) -> Standard_Boolean

        Returns  in <L>, <Par>  a segment having at least
        one  intersection  with  the   face  boundary  to
        compute  intersections. Each call gives another segment.

        :type P: OCC.wrapper.gp.gp_Pnt2d
        :type L: OCC.wrapper.gp.gp_Lin2d
        :type Par: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepClass.BRepClass_FaceExplorer_OtherSegment(self, *args)


    def InitWires(self, *args):
        """
        InitWires(BRepClass_FaceExplorer self)

        Starts an exploration of the wires.


        """
        return _BRepClass.BRepClass_FaceExplorer_InitWires(self, *args)


    def MoreWires(self, *args):
        """
        MoreWires(BRepClass_FaceExplorer self) -> Standard_Boolean

        Returns True if there is  a current wire.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepClass.BRepClass_FaceExplorer_MoreWires(self, *args)


    def NextWire(self, *args):
        """
        NextWire(BRepClass_FaceExplorer self)

        Sets the explorer  to the  next  wire.


        """
        return _BRepClass.BRepClass_FaceExplorer_NextWire(self, *args)


    def RejectWire(self, *args):
        """
        RejectWire(BRepClass_FaceExplorer self, gp_Lin2d L, Standard_Real const Par) -> Standard_Boolean

        Returns True  if the wire  bounding volume does not
        intersect the segment.

        :type L: OCC.wrapper.gp.gp_Lin2d
        :type Par: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepClass.BRepClass_FaceExplorer_RejectWire(self, *args)


    def InitEdges(self, *args):
        """
        InitEdges(BRepClass_FaceExplorer self)

        Starts an exploration of the  edges of the current
        wire.


        """
        return _BRepClass.BRepClass_FaceExplorer_InitEdges(self, *args)


    def MoreEdges(self, *args):
        """
        MoreEdges(BRepClass_FaceExplorer self) -> Standard_Boolean

        Returns True if there is a current edge.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepClass.BRepClass_FaceExplorer_MoreEdges(self, *args)


    def NextEdge(self, *args):
        """
        NextEdge(BRepClass_FaceExplorer self)

        Sets the explorer  to the  next  edge.


        """
        return _BRepClass.BRepClass_FaceExplorer_NextEdge(self, *args)


    def RejectEdge(self, *args):
        """
        RejectEdge(BRepClass_FaceExplorer self, gp_Lin2d L, Standard_Real const Par) -> Standard_Boolean

        Returns True  if the edge  bounding volume does not
        intersect the segment.

        :type L: OCC.wrapper.gp.gp_Lin2d
        :type Par: float
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepClass.BRepClass_FaceExplorer_RejectEdge(self, *args)


    def CurrentEdge(self, *args):
        """
        CurrentEdge(BRepClass_FaceExplorer self, BRepClass_Edge E)

        Current edge in current wire and its orientation.

        :type E: OCC.wrapper.BRepClass.BRepClass_Edge
        :type Or: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _BRepClass.BRepClass_FaceExplorer_CurrentEdge(self, *args)

    __swig_destroy__ = _BRepClass.delete_BRepClass_FaceExplorer
BRepClass_FaceExplorer_swigregister = _BRepClass.BRepClass_FaceExplorer_swigregister
BRepClass_FaceExplorer_swigregister(BRepClass_FaceExplorer)

class BRepClass_Intersector(Geom2dInt.Geom2dInt_IntConicCurveOfGInter):
    """
    Intersect an Edge  with a segment.
    Implement the Intersector2d required by the classifier.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepClass_Intersector self) -> BRepClass_Intersector

        Intersect an Edge  with a segment.
        Implement the Intersector2d required by the classifier.
        """
        this = _BRepClass.new_BRepClass_Intersector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Perform(self, *args):
        """
        Perform(BRepClass_Intersector self, gp_Lin2d L, Standard_Real const P, Standard_Real const Tol, BRepClass_Edge E)

        Intersect the line segment and the edge.

        :type L: OCC.wrapper.gp.gp_Lin2d
        :type P: float
        :type Tol: float
        :type E: OCC.wrapper.BRepClass.BRepClass_Edge

        """
        return _BRepClass.BRepClass_Intersector_Perform(self, *args)


    def LocalGeometry(self, *args):
        """
        LocalGeometry(BRepClass_Intersector self, BRepClass_Edge E, Standard_Real const U, gp_Dir2d T, gp_Dir2d N)

        Returns in <T>,  <N> and <C>  the tangent,  normal
        and  curvature of the edge  <E> at parameter value
        <U>.

        :type E: OCC.wrapper.BRepClass.BRepClass_Edge
        :type U: float
        :type T: OCC.wrapper.gp.gp_Dir2d
        :type N: OCC.wrapper.gp.gp_Dir2d
        :type C: float

        """
        return _BRepClass.BRepClass_Intersector_LocalGeometry(self, *args)

    __swig_destroy__ = _BRepClass.delete_BRepClass_Intersector
BRepClass_Intersector_swigregister = _BRepClass.BRepClass_Intersector_swigregister
BRepClass_Intersector_swigregister(BRepClass_Intersector)

class BRepClass_FacePassiveClassifier(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(BRepClass_FacePassiveClassifier self) -> BRepClass_FacePassiveClassifier

        Creates an undefined classifier.


        """
        this = _BRepClass.new_BRepClass_FacePassiveClassifier(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Reset(self, *args):
        """
        Reset(BRepClass_FacePassiveClassifier self, gp_Lin2d L, Standard_Real const P, Standard_Real const Tol)

        Starts  a  classification process.   The  point to
        classify is the origin of  the  line <L>.  <P>  is
        the original length of the segment on <L>  used to
        compute  intersections.   <Tol> is the   tolerance
        attached to the line segment in intersections.

        :type L: OCC.wrapper.gp.gp_Lin2d
        :type P: float
        :type Tol: float

        """
        return _BRepClass.BRepClass_FacePassiveClassifier_Reset(self, *args)


    def Compare(self, *args):
        """
        Compare(BRepClass_FacePassiveClassifier self, BRepClass_Edge E, TopAbs_Orientation const Or)

        Updates  the classification process with  the edge
        <E> from the boundary.

        :type E: OCC.wrapper.BRepClass.BRepClass_Edge
        :type Or: OCC.wrapper.TopAbs.TopAbs_Orientation

        """
        return _BRepClass.BRepClass_FacePassiveClassifier_Compare(self, *args)


    def Parameter(self, *args):
        """
        Parameter(BRepClass_FacePassiveClassifier self) -> Standard_Real

        Returns the current value of the parameter.

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _BRepClass.BRepClass_FacePassiveClassifier_Parameter(self, *args)


    def Intersector(self, *args):
        """
        Intersector(BRepClass_FacePassiveClassifier self) -> BRepClass_Intersector

        Returns the intersecting algorithm.

        :rtype: OCC.wrapper.BRepClass.BRepClass_Intersector

        """
        return _BRepClass.BRepClass_FacePassiveClassifier_Intersector(self, *args)


    def ClosestIntersection(self, *args):
        """
        ClosestIntersection(BRepClass_FacePassiveClassifier self) -> Standard_Integer

        Returns  0  if  the   last  compared   edge had no
        relevant intersection.  Else returns  the index of
        this   intersection  in the    last   intersection
        algorithm.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _BRepClass.BRepClass_FacePassiveClassifier_ClosestIntersection(self, *args)


    def State(self, *args):
        """
        State(BRepClass_FacePassiveClassifier self) -> TopAbs_State

        Returns the current state of the point.

        :rtype: OCC.wrapper.TopAbs.TopAbs_State

        """
        return _BRepClass.BRepClass_FacePassiveClassifier_State(self, *args)


    def IsHeadOrEnd(self, *args):
        """
        IsHeadOrEnd(BRepClass_FacePassiveClassifier self) -> Standard_Boolean

        Returns the Standard_True if the closest intersection point
        represents head or end of the edge. Returns Standard_False
        otherwise.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _BRepClass.BRepClass_FacePassiveClassifier_IsHeadOrEnd(self, *args)

    __swig_destroy__ = _BRepClass.delete_BRepClass_FacePassiveClassifier
BRepClass_FacePassiveClassifier_swigregister = _BRepClass.BRepClass_FacePassiveClassifier_swigregister
BRepClass_FacePassiveClassifier_swigregister(BRepClass_FacePassiveClassifier)



