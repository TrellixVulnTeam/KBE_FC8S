# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_LProp')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_LProp')
    _LProp = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_LProp', [dirname(__file__)])
        except ImportError:
            import _LProp
            return _LProp
        try:
            _mod = imp.load_module('_LProp', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _LProp = swig_import_helper()
    del swig_import_helper
else:
    import _LProp
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LProp.delete_SwigPyIterator

    def value(self):
        return _LProp.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _LProp.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _LProp.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _LProp.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _LProp.SwigPyIterator_equal(self, x)

    def copy(self):
        return _LProp.SwigPyIterator_copy(self)

    def next(self):
        return _LProp.SwigPyIterator_next(self)

    def __next__(self):
        return _LProp.SwigPyIterator___next__(self)

    def previous(self):
        return _LProp.SwigPyIterator_previous(self)

    def advance(self, n):
        return _LProp.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _LProp.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _LProp.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _LProp.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _LProp.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _LProp.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _LProp.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _LProp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _LProp.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_LProp.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _LProp.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _LProp.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _LProp.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _LProp.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _LProp.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _LProp.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _LProp.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_LProp.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _LProp.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _LProp.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _LProp.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _LProp.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _LProp.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _LProp.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _LProp.ptr_to_number(item)
ptr_to_number = _LProp.ptr_to_number

def HashCode(*args):
    return _LProp.HashCode(*args)
HashCode = _LProp.HashCode

def ptr_equal(a, b):
    return _LProp.ptr_equal(a, b)
ptr_equal = _LProp.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import GeomAbs
else:
    import GeomAbs
del _swig_python_version_info
LProp_Inflection = _LProp.LProp_Inflection
LProp_MinCur = _LProp.LProp_MinCur
LProp_MaxCur = _LProp.LProp_MaxCur
LProp_Undecided = _LProp.LProp_Undecided
LProp_Undefined = _LProp.LProp_Undefined
LProp_Defined = _LProp.LProp_Defined
LProp_Computed = _LProp.LProp_Computed
class LProp_BadContinuity(Standard.Standard_Failure):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_LProp_BadContinuity
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_LProp_BadContinuity(self) 
            return h


    def __init__(self, *args):
        """
        __init__(LProp_BadContinuity self) -> LProp_BadContinuity
        __init__(LProp_BadContinuity self, Standard_CString const theMessage) -> LProp_BadContinuity

        :type theMessage: OCC.wrapper.Standard.Standard_CString

        """
        this = _LProp.new_LProp_BadContinuity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewInstance(*args):
        """
        NewInstance(Standard_CString const theMessage) -> Handle_LProp_BadContinuity

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.LProp.Handle_LProp_BadContinuity

        """
        return _LProp.LProp_BadContinuity_NewInstance(*args)

    NewInstance = staticmethod(NewInstance)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _LProp.LProp_BadContinuity_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _LProp.LProp_BadContinuity_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _LProp.LProp_BadContinuity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _LProp.delete_LProp_BadContinuity
LProp_BadContinuity_swigregister = _LProp.LProp_BadContinuity_swigregister
LProp_BadContinuity_swigregister(LProp_BadContinuity)

def LProp_BadContinuity_NewInstance(*args):
    """
    LProp_BadContinuity_NewInstance(Standard_CString const theMessage) -> Handle_LProp_BadContinuity

    :type theMessage: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.LProp.Handle_LProp_BadContinuity

    """
    return _LProp.LProp_BadContinuity_NewInstance(*args)

def LProp_BadContinuity_get_type_name(*args):
    """
    LProp_BadContinuity_get_type_name() -> char const *

    :rtype: const char *

    """
    return _LProp.LProp_BadContinuity_get_type_name(*args)

def LProp_BadContinuity_get_type_descriptor(*args):
    """
    LProp_BadContinuity_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _LProp.LProp_BadContinuity_get_type_descriptor(*args)

class LProp_NotDefined(Standard.Standard_Failure):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_LProp_NotDefined
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_LProp_NotDefined(self) 
            return h


    def __init__(self, *args):
        """
        __init__(LProp_NotDefined self) -> LProp_NotDefined
        __init__(LProp_NotDefined self, Standard_CString const theMessage) -> LProp_NotDefined

        :type theMessage: OCC.wrapper.Standard.Standard_CString

        """
        this = _LProp.new_LProp_NotDefined(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def NewInstance(*args):
        """
        NewInstance(Standard_CString const theMessage) -> Handle_LProp_NotDefined

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.LProp.Handle_LProp_NotDefined

        """
        return _LProp.LProp_NotDefined_NewInstance(*args)

    NewInstance = staticmethod(NewInstance)

    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _LProp.LProp_NotDefined_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _LProp.LProp_NotDefined_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _LProp.LProp_NotDefined_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _LProp.delete_LProp_NotDefined
LProp_NotDefined_swigregister = _LProp.LProp_NotDefined_swigregister
LProp_NotDefined_swigregister(LProp_NotDefined)

def LProp_NotDefined_NewInstance(*args):
    """
    LProp_NotDefined_NewInstance(Standard_CString const theMessage) -> Handle_LProp_NotDefined

    :type theMessage: OCC.wrapper.Standard.Standard_CString
    :rtype: OCC.wrapper.LProp.Handle_LProp_NotDefined

    """
    return _LProp.LProp_NotDefined_NewInstance(*args)

def LProp_NotDefined_get_type_name(*args):
    """
    LProp_NotDefined_get_type_name() -> char const *

    :rtype: const char *

    """
    return _LProp.LProp_NotDefined_get_type_name(*args)

def LProp_NotDefined_get_type_descriptor(*args):
    """
    LProp_NotDefined_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _LProp.LProp_NotDefined_get_type_descriptor(*args)

class Handle_LProp_BadContinuity(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_LProp_BadContinuity self)

        Nullify the handle


        """
        return _LProp.Handle_LProp_BadContinuity_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_LProp_BadContinuity self) -> bool

        Check for being null

        :rtype: bool

        """
        return _LProp.Handle_LProp_BadContinuity_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_LProp_BadContinuity self, LProp_BadContinuity thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _LProp.Handle_LProp_BadContinuity_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_LProp_BadContinuity self, Handle_LProp_BadContinuity theHandle) -> Handle_LProp_BadContinuity
        assign(Handle_LProp_BadContinuity self, LProp_BadContinuity thePtr) -> Handle_LProp_BadContinuity
        assign(Handle_LProp_BadContinuity self, Handle_LProp_BadContinuity theHandle) -> Handle_LProp_BadContinuity

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _LProp.Handle_LProp_BadContinuity_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_LProp_BadContinuity self) -> LProp_BadContinuity

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _LProp.Handle_LProp_BadContinuity_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_LProp_BadContinuity self) -> LProp_BadContinuity

        Member access operator (note non-const)

        :rtype: T *

        """
        return _LProp.Handle_LProp_BadContinuity___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_LProp_BadContinuity self) -> LProp_BadContinuity

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _LProp.Handle_LProp_BadContinuity___ref__(self, *args)


    def __hash__(self):
        return _LProp.Handle_LProp_BadContinuity___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _LProp.Handle_LProp_BadContinuity___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _LProp.new_Handle_LProp_BadContinuity(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_LProp.Handle_LProp_BadContinuity_DownCast)
    __swig_destroy__ = _LProp.delete_Handle_LProp_BadContinuity

    def NewInstance(self, *args):
        """
        NewInstance(Handle_LProp_BadContinuity self, Standard_CString const theMessage) -> Handle_LProp_BadContinuity

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.LProp.Handle_LProp_BadContinuity

        """
        return _LProp.Handle_LProp_BadContinuity_NewInstance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_LProp_BadContinuity self) -> char const *

        :rtype: const char *

        """
        return _LProp.Handle_LProp_BadContinuity_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _LProp.Handle_LProp_BadContinuity_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _LProp.Handle_LProp_BadContinuity_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Print(self, *args):
        """
        Print(Handle_LProp_BadContinuity self, Standard_OStream & s)

        Prints on the stream <s> the exception name followed by
        the error message.
        Level: Advanced
        Warning:
        The operator "OStream& operator<< (Standard_OStream&,
        Handle(Standard_Failure)&)"
        is implemented. (This operator uses the method Print)

        :type s: OCC.wrapper.Standard.Standard_OStream

        """
        return _LProp.Handle_LProp_BadContinuity_Print(self, *args)


    def GetMessageString(self, *args):
        """
        GetMessageString(Handle_LProp_BadContinuity self) -> Standard_CString

        Returns error message

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _LProp.Handle_LProp_BadContinuity_GetMessageString(self, *args)


    def SetMessageString(self, *args):
        """
        SetMessageString(Handle_LProp_BadContinuity self, Standard_CString const aMessage)

        Sets error message

        :type aMessage: OCC.wrapper.Standard.Standard_CString

        """
        return _LProp.Handle_LProp_BadContinuity_SetMessageString(self, *args)


    def Reraise(self, *args):
        """
        Reraise(Handle_LProp_BadContinuity self)
        Reraise(Handle_LProp_BadContinuity self, Standard_CString const aMessage)
        Reraise(Handle_LProp_BadContinuity self, Standard_SStream const & aReason)

        Reraises a caught exception and changes its error message.

        :type aReason: OCC.wrapper.Standard.Standard_SStream

        """
        return _LProp.Handle_LProp_BadContinuity_Reraise(self, *args)


    def Jump(self, *args):
        """
        Jump(Handle_LProp_BadContinuity self)

        Used to throw CASCADE exception from C signal handler.
        On platforms that do not allow throwing C++ exceptions
        from this handler (e.g. Linux), uses longjump to get to
        the current active signal handler, and only then is
        converted to C++ exception.


        """
        return _LProp.Handle_LProp_BadContinuity_Jump(self, *args)


    def Caught(self, *args):
        """
        Caught(Handle_LProp_BadContinuity self) -> Handle_Standard_Failure

        Returns the last caught exception.
        Needed when exceptions are emulated by C longjumps,
        in other cases is also provided for compatibility.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Failure

        """
        return _LProp.Handle_LProp_BadContinuity_Caught(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_LProp_BadContinuity self)

        Memory deallocator for transient classes


        """
        return _LProp.Handle_LProp_BadContinuity_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_LProp_BadContinuity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_LProp_BadContinuity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _LProp.Handle_LProp_BadContinuity_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_LProp_BadContinuity self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_LProp_BadContinuity self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _LProp.Handle_LProp_BadContinuity_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_LProp_BadContinuity self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _LProp.Handle_LProp_BadContinuity_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_LProp_BadContinuity self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _LProp.Handle_LProp_BadContinuity_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_LProp_BadContinuity self)

        Increments the reference counter of this object


        """
        return _LProp.Handle_LProp_BadContinuity_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_LProp_BadContinuity self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _LProp.Handle_LProp_BadContinuity_DecrementRefCounter(self, *args)

Handle_LProp_BadContinuity_swigregister = _LProp.Handle_LProp_BadContinuity_swigregister
Handle_LProp_BadContinuity_swigregister(Handle_LProp_BadContinuity)

def Handle_LProp_BadContinuity_DownCast(thing):
    return _LProp.Handle_LProp_BadContinuity_DownCast(thing)
Handle_LProp_BadContinuity_DownCast = _LProp.Handle_LProp_BadContinuity_DownCast

class Handle_LProp_NotDefined(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_LProp_NotDefined self)

        Nullify the handle


        """
        return _LProp.Handle_LProp_NotDefined_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_LProp_NotDefined self) -> bool

        Check for being null

        :rtype: bool

        """
        return _LProp.Handle_LProp_NotDefined_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_LProp_NotDefined self, LProp_NotDefined thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _LProp.Handle_LProp_NotDefined_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_LProp_NotDefined self, Handle_LProp_NotDefined theHandle) -> Handle_LProp_NotDefined
        assign(Handle_LProp_NotDefined self, LProp_NotDefined thePtr) -> Handle_LProp_NotDefined
        assign(Handle_LProp_NotDefined self, Handle_LProp_NotDefined theHandle) -> Handle_LProp_NotDefined

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _LProp.Handle_LProp_NotDefined_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_LProp_NotDefined self) -> LProp_NotDefined

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _LProp.Handle_LProp_NotDefined_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_LProp_NotDefined self) -> LProp_NotDefined

        Member access operator (note non-const)

        :rtype: T *

        """
        return _LProp.Handle_LProp_NotDefined___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_LProp_NotDefined self) -> LProp_NotDefined

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _LProp.Handle_LProp_NotDefined___ref__(self, *args)


    def __hash__(self):
        return _LProp.Handle_LProp_NotDefined___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _LProp.Handle_LProp_NotDefined___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _LProp.new_Handle_LProp_NotDefined(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_LProp.Handle_LProp_NotDefined_DownCast)
    __swig_destroy__ = _LProp.delete_Handle_LProp_NotDefined

    def NewInstance(self, *args):
        """
        NewInstance(Handle_LProp_NotDefined self, Standard_CString const theMessage) -> Handle_LProp_NotDefined

        :type theMessage: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.LProp.Handle_LProp_NotDefined

        """
        return _LProp.Handle_LProp_NotDefined_NewInstance(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_LProp_NotDefined self) -> char const *

        :rtype: const char *

        """
        return _LProp.Handle_LProp_NotDefined_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _LProp.Handle_LProp_NotDefined_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _LProp.Handle_LProp_NotDefined_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Print(self, *args):
        """
        Print(Handle_LProp_NotDefined self, Standard_OStream & s)

        Prints on the stream <s> the exception name followed by
        the error message.
        Level: Advanced
        Warning:
        The operator "OStream& operator<< (Standard_OStream&,
        Handle(Standard_Failure)&)"
        is implemented. (This operator uses the method Print)

        :type s: OCC.wrapper.Standard.Standard_OStream

        """
        return _LProp.Handle_LProp_NotDefined_Print(self, *args)


    def GetMessageString(self, *args):
        """
        GetMessageString(Handle_LProp_NotDefined self) -> Standard_CString

        Returns error message

        :rtype: OCC.wrapper.Standard.Standard_CString

        """
        return _LProp.Handle_LProp_NotDefined_GetMessageString(self, *args)


    def SetMessageString(self, *args):
        """
        SetMessageString(Handle_LProp_NotDefined self, Standard_CString const aMessage)

        Sets error message

        :type aMessage: OCC.wrapper.Standard.Standard_CString

        """
        return _LProp.Handle_LProp_NotDefined_SetMessageString(self, *args)


    def Reraise(self, *args):
        """
        Reraise(Handle_LProp_NotDefined self)
        Reraise(Handle_LProp_NotDefined self, Standard_CString const aMessage)
        Reraise(Handle_LProp_NotDefined self, Standard_SStream const & aReason)

        Reraises a caught exception and changes its error message.

        :type aReason: OCC.wrapper.Standard.Standard_SStream

        """
        return _LProp.Handle_LProp_NotDefined_Reraise(self, *args)


    def Jump(self, *args):
        """
        Jump(Handle_LProp_NotDefined self)

        Used to throw CASCADE exception from C signal handler.
        On platforms that do not allow throwing C++ exceptions
        from this handler (e.g. Linux), uses longjump to get to
        the current active signal handler, and only then is
        converted to C++ exception.


        """
        return _LProp.Handle_LProp_NotDefined_Jump(self, *args)


    def Caught(self, *args):
        """
        Caught(Handle_LProp_NotDefined self) -> Handle_Standard_Failure

        Returns the last caught exception.
        Needed when exceptions are emulated by C longjumps,
        in other cases is also provided for compatibility.

        :rtype: OCC.wrapper.Standard.Handle_Standard_Failure

        """
        return _LProp.Handle_LProp_NotDefined_Caught(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_LProp_NotDefined self)

        Memory deallocator for transient classes


        """
        return _LProp.Handle_LProp_NotDefined_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_LProp_NotDefined self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_LProp_NotDefined self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _LProp.Handle_LProp_NotDefined_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_LProp_NotDefined self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_LProp_NotDefined self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _LProp.Handle_LProp_NotDefined_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_LProp_NotDefined self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _LProp.Handle_LProp_NotDefined_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_LProp_NotDefined self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _LProp.Handle_LProp_NotDefined_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_LProp_NotDefined self)

        Increments the reference counter of this object


        """
        return _LProp.Handle_LProp_NotDefined_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_LProp_NotDefined self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _LProp.Handle_LProp_NotDefined_DecrementRefCounter(self, *args)

Handle_LProp_NotDefined_swigregister = _LProp.Handle_LProp_NotDefined_swigregister
Handle_LProp_NotDefined_swigregister(Handle_LProp_NotDefined)

def Handle_LProp_NotDefined_DownCast(thing):
    return _LProp.Handle_LProp_NotDefined_DownCast(thing)
Handle_LProp_NotDefined_DownCast = _LProp.Handle_LProp_NotDefined_DownCast

class LProp_CurAndInf(object):
    """
    Stores the parameters of a curve 2d or 3d corresponding
    to the curvature's extremas and the Inflection's Points.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(LProp_CurAndInf self) -> LProp_CurAndInf

        Stores the parameters of a curve 2d or 3d corresponding
        to the curvature's extremas and the Inflection's Points.
        """
        this = _LProp.new_LProp_CurAndInf(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def AddInflection(self, *args):
        """
        AddInflection(LProp_CurAndInf self, Standard_Real const Param)

        :type Param: float

        """
        return _LProp.LProp_CurAndInf_AddInflection(self, *args)


    def AddExtCur(self, *args):
        """
        AddExtCur(LProp_CurAndInf self, Standard_Real const Param, Standard_Boolean const IsMin)

        :type Param: float
        :type IsMin: bool

        """
        return _LProp.LProp_CurAndInf_AddExtCur(self, *args)


    def Clear(self, *args):
        """Clear(LProp_CurAndInf self)"""
        return _LProp.LProp_CurAndInf_Clear(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(LProp_CurAndInf self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _LProp.LProp_CurAndInf_IsEmpty(self, *args)


    def NbPoints(self, *args):
        """
        NbPoints(LProp_CurAndInf self) -> Standard_Integer

        Returns the number of points.
        The Points are stored to increasing parameter.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _LProp.LProp_CurAndInf_NbPoints(self, *args)


    def Parameter(self, *args):
        """
        Parameter(LProp_CurAndInf self, Standard_Integer const N) -> Standard_Real

        Returns the parameter of the Nth point.
        raises if N not in the range [1,NbPoints()]

        :type N: int
        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _LProp.LProp_CurAndInf_Parameter(self, *args)


    def Type(self, *args):
        """
        Type(LProp_CurAndInf self, Standard_Integer const N) -> LProp_CIType

        Returns
        - MinCur if the Nth parameter corresponds to
        a minimum of the radius of curvature.
        - MaxCur if the Nth parameter corresponds to
        a maximum of the radius of curvature.
        - Inflection if the parameter corresponds to
        a point of inflection.
        raises if N not in the range [1,NbPoints()]

        :type N: int
        :rtype: OCC.wrapper.LProp.LProp_CIType

        """
        return _LProp.LProp_CurAndInf_Type(self, *args)

    __swig_destroy__ = _LProp.delete_LProp_CurAndInf
LProp_CurAndInf_swigregister = _LProp.LProp_CurAndInf_swigregister
LProp_CurAndInf_swigregister(LProp_CurAndInf)

class NCollection_Sequence_LProp_CIType(NCollection.NCollection_BaseSequence):
    """
    Purpose:     Definition of a sequence of elements indexed by
    an Integer in range of 1..n
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Sequence_LProp_CIType self) -> NCollection_Sequence< LProp_CIType >::iterator

        Returns an iterator pointing to the first element in the sequence.

        :rtype: iterator

        """
        return _LProp.NCollection_Sequence_LProp_CIType_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Sequence_LProp_CIType self) -> NCollection_Sequence< LProp_CIType >::iterator

        Returns an iterator referring to the past-the-end element in the sequence.

        :rtype: iterator

        """
        return _LProp.NCollection_Sequence_LProp_CIType_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Sequence_LProp_CIType self) -> NCollection_Sequence< LProp_CIType >::const_iterator

        Returns a const iterator pointing to the first element in the sequence.

        :rtype: const_iterator

        """
        return _LProp.NCollection_Sequence_LProp_CIType_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Sequence_LProp_CIType self) -> NCollection_Sequence< LProp_CIType >::const_iterator

        Returns a const iterator referring to the past-the-end element in the sequence.

        :rtype: const_iterator

        """
        return _LProp.NCollection_Sequence_LProp_CIType_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     Definition of a sequence of elements indexed by
        an Integer in range of 1..n
        """
        this = _LProp.new_NCollection_Sequence_LProp_CIType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Size(self, *args):
        """
        Size(NCollection_Sequence_LProp_CIType self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _LProp.NCollection_Sequence_LProp_CIType_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Sequence_LProp_CIType self) -> Standard_Integer

        Number of items

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _LProp.NCollection_Sequence_LProp_CIType_Length(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Sequence_LProp_CIType self) -> Standard_Integer

        Method for consistency with other collections.
        @return Lower bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _LProp.NCollection_Sequence_LProp_CIType_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Sequence_LProp_CIType self) -> Standard_Integer

        Method for consistency with other collections.
        @return Upper bound (inclusive) for iteration.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _LProp.NCollection_Sequence_LProp_CIType_Upper(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Sequence_LProp_CIType self) -> Standard_Boolean

        Empty query

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _LProp.NCollection_Sequence_LProp_CIType_IsEmpty(self, *args)


    def Reverse(self, *args):
        """
        Reverse(NCollection_Sequence_LProp_CIType self)

        Reverse sequence


        """
        return _LProp.NCollection_Sequence_LProp_CIType_Reverse(self, *args)


    def Exchange(self, *args):
        """
        Exchange(NCollection_Sequence_LProp_CIType self, Standard_Integer const I, Standard_Integer const J)

        Exchange two members

        :type I: int
        :type J: int

        """
        return _LProp.NCollection_Sequence_LProp_CIType_Exchange(self, *args)


    def delNode(*args):
        """
        delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

        Static deleter to be passed to BaseSequence

        :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
        :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _LProp.NCollection_Sequence_LProp_CIType_delNode(*args)

    delNode = staticmethod(delNode)

    def Clear(self, *args):
        """
        Clear(NCollection_Sequence_LProp_CIType self, Handle_NCollection_BaseAllocator theAllocator=0)

        Clear the items out, take a new allocator if non null

        :type theAllocator: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

        """
        return _LProp.NCollection_Sequence_LProp_CIType_Clear(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Sequence_LProp_CIType self, NCollection_Sequence_LProp_CIType theOther) -> NCollection_Sequence_LProp_CIType

        Replace this sequence by the items of theOther.
        This method does not change the internal allocator.

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _LProp.NCollection_Sequence_LProp_CIType_Assign(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Sequence_LProp_CIType self, NCollection_Sequence_LProp_CIType theOther) -> NCollection_Sequence_LProp_CIType

        Replacement operator

        :type theOther: OCC.wrapper.NCollection.NCollection_Sequence
        :rtype: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _LProp.NCollection_Sequence_LProp_CIType_assign(self, *args)


    def Remove(self, *args):
        """
        Remove(NCollection_Sequence_LProp_CIType self, NCollection_Sequence< LProp_CIType >::Iterator & thePosition)
        Remove(NCollection_Sequence_LProp_CIType self, Standard_Integer const theIndex)
        Remove(NCollection_Sequence_LProp_CIType self, Standard_Integer const theFromIndex, Standard_Integer const theToIndex)

        Remove range of items

        :type theFromIndex: int
        :type theToIndex: int

        """
        return _LProp.NCollection_Sequence_LProp_CIType_Remove(self, *args)


    def Append(self, *args):
        """
        Append(NCollection_Sequence_LProp_CIType self, LProp_CIType const & theItem)
        Append(NCollection_Sequence_LProp_CIType self, NCollection_Sequence_LProp_CIType theSeq)

        Append another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _LProp.NCollection_Sequence_LProp_CIType_Append(self, *args)


    def Prepend(self, *args):
        """
        Prepend(NCollection_Sequence_LProp_CIType self, LProp_CIType const & theItem)
        Prepend(NCollection_Sequence_LProp_CIType self, NCollection_Sequence_LProp_CIType theSeq)

        Prepend another sequence (making it empty)

        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _LProp.NCollection_Sequence_LProp_CIType_Prepend(self, *args)


    def InsertBefore(self, *args):
        """
        InsertBefore(NCollection_Sequence_LProp_CIType self, Standard_Integer const theIndex, LProp_CIType const & theItem)
        InsertBefore(NCollection_Sequence_LProp_CIType self, Standard_Integer const theIndex, NCollection_Sequence_LProp_CIType theSeq)

        InsertBefore theIndex another sequence

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _LProp.NCollection_Sequence_LProp_CIType_InsertBefore(self, *args)


    def InsertAfter(self, *args):
        """
        InsertAfter(NCollection_Sequence_LProp_CIType self, NCollection_Sequence< LProp_CIType >::Iterator & thePosition, LProp_CIType const & theItem)
        InsertAfter(NCollection_Sequence_LProp_CIType self, Standard_Integer const theIndex, NCollection_Sequence_LProp_CIType theSeq)
        InsertAfter(NCollection_Sequence_LProp_CIType self, Standard_Integer const theIndex, LProp_CIType const & theItem)

        InsertAfter theIndex another sequence

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _LProp.NCollection_Sequence_LProp_CIType_InsertAfter(self, *args)


    def Split(self, *args):
        """
        Split(NCollection_Sequence_LProp_CIType self, Standard_Integer const theIndex, NCollection_Sequence_LProp_CIType theSeq)

        Split in two sequences

        :type theIndex: int
        :type theSeq: OCC.wrapper.NCollection.NCollection_Sequence

        """
        return _LProp.NCollection_Sequence_LProp_CIType_Split(self, *args)


    def First(self, *args):
        """
        First item access

        :rtype: const TheItemType &

        """
        res = _LProp.NCollection_Sequence_LProp_CIType_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Sequence_LProp_CIType self) -> LProp_CIType &

        First item access

        :rtype: TheItemType &

        """
        return _LProp.NCollection_Sequence_LProp_CIType_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        Last item access

        :rtype: const TheItemType &

        """
        res = _LProp.NCollection_Sequence_LProp_CIType_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Sequence_LProp_CIType self) -> LProp_CIType &

        Last item access

        :rtype: TheItemType &

        """
        return _LProp.NCollection_Sequence_LProp_CIType_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant item access by theIndex

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _LProp.NCollection_Sequence_LProp_CIType_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Sequence_LProp_CIType self, Standard_Integer const theIndex) -> LProp_CIType &

        Variable item access by theIndex

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _LProp.NCollection_Sequence_LProp_CIType_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        Constant operator()

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _LProp.NCollection_Sequence_LProp_CIType___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Sequence_LProp_CIType self, Standard_Integer const theIndex, LProp_CIType const & theItem)

        Set item value by theIndex

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _LProp.NCollection_Sequence_LProp_CIType_SetValue(self, *args)


    def __iter__(self):
        return _LProp.NCollection_Sequence_LProp_CIType___iter__(self)
    __swig_destroy__ = _LProp.delete_NCollection_Sequence_LProp_CIType
NCollection_Sequence_LProp_CIType_swigregister = _LProp.NCollection_Sequence_LProp_CIType_swigregister
NCollection_Sequence_LProp_CIType_swigregister(NCollection_Sequence_LProp_CIType)

def NCollection_Sequence_LProp_CIType_delNode(*args):
    """
    NCollection_Sequence_LProp_CIType_delNode(NCollection_SeqNode theNode, Handle_NCollection_BaseAllocator theAl)

    Static deleter to be passed to BaseSequence

    :type theNode: OCC.wrapper.NCollection.NCollection_SeqNode
    :type theAl: OCC.wrapper.NCollection.Handle_NCollection_BaseAllocator

    """
    return _LProp.NCollection_Sequence_LProp_CIType_delNode(*args)

class NCollection_Sequence_LProp_CIType_IteratorHelper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, item):
        this = _LProp.new_NCollection_Sequence_LProp_CIType_IteratorHelper(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _LProp.delete_NCollection_Sequence_LProp_CIType_IteratorHelper

    def __next__(self):
        return _LProp.NCollection_Sequence_LProp_CIType_IteratorHelper___next__(self)
NCollection_Sequence_LProp_CIType_IteratorHelper_swigregister = _LProp.NCollection_Sequence_LProp_CIType_IteratorHelper_swigregister
NCollection_Sequence_LProp_CIType_IteratorHelper_swigregister(NCollection_Sequence_LProp_CIType_IteratorHelper)


try:
	LProp_SequenceOfCIType = NCollection_Sequence_LProp_CIType
except NameError:
	pass # does not exist, probably ignored

class LProp_AnalyticCurInf(object):
    """
    Computes the locals extremas of curvature of a gp curve
    Remark : a gp curve has not inflection.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(LProp_AnalyticCurInf self) -> LProp_AnalyticCurInf

        Computes the locals extremas of curvature of a gp curve
        Remark : a gp curve has not inflection.
        """
        this = _LProp.new_LProp_AnalyticCurInf(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Perform(self, *args):
        """
        Perform(LProp_AnalyticCurInf self, GeomAbs_CurveType const T, Standard_Real const UFirst, Standard_Real const ULast, LProp_CurAndInf Result)

        :type T: OCC.wrapper.GeomAbs.GeomAbs_CurveType
        :type UFirst: float
        :type ULast: float
        :type Result: OCC.wrapper.LProp.LProp_CurAndInf

        """
        return _LProp.LProp_AnalyticCurInf_Perform(self, *args)

    __swig_destroy__ = _LProp.delete_LProp_AnalyticCurInf
LProp_AnalyticCurInf_swigregister = _LProp.LProp_AnalyticCurInf_swigregister
LProp_AnalyticCurInf_swigregister(LProp_AnalyticCurInf)



