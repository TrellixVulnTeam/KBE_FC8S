# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TDataXtd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TDataXtd')
    _TDataXtd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TDataXtd', [dirname(__file__)])
        except ImportError:
            import _TDataXtd
            return _TDataXtd
        try:
            _mod = imp.load_module('_TDataXtd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TDataXtd = swig_import_helper()
    del swig_import_helper
else:
    import _TDataXtd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TDataXtd.delete_SwigPyIterator

    def value(self):
        return _TDataXtd.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TDataXtd.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TDataXtd.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TDataXtd.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TDataXtd.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TDataXtd.SwigPyIterator_copy(self)

    def next(self):
        return _TDataXtd.SwigPyIterator_next(self)

    def __next__(self):
        return _TDataXtd.SwigPyIterator___next__(self)

    def previous(self):
        return _TDataXtd.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TDataXtd.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TDataXtd.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TDataXtd.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TDataXtd.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TDataXtd.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TDataXtd.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TDataXtd.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _TDataXtd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class NCollection_CellFilter_InspectorXYZ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TDataXtd.NCollection_CellFilter_InspectorXYZ_Dimension
    Coord = staticmethod(_TDataXtd.NCollection_CellFilter_InspectorXYZ_Coord)

    def Shift(self, thePnt, theTol):
        return _TDataXtd.NCollection_CellFilter_InspectorXYZ_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TDataXtd.new_NCollection_CellFilter_InspectorXYZ()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TDataXtd.delete_NCollection_CellFilter_InspectorXYZ
NCollection_CellFilter_InspectorXYZ_swigregister = _TDataXtd.NCollection_CellFilter_InspectorXYZ_swigregister
NCollection_CellFilter_InspectorXYZ_swigregister(NCollection_CellFilter_InspectorXYZ)

def NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt):
    return _TDataXtd.NCollection_CellFilter_InspectorXYZ_Coord(i, thePnt)
NCollection_CellFilter_InspectorXYZ_Coord = _TDataXtd.NCollection_CellFilter_InspectorXYZ_Coord

class NCollection_CellFilter_InspectorXY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _TDataXtd.NCollection_CellFilter_InspectorXY_Dimension
    Coord = staticmethod(_TDataXtd.NCollection_CellFilter_InspectorXY_Coord)

    def Shift(self, thePnt, theTol):
        return _TDataXtd.NCollection_CellFilter_InspectorXY_Shift(self, thePnt, theTol)

    def __init__(self):
        this = _TDataXtd.new_NCollection_CellFilter_InspectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TDataXtd.delete_NCollection_CellFilter_InspectorXY
NCollection_CellFilter_InspectorXY_swigregister = _TDataXtd.NCollection_CellFilter_InspectorXY_swigregister
NCollection_CellFilter_InspectorXY_swigregister(NCollection_CellFilter_InspectorXY)

def NCollection_CellFilter_InspectorXY_Coord(i, thePnt):
    return _TDataXtd.NCollection_CellFilter_InspectorXY_Coord(i, thePnt)
NCollection_CellFilter_InspectorXY_Coord = _TDataXtd.NCollection_CellFilter_InspectorXY_Coord


def ptr_to_number(item):
    return _TDataXtd.ptr_to_number(item)
ptr_to_number = _TDataXtd.ptr_to_number

def HashCode(*args):
    return _TDataXtd.HashCode(*args)
HashCode = _TDataXtd.HashCode

def ptr_equal(a, b):
    return _TDataXtd.ptr_equal(a, b)
ptr_equal = _TDataXtd.ptr_equal
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TShort
else:
    import TShort
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import NCollection
else:
    import NCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Standard
else:
    import Standard
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import gp
else:
    import gp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColStd
else:
    import TColStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TCollection
else:
    import TCollection
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDF
else:
    import TDF
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Poly
else:
    import Poly
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TColgp
else:
    import TColgp
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TNaming
else:
    import TNaming
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopAbs
else:
    import TopAbs
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopLoc
else:
    import TopLoc
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopoDS
else:
    import TopoDS
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Message
else:
    import Message
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TopTools
else:
    import TopTools
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Bnd
else:
    import Bnd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import TDataStd
else:
    import TDataStd
del _swig_python_version_info
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    from . import Quantity
else:
    import Quantity
del _swig_python_version_info
TDataXtd_ANY_GEOM = _TDataXtd.TDataXtd_ANY_GEOM
TDataXtd_POINT = _TDataXtd.TDataXtd_POINT
TDataXtd_LINE = _TDataXtd.TDataXtd_LINE
TDataXtd_CIRCLE = _TDataXtd.TDataXtd_CIRCLE
TDataXtd_ELLIPSE = _TDataXtd.TDataXtd_ELLIPSE
TDataXtd_SPLINE = _TDataXtd.TDataXtd_SPLINE
TDataXtd_PLANE = _TDataXtd.TDataXtd_PLANE
TDataXtd_CYLINDER = _TDataXtd.TDataXtd_CYLINDER
TDataXtd_RADIUS = _TDataXtd.TDataXtd_RADIUS
TDataXtd_DIAMETER = _TDataXtd.TDataXtd_DIAMETER
TDataXtd_MINOR_RADIUS = _TDataXtd.TDataXtd_MINOR_RADIUS
TDataXtd_MAJOR_RADIUS = _TDataXtd.TDataXtd_MAJOR_RADIUS
TDataXtd_TANGENT = _TDataXtd.TDataXtd_TANGENT
TDataXtd_PARALLEL = _TDataXtd.TDataXtd_PARALLEL
TDataXtd_PERPENDICULAR = _TDataXtd.TDataXtd_PERPENDICULAR
TDataXtd_CONCENTRIC = _TDataXtd.TDataXtd_CONCENTRIC
TDataXtd_COINCIDENT = _TDataXtd.TDataXtd_COINCIDENT
TDataXtd_DISTANCE = _TDataXtd.TDataXtd_DISTANCE
TDataXtd_ANGLE = _TDataXtd.TDataXtd_ANGLE
TDataXtd_EQUAL_RADIUS = _TDataXtd.TDataXtd_EQUAL_RADIUS
TDataXtd_SYMMETRY = _TDataXtd.TDataXtd_SYMMETRY
TDataXtd_MIDPOINT = _TDataXtd.TDataXtd_MIDPOINT
TDataXtd_EQUAL_DISTANCE = _TDataXtd.TDataXtd_EQUAL_DISTANCE
TDataXtd_FIX = _TDataXtd.TDataXtd_FIX
TDataXtd_RIGID = _TDataXtd.TDataXtd_RIGID
TDataXtd_FROM = _TDataXtd.TDataXtd_FROM
TDataXtd_AXIS = _TDataXtd.TDataXtd_AXIS
TDataXtd_MATE = _TDataXtd.TDataXtd_MATE
TDataXtd_ALIGN_FACES = _TDataXtd.TDataXtd_ALIGN_FACES
TDataXtd_ALIGN_AXES = _TDataXtd.TDataXtd_ALIGN_AXES
TDataXtd_AXES_ANGLE = _TDataXtd.TDataXtd_AXES_ANGLE
TDataXtd_FACES_ANGLE = _TDataXtd.TDataXtd_FACES_ANGLE
TDataXtd_ROUND = _TDataXtd.TDataXtd_ROUND
TDataXtd_OFFSET = _TDataXtd.TDataXtd_OFFSET
class TDataXtd_Constraint(TDF.TDF_Attribute):
    """
    The groundwork to define constraint attributes.
    The constraint attribute contains the following sorts of data:
    -   Type whether the constraint attribute is a
    geometric constraint or a dimension
    -   Value the real number value of a numeric
    constraint such as an angle or a radius
    -   Geometries to identify the geometries
    underlying the topological attributes which
    define the constraint (up to 4)
    -   Plane for 2D constraints.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TDataXtd_Constraint
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TDataXtd_Constraint(self) 
            return h


    def GetID(*args):
        """
        GetID() -> Standard_GUID

        Returns the GUID for constraints.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _TDataXtd.TDataXtd_Constraint_GetID(*args)

    GetID = staticmethod(GetID)

    def __init__(self, *args):
        """
        __init__(TDataXtd_Constraint self) -> TDataXtd_Constraint

        The groundwork to define constraint attributes.
        The constraint attribute contains the following sorts of data:
        -   Type whether the constraint attribute is a
        geometric constraint or a dimension
        -   Value the real number value of a numeric
        constraint such as an angle or a radius
        -   Geometries to identify the geometries
        underlying the topological attributes which
        define the constraint (up to 4)
        -   Plane for 2D constraints.
        """
        this = _TDataXtd.new_TDataXtd_Constraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(self, *args):
        """
        Set(TDataXtd_Constraint self, TDF_Label label) -> Handle_TDataXtd_Constraint
        Set(TDataXtd_Constraint self, TDataXtd_ConstraintEnum const type, Handle_TNaming_NamedShape G1)
        Set(TDataXtd_Constraint self, TDataXtd_ConstraintEnum const type, Handle_TNaming_NamedShape G1, Handle_TNaming_NamedShape G2)
        Set(TDataXtd_Constraint self, TDataXtd_ConstraintEnum const type, Handle_TNaming_NamedShape G1, Handle_TNaming_NamedShape G2, Handle_TNaming_NamedShape G3)
        Set(TDataXtd_Constraint self, TDataXtd_ConstraintEnum const type, Handle_TNaming_NamedShape G1, Handle_TNaming_NamedShape G2, Handle_TNaming_NamedShape G3, Handle_TNaming_NamedShape G4)

        Finds or creates the constraint attribute defined
        by the topological attributes G1, G2, G3 and G4,
        and by the constraint type type.
        methods to read constraint fields
        =================================

        :type type: OCC.wrapper.TDataXtd.TDataXtd_ConstraintEnum
        :type G1: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
        :type G2: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
        :type G3: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
        :type G4: OCC.wrapper.TNaming.Handle_TNaming_NamedShape

        """
        return _TDataXtd.TDataXtd_Constraint_Set(self, *args)


    def GetType(self, *args):
        """
        GetType(TDataXtd_Constraint self) -> TDataXtd_ConstraintEnum

        Returns the type of constraint.
        This will be an element of the
        TDataXtd_ConstraintEnum enumeration.

        :rtype: OCC.wrapper.TDataXtd.TDataXtd_ConstraintEnum

        """
        return _TDataXtd.TDataXtd_Constraint_GetType(self, *args)


    def IsPlanar(self, *args):
        """
        IsPlanar(TDataXtd_Constraint self) -> Standard_Boolean

        Returns true if this constraint attribute is
        two-dimensional.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.TDataXtd_Constraint_IsPlanar(self, *args)


    def GetPlane(self, *args):
        """
        Returns the topological attribute of the plane
        used for planar - i.e., 2D - constraints.
        This plane is attached to another label.
        If the constraint is not planar, in other words, 3D,
        this function will return a null handle.

        :rtype: OCC.wrapper.TNaming.Handle_TNaming_NamedShape

        """
        res = _TDataXtd.TDataXtd_Constraint_GetPlane(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsDimension(self, *args):
        """
        IsDimension(TDataXtd_Constraint self) -> Standard_Boolean

        Returns true if this constraint attribute is a
        dimension, and therefore has a value.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.TDataXtd_Constraint_IsDimension(self, *args)


    def GetValue(self, *args):
        """
        Returns the value of a dimension.
        This value is a reference to a TDataStd_Real attribute.
        If the attribute is not a dimension, this value will
        be 0. Use IsDimension to test this condition.

        :rtype: OCC.wrapper.TDataStd.Handle_TDataStd_Real

        """
        res = _TDataXtd.TDataXtd_Constraint_GetValue(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NbGeometries(self, *args):
        """
        NbGeometries(TDataXtd_Constraint self) -> Standard_Integer

        Returns the number of geometry attributes in this constraint attribute.
        This number will be between 1 and 4.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.TDataXtd_Constraint_NbGeometries(self, *args)


    def GetGeometry(self, *args):
        """
        GetGeometry(TDataXtd_Constraint self, Standard_Integer const Index) -> Handle_TNaming_NamedShape

        Returns the integer index Index used to access
        the array of the constraint or stored geometries of a dimension
        Index has a value between 1 and 4.
        methods to write constraint fields (use builder)
        ==================================

        :type Index: int
        :rtype: OCC.wrapper.TNaming.Handle_TNaming_NamedShape

        """
        return _TDataXtd.TDataXtd_Constraint_GetGeometry(self, *args)


    def ClearGeometries(self, *args):
        """
        ClearGeometries(TDataXtd_Constraint self)

        Removes the geometries involved in the
        constraint or dimension from the array of
        topological attributes where they are stored.


        """
        return _TDataXtd.TDataXtd_Constraint_ClearGeometries(self, *args)


    def SetType(self, *args):
        """
        SetType(TDataXtd_Constraint self, TDataXtd_ConstraintEnum const CTR)

        Finds or creates the type of constraint CTR.

        :type CTR: OCC.wrapper.TDataXtd.TDataXtd_ConstraintEnum

        """
        return _TDataXtd.TDataXtd_Constraint_SetType(self, *args)


    def SetPlane(self, *args):
        """
        SetPlane(TDataXtd_Constraint self, Handle_TNaming_NamedShape plane)

        Finds or creates the plane of the 2D constraint
        attribute, defined by the planar topological attribute plane.

        :type plane: OCC.wrapper.TNaming.Handle_TNaming_NamedShape

        """
        return _TDataXtd.TDataXtd_Constraint_SetPlane(self, *args)


    def SetValue(self, *args):
        """
        SetValue(TDataXtd_Constraint self, Handle_TDataStd_Real V)

        Finds or creates the real number value V of the dimension constraint attribute.

        :type V: OCC.wrapper.TDataStd.Handle_TDataStd_Real

        """
        return _TDataXtd.TDataXtd_Constraint_SetValue(self, *args)


    def SetGeometry(self, *args):
        """
        SetGeometry(TDataXtd_Constraint self, Standard_Integer const Index, Handle_TNaming_NamedShape G)

        Finds or creates the underlying geometry of the
        constraint defined by the topological attribute G
        and the integer index Index.

        :type Index: int
        :type G: OCC.wrapper.TNaming.Handle_TNaming_NamedShape

        """
        return _TDataXtd.TDataXtd_Constraint_SetGeometry(self, *args)


    def Verified(self, *args):
        """
        Verified(TDataXtd_Constraint self) -> Standard_Boolean
        Verified(TDataXtd_Constraint self, Standard_Boolean const status)

        Returns true if this constraint attribute defined by status is valid.
        By default, true is returned.
        When the value of a dimension is changed or
        when a geometry is moved, false is returned until
        the solver sets it back to true.
        If status is false, Verified is set to false.

        :type status: bool

        """
        return _TDataXtd.TDataXtd_Constraint_Verified(self, *args)


    def Inverted(self, *args):
        """
        Inverted(TDataXtd_Constraint self, Standard_Boolean const status)
        Inverted(TDataXtd_Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.TDataXtd_Constraint_Inverted(self, *args)


    def Reversed(self, *args):
        """
        Reversed(TDataXtd_Constraint self, Standard_Boolean const status)
        Reversed(TDataXtd_Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.TDataXtd_Constraint_Reversed(self, *args)


    def CollectChildConstraints(*args):
        """
        CollectChildConstraints(TDF_Label aLabel, NCollection_List_TDF_Label TheList)

        collects constraints on Childs for label <aLabel>

        :type aLabel: OCC.wrapper.TDF.TDF_Label
        :type TheList: OCC.wrapper.TDF.TDF_LabelList

        """
        return _TDataXtd.TDataXtd_Constraint_CollectChildConstraints(*args)

    CollectChildConstraints = staticmethod(CollectChildConstraints)

    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.TDataXtd_Constraint_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(TDataXtd_Constraint self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.TDataXtd_Constraint_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(TDataXtd_Constraint self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.TDataXtd_Constraint_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(TDataXtd_Constraint self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TDataXtd.TDataXtd_Constraint_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(TDataXtd_Constraint self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.TDataXtd_Constraint_Dump(self, *args)


    def References(self, *args):
        """
        References(TDataXtd_Constraint self, Handle_TDF_DataSet DS)

        :type DS: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _TDataXtd.TDataXtd_Constraint_References(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TDataXtd.TDataXtd_Constraint_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TDataXtd.TDataXtd_Constraint_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.TDataXtd_Constraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Constraint
TDataXtd_Constraint_swigregister = _TDataXtd.TDataXtd_Constraint_swigregister
TDataXtd_Constraint_swigregister(TDataXtd_Constraint)

def TDataXtd_Constraint_GetID(*args):
    """
    TDataXtd_Constraint_GetID() -> Standard_GUID

    Returns the GUID for constraints.

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _TDataXtd.TDataXtd_Constraint_GetID(*args)

def TDataXtd_Constraint_CollectChildConstraints(*args):
    """
    TDataXtd_Constraint_CollectChildConstraints(TDF_Label aLabel, NCollection_List_TDF_Label TheList)

    collects constraints on Childs for label <aLabel>

    :type aLabel: OCC.wrapper.TDF.TDF_Label
    :type TheList: OCC.wrapper.TDF.TDF_LabelList

    """
    return _TDataXtd.TDataXtd_Constraint_CollectChildConstraints(*args)

def TDataXtd_Constraint_get_type_name(*args):
    """
    TDataXtd_Constraint_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TDataXtd.TDataXtd_Constraint_get_type_name(*args)

def TDataXtd_Constraint_get_type_descriptor(*args):
    """
    TDataXtd_Constraint_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TDataXtd.TDataXtd_Constraint_get_type_descriptor(*args)

class TDataXtd_Position(TDF.TDF_Attribute):
    """Position of a Label"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TDataXtd_Position
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TDataXtd_Position(self) 
            return h


    def Set(*args):
        """
        Set(TDF_Label aLabel, gp_Pnt aPos)
        Set(TDF_Label aLabel) -> Handle_TDataXtd_Position

        Find an existing, or create an empty, Position.
        the Position attribute is returned.

        :type aLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Position

        """
        return _TDataXtd.TDataXtd_Position_Set(*args)

    Set = staticmethod(Set)

    def Get(*args):
        """
        Get(TDF_Label aLabel, gp_Pnt aPos) -> Standard_Boolean

        Search label <aLabel) for the TDataXtd_Position attribute and get its position
        if found returns True

        :type aLabel: OCC.wrapper.TDF.TDF_Label
        :type aPos: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.TDataXtd_Position_Get(*args)

    Get = staticmethod(Get)

    def __init__(self, *args):
        """
        __init__(TDataXtd_Position self) -> TDataXtd_Position

        Position of a Label
        """
        this = _TDataXtd.new_TDataXtd_Position(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def ID(self, *args):
        """
        Returns the ID of the attribute.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.TDataXtd_Position_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetID(*args):
        """
        GetID() -> Standard_GUID

        Returns the ID of the attribute.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _TDataXtd.TDataXtd_Position_GetID(*args)

    GetID = staticmethod(GetID)

    def Restore(self, *args):
        """
        Restore(TDataXtd_Position self, Handle_TDF_Attribute anAttribute)

        Restores the contents from <anAttribute> into this
        one. It is used when aborting a transaction.

        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.TDataXtd_Position_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(TDataXtd_Position self) -> Handle_TDF_Attribute

        Returns an new empty attribute from the good end
        type. It is used by the copy algorithm.

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.TDataXtd_Position_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(TDataXtd_Position self, Handle_TDF_Attribute intoAttribute, Handle_TDF_RelocationTable aRelocTationable)

        This method is different from the "Copy" one,
        because it is used when copying an attribute from
        a source structure into a target structure. This
        method pastes the current attribute to the label
        corresponding to the insertor. The pasted
        attribute may be a brand new one or a new version
        of the previous one.

        :type intoAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type aRelocTationable: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TDataXtd.TDataXtd_Position_Paste(self, *args)


    def GetPosition(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _TDataXtd.TDataXtd_Position_GetPosition(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPosition(self, *args):
        """
        SetPosition(TDataXtd_Position self, gp_Pnt aPos)

        :type aPos: OCC.wrapper.gp.gp_Pnt

        """
        return _TDataXtd.TDataXtd_Position_SetPosition(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TDataXtd.TDataXtd_Position_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TDataXtd.TDataXtd_Position_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.TDataXtd_Position_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Position
TDataXtd_Position_swigregister = _TDataXtd.TDataXtd_Position_swigregister
TDataXtd_Position_swigregister(TDataXtd_Position)

def TDataXtd_Position_Set(*args):
    """
    Set(TDF_Label aLabel, gp_Pnt aPos)
    TDataXtd_Position_Set(TDF_Label aLabel) -> Handle_TDataXtd_Position

    Find an existing, or create an empty, Position.
    the Position attribute is returned.

    :type aLabel: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Position

    """
    return _TDataXtd.TDataXtd_Position_Set(*args)

def TDataXtd_Position_Get(*args):
    """
    TDataXtd_Position_Get(TDF_Label aLabel, gp_Pnt aPos) -> Standard_Boolean

    Search label <aLabel) for the TDataXtd_Position attribute and get its position
    if found returns True

    :type aLabel: OCC.wrapper.TDF.TDF_Label
    :type aPos: OCC.wrapper.gp.gp_Pnt
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TDataXtd.TDataXtd_Position_Get(*args)

def TDataXtd_Position_GetID(*args):
    """
    TDataXtd_Position_GetID() -> Standard_GUID

    Returns the ID of the attribute.

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _TDataXtd.TDataXtd_Position_GetID(*args)

def TDataXtd_Position_get_type_name(*args):
    """
    TDataXtd_Position_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TDataXtd.TDataXtd_Position_get_type_name(*args)

def TDataXtd_Position_get_type_descriptor(*args):
    """
    TDataXtd_Position_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TDataXtd.TDataXtd_Position_get_type_descriptor(*args)

class TDataXtd_Plane(TDF.TDF_Attribute):
    """
    The basis to define a plane attribute.
    Warning:  Use TDataXtd_Geometry  attribute  to retrieve  the
    gp_Pln of the Plane attribute
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TDataXtd_Plane
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TDataXtd_Plane(self) 
            return h


    def GetID(*args):
        """
        GetID() -> Standard_GUID

        class methods
        =============

        Returns the GUID for plane attributes.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _TDataXtd.TDataXtd_Plane_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        Set(TDF_Label label) -> Handle_TDataXtd_Plane
        Set(TDF_Label label, gp_Pln P) -> Handle_TDataXtd_Plane

        Finds,  or creates,  a Plane  attribute  and sets <P>  as
        generated the associated NamedShape.
        Plane methods
        =============

        :type label: OCC.wrapper.TDF.TDF_Label
        :type P: OCC.wrapper.gp.gp_Pln
        :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Plane

        """
        return _TDataXtd.TDataXtd_Plane_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        __init__(TDataXtd_Plane self) -> TDataXtd_Plane

        The basis to define a plane attribute.
        Warning:  Use TDataXtd_Geometry  attribute  to retrieve  the
        gp_Pln of the Plane attribute
        """
        this = _TDataXtd.new_TDataXtd_Plane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.TDataXtd_Plane_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(TDataXtd_Plane self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.TDataXtd_Plane_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(TDataXtd_Plane self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.TDataXtd_Plane_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(TDataXtd_Plane self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TDataXtd.TDataXtd_Plane_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(TDataXtd_Plane self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.TDataXtd_Plane_Dump(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TDataXtd.TDataXtd_Plane_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TDataXtd.TDataXtd_Plane_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.TDataXtd_Plane_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Plane
TDataXtd_Plane_swigregister = _TDataXtd.TDataXtd_Plane_swigregister
TDataXtd_Plane_swigregister(TDataXtd_Plane)

def TDataXtd_Plane_GetID(*args):
    """
    TDataXtd_Plane_GetID() -> Standard_GUID

    class methods
    =============

    Returns the GUID for plane attributes.

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _TDataXtd.TDataXtd_Plane_GetID(*args)

def TDataXtd_Plane_Set(*args):
    """
    Set(TDF_Label label) -> Handle_TDataXtd_Plane
    TDataXtd_Plane_Set(TDF_Label label, gp_Pln P) -> Handle_TDataXtd_Plane

    Finds,  or creates,  a Plane  attribute  and sets <P>  as
    generated the associated NamedShape.
    Plane methods
    =============

    :type label: OCC.wrapper.TDF.TDF_Label
    :type P: OCC.wrapper.gp.gp_Pln
    :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Plane

    """
    return _TDataXtd.TDataXtd_Plane_Set(*args)

def TDataXtd_Plane_get_type_name(*args):
    """
    TDataXtd_Plane_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TDataXtd.TDataXtd_Plane_get_type_name(*args)

def TDataXtd_Plane_get_type_descriptor(*args):
    """
    TDataXtd_Plane_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TDataXtd.TDataXtd_Plane_get_type_descriptor(*args)

class TDataXtd_Placement(TDF.TDF_Attribute):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TDataXtd_Placement
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TDataXtd_Placement(self) 
            return h


    def GetID(*args):
        """
        GetID() -> Standard_GUID

        class methods
        =============

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _TDataXtd.TDataXtd_Placement_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        Set(TDF_Label label) -> Handle_TDataXtd_Placement

        Find, or    create,   an Placement  attribute.     the
        Placement attribute is returned.
        Placement methods
        =================

        :type label: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Placement

        """
        return _TDataXtd.TDataXtd_Placement_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """__init__(TDataXtd_Placement self) -> TDataXtd_Placement"""
        this = _TDataXtd.new_TDataXtd_Placement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.TDataXtd_Placement_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(TDataXtd_Placement self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.TDataXtd_Placement_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(TDataXtd_Placement self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.TDataXtd_Placement_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(TDataXtd_Placement self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TDataXtd.TDataXtd_Placement_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(TDataXtd_Placement self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.TDataXtd_Placement_Dump(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TDataXtd.TDataXtd_Placement_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TDataXtd.TDataXtd_Placement_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.TDataXtd_Placement_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Placement
TDataXtd_Placement_swigregister = _TDataXtd.TDataXtd_Placement_swigregister
TDataXtd_Placement_swigregister(TDataXtd_Placement)

def TDataXtd_Placement_GetID(*args):
    """
    TDataXtd_Placement_GetID() -> Standard_GUID

    class methods
    =============

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _TDataXtd.TDataXtd_Placement_GetID(*args)

def TDataXtd_Placement_Set(*args):
    """
    TDataXtd_Placement_Set(TDF_Label label) -> Handle_TDataXtd_Placement

    Find, or    create,   an Placement  attribute.     the
    Placement attribute is returned.
    Placement methods
    =================

    :type label: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Placement

    """
    return _TDataXtd.TDataXtd_Placement_Set(*args)

def TDataXtd_Placement_get_type_name(*args):
    """
    TDataXtd_Placement_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TDataXtd.TDataXtd_Placement_get_type_name(*args)

def TDataXtd_Placement_get_type_descriptor(*args):
    """
    TDataXtd_Placement_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TDataXtd.TDataXtd_Placement_get_type_descriptor(*args)

class TDataXtd_Geometry(TDF.TDF_Attribute):
    """
    This class is used to model construction geometry.
    The specific geometric construction of the
    attribute is defined by an element of the
    enumeration TDataXtd_GeometryEnum.
    This attribute may  also be used to qualify  underlying
    geometry  of   the  associated NamedShape.     for
    Constructuion element by example.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TDataXtd_Geometry
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TDataXtd_Geometry(self) 
            return h


    def Set(*args):
        """
        Set(TDF_Label label) -> Handle_TDataXtd_Geometry

        API class methods
        =================
        Finds, or  creates, a Geometry attribute  defined by the label label.
        The default type of geometry is the value
        ANY_GEOM of the enumeration TDataXtd_GeometryEnum.
        To specify another value of this enumeration, use
        the function SetType.

        :type label: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Geometry

        """
        return _TDataXtd.TDataXtd_Geometry_Set(*args)

    Set = staticmethod(Set)

    def Type(*args):
        """
        Type(TDF_Label L) -> TDataXtd_GeometryEnum
        Type(Handle_TNaming_NamedShape S) -> TDataXtd_GeometryEnum

        Returns the topological attribute S used to define
        the type of geometric construction for the geometry attribute.

        :type S: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
        :rtype: OCC.wrapper.TDataXtd.TDataXtd_GeometryEnum

        """
        return _TDataXtd.TDataXtd_Geometry_Type(*args)

    Type = staticmethod(Type)

    def Point(*args):
        """
        Point(TDF_Label L, gp_Pnt G) -> Standard_Boolean
        Point(Handle_TNaming_NamedShape S, gp_Pnt G) -> Standard_Boolean

        Returns the point attribute defined by the topological attribute S and the point G.

        :type S: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
        :type G: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.TDataXtd_Geometry_Point(*args)

    Point = staticmethod(Point)

    def Axis(*args):
        """
        Axis(TDF_Label L, gp_Ax1 G) -> Standard_Boolean
        Axis(Handle_TNaming_NamedShape S, gp_Ax1 G) -> Standard_Boolean

        Returns the axis attribute defined by the topological attribute S and the axis G.

        :type S: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
        :type G: OCC.wrapper.gp.gp_Ax1
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.TDataXtd_Geometry_Axis(*args)

    Axis = staticmethod(Axis)

    def Line(*args):
        """
        Line(TDF_Label L, gp_Lin G) -> Standard_Boolean
        Line(Handle_TNaming_NamedShape S, gp_Lin G) -> Standard_Boolean

        Returns the line attribute defined by the topological attribute S and the line G.

        :type S: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
        :type G: OCC.wrapper.gp.gp_Lin
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.TDataXtd_Geometry_Line(*args)

    Line = staticmethod(Line)

    def Circle(*args):
        """
        Circle(TDF_Label L, gp_Circ G) -> Standard_Boolean
        Circle(Handle_TNaming_NamedShape S, gp_Circ G) -> Standard_Boolean

        Returns the circle attribute defined by the topological attribute S and the circle G.

        :type S: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
        :type G: OCC.wrapper.gp.gp_Circ
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.TDataXtd_Geometry_Circle(*args)

    Circle = staticmethod(Circle)

    def Ellipse(*args):
        """
        Ellipse(TDF_Label L, gp_Elips G) -> Standard_Boolean
        Ellipse(Handle_TNaming_NamedShape S, gp_Elips G) -> Standard_Boolean

        Returns the ellipse attribute defined by the
        topological attribute S and the ellipse G.

        :type S: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
        :type G: OCC.wrapper.gp.gp_Elips
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.TDataXtd_Geometry_Ellipse(*args)

    Ellipse = staticmethod(Ellipse)

    def Plane(*args):
        """
        Plane(TDF_Label L, gp_Pln G) -> Standard_Boolean
        Plane(Handle_TNaming_NamedShape S, gp_Pln G) -> Standard_Boolean

        Returns the plane attribute defined by the
        topological attribute S and the plane G.

        :type S: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
        :type G: OCC.wrapper.gp.gp_Pln
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.TDataXtd_Geometry_Plane(*args)

    Plane = staticmethod(Plane)

    def Cylinder(*args):
        """
        Cylinder(TDF_Label L, gp_Cylinder G) -> Standard_Boolean
        Cylinder(Handle_TNaming_NamedShape S, gp_Cylinder G) -> Standard_Boolean

        Returns the cylinder attribute defined by the
        topological attribute S and the cylinder G.

        :type S: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
        :type G: OCC.wrapper.gp.gp_Cylinder
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.TDataXtd_Geometry_Cylinder(*args)

    Cylinder = staticmethod(Cylinder)

    def GetID(*args):
        """
        GetID() -> Standard_GUID

        Returns the GUID for geometry attributes.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _TDataXtd.TDataXtd_Geometry_GetID(*args)

    GetID = staticmethod(GetID)

    def __init__(self, *args):
        """
        __init__(TDataXtd_Geometry self) -> TDataXtd_Geometry

        This and the next methods are used to  retrieve  underlying geometry of  the
        NamedShape, even   if  noone Geometry   Attribute  is
        associated  .  if not  found or not compliant geometry return False.


        """
        this = _TDataXtd.new_TDataXtd_Geometry(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def SetType(self, *args):
        """
        SetType(TDataXtd_Geometry self, TDataXtd_GeometryEnum const T)

        Returns the type of geometric construction T of this attribute.
        T will be a value of the enumeration TDataXtd_GeometryEnum.

        :type T: OCC.wrapper.TDataXtd.TDataXtd_GeometryEnum

        """
        return _TDataXtd.TDataXtd_Geometry_SetType(self, *args)


    def GetType(self, *args):
        """
        GetType(TDataXtd_Geometry self) -> TDataXtd_GeometryEnum

        Returns the type of geometric construction.

        :rtype: OCC.wrapper.TDataXtd.TDataXtd_GeometryEnum

        """
        return _TDataXtd.TDataXtd_Geometry_GetType(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.TDataXtd_Geometry_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(TDataXtd_Geometry self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.TDataXtd_Geometry_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(TDataXtd_Geometry self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.TDataXtd_Geometry_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(TDataXtd_Geometry self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TDataXtd.TDataXtd_Geometry_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(TDataXtd_Geometry self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.TDataXtd_Geometry_Dump(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TDataXtd.TDataXtd_Geometry_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TDataXtd.TDataXtd_Geometry_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.TDataXtd_Geometry_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Geometry
TDataXtd_Geometry_swigregister = _TDataXtd.TDataXtd_Geometry_swigregister
TDataXtd_Geometry_swigregister(TDataXtd_Geometry)

def TDataXtd_Geometry_Set(*args):
    """
    TDataXtd_Geometry_Set(TDF_Label label) -> Handle_TDataXtd_Geometry

    API class methods
    =================
    Finds, or  creates, a Geometry attribute  defined by the label label.
    The default type of geometry is the value
    ANY_GEOM of the enumeration TDataXtd_GeometryEnum.
    To specify another value of this enumeration, use
    the function SetType.

    :type label: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Geometry

    """
    return _TDataXtd.TDataXtd_Geometry_Set(*args)

def TDataXtd_Geometry_Type(*args):
    """
    Type(TDF_Label L) -> TDataXtd_GeometryEnum
    TDataXtd_Geometry_Type(Handle_TNaming_NamedShape S) -> TDataXtd_GeometryEnum

    Returns the topological attribute S used to define
    the type of geometric construction for the geometry attribute.

    :type S: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
    :rtype: OCC.wrapper.TDataXtd.TDataXtd_GeometryEnum

    """
    return _TDataXtd.TDataXtd_Geometry_Type(*args)

def TDataXtd_Geometry_Point(*args):
    """
    Point(TDF_Label L, gp_Pnt G) -> Standard_Boolean
    TDataXtd_Geometry_Point(Handle_TNaming_NamedShape S, gp_Pnt G) -> Standard_Boolean

    Returns the point attribute defined by the topological attribute S and the point G.

    :type S: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
    :type G: OCC.wrapper.gp.gp_Pnt
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TDataXtd.TDataXtd_Geometry_Point(*args)

def TDataXtd_Geometry_Axis(*args):
    """
    Axis(TDF_Label L, gp_Ax1 G) -> Standard_Boolean
    TDataXtd_Geometry_Axis(Handle_TNaming_NamedShape S, gp_Ax1 G) -> Standard_Boolean

    Returns the axis attribute defined by the topological attribute S and the axis G.

    :type S: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
    :type G: OCC.wrapper.gp.gp_Ax1
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TDataXtd.TDataXtd_Geometry_Axis(*args)

def TDataXtd_Geometry_Line(*args):
    """
    Line(TDF_Label L, gp_Lin G) -> Standard_Boolean
    TDataXtd_Geometry_Line(Handle_TNaming_NamedShape S, gp_Lin G) -> Standard_Boolean

    Returns the line attribute defined by the topological attribute S and the line G.

    :type S: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
    :type G: OCC.wrapper.gp.gp_Lin
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TDataXtd.TDataXtd_Geometry_Line(*args)

def TDataXtd_Geometry_Circle(*args):
    """
    Circle(TDF_Label L, gp_Circ G) -> Standard_Boolean
    TDataXtd_Geometry_Circle(Handle_TNaming_NamedShape S, gp_Circ G) -> Standard_Boolean

    Returns the circle attribute defined by the topological attribute S and the circle G.

    :type S: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
    :type G: OCC.wrapper.gp.gp_Circ
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TDataXtd.TDataXtd_Geometry_Circle(*args)

def TDataXtd_Geometry_Ellipse(*args):
    """
    Ellipse(TDF_Label L, gp_Elips G) -> Standard_Boolean
    TDataXtd_Geometry_Ellipse(Handle_TNaming_NamedShape S, gp_Elips G) -> Standard_Boolean

    Returns the ellipse attribute defined by the
    topological attribute S and the ellipse G.

    :type S: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
    :type G: OCC.wrapper.gp.gp_Elips
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TDataXtd.TDataXtd_Geometry_Ellipse(*args)

def TDataXtd_Geometry_Plane(*args):
    """
    Plane(TDF_Label L, gp_Pln G) -> Standard_Boolean
    TDataXtd_Geometry_Plane(Handle_TNaming_NamedShape S, gp_Pln G) -> Standard_Boolean

    Returns the plane attribute defined by the
    topological attribute S and the plane G.

    :type S: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
    :type G: OCC.wrapper.gp.gp_Pln
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TDataXtd.TDataXtd_Geometry_Plane(*args)

def TDataXtd_Geometry_Cylinder(*args):
    """
    Cylinder(TDF_Label L, gp_Cylinder G) -> Standard_Boolean
    TDataXtd_Geometry_Cylinder(Handle_TNaming_NamedShape S, gp_Cylinder G) -> Standard_Boolean

    Returns the cylinder attribute defined by the
    topological attribute S and the cylinder G.

    :type S: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
    :type G: OCC.wrapper.gp.gp_Cylinder
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TDataXtd.TDataXtd_Geometry_Cylinder(*args)

def TDataXtd_Geometry_GetID(*args):
    """
    TDataXtd_Geometry_GetID() -> Standard_GUID

    Returns the GUID for geometry attributes.

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _TDataXtd.TDataXtd_Geometry_GetID(*args)

def TDataXtd_Geometry_get_type_name(*args):
    """
    TDataXtd_Geometry_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TDataXtd.TDataXtd_Geometry_get_type_name(*args)

def TDataXtd_Geometry_get_type_descriptor(*args):
    """
    TDataXtd_Geometry_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TDataXtd.TDataXtd_Geometry_get_type_descriptor(*args)

class Handle_TDataXtd_Constraint(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TDataXtd_Constraint self)

        Nullify the handle


        """
        return _TDataXtd.Handle_TDataXtd_Constraint_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TDataXtd_Constraint self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TDataXtd_Constraint self, TDataXtd_Constraint thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TDataXtd_Constraint self, Handle_TDataXtd_Constraint theHandle) -> Handle_TDataXtd_Constraint
        assign(Handle_TDataXtd_Constraint self, TDataXtd_Constraint thePtr) -> Handle_TDataXtd_Constraint
        assign(Handle_TDataXtd_Constraint self, Handle_TDataXtd_Constraint theHandle) -> Handle_TDataXtd_Constraint

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TDataXtd_Constraint self) -> TDataXtd_Constraint

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TDataXtd_Constraint self) -> TDataXtd_Constraint

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_Constraint___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TDataXtd_Constraint self) -> TDataXtd_Constraint

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TDataXtd.Handle_TDataXtd_Constraint___ref__(self, *args)


    def __hash__(self):
        return _TDataXtd.Handle_TDataXtd_Constraint___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TDataXtd.Handle_TDataXtd_Constraint___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TDataXtd.new_Handle_TDataXtd_Constraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TDataXtd.Handle_TDataXtd_Constraint_DownCast)
    __swig_destroy__ = _TDataXtd.delete_Handle_TDataXtd_Constraint

    def GetID(self, *args):
        """
        Returns the GUID for constraints.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_Constraint_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_TDataXtd_Constraint self, TDF_Label label) -> Handle_TDataXtd_Constraint
        Set(Handle_TDataXtd_Constraint self, TDataXtd_ConstraintEnum const type, Handle_TNaming_NamedShape G1)
        Set(Handle_TDataXtd_Constraint self, TDataXtd_ConstraintEnum const type, Handle_TNaming_NamedShape G1, Handle_TNaming_NamedShape G2)
        Set(Handle_TDataXtd_Constraint self, TDataXtd_ConstraintEnum const type, Handle_TNaming_NamedShape G1, Handle_TNaming_NamedShape G2, Handle_TNaming_NamedShape G3)
        Set(Handle_TDataXtd_Constraint self, TDataXtd_ConstraintEnum const type, Handle_TNaming_NamedShape G1, Handle_TNaming_NamedShape G2, Handle_TNaming_NamedShape G3, Handle_TNaming_NamedShape G4)

        Finds or creates the constraint attribute defined
        by the topological attributes G1, G2, G3 and G4,
        and by the constraint type type.
        methods to read constraint fields
        =================================

        :type type: OCC.wrapper.TDataXtd.TDataXtd_ConstraintEnum
        :type G1: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
        :type G2: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
        :type G3: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
        :type G4: OCC.wrapper.TNaming.Handle_TNaming_NamedShape

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_Set(self, *args)


    def Verified(self, *args):
        """
        Verified(Handle_TDataXtd_Constraint self) -> Standard_Boolean
        Verified(Handle_TDataXtd_Constraint self, Standard_Boolean const status)

        Returns true if this constraint attribute defined by status is valid.
        By default, true is returned.
        When the value of a dimension is changed or
        when a geometry is moved, false is returned until
        the solver sets it back to true.
        If status is false, Verified is set to false.

        :type status: bool

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_Verified(self, *args)


    def GetType(self, *args):
        """
        GetType(Handle_TDataXtd_Constraint self) -> TDataXtd_ConstraintEnum

        Returns the type of constraint.
        This will be an element of the
        TDataXtd_ConstraintEnum enumeration.

        :rtype: OCC.wrapper.TDataXtd.TDataXtd_ConstraintEnum

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_GetType(self, *args)


    def IsPlanar(self, *args):
        """
        IsPlanar(Handle_TDataXtd_Constraint self) -> Standard_Boolean

        Returns true if this constraint attribute is
        two-dimensional.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_IsPlanar(self, *args)


    def GetPlane(self, *args):
        """
        Returns the topological attribute of the plane
        used for planar - i.e., 2D - constraints.
        This plane is attached to another label.
        If the constraint is not planar, in other words, 3D,
        this function will return a null handle.

        :rtype: OCC.wrapper.TNaming.Handle_TNaming_NamedShape

        """
        res = _TDataXtd.Handle_TDataXtd_Constraint_GetPlane(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def IsDimension(self, *args):
        """
        IsDimension(Handle_TDataXtd_Constraint self) -> Standard_Boolean

        Returns true if this constraint attribute is a
        dimension, and therefore has a value.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_IsDimension(self, *args)


    def GetValue(self, *args):
        """
        Returns the value of a dimension.
        This value is a reference to a TDataStd_Real attribute.
        If the attribute is not a dimension, this value will
        be 0. Use IsDimension to test this condition.

        :rtype: OCC.wrapper.TDataStd.Handle_TDataStd_Real

        """
        res = _TDataXtd.Handle_TDataXtd_Constraint_GetValue(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NbGeometries(self, *args):
        """
        NbGeometries(Handle_TDataXtd_Constraint self) -> Standard_Integer

        Returns the number of geometry attributes in this constraint attribute.
        This number will be between 1 and 4.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_NbGeometries(self, *args)


    def GetGeometry(self, *args):
        """
        GetGeometry(Handle_TDataXtd_Constraint self, Standard_Integer const Index) -> Handle_TNaming_NamedShape

        Returns the integer index Index used to access
        the array of the constraint or stored geometries of a dimension
        Index has a value between 1 and 4.
        methods to write constraint fields (use builder)
        ==================================

        :type Index: int
        :rtype: OCC.wrapper.TNaming.Handle_TNaming_NamedShape

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_GetGeometry(self, *args)


    def ClearGeometries(self, *args):
        """
        ClearGeometries(Handle_TDataXtd_Constraint self)

        Removes the geometries involved in the
        constraint or dimension from the array of
        topological attributes where they are stored.


        """
        return _TDataXtd.Handle_TDataXtd_Constraint_ClearGeometries(self, *args)


    def SetType(self, *args):
        """
        SetType(Handle_TDataXtd_Constraint self, TDataXtd_ConstraintEnum const CTR)

        Finds or creates the type of constraint CTR.

        :type CTR: OCC.wrapper.TDataXtd.TDataXtd_ConstraintEnum

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_SetType(self, *args)


    def SetPlane(self, *args):
        """
        SetPlane(Handle_TDataXtd_Constraint self, Handle_TNaming_NamedShape plane)

        Finds or creates the plane of the 2D constraint
        attribute, defined by the planar topological attribute plane.

        :type plane: OCC.wrapper.TNaming.Handle_TNaming_NamedShape

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_SetPlane(self, *args)


    def SetValue(self, *args):
        """
        SetValue(Handle_TDataXtd_Constraint self, Handle_TDataStd_Real V)

        Finds or creates the real number value V of the dimension constraint attribute.

        :type V: OCC.wrapper.TDataStd.Handle_TDataStd_Real

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_SetValue(self, *args)


    def SetGeometry(self, *args):
        """
        SetGeometry(Handle_TDataXtd_Constraint self, Standard_Integer const Index, Handle_TNaming_NamedShape G)

        Finds or creates the underlying geometry of the
        constraint defined by the topological attribute G
        and the integer index Index.

        :type Index: int
        :type G: OCC.wrapper.TNaming.Handle_TNaming_NamedShape

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_SetGeometry(self, *args)


    def Inverted(self, *args):
        """
        Inverted(Handle_TDataXtd_Constraint self, Standard_Boolean const status)
        Inverted(Handle_TDataXtd_Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_Inverted(self, *args)


    def Reversed(self, *args):
        """
        Reversed(Handle_TDataXtd_Constraint self, Standard_Boolean const status)
        Reversed(Handle_TDataXtd_Constraint self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_Reversed(self, *args)


    def CollectChildConstraints(self, *args):
        """
        CollectChildConstraints(Handle_TDataXtd_Constraint self, TDF_Label aLabel, NCollection_List_TDF_Label TheList)

        collects constraints on Childs for label <aLabel>

        :type aLabel: OCC.wrapper.TDF.TDF_Label
        :type TheList: OCC.wrapper.TDF.TDF_LabelList

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_CollectChildConstraints(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_Constraint_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_TDataXtd_Constraint self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_TDataXtd_Constraint self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_TDataXtd_Constraint self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_TDataXtd_Constraint self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_Dump(self, *args)


    def References(self, *args):
        """
        References(Handle_TDataXtd_Constraint self, Handle_TDF_DataSet DS)

        :type DS: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_References(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TDataXtd_Constraint self) -> char const *

        :rtype: const char *

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_Constraint_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_Constraint_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_TDataXtd_Constraint self, Standard_GUID arg2)
        SetID(Handle_TDataXtd_Constraint self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _TDataXtd.Handle_TDataXtd_Constraint_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_TDataXtd_Constraint self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_TDataXtd_Constraint self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_TDataXtd_Constraint self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_TDataXtd_Constraint self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_TDataXtd_Constraint self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_TDataXtd_Constraint self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_TDataXtd_Constraint self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_TDataXtd_Constraint self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_TDataXtd_Constraint self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_TDataXtd_Constraint self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_TDataXtd_Constraint self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_TDataXtd_Constraint self)

        Something to do after adding an Attribute to a label.


        """
        return _TDataXtd.Handle_TDataXtd_Constraint_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_TDataXtd_Constraint self)

        Something to do before removing an Attribute from
        a label.


        """
        return _TDataXtd.Handle_TDataXtd_Constraint_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_TDataXtd_Constraint self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _TDataXtd.Handle_TDataXtd_Constraint_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_TDataXtd_Constraint self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _TDataXtd.Handle_TDataXtd_Constraint_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_TDataXtd_Constraint self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_TDataXtd_Constraint self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_TDataXtd_Constraint self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_TDataXtd_Constraint self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _TDataXtd.Handle_TDataXtd_Constraint_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_TDataXtd_Constraint self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _TDataXtd.Handle_TDataXtd_Constraint_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_TDataXtd_Constraint self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_TDataXtd_Constraint self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_TDataXtd_Constraint self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_TDataXtd_Constraint self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_TDataXtd_Constraint self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_TDataXtd_Constraint self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_DeltaOnRemoval(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_TDataXtd_Constraint self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.Handle_TDataXtd_Constraint___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_TDataXtd_Constraint self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_TDataXtd_Constraint self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_TDataXtd_Constraint self)

        Memory deallocator for transient classes


        """
        return _TDataXtd.Handle_TDataXtd_Constraint_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TDataXtd_Constraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TDataXtd_Constraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TDataXtd_Constraint self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TDataXtd_Constraint self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TDataXtd_Constraint self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TDataXtd_Constraint self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TDataXtd_Constraint self)

        Increments the reference counter of this object


        """
        return _TDataXtd.Handle_TDataXtd_Constraint_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TDataXtd_Constraint self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Constraint_DecrementRefCounter(self, *args)

Handle_TDataXtd_Constraint_swigregister = _TDataXtd.Handle_TDataXtd_Constraint_swigregister
Handle_TDataXtd_Constraint_swigregister(Handle_TDataXtd_Constraint)

def Handle_TDataXtd_Constraint_DownCast(thing):
    return _TDataXtd.Handle_TDataXtd_Constraint_DownCast(thing)
Handle_TDataXtd_Constraint_DownCast = _TDataXtd.Handle_TDataXtd_Constraint_DownCast

class Handle_TDataXtd_Plane(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TDataXtd_Plane self)

        Nullify the handle


        """
        return _TDataXtd.Handle_TDataXtd_Plane_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TDataXtd_Plane self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TDataXtd.Handle_TDataXtd_Plane_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TDataXtd_Plane self, TDataXtd_Plane thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TDataXtd.Handle_TDataXtd_Plane_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TDataXtd_Plane self, Handle_TDataXtd_Plane theHandle) -> Handle_TDataXtd_Plane
        assign(Handle_TDataXtd_Plane self, TDataXtd_Plane thePtr) -> Handle_TDataXtd_Plane
        assign(Handle_TDataXtd_Plane self, Handle_TDataXtd_Plane theHandle) -> Handle_TDataXtd_Plane

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TDataXtd.Handle_TDataXtd_Plane_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TDataXtd_Plane self) -> TDataXtd_Plane

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_Plane_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TDataXtd_Plane self) -> TDataXtd_Plane

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_Plane___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TDataXtd_Plane self) -> TDataXtd_Plane

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TDataXtd.Handle_TDataXtd_Plane___ref__(self, *args)


    def __hash__(self):
        return _TDataXtd.Handle_TDataXtd_Plane___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TDataXtd.Handle_TDataXtd_Plane___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TDataXtd.new_Handle_TDataXtd_Plane(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TDataXtd.Handle_TDataXtd_Plane_DownCast)
    __swig_destroy__ = _TDataXtd.delete_Handle_TDataXtd_Plane

    def GetID(self, *args):
        """
        class methods
        =============

        Returns the GUID for plane attributes.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_Plane_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_TDataXtd_Plane self, TDF_Label label) -> Handle_TDataXtd_Plane
        Set(Handle_TDataXtd_Plane self, TDF_Label label, gp_Pln P) -> Handle_TDataXtd_Plane

        Finds,  or creates,  a Plane  attribute  and sets <P>  as
        generated the associated NamedShape.
        Plane methods
        =============

        :type label: OCC.wrapper.TDF.TDF_Label
        :type P: OCC.wrapper.gp.gp_Pln
        :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Plane

        """
        return _TDataXtd.Handle_TDataXtd_Plane_Set(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_Plane_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_TDataXtd_Plane self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Plane_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_TDataXtd_Plane self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Plane_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_TDataXtd_Plane self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TDataXtd.Handle_TDataXtd_Plane_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_TDataXtd_Plane self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.Handle_TDataXtd_Plane_Dump(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TDataXtd_Plane self) -> char const *

        :rtype: const char *

        """
        return _TDataXtd.Handle_TDataXtd_Plane_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_Plane_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_Plane_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_TDataXtd_Plane self, Standard_GUID arg2)
        SetID(Handle_TDataXtd_Plane self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _TDataXtd.Handle_TDataXtd_Plane_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_TDataXtd_Plane self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _TDataXtd.Handle_TDataXtd_Plane_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_TDataXtd_Plane self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Plane_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_TDataXtd_Plane self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Plane_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_TDataXtd_Plane self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Plane_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_TDataXtd_Plane self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Plane_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_TDataXtd_Plane self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Plane_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_TDataXtd_Plane self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Plane_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_TDataXtd_Plane self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Plane_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_TDataXtd_Plane self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Plane_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_TDataXtd_Plane self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Plane_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_TDataXtd_Plane self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _TDataXtd.Handle_TDataXtd_Plane_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_TDataXtd_Plane self)

        Something to do after adding an Attribute to a label.


        """
        return _TDataXtd.Handle_TDataXtd_Plane_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_TDataXtd_Plane self)

        Something to do before removing an Attribute from
        a label.


        """
        return _TDataXtd.Handle_TDataXtd_Plane_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_TDataXtd_Plane self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _TDataXtd.Handle_TDataXtd_Plane_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_TDataXtd_Plane self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _TDataXtd.Handle_TDataXtd_Plane_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_TDataXtd_Plane self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Plane_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_TDataXtd_Plane self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Plane_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_TDataXtd_Plane self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Plane_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_TDataXtd_Plane self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _TDataXtd.Handle_TDataXtd_Plane_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_TDataXtd_Plane self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _TDataXtd.Handle_TDataXtd_Plane_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_TDataXtd_Plane self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Plane_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_TDataXtd_Plane self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Plane_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_TDataXtd_Plane self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _TDataXtd.Handle_TDataXtd_Plane_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_TDataXtd_Plane self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _TDataXtd.Handle_TDataXtd_Plane_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_TDataXtd_Plane self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _TDataXtd.Handle_TDataXtd_Plane_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_TDataXtd_Plane self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _TDataXtd.Handle_TDataXtd_Plane_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_TDataXtd_Plane self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _TDataXtd.Handle_TDataXtd_Plane_References(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_TDataXtd_Plane self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.Handle_TDataXtd_Plane___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_TDataXtd_Plane self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _TDataXtd.Handle_TDataXtd_Plane_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_TDataXtd_Plane self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _TDataXtd.Handle_TDataXtd_Plane_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_TDataXtd_Plane self)

        Memory deallocator for transient classes


        """
        return _TDataXtd.Handle_TDataXtd_Plane_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TDataXtd_Plane self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TDataXtd_Plane self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Plane_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TDataXtd_Plane self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TDataXtd_Plane self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Plane_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TDataXtd_Plane self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TDataXtd.Handle_TDataXtd_Plane_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TDataXtd_Plane self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Plane_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TDataXtd_Plane self)

        Increments the reference counter of this object


        """
        return _TDataXtd.Handle_TDataXtd_Plane_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TDataXtd_Plane self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Plane_DecrementRefCounter(self, *args)

Handle_TDataXtd_Plane_swigregister = _TDataXtd.Handle_TDataXtd_Plane_swigregister
Handle_TDataXtd_Plane_swigregister(Handle_TDataXtd_Plane)

def Handle_TDataXtd_Plane_DownCast(thing):
    return _TDataXtd.Handle_TDataXtd_Plane_DownCast(thing)
Handle_TDataXtd_Plane_DownCast = _TDataXtd.Handle_TDataXtd_Plane_DownCast

class TDataXtd_HArray1OfTrsf(Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TDataXtd_HArray1OfTrsf
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TDataXtd_HArray1OfTrsf(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TDataXtd_HArray1OfTrsf self, Standard_Integer const theLower, Standard_Integer const theUpper) -> TDataXtd_HArray1OfTrsf
        __init__(TDataXtd_HArray1OfTrsf self, Standard_Integer const theLower, Standard_Integer const theUpper, gp_Trsf theValue) -> TDataXtd_HArray1OfTrsf
        __init__(TDataXtd_HArray1OfTrsf self, NCollection_Array1_gp_Trsf theOther) -> TDataXtd_HArray1OfTrsf

        :type theOther: OCC.wrapper.TDataXtd.TDataXtd_Array1OfTrsf

        """
        this = _TDataXtd.new_TDataXtd_HArray1OfTrsf(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TDataXtd.TDataXtd_Array1OfTrsf

        """
        res = _TDataXtd.TDataXtd_HArray1OfTrsf_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(TDataXtd_HArray1OfTrsf self) -> NCollection_Array1_gp_Trsf

        :rtype: OCC.wrapper.TDataXtd.TDataXtd_Array1OfTrsf

        """
        return _TDataXtd.TDataXtd_HArray1OfTrsf_ChangeArray1(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TDataXtd.TDataXtd_HArray1OfTrsf_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TDataXtd.TDataXtd_HArray1OfTrsf_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.TDataXtd_HArray1OfTrsf_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TDataXtd.delete_TDataXtd_HArray1OfTrsf
TDataXtd_HArray1OfTrsf_swigregister = _TDataXtd.TDataXtd_HArray1OfTrsf_swigregister
TDataXtd_HArray1OfTrsf_swigregister(TDataXtd_HArray1OfTrsf)

def TDataXtd_HArray1OfTrsf_get_type_name(*args):
    """
    TDataXtd_HArray1OfTrsf_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TDataXtd.TDataXtd_HArray1OfTrsf_get_type_name(*args)

def TDataXtd_HArray1OfTrsf_get_type_descriptor(*args):
    """
    TDataXtd_HArray1OfTrsf_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TDataXtd.TDataXtd_HArray1OfTrsf_get_type_descriptor(*args)

class TDataXtd_Point(TDF.TDF_Attribute):
    """
    The basis to define a point attribute.
    The topological attribute must contain a vertex.
    You use this class to create reference points in a design.

    Warning:  Use TDataXtd_Geometry  attribute  to retrieve the
    gp_Pnt of the Point attribute
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TDataXtd_Point
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TDataXtd_Point(self) 
            return h


    def GetID(*args):
        """
        GetID() -> Standard_GUID

        class methods
        =============

        Returns the GUID for point attributes.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _TDataXtd.TDataXtd_Point_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        Set(TDF_Label label) -> Handle_TDataXtd_Point
        Set(TDF_Label label, gp_Pnt P) -> Handle_TDataXtd_Point

        Sets the label Label as a point attribute containing the point P.
        If no object is found, a point attribute is created.
        Point methods
        =============

        :type label: OCC.wrapper.TDF.TDF_Label
        :type P: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Point

        """
        return _TDataXtd.TDataXtd_Point_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        __init__(TDataXtd_Point self) -> TDataXtd_Point

        The basis to define a point attribute.
        The topological attribute must contain a vertex.
        You use this class to create reference points in a design.

        Warning:  Use TDataXtd_Geometry  attribute  to retrieve the
        gp_Pnt of the Point attribute
        """
        this = _TDataXtd.new_TDataXtd_Point(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.TDataXtd_Point_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(TDataXtd_Point self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.TDataXtd_Point_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(TDataXtd_Point self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.TDataXtd_Point_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(TDataXtd_Point self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TDataXtd.TDataXtd_Point_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(TDataXtd_Point self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.TDataXtd_Point_Dump(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TDataXtd.TDataXtd_Point_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TDataXtd.TDataXtd_Point_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.TDataXtd_Point_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Point
TDataXtd_Point_swigregister = _TDataXtd.TDataXtd_Point_swigregister
TDataXtd_Point_swigregister(TDataXtd_Point)

def TDataXtd_Point_GetID(*args):
    """
    TDataXtd_Point_GetID() -> Standard_GUID

    class methods
    =============

    Returns the GUID for point attributes.

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _TDataXtd.TDataXtd_Point_GetID(*args)

def TDataXtd_Point_Set(*args):
    """
    Set(TDF_Label label) -> Handle_TDataXtd_Point
    TDataXtd_Point_Set(TDF_Label label, gp_Pnt P) -> Handle_TDataXtd_Point

    Sets the label Label as a point attribute containing the point P.
    If no object is found, a point attribute is created.
    Point methods
    =============

    :type label: OCC.wrapper.TDF.TDF_Label
    :type P: OCC.wrapper.gp.gp_Pnt
    :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Point

    """
    return _TDataXtd.TDataXtd_Point_Set(*args)

def TDataXtd_Point_get_type_name(*args):
    """
    TDataXtd_Point_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TDataXtd.TDataXtd_Point_get_type_name(*args)

def TDataXtd_Point_get_type_descriptor(*args):
    """
    TDataXtd_Point_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TDataXtd.TDataXtd_Point_get_type_descriptor(*args)

class Handle_TDataXtd_Geometry(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TDataXtd_Geometry self)

        Nullify the handle


        """
        return _TDataXtd.Handle_TDataXtd_Geometry_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TDataXtd_Geometry self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TDataXtd_Geometry self, TDataXtd_Geometry thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TDataXtd_Geometry self, Handle_TDataXtd_Geometry theHandle) -> Handle_TDataXtd_Geometry
        assign(Handle_TDataXtd_Geometry self, TDataXtd_Geometry thePtr) -> Handle_TDataXtd_Geometry
        assign(Handle_TDataXtd_Geometry self, Handle_TDataXtd_Geometry theHandle) -> Handle_TDataXtd_Geometry

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TDataXtd_Geometry self) -> TDataXtd_Geometry

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TDataXtd_Geometry self) -> TDataXtd_Geometry

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_Geometry___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TDataXtd_Geometry self) -> TDataXtd_Geometry

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TDataXtd.Handle_TDataXtd_Geometry___ref__(self, *args)


    def __hash__(self):
        return _TDataXtd.Handle_TDataXtd_Geometry___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TDataXtd.Handle_TDataXtd_Geometry___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TDataXtd.new_Handle_TDataXtd_Geometry(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TDataXtd.Handle_TDataXtd_Geometry_DownCast)
    __swig_destroy__ = _TDataXtd.delete_Handle_TDataXtd_Geometry

    def Set(self, *args):
        """
        Set(Handle_TDataXtd_Geometry self, TDF_Label label) -> Handle_TDataXtd_Geometry

        API class methods
        =================
        Finds, or  creates, a Geometry attribute  defined by the label label.
        The default type of geometry is the value
        ANY_GEOM of the enumeration TDataXtd_GeometryEnum.
        To specify another value of this enumeration, use
        the function SetType.

        :type label: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Geometry

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_Set(self, *args)


    def Type(self, *args):
        """
        Type(Handle_TDataXtd_Geometry self, TDF_Label L) -> TDataXtd_GeometryEnum
        Type(Handle_TDataXtd_Geometry self, Handle_TNaming_NamedShape S) -> TDataXtd_GeometryEnum

        Returns the topological attribute S used to define
        the type of geometric construction for the geometry attribute.

        :type S: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
        :rtype: OCC.wrapper.TDataXtd.TDataXtd_GeometryEnum

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_Type(self, *args)


    def Point(self, *args):
        """
        Point(Handle_TDataXtd_Geometry self, TDF_Label L, gp_Pnt G) -> Standard_Boolean
        Point(Handle_TDataXtd_Geometry self, Handle_TNaming_NamedShape S, gp_Pnt G) -> Standard_Boolean

        Returns the point attribute defined by the topological attribute S and the point G.

        :type S: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
        :type G: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_Point(self, *args)


    def Axis(self, *args):
        """
        Axis(Handle_TDataXtd_Geometry self, TDF_Label L, gp_Ax1 G) -> Standard_Boolean
        Axis(Handle_TDataXtd_Geometry self, Handle_TNaming_NamedShape S, gp_Ax1 G) -> Standard_Boolean

        Returns the axis attribute defined by the topological attribute S and the axis G.

        :type S: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
        :type G: OCC.wrapper.gp.gp_Ax1
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_Axis(self, *args)


    def Line(self, *args):
        """
        Line(Handle_TDataXtd_Geometry self, TDF_Label L, gp_Lin G) -> Standard_Boolean
        Line(Handle_TDataXtd_Geometry self, Handle_TNaming_NamedShape S, gp_Lin G) -> Standard_Boolean

        Returns the line attribute defined by the topological attribute S and the line G.

        :type S: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
        :type G: OCC.wrapper.gp.gp_Lin
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_Line(self, *args)


    def Circle(self, *args):
        """
        Circle(Handle_TDataXtd_Geometry self, TDF_Label L, gp_Circ G) -> Standard_Boolean
        Circle(Handle_TDataXtd_Geometry self, Handle_TNaming_NamedShape S, gp_Circ G) -> Standard_Boolean

        Returns the circle attribute defined by the topological attribute S and the circle G.

        :type S: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
        :type G: OCC.wrapper.gp.gp_Circ
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_Circle(self, *args)


    def Ellipse(self, *args):
        """
        Ellipse(Handle_TDataXtd_Geometry self, TDF_Label L, gp_Elips G) -> Standard_Boolean
        Ellipse(Handle_TDataXtd_Geometry self, Handle_TNaming_NamedShape S, gp_Elips G) -> Standard_Boolean

        Returns the ellipse attribute defined by the
        topological attribute S and the ellipse G.

        :type S: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
        :type G: OCC.wrapper.gp.gp_Elips
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_Ellipse(self, *args)


    def Plane(self, *args):
        """
        Plane(Handle_TDataXtd_Geometry self, TDF_Label L, gp_Pln G) -> Standard_Boolean
        Plane(Handle_TDataXtd_Geometry self, Handle_TNaming_NamedShape S, gp_Pln G) -> Standard_Boolean

        Returns the plane attribute defined by the
        topological attribute S and the plane G.

        :type S: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
        :type G: OCC.wrapper.gp.gp_Pln
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_Plane(self, *args)


    def Cylinder(self, *args):
        """
        Cylinder(Handle_TDataXtd_Geometry self, TDF_Label L, gp_Cylinder G) -> Standard_Boolean
        Cylinder(Handle_TDataXtd_Geometry self, Handle_TNaming_NamedShape S, gp_Cylinder G) -> Standard_Boolean

        Returns the cylinder attribute defined by the
        topological attribute S and the cylinder G.

        :type S: OCC.wrapper.TNaming.Handle_TNaming_NamedShape
        :type G: OCC.wrapper.gp.gp_Cylinder
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_Cylinder(self, *args)


    def GetID(self, *args):
        """
        Returns the GUID for geometry attributes.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_Geometry_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetType(self, *args):
        """
        SetType(Handle_TDataXtd_Geometry self, TDataXtd_GeometryEnum const T)

        Returns the type of geometric construction T of this attribute.
        T will be a value of the enumeration TDataXtd_GeometryEnum.

        :type T: OCC.wrapper.TDataXtd.TDataXtd_GeometryEnum

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_SetType(self, *args)


    def GetType(self, *args):
        """
        GetType(Handle_TDataXtd_Geometry self) -> TDataXtd_GeometryEnum

        Returns the type of geometric construction.

        :rtype: OCC.wrapper.TDataXtd.TDataXtd_GeometryEnum

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_GetType(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_Geometry_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_TDataXtd_Geometry self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_TDataXtd_Geometry self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_TDataXtd_Geometry self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_TDataXtd_Geometry self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_Dump(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TDataXtd_Geometry self) -> char const *

        :rtype: const char *

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_Geometry_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_Geometry_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_TDataXtd_Geometry self, Standard_GUID arg2)
        SetID(Handle_TDataXtd_Geometry self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _TDataXtd.Handle_TDataXtd_Geometry_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_TDataXtd_Geometry self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_TDataXtd_Geometry self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_TDataXtd_Geometry self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_TDataXtd_Geometry self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_TDataXtd_Geometry self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_TDataXtd_Geometry self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_TDataXtd_Geometry self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_TDataXtd_Geometry self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_TDataXtd_Geometry self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_TDataXtd_Geometry self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_TDataXtd_Geometry self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_TDataXtd_Geometry self)

        Something to do after adding an Attribute to a label.


        """
        return _TDataXtd.Handle_TDataXtd_Geometry_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_TDataXtd_Geometry self)

        Something to do before removing an Attribute from
        a label.


        """
        return _TDataXtd.Handle_TDataXtd_Geometry_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_TDataXtd_Geometry self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _TDataXtd.Handle_TDataXtd_Geometry_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_TDataXtd_Geometry self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _TDataXtd.Handle_TDataXtd_Geometry_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_TDataXtd_Geometry self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_TDataXtd_Geometry self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_TDataXtd_Geometry self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_TDataXtd_Geometry self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _TDataXtd.Handle_TDataXtd_Geometry_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_TDataXtd_Geometry self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _TDataXtd.Handle_TDataXtd_Geometry_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_TDataXtd_Geometry self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_TDataXtd_Geometry self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_TDataXtd_Geometry self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_TDataXtd_Geometry self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_TDataXtd_Geometry self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_TDataXtd_Geometry self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_TDataXtd_Geometry self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_References(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_TDataXtd_Geometry self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.Handle_TDataXtd_Geometry___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_TDataXtd_Geometry self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_TDataXtd_Geometry self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_TDataXtd_Geometry self)

        Memory deallocator for transient classes


        """
        return _TDataXtd.Handle_TDataXtd_Geometry_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TDataXtd_Geometry self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TDataXtd_Geometry self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TDataXtd_Geometry self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TDataXtd_Geometry self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TDataXtd_Geometry self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TDataXtd_Geometry self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TDataXtd_Geometry self)

        Increments the reference counter of this object


        """
        return _TDataXtd.Handle_TDataXtd_Geometry_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TDataXtd_Geometry self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Geometry_DecrementRefCounter(self, *args)

Handle_TDataXtd_Geometry_swigregister = _TDataXtd.Handle_TDataXtd_Geometry_swigregister
Handle_TDataXtd_Geometry_swigregister(Handle_TDataXtd_Geometry)

def Handle_TDataXtd_Geometry_DownCast(thing):
    return _TDataXtd.Handle_TDataXtd_Geometry_DownCast(thing)
Handle_TDataXtd_Geometry_DownCast = _TDataXtd.Handle_TDataXtd_Geometry_DownCast

class TDataXtd_Presentation(TDF.TDF_Attribute):
    """
    Attribute containing parameters of presentation of the shape,
    e.g. the shape attached to the same label and displayed using 
    TPrsStd tools (see TPrsStd_AISPresentation).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TDataXtd_Presentation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TDataXtd_Presentation(self) 
            return h


    def __init__(self, *args):
        """
        __init__(TDataXtd_Presentation self) -> TDataXtd_Presentation

        Empty constructor


        """
        this = _TDataXtd.new_TDataXtd_Presentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(*args):
        """
        Set(TDF_Label theLabel, Standard_GUID theDriverId) -> Handle_TDataXtd_Presentation

        Create if not found the TDataXtd_Presentation attribute and set its driver GUID

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :type theDriverId: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Presentation

        """
        return _TDataXtd.TDataXtd_Presentation_Set(*args)

    Set = staticmethod(Set)

    def Unset(*args):
        """
        Unset(TDF_Label theLabel)

        Remove attribute of this type from the label

        :type theLabel: OCC.wrapper.TDF.TDF_Label

        """
        return _TDataXtd.TDataXtd_Presentation_Unset(*args)

    Unset = staticmethod(Unset)

    def ID(self, *args):
        """
        Returns the ID of the attribute.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.TDataXtd_Presentation_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetID(*args):
        """
        GetID() -> Standard_GUID

        Returns the ID of the attribute.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _TDataXtd.TDataXtd_Presentation_GetID(*args)

    GetID = staticmethod(GetID)

    def Restore(self, *args):
        """
        Restore(TDataXtd_Presentation self, Handle_TDF_Attribute anAttribute)

        Restores the contents from <anAttribute> into this
        one. It is used when aborting a transaction.

        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.TDataXtd_Presentation_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(TDataXtd_Presentation self) -> Handle_TDF_Attribute

        Returns an new empty attribute from the good end
        type. It is used by the copy algorithm.

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.TDataXtd_Presentation_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(TDataXtd_Presentation self, Handle_TDF_Attribute intoAttribute, Handle_TDF_RelocationTable aRelocTationable)

        This method is different from the "Copy" one,
        because it is used when copying an attribute from
        a source structure into a target structure. This
        method pastes the current attribute to the label
        corresponding to the insertor. The pasted
        attribute may be a brand new one or a new version
        of the previous one.

        :type intoAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type aRelocTationable: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TDataXtd.TDataXtd_Presentation_Paste(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(TDataXtd_Presentation self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.TDataXtd_Presentation_BackupCopy(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TDataXtd.TDataXtd_Presentation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TDataXtd.TDataXtd_Presentation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.TDataXtd_Presentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetDriverGUID(self, *args):
        """
        GetDriverGUID(TDataXtd_Presentation self) -> Standard_GUID

        Returns the GUID of the driver managing display of associated AIS object

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _TDataXtd.TDataXtd_Presentation_GetDriverGUID(self, *args)


    def SetDriverGUID(self, *args):
        """
        SetDriverGUID(TDataXtd_Presentation self, Standard_GUID theGUID)

        Sets the GUID of the driver managing display of associated AIS object

        :type theGUID: OCC.wrapper.Standard.Standard_GUID

        """
        return _TDataXtd.TDataXtd_Presentation_SetDriverGUID(self, *args)


    def IsDisplayed(self, *args):
        """
        IsDisplayed(TDataXtd_Presentation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.TDataXtd_Presentation_IsDisplayed(self, *args)


    def HasOwnMaterial(self, *args):
        """
        HasOwnMaterial(TDataXtd_Presentation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.TDataXtd_Presentation_HasOwnMaterial(self, *args)


    def HasOwnTransparency(self, *args):
        """
        HasOwnTransparency(TDataXtd_Presentation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.TDataXtd_Presentation_HasOwnTransparency(self, *args)


    def HasOwnColor(self, *args):
        """
        HasOwnColor(TDataXtd_Presentation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.TDataXtd_Presentation_HasOwnColor(self, *args)


    def HasOwnWidth(self, *args):
        """
        HasOwnWidth(TDataXtd_Presentation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.TDataXtd_Presentation_HasOwnWidth(self, *args)


    def HasOwnMode(self, *args):
        """
        HasOwnMode(TDataXtd_Presentation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.TDataXtd_Presentation_HasOwnMode(self, *args)


    def HasOwnSelectionMode(self, *args):
        """
        HasOwnSelectionMode(TDataXtd_Presentation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.TDataXtd_Presentation_HasOwnSelectionMode(self, *args)


    def SetDisplayed(self, *args):
        """
        SetDisplayed(TDataXtd_Presentation self, Standard_Boolean const theIsDisplayed)

        :type theIsDisplayed: bool

        """
        return _TDataXtd.TDataXtd_Presentation_SetDisplayed(self, *args)


    def SetMaterialIndex(self, *args):
        """
        SetMaterialIndex(TDataXtd_Presentation self, Standard_Integer const theMaterialIndex)

        :type theMaterialIndex: int

        """
        return _TDataXtd.TDataXtd_Presentation_SetMaterialIndex(self, *args)


    def SetTransparency(self, *args):
        """
        SetTransparency(TDataXtd_Presentation self, Standard_Real const theValue)

        :type theValue: float

        """
        return _TDataXtd.TDataXtd_Presentation_SetTransparency(self, *args)


    def SetColor(self, *args):
        """
        SetColor(TDataXtd_Presentation self, Quantity_NameOfColor const theColor)

        :type theColor: OCC.wrapper.Quantity.Quantity_NameOfColor

        """
        return _TDataXtd.TDataXtd_Presentation_SetColor(self, *args)


    def SetWidth(self, *args):
        """
        SetWidth(TDataXtd_Presentation self, Standard_Real const theWidth)

        :type theWidth: float

        """
        return _TDataXtd.TDataXtd_Presentation_SetWidth(self, *args)


    def SetMode(self, *args):
        """
        SetMode(TDataXtd_Presentation self, Standard_Integer const theMode)

        :type theMode: int

        """
        return _TDataXtd.TDataXtd_Presentation_SetMode(self, *args)


    def SetSelectionMode(self, *args):
        """
        SetSelectionMode(TDataXtd_Presentation self, Standard_Integer const theSelectionMode)

        :type theSelectionMode: int

        """
        return _TDataXtd.TDataXtd_Presentation_SetSelectionMode(self, *args)


    def MaterialIndex(self, *args):
        """
        MaterialIndex(TDataXtd_Presentation self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.TDataXtd_Presentation_MaterialIndex(self, *args)


    def Transparency(self, *args):
        """
        Transparency(TDataXtd_Presentation self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _TDataXtd.TDataXtd_Presentation_Transparency(self, *args)


    def Color(self, *args):
        """
        Color(TDataXtd_Presentation self) -> Quantity_NameOfColor

        :rtype: OCC.wrapper.Quantity.Quantity_NameOfColor

        """
        return _TDataXtd.TDataXtd_Presentation_Color(self, *args)


    def Width(self, *args):
        """
        Width(TDataXtd_Presentation self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _TDataXtd.TDataXtd_Presentation_Width(self, *args)


    def Mode(self, *args):
        """
        Mode(TDataXtd_Presentation self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.TDataXtd_Presentation_Mode(self, *args)


    def SelectionMode(self, *args):
        """
        SelectionMode(TDataXtd_Presentation self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.TDataXtd_Presentation_SelectionMode(self, *args)


    def UnsetMaterial(self, *args):
        """UnsetMaterial(TDataXtd_Presentation self)"""
        return _TDataXtd.TDataXtd_Presentation_UnsetMaterial(self, *args)


    def UnsetTransparency(self, *args):
        """UnsetTransparency(TDataXtd_Presentation self)"""
        return _TDataXtd.TDataXtd_Presentation_UnsetTransparency(self, *args)


    def UnsetColor(self, *args):
        """UnsetColor(TDataXtd_Presentation self)"""
        return _TDataXtd.TDataXtd_Presentation_UnsetColor(self, *args)


    def UnsetWidth(self, *args):
        """UnsetWidth(TDataXtd_Presentation self)"""
        return _TDataXtd.TDataXtd_Presentation_UnsetWidth(self, *args)


    def UnsetMode(self, *args):
        """UnsetMode(TDataXtd_Presentation self)"""
        return _TDataXtd.TDataXtd_Presentation_UnsetMode(self, *args)


    def UnsetSelectionMode(self, *args):
        """UnsetSelectionMode(TDataXtd_Presentation self)"""
        return _TDataXtd.TDataXtd_Presentation_UnsetSelectionMode(self, *args)

    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Presentation
TDataXtd_Presentation_swigregister = _TDataXtd.TDataXtd_Presentation_swigregister
TDataXtd_Presentation_swigregister(TDataXtd_Presentation)

def TDataXtd_Presentation_Set(*args):
    """
    TDataXtd_Presentation_Set(TDF_Label theLabel, Standard_GUID theDriverId) -> Handle_TDataXtd_Presentation

    Create if not found the TDataXtd_Presentation attribute and set its driver GUID

    :type theLabel: OCC.wrapper.TDF.TDF_Label
    :type theDriverId: OCC.wrapper.Standard.Standard_GUID
    :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Presentation

    """
    return _TDataXtd.TDataXtd_Presentation_Set(*args)

def TDataXtd_Presentation_Unset(*args):
    """
    TDataXtd_Presentation_Unset(TDF_Label theLabel)

    Remove attribute of this type from the label

    :type theLabel: OCC.wrapper.TDF.TDF_Label

    """
    return _TDataXtd.TDataXtd_Presentation_Unset(*args)

def TDataXtd_Presentation_GetID(*args):
    """
    TDataXtd_Presentation_GetID() -> Standard_GUID

    Returns the ID of the attribute.

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _TDataXtd.TDataXtd_Presentation_GetID(*args)

def TDataXtd_Presentation_get_type_name(*args):
    """
    TDataXtd_Presentation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TDataXtd.TDataXtd_Presentation_get_type_name(*args)

def TDataXtd_Presentation_get_type_descriptor(*args):
    """
    TDataXtd_Presentation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TDataXtd.TDataXtd_Presentation_get_type_descriptor(*args)

class TDataXtd_Axis(TDF.TDF_Attribute):
    """
    The basis to define an axis attribute.

    Warning: Use TDataXtd_Geometry  attribute  to retrieve  the
    gp_Lin of the Axis attribute
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TDataXtd_Axis
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TDataXtd_Axis(self) 
            return h


    def GetID(*args):
        """
        GetID() -> Standard_GUID

        class methods
        =============
        Returns the GUID for an axis.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _TDataXtd.TDataXtd_Axis_GetID(*args)

    GetID = staticmethod(GetID)

    def Set(*args):
        """
        Set(TDF_Label label) -> Handle_TDataXtd_Axis
        Set(TDF_Label label, gp_Lin L) -> Handle_TDataXtd_Axis

        Find,  or create,  an Axis  attribute  and set <P>  as
        generated in the associated NamedShape.
        Axis methods
        ============

        :type label: OCC.wrapper.TDF.TDF_Label
        :type L: OCC.wrapper.gp.gp_Lin
        :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Axis

        """
        return _TDataXtd.TDataXtd_Axis_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        __init__(TDataXtd_Axis self) -> TDataXtd_Axis

        The basis to define an axis attribute.

        Warning: Use TDataXtd_Geometry  attribute  to retrieve  the
        gp_Lin of the Axis attribute
        """
        this = _TDataXtd.new_TDataXtd_Axis(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.TDataXtd_Axis_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(TDataXtd_Axis self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.TDataXtd_Axis_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(TDataXtd_Axis self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.TDataXtd_Axis_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(TDataXtd_Axis self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TDataXtd.TDataXtd_Axis_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(TDataXtd_Axis self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.TDataXtd_Axis_Dump(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TDataXtd.TDataXtd_Axis_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TDataXtd.TDataXtd_Axis_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.TDataXtd_Axis_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Axis
TDataXtd_Axis_swigregister = _TDataXtd.TDataXtd_Axis_swigregister
TDataXtd_Axis_swigregister(TDataXtd_Axis)

def TDataXtd_Axis_GetID(*args):
    """
    TDataXtd_Axis_GetID() -> Standard_GUID

    class methods
    =============
    Returns the GUID for an axis.

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _TDataXtd.TDataXtd_Axis_GetID(*args)

def TDataXtd_Axis_Set(*args):
    """
    Set(TDF_Label label) -> Handle_TDataXtd_Axis
    TDataXtd_Axis_Set(TDF_Label label, gp_Lin L) -> Handle_TDataXtd_Axis

    Find,  or create,  an Axis  attribute  and set <P>  as
    generated in the associated NamedShape.
    Axis methods
    ============

    :type label: OCC.wrapper.TDF.TDF_Label
    :type L: OCC.wrapper.gp.gp_Lin
    :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Axis

    """
    return _TDataXtd.TDataXtd_Axis_Set(*args)

def TDataXtd_Axis_get_type_name(*args):
    """
    TDataXtd_Axis_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TDataXtd.TDataXtd_Axis_get_type_name(*args)

def TDataXtd_Axis_get_type_descriptor(*args):
    """
    TDataXtd_Axis_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TDataXtd.TDataXtd_Axis_get_type_descriptor(*args)

class Handle_TDataXtd_Placement(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TDataXtd_Placement self)

        Nullify the handle


        """
        return _TDataXtd.Handle_TDataXtd_Placement_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TDataXtd_Placement self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TDataXtd.Handle_TDataXtd_Placement_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TDataXtd_Placement self, TDataXtd_Placement thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TDataXtd.Handle_TDataXtd_Placement_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TDataXtd_Placement self, Handle_TDataXtd_Placement theHandle) -> Handle_TDataXtd_Placement
        assign(Handle_TDataXtd_Placement self, TDataXtd_Placement thePtr) -> Handle_TDataXtd_Placement
        assign(Handle_TDataXtd_Placement self, Handle_TDataXtd_Placement theHandle) -> Handle_TDataXtd_Placement

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TDataXtd.Handle_TDataXtd_Placement_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TDataXtd_Placement self) -> TDataXtd_Placement

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_Placement_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TDataXtd_Placement self) -> TDataXtd_Placement

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_Placement___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TDataXtd_Placement self) -> TDataXtd_Placement

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TDataXtd.Handle_TDataXtd_Placement___ref__(self, *args)


    def __hash__(self):
        return _TDataXtd.Handle_TDataXtd_Placement___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TDataXtd.Handle_TDataXtd_Placement___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TDataXtd.new_Handle_TDataXtd_Placement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TDataXtd.Handle_TDataXtd_Placement_DownCast)
    __swig_destroy__ = _TDataXtd.delete_Handle_TDataXtd_Placement

    def GetID(self, *args):
        """
        class methods
        =============

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_Placement_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_TDataXtd_Placement self, TDF_Label label) -> Handle_TDataXtd_Placement

        Find, or    create,   an Placement  attribute.     the
        Placement attribute is returned.
        Placement methods
        =================

        :type label: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Placement

        """
        return _TDataXtd.Handle_TDataXtd_Placement_Set(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_Placement_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_TDataXtd_Placement self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Placement_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_TDataXtd_Placement self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Placement_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_TDataXtd_Placement self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TDataXtd.Handle_TDataXtd_Placement_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_TDataXtd_Placement self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.Handle_TDataXtd_Placement_Dump(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TDataXtd_Placement self) -> char const *

        :rtype: const char *

        """
        return _TDataXtd.Handle_TDataXtd_Placement_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_Placement_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_Placement_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_TDataXtd_Placement self, Standard_GUID arg2)
        SetID(Handle_TDataXtd_Placement self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _TDataXtd.Handle_TDataXtd_Placement_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_TDataXtd_Placement self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _TDataXtd.Handle_TDataXtd_Placement_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_TDataXtd_Placement self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Placement_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_TDataXtd_Placement self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Placement_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_TDataXtd_Placement self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Placement_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_TDataXtd_Placement self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Placement_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_TDataXtd_Placement self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Placement_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_TDataXtd_Placement self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Placement_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_TDataXtd_Placement self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Placement_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_TDataXtd_Placement self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Placement_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_TDataXtd_Placement self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Placement_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_TDataXtd_Placement self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _TDataXtd.Handle_TDataXtd_Placement_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_TDataXtd_Placement self)

        Something to do after adding an Attribute to a label.


        """
        return _TDataXtd.Handle_TDataXtd_Placement_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_TDataXtd_Placement self)

        Something to do before removing an Attribute from
        a label.


        """
        return _TDataXtd.Handle_TDataXtd_Placement_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_TDataXtd_Placement self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _TDataXtd.Handle_TDataXtd_Placement_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_TDataXtd_Placement self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _TDataXtd.Handle_TDataXtd_Placement_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_TDataXtd_Placement self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Placement_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_TDataXtd_Placement self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Placement_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_TDataXtd_Placement self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Placement_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_TDataXtd_Placement self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _TDataXtd.Handle_TDataXtd_Placement_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_TDataXtd_Placement self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _TDataXtd.Handle_TDataXtd_Placement_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_TDataXtd_Placement self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Placement_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_TDataXtd_Placement self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Placement_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_TDataXtd_Placement self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _TDataXtd.Handle_TDataXtd_Placement_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_TDataXtd_Placement self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _TDataXtd.Handle_TDataXtd_Placement_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_TDataXtd_Placement self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _TDataXtd.Handle_TDataXtd_Placement_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_TDataXtd_Placement self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _TDataXtd.Handle_TDataXtd_Placement_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_TDataXtd_Placement self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _TDataXtd.Handle_TDataXtd_Placement_References(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_TDataXtd_Placement self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.Handle_TDataXtd_Placement___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_TDataXtd_Placement self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _TDataXtd.Handle_TDataXtd_Placement_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_TDataXtd_Placement self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _TDataXtd.Handle_TDataXtd_Placement_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_TDataXtd_Placement self)

        Memory deallocator for transient classes


        """
        return _TDataXtd.Handle_TDataXtd_Placement_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TDataXtd_Placement self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TDataXtd_Placement self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Placement_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TDataXtd_Placement self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TDataXtd_Placement self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Placement_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TDataXtd_Placement self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TDataXtd.Handle_TDataXtd_Placement_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TDataXtd_Placement self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Placement_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TDataXtd_Placement self)

        Increments the reference counter of this object


        """
        return _TDataXtd.Handle_TDataXtd_Placement_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TDataXtd_Placement self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Placement_DecrementRefCounter(self, *args)

Handle_TDataXtd_Placement_swigregister = _TDataXtd.Handle_TDataXtd_Placement_swigregister
Handle_TDataXtd_Placement_swigregister(Handle_TDataXtd_Placement)

def Handle_TDataXtd_Placement_DownCast(thing):
    return _TDataXtd.Handle_TDataXtd_Placement_DownCast(thing)
Handle_TDataXtd_Placement_DownCast = _TDataXtd.Handle_TDataXtd_Placement_DownCast

class Handle_TDataXtd_Axis(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TDataXtd_Axis self)

        Nullify the handle


        """
        return _TDataXtd.Handle_TDataXtd_Axis_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TDataXtd_Axis self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TDataXtd.Handle_TDataXtd_Axis_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TDataXtd_Axis self, TDataXtd_Axis thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TDataXtd.Handle_TDataXtd_Axis_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TDataXtd_Axis self, Handle_TDataXtd_Axis theHandle) -> Handle_TDataXtd_Axis
        assign(Handle_TDataXtd_Axis self, TDataXtd_Axis thePtr) -> Handle_TDataXtd_Axis
        assign(Handle_TDataXtd_Axis self, Handle_TDataXtd_Axis theHandle) -> Handle_TDataXtd_Axis

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TDataXtd.Handle_TDataXtd_Axis_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TDataXtd_Axis self) -> TDataXtd_Axis

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_Axis_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TDataXtd_Axis self) -> TDataXtd_Axis

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_Axis___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TDataXtd_Axis self) -> TDataXtd_Axis

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TDataXtd.Handle_TDataXtd_Axis___ref__(self, *args)


    def __hash__(self):
        return _TDataXtd.Handle_TDataXtd_Axis___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TDataXtd.Handle_TDataXtd_Axis___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TDataXtd.new_Handle_TDataXtd_Axis(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TDataXtd.Handle_TDataXtd_Axis_DownCast)
    __swig_destroy__ = _TDataXtd.delete_Handle_TDataXtd_Axis

    def GetID(self, *args):
        """
        class methods
        =============
        Returns the GUID for an axis.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_Axis_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_TDataXtd_Axis self, TDF_Label label) -> Handle_TDataXtd_Axis
        Set(Handle_TDataXtd_Axis self, TDF_Label label, gp_Lin L) -> Handle_TDataXtd_Axis

        Find,  or create,  an Axis  attribute  and set <P>  as
        generated in the associated NamedShape.
        Axis methods
        ============

        :type label: OCC.wrapper.TDF.TDF_Label
        :type L: OCC.wrapper.gp.gp_Lin
        :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Axis

        """
        return _TDataXtd.Handle_TDataXtd_Axis_Set(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_Axis_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_TDataXtd_Axis self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Axis_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_TDataXtd_Axis self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Axis_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_TDataXtd_Axis self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TDataXtd.Handle_TDataXtd_Axis_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_TDataXtd_Axis self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.Handle_TDataXtd_Axis_Dump(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TDataXtd_Axis self) -> char const *

        :rtype: const char *

        """
        return _TDataXtd.Handle_TDataXtd_Axis_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_Axis_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_Axis_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_TDataXtd_Axis self, Standard_GUID arg2)
        SetID(Handle_TDataXtd_Axis self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _TDataXtd.Handle_TDataXtd_Axis_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_TDataXtd_Axis self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _TDataXtd.Handle_TDataXtd_Axis_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_TDataXtd_Axis self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Axis_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_TDataXtd_Axis self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Axis_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_TDataXtd_Axis self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Axis_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_TDataXtd_Axis self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Axis_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_TDataXtd_Axis self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Axis_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_TDataXtd_Axis self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Axis_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_TDataXtd_Axis self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Axis_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_TDataXtd_Axis self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Axis_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_TDataXtd_Axis self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Axis_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_TDataXtd_Axis self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _TDataXtd.Handle_TDataXtd_Axis_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_TDataXtd_Axis self)

        Something to do after adding an Attribute to a label.


        """
        return _TDataXtd.Handle_TDataXtd_Axis_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_TDataXtd_Axis self)

        Something to do before removing an Attribute from
        a label.


        """
        return _TDataXtd.Handle_TDataXtd_Axis_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_TDataXtd_Axis self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _TDataXtd.Handle_TDataXtd_Axis_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_TDataXtd_Axis self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _TDataXtd.Handle_TDataXtd_Axis_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_TDataXtd_Axis self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Axis_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_TDataXtd_Axis self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Axis_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_TDataXtd_Axis self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Axis_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_TDataXtd_Axis self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _TDataXtd.Handle_TDataXtd_Axis_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_TDataXtd_Axis self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _TDataXtd.Handle_TDataXtd_Axis_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_TDataXtd_Axis self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Axis_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_TDataXtd_Axis self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Axis_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_TDataXtd_Axis self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _TDataXtd.Handle_TDataXtd_Axis_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_TDataXtd_Axis self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _TDataXtd.Handle_TDataXtd_Axis_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_TDataXtd_Axis self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _TDataXtd.Handle_TDataXtd_Axis_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_TDataXtd_Axis self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _TDataXtd.Handle_TDataXtd_Axis_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_TDataXtd_Axis self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _TDataXtd.Handle_TDataXtd_Axis_References(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_TDataXtd_Axis self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.Handle_TDataXtd_Axis___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_TDataXtd_Axis self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _TDataXtd.Handle_TDataXtd_Axis_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_TDataXtd_Axis self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _TDataXtd.Handle_TDataXtd_Axis_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_TDataXtd_Axis self)

        Memory deallocator for transient classes


        """
        return _TDataXtd.Handle_TDataXtd_Axis_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TDataXtd_Axis self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TDataXtd_Axis self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Axis_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TDataXtd_Axis self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TDataXtd_Axis self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Axis_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TDataXtd_Axis self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TDataXtd.Handle_TDataXtd_Axis_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TDataXtd_Axis self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Axis_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TDataXtd_Axis self)

        Increments the reference counter of this object


        """
        return _TDataXtd.Handle_TDataXtd_Axis_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TDataXtd_Axis self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Axis_DecrementRefCounter(self, *args)

Handle_TDataXtd_Axis_swigregister = _TDataXtd.Handle_TDataXtd_Axis_swigregister
Handle_TDataXtd_Axis_swigregister(Handle_TDataXtd_Axis)

def Handle_TDataXtd_Axis_DownCast(thing):
    return _TDataXtd.Handle_TDataXtd_Axis_DownCast(thing)
Handle_TDataXtd_Axis_DownCast = _TDataXtd.Handle_TDataXtd_Axis_DownCast

class Handle_TDataXtd_Position(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TDataXtd_Position self)

        Nullify the handle


        """
        return _TDataXtd.Handle_TDataXtd_Position_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TDataXtd_Position self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TDataXtd.Handle_TDataXtd_Position_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TDataXtd_Position self, TDataXtd_Position thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TDataXtd.Handle_TDataXtd_Position_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TDataXtd_Position self, Handle_TDataXtd_Position theHandle) -> Handle_TDataXtd_Position
        assign(Handle_TDataXtd_Position self, TDataXtd_Position thePtr) -> Handle_TDataXtd_Position
        assign(Handle_TDataXtd_Position self, Handle_TDataXtd_Position theHandle) -> Handle_TDataXtd_Position

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TDataXtd.Handle_TDataXtd_Position_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TDataXtd_Position self) -> TDataXtd_Position

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_Position_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TDataXtd_Position self) -> TDataXtd_Position

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_Position___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TDataXtd_Position self) -> TDataXtd_Position

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TDataXtd.Handle_TDataXtd_Position___ref__(self, *args)


    def __hash__(self):
        return _TDataXtd.Handle_TDataXtd_Position___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TDataXtd.Handle_TDataXtd_Position___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TDataXtd.new_Handle_TDataXtd_Position(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TDataXtd.Handle_TDataXtd_Position_DownCast)
    __swig_destroy__ = _TDataXtd.delete_Handle_TDataXtd_Position

    def Set(self, *args):
        """
        Set(Handle_TDataXtd_Position self, TDF_Label aLabel, gp_Pnt aPos)
        Set(Handle_TDataXtd_Position self, TDF_Label aLabel) -> Handle_TDataXtd_Position

        Find an existing, or create an empty, Position.
        the Position attribute is returned.

        :type aLabel: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Position

        """
        return _TDataXtd.Handle_TDataXtd_Position_Set(self, *args)


    def Get(self, *args):
        """
        Get(Handle_TDataXtd_Position self, TDF_Label aLabel, gp_Pnt aPos) -> Standard_Boolean

        Search label <aLabel) for the TDataXtd_Position attribute and get its position
        if found returns True

        :type aLabel: OCC.wrapper.TDF.TDF_Label
        :type aPos: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Position_Get(self, *args)


    def ID(self, *args):
        """
        Returns the ID of the attribute.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_Position_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetID(self, *args):
        """
        Returns the ID of the attribute.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_Position_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_TDataXtd_Position self, Handle_TDF_Attribute anAttribute)

        Restores the contents from <anAttribute> into this
        one. It is used when aborting a transaction.

        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Position_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_TDataXtd_Position self) -> Handle_TDF_Attribute

        Returns an new empty attribute from the good end
        type. It is used by the copy algorithm.

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Position_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_TDataXtd_Position self, Handle_TDF_Attribute intoAttribute, Handle_TDF_RelocationTable aRelocTationable)

        This method is different from the "Copy" one,
        because it is used when copying an attribute from
        a source structure into a target structure. This
        method pastes the current attribute to the label
        corresponding to the insertor. The pasted
        attribute may be a brand new one or a new version
        of the previous one.

        :type intoAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type aRelocTationable: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TDataXtd.Handle_TDataXtd_Position_Paste(self, *args)


    def GetPosition(self, *args):
        """
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _TDataXtd.Handle_TDataXtd_Position_GetPosition(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetPosition(self, *args):
        """
        SetPosition(Handle_TDataXtd_Position self, gp_Pnt aPos)

        :type aPos: OCC.wrapper.gp.gp_Pnt

        """
        return _TDataXtd.Handle_TDataXtd_Position_SetPosition(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TDataXtd_Position self) -> char const *

        :rtype: const char *

        """
        return _TDataXtd.Handle_TDataXtd_Position_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_Position_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_Position_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_TDataXtd_Position self, Standard_GUID arg2)
        SetID(Handle_TDataXtd_Position self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _TDataXtd.Handle_TDataXtd_Position_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_TDataXtd_Position self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _TDataXtd.Handle_TDataXtd_Position_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_TDataXtd_Position self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Position_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_TDataXtd_Position self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Position_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_TDataXtd_Position self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Position_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_TDataXtd_Position self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Position_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_TDataXtd_Position self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Position_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_TDataXtd_Position self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Position_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_TDataXtd_Position self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Position_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_TDataXtd_Position self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Position_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_TDataXtd_Position self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Position_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_TDataXtd_Position self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _TDataXtd.Handle_TDataXtd_Position_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_TDataXtd_Position self)

        Something to do after adding an Attribute to a label.


        """
        return _TDataXtd.Handle_TDataXtd_Position_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_TDataXtd_Position self)

        Something to do before removing an Attribute from
        a label.


        """
        return _TDataXtd.Handle_TDataXtd_Position_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_TDataXtd_Position self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _TDataXtd.Handle_TDataXtd_Position_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_TDataXtd_Position self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _TDataXtd.Handle_TDataXtd_Position_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_TDataXtd_Position self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Position_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_TDataXtd_Position self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Position_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_TDataXtd_Position self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Position_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_TDataXtd_Position self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _TDataXtd.Handle_TDataXtd_Position_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_TDataXtd_Position self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _TDataXtd.Handle_TDataXtd_Position_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_TDataXtd_Position self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Position_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_TDataXtd_Position self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Position_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_TDataXtd_Position self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _TDataXtd.Handle_TDataXtd_Position_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_TDataXtd_Position self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _TDataXtd.Handle_TDataXtd_Position_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_TDataXtd_Position self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _TDataXtd.Handle_TDataXtd_Position_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_TDataXtd_Position self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _TDataXtd.Handle_TDataXtd_Position_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_TDataXtd_Position self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _TDataXtd.Handle_TDataXtd_Position_References(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_TDataXtd_Position self, Standard_OStream & anOS) -> Standard_OStream &

        Dumps the minimum information about <me> on
        <aStream>.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.Handle_TDataXtd_Position_Dump(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_TDataXtd_Position self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.Handle_TDataXtd_Position___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_TDataXtd_Position self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _TDataXtd.Handle_TDataXtd_Position_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_TDataXtd_Position self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _TDataXtd.Handle_TDataXtd_Position_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_TDataXtd_Position self)

        Memory deallocator for transient classes


        """
        return _TDataXtd.Handle_TDataXtd_Position_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TDataXtd_Position self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TDataXtd_Position self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Position_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TDataXtd_Position self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TDataXtd_Position self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Position_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TDataXtd_Position self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TDataXtd.Handle_TDataXtd_Position_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TDataXtd_Position self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Position_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TDataXtd_Position self)

        Increments the reference counter of this object


        """
        return _TDataXtd.Handle_TDataXtd_Position_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TDataXtd_Position self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Position_DecrementRefCounter(self, *args)

Handle_TDataXtd_Position_swigregister = _TDataXtd.Handle_TDataXtd_Position_swigregister
Handle_TDataXtd_Position_swigregister(Handle_TDataXtd_Position)

def Handle_TDataXtd_Position_DownCast(thing):
    return _TDataXtd.Handle_TDataXtd_Position_DownCast(thing)
Handle_TDataXtd_Position_DownCast = _TDataXtd.Handle_TDataXtd_Position_DownCast

class TDataXtd_Triangulation(TDF.TDF_Attribute):
    """
    An Ocaf attribute containing a mesh (Poly_Triangulation).
    It duplicates all methods from Poly_Triangulation.
    It is highly recommended to modify the mesh through the methods of this attribute,
    but not directly via the underlying Poly_Triangulation object.
    In this case Undo/Redo will work fine and robust.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TDataXtd_Triangulation
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TDataXtd_Triangulation(self) 
            return h


    def GetID(*args):
        """
        GetID() -> Standard_GUID

        Returns the ID of the triangulation attribute.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _TDataXtd.TDataXtd_Triangulation_GetID(*args)

    GetID = staticmethod(GetID)

    def __init__(self, *args):
        """
        __init__(TDataXtd_Triangulation self) -> TDataXtd_Triangulation

        A constructor.
        Don't use it directly, 
        use please the static method Set(),
        which returns the attribute attached to a label.


        """
        this = _TDataXtd.new_TDataXtd_Triangulation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Set(self, *args):
        """
        Set(TDataXtd_Triangulation self, TDF_Label theLabel) -> Handle_TDataXtd_Triangulation
        Set(TDataXtd_Triangulation self, TDF_Label theLabel, Handle_Poly_Triangulation theTriangulation) -> Handle_TDataXtd_Triangulation
        Set(TDataXtd_Triangulation self, Handle_Poly_Triangulation theTriangulation)

        Sets the triangulation.

        :type theTriangulation: OCC.wrapper.Poly.Handle_Poly_Triangulation

        """
        return _TDataXtd.TDataXtd_Triangulation_Set(self, *args)


    def Get(self, *args):
        """
        Returns the underlying triangulation.

        :rtype: OCC.wrapper.Poly.Handle_Poly_Triangulation

        """
        res = _TDataXtd.TDataXtd_Triangulation_Get(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Deflection(self, *args):
        """
        Deflection(TDataXtd_Triangulation self) -> Standard_Real
        Deflection(TDataXtd_Triangulation self, Standard_Real const theDeflection)

        Sets the deflection of this triangulation to theDeflection.
        See more on deflection in Polygon2D

        :type theDeflection: float

        """
        return _TDataXtd.TDataXtd_Triangulation_Deflection(self, *args)


    def RemoveUVNodes(self, *args):
        """
        RemoveUVNodes(TDataXtd_Triangulation self)

        Deallocates the UV nodes.


        """
        return _TDataXtd.TDataXtd_Triangulation_RemoveUVNodes(self, *args)


    def NbNodes(self, *args):
        """
        NbNodes(TDataXtd_Triangulation self) -> Standard_Integer

        @return the number of nodes for this triangulation.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.TDataXtd_Triangulation_NbNodes(self, *args)


    def NbTriangles(self, *args):
        """
        NbTriangles(TDataXtd_Triangulation self) -> Standard_Integer

        @return the number of triangles for this triangulation.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.TDataXtd_Triangulation_NbTriangles(self, *args)


    def HasUVNodes(self, *args):
        """
        HasUVNodes(TDataXtd_Triangulation self) -> Standard_Boolean

        @return Standard_True if 2D nodes are associated with 3D nodes for this triangulation.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.TDataXtd_Triangulation_HasUVNodes(self, *args)


    def Node(self, *args):
        """
        @return node at the given index.
        Raises Standard_OutOfRange exception if theIndex is less than 1 or greater than NbNodes.

        :type theIndex: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _TDataXtd.TDataXtd_Triangulation_Node(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetNode(self, *args):
        """
        SetNode(TDataXtd_Triangulation self, Standard_Integer const theIndex, gp_Pnt theNode)

        The method differs from Poly_Triangulation!
        Sets a node at the given index.
        Raises Standard_OutOfRange exception if theIndex is less than 1 or greater than NbNodes.

        :type theIndex: int
        :type theNode: OCC.wrapper.gp.gp_Pnt

        """
        return _TDataXtd.TDataXtd_Triangulation_SetNode(self, *args)


    def UVNode(self, *args):
        """
        @return UVNode at the given index.
        Raises Standard_OutOfRange exception if theIndex is less than 1 or greater than NbNodes.

        :type theIndex: int
        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        res = _TDataXtd.TDataXtd_Triangulation_UVNode(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetUVNode(self, *args):
        """
        SetUVNode(TDataXtd_Triangulation self, Standard_Integer const theIndex, gp_Pnt2d theUVNode)

        The method differs from Poly_Triangulation!
        Sets a UVNode at the given index.
        Raises Standard_OutOfRange exception if theIndex is less than 1 or greater than NbNodes.

        :type theIndex: int
        :type theUVNode: OCC.wrapper.gp.gp_Pnt2d

        """
        return _TDataXtd.TDataXtd_Triangulation_SetUVNode(self, *args)


    def Triangle(self, *args):
        """
        @return triangle at the given index.
        Raises Standard_OutOfRange exception if theIndex is less than 1 or greater than NbTriangles.

        :type theIndex: int
        :rtype: OCC.wrapper.Poly.Poly_Triangle

        """
        res = _TDataXtd.TDataXtd_Triangulation_Triangle(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTriangle(self, *args):
        """
        SetTriangle(TDataXtd_Triangulation self, Standard_Integer const theIndex, Poly_Triangle theTriangle)

        The method differs from Poly_Triangulation!
        Sets a triangle at the given index.
        Raises Standard_OutOfRange exception if theIndex is less than 1 or greater than NbTriangles.

        :type theIndex: int
        :type theTriangle: OCC.wrapper.Poly.Poly_Triangle

        """
        return _TDataXtd.TDataXtd_Triangulation_SetTriangle(self, *args)


    def SetNormals(self, *args):
        """
        SetNormals(TDataXtd_Triangulation self, Handle_TShort_HArray1OfShortReal theNormals)

        Sets the table of node normals.
        Raises exception if length of theNormals != 3 * NbNodes

        :type theNormals: OCC.wrapper.TShort.Handle_TShort_HArray1OfShortReal

        """
        return _TDataXtd.TDataXtd_Triangulation_SetNormals(self, *args)


    def SetNormal(self, *args):
        """
        SetNormal(TDataXtd_Triangulation self, Standard_Integer const theIndex, gp_Dir theNormal)

        Changes normal at the given index.
        Raises Standard_OutOfRange exception.

        :type theIndex: int
        :type theNormal: OCC.wrapper.gp.gp_Dir

        """
        return _TDataXtd.TDataXtd_Triangulation_SetNormal(self, *args)


    def HasNormals(self, *args):
        """
        HasNormals(TDataXtd_Triangulation self) -> Standard_Boolean

        Returns Standard_True if nodal normals are defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.TDataXtd_Triangulation_HasNormals(self, *args)


    def Normal(self, *args):
        """
        Normal(TDataXtd_Triangulation self, Standard_Integer const theIndex) -> gp_Dir

        @return normal at the given index.
        Raises Standard_OutOfRange exception.

        :type theIndex: int
        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _TDataXtd.TDataXtd_Triangulation_Normal(self, *args)


    def ID(self, *args):
        """
        Inherited attribute methods

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.TDataXtd_Triangulation_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(TDataXtd_Triangulation self, Handle_TDF_Attribute theAttribute)

        :type theAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.TDataXtd_Triangulation_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(TDataXtd_Triangulation self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.TDataXtd_Triangulation_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(TDataXtd_Triangulation self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TDataXtd.TDataXtd_Triangulation_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(TDataXtd_Triangulation self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.TDataXtd_Triangulation_Dump(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TDataXtd.TDataXtd_Triangulation_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TDataXtd.TDataXtd_Triangulation_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.TDataXtd_Triangulation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Triangulation
TDataXtd_Triangulation_swigregister = _TDataXtd.TDataXtd_Triangulation_swigregister
TDataXtd_Triangulation_swigregister(TDataXtd_Triangulation)

def TDataXtd_Triangulation_GetID(*args):
    """
    TDataXtd_Triangulation_GetID() -> Standard_GUID

    Returns the ID of the triangulation attribute.

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _TDataXtd.TDataXtd_Triangulation_GetID(*args)

def TDataXtd_Triangulation_get_type_name(*args):
    """
    TDataXtd_Triangulation_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TDataXtd.TDataXtd_Triangulation_get_type_name(*args)

def TDataXtd_Triangulation_get_type_descriptor(*args):
    """
    TDataXtd_Triangulation_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TDataXtd.TDataXtd_Triangulation_get_type_descriptor(*args)

class Handle_TDataXtd_Presentation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TDataXtd_Presentation self)

        Nullify the handle


        """
        return _TDataXtd.Handle_TDataXtd_Presentation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TDataXtd_Presentation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TDataXtd_Presentation self, TDataXtd_Presentation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TDataXtd_Presentation self, Handle_TDataXtd_Presentation theHandle) -> Handle_TDataXtd_Presentation
        assign(Handle_TDataXtd_Presentation self, TDataXtd_Presentation thePtr) -> Handle_TDataXtd_Presentation
        assign(Handle_TDataXtd_Presentation self, Handle_TDataXtd_Presentation theHandle) -> Handle_TDataXtd_Presentation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TDataXtd_Presentation self) -> TDataXtd_Presentation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TDataXtd_Presentation self) -> TDataXtd_Presentation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_Presentation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TDataXtd_Presentation self) -> TDataXtd_Presentation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TDataXtd.Handle_TDataXtd_Presentation___ref__(self, *args)


    def __hash__(self):
        return _TDataXtd.Handle_TDataXtd_Presentation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TDataXtd.Handle_TDataXtd_Presentation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TDataXtd.new_Handle_TDataXtd_Presentation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TDataXtd.Handle_TDataXtd_Presentation_DownCast)
    __swig_destroy__ = _TDataXtd.delete_Handle_TDataXtd_Presentation

    def Set(self, *args):
        """
        Set(Handle_TDataXtd_Presentation self, TDF_Label theLabel, Standard_GUID theDriverId) -> Handle_TDataXtd_Presentation

        Create if not found the TDataXtd_Presentation attribute and set its driver GUID

        :type theLabel: OCC.wrapper.TDF.TDF_Label
        :type theDriverId: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Presentation

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_Set(self, *args)


    def Unset(self, *args):
        """
        Unset(Handle_TDataXtd_Presentation self, TDF_Label theLabel)

        Remove attribute of this type from the label

        :type theLabel: OCC.wrapper.TDF.TDF_Label

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_Unset(self, *args)


    def ID(self, *args):
        """
        Returns the ID of the attribute.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_Presentation_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetID(self, *args):
        """
        Returns the ID of the attribute.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_Presentation_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_TDataXtd_Presentation self, Handle_TDF_Attribute anAttribute)

        Restores the contents from <anAttribute> into this
        one. It is used when aborting a transaction.

        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_TDataXtd_Presentation self) -> Handle_TDF_Attribute

        Returns an new empty attribute from the good end
        type. It is used by the copy algorithm.

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_TDataXtd_Presentation self, Handle_TDF_Attribute intoAttribute, Handle_TDF_RelocationTable aRelocTationable)

        This method is different from the "Copy" one,
        because it is used when copying an attribute from
        a source structure into a target structure. This
        method pastes the current attribute to the label
        corresponding to the insertor. The pasted
        attribute may be a brand new one or a new version
        of the previous one.

        :type intoAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type aRelocTationable: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_Paste(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_TDataXtd_Presentation self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_BackupCopy(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TDataXtd_Presentation self) -> char const *

        :rtype: const char *

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_Presentation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_Presentation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetDriverGUID(self, *args):
        """
        GetDriverGUID(Handle_TDataXtd_Presentation self) -> Standard_GUID

        Returns the GUID of the driver managing display of associated AIS object

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_GetDriverGUID(self, *args)


    def SetDriverGUID(self, *args):
        """
        SetDriverGUID(Handle_TDataXtd_Presentation self, Standard_GUID theGUID)

        Sets the GUID of the driver managing display of associated AIS object

        :type theGUID: OCC.wrapper.Standard.Standard_GUID

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_SetDriverGUID(self, *args)


    def IsDisplayed(self, *args):
        """
        IsDisplayed(Handle_TDataXtd_Presentation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_IsDisplayed(self, *args)


    def HasOwnMaterial(self, *args):
        """
        HasOwnMaterial(Handle_TDataXtd_Presentation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_HasOwnMaterial(self, *args)


    def HasOwnTransparency(self, *args):
        """
        HasOwnTransparency(Handle_TDataXtd_Presentation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_HasOwnTransparency(self, *args)


    def HasOwnColor(self, *args):
        """
        HasOwnColor(Handle_TDataXtd_Presentation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_HasOwnColor(self, *args)


    def HasOwnWidth(self, *args):
        """
        HasOwnWidth(Handle_TDataXtd_Presentation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_HasOwnWidth(self, *args)


    def HasOwnMode(self, *args):
        """
        HasOwnMode(Handle_TDataXtd_Presentation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_HasOwnMode(self, *args)


    def HasOwnSelectionMode(self, *args):
        """
        HasOwnSelectionMode(Handle_TDataXtd_Presentation self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_HasOwnSelectionMode(self, *args)


    def SetDisplayed(self, *args):
        """
        SetDisplayed(Handle_TDataXtd_Presentation self, Standard_Boolean const theIsDisplayed)

        :type theIsDisplayed: bool

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_SetDisplayed(self, *args)


    def SetMaterialIndex(self, *args):
        """
        SetMaterialIndex(Handle_TDataXtd_Presentation self, Standard_Integer const theMaterialIndex)

        :type theMaterialIndex: int

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_SetMaterialIndex(self, *args)


    def SetTransparency(self, *args):
        """
        SetTransparency(Handle_TDataXtd_Presentation self, Standard_Real const theValue)

        :type theValue: float

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_SetTransparency(self, *args)


    def SetColor(self, *args):
        """
        SetColor(Handle_TDataXtd_Presentation self, Quantity_NameOfColor const theColor)

        :type theColor: OCC.wrapper.Quantity.Quantity_NameOfColor

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_SetColor(self, *args)


    def SetWidth(self, *args):
        """
        SetWidth(Handle_TDataXtd_Presentation self, Standard_Real const theWidth)

        :type theWidth: float

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_SetWidth(self, *args)


    def SetMode(self, *args):
        """
        SetMode(Handle_TDataXtd_Presentation self, Standard_Integer const theMode)

        :type theMode: int

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_SetMode(self, *args)


    def SetSelectionMode(self, *args):
        """
        SetSelectionMode(Handle_TDataXtd_Presentation self, Standard_Integer const theSelectionMode)

        :type theSelectionMode: int

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_SetSelectionMode(self, *args)


    def MaterialIndex(self, *args):
        """
        MaterialIndex(Handle_TDataXtd_Presentation self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_MaterialIndex(self, *args)


    def Transparency(self, *args):
        """
        Transparency(Handle_TDataXtd_Presentation self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_Transparency(self, *args)


    def Color(self, *args):
        """
        Color(Handle_TDataXtd_Presentation self) -> Quantity_NameOfColor

        :rtype: OCC.wrapper.Quantity.Quantity_NameOfColor

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_Color(self, *args)


    def Width(self, *args):
        """
        Width(Handle_TDataXtd_Presentation self) -> Standard_Real

        :rtype: OCC.wrapper.Standard.Standard_Real

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_Width(self, *args)


    def Mode(self, *args):
        """
        Mode(Handle_TDataXtd_Presentation self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_Mode(self, *args)


    def SelectionMode(self, *args):
        """
        SelectionMode(Handle_TDataXtd_Presentation self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_SelectionMode(self, *args)


    def UnsetMaterial(self, *args):
        """UnsetMaterial(Handle_TDataXtd_Presentation self)"""
        return _TDataXtd.Handle_TDataXtd_Presentation_UnsetMaterial(self, *args)


    def UnsetTransparency(self, *args):
        """UnsetTransparency(Handle_TDataXtd_Presentation self)"""
        return _TDataXtd.Handle_TDataXtd_Presentation_UnsetTransparency(self, *args)


    def UnsetColor(self, *args):
        """UnsetColor(Handle_TDataXtd_Presentation self)"""
        return _TDataXtd.Handle_TDataXtd_Presentation_UnsetColor(self, *args)


    def UnsetWidth(self, *args):
        """UnsetWidth(Handle_TDataXtd_Presentation self)"""
        return _TDataXtd.Handle_TDataXtd_Presentation_UnsetWidth(self, *args)


    def UnsetMode(self, *args):
        """UnsetMode(Handle_TDataXtd_Presentation self)"""
        return _TDataXtd.Handle_TDataXtd_Presentation_UnsetMode(self, *args)


    def UnsetSelectionMode(self, *args):
        """UnsetSelectionMode(Handle_TDataXtd_Presentation self)"""
        return _TDataXtd.Handle_TDataXtd_Presentation_UnsetSelectionMode(self, *args)


    def SetID(self, *args):
        """
        SetID(Handle_TDataXtd_Presentation self, Standard_GUID arg2)
        SetID(Handle_TDataXtd_Presentation self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _TDataXtd.Handle_TDataXtd_Presentation_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_TDataXtd_Presentation self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_TDataXtd_Presentation self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_TDataXtd_Presentation self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_TDataXtd_Presentation self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_TDataXtd_Presentation self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_TDataXtd_Presentation self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_TDataXtd_Presentation self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_TDataXtd_Presentation self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_TDataXtd_Presentation self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_TDataXtd_Presentation self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_TDataXtd_Presentation self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_TDataXtd_Presentation self)

        Something to do after adding an Attribute to a label.


        """
        return _TDataXtd.Handle_TDataXtd_Presentation_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_TDataXtd_Presentation self)

        Something to do before removing an Attribute from
        a label.


        """
        return _TDataXtd.Handle_TDataXtd_Presentation_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_TDataXtd_Presentation self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _TDataXtd.Handle_TDataXtd_Presentation_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_TDataXtd_Presentation self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _TDataXtd.Handle_TDataXtd_Presentation_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_TDataXtd_Presentation self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_TDataXtd_Presentation self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_TDataXtd_Presentation self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_TDataXtd_Presentation self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _TDataXtd.Handle_TDataXtd_Presentation_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_TDataXtd_Presentation self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _TDataXtd.Handle_TDataXtd_Presentation_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_TDataXtd_Presentation self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_IsBackuped(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_TDataXtd_Presentation self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_TDataXtd_Presentation self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_TDataXtd_Presentation self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_TDataXtd_Presentation self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_TDataXtd_Presentation self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_References(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_TDataXtd_Presentation self, Standard_OStream & anOS) -> Standard_OStream &

        Dumps the minimum information about <me> on
        <aStream>.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_Dump(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_TDataXtd_Presentation self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.Handle_TDataXtd_Presentation___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_TDataXtd_Presentation self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_TDataXtd_Presentation self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_TDataXtd_Presentation self)

        Memory deallocator for transient classes


        """
        return _TDataXtd.Handle_TDataXtd_Presentation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TDataXtd_Presentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TDataXtd_Presentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TDataXtd_Presentation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TDataXtd_Presentation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TDataXtd_Presentation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TDataXtd_Presentation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TDataXtd_Presentation self)

        Increments the reference counter of this object


        """
        return _TDataXtd.Handle_TDataXtd_Presentation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TDataXtd_Presentation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Presentation_DecrementRefCounter(self, *args)

Handle_TDataXtd_Presentation_swigregister = _TDataXtd.Handle_TDataXtd_Presentation_swigregister
Handle_TDataXtd_Presentation_swigregister(Handle_TDataXtd_Presentation)

def Handle_TDataXtd_Presentation_DownCast(thing):
    return _TDataXtd.Handle_TDataXtd_Presentation_DownCast(thing)
Handle_TDataXtd_Presentation_DownCast = _TDataXtd.Handle_TDataXtd_Presentation_DownCast

class TDataXtd_Pattern(TDF.TDF_Attribute):
    """a general pattern model"""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TDataXtd_Pattern
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TDataXtd_Pattern(self) 
            return h


    def GetID(*args):
        """
        GetID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _TDataXtd.TDataXtd_Pattern_GetID(*args)

    GetID = staticmethod(GetID)

    def ID(self, *args):
        """
        Returns the ID of the attribute.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.TDataXtd_Pattern_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PatternID(self, *args):
        """
        Returns the ID of the attribute.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.TDataXtd_Pattern_PatternID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NbTrsfs(self, *args):
        """
        NbTrsfs(TDataXtd_Pattern self) -> Standard_Integer

        Give the number of transformation

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.TDataXtd_Pattern_NbTrsfs(self, *args)


    def ComputeTrsfs(self, *args):
        """
        ComputeTrsfs(TDataXtd_Pattern self, NCollection_Array1_gp_Trsf Trsfs)

        Give the transformations

        :type Trsfs: OCC.wrapper.TDataXtd.TDataXtd_Array1OfTrsf

        """
        return _TDataXtd.TDataXtd_Pattern_ComputeTrsfs(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TDataXtd.TDataXtd_Pattern_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TDataXtd.TDataXtd_Pattern_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.TDataXtd_Pattern_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Pattern
TDataXtd_Pattern_swigregister = _TDataXtd.TDataXtd_Pattern_swigregister
TDataXtd_Pattern_swigregister(TDataXtd_Pattern)

def TDataXtd_Pattern_GetID(*args):
    """
    TDataXtd_Pattern_GetID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _TDataXtd.TDataXtd_Pattern_GetID(*args)

def TDataXtd_Pattern_get_type_name(*args):
    """
    TDataXtd_Pattern_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TDataXtd.TDataXtd_Pattern_get_type_name(*args)

def TDataXtd_Pattern_get_type_descriptor(*args):
    """
    TDataXtd_Pattern_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TDataXtd.TDataXtd_Pattern_get_type_descriptor(*args)

class Handle_TDataXtd_Pattern(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TDataXtd_Pattern self)

        Nullify the handle


        """
        return _TDataXtd.Handle_TDataXtd_Pattern_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TDataXtd_Pattern self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TDataXtd_Pattern self, TDataXtd_Pattern thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TDataXtd_Pattern self, Handle_TDataXtd_Pattern theHandle) -> Handle_TDataXtd_Pattern
        assign(Handle_TDataXtd_Pattern self, TDataXtd_Pattern thePtr) -> Handle_TDataXtd_Pattern
        assign(Handle_TDataXtd_Pattern self, Handle_TDataXtd_Pattern theHandle) -> Handle_TDataXtd_Pattern

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TDataXtd_Pattern self) -> TDataXtd_Pattern

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TDataXtd_Pattern self) -> TDataXtd_Pattern

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_Pattern___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TDataXtd_Pattern self) -> TDataXtd_Pattern

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TDataXtd.Handle_TDataXtd_Pattern___ref__(self, *args)


    def __hash__(self):
        return _TDataXtd.Handle_TDataXtd_Pattern___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TDataXtd.Handle_TDataXtd_Pattern___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TDataXtd.new_Handle_TDataXtd_Pattern(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TDataXtd.Handle_TDataXtd_Pattern_DownCast)
    __swig_destroy__ = _TDataXtd.delete_Handle_TDataXtd_Pattern

    def GetID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_Pattern_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ID(self, *args):
        """
        Returns the ID of the attribute.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_Pattern_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def PatternID(self, *args):
        """
        Returns the ID of the attribute.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_Pattern_PatternID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def NbTrsfs(self, *args):
        """
        NbTrsfs(Handle_TDataXtd_Pattern self) -> Standard_Integer

        Give the number of transformation

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_NbTrsfs(self, *args)


    def ComputeTrsfs(self, *args):
        """
        ComputeTrsfs(Handle_TDataXtd_Pattern self, NCollection_Array1_gp_Trsf Trsfs)

        Give the transformations

        :type Trsfs: OCC.wrapper.TDataXtd.TDataXtd_Array1OfTrsf

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_ComputeTrsfs(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TDataXtd_Pattern self) -> char const *

        :rtype: const char *

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_Pattern_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_Pattern_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_TDataXtd_Pattern self, Standard_GUID arg2)
        SetID(Handle_TDataXtd_Pattern self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _TDataXtd.Handle_TDataXtd_Pattern_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_TDataXtd_Pattern self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_TDataXtd_Pattern self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_TDataXtd_Pattern self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_TDataXtd_Pattern self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_TDataXtd_Pattern self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_TDataXtd_Pattern self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_TDataXtd_Pattern self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_TDataXtd_Pattern self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_TDataXtd_Pattern self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_TDataXtd_Pattern self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_TDataXtd_Pattern self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_TDataXtd_Pattern self)

        Something to do after adding an Attribute to a label.


        """
        return _TDataXtd.Handle_TDataXtd_Pattern_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_TDataXtd_Pattern self)

        Something to do before removing an Attribute from
        a label.


        """
        return _TDataXtd.Handle_TDataXtd_Pattern_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_TDataXtd_Pattern self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _TDataXtd.Handle_TDataXtd_Pattern_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_TDataXtd_Pattern self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _TDataXtd.Handle_TDataXtd_Pattern_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_TDataXtd_Pattern self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_TDataXtd_Pattern self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_TDataXtd_Pattern self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_TDataXtd_Pattern self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _TDataXtd.Handle_TDataXtd_Pattern_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_TDataXtd_Pattern self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _TDataXtd.Handle_TDataXtd_Pattern_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_TDataXtd_Pattern self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_TDataXtd_Pattern self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_BackupCopy(self, *args)


    def Restore(self, *args):
        """
        Restore(Handle_TDataXtd_Pattern self, Handle_TDF_Attribute anAttribute)

        Restores the backuped contents from <anAttribute>
        into this one. It is used when aborting a
        transaction.

        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_Restore(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_TDataXtd_Pattern self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_TDataXtd_Pattern self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_TDataXtd_Pattern self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_TDataXtd_Pattern self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_DeltaOnRemoval(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_TDataXtd_Pattern self) -> Handle_TDF_Attribute

        Returns an new empty attribute from the good end
        type. It is used by the copy algorithm.

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_TDataXtd_Pattern self, Handle_TDF_Attribute intoAttribute, Handle_TDF_RelocationTable aRelocationTable)

        This method is different from the "Copy" one,
        because it is used when copying an attribute from
        a source structure into a target structure. This
        method may paste the contents of <me> into
        <intoAttribute>.

        The given pasted attribute can be full or empty of
        its contents. But don't make a NEW! Just set the
        contents!

        It is possible to use <aRelocationTable> to
        get/set the relocation value of a source
        attribute.

        :type intoAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type aRelocationTable: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_Paste(self, *args)


    def References(self, *args):
        """
        References(Handle_TDataXtd_Pattern self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_References(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_TDataXtd_Pattern self, Standard_OStream & anOS) -> Standard_OStream &

        Dumps the minimum information about <me> on
        <aStream>.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_Dump(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_TDataXtd_Pattern self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.Handle_TDataXtd_Pattern___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_TDataXtd_Pattern self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_TDataXtd_Pattern self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_TDataXtd_Pattern self)

        Memory deallocator for transient classes


        """
        return _TDataXtd.Handle_TDataXtd_Pattern_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TDataXtd_Pattern self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TDataXtd_Pattern self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TDataXtd_Pattern self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TDataXtd_Pattern self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TDataXtd_Pattern self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TDataXtd_Pattern self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TDataXtd_Pattern self)

        Increments the reference counter of this object


        """
        return _TDataXtd.Handle_TDataXtd_Pattern_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TDataXtd_Pattern self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Pattern_DecrementRefCounter(self, *args)

Handle_TDataXtd_Pattern_swigregister = _TDataXtd.Handle_TDataXtd_Pattern_swigregister
Handle_TDataXtd_Pattern_swigregister(Handle_TDataXtd_Pattern)

def Handle_TDataXtd_Pattern_DownCast(thing):
    return _TDataXtd.Handle_TDataXtd_Pattern_DownCast(thing)
Handle_TDataXtd_Pattern_DownCast = _TDataXtd.Handle_TDataXtd_Pattern_DownCast

class TDataXtd_Shape(TDF.TDF_Attribute):
    """
    A Shape is associated in the framework with :
    a NamedShape attribute
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TDataXtd_Shape
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TDataXtd_Shape(self) 
            return h


    def Find(*args):
        """
        Find(TDF_Label current, Handle_TDataXtd_Shape S) -> Standard_Boolean

        class methods
        =============
        try to retrieve a Shape attribute at <current> label
        or in  fathers  label of  <current>. Returns True  if
        found and set <S>.

        :type current: OCC.wrapper.TDF.TDF_Label
        :type S: OCC.wrapper.TDataXtd.Handle_TDataXtd_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.TDataXtd_Shape_Find(*args)

    Find = staticmethod(Find)

    def New(*args):
        """
        New(TDF_Label label) -> Handle_TDataXtd_Shape

        Find, or create, a Shape attribute.  the Shape attribute
        is returned. Raises if <label> has attribute.

        :type label: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Shape

        """
        return _TDataXtd.TDataXtd_Shape_New(*args)

    New = staticmethod(New)

    def Set(*args):
        """
        Set(TDF_Label label, TopoDS_Shape shape) -> Handle_TDataXtd_Shape

        Create or update associated NamedShape attribute.  the
        Shape attribute is returned.

        :type label: OCC.wrapper.TDF.TDF_Label
        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Shape

        """
        return _TDataXtd.TDataXtd_Shape_Set(*args)

    Set = staticmethod(Set)

    def Get(*args):
        """
        Get(TDF_Label label) -> TopoDS_Shape

        the Shape from  associated NamedShape attribute
        is returned.

        :type label: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TDataXtd.TDataXtd_Shape_Get(*args)

    Get = staticmethod(Get)

    def GetID(*args):
        """
        GetID() -> Standard_GUID

        Shape methods
        ============

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _TDataXtd.TDataXtd_Shape_GetID(*args)

    GetID = staticmethod(GetID)

    def __init__(self, *args):
        """
        __init__(TDataXtd_Shape self) -> TDataXtd_Shape

        A Shape is associated in the framework with :
        a NamedShape attribute
        """
        this = _TDataXtd.new_TDataXtd_Shape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.TDataXtd_Shape_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(TDataXtd_Shape self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.TDataXtd_Shape_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(TDataXtd_Shape self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.TDataXtd_Shape_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(TDataXtd_Shape self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TDataXtd.TDataXtd_Shape_Paste(self, *args)


    def References(self, *args):
        """
        References(TDataXtd_Shape self, Handle_TDF_DataSet DS)

        :type DS: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _TDataXtd.TDataXtd_Shape_References(self, *args)


    def Dump(self, *args):
        """
        Dump(TDataXtd_Shape self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.TDataXtd_Shape_Dump(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TDataXtd.TDataXtd_Shape_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TDataXtd.TDataXtd_Shape_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.TDataXtd_Shape_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TDataXtd.delete_TDataXtd_Shape
TDataXtd_Shape_swigregister = _TDataXtd.TDataXtd_Shape_swigregister
TDataXtd_Shape_swigregister(TDataXtd_Shape)

def TDataXtd_Shape_Find(*args):
    """
    TDataXtd_Shape_Find(TDF_Label current, Handle_TDataXtd_Shape S) -> Standard_Boolean

    class methods
    =============
    try to retrieve a Shape attribute at <current> label
    or in  fathers  label of  <current>. Returns True  if
    found and set <S>.

    :type current: OCC.wrapper.TDF.TDF_Label
    :type S: OCC.wrapper.TDataXtd.Handle_TDataXtd_Shape
    :rtype: OCC.wrapper.Standard.Standard_Boolean

    """
    return _TDataXtd.TDataXtd_Shape_Find(*args)

def TDataXtd_Shape_New(*args):
    """
    TDataXtd_Shape_New(TDF_Label label) -> Handle_TDataXtd_Shape

    Find, or create, a Shape attribute.  the Shape attribute
    is returned. Raises if <label> has attribute.

    :type label: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Shape

    """
    return _TDataXtd.TDataXtd_Shape_New(*args)

def TDataXtd_Shape_Set(*args):
    """
    TDataXtd_Shape_Set(TDF_Label label, TopoDS_Shape shape) -> Handle_TDataXtd_Shape

    Create or update associated NamedShape attribute.  the
    Shape attribute is returned.

    :type label: OCC.wrapper.TDF.TDF_Label
    :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
    :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Shape

    """
    return _TDataXtd.TDataXtd_Shape_Set(*args)

def TDataXtd_Shape_Get(*args):
    """
    TDataXtd_Shape_Get(TDF_Label label) -> TopoDS_Shape

    the Shape from  associated NamedShape attribute
    is returned.

    :type label: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

    """
    return _TDataXtd.TDataXtd_Shape_Get(*args)

def TDataXtd_Shape_GetID(*args):
    """
    TDataXtd_Shape_GetID() -> Standard_GUID

    Shape methods
    ============

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _TDataXtd.TDataXtd_Shape_GetID(*args)

def TDataXtd_Shape_get_type_name(*args):
    """
    TDataXtd_Shape_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TDataXtd.TDataXtd_Shape_get_type_name(*args)

def TDataXtd_Shape_get_type_descriptor(*args):
    """
    TDataXtd_Shape_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TDataXtd.TDataXtd_Shape_get_type_descriptor(*args)

class Handle_TDataXtd_HArray1OfTrsf(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TDataXtd_HArray1OfTrsf self)

        Nullify the handle


        """
        return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TDataXtd_HArray1OfTrsf self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TDataXtd_HArray1OfTrsf self, TDataXtd_HArray1OfTrsf thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TDataXtd_HArray1OfTrsf self, Handle_TDataXtd_HArray1OfTrsf theHandle) -> Handle_TDataXtd_HArray1OfTrsf
        assign(Handle_TDataXtd_HArray1OfTrsf self, TDataXtd_HArray1OfTrsf thePtr) -> Handle_TDataXtd_HArray1OfTrsf
        assign(Handle_TDataXtd_HArray1OfTrsf self, Handle_TDataXtd_HArray1OfTrsf theHandle) -> Handle_TDataXtd_HArray1OfTrsf

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TDataXtd_HArray1OfTrsf self) -> TDataXtd_HArray1OfTrsf

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TDataXtd_HArray1OfTrsf self) -> TDataXtd_HArray1OfTrsf

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TDataXtd_HArray1OfTrsf self) -> TDataXtd_HArray1OfTrsf

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf___ref__(self, *args)


    def __hash__(self):
        return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TDataXtd.new_Handle_TDataXtd_HArray1OfTrsf(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TDataXtd.Handle_TDataXtd_HArray1OfTrsf_DownCast)
    __swig_destroy__ = _TDataXtd.delete_Handle_TDataXtd_HArray1OfTrsf

    def Array1(self, *args):
        """
        :rtype: OCC.wrapper.TDataXtd.TDataXtd_Array1OfTrsf

        """
        res = _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_Array1(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeArray1(self, *args):
        """
        ChangeArray1(Handle_TDataXtd_HArray1OfTrsf self) -> NCollection_Array1_gp_Trsf

        :rtype: OCC.wrapper.TDataXtd.TDataXtd_Array1OfTrsf

        """
        return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_ChangeArray1(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TDataXtd_HArray1OfTrsf self) -> char const *

        :rtype: const char *

        """
        return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Delete(self, *args):
        """
        Delete(Handle_TDataXtd_HArray1OfTrsf self)

        Memory deallocator for transient classes


        """
        return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TDataXtd_HArray1OfTrsf self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TDataXtd_HArray1OfTrsf self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TDataXtd_HArray1OfTrsf self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TDataXtd_HArray1OfTrsf self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TDataXtd_HArray1OfTrsf self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TDataXtd_HArray1OfTrsf self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TDataXtd_HArray1OfTrsf self)

        Increments the reference counter of this object


        """
        return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TDataXtd_HArray1OfTrsf self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_DecrementRefCounter(self, *args)

Handle_TDataXtd_HArray1OfTrsf_swigregister = _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_swigregister
Handle_TDataXtd_HArray1OfTrsf_swigregister(Handle_TDataXtd_HArray1OfTrsf)

def Handle_TDataXtd_HArray1OfTrsf_DownCast(thing):
    return _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_DownCast(thing)
Handle_TDataXtd_HArray1OfTrsf_DownCast = _TDataXtd.Handle_TDataXtd_HArray1OfTrsf_DownCast

class TDataXtd_PatternStd(TDataXtd_Pattern):
    """
    to create a PatternStd
    (LinearPattern, CircularPattern, RectangularPattern,
    RadialCircularPattern, MirrorPattern)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    @property
    def handle(self):
        """
        Returns a handle of the object. The python ownership of the object is transferred to the handle.

        :rtype: Handle_TDataXtd_PatternStd
        """
        try:
            return self.__handle__
        except AttributeError:
            self.__handle__ = h = Handle_TDataXtd_PatternStd(self) 
            return h


    def GetPatternID(*args):
        """
        GetPatternID() -> Standard_GUID

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        return _TDataXtd.TDataXtd_PatternStd_GetPatternID(*args)

    GetPatternID = staticmethod(GetPatternID)

    def Set(*args):
        """
        Set(TDF_Label label) -> Handle_TDataXtd_PatternStd

        Find, or  create,  a PatternStd  attribute

        :type label: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_PatternStd

        """
        return _TDataXtd.TDataXtd_PatternStd_Set(*args)

    Set = staticmethod(Set)

    def __init__(self, *args):
        """
        __init__(TDataXtd_PatternStd self) -> TDataXtd_PatternStd

        to create a PatternStd
        (LinearPattern, CircularPattern, RectangularPattern,
        RadialCircularPattern, MirrorPattern)
        """
        this = _TDataXtd.new_TDataXtd_PatternStd(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.handle




    def Signature(self, *args):
        """
        Signature(TDataXtd_PatternStd self, Standard_Integer const signature)
        Signature(TDataXtd_PatternStd self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.TDataXtd_PatternStd_Signature(self, *args)


    def Axis1(self, *args):
        """
        Axis1(TDataXtd_PatternStd self, Handle_TNaming_NamedShape Axis1)
        Axis1(TDataXtd_PatternStd self) -> Handle_TNaming_NamedShape

        :rtype: OCC.wrapper.TNaming.Handle_TNaming_NamedShape

        """
        return _TDataXtd.TDataXtd_PatternStd_Axis1(self, *args)


    def Axis2(self, *args):
        """
        Axis2(TDataXtd_PatternStd self, Handle_TNaming_NamedShape Axis2)
        Axis2(TDataXtd_PatternStd self) -> Handle_TNaming_NamedShape

        :rtype: OCC.wrapper.TNaming.Handle_TNaming_NamedShape

        """
        return _TDataXtd.TDataXtd_PatternStd_Axis2(self, *args)


    def Axis1Reversed(self, *args):
        """
        Axis1Reversed(TDataXtd_PatternStd self, Standard_Boolean const Axis1Reversed)
        Axis1Reversed(TDataXtd_PatternStd self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.TDataXtd_PatternStd_Axis1Reversed(self, *args)


    def Axis2Reversed(self, *args):
        """
        Axis2Reversed(TDataXtd_PatternStd self, Standard_Boolean const Axis2Reversed)
        Axis2Reversed(TDataXtd_PatternStd self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.TDataXtd_PatternStd_Axis2Reversed(self, *args)


    def Value1(self, *args):
        """
        Value1(TDataXtd_PatternStd self, Handle_TDataStd_Real value)
        Value1(TDataXtd_PatternStd self) -> Handle_TDataStd_Real

        :rtype: OCC.wrapper.TDataStd.Handle_TDataStd_Real

        """
        return _TDataXtd.TDataXtd_PatternStd_Value1(self, *args)


    def Value2(self, *args):
        """
        Value2(TDataXtd_PatternStd self, Handle_TDataStd_Real value)
        Value2(TDataXtd_PatternStd self) -> Handle_TDataStd_Real

        :rtype: OCC.wrapper.TDataStd.Handle_TDataStd_Real

        """
        return _TDataXtd.TDataXtd_PatternStd_Value2(self, *args)


    def NbInstances1(self, *args):
        """
        NbInstances1(TDataXtd_PatternStd self, Handle_TDataStd_Integer NbInstances1)
        NbInstances1(TDataXtd_PatternStd self) -> Handle_TDataStd_Integer

        :rtype: OCC.wrapper.TDataStd.Handle_TDataStd_Integer

        """
        return _TDataXtd.TDataXtd_PatternStd_NbInstances1(self, *args)


    def NbInstances2(self, *args):
        """
        NbInstances2(TDataXtd_PatternStd self, Handle_TDataStd_Integer NbInstances2)
        NbInstances2(TDataXtd_PatternStd self) -> Handle_TDataStd_Integer

        :rtype: OCC.wrapper.TDataStd.Handle_TDataStd_Integer

        """
        return _TDataXtd.TDataXtd_PatternStd_NbInstances2(self, *args)


    def Mirror(self, *args):
        """
        Mirror(TDataXtd_PatternStd self, Handle_TNaming_NamedShape plane)
        Mirror(TDataXtd_PatternStd self) -> Handle_TNaming_NamedShape

        :rtype: OCC.wrapper.TNaming.Handle_TNaming_NamedShape

        """
        return _TDataXtd.TDataXtd_PatternStd_Mirror(self, *args)


    def NbTrsfs(self, *args):
        """
        NbTrsfs(TDataXtd_PatternStd self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.TDataXtd_PatternStd_NbTrsfs(self, *args)


    def ComputeTrsfs(self, *args):
        """
        ComputeTrsfs(TDataXtd_PatternStd self, NCollection_Array1_gp_Trsf Trsfs)

        :type Trsfs: OCC.wrapper.TDataXtd.TDataXtd_Array1OfTrsf

        """
        return _TDataXtd.TDataXtd_PatternStd_ComputeTrsfs(self, *args)


    def PatternID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.TDataXtd_PatternStd_PatternID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(TDataXtd_PatternStd self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.TDataXtd_PatternStd_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(TDataXtd_PatternStd self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.TDataXtd_PatternStd_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(TDataXtd_PatternStd self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TDataXtd.TDataXtd_PatternStd_Paste(self, *args)


    def References(self, *args):
        """
        References(TDataXtd_PatternStd self, Handle_TDF_DataSet aDataSet)

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _TDataXtd.TDataXtd_PatternStd_References(self, *args)


    def Dump(self, *args):
        """
        Dump(TDataXtd_PatternStd self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.TDataXtd_PatternStd_Dump(self, *args)


    def get_type_name(*args):
        """
        get_type_name() -> char const *

        :rtype: const char *

        """
        return _TDataXtd.TDataXtd_PatternStd_get_type_name(*args)

    get_type_name = staticmethod(get_type_name)

    def get_type_descriptor(*args):
        """
        get_type_descriptor() -> Handle_Standard_Type

        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        return _TDataXtd.TDataXtd_PatternStd_get_type_descriptor(*args)

    get_type_descriptor = staticmethod(get_type_descriptor)

    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.TDataXtd_PatternStd_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res


    __swig_destroy__ = _TDataXtd.delete_TDataXtd_PatternStd
TDataXtd_PatternStd_swigregister = _TDataXtd.TDataXtd_PatternStd_swigregister
TDataXtd_PatternStd_swigregister(TDataXtd_PatternStd)

def TDataXtd_PatternStd_GetPatternID(*args):
    """
    TDataXtd_PatternStd_GetPatternID() -> Standard_GUID

    :rtype: OCC.wrapper.Standard.Standard_GUID

    """
    return _TDataXtd.TDataXtd_PatternStd_GetPatternID(*args)

def TDataXtd_PatternStd_Set(*args):
    """
    TDataXtd_PatternStd_Set(TDF_Label label) -> Handle_TDataXtd_PatternStd

    Find, or  create,  a PatternStd  attribute

    :type label: OCC.wrapper.TDF.TDF_Label
    :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_PatternStd

    """
    return _TDataXtd.TDataXtd_PatternStd_Set(*args)

def TDataXtd_PatternStd_get_type_name(*args):
    """
    TDataXtd_PatternStd_get_type_name() -> char const *

    :rtype: const char *

    """
    return _TDataXtd.TDataXtd_PatternStd_get_type_name(*args)

def TDataXtd_PatternStd_get_type_descriptor(*args):
    """
    TDataXtd_PatternStd_get_type_descriptor() -> Handle_Standard_Type

    :rtype: OCC.wrapper.Standard.Handle_Standard_Type

    """
    return _TDataXtd.TDataXtd_PatternStd_get_type_descriptor(*args)

class Handle_TDataXtd_PatternStd(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TDataXtd_PatternStd self)

        Nullify the handle


        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TDataXtd_PatternStd self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TDataXtd_PatternStd self, TDataXtd_PatternStd thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TDataXtd_PatternStd self, Handle_TDataXtd_PatternStd theHandle) -> Handle_TDataXtd_PatternStd
        assign(Handle_TDataXtd_PatternStd self, TDataXtd_PatternStd thePtr) -> Handle_TDataXtd_PatternStd
        assign(Handle_TDataXtd_PatternStd self, Handle_TDataXtd_PatternStd theHandle) -> Handle_TDataXtd_PatternStd

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TDataXtd_PatternStd self) -> TDataXtd_PatternStd

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TDataXtd_PatternStd self) -> TDataXtd_PatternStd

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TDataXtd_PatternStd self) -> TDataXtd_PatternStd

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd___ref__(self, *args)


    def __hash__(self):
        return _TDataXtd.Handle_TDataXtd_PatternStd___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TDataXtd.Handle_TDataXtd_PatternStd___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TDataXtd.new_Handle_TDataXtd_PatternStd(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TDataXtd.Handle_TDataXtd_PatternStd_DownCast)
    __swig_destroy__ = _TDataXtd.delete_Handle_TDataXtd_PatternStd

    def GetPatternID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_PatternStd_GetPatternID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_TDataXtd_PatternStd self, TDF_Label label) -> Handle_TDataXtd_PatternStd

        Find, or  create,  a PatternStd  attribute

        :type label: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_PatternStd

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_Set(self, *args)


    def Signature(self, *args):
        """
        Signature(Handle_TDataXtd_PatternStd self, Standard_Integer const signature)
        Signature(Handle_TDataXtd_PatternStd self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_Signature(self, *args)


    def Axis1(self, *args):
        """
        Axis1(Handle_TDataXtd_PatternStd self, Handle_TNaming_NamedShape Axis1)
        Axis1(Handle_TDataXtd_PatternStd self) -> Handle_TNaming_NamedShape

        :rtype: OCC.wrapper.TNaming.Handle_TNaming_NamedShape

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_Axis1(self, *args)


    def Axis2(self, *args):
        """
        Axis2(Handle_TDataXtd_PatternStd self, Handle_TNaming_NamedShape Axis2)
        Axis2(Handle_TDataXtd_PatternStd self) -> Handle_TNaming_NamedShape

        :rtype: OCC.wrapper.TNaming.Handle_TNaming_NamedShape

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_Axis2(self, *args)


    def Axis1Reversed(self, *args):
        """
        Axis1Reversed(Handle_TDataXtd_PatternStd self, Standard_Boolean const Axis1Reversed)
        Axis1Reversed(Handle_TDataXtd_PatternStd self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_Axis1Reversed(self, *args)


    def Axis2Reversed(self, *args):
        """
        Axis2Reversed(Handle_TDataXtd_PatternStd self, Standard_Boolean const Axis2Reversed)
        Axis2Reversed(Handle_TDataXtd_PatternStd self) -> Standard_Boolean

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_Axis2Reversed(self, *args)


    def Value1(self, *args):
        """
        Value1(Handle_TDataXtd_PatternStd self, Handle_TDataStd_Real value)
        Value1(Handle_TDataXtd_PatternStd self) -> Handle_TDataStd_Real

        :rtype: OCC.wrapper.TDataStd.Handle_TDataStd_Real

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_Value1(self, *args)


    def Value2(self, *args):
        """
        Value2(Handle_TDataXtd_PatternStd self, Handle_TDataStd_Real value)
        Value2(Handle_TDataXtd_PatternStd self) -> Handle_TDataStd_Real

        :rtype: OCC.wrapper.TDataStd.Handle_TDataStd_Real

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_Value2(self, *args)


    def NbInstances1(self, *args):
        """
        NbInstances1(Handle_TDataXtd_PatternStd self, Handle_TDataStd_Integer NbInstances1)
        NbInstances1(Handle_TDataXtd_PatternStd self) -> Handle_TDataStd_Integer

        :rtype: OCC.wrapper.TDataStd.Handle_TDataStd_Integer

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_NbInstances1(self, *args)


    def NbInstances2(self, *args):
        """
        NbInstances2(Handle_TDataXtd_PatternStd self, Handle_TDataStd_Integer NbInstances2)
        NbInstances2(Handle_TDataXtd_PatternStd self) -> Handle_TDataStd_Integer

        :rtype: OCC.wrapper.TDataStd.Handle_TDataStd_Integer

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_NbInstances2(self, *args)


    def Mirror(self, *args):
        """
        Mirror(Handle_TDataXtd_PatternStd self, Handle_TNaming_NamedShape plane)
        Mirror(Handle_TDataXtd_PatternStd self) -> Handle_TNaming_NamedShape

        :rtype: OCC.wrapper.TNaming.Handle_TNaming_NamedShape

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_Mirror(self, *args)


    def NbTrsfs(self, *args):
        """
        NbTrsfs(Handle_TDataXtd_PatternStd self) -> Standard_Integer

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_NbTrsfs(self, *args)


    def ComputeTrsfs(self, *args):
        """
        ComputeTrsfs(Handle_TDataXtd_PatternStd self, NCollection_Array1_gp_Trsf Trsfs)

        :type Trsfs: OCC.wrapper.TDataXtd.TDataXtd_Array1OfTrsf

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_ComputeTrsfs(self, *args)


    def PatternID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_PatternStd_PatternID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_TDataXtd_PatternStd self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_TDataXtd_PatternStd self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_TDataXtd_PatternStd self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_Paste(self, *args)


    def References(self, *args):
        """
        References(Handle_TDataXtd_PatternStd self, Handle_TDF_DataSet aDataSet)

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_References(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_TDataXtd_PatternStd self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_Dump(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TDataXtd_PatternStd self) -> char const *

        :rtype: const char *

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_PatternStd_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_PatternStd_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def GetID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_PatternStd_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ID(self, *args):
        """
        Returns the ID of the attribute.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_PatternStd_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_TDataXtd_PatternStd self, Standard_GUID arg2)
        SetID(Handle_TDataXtd_PatternStd self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_TDataXtd_PatternStd self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_TDataXtd_PatternStd self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_TDataXtd_PatternStd self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_TDataXtd_PatternStd self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_TDataXtd_PatternStd self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_TDataXtd_PatternStd self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_TDataXtd_PatternStd self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_TDataXtd_PatternStd self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_TDataXtd_PatternStd self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_TDataXtd_PatternStd self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_TDataXtd_PatternStd self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_TDataXtd_PatternStd self)

        Something to do after adding an Attribute to a label.


        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_TDataXtd_PatternStd self)

        Something to do before removing an Attribute from
        a label.


        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_TDataXtd_PatternStd self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_TDataXtd_PatternStd self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_TDataXtd_PatternStd self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_TDataXtd_PatternStd self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_TDataXtd_PatternStd self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_TDataXtd_PatternStd self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_TDataXtd_PatternStd self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_TDataXtd_PatternStd self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_TDataXtd_PatternStd self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_TDataXtd_PatternStd self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_TDataXtd_PatternStd self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_TDataXtd_PatternStd self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_TDataXtd_PatternStd self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_DeltaOnRemoval(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_TDataXtd_PatternStd self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_TDataXtd_PatternStd self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_TDataXtd_PatternStd self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_TDataXtd_PatternStd self)

        Memory deallocator for transient classes


        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TDataXtd_PatternStd self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TDataXtd_PatternStd self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TDataXtd_PatternStd self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TDataXtd_PatternStd self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TDataXtd_PatternStd self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TDataXtd_PatternStd self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TDataXtd_PatternStd self)

        Increments the reference counter of this object


        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TDataXtd_PatternStd self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_PatternStd_DecrementRefCounter(self, *args)

Handle_TDataXtd_PatternStd_swigregister = _TDataXtd.Handle_TDataXtd_PatternStd_swigregister
Handle_TDataXtd_PatternStd_swigregister(Handle_TDataXtd_PatternStd)

def Handle_TDataXtd_PatternStd_DownCast(thing):
    return _TDataXtd.Handle_TDataXtd_PatternStd_DownCast(thing)
Handle_TDataXtd_PatternStd_DownCast = _TDataXtd.Handle_TDataXtd_PatternStd_DownCast

class TDataXtd_(object):
    """
    This  package  defines  extension of standard attributes for
    modelling  (mainly for work with geometry).
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def IDList(*args):
        """
        IDList(NCollection_List_Standard_GUID anIDList)

        Appends to <anIDList> the list of the attributes
        IDs of this package. CAUTION: <anIDList> is NOT
        cleared before use.
        Print of TDataExt enumeration
        =============================

        :type anIDList: OCC.wrapper.TDF.TDF_IDList

        """
        return _TDataXtd.TDataXtd__IDList(*args)

    IDList = staticmethod(IDList)

    def Print(*args):
        """
        Print(TDataXtd_GeometryEnum const GEO, Standard_OStream & S) -> Standard_OStream
        Print(TDataXtd_ConstraintEnum const CTR, Standard_OStream & S) -> Standard_OStream &

        Prints the name of the constraint <CTR> as a String on
        the Stream <S> and returns <S>.

        :type CTR: OCC.wrapper.TDataXtd.TDataXtd_ConstraintEnum
        :type S: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.TDataXtd__Print(*args)

    Print = staticmethod(Print)

    def __init__(self):
        """
        This  package  defines  extension of standard attributes for
        modelling  (mainly for work with geometry).
        """
        this = _TDataXtd.new_TDataXtd_()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _TDataXtd.delete_TDataXtd_
TDataXtd__swigregister = _TDataXtd.TDataXtd__swigregister
TDataXtd__swigregister(TDataXtd_)

def TDataXtd__IDList(*args):
    """
    TDataXtd__IDList(NCollection_List_Standard_GUID anIDList)

    Appends to <anIDList> the list of the attributes
    IDs of this package. CAUTION: <anIDList> is NOT
    cleared before use.
    Print of TDataExt enumeration
    =============================

    :type anIDList: OCC.wrapper.TDF.TDF_IDList

    """
    return _TDataXtd.TDataXtd__IDList(*args)

def TDataXtd__Print(*args):
    """
    Print(TDataXtd_GeometryEnum const GEO, Standard_OStream & S) -> Standard_OStream
    TDataXtd__Print(TDataXtd_ConstraintEnum const CTR, Standard_OStream & S) -> Standard_OStream &

    Prints the name of the constraint <CTR> as a String on
    the Stream <S> and returns <S>.

    :type CTR: OCC.wrapper.TDataXtd.TDataXtd_ConstraintEnum
    :type S: OCC.wrapper.Standard.Standard_OStream
    :rtype: OCC.wrapper.Standard.Standard_OStream

    """
    return _TDataXtd.TDataXtd__Print(*args)

class Handle_TDataXtd_Shape(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TDataXtd_Shape self)

        Nullify the handle


        """
        return _TDataXtd.Handle_TDataXtd_Shape_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TDataXtd_Shape self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TDataXtd.Handle_TDataXtd_Shape_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TDataXtd_Shape self, TDataXtd_Shape thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TDataXtd.Handle_TDataXtd_Shape_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TDataXtd_Shape self, Handle_TDataXtd_Shape theHandle) -> Handle_TDataXtd_Shape
        assign(Handle_TDataXtd_Shape self, TDataXtd_Shape thePtr) -> Handle_TDataXtd_Shape
        assign(Handle_TDataXtd_Shape self, Handle_TDataXtd_Shape theHandle) -> Handle_TDataXtd_Shape

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TDataXtd.Handle_TDataXtd_Shape_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TDataXtd_Shape self) -> TDataXtd_Shape

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_Shape_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TDataXtd_Shape self) -> TDataXtd_Shape

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_Shape___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TDataXtd_Shape self) -> TDataXtd_Shape

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TDataXtd.Handle_TDataXtd_Shape___ref__(self, *args)


    def __hash__(self):
        return _TDataXtd.Handle_TDataXtd_Shape___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TDataXtd.Handle_TDataXtd_Shape___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TDataXtd.new_Handle_TDataXtd_Shape(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TDataXtd.Handle_TDataXtd_Shape_DownCast)
    __swig_destroy__ = _TDataXtd.delete_Handle_TDataXtd_Shape

    def Find(self, *args):
        """
        Find(Handle_TDataXtd_Shape self, TDF_Label current, Handle_TDataXtd_Shape S) -> Standard_Boolean

        class methods
        =============
        try to retrieve a Shape attribute at <current> label
        or in  fathers  label of  <current>. Returns True  if
        found and set <S>.

        :type current: OCC.wrapper.TDF.TDF_Label
        :type S: OCC.wrapper.TDataXtd.Handle_TDataXtd_Shape
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Shape_Find(self, *args)


    def New(self, *args):
        """
        New(Handle_TDataXtd_Shape self, TDF_Label label) -> Handle_TDataXtd_Shape

        Find, or create, a Shape attribute.  the Shape attribute
        is returned. Raises if <label> has attribute.

        :type label: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Shape

        """
        return _TDataXtd.Handle_TDataXtd_Shape_New(self, *args)


    def Set(self, *args):
        """
        Set(Handle_TDataXtd_Shape self, TDF_Label label, TopoDS_Shape shape) -> Handle_TDataXtd_Shape

        Create or update associated NamedShape attribute.  the
        Shape attribute is returned.

        :type label: OCC.wrapper.TDF.TDF_Label
        :type shape: OCC.wrapper.TopoDS.TopoDS_Shape
        :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Shape

        """
        return _TDataXtd.Handle_TDataXtd_Shape_Set(self, *args)


    def Get(self, *args):
        """
        Get(Handle_TDataXtd_Shape self, TDF_Label label) -> TopoDS_Shape

        the Shape from  associated NamedShape attribute
        is returned.

        :type label: OCC.wrapper.TDF.TDF_Label
        :rtype: OCC.wrapper.TopoDS.TopoDS_Shape

        """
        return _TDataXtd.Handle_TDataXtd_Shape_Get(self, *args)


    def GetID(self, *args):
        """
        Shape methods
        ============

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_Shape_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_Shape_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_TDataXtd_Shape self, Handle_TDF_Attribute arg2)

        :type with: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Shape_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_TDataXtd_Shape self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Shape_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_TDataXtd_Shape self, Handle_TDF_Attribute into, Handle_TDF_RelocationTable RT)

        :type into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TDataXtd.Handle_TDataXtd_Shape_Paste(self, *args)


    def References(self, *args):
        """
        References(Handle_TDataXtd_Shape self, Handle_TDF_DataSet DS)

        :type DS: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _TDataXtd.Handle_TDataXtd_Shape_References(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_TDataXtd_Shape self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.Handle_TDataXtd_Shape_Dump(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TDataXtd_Shape self) -> char const *

        :rtype: const char *

        """
        return _TDataXtd.Handle_TDataXtd_Shape_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_Shape_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_Shape_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_TDataXtd_Shape self, Standard_GUID arg2)
        SetID(Handle_TDataXtd_Shape self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _TDataXtd.Handle_TDataXtd_Shape_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_TDataXtd_Shape self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _TDataXtd.Handle_TDataXtd_Shape_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_TDataXtd_Shape self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Shape_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_TDataXtd_Shape self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Shape_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_TDataXtd_Shape self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Shape_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_TDataXtd_Shape self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Shape_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_TDataXtd_Shape self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Shape_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_TDataXtd_Shape self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Shape_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_TDataXtd_Shape self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Shape_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_TDataXtd_Shape self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Shape_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_TDataXtd_Shape self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Shape_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_TDataXtd_Shape self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _TDataXtd.Handle_TDataXtd_Shape_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_TDataXtd_Shape self)

        Something to do after adding an Attribute to a label.


        """
        return _TDataXtd.Handle_TDataXtd_Shape_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_TDataXtd_Shape self)

        Something to do before removing an Attribute from
        a label.


        """
        return _TDataXtd.Handle_TDataXtd_Shape_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_TDataXtd_Shape self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _TDataXtd.Handle_TDataXtd_Shape_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_TDataXtd_Shape self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _TDataXtd.Handle_TDataXtd_Shape_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_TDataXtd_Shape self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Shape_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_TDataXtd_Shape self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Shape_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_TDataXtd_Shape self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Shape_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_TDataXtd_Shape self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _TDataXtd.Handle_TDataXtd_Shape_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_TDataXtd_Shape self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _TDataXtd.Handle_TDataXtd_Shape_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_TDataXtd_Shape self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Shape_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_TDataXtd_Shape self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Shape_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_TDataXtd_Shape self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _TDataXtd.Handle_TDataXtd_Shape_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_TDataXtd_Shape self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _TDataXtd.Handle_TDataXtd_Shape_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_TDataXtd_Shape self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _TDataXtd.Handle_TDataXtd_Shape_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_TDataXtd_Shape self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _TDataXtd.Handle_TDataXtd_Shape_DeltaOnRemoval(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_TDataXtd_Shape self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.Handle_TDataXtd_Shape___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_TDataXtd_Shape self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _TDataXtd.Handle_TDataXtd_Shape_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_TDataXtd_Shape self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _TDataXtd.Handle_TDataXtd_Shape_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_TDataXtd_Shape self)

        Memory deallocator for transient classes


        """
        return _TDataXtd.Handle_TDataXtd_Shape_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TDataXtd_Shape self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TDataXtd_Shape self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Shape_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TDataXtd_Shape self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TDataXtd_Shape self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Shape_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TDataXtd_Shape self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TDataXtd.Handle_TDataXtd_Shape_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TDataXtd_Shape self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Shape_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TDataXtd_Shape self)

        Increments the reference counter of this object


        """
        return _TDataXtd.Handle_TDataXtd_Shape_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TDataXtd_Shape self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Shape_DecrementRefCounter(self, *args)

Handle_TDataXtd_Shape_swigregister = _TDataXtd.Handle_TDataXtd_Shape_swigregister
Handle_TDataXtd_Shape_swigregister(Handle_TDataXtd_Shape)

def Handle_TDataXtd_Shape_DownCast(thing):
    return _TDataXtd.Handle_TDataXtd_Shape_DownCast(thing)
Handle_TDataXtd_Shape_DownCast = _TDataXtd.Handle_TDataXtd_Shape_DownCast

class Handle_TDataXtd_Triangulation(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TDataXtd_Triangulation self)

        Nullify the handle


        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TDataXtd_Triangulation self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TDataXtd_Triangulation self, TDataXtd_Triangulation thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TDataXtd_Triangulation self, Handle_TDataXtd_Triangulation theHandle) -> Handle_TDataXtd_Triangulation
        assign(Handle_TDataXtd_Triangulation self, TDataXtd_Triangulation thePtr) -> Handle_TDataXtd_Triangulation
        assign(Handle_TDataXtd_Triangulation self, Handle_TDataXtd_Triangulation theHandle) -> Handle_TDataXtd_Triangulation

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TDataXtd_Triangulation self) -> TDataXtd_Triangulation

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TDataXtd_Triangulation self) -> TDataXtd_Triangulation

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TDataXtd_Triangulation self) -> TDataXtd_Triangulation

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation___ref__(self, *args)


    def __hash__(self):
        return _TDataXtd.Handle_TDataXtd_Triangulation___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TDataXtd.Handle_TDataXtd_Triangulation___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TDataXtd.new_Handle_TDataXtd_Triangulation(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TDataXtd.Handle_TDataXtd_Triangulation_DownCast)
    __swig_destroy__ = _TDataXtd.delete_Handle_TDataXtd_Triangulation

    def GetID(self, *args):
        """
        Returns the ID of the triangulation attribute.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_Triangulation_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_TDataXtd_Triangulation self, TDF_Label theLabel) -> Handle_TDataXtd_Triangulation
        Set(Handle_TDataXtd_Triangulation self, TDF_Label theLabel, Handle_Poly_Triangulation theTriangulation) -> Handle_TDataXtd_Triangulation
        Set(Handle_TDataXtd_Triangulation self, Handle_Poly_Triangulation theTriangulation)

        Sets the triangulation.

        :type theTriangulation: OCC.wrapper.Poly.Handle_Poly_Triangulation

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_Set(self, *args)


    def Get(self, *args):
        """
        Returns the underlying triangulation.

        :rtype: OCC.wrapper.Poly.Handle_Poly_Triangulation

        """
        res = _TDataXtd.Handle_TDataXtd_Triangulation_Get(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Deflection(self, *args):
        """
        Deflection(Handle_TDataXtd_Triangulation self) -> Standard_Real
        Deflection(Handle_TDataXtd_Triangulation self, Standard_Real const theDeflection)

        Sets the deflection of this triangulation to theDeflection.
        See more on deflection in Polygon2D

        :type theDeflection: float

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_Deflection(self, *args)


    def RemoveUVNodes(self, *args):
        """
        RemoveUVNodes(Handle_TDataXtd_Triangulation self)

        Deallocates the UV nodes.


        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_RemoveUVNodes(self, *args)


    def NbNodes(self, *args):
        """
        NbNodes(Handle_TDataXtd_Triangulation self) -> Standard_Integer

        @return the number of nodes for this triangulation.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_NbNodes(self, *args)


    def NbTriangles(self, *args):
        """
        NbTriangles(Handle_TDataXtd_Triangulation self) -> Standard_Integer

        @return the number of triangles for this triangulation.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_NbTriangles(self, *args)


    def HasUVNodes(self, *args):
        """
        HasUVNodes(Handle_TDataXtd_Triangulation self) -> Standard_Boolean

        @return Standard_True if 2D nodes are associated with 3D nodes for this triangulation.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_HasUVNodes(self, *args)


    def Node(self, *args):
        """
        @return node at the given index.
        Raises Standard_OutOfRange exception if theIndex is less than 1 or greater than NbNodes.

        :type theIndex: int
        :rtype: OCC.wrapper.gp.gp_Pnt

        """
        res = _TDataXtd.Handle_TDataXtd_Triangulation_Node(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetNode(self, *args):
        """
        SetNode(Handle_TDataXtd_Triangulation self, Standard_Integer const theIndex, gp_Pnt theNode)

        The method differs from Poly_Triangulation!
        Sets a node at the given index.
        Raises Standard_OutOfRange exception if theIndex is less than 1 or greater than NbNodes.

        :type theIndex: int
        :type theNode: OCC.wrapper.gp.gp_Pnt

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_SetNode(self, *args)


    def UVNode(self, *args):
        """
        @return UVNode at the given index.
        Raises Standard_OutOfRange exception if theIndex is less than 1 or greater than NbNodes.

        :type theIndex: int
        :rtype: OCC.wrapper.gp.gp_Pnt2d

        """
        res = _TDataXtd.Handle_TDataXtd_Triangulation_UVNode(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetUVNode(self, *args):
        """
        SetUVNode(Handle_TDataXtd_Triangulation self, Standard_Integer const theIndex, gp_Pnt2d theUVNode)

        The method differs from Poly_Triangulation!
        Sets a UVNode at the given index.
        Raises Standard_OutOfRange exception if theIndex is less than 1 or greater than NbNodes.

        :type theIndex: int
        :type theUVNode: OCC.wrapper.gp.gp_Pnt2d

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_SetUVNode(self, *args)


    def Triangle(self, *args):
        """
        @return triangle at the given index.
        Raises Standard_OutOfRange exception if theIndex is less than 1 or greater than NbTriangles.

        :type theIndex: int
        :rtype: OCC.wrapper.Poly.Poly_Triangle

        """
        res = _TDataXtd.Handle_TDataXtd_Triangulation_Triangle(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetTriangle(self, *args):
        """
        SetTriangle(Handle_TDataXtd_Triangulation self, Standard_Integer const theIndex, Poly_Triangle theTriangle)

        The method differs from Poly_Triangulation!
        Sets a triangle at the given index.
        Raises Standard_OutOfRange exception if theIndex is less than 1 or greater than NbTriangles.

        :type theIndex: int
        :type theTriangle: OCC.wrapper.Poly.Poly_Triangle

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_SetTriangle(self, *args)


    def SetNormals(self, *args):
        """
        SetNormals(Handle_TDataXtd_Triangulation self, Handle_TShort_HArray1OfShortReal theNormals)

        Sets the table of node normals.
        Raises exception if length of theNormals != 3 * NbNodes

        :type theNormals: OCC.wrapper.TShort.Handle_TShort_HArray1OfShortReal

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_SetNormals(self, *args)


    def SetNormal(self, *args):
        """
        SetNormal(Handle_TDataXtd_Triangulation self, Standard_Integer const theIndex, gp_Dir theNormal)

        Changes normal at the given index.
        Raises Standard_OutOfRange exception.

        :type theIndex: int
        :type theNormal: OCC.wrapper.gp.gp_Dir

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_SetNormal(self, *args)


    def HasNormals(self, *args):
        """
        HasNormals(Handle_TDataXtd_Triangulation self) -> Standard_Boolean

        Returns Standard_True if nodal normals are defined.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_HasNormals(self, *args)


    def Normal(self, *args):
        """
        Normal(Handle_TDataXtd_Triangulation self, Standard_Integer const theIndex) -> gp_Dir

        @return normal at the given index.
        Raises Standard_OutOfRange exception.

        :type theIndex: int
        :rtype: OCC.wrapper.gp.gp_Dir

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_Normal(self, *args)


    def ID(self, *args):
        """
        Inherited attribute methods

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_Triangulation_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_TDataXtd_Triangulation self, Handle_TDF_Attribute theAttribute)

        :type theAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_TDataXtd_Triangulation self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_TDataXtd_Triangulation self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_TDataXtd_Triangulation self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_Dump(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TDataXtd_Triangulation self) -> char const *

        :rtype: const char *

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_Triangulation_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_Triangulation_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_TDataXtd_Triangulation self, Standard_GUID arg2)
        SetID(Handle_TDataXtd_Triangulation self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_TDataXtd_Triangulation self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_TDataXtd_Triangulation self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_TDataXtd_Triangulation self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_TDataXtd_Triangulation self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_TDataXtd_Triangulation self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_TDataXtd_Triangulation self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_TDataXtd_Triangulation self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_TDataXtd_Triangulation self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_TDataXtd_Triangulation self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_TDataXtd_Triangulation self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_TDataXtd_Triangulation self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_TDataXtd_Triangulation self)

        Something to do after adding an Attribute to a label.


        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_TDataXtd_Triangulation self)

        Something to do before removing an Attribute from
        a label.


        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_TDataXtd_Triangulation self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_TDataXtd_Triangulation self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_TDataXtd_Triangulation self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_TDataXtd_Triangulation self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_TDataXtd_Triangulation self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_TDataXtd_Triangulation self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_TDataXtd_Triangulation self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_TDataXtd_Triangulation self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_TDataXtd_Triangulation self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_TDataXtd_Triangulation self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_TDataXtd_Triangulation self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_TDataXtd_Triangulation self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_TDataXtd_Triangulation self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_TDataXtd_Triangulation self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_References(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_TDataXtd_Triangulation self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_TDataXtd_Triangulation self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_TDataXtd_Triangulation self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_TDataXtd_Triangulation self)

        Memory deallocator for transient classes


        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TDataXtd_Triangulation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TDataXtd_Triangulation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TDataXtd_Triangulation self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TDataXtd_Triangulation self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TDataXtd_Triangulation self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TDataXtd_Triangulation self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TDataXtd_Triangulation self)

        Increments the reference counter of this object


        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TDataXtd_Triangulation self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Triangulation_DecrementRefCounter(self, *args)

Handle_TDataXtd_Triangulation_swigregister = _TDataXtd.Handle_TDataXtd_Triangulation_swigregister
Handle_TDataXtd_Triangulation_swigregister(Handle_TDataXtd_Triangulation)

def Handle_TDataXtd_Triangulation_DownCast(thing):
    return _TDataXtd.Handle_TDataXtd_Triangulation_DownCast(thing)
Handle_TDataXtd_Triangulation_DownCast = _TDataXtd.Handle_TDataXtd_Triangulation_DownCast

class Handle_TDataXtd_Point(object):
    """
    Intrusive smart pointer for use with Standard_Transient class and its descendants.

    This class is similar to boost::intrusive_ptr<>. The reference counter
    is part of the base class (Standard_Transient), thus creation of a handle
    does not require allocation of additional memory for the counter.
    All handles to the same object share the common counter; object is deleted
    when the last handle pointing on it is destroyed. It is safe to create a new
    handle from plain C pointer to the object already pointed by another handle.
    The same object can be referenced by handles of different types (as soon as 
    they are compatible with the object type).

    Handle has type cast operator to const reference to handle to the base
    types, which allows it to be passed by reference in functions accepting 
    reference to handle to base class, without copying.

    By default, the type cast operator is provided also for non-const reference.
    These casts (potentially unsafe) can be disabled by defining macro
    OCCT_HANDLE_NOCAST; if it is defined, generalized copy constructor
    and assignment operators are defined allowing to initialize handle
    of base type from handle to derived type.

    Weak pointers are not supported.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Nullify(self, *args):
        """
        Nullify(Handle_TDataXtd_Point self)

        Nullify the handle


        """
        return _TDataXtd.Handle_TDataXtd_Point_Nullify(self, *args)


    def IsNull(self, *args):
        """
        IsNull(Handle_TDataXtd_Point self) -> bool

        Check for being null

        :rtype: bool

        """
        return _TDataXtd.Handle_TDataXtd_Point_IsNull(self, *args)


    def reset(self, *args):
        """
        reset(Handle_TDataXtd_Point self, TDataXtd_Point thePtr)

        Reset by new pointer

        :type thePtr: T *

        """
        return _TDataXtd.Handle_TDataXtd_Point_reset(self, *args)


    def assign(self, *args):
        """
        assign(Handle_TDataXtd_Point self, Handle_TDataXtd_Point theHandle) -> Handle_TDataXtd_Point
        assign(Handle_TDataXtd_Point self, TDataXtd_Point thePtr) -> Handle_TDataXtd_Point
        assign(Handle_TDataXtd_Point self, Handle_TDataXtd_Point theHandle) -> Handle_TDataXtd_Point

        Move operator

        :type theHandle: handle<T> &&
        :rtype: OCC.wrapper.Standard.handle

        """
        return _TDataXtd.Handle_TDataXtd_Point_assign(self, *args)


    def get(self, *args):
        """
        get(Handle_TDataXtd_Point self) -> TDataXtd_Point

        STL-like cast to pointer to referred object (note non-const).
        @sa std::shared_ptr::get()

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_Point_get(self, *args)


    def __deref__(self, *args):
        """
        __deref__(Handle_TDataXtd_Point self) -> TDataXtd_Point

        Member access operator (note non-const)

        :rtype: T *

        """
        return _TDataXtd.Handle_TDataXtd_Point___deref__(self, *args)


    def __ref__(self, *args):
        """
        __ref__(Handle_TDataXtd_Point self) -> TDataXtd_Point

        Dereferencing operator (note non-const)

        :rtype: T &

        """
        return _TDataXtd.Handle_TDataXtd_Point___ref__(self, *args)


    def __hash__(self):
        return _TDataXtd.Handle_TDataXtd_Point___hash__(self)

    def __eq__(self, *args):
        """
        :rtype: bool
        """
        try:
            return _TDataXtd.Handle_TDataXtd_Point___eq__(self, *args)
        except TypeError:
            return False



    def __init__(self, *args):
        this = _TDataXtd.new_Handle_TDataXtd_Point(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    DownCast = staticmethod(_TDataXtd.Handle_TDataXtd_Point_DownCast)
    __swig_destroy__ = _TDataXtd.delete_Handle_TDataXtd_Point

    def GetID(self, *args):
        """
        class methods
        =============

        Returns the GUID for point attributes.

        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_Point_GetID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Set(self, *args):
        """
        Set(Handle_TDataXtd_Point self, TDF_Label label) -> Handle_TDataXtd_Point
        Set(Handle_TDataXtd_Point self, TDF_Label label, gp_Pnt P) -> Handle_TDataXtd_Point

        Sets the label Label as a point attribute containing the point P.
        If no object is found, a point attribute is created.
        Point methods
        =============

        :type label: OCC.wrapper.TDF.TDF_Label
        :type P: OCC.wrapper.gp.gp_Pnt
        :rtype: OCC.wrapper.TDataXtd.Handle_TDataXtd_Point

        """
        return _TDataXtd.Handle_TDataXtd_Point_Set(self, *args)


    def ID(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Standard_GUID

        """
        res = _TDataXtd.Handle_TDataXtd_Point_ID(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def Restore(self, *args):
        """
        Restore(Handle_TDataXtd_Point self, Handle_TDF_Attribute With)

        :type With: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Point_Restore(self, *args)


    def NewEmpty(self, *args):
        """
        NewEmpty(Handle_TDataXtd_Point self) -> Handle_TDF_Attribute

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Point_NewEmpty(self, *args)


    def Paste(self, *args):
        """
        Paste(Handle_TDataXtd_Point self, Handle_TDF_Attribute Into, Handle_TDF_RelocationTable RT)

        :type Into: OCC.wrapper.TDF.Handle_TDF_Attribute
        :type RT: OCC.wrapper.TDF.Handle_TDF_RelocationTable

        """
        return _TDataXtd.Handle_TDataXtd_Point_Paste(self, *args)


    def Dump(self, *args):
        """
        Dump(Handle_TDataXtd_Point self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.Handle_TDataXtd_Point_Dump(self, *args)


    def get_type_name(self, *args):
        """
        get_type_name(Handle_TDataXtd_Point self) -> char const *

        :rtype: const char *

        """
        return _TDataXtd.Handle_TDataXtd_Point_get_type_name(self, *args)


    def get_type_descriptor(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_Point_get_type_descriptor(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def DynamicType(self, *args):
        """
        :rtype: OCC.wrapper.Standard.Handle_Standard_Type

        """
        res = _TDataXtd.Handle_TDataXtd_Point_DynamicType(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetID(self, *args):
        """
        SetID(Handle_TDataXtd_Point self, Standard_GUID arg2)
        SetID(Handle_TDataXtd_Point self)

        Sets default ID defined in nested class (to be used for attributes having User ID feature).


        """
        return _TDataXtd.Handle_TDataXtd_Point_SetID(self, *args)


    def Label(self, *args):
        """
        Label(Handle_TDataXtd_Point self) -> TDF_Label

        Returns   the   label to which  the   attribute is
        attached. If the  label is not  included in a  DF,
        the label is null. See Label.
        Warning
        If the label is not included in a data
        framework, it is null.
        This function should not be redefined inline.

        :rtype: OCC.wrapper.TDF.TDF_Label

        """
        return _TDataXtd.Handle_TDataXtd_Point_Label(self, *args)


    def Transaction(self, *args):
        """
        Transaction(Handle_TDataXtd_Point self) -> Standard_Integer

        Returns the transaction index in which the
        attribute has been created or modified.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Point_Transaction(self, *args)


    def UntilTransaction(self, *args):
        """
        UntilTransaction(Handle_TDataXtd_Point self) -> Standard_Integer

        Returns the upper transaction index until which
        the attribute is/was valid. This number may
        vary. A removed attribute validity range is
        reduced to its transaction index.

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Point_UntilTransaction(self, *args)


    def IsValid(self, *args):
        """
        IsValid(Handle_TDataXtd_Point self) -> Standard_Boolean

        Returns true if the attribute is valid; i.e. not a
        backuped or removed one.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Point_IsValid(self, *args)


    def IsNew(self, *args):
        """
        IsNew(Handle_TDataXtd_Point self) -> Standard_Boolean

        Returns true if the attribute has no backup

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Point_IsNew(self, *args)


    def IsForgotten(self, *args):
        """
        IsForgotten(Handle_TDataXtd_Point self) -> Standard_Boolean

        Returns true if the attribute forgotten status is
        set.

        ShortCut Methods concerning associated attributes
        =================================================

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Point_IsForgotten(self, *args)


    def IsAttribute(self, *args):
        """
        IsAttribute(Handle_TDataXtd_Point self, Standard_GUID anID) -> Standard_Boolean

        Returns true if it  exists an associated attribute
        of <me> with <anID> as ID.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Point_IsAttribute(self, *args)


    def FindAttribute(self, *args):
        """
        FindAttribute(Handle_TDataXtd_Point self, Standard_GUID anID, Handle_TDF_Attribute anAttribute) -> Standard_Boolean

        Finds an associated  attribute of  <me>, according
        to <anID>.  the returned <anAttribute> is a  valid
        one. The  method  returns  True if   found,  False
        otherwise.   A removed attribute  cannot be found using
        this  method.

        :type anID: OCC.wrapper.Standard.Standard_GUID
        :type anAttribute: OCC.wrapper.TDF.Handle_TDF_Attribute
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Point_FindAttribute(self, *args)


    def AddAttribute(self, *args):
        """
        AddAttribute(Handle_TDataXtd_Point self, Handle_TDF_Attribute other)

        Adds   an   Attribute <other>  to  the   label  of
        <me>.Raises if there is  already  one of the same
        GUID fhan <other>.

        :type other: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Point_AddAttribute(self, *args)


    def ForgetAttribute(self, *args):
        """
        ForgetAttribute(Handle_TDataXtd_Point self, Standard_GUID aguid) -> Standard_Boolean

        Forgets  the Attribute of  GUID <aguid> associated
        to the label of <me>. Be  carefull that if <me> is
        the attribute of <guid>, <me> will have a null label
        after this call.  If  the attribute doesn't  exist
        returns False. Otherwise returns True.

        :type aguid: OCC.wrapper.Standard.Standard_GUID
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Point_ForgetAttribute(self, *args)


    def ForgetAllAttributes(self, *args):
        """
        ForgetAllAttributes(Handle_TDataXtd_Point self, Standard_Boolean const clearChildren)

        Forgets all the  attributes attached to  the label
        of <me>.    Does   it   on  the  sub-labels   if
        <clearChildren> is set  to true.  Of  course, this
        method  is  compatible with Transaction  &  Delta
        mecanisms. Be carefull  that  if <me> will have a
        null label after this call

        :type clearChildren: bool

        """
        return _TDataXtd.Handle_TDataXtd_Point_ForgetAllAttributes(self, *args)


    def AfterAddition(self, *args):
        """
        AfterAddition(Handle_TDataXtd_Point self)

        Something to do after adding an Attribute to a label.


        """
        return _TDataXtd.Handle_TDataXtd_Point_AfterAddition(self, *args)


    def BeforeRemoval(self, *args):
        """
        BeforeRemoval(Handle_TDataXtd_Point self)

        Something to do before removing an Attribute from
        a label.


        """
        return _TDataXtd.Handle_TDataXtd_Point_BeforeRemoval(self, *args)


    def BeforeForget(self, *args):
        """
        BeforeForget(Handle_TDataXtd_Point self)

        Something to do before forgetting an Attribute to a
        label.


        """
        return _TDataXtd.Handle_TDataXtd_Point_BeforeForget(self, *args)


    def AfterResume(self, *args):
        """
        AfterResume(Handle_TDataXtd_Point self)

        Something to do after resuming an Attribute from
        a label.


        """
        return _TDataXtd.Handle_TDataXtd_Point_AfterResume(self, *args)


    def AfterRetrieval(self, *args):
        """
        AfterRetrieval(Handle_TDataXtd_Point self, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do AFTER creation of an attribute by
        persistent-transient translation. The returned
        status says if AfterUndo has been performed (true)
        or if this callback must be called once again
        further (false). If <forceIt> is set to true, the
        method MUST perform and return true. Does nothing
        by default and returns true.

        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Point_AfterRetrieval(self, *args)


    def BeforeUndo(self, *args):
        """
        BeforeUndo(Handle_TDataXtd_Point self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do before applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Point_BeforeUndo(self, *args)


    def AfterUndo(self, *args):
        """
        AfterUndo(Handle_TDataXtd_Point self, Handle_TDF_AttributeDelta anAttDelta, Standard_Boolean const forceIt) -> Standard_Boolean

        Something to do after applying <anAttDelta>. The
        returned status says if AfterUndo has been
        performed (true) or if this callback must be
        called once again further (false). If <forceIt> is
        set to true, the method MUST perform and return
        true. Does nothing by default and returns true.

        :type anAttDelta: OCC.wrapper.TDF.Handle_TDF_AttributeDelta
        :type forceIt: bool
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Point_AfterUndo(self, *args)


    def BeforeCommitTransaction(self, *args):
        """
        BeforeCommitTransaction(Handle_TDataXtd_Point self)

        A callback.
        By default does nothing.
        It is called by TDF_Data::CommitTransaction() method.


        """
        return _TDataXtd.Handle_TDataXtd_Point_BeforeCommitTransaction(self, *args)


    def Backup(self, *args):
        """
        Backup(Handle_TDataXtd_Point self)

        Backups the attribute. The backuped attribute is
        flagged "Backuped" and not "Valid".

        The method does nothing:

        1) If the attribute transaction number is equal to
        the current transaction number (the attribute has
        already been backuped).

        2) If the attribute is not attached to a label.


        """
        return _TDataXtd.Handle_TDataXtd_Point_Backup(self, *args)


    def IsBackuped(self, *args):
        """
        IsBackuped(Handle_TDataXtd_Point self) -> Standard_Boolean

        Returns true if the attribute backup status is
        set. This status is set/unset by the
        Backup() method.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Point_IsBackuped(self, *args)


    def BackupCopy(self, *args):
        """
        BackupCopy(Handle_TDataXtd_Point self) -> Handle_TDF_Attribute

        Copies  the attribute  contents into  a  new other
        attribute. It is used by Backup().

        :rtype: OCC.wrapper.TDF.Handle_TDF_Attribute

        """
        return _TDataXtd.Handle_TDataXtd_Point_BackupCopy(self, *args)


    def DeltaOnAddition(self, *args):
        """
        DeltaOnAddition(Handle_TDataXtd_Point self) -> Handle_TDF_DeltaOnAddition

        Makes an AttributeDelta because <me>
        appeared. The only known use of a redefinition of
        this method is to return a null handle (no delta).

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnAddition

        """
        return _TDataXtd.Handle_TDataXtd_Point_DeltaOnAddition(self, *args)


    def DeltaOnForget(self, *args):
        """
        DeltaOnForget(Handle_TDataXtd_Point self) -> Handle_TDF_DeltaOnForget

        Makes an AttributeDelta because <me> has been
        forgotten.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnForget

        """
        return _TDataXtd.Handle_TDataXtd_Point_DeltaOnForget(self, *args)


    def DeltaOnResume(self, *args):
        """
        DeltaOnResume(Handle_TDataXtd_Point self) -> Handle_TDF_DeltaOnResume

        Makes an AttributeDelta because <me> has been
        resumed.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnResume

        """
        return _TDataXtd.Handle_TDataXtd_Point_DeltaOnResume(self, *args)


    def DeltaOnRemoval(self, *args):
        """
        DeltaOnRemoval(Handle_TDataXtd_Point self) -> Handle_TDF_DeltaOnRemoval

        Makes a DeltaOnRemoval on <me> because <me> has
        disappeared from the DS.

        :rtype: OCC.wrapper.TDF.Handle_TDF_DeltaOnRemoval

        """
        return _TDataXtd.Handle_TDataXtd_Point_DeltaOnRemoval(self, *args)


    def References(self, *args):
        """
        References(Handle_TDataXtd_Point self, Handle_TDF_DataSet aDataSet)

        Adds the first level referenced attributes and labels
        to <aDataSet>.

        For this, use the AddLabel or AddAttribute of
        DataSet.

        If there is none, do not implement the method.

        :type aDataSet: OCC.wrapper.TDF.Handle_TDF_DataSet

        """
        return _TDataXtd.Handle_TDataXtd_Point_References(self, *args)


    def __lshift__(self, *args):
        """
        __lshift__(Handle_TDataXtd_Point self, Standard_OStream & anOS) -> Standard_OStream &

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :rtype: OCC.wrapper.Standard.Standard_OStream

        """
        return _TDataXtd.Handle_TDataXtd_Point___lshift__(self, *args)


    def ExtendedDump(self, *args):
        """
        ExtendedDump(Handle_TDataXtd_Point self, Standard_OStream & anOS, TDF_IDFilter aFilter, NCollection_IndexedMap_Handle_TDF_Attribute_TColStd_MapTransientHasher aMap)

        Dumps the attribute content on <aStream>, using
        <aMap> like this: if an attribute is not in the
        map, first put add it to the map and then dump it.
        Use the map rank instead of dumping each attribute
        field.

        :type anOS: OCC.wrapper.Standard.Standard_OStream
        :type aFilter: OCC.wrapper.TDF.TDF_IDFilter
        :type aMap: OCC.wrapper.TDF.TDF_AttributeIndexedMap

        """
        return _TDataXtd.Handle_TDataXtd_Point_ExtendedDump(self, *args)


    def Forget(self, *args):
        """
        Forget(Handle_TDataXtd_Point self, Standard_Integer const aTransaction)

        Forgets the attribute. <aTransaction> is the
        current transaction in which the forget is done. A
        forgotten attribute is also flagged not "Valid".

        A forgotten attribute is invisible. Set also the
        "Valid" status to False. Obvioulsy, DF cannot
        empty an attribute (this has a semantic
        signification), but can remove it from the
        structure. So, a forgotten attribute is NOT an empty
        one, but a soon DEAD one.

        Should be private.

        :type aTransaction: int

        """
        return _TDataXtd.Handle_TDataXtd_Point_Forget(self, *args)


    def Delete(self, *args):
        """
        Delete(Handle_TDataXtd_Point self)

        Memory deallocator for transient classes


        """
        return _TDataXtd.Handle_TDataXtd_Point_Delete(self, *args)


    def IsInstance(self, *args):
        """
        IsInstance(Handle_TDataXtd_Point self, Handle_Standard_Type theType) -> Standard_Boolean
        IsInstance(Handle_TDataXtd_Point self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns a true value if this is an instance of TypeName.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Point_IsInstance(self, *args)


    def IsKind(self, *args):
        """
        IsKind(Handle_TDataXtd_Point self, Handle_Standard_Type theType) -> Standard_Boolean
        IsKind(Handle_TDataXtd_Point self, Standard_CString const theTypeName) -> Standard_Boolean

        Returns true if this is an instance of TypeName or an
        instance of any class that inherits from TypeName.
        Note that multiple inheritance is not supported by OCCT RTTI mechanism.

        :type theTypeName: OCC.wrapper.Standard.Standard_CString
        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.Handle_TDataXtd_Point_IsKind(self, *args)


    def This(self, *args):
        """
        This(Handle_TDataXtd_Point self) -> Standard_Transient

        Returns non-const pointer to this object (like const_cast).
        For protection against creating handle to objects allocated in stack
        or call from constructor, it will raise exception Standard_ProgramError
        if reference counter is zero.

        :rtype: OCC.wrapper.Standard.Standard_Transient

        """
        return _TDataXtd.Handle_TDataXtd_Point_This(self, *args)


    def GetRefCount(self, *args):
        """
        GetRefCount(Handle_TDataXtd_Point self) -> Standard_Integer

        Get the reference counter of this object

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Point_GetRefCount(self, *args)


    def IncrementRefCounter(self, *args):
        """
        IncrementRefCounter(Handle_TDataXtd_Point self)

        Increments the reference counter of this object


        """
        return _TDataXtd.Handle_TDataXtd_Point_IncrementRefCounter(self, *args)


    def DecrementRefCounter(self, *args):
        """
        DecrementRefCounter(Handle_TDataXtd_Point self) -> Standard_Integer

        Decrements the reference counter of this object;
        returns the decremented value

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.Handle_TDataXtd_Point_DecrementRefCounter(self, *args)

Handle_TDataXtd_Point_swigregister = _TDataXtd.Handle_TDataXtd_Point_swigregister
Handle_TDataXtd_Point_swigregister(Handle_TDataXtd_Point)

def Handle_TDataXtd_Point_DownCast(thing):
    return _TDataXtd.Handle_TDataXtd_Point_DownCast(thing)
Handle_TDataXtd_Point_DownCast = _TDataXtd.Handle_TDataXtd_Point_DownCast

class NCollection_Array1_gp_Trsf(object):
    """
    Purpose:     The class Array1 represents unidimensional arrays 
    of fixed size known at run time. 
    The range of the index is user defined.
    An array1 can be constructed with a "C array".
    This functionality is useful to call methods expecting
    an Array1. It allows to carry the bounds inside the arrays.

    Examples:    Item tab[100]; //  An example with a C array
    Array1OfItem ttab (tab[0],1,100);

    Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

    If you want to reindex an array from 1 to Length do :

    Array1 tab1(tab(tab.Lower()),1,tab.Length());

    Warning:     Programs client of such a class must be independant
    of the range of the first element. Then, a C++ for
    loop must be written like this

    for (i = A.Lower(); i <= A.Upper(); i++)

    Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
    renamed into myDeletable (alike in  the Array2).  For naming
    compatibility the method IsAllocated remained in class along
    with IsDeletable.
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def begin(self, *args):
        """
        begin(NCollection_Array1_gp_Trsf self) -> NCollection_Array1< gp_Trsf >::iterator

        Returns an iterator pointing to the first element in the array.

        :rtype: iterator

        """
        return _TDataXtd.NCollection_Array1_gp_Trsf_begin(self, *args)


    def end(self, *args):
        """
        end(NCollection_Array1_gp_Trsf self) -> NCollection_Array1< gp_Trsf >::iterator

        Returns an iterator referring to the past-the-end element in the array.

        :rtype: iterator

        """
        return _TDataXtd.NCollection_Array1_gp_Trsf_end(self, *args)


    def cbegin(self, *args):
        """
        cbegin(NCollection_Array1_gp_Trsf self) -> NCollection_Array1< gp_Trsf >::const_iterator

        Returns a const iterator pointing to the first element in the array.

        :rtype: const_iterator

        """
        return _TDataXtd.NCollection_Array1_gp_Trsf_cbegin(self, *args)


    def cend(self, *args):
        """
        cend(NCollection_Array1_gp_Trsf self) -> NCollection_Array1< gp_Trsf >::const_iterator

        Returns a const iterator referring to the past-the-end element in the array.

        :rtype: const_iterator

        """
        return _TDataXtd.NCollection_Array1_gp_Trsf_cend(self, *args)


    def __init__(self, *args):
        """
        Purpose:     The class Array1 represents unidimensional arrays 
        of fixed size known at run time. 
        The range of the index is user defined.
        An array1 can be constructed with a "C array".
        This functionality is useful to call methods expecting
        an Array1. It allows to carry the bounds inside the arrays.

        Examples:    Item tab[100]; //  An example with a C array
        Array1OfItem ttab (tab[0],1,100);

        Array1OfItem tttab (ttab(10),10,20); // a slice of ttab

        If you want to reindex an array from 1 to Length do :

        Array1 tab1(tab(tab.Lower()),1,tab.Length());

        Warning:     Programs client of such a class must be independant
        of the range of the first element. Then, a C++ for
        loop must be written like this

        for (i = A.Lower(); i <= A.Upper(); i++)

        Changes:     In  comparison  to  TCollection  the  flag  isAllocated  was
        renamed into myDeletable (alike in  the Array2).  For naming
        compatibility the method IsAllocated remained in class along
        with IsDeletable.
        """
        this = _TDataXtd.new_NCollection_Array1_gp_Trsf(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Init(self, *args):
        """
        Init(NCollection_Array1_gp_Trsf self, gp_Trsf theValue)

        Initialise the items with theValue

        :type theValue: const TheItemType &

        """
        return _TDataXtd.NCollection_Array1_gp_Trsf_Init(self, *args)


    def Size(self, *args):
        """
        Size(NCollection_Array1_gp_Trsf self) -> Standard_Integer

        Size query

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.NCollection_Array1_gp_Trsf_Size(self, *args)


    def Length(self, *args):
        """
        Length(NCollection_Array1_gp_Trsf self) -> Standard_Integer

        Length query (the same)

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.NCollection_Array1_gp_Trsf_Length(self, *args)


    def IsEmpty(self, *args):
        """
        IsEmpty(NCollection_Array1_gp_Trsf self) -> Standard_Boolean

        Return TRUE if array has zero length.

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.NCollection_Array1_gp_Trsf_IsEmpty(self, *args)


    def Lower(self, *args):
        """
        Lower(NCollection_Array1_gp_Trsf self) -> Standard_Integer

        Lower bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.NCollection_Array1_gp_Trsf_Lower(self, *args)


    def Upper(self, *args):
        """
        Upper(NCollection_Array1_gp_Trsf self) -> Standard_Integer

        Upper bound

        :rtype: OCC.wrapper.Standard.Standard_Integer

        """
        return _TDataXtd.NCollection_Array1_gp_Trsf_Upper(self, *args)


    def IsDeletable(self, *args):
        """
        IsDeletable(NCollection_Array1_gp_Trsf self) -> Standard_Boolean

        myDeletable flag

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.NCollection_Array1_gp_Trsf_IsDeletable(self, *args)


    def IsAllocated(self, *args):
        """
        IsAllocated(NCollection_Array1_gp_Trsf self) -> Standard_Boolean

        IsAllocated flag - for naming compatibility

        :rtype: OCC.wrapper.Standard.Standard_Boolean

        """
        return _TDataXtd.NCollection_Array1_gp_Trsf_IsAllocated(self, *args)


    def Assign(self, *args):
        """
        Assign(NCollection_Array1_gp_Trsf self, NCollection_Array1_gp_Trsf theOther) -> NCollection_Array1_gp_Trsf

        Copies data of theOther array to this.
        This array should be pre-allocated and have the same length as theOther;
        otherwise exception Standard_DimensionMismatch is thrown.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TDataXtd.NCollection_Array1_gp_Trsf_Assign(self, *args)


    def Move(self, *args):
        """
        Move(NCollection_Array1_gp_Trsf self, NCollection_Array1_gp_Trsf theOther) -> NCollection_Array1_gp_Trsf

        Move assignment.
        This array will borrow all the data from theOther.
        The moved object will keep pointer to the memory buffer and
        range, but it will not free the buffer on destruction.

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TDataXtd.NCollection_Array1_gp_Trsf_Move(self, *args)


    def assign(self, *args):
        """
        assign(NCollection_Array1_gp_Trsf self, NCollection_Array1_gp_Trsf theOther) -> NCollection_Array1_gp_Trsf
        assign(NCollection_Array1_gp_Trsf self, NCollection_Array1_gp_Trsf theOther) -> NCollection_Array1_gp_Trsf

        Move assignment operator; @sa Move()

        :type theOther: OCC.wrapper.NCollection.NCollection_Array1<TheItemType> &&
        :rtype: OCC.wrapper.NCollection.NCollection_Array1

        """
        return _TDataXtd.NCollection_Array1_gp_Trsf_assign(self, *args)


    def First(self, *args):
        """
        @return first element

        :rtype: const TheItemType &

        """
        res = _TDataXtd.NCollection_Array1_gp_Trsf_First(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeFirst(self, *args):
        """
        ChangeFirst(NCollection_Array1_gp_Trsf self) -> gp_Trsf

        @return first element

        :rtype: TheItemType &

        """
        return _TDataXtd.NCollection_Array1_gp_Trsf_ChangeFirst(self, *args)


    def Last(self, *args):
        """
        @return last element

        :rtype: const TheItemType &

        """
        res = _TDataXtd.NCollection_Array1_gp_Trsf_Last(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeLast(self, *args):
        """
        ChangeLast(NCollection_Array1_gp_Trsf self) -> gp_Trsf

        @return last element

        :rtype: TheItemType &

        """
        return _TDataXtd.NCollection_Array1_gp_Trsf_ChangeLast(self, *args)


    def Value(self, *args):
        """
        Constant value access

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TDataXtd.NCollection_Array1_gp_Trsf_Value(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def ChangeValue(self, *args):
        """
        ChangeValue(NCollection_Array1_gp_Trsf self, Standard_Integer const theIndex) -> gp_Trsf

        Variable value access

        :type theIndex: int
        :rtype: TheItemType &

        """
        return _TDataXtd.NCollection_Array1_gp_Trsf_ChangeValue(self, *args)


    def __call__(self, *args):
        """
        operator() - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TDataXtd.NCollection_Array1_gp_Trsf___call__(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def __getitem__(self, *args):
        """
        operator[] - alias to Value

        :type theIndex: int
        :rtype: const TheItemType &

        """
        res = _TDataXtd.NCollection_Array1_gp_Trsf_at(self, *args)
        try:
            res.__d = self
        except AttributeError:
            pass
        return res



    def SetValue(self, *args):
        """
        SetValue(NCollection_Array1_gp_Trsf self, Standard_Integer const theIndex, gp_Trsf theItem)

        Set value 

        :type theIndex: int
        :type theItem: const TheItemType &

        """
        return _TDataXtd.NCollection_Array1_gp_Trsf_SetValue(self, *args)


    def Resize(self, *args):
        """
        Resize(NCollection_Array1_gp_Trsf self, Standard_Integer const theLower, Standard_Integer const theUpper, Standard_Boolean const theToCopyData)

        Resizes the array to specified bounds.
        No re-allocation will be done if length of array does not change,
        but existing values will not be discarded if theToCopyData set to FALSE.
        @param theLower new lower bound of array
        @param theUpper new upper bound of array
        @param theToCopyData flag to copy existing data into new array

        :type theLower: int
        :type theUpper: int
        :type theToCopyData: bool

        """
        return _TDataXtd.NCollection_Array1_gp_Trsf_Resize(self, *args)

    __swig_destroy__ = _TDataXtd.delete_NCollection_Array1_gp_Trsf
NCollection_Array1_gp_Trsf_swigregister = _TDataXtd.NCollection_Array1_gp_Trsf_swigregister
NCollection_Array1_gp_Trsf_swigregister(NCollection_Array1_gp_Trsf)


try:
	TDataXtd_Array1OfTrsf = NCollection_Array1_gp_Trsf
except NameError:
	pass # does not exist, probably ignored



